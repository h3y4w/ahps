   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"test.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.storeReadCoilData,"ax",%progbits
  20              		.align	2
  21              		.global	storeReadCoilData
  22              		.thumb
  23              		.thumb_func
  25              	storeReadCoilData:
  26              	.LFB0:
  27              		.file 1 "src/test.c"
   1:src/test.c    **** /*
   2:src/test.c    ****  * test.c : To push data on Hash Table as per the function as of now. More intuitive way  is requir
   3:src/test.c    ****  *
   4:src/test.c    ****  *  Created on: 16-Dec-2012
   5:src/test.c    ****  *      Author: chetanpatil
   6:src/test.c    ****  */
   7:src/test.c    **** 
   8:src/test.c    **** #include "modbus.h"
   9:src/test.c    **** 
  10:src/test.c    **** void storeReadCoilData(uint32_t *ptr){
  28              		.loc 1 10 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 70B5     		push	{r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 4, -16
  37              		.cfi_offset 5, -12
  38              		.cfi_offset 6, -8
  39              		.cfi_offset 14, -4
  11:src/test.c    **** 
  12:src/test.c    **** 	int i;
  13:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
  40              		.loc 1 13 0
  41 0002 0068     		ldr	r0, [r0]
  42              	.LVL1:
  14:src/test.c    **** 
  15:src/test.c    **** 	// 32 Bit data is stored
  16:src/test.c    **** 	uint32_t d=0x21117778;
  43              		.loc 1 16 0
  44 0004 47F27871 		movw	r1, #30584
  45 0008 C2F21111 		movt	r1, 8465
  46              	.LVL2:
  17:src/test.c    **** 
  18:src/test.c    **** 	for (i=0;i<10;i++){
  47              		.loc 1 18 0
  48 000c 0024     		movs	r4, #0
  49 000e 06E0     		b	.L2
  50              	.LVL3:
  51              	.L3:
  19:src/test.c    **** 		addData(id++,d++);
  52              		.loc 1 19 0 discriminator 2
  53 0010 451C     		adds	r5, r0, #1
  54              	.LVL4:
  55 0012 4E1C     		adds	r6, r1, #1
  56              	.LVL5:
  57 0014 FFF7FEFF 		bl	addData
  58              	.LVL6:
  18:src/test.c    **** 		addData(id++,d++);
  59              		.loc 1 18 0 discriminator 2
  60 0018 0134     		adds	r4, r4, #1
  61              	.LVL7:
  62              		.loc 1 19 0 discriminator 2
  63 001a 3146     		mov	r1, r6
  64 001c 2846     		mov	r0, r5
  65              	.LVL8:
  66              	.L2:
  18:src/test.c    **** 		addData(id++,d++);
  67              		.loc 1 18 0 discriminator 1
  68 001e 092C     		cmp	r4, #9
  69 0020 F6DD     		ble	.L3
  20:src/test.c    **** 	}
  21:src/test.c    **** 	
  22:src/test.c    **** 	//Print the data stored in HASH MAP
  23:src/test.c    **** //	putData();
  24:src/test.c    **** 	return;
  25:src/test.c    **** }
  70              		.loc 1 25 0
  71 0022 70BD     		pop	{r4, r5, r6, pc}
  72              		.cfi_endproc
  73              	.LFE0:
  75              		.section	.text.storeReadDiscreteInputsData,"ax",%progbits
  76              		.align	2
  77              		.global	storeReadDiscreteInputsData
  78              		.thumb
  79              		.thumb_func
  81              	storeReadDiscreteInputsData:
  82              	.LFB1:
  26:src/test.c    **** 
  27:src/test.c    **** void storeReadDiscreteInputsData(uint32_t *ptr){
  83              		.loc 1 27 0
  84              		.cfi_startproc
  85              		@ args = 0, pretend = 0, frame = 0
  86              		@ frame_needed = 0, uses_anonymous_args = 0
  87              	.LVL9:
  88 0000 70B5     		push	{r4, r5, r6, lr}
  89              	.LCFI1:
  90              		.cfi_def_cfa_offset 16
  91              		.cfi_offset 4, -16
  92              		.cfi_offset 5, -12
  93              		.cfi_offset 6, -8
  94              		.cfi_offset 14, -4
  28:src/test.c    **** 
  29:src/test.c    **** 	int i;
  30:src/test.c    **** 	uint32_t id= 0x2710 | *ptr;
  95              		.loc 1 30 0
  96 0002 0068     		ldr	r0, [r0]
  97              	.LVL10:
  98 0004 40F41C50 		orr	r0, r0, #9984
  99 0008 40F01000 		orr	r0, r0, #16
 100              	.LVL11:
  31:src/test.c    **** 
  32:src/test.c    **** 	// 32 Bit data is stored
  33:src/test.c    **** 	uint32_t d=0x26767678;
 101              		.loc 1 33 0
 102 000c 47F27861 		movw	r1, #30328
 103 0010 C2F27661 		movt	r1, 9846
 104              	.LVL12:
  34:src/test.c    **** 
  35:src/test.c    **** 	for (i=0;i<10;i++){
 105              		.loc 1 35 0
 106 0014 0024     		movs	r4, #0
 107 0016 06E0     		b	.L5
 108              	.LVL13:
 109              	.L6:
  36:src/test.c    **** 		addData(id++,d++);
 110              		.loc 1 36 0 discriminator 2
 111 0018 451C     		adds	r5, r0, #1
 112              	.LVL14:
 113 001a 4E1C     		adds	r6, r1, #1
 114              	.LVL15:
 115 001c FFF7FEFF 		bl	addData
 116              	.LVL16:
  35:src/test.c    **** 		addData(id++,d++);
 117              		.loc 1 35 0 discriminator 2
 118 0020 0134     		adds	r4, r4, #1
 119              	.LVL17:
 120              		.loc 1 36 0 discriminator 2
 121 0022 3146     		mov	r1, r6
 122 0024 2846     		mov	r0, r5
 123              	.LVL18:
 124              	.L5:
  35:src/test.c    **** 		addData(id++,d++);
 125              		.loc 1 35 0 discriminator 1
 126 0026 092C     		cmp	r4, #9
 127 0028 F6DD     		ble	.L6
  37:src/test.c    **** 	}
  38:src/test.c    **** 
  39:src/test.c    **** 	//Print the data stored in HASH MAP
  40:src/test.c    **** //	putData();
  41:src/test.c    **** }
 128              		.loc 1 41 0
 129 002a 70BD     		pop	{r4, r5, r6, pc}
 130              		.cfi_endproc
 131              	.LFE1:
 133              		.section	.text.storeReadHoldingRegistersData,"ax",%progbits
 134              		.align	2
 135              		.global	storeReadHoldingRegistersData
 136              		.thumb
 137              		.thumb_func
 139              	storeReadHoldingRegistersData:
 140              	.LFB2:
  42:src/test.c    **** 
  43:src/test.c    **** void storeReadHoldingRegistersData(uint32_t *ptr){
 141              		.loc 1 43 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
 145              	.LVL19:
 146 0000 70B5     		push	{r4, r5, r6, lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 16
 149              		.cfi_offset 4, -16
 150              		.cfi_offset 5, -12
 151              		.cfi_offset 6, -8
 152              		.cfi_offset 14, -4
  44:src/test.c    **** 
  45:src/test.c    **** 	int i;
  46:src/test.c    **** 	uint32_t id = (0x9C40 | *ptr);
 153              		.loc 1 46 0
 154 0002 0068     		ldr	r0, [r0]
 155              	.LVL20:
 156 0004 40F41C40 		orr	r0, r0, #39936
 157 0008 40F04000 		orr	r0, r0, #64
 158              	.LVL21:
  47:src/test.c    **** 
  48:src/test.c    **** 	// 32 Bit data is stored
  49:src/test.c    **** 	uint32_t d=0x26767677;
 159              		.loc 1 49 0
 160 000c 47F27761 		movw	r1, #30327
 161 0010 C2F27661 		movt	r1, 9846
 162              	.LVL22:
  50:src/test.c    **** 
  51:src/test.c    **** 	for (i=0;i<10;i++){
 163              		.loc 1 51 0
 164 0014 0024     		movs	r4, #0
 165 0016 06E0     		b	.L8
 166              	.LVL23:
 167              	.L9:
  52:src/test.c    **** 		addData(id++,d++);
 168              		.loc 1 52 0 discriminator 2
 169 0018 451C     		adds	r5, r0, #1
 170              	.LVL24:
 171 001a 4E1C     		adds	r6, r1, #1
 172              	.LVL25:
 173 001c FFF7FEFF 		bl	addData
 174              	.LVL26:
  51:src/test.c    **** 		addData(id++,d++);
 175              		.loc 1 51 0 discriminator 2
 176 0020 0134     		adds	r4, r4, #1
 177              	.LVL27:
 178              		.loc 1 52 0 discriminator 2
 179 0022 3146     		mov	r1, r6
 180 0024 2846     		mov	r0, r5
 181              	.LVL28:
 182              	.L8:
  51:src/test.c    **** 		addData(id++,d++);
 183              		.loc 1 51 0 discriminator 1
 184 0026 092C     		cmp	r4, #9
 185 0028 F6DD     		ble	.L9
  53:src/test.c    **** 	}
  54:src/test.c    **** 
  55:src/test.c    **** 	//Print the data stored in HASH MAP
  56:src/test.c    **** //	putData();
  57:src/test.c    **** }
 186              		.loc 1 57 0
 187 002a 70BD     		pop	{r4, r5, r6, pc}
 188              		.cfi_endproc
 189              	.LFE2:
 191              		.section	.text.storeReadInputRegistersData,"ax",%progbits
 192              		.align	2
 193              		.global	storeReadInputRegistersData
 194              		.thumb
 195              		.thumb_func
 197              	storeReadInputRegistersData:
 198              	.LFB3:
  58:src/test.c    **** 
  59:src/test.c    **** void storeReadInputRegistersData(uint32_t *ptr){
 199              		.loc 1 59 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL29:
 204 0000 70B5     		push	{r4, r5, r6, lr}
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 16
 207              		.cfi_offset 4, -16
 208              		.cfi_offset 5, -12
 209              		.cfi_offset 6, -8
 210              		.cfi_offset 14, -4
  60:src/test.c    **** 
  61:src/test.c    **** 	int i;
  62:src/test.c    **** 	uint32_t id = (0x7530 | *ptr);
 211              		.loc 1 62 0
 212 0002 0068     		ldr	r0, [r0]
 213              	.LVL30:
 214 0004 40F4EA40 		orr	r0, r0, #29952
 215 0008 40F03000 		orr	r0, r0, #48
 216              	.LVL31:
  63:src/test.c    **** 
  64:src/test.c    **** 	// 32 Bit data is stored
  65:src/test.c    **** 	uint32_t d=0x26767677;
 217              		.loc 1 65 0
 218 000c 47F27761 		movw	r1, #30327
 219 0010 C2F27661 		movt	r1, 9846
 220              	.LVL32:
  66:src/test.c    **** 
  67:src/test.c    **** 	for (i=0;i<10;i++){
 221              		.loc 1 67 0
 222 0014 0024     		movs	r4, #0
 223 0016 06E0     		b	.L11
 224              	.LVL33:
 225              	.L12:
  68:src/test.c    **** 		addData(id++,d++);
 226              		.loc 1 68 0 discriminator 2
 227 0018 451C     		adds	r5, r0, #1
 228              	.LVL34:
 229 001a 4E1C     		adds	r6, r1, #1
 230              	.LVL35:
 231 001c FFF7FEFF 		bl	addData
 232              	.LVL36:
  67:src/test.c    **** 		addData(id++,d++);
 233              		.loc 1 67 0 discriminator 2
 234 0020 0134     		adds	r4, r4, #1
 235              	.LVL37:
 236              		.loc 1 68 0 discriminator 2
 237 0022 3146     		mov	r1, r6
 238 0024 2846     		mov	r0, r5
 239              	.LVL38:
 240              	.L11:
  67:src/test.c    **** 		addData(id++,d++);
 241              		.loc 1 67 0 discriminator 1
 242 0026 092C     		cmp	r4, #9
 243 0028 F6DD     		ble	.L12
  69:src/test.c    **** 	}
  70:src/test.c    **** 	
  71:src/test.c    **** 	//Print the data stored in HASH MAP
  72:src/test.c    **** //	putData();
  73:src/test.c    **** }
 244              		.loc 1 73 0
 245 002a 70BD     		pop	{r4, r5, r6, pc}
 246              		.cfi_endproc
 247              	.LFE3:
 249              		.section	.text.storeWriteSingleCoilData,"ax",%progbits
 250              		.align	2
 251              		.global	storeWriteSingleCoilData
 252              		.thumb
 253              		.thumb_func
 255              	storeWriteSingleCoilData:
 256              	.LFB4:
  74:src/test.c    **** 
  75:src/test.c    **** void storeWriteSingleCoilData(uint32_t *ptr){
 257              		.loc 1 75 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL39:
 262 0000 70B5     		push	{r4, r5, r6, lr}
 263              	.LCFI4:
 264              		.cfi_def_cfa_offset 16
 265              		.cfi_offset 4, -16
 266              		.cfi_offset 5, -12
 267              		.cfi_offset 6, -8
 268              		.cfi_offset 14, -4
  76:src/test.c    **** 
  77:src/test.c    **** 	int i;
  78:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 269              		.loc 1 78 0
 270 0002 0068     		ldr	r0, [r0]
 271              	.LVL40:
  79:src/test.c    **** 
  80:src/test.c    **** 	// 32 Bit data is stored
  81:src/test.c    **** 	uint32_t d=0x21117778;
 272              		.loc 1 81 0
 273 0004 47F27871 		movw	r1, #30584
 274 0008 C2F21111 		movt	r1, 8465
 275              	.LVL41:
  82:src/test.c    **** 
  83:src/test.c    **** 	for (i=0;i<10;i++){
 276              		.loc 1 83 0
 277 000c 0024     		movs	r4, #0
 278 000e 06E0     		b	.L14
 279              	.LVL42:
 280              	.L15:
  84:src/test.c    **** 		addData(id++,d++);
 281              		.loc 1 84 0 discriminator 2
 282 0010 451C     		adds	r5, r0, #1
 283              	.LVL43:
 284 0012 4E1C     		adds	r6, r1, #1
 285              	.LVL44:
 286 0014 FFF7FEFF 		bl	addData
 287              	.LVL45:
  83:src/test.c    **** 		addData(id++,d++);
 288              		.loc 1 83 0 discriminator 2
 289 0018 0134     		adds	r4, r4, #1
 290              	.LVL46:
 291              		.loc 1 84 0 discriminator 2
 292 001a 3146     		mov	r1, r6
 293 001c 2846     		mov	r0, r5
 294              	.LVL47:
 295              	.L14:
  83:src/test.c    **** 		addData(id++,d++);
 296              		.loc 1 83 0 discriminator 1
 297 001e 092C     		cmp	r4, #9
 298 0020 F6DD     		ble	.L15
  85:src/test.c    **** 	}
  86:src/test.c    **** 	
  87:src/test.c    **** 	//Print the data stored in HASH MAP
  88:src/test.c    **** //	putData();
  89:src/test.c    **** }
 299              		.loc 1 89 0
 300 0022 70BD     		pop	{r4, r5, r6, pc}
 301              		.cfi_endproc
 302              	.LFE4:
 304              		.section	.text.storeWriteSingleRegisterData,"ax",%progbits
 305              		.align	2
 306              		.global	storeWriteSingleRegisterData
 307              		.thumb
 308              		.thumb_func
 310              	storeWriteSingleRegisterData:
 311              	.LFB5:
  90:src/test.c    **** 
  91:src/test.c    **** void storeWriteSingleRegisterData(uint32_t *ptr){
 312              		.loc 1 91 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              	.LVL48:
 317 0000 70B5     		push	{r4, r5, r6, lr}
 318              	.LCFI5:
 319              		.cfi_def_cfa_offset 16
 320              		.cfi_offset 4, -16
 321              		.cfi_offset 5, -12
 322              		.cfi_offset 6, -8
 323              		.cfi_offset 14, -4
  92:src/test.c    **** 
  93:src/test.c    **** 	int i;
  94:src/test.c    **** 	uint32_t id= 0x9c40 | *ptr;
 324              		.loc 1 94 0
 325 0002 0068     		ldr	r0, [r0]
 326              	.LVL49:
 327 0004 40F41C40 		orr	r0, r0, #39936
 328 0008 40F04000 		orr	r0, r0, #64
 329              	.LVL50:
  95:src/test.c    **** 
  96:src/test.c    **** 	// 32 Bit data is stored
  97:src/test.c    **** 	uint32_t d=0x21117778;
 330              		.loc 1 97 0
 331 000c 47F27871 		movw	r1, #30584
 332 0010 C2F21111 		movt	r1, 8465
 333              	.LVL51:
  98:src/test.c    **** 
  99:src/test.c    **** 	for (i=0;i<10;i++){
 334              		.loc 1 99 0
 335 0014 0024     		movs	r4, #0
 336 0016 06E0     		b	.L17
 337              	.LVL52:
 338              	.L18:
 100:src/test.c    **** 		addData(id++,d++);
 339              		.loc 1 100 0 discriminator 2
 340 0018 451C     		adds	r5, r0, #1
 341              	.LVL53:
 342 001a 4E1C     		adds	r6, r1, #1
 343              	.LVL54:
 344 001c FFF7FEFF 		bl	addData
 345              	.LVL55:
  99:src/test.c    **** 		addData(id++,d++);
 346              		.loc 1 99 0 discriminator 2
 347 0020 0134     		adds	r4, r4, #1
 348              	.LVL56:
 349              		.loc 1 100 0 discriminator 2
 350 0022 3146     		mov	r1, r6
 351 0024 2846     		mov	r0, r5
 352              	.LVL57:
 353              	.L17:
  99:src/test.c    **** 		addData(id++,d++);
 354              		.loc 1 99 0 discriminator 1
 355 0026 092C     		cmp	r4, #9
 356 0028 F6DD     		ble	.L18
 101:src/test.c    **** 	}
 102:src/test.c    **** 
 103:src/test.c    **** 	//Print the data stored in HASH MAP
 104:src/test.c    **** //	putData();
 105:src/test.c    **** 
 106:src/test.c    **** }
 357              		.loc 1 106 0
 358 002a 70BD     		pop	{r4, r5, r6, pc}
 359              		.cfi_endproc
 360              	.LFE5:
 362              		.section	.text.storeReadExceptionStatusData,"ax",%progbits
 363              		.align	2
 364              		.global	storeReadExceptionStatusData
 365              		.thumb
 366              		.thumb_func
 368              	storeReadExceptionStatusData:
 369              	.LFB6:
 107:src/test.c    **** 
 108:src/test.c    **** void storeReadExceptionStatusData(uint32_t *ptr){
 370              		.loc 1 108 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              	.LVL58:
 375 0000 70B5     		push	{r4, r5, r6, lr}
 376              	.LCFI6:
 377              		.cfi_def_cfa_offset 16
 378              		.cfi_offset 4, -16
 379              		.cfi_offset 5, -12
 380              		.cfi_offset 6, -8
 381              		.cfi_offset 14, -4
 109:src/test.c    **** 
 110:src/test.c    **** 	int i;
 111:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 382              		.loc 1 111 0
 383 0002 0068     		ldr	r0, [r0]
 384              	.LVL59:
 112:src/test.c    **** 
 113:src/test.c    **** 	// 32 Bit data is stored
 114:src/test.c    **** 	uint32_t d=0x21117778;
 385              		.loc 1 114 0
 386 0004 47F27871 		movw	r1, #30584
 387 0008 C2F21111 		movt	r1, 8465
 388              	.LVL60:
 115:src/test.c    **** 
 116:src/test.c    **** 	for (i=0;i<10;i++){
 389              		.loc 1 116 0
 390 000c 0024     		movs	r4, #0
 391 000e 06E0     		b	.L20
 392              	.LVL61:
 393              	.L21:
 117:src/test.c    **** 		addData(id++,d++);
 394              		.loc 1 117 0 discriminator 2
 395 0010 451C     		adds	r5, r0, #1
 396              	.LVL62:
 397 0012 4E1C     		adds	r6, r1, #1
 398              	.LVL63:
 399 0014 FFF7FEFF 		bl	addData
 400              	.LVL64:
 116:src/test.c    **** 		addData(id++,d++);
 401              		.loc 1 116 0 discriminator 2
 402 0018 0134     		adds	r4, r4, #1
 403              	.LVL65:
 404              		.loc 1 117 0 discriminator 2
 405 001a 3146     		mov	r1, r6
 406 001c 2846     		mov	r0, r5
 407              	.LVL66:
 408              	.L20:
 116:src/test.c    **** 		addData(id++,d++);
 409              		.loc 1 116 0 discriminator 1
 410 001e 092C     		cmp	r4, #9
 411 0020 F6DD     		ble	.L21
 118:src/test.c    **** 	}
 119:src/test.c    **** 
 120:src/test.c    **** 	//putData();
 121:src/test.c    **** 
 122:src/test.c    **** }
 412              		.loc 1 122 0
 413 0022 70BD     		pop	{r4, r5, r6, pc}
 414              		.cfi_endproc
 415              	.LFE6:
 417              		.section	.text.storeWriteMultipleCoilsData,"ax",%progbits
 418              		.align	2
 419              		.global	storeWriteMultipleCoilsData
 420              		.thumb
 421              		.thumb_func
 423              	storeWriteMultipleCoilsData:
 424              	.LFB7:
 123:src/test.c    **** 
 124:src/test.c    **** void storeWriteMultipleCoilsData(uint32_t *ptr){
 425              		.loc 1 124 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              	.LVL67:
 430 0000 70B5     		push	{r4, r5, r6, lr}
 431              	.LCFI7:
 432              		.cfi_def_cfa_offset 16
 433              		.cfi_offset 4, -16
 434              		.cfi_offset 5, -12
 435              		.cfi_offset 6, -8
 436              		.cfi_offset 14, -4
 125:src/test.c    **** 
 126:src/test.c    **** 	int i;
 127:src/test.c    **** 	uint32_t id= 0x0000 | *ptr;
 437              		.loc 1 127 0
 438 0002 0068     		ldr	r0, [r0]
 439              	.LVL68:
 128:src/test.c    **** 
 129:src/test.c    **** 	// 32 Bit data is stored
 130:src/test.c    **** 	uint32_t d=0x21117778;
 440              		.loc 1 130 0
 441 0004 47F27871 		movw	r1, #30584
 442 0008 C2F21111 		movt	r1, 8465
 443              	.LVL69:
 131:src/test.c    **** 
 132:src/test.c    **** 	for (i=0;i<10;i++){
 444              		.loc 1 132 0
 445 000c 0024     		movs	r4, #0
 446 000e 06E0     		b	.L23
 447              	.LVL70:
 448              	.L24:
 133:src/test.c    **** 		addData(id++,d++);
 449              		.loc 1 133 0 discriminator 2
 450 0010 451C     		adds	r5, r0, #1
 451              	.LVL71:
 452 0012 4E1C     		adds	r6, r1, #1
 453              	.LVL72:
 454 0014 FFF7FEFF 		bl	addData
 455              	.LVL73:
 132:src/test.c    **** 		addData(id++,d++);
 456              		.loc 1 132 0 discriminator 2
 457 0018 0134     		adds	r4, r4, #1
 458              	.LVL74:
 459              		.loc 1 133 0 discriminator 2
 460 001a 3146     		mov	r1, r6
 461 001c 2846     		mov	r0, r5
 462              	.LVL75:
 463              	.L23:
 132:src/test.c    **** 		addData(id++,d++);
 464              		.loc 1 132 0 discriminator 1
 465 001e 092C     		cmp	r4, #9
 466 0020 F6DD     		ble	.L24
 134:src/test.c    **** 	}
 135:src/test.c    **** 
 136:src/test.c    **** //	putData();
 137:src/test.c    **** 
 138:src/test.c    **** }
 467              		.loc 1 138 0
 468 0022 70BD     		pop	{r4, r5, r6, pc}
 469              		.cfi_endproc
 470              	.LFE7:
 472              		.section	.text.storeWriteMultipleRegistersData,"ax",%progbits
 473              		.align	2
 474              		.global	storeWriteMultipleRegistersData
 475              		.thumb
 476              		.thumb_func
 478              	storeWriteMultipleRegistersData:
 479              	.LFB8:
 139:src/test.c    **** 
 140:src/test.c    **** void storeWriteMultipleRegistersData(uint32_t *ptr){
 480              		.loc 1 140 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 0
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484              	.LVL76:
 485 0000 70B5     		push	{r4, r5, r6, lr}
 486              	.LCFI8:
 487              		.cfi_def_cfa_offset 16
 488              		.cfi_offset 4, -16
 489              		.cfi_offset 5, -12
 490              		.cfi_offset 6, -8
 491              		.cfi_offset 14, -4
 141:src/test.c    **** 
 142:src/test.c    **** 	int i;
 143:src/test.c    **** 	uint32_t id= 0x9c40 | *ptr;
 492              		.loc 1 143 0
 493 0002 0068     		ldr	r0, [r0]
 494              	.LVL77:
 495 0004 40F41C40 		orr	r0, r0, #39936
 496 0008 40F04000 		orr	r0, r0, #64
 497              	.LVL78:
 144:src/test.c    **** 
 145:src/test.c    **** 	// 32 Bit data is stored
 146:src/test.c    **** 	uint32_t d=0x21117778;
 498              		.loc 1 146 0
 499 000c 47F27871 		movw	r1, #30584
 500 0010 C2F21111 		movt	r1, 8465
 501              	.LVL79:
 147:src/test.c    **** 
 148:src/test.c    **** 	for (i=0;i<10;i++){
 502              		.loc 1 148 0
 503 0014 0024     		movs	r4, #0
 504 0016 06E0     		b	.L26
 505              	.LVL80:
 506              	.L27:
 149:src/test.c    **** 		addData(id++,d++);
 507              		.loc 1 149 0 discriminator 2
 508 0018 451C     		adds	r5, r0, #1
 509              	.LVL81:
 510 001a 4E1C     		adds	r6, r1, #1
 511              	.LVL82:
 512 001c FFF7FEFF 		bl	addData
 513              	.LVL83:
 148:src/test.c    **** 		addData(id++,d++);
 514              		.loc 1 148 0 discriminator 2
 515 0020 0134     		adds	r4, r4, #1
 516              	.LVL84:
 517              		.loc 1 149 0 discriminator 2
 518 0022 3146     		mov	r1, r6
 519 0024 2846     		mov	r0, r5
 520              	.LVL85:
 521              	.L26:
 148:src/test.c    **** 		addData(id++,d++);
 522              		.loc 1 148 0 discriminator 1
 523 0026 092C     		cmp	r4, #9
 524 0028 F6DD     		ble	.L27
 150:src/test.c    **** 	}
 151:src/test.c    **** 
 152:src/test.c    **** //	putData();
 153:src/test.c    **** 
 154:src/test.c    **** }
 525              		.loc 1 154 0
 526 002a 70BD     		pop	{r4, r5, r6, pc}
 527              		.cfi_endproc
 528              	.LFE8:
 530              		.text
 531              	.Letext0:
 532              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 533              		.file 3 "/usr/include/newlib/stdint.h"
 534              		.file 4 "src/modbus.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 test.c
     /tmp/cc7K3oy2.s:20     .text.storeReadCoilData:0000000000000000 $t
     /tmp/cc7K3oy2.s:25     .text.storeReadCoilData:0000000000000000 storeReadCoilData
     /tmp/cc7K3oy2.s:76     .text.storeReadDiscreteInputsData:0000000000000000 $t
     /tmp/cc7K3oy2.s:81     .text.storeReadDiscreteInputsData:0000000000000000 storeReadDiscreteInputsData
     /tmp/cc7K3oy2.s:134    .text.storeReadHoldingRegistersData:0000000000000000 $t
     /tmp/cc7K3oy2.s:139    .text.storeReadHoldingRegistersData:0000000000000000 storeReadHoldingRegistersData
     /tmp/cc7K3oy2.s:192    .text.storeReadInputRegistersData:0000000000000000 $t
     /tmp/cc7K3oy2.s:197    .text.storeReadInputRegistersData:0000000000000000 storeReadInputRegistersData
     /tmp/cc7K3oy2.s:250    .text.storeWriteSingleCoilData:0000000000000000 $t
     /tmp/cc7K3oy2.s:255    .text.storeWriteSingleCoilData:0000000000000000 storeWriteSingleCoilData
     /tmp/cc7K3oy2.s:305    .text.storeWriteSingleRegisterData:0000000000000000 $t
     /tmp/cc7K3oy2.s:310    .text.storeWriteSingleRegisterData:0000000000000000 storeWriteSingleRegisterData
     /tmp/cc7K3oy2.s:363    .text.storeReadExceptionStatusData:0000000000000000 $t
     /tmp/cc7K3oy2.s:368    .text.storeReadExceptionStatusData:0000000000000000 storeReadExceptionStatusData
     /tmp/cc7K3oy2.s:418    .text.storeWriteMultipleCoilsData:0000000000000000 $t
     /tmp/cc7K3oy2.s:423    .text.storeWriteMultipleCoilsData:0000000000000000 storeWriteMultipleCoilsData
     /tmp/cc7K3oy2.s:473    .text.storeWriteMultipleRegistersData:0000000000000000 $t
     /tmp/cc7K3oy2.s:478    .text.storeWriteMultipleRegistersData:0000000000000000 storeWriteMultipleRegistersData
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:0000000000000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:0000000000000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:0000000000000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.stddef.h.39.7e3d906ac58942e0b374c527445f5de5
                           .group:0000000000000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.64.0f05fa42cfe2db7fc44729a52d3ba948
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02
                           .group:0000000000000000 wm4.cdefs.h.47.62f534e9f325912d9007cf852ba0bf0d
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:0000000000000000 wm4.uthash.h.43.1fc79745d9a41d0170507d27cd8856dc
                           .group:0000000000000000 wm4.stdint.h.10.d0f8e374834fcfc2e296d5d5fe82f02a
                           .group:0000000000000000 wm4.inttypes.h.24.4db40689d622c4d3b547b5801303bdae
                           .group:0000000000000000 wm4.uthash.h.67.1f07c20d9d9dfd82ae163222519c47ad

UNDEFINED SYMBOLS
addData
