   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"list.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vListInitialise,"ax",%progbits
  20              		.align	2
  21              		.global	vListInitialise
  22              		.thumb
  23              		.thumb_func
  25              	vListInitialise:
  26              	.LFB110:
  27              		.file 1 "FreeRTOS/Source/list.c"
   1:FreeRTOS/Source/list.c **** /*
   2:FreeRTOS/Source/list.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/list.c **** 
   4:FreeRTOS/Source/list.c **** 
   5:FreeRTOS/Source/list.c ****     ***************************************************************************
   6:FreeRTOS/Source/list.c ****      *                                                                       *
   7:FreeRTOS/Source/list.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/list.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/list.c ****      *    available.                                                         *
  10:FreeRTOS/Source/list.c ****      *                                                                       *
  11:FreeRTOS/Source/list.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/list.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/list.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/list.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/list.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/list.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/list.c ****      *                                                                       *
  18:FreeRTOS/Source/list.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/list.c ****      *                                                                       *
  20:FreeRTOS/Source/list.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/list.c ****      *                                                                       *
  22:FreeRTOS/Source/list.c ****     ***************************************************************************
  23:FreeRTOS/Source/list.c **** 
  24:FreeRTOS/Source/list.c **** 
  25:FreeRTOS/Source/list.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/list.c **** 
  27:FreeRTOS/Source/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/list.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/list.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/list.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/list.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/list.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/list.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/list.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/list.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/list.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/list.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/list.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/list.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/list.c **** 
  42:FreeRTOS/Source/list.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/list.c **** 
  44:FreeRTOS/Source/list.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/list.c ****     contact details.
  46:FreeRTOS/Source/list.c **** 
  47:FreeRTOS/Source/list.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/list.c ****     critical systems.
  49:FreeRTOS/Source/list.c **** 
  50:FreeRTOS/Source/list.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/list.c ****     licensing and training services.
  52:FreeRTOS/Source/list.c **** */
  53:FreeRTOS/Source/list.c **** 
  54:FreeRTOS/Source/list.c **** 
  55:FreeRTOS/Source/list.c **** #include <stdlib.h>
  56:FreeRTOS/Source/list.c **** #include "FreeRTOS.h"
  57:FreeRTOS/Source/list.c **** #include "list.h"
  58:FreeRTOS/Source/list.c **** 
  59:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------
  60:FreeRTOS/Source/list.c ****  * PUBLIC LIST API documented in list.h
  61:FreeRTOS/Source/list.c ****  *----------------------------------------------------------*/
  62:FreeRTOS/Source/list.c **** 
  63:FreeRTOS/Source/list.c **** void vListInitialise( xList *pxList )
  64:FreeRTOS/Source/list.c **** {
  28              		.loc 1 64 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
  65:FreeRTOS/Source/list.c **** 	/* The list structure contains a list item which is used to mark the
  66:FreeRTOS/Source/list.c **** 	end of the list.  To initialise the list the list end is inserted
  67:FreeRTOS/Source/list.c **** 	as the only list entry. */
  68:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
  44              		.loc 1 68 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 03F10802 		add	r2, r3, #8
  47 000e 7B68     		ldr	r3, [r7, #4]
  48 0010 5A60     		str	r2, [r3, #4]
  69:FreeRTOS/Source/list.c **** 
  70:FreeRTOS/Source/list.c **** 	/* The list end value is the highest possible value in the list to
  71:FreeRTOS/Source/list.c **** 	ensure it remains at the end of the list. */
  72:FreeRTOS/Source/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  49              		.loc 1 72 0
  50 0012 7B68     		ldr	r3, [r7, #4]
  51 0014 4FF0FF32 		mov	r2, #-1
  52 0018 9A60     		str	r2, [r3, #8]
  73:FreeRTOS/Source/list.c **** 
  74:FreeRTOS/Source/list.c **** 	/* The list end next and previous pointers point to itself so we know
  75:FreeRTOS/Source/list.c **** 	when the list is empty. */
  76:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
  53              		.loc 1 76 0
  54 001a 7B68     		ldr	r3, [r7, #4]
  55 001c 03F10802 		add	r2, r3, #8
  56 0020 7B68     		ldr	r3, [r7, #4]
  57 0022 DA60     		str	r2, [r3, #12]
  77:FreeRTOS/Source/list.c **** 	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
  58              		.loc 1 77 0
  59 0024 7B68     		ldr	r3, [r7, #4]
  60 0026 03F10802 		add	r2, r3, #8
  61 002a 7B68     		ldr	r3, [r7, #4]
  62 002c 1A61     		str	r2, [r3, #16]
  78:FreeRTOS/Source/list.c **** 
  79:FreeRTOS/Source/list.c **** 	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
  63              		.loc 1 79 0
  64 002e 7B68     		ldr	r3, [r7, #4]
  65 0030 0022     		movs	r2, #0
  66 0032 1A60     		str	r2, [r3]
  80:FreeRTOS/Source/list.c **** }
  67              		.loc 1 80 0
  68 0034 0C37     		adds	r7, r7, #12
  69 0036 BD46     		mov	sp, r7
  70              		@ sp needed
  71 0038 5DF8047B 		ldr	r7, [sp], #4
  72 003c 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE110:
  76 003e 00BF     		.section	.text.vListInitialiseItem,"ax",%progbits
  77              		.align	2
  78              		.global	vListInitialiseItem
  79              		.thumb
  80              		.thumb_func
  82              	vListInitialiseItem:
  83              	.LFB111:
  81:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  82:FreeRTOS/Source/list.c **** 
  83:FreeRTOS/Source/list.c **** void vListInitialiseItem( xListItem *pxItem )
  84:FreeRTOS/Source/list.c **** {
  84              		.loc 1 84 0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 8
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88              		@ link register save eliminated.
  89 0000 80B4     		push	{r7}
  90              	.LCFI3:
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 0002 83B0     		sub	sp, sp, #12
  94              	.LCFI4:
  95              		.cfi_def_cfa_offset 16
  96 0004 00AF     		add	r7, sp, #0
  97              	.LCFI5:
  98              		.cfi_def_cfa_register 7
  99 0006 7860     		str	r0, [r7, #4]
  85:FreeRTOS/Source/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
  86:FreeRTOS/Source/list.c **** 	pxItem->pvContainer = NULL;
 100              		.loc 1 86 0
 101 0008 7B68     		ldr	r3, [r7, #4]
 102 000a 0022     		movs	r2, #0
 103 000c 1A61     		str	r2, [r3, #16]
  87:FreeRTOS/Source/list.c **** }
 104              		.loc 1 87 0
 105 000e 0C37     		adds	r7, r7, #12
 106 0010 BD46     		mov	sp, r7
 107              		@ sp needed
 108 0012 5DF8047B 		ldr	r7, [sp], #4
 109 0016 7047     		bx	lr
 110              		.cfi_endproc
 111              	.LFE111:
 113              		.section	.text.vListInsertEnd,"ax",%progbits
 114              		.align	2
 115              		.global	vListInsertEnd
 116              		.thumb
 117              		.thumb_func
 119              	vListInsertEnd:
 120              	.LFB112:
  88:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
  89:FreeRTOS/Source/list.c **** 
  90:FreeRTOS/Source/list.c **** void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
  91:FreeRTOS/Source/list.c **** {
 121              		.loc 1 91 0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 16
 124              		@ frame_needed = 1, uses_anonymous_args = 0
 125              		@ link register save eliminated.
 126 0000 80B4     		push	{r7}
 127              	.LCFI6:
 128              		.cfi_def_cfa_offset 4
 129              		.cfi_offset 7, -4
 130 0002 85B0     		sub	sp, sp, #20
 131              	.LCFI7:
 132              		.cfi_def_cfa_offset 24
 133 0004 00AF     		add	r7, sp, #0
 134              	.LCFI8:
 135              		.cfi_def_cfa_register 7
 136 0006 7860     		str	r0, [r7, #4]
 137 0008 3960     		str	r1, [r7]
  92:FreeRTOS/Source/list.c **** volatile xListItem * pxIndex;
  93:FreeRTOS/Source/list.c **** 
  94:FreeRTOS/Source/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
  95:FreeRTOS/Source/list.c **** 	makes the new list item the last item to be removed by a call to
  96:FreeRTOS/Source/list.c **** 	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
  97:FreeRTOS/Source/list.c **** 	the pxIndex member. */
  98:FreeRTOS/Source/list.c **** 	pxIndex = pxList->pxIndex;
 138              		.loc 1 98 0
 139 000a 7B68     		ldr	r3, [r7, #4]
 140 000c 5B68     		ldr	r3, [r3, #4]
 141 000e FB60     		str	r3, [r7, #12]
  99:FreeRTOS/Source/list.c **** 
 100:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIndex->pxNext;
 142              		.loc 1 100 0
 143 0010 FB68     		ldr	r3, [r7, #12]
 144 0012 5A68     		ldr	r2, [r3, #4]
 145 0014 3B68     		ldr	r3, [r7]
 146 0016 5A60     		str	r2, [r3, #4]
 101:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxList->pxIndex;
 147              		.loc 1 101 0
 148 0018 7B68     		ldr	r3, [r7, #4]
 149 001a 5A68     		ldr	r2, [r3, #4]
 150 001c 3B68     		ldr	r3, [r7]
 151 001e 9A60     		str	r2, [r3, #8]
 102:FreeRTOS/Source/list.c **** 	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 152              		.loc 1 102 0
 153 0020 FB68     		ldr	r3, [r7, #12]
 154 0022 5B68     		ldr	r3, [r3, #4]
 155 0024 3A68     		ldr	r2, [r7]
 156 0026 9A60     		str	r2, [r3, #8]
 103:FreeRTOS/Source/list.c **** 	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 157              		.loc 1 103 0
 158 0028 FB68     		ldr	r3, [r7, #12]
 159 002a 3A68     		ldr	r2, [r7]
 160 002c 5A60     		str	r2, [r3, #4]
 104:FreeRTOS/Source/list.c **** 	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 161              		.loc 1 104 0
 162 002e 7B68     		ldr	r3, [r7, #4]
 163 0030 3A68     		ldr	r2, [r7]
 164 0032 5A60     		str	r2, [r3, #4]
 105:FreeRTOS/Source/list.c **** 
 106:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in. */
 107:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 165              		.loc 1 107 0
 166 0034 3B68     		ldr	r3, [r7]
 167 0036 7A68     		ldr	r2, [r7, #4]
 168 0038 1A61     		str	r2, [r3, #16]
 108:FreeRTOS/Source/list.c **** 
 109:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 169              		.loc 1 109 0
 170 003a 7B68     		ldr	r3, [r7, #4]
 171 003c 1B68     		ldr	r3, [r3]
 172 003e 5A1C     		adds	r2, r3, #1
 173 0040 7B68     		ldr	r3, [r7, #4]
 174 0042 1A60     		str	r2, [r3]
 110:FreeRTOS/Source/list.c **** }
 175              		.loc 1 110 0
 176 0044 1437     		adds	r7, r7, #20
 177 0046 BD46     		mov	sp, r7
 178              		@ sp needed
 179 0048 5DF8047B 		ldr	r7, [sp], #4
 180 004c 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE112:
 184 004e 00BF     		.section	.text.vListInsert,"ax",%progbits
 185              		.align	2
 186              		.global	vListInsert
 187              		.thumb
 188              		.thumb_func
 190              	vListInsert:
 191              	.LFB113:
 111:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 112:FreeRTOS/Source/list.c **** 
 113:FreeRTOS/Source/list.c **** void vListInsert( xList *pxList, xListItem *pxNewListItem )
 114:FreeRTOS/Source/list.c **** {
 192              		.loc 1 114 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 16
 195              		@ frame_needed = 1, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197 0000 80B4     		push	{r7}
 198              	.LCFI9:
 199              		.cfi_def_cfa_offset 4
 200              		.cfi_offset 7, -4
 201 0002 85B0     		sub	sp, sp, #20
 202              	.LCFI10:
 203              		.cfi_def_cfa_offset 24
 204 0004 00AF     		add	r7, sp, #0
 205              	.LCFI11:
 206              		.cfi_def_cfa_register 7
 207 0006 7860     		str	r0, [r7, #4]
 208 0008 3960     		str	r1, [r7]
 115:FreeRTOS/Source/list.c **** volatile xListItem *pxIterator;
 116:FreeRTOS/Source/list.c **** portTickType xValueOfInsertion;
 117:FreeRTOS/Source/list.c **** 
 118:FreeRTOS/Source/list.c **** 	/* Insert the new list item into the list, sorted in ulListItem order. */
 119:FreeRTOS/Source/list.c **** 	xValueOfInsertion = pxNewListItem->xItemValue;
 209              		.loc 1 119 0
 210 000a 3B68     		ldr	r3, [r7]
 211 000c 1B68     		ldr	r3, [r3]
 212 000e BB60     		str	r3, [r7, #8]
 120:FreeRTOS/Source/list.c **** 
 121:FreeRTOS/Source/list.c **** 	/* If the list already contains a list item with the same item value then
 122:FreeRTOS/Source/list.c **** 	the new list item should be placed after it.  This ensures that TCB's which
 123:FreeRTOS/Source/list.c **** 	are stored in ready lists (all of which have the same ulListItem value)
 124:FreeRTOS/Source/list.c **** 	get an equal share of the CPU.  However, if the xItemValue is the same as
 125:FreeRTOS/Source/list.c **** 	the back marker the iteration loop below will not end.  This means we need
 126:FreeRTOS/Source/list.c **** 	to guard against this by checking the value first and modifying the
 127:FreeRTOS/Source/list.c **** 	algorithm slightly if necessary. */
 128:FreeRTOS/Source/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 213              		.loc 1 128 0
 214 0010 BB68     		ldr	r3, [r7, #8]
 215 0012 B3F1FF3F 		cmp	r3, #-1
 216 0016 03D1     		bne	.L5
 129:FreeRTOS/Source/list.c **** 	{
 130:FreeRTOS/Source/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 217              		.loc 1 130 0
 218 0018 7B68     		ldr	r3, [r7, #4]
 219 001a 1B69     		ldr	r3, [r3, #16]
 220 001c FB60     		str	r3, [r7, #12]
 221 001e 0CE0     		b	.L6
 222              	.L5:
 131:FreeRTOS/Source/list.c **** 	}
 132:FreeRTOS/Source/list.c **** 	else
 133:FreeRTOS/Source/list.c **** 	{
 134:FreeRTOS/Source/list.c **** 		/* *** NOTE ***********************************************************
 135:FreeRTOS/Source/list.c **** 		If you find your application is crashing here then likely causes are:
 136:FreeRTOS/Source/list.c **** 			1) Stack overflow -
 137:FreeRTOS/Source/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 138:FreeRTOS/Source/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M3
 139:FreeRTOS/Source/list.c **** 			   parts where numerically high priority values denote low actual
 140:FreeRTOS/Source/list.c **** 			   interrupt priories, which can seem counter intuitive.  See
 141:FreeRTOS/Source/list.c **** 			   configMAX_SYSCALL_INTERRUPT_PRIORITY on http://www.freertos.org/a00110.html
 142:FreeRTOS/Source/list.c **** 			3) Calling an API function from within a critical section or when
 143:FreeRTOS/Source/list.c **** 			   the scheduler is suspended.
 144:FreeRTOS/Source/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 145:FreeRTOS/Source/list.c **** 			   before the scheduler has been started (are interrupts firing
 146:FreeRTOS/Source/list.c **** 			   before vTaskStartScheduler() has been called?).
 147:FreeRTOS/Source/list.c **** 		See http://www.freertos.org/FAQHelp.html for more tips.
 148:FreeRTOS/Source/list.c **** 		**********************************************************************/
 149:FreeRTOS/Source/list.c **** 		
 150:FreeRTOS/Source/list.c **** 		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValue
 223              		.loc 1 150 0
 224 0020 7B68     		ldr	r3, [r7, #4]
 225 0022 0833     		adds	r3, r3, #8
 226 0024 FB60     		str	r3, [r7, #12]
 227 0026 02E0     		b	.L7
 228              	.L8:
 229              		.loc 1 150 0 is_stmt 0 discriminator 2
 230 0028 FB68     		ldr	r3, [r7, #12]
 231 002a 5B68     		ldr	r3, [r3, #4]
 232 002c FB60     		str	r3, [r7, #12]
 233              	.L7:
 234              		.loc 1 150 0 discriminator 1
 235 002e FB68     		ldr	r3, [r7, #12]
 236 0030 5B68     		ldr	r3, [r3, #4]
 237 0032 1A68     		ldr	r2, [r3]
 238 0034 BB68     		ldr	r3, [r7, #8]
 239 0036 9A42     		cmp	r2, r3
 240 0038 F6D9     		bls	.L8
 241              	.L6:
 151:FreeRTOS/Source/list.c **** 		{
 152:FreeRTOS/Source/list.c **** 			/* There is nothing to do here, we are just iterating to the
 153:FreeRTOS/Source/list.c **** 			wanted insertion position. */
 154:FreeRTOS/Source/list.c **** 		}
 155:FreeRTOS/Source/list.c **** 	}
 156:FreeRTOS/Source/list.c **** 
 157:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 242              		.loc 1 157 0 is_stmt 1
 243 003a FB68     		ldr	r3, [r7, #12]
 244 003c 5A68     		ldr	r2, [r3, #4]
 245 003e 3B68     		ldr	r3, [r7]
 246 0040 5A60     		str	r2, [r3, #4]
 158:FreeRTOS/Source/list.c **** 	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 247              		.loc 1 158 0
 248 0042 3B68     		ldr	r3, [r7]
 249 0044 5B68     		ldr	r3, [r3, #4]
 250 0046 3A68     		ldr	r2, [r7]
 251 0048 9A60     		str	r2, [r3, #8]
 159:FreeRTOS/Source/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 252              		.loc 1 159 0
 253 004a 3B68     		ldr	r3, [r7]
 254 004c FA68     		ldr	r2, [r7, #12]
 255 004e 9A60     		str	r2, [r3, #8]
 160:FreeRTOS/Source/list.c **** 	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 256              		.loc 1 160 0
 257 0050 FB68     		ldr	r3, [r7, #12]
 258 0052 3A68     		ldr	r2, [r7]
 259 0054 5A60     		str	r2, [r3, #4]
 161:FreeRTOS/Source/list.c **** 
 162:FreeRTOS/Source/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 163:FreeRTOS/Source/list.c **** 	item later. */
 164:FreeRTOS/Source/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 260              		.loc 1 164 0
 261 0056 3B68     		ldr	r3, [r7]
 262 0058 7A68     		ldr	r2, [r7, #4]
 263 005a 1A61     		str	r2, [r3, #16]
 165:FreeRTOS/Source/list.c **** 
 166:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )++;
 264              		.loc 1 166 0
 265 005c 7B68     		ldr	r3, [r7, #4]
 266 005e 1B68     		ldr	r3, [r3]
 267 0060 5A1C     		adds	r2, r3, #1
 268 0062 7B68     		ldr	r3, [r7, #4]
 269 0064 1A60     		str	r2, [r3]
 167:FreeRTOS/Source/list.c **** }
 270              		.loc 1 167 0
 271 0066 1437     		adds	r7, r7, #20
 272 0068 BD46     		mov	sp, r7
 273              		@ sp needed
 274 006a 5DF8047B 		ldr	r7, [sp], #4
 275 006e 7047     		bx	lr
 276              		.cfi_endproc
 277              	.LFE113:
 279              		.section	.text.vListRemove,"ax",%progbits
 280              		.align	2
 281              		.global	vListRemove
 282              		.thumb
 283              		.thumb_func
 285              	vListRemove:
 286              	.LFB114:
 168:FreeRTOS/Source/list.c **** /*-----------------------------------------------------------*/
 169:FreeRTOS/Source/list.c **** 
 170:FreeRTOS/Source/list.c **** void vListRemove( xListItem *pxItemToRemove )
 171:FreeRTOS/Source/list.c **** {
 287              		.loc 1 171 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 16
 290              		@ frame_needed = 1, uses_anonymous_args = 0
 291              		@ link register save eliminated.
 292 0000 80B4     		push	{r7}
 293              	.LCFI12:
 294              		.cfi_def_cfa_offset 4
 295              		.cfi_offset 7, -4
 296 0002 85B0     		sub	sp, sp, #20
 297              	.LCFI13:
 298              		.cfi_def_cfa_offset 24
 299 0004 00AF     		add	r7, sp, #0
 300              	.LCFI14:
 301              		.cfi_def_cfa_register 7
 302 0006 7860     		str	r0, [r7, #4]
 172:FreeRTOS/Source/list.c **** xList * pxList;
 173:FreeRTOS/Source/list.c **** 
 174:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 303              		.loc 1 174 0
 304 0008 7B68     		ldr	r3, [r7, #4]
 305 000a 5B68     		ldr	r3, [r3, #4]
 306 000c 7A68     		ldr	r2, [r7, #4]
 307 000e 9268     		ldr	r2, [r2, #8]
 308 0010 9A60     		str	r2, [r3, #8]
 175:FreeRTOS/Source/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 309              		.loc 1 175 0
 310 0012 7B68     		ldr	r3, [r7, #4]
 311 0014 9B68     		ldr	r3, [r3, #8]
 312 0016 7A68     		ldr	r2, [r7, #4]
 313 0018 5268     		ldr	r2, [r2, #4]
 314 001a 5A60     		str	r2, [r3, #4]
 176:FreeRTOS/Source/list.c **** 	
 177:FreeRTOS/Source/list.c **** 	/* The list item knows which list it is in.  Obtain the list from the list
 178:FreeRTOS/Source/list.c **** 	item. */
 179:FreeRTOS/Source/list.c **** 	pxList = ( xList * ) pxItemToRemove->pvContainer;
 315              		.loc 1 179 0
 316 001c 7B68     		ldr	r3, [r7, #4]
 317 001e 1B69     		ldr	r3, [r3, #16]
 318 0020 FB60     		str	r3, [r7, #12]
 180:FreeRTOS/Source/list.c **** 
 181:FreeRTOS/Source/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 182:FreeRTOS/Source/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 319              		.loc 1 182 0
 320 0022 FB68     		ldr	r3, [r7, #12]
 321 0024 5A68     		ldr	r2, [r3, #4]
 322 0026 7B68     		ldr	r3, [r7, #4]
 323 0028 9A42     		cmp	r2, r3
 324 002a 03D1     		bne	.L10
 183:FreeRTOS/Source/list.c **** 	{
 184:FreeRTOS/Source/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 325              		.loc 1 184 0
 326 002c 7B68     		ldr	r3, [r7, #4]
 327 002e 9A68     		ldr	r2, [r3, #8]
 328 0030 FB68     		ldr	r3, [r7, #12]
 329 0032 5A60     		str	r2, [r3, #4]
 330              	.L10:
 185:FreeRTOS/Source/list.c **** 	}
 186:FreeRTOS/Source/list.c **** 
 187:FreeRTOS/Source/list.c **** 	pxItemToRemove->pvContainer = NULL;
 331              		.loc 1 187 0
 332 0034 7B68     		ldr	r3, [r7, #4]
 333 0036 0022     		movs	r2, #0
 334 0038 1A61     		str	r2, [r3, #16]
 188:FreeRTOS/Source/list.c **** 	( pxList->uxNumberOfItems )--;
 335              		.loc 1 188 0
 336 003a FB68     		ldr	r3, [r7, #12]
 337 003c 1B68     		ldr	r3, [r3]
 338 003e 5A1E     		subs	r2, r3, #1
 339 0040 FB68     		ldr	r3, [r7, #12]
 340 0042 1A60     		str	r2, [r3]
 189:FreeRTOS/Source/list.c **** }
 341              		.loc 1 189 0
 342 0044 1437     		adds	r7, r7, #20
 343 0046 BD46     		mov	sp, r7
 344              		@ sp needed
 345 0048 5DF8047B 		ldr	r7, [sp], #4
 346 004c 7047     		bx	lr
 347              		.cfi_endproc
 348              	.LFE114:
 350 004e 00BF     		.text
 351              	.Letext0:
 352              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 353              		.file 3 "/usr/include/newlib/stdint.h"
 354              		.file 4 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 355              		.file 5 "FreeRTOS/Source/include/list.h"
 356              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 list.c
     /tmp/cc36Xavy.s:20     .text.vListInitialise:0000000000000000 $t
     /tmp/cc36Xavy.s:25     .text.vListInitialise:0000000000000000 vListInitialise
     /tmp/cc36Xavy.s:77     .text.vListInitialiseItem:0000000000000000 $t
     /tmp/cc36Xavy.s:82     .text.vListInitialiseItem:0000000000000000 vListInitialiseItem
     /tmp/cc36Xavy.s:114    .text.vListInsertEnd:0000000000000000 $t
     /tmp/cc36Xavy.s:119    .text.vListInsertEnd:0000000000000000 vListInsertEnd
     /tmp/cc36Xavy.s:185    .text.vListInsert:0000000000000000 $t
     /tmp/cc36Xavy.s:190    .text.vListInsert:0000000000000000 vListInsert
     /tmp/cc36Xavy.s:280    .text.vListRemove:0000000000000000 $t
     /tmp/cc36Xavy.s:285    .text.vListRemove:0000000000000000 vListRemove
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
