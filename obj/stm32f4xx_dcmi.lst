   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_dcmi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.DCMI_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	DCMI_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	DCMI_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @file    stm32f4xx_dcmi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          functionalities of the DCMI peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *           - Image capture functions  
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *           - Interrupts and flags management
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  @verbatim  
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *        
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                                 How to use this driver
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          ===================================================================  
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         The sequence below describes how to use this driver to capture image
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         from a camera module connected to the DCMI Interface.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         This sequence does not take into account the configuration of the  
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         camera module, which should be made before to configure and enable
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         the DCMI to capture images.
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *           
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          1. Enable the clock for the DCMI and associated GPIOs using the following functions:
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          2. DCMI pins configuration 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *             - Connect the involved DCMI pins to AF13 using the following function 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_DCMI); 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *             - Configure these DCMI pins in alternate function mode by calling the function
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 GPIO_Init();
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *    
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          3. Declare a DCMI_InitTypeDef structure, for example:
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 DCMI_InitTypeDef  DCMI_InitStructure;
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *             and fill the DCMI_InitStructure variable with the allowed values
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *             of the structure member.
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          4. Initialize the DCMI interface by calling the function
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 DCMI_Init(&DCMI_InitStructure); 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          5. Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *             register to the destination memory buffer.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          6. Enable DCMI interface using the function
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 DCMI_Cmd(ENABLE);
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         7. Start the image capture using the function
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 DCMI_CaptureCmd(ENABLE);
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *                 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         8. At this stage the DCMI interface waits for the first start of frame,
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            then a DMA request is generated continuously/once (depending on the
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            mode used, Continuous/Snapshot) to transfer the received data into
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            the destination memory. 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *   
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  @note  If you need to capture only a rectangular window from the received
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         image, you have to use the DCMI_CROPConfig() function to configure 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         the coordinates and size of the window to be captured, then enable 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         the Crop feature using DCMI_CROPCmd(ENABLE);  
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         In this case, the Crop configuration should be made before to enable
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         and start the DCMI interface. 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *        
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  @endverbatim   
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *  
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   ******************************************************************************
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @attention
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   ******************************************************************************
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Includes ------------------------------------------------------------------*/
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** #include "stm32f4xx_dcmi.h"
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** #include "stm32f4xx_rcc.h"
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @{
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI 
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief DCMI driver modules
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @{
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */ 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Private typedef -----------------------------------------------------------*/
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Private define ------------------------------------------------------------*/
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Private macro -------------------------------------------------------------*/
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Private variables ---------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Private function prototypes -----------------------------------------------*/
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /* Private functions ---------------------------------------------------------*/
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Private_Functions
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @{
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */ 
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group1 Initialization and Configuration functions
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  *  @brief   Initialization and Configuration functions 
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  *
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** @verbatim   
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  ===============================================================================
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   Initialization and Configuration functions
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** @endverbatim
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @{
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Deinitializes the DCMI registers to their default reset values.
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  None
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_DeInit(void)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
  28              		.loc 1 123 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CR = 0x0;
  33              		.loc 1 124 0
  34 0000 0023     		movs	r3, #0
  35 0002 C5F20503 		movt	r3, 20485
  36 0006 0022     		movs	r2, #0
  37 0008 1A60     		str	r2, [r3]
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->IER = 0x0;
  38              		.loc 1 125 0
  39 000a DA60     		str	r2, [r3, #12]
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ICR = 0x1F;
  40              		.loc 1 126 0
  41 000c 1F21     		movs	r1, #31
  42 000e 5961     		str	r1, [r3, #20]
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = 0x0;
  43              		.loc 1 127 0
  44 0010 9A61     		str	r2, [r3, #24]
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ESUR = 0x0;
  45              		.loc 1 128 0
  46 0012 DA61     		str	r2, [r3, #28]
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CWSTRTR = 0x0;
  47              		.loc 1 129 0
  48 0014 1A62     		str	r2, [r3, #32]
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CWSIZER = 0x0;
  49              		.loc 1 130 0
  50 0016 5A62     		str	r2, [r3, #36]
  51 0018 7047     		bx	lr
  52              		.cfi_endproc
  53              	.LFE110:
  55 001a 00BF     		.section	.text.DCMI_Init,"ax",%progbits
  56              		.align	2
  57              		.global	DCMI_Init
  58              		.thumb
  59              		.thumb_func
  61              	DCMI_Init:
  62              	.LFB111:
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Initializes the DCMI according to the specified parameters in the DCMI_InitStruct.
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         the configuration information for the DCMI.
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
  63              		.loc 1 140 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 0
  66              		@ frame_needed = 0, uses_anonymous_args = 0
  67              		@ link register save eliminated.
  68              	.LVL0:
  69 0000 F0B4     		push	{r4, r5, r6, r7}
  70              	.LCFI0:
  71              		.cfi_def_cfa_offset 16
  72              		.cfi_offset 4, -16
  73              		.cfi_offset 5, -12
  74              		.cfi_offset 6, -8
  75              		.cfi_offset 7, -4
  76              	.LVL1:
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   uint32_t temp = 0x0;
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_MODE(DCMI_InitStruct->DCMI_CaptureMode));
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_SYNCHRO(DCMI_InitStruct->DCMI_SynchroMode));
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_PCKPOLARITY(DCMI_InitStruct->DCMI_PCKPolarity));
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_VSPOLARITY(DCMI_InitStruct->DCMI_VSPolarity));
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_HSPOLARITY(DCMI_InitStruct->DCMI_HSPolarity));
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* The DCMI configuration registers should be programmed correctly before 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
  77              		.loc 1 154 0
  78 0002 0023     		movs	r3, #0
  79 0004 C5F20503 		movt	r3, 20485
  80 0008 1A68     		ldr	r2, [r3]
  81 000a 22F48042 		bic	r2, r2, #16384
  82 000e 22F00102 		bic	r2, r2, #1
  83 0012 1A60     		str	r2, [r3]
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****    
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Reset the old DCMI configuration */
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   temp = DCMI->CR;
  84              		.loc 1 157 0
  85 0014 1968     		ldr	r1, [r3]
  86              	.LVL2:
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
  87              		.loc 1 159 0
  88 0016 21F47F61 		bic	r1, r1, #4080
  89              	.LVL3:
  90 001a 21F00201 		bic	r1, r1, #2
  91              	.LVL4:
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                       DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                       DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Sets the new configuration of the DCMI peripheral */
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
  92              		.loc 1 164 0
  93 001e B0F800C0 		ldrh	ip, [r0]
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_SynchroMode |
  94              		.loc 1 165 0
  95 0022 4288     		ldrh	r2, [r0, #2]
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_PCKPolarity |
  96              		.loc 1 166 0
  97 0024 8788     		ldrh	r7, [r0, #4]
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_VSPolarity |
  98              		.loc 1 167 0
  99 0026 C688     		ldrh	r6, [r0, #6]
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_HSPolarity |
 100              		.loc 1 168 0
 101 0028 0589     		ldrh	r5, [r0, #8]
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_CaptureRate |
 102              		.loc 1 169 0
 103 002a 4489     		ldrh	r4, [r0, #10]
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_ExtendedDataMode);
 104              		.loc 1 170 0
 105 002c 8089     		ldrh	r0, [r0, #12]
 106              	.LVL5:
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_CaptureRate |
 107              		.loc 1 169 0
 108 002e 4CEA0202 		orr	r2, ip, r2
 109 0032 3A43     		orrs	r2, r2, r7
 110 0034 3243     		orrs	r2, r2, r6
 111 0036 2A43     		orrs	r2, r2, r5
 112 0038 2243     		orrs	r2, r2, r4
 113 003a 0243     		orrs	r2, r2, r0
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                      DCMI_InitStruct->DCMI_SynchroMode |
 114              		.loc 1 164 0
 115 003c 0A43     		orrs	r2, r2, r1
 116              	.LVL6:
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CR = temp;                              
 117              		.loc 1 172 0
 118 003e 1A60     		str	r2, [r3]
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 119              		.loc 1 173 0
 120 0040 F0BC     		pop	{r4, r5, r6, r7}
 121 0042 7047     		bx	lr
 122              		.cfi_endproc
 123              	.LFE111:
 125              		.section	.text.DCMI_StructInit,"ax",%progbits
 126              		.align	2
 127              		.global	DCMI_StructInit
 128              		.thumb
 129              		.thumb_func
 131              	DCMI_StructInit:
 132              	.LFB112:
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Fills each DCMI_InitStruct member with its default value.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         be initialized.
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 133              		.loc 1 182 0
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 0
 136              		@ frame_needed = 0, uses_anonymous_args = 0
 137              		@ link register save eliminated.
 138              	.LVL7:
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Set the default configuration */
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 139              		.loc 1 184 0
 140 0000 0023     		movs	r3, #0
 141 0002 0380     		strh	r3, [r0]	@ movhi
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 142              		.loc 1 185 0
 143 0004 4380     		strh	r3, [r0, #2]	@ movhi
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 144              		.loc 1 186 0
 145 0006 8380     		strh	r3, [r0, #4]	@ movhi
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 146              		.loc 1 187 0
 147 0008 C380     		strh	r3, [r0, #6]	@ movhi
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 148              		.loc 1 188 0
 149 000a 0381     		strh	r3, [r0, #8]	@ movhi
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 150              		.loc 1 189 0
 151 000c 4381     		strh	r3, [r0, #10]	@ movhi
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 152              		.loc 1 190 0
 153 000e 8381     		strh	r3, [r0, #12]	@ movhi
 154 0010 7047     		bx	lr
 155              		.cfi_endproc
 156              	.LFE112:
 158 0012 00BF     		.section	.text.DCMI_CROPConfig,"ax",%progbits
 159              		.align	2
 160              		.global	DCMI_CROPConfig
 161              		.thumb
 162              		.thumb_func
 164              	DCMI_CROPConfig:
 165              	.LFB113:
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Initializes the DCMI peripheral CROP mode according to the specified
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         parameters in the DCMI_CROPInitStruct.
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @note   This function should be called before to enable and start the DCMI interface.   
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         contains the configuration information for the DCMI peripheral CROP mode.
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {  
 166              		.loc 1 202 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 0
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              		@ link register save eliminated.
 171              	.LVL8:
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Sets the CROP window coordinates */
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 172              		.loc 1 204 0
 173 0000 4388     		ldrh	r3, [r0, #2]
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 174              		.loc 1 205 0
 175 0002 0288     		ldrh	r2, [r0]
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 176              		.loc 1 204 0
 177 0004 43EA0242 		orr	r2, r3, r2, lsl #16
 178 0008 0023     		movs	r3, #0
 179 000a C5F20503 		movt	r3, 20485
 180 000e 1A62     		str	r2, [r3, #32]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Sets the CROP window size */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 181              		.loc 1 208 0
 182 0010 C288     		ldrh	r2, [r0, #6]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 183              		.loc 1 209 0
 184 0012 8188     		ldrh	r1, [r0, #4]
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 185              		.loc 1 208 0
 186 0014 42EA0142 		orr	r2, r2, r1, lsl #16
 187 0018 5A62     		str	r2, [r3, #36]
 188 001a 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE113:
 192              		.section	.text.DCMI_CROPCmd,"ax",%progbits
 193              		.align	2
 194              		.global	DCMI_CROPCmd
 195              		.thumb
 196              		.thumb_func
 198              	DCMI_CROPCmd:
 199              	.LFB114:
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI Crop feature.
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @note   This function should be called before to enable and start the DCMI interface.
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI Crop feature. 
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_CROPCmd(FunctionalState NewState)
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 200              		.loc 1 220 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 205              	.LVL9:
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 206              		.loc 1 224 0
 207 0000 38B1     		cbz	r0, .L6
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI Crop feature */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 208              		.loc 1 227 0
 209 0002 0023     		movs	r3, #0
 210 0004 C5F20503 		movt	r3, 20485
 211 0008 1A68     		ldr	r2, [r3]
 212 000a 42F00402 		orr	r2, r2, #4
 213 000e 1A60     		str	r2, [r3]
 214 0010 7047     		bx	lr
 215              	.L6:
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI Crop feature */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 216              		.loc 1 232 0
 217 0012 0023     		movs	r3, #0
 218 0014 C5F20503 		movt	r3, 20485
 219 0018 1A68     		ldr	r2, [r3]
 220 001a 22F00402 		bic	r2, r2, #4
 221 001e 1A60     		str	r2, [r3]
 222 0020 7047     		bx	lr
 223              		.cfi_endproc
 224              	.LFE114:
 226 0022 00BF     		.section	.text.DCMI_SetEmbeddedSynchroCodes,"ax",%progbits
 227              		.align	2
 228              		.global	DCMI_SetEmbeddedSynchroCodes
 229              		.thumb
 230              		.thumb_func
 232              	DCMI_SetEmbeddedSynchroCodes:
 233              	.LFB115:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Sets the embedded synchronization codes
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *         contains the embedded synchronization codes for the DCMI peripheral.
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 234              		.loc 1 243 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239              	.LVL10:
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 240              		.loc 1 244 0
 241 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 242              		.loc 1 245 0
 243 0002 4278     		ldrb	r2, [r0, #1]	@ zero_extendqisi2
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 244              		.loc 1 244 0
 245 0004 43EA0222 		orr	r2, r3, r2, lsl #8
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 246              		.loc 1 246 0
 247 0008 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 248              		.loc 1 245 0
 249 000a 42EA0342 		orr	r2, r2, r3, lsl #16
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 250              		.loc 1 247 0
 251 000e C378     		ldrb	r3, [r0, #3]	@ zero_extendqisi2
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                           ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 252              		.loc 1 244 0
 253 0010 42EA0362 		orr	r2, r2, r3, lsl #24
 254 0014 0023     		movs	r3, #0
 255 0016 C5F20503 		movt	r3, 20485
 256 001a 9A61     		str	r2, [r3, #24]
 257 001c 7047     		bx	lr
 258              		.cfi_endproc
 259              	.LFE115:
 261 001e 00BF     		.section	.text.DCMI_JPEGCmd,"ax",%progbits
 262              		.align	2
 263              		.global	DCMI_JPEGCmd
 264              		.thumb
 265              		.thumb_func
 267              	DCMI_JPEGCmd:
 268              	.LFB116:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI JPEG format.
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @note   The Crop and Embedded Synchronization features cannot be used in this mode.  
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI JPEG format. 
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_JPEGCmd(FunctionalState NewState)
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 269              		.loc 1 258 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL11:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 275              		.loc 1 262 0
 276 0000 38B1     		cbz	r0, .L10
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI JPEG format */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 277              		.loc 1 265 0
 278 0002 0023     		movs	r3, #0
 279 0004 C5F20503 		movt	r3, 20485
 280 0008 1A68     		ldr	r2, [r3]
 281 000a 42F00802 		orr	r2, r2, #8
 282 000e 1A60     		str	r2, [r3]
 283 0010 7047     		bx	lr
 284              	.L10:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI JPEG format */
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 285              		.loc 1 270 0
 286 0012 0023     		movs	r3, #0
 287 0014 C5F20503 		movt	r3, 20485
 288 0018 1A68     		ldr	r2, [r3]
 289 001a 22F00802 		bic	r2, r2, #8
 290 001e 1A60     		str	r2, [r3]
 291 0020 7047     		bx	lr
 292              		.cfi_endproc
 293              	.LFE116:
 295 0022 00BF     		.section	.text.DCMI_Cmd,"ax",%progbits
 296              		.align	2
 297              		.global	DCMI_Cmd
 298              		.thumb
 299              		.thumb_func
 301              	DCMI_Cmd:
 302              	.LFB117:
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @}
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group2 Image capture functions
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  *  @brief   Image capture functions
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  *
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** @verbatim   
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  ===============================================================================
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                                  Image capture functions
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** @endverbatim
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @{
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI interface.
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI interface. 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_Cmd(FunctionalState NewState)
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 303              		.loc 1 296 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL12:
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 309              		.loc 1 300 0
 310 0000 38B1     		cbz	r0, .L13
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI by setting ENABLE bit */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 311              		.loc 1 303 0
 312 0002 0023     		movs	r3, #0
 313 0004 C5F20503 		movt	r3, 20485
 314 0008 1A68     		ldr	r2, [r3]
 315 000a 42F48042 		orr	r2, r2, #16384
 316 000e 1A60     		str	r2, [r3]
 317 0010 7047     		bx	lr
 318              	.L13:
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI by clearing ENABLE bit */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 319              		.loc 1 308 0
 320 0012 0023     		movs	r3, #0
 321 0014 C5F20503 		movt	r3, 20485
 322 0018 1A68     		ldr	r2, [r3]
 323 001a 22F48042 		bic	r2, r2, #16384
 324 001e 1A60     		str	r2, [r3]
 325 0020 7047     		bx	lr
 326              		.cfi_endproc
 327              	.LFE117:
 329 0022 00BF     		.section	.text.DCMI_CaptureCmd,"ax",%progbits
 330              		.align	2
 331              		.global	DCMI_CaptureCmd
 332              		.thumb
 333              		.thumb_func
 335              	DCMI_CaptureCmd:
 336              	.LFB118:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI Capture.
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the DCMI capture. 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_CaptureCmd(FunctionalState NewState)
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 337              		.loc 1 319 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342              	.LVL13:
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 343              		.loc 1 323 0
 344 0000 38B1     		cbz	r0, .L16
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Enable the DCMI Capture */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 345              		.loc 1 326 0
 346 0002 0023     		movs	r3, #0
 347 0004 C5F20503 		movt	r3, 20485
 348 0008 1A68     		ldr	r2, [r3]
 349 000a 42F00102 		orr	r2, r2, #1
 350 000e 1A60     		str	r2, [r3]
 351 0010 7047     		bx	lr
 352              	.L16:
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Disable the DCMI Capture */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 353              		.loc 1 331 0
 354 0012 0023     		movs	r3, #0
 355 0014 C5F20503 		movt	r3, 20485
 356 0018 1A68     		ldr	r2, [r3]
 357 001a 22F00102 		bic	r2, r2, #1
 358 001e 1A60     		str	r2, [r3]
 359 0020 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE118:
 363 0022 00BF     		.section	.text.DCMI_ReadData,"ax",%progbits
 364              		.align	2
 365              		.global	DCMI_ReadData
 366              		.thumb
 367              		.thumb_func
 369              	DCMI_ReadData:
 370              	.LFB119:
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Reads the data stored in the DR register.
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  None 
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval Data register value
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** uint32_t DCMI_ReadData(void)
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 371              		.loc 1 341 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 0
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   return DCMI->DR;
 376              		.loc 1 342 0
 377 0000 0023     		movs	r3, #0
 378 0002 C5F20503 		movt	r3, 20485
 379 0006 986A     		ldr	r0, [r3, #40]
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 380              		.loc 1 343 0
 381 0008 7047     		bx	lr
 382              		.cfi_endproc
 383              	.LFE119:
 385 000a 00BF     		.section	.text.DCMI_ITConfig,"ax",%progbits
 386              		.align	2
 387              		.global	DCMI_ITConfig
 388              		.thumb
 389              		.thumb_func
 391              	DCMI_ITConfig:
 392              	.LFB120:
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @}
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /** @defgroup DCMI_Group3 Interrupts and flags management functions
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  *  @brief   Interrupts and flags management functions
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  *
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** @verbatim   
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  ===============================================================================
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****                   Interrupts and flags management functions
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****  ===============================================================================  
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** @endverbatim
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @{
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Enables or disables the DCMI interface interrupts.
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt sources to be enabled or disabled. 
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  NewState: new state of the specified DCMI interrupts.
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be: ENABLE or DISABLE.
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 393              		.loc 1 374 0
 394              		.cfi_startproc
 395              		@ args = 0, pretend = 0, frame = 0
 396              		@ frame_needed = 0, uses_anonymous_args = 0
 397              		@ link register save eliminated.
 398              	.LVL14:
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if (NewState != DISABLE)
 399              		.loc 1 379 0
 400 0000 31B1     		cbz	r1, .L20
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Enable the Interrupt sources */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->IER |= DCMI_IT;
 401              		.loc 1 382 0
 402 0002 0023     		movs	r3, #0
 403 0004 C5F20503 		movt	r3, 20485
 404 0008 DA68     		ldr	r2, [r3, #12]
 405 000a 1043     		orrs	r0, r0, r2
 406              	.LVL15:
 407 000c D860     		str	r0, [r3, #12]
 408 000e 7047     		bx	lr
 409              	.LVL16:
 410              	.L20:
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     /* Disable the Interrupt sources */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     DCMI->IER &= (uint16_t)(~DCMI_IT);
 411              		.loc 1 387 0
 412 0010 0023     		movs	r3, #0
 413 0012 C5F20503 		movt	r3, 20485
 414 0016 DA68     		ldr	r2, [r3, #12]
 415 0018 C043     		mvns	r0, r0
 416              	.LVL17:
 417 001a 80B2     		uxth	r0, r0
 418 001c 1040     		ands	r0, r0, r2
 419 001e D860     		str	r0, [r3, #12]
 420 0020 7047     		bx	lr
 421              		.cfi_endproc
 422              	.LFE120:
 424 0022 00BF     		.section	.text.DCMI_GetFlagStatus,"ax",%progbits
 425              		.align	2
 426              		.global	DCMI_GetFlagStatus
 427              		.thumb
 428              		.thumb_func
 430              	DCMI_GetFlagStatus:
 431              	.LFB121:
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }  
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Checks whether the  DCMI interface flag is set or not.
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_FLAG: specifies the flag to check.
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be one of the following values:
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMEMI: Frame capture complete Masked flag mask
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFMI: Overflow Masked flag mask
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRMI: Synchronization error Masked flag mask
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCMI: VSYNC Masked flag mask
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINEMI: Line Masked flag mask
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_HSYNC: HSYNC flag mask
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval The new state of DCMI_FLAG (SET or RESET).
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 432              		.loc 1 411 0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 437              	.LVL18:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   FlagStatus bitstatus = RESET;
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   uint32_t dcmireg, tempreg = 0;
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Get the DCMI register index */
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 438              		.loc 1 419 0
 439 0000 030B     		lsrs	r3, r0, #12
 440              	.LVL19:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if (dcmireg == 0x01) /* The FLAG is in RISR register */
 441              		.loc 1 421 0
 442 0002 012B     		cmp	r3, #1
 443 0004 04D1     		bne	.L23
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     tempreg= DCMI->RISR;
 444              		.loc 1 423 0
 445 0006 0023     		movs	r3, #0
 446              	.LVL20:
 447 0008 C5F20503 		movt	r3, 20485
 448 000c 9B68     		ldr	r3, [r3, #8]
 449              	.LVL21:
 450 000e 07E0     		b	.L24
 451              	.LVL22:
 452              	.L23:
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else if (dcmireg == 0x02) /* The FLAG is in SR register */
 453              		.loc 1 425 0
 454 0010 022B     		cmp	r3, #2
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     tempreg = DCMI->SR;
 455              		.loc 1 427 0
 456 0012 4FF00003 		mov	r3, #0
 457              	.LVL23:
 458 0016 C5F20503 		movt	r3, 20485
 459 001a 0CBF     		ite	eq
 460 001c 5B68     		ldreq	r3, [r3, #4]
 461              	.LVL24:
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else /* The FLAG is in MISR register */
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     tempreg = DCMI->MISR;
 462              		.loc 1 431 0
 463 001e 1B69     		ldrne	r3, [r3, #16]
 464              	.LVL25:
 465              	.L24:
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 466              		.loc 1 434 0
 467 0020 1840     		ands	r0, r0, r3
 468              	.LVL26:
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     bitstatus = SET;
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     bitstatus = RESET;
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Return the DCMI_FLAG status */
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   return  bitstatus;
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 469              		.loc 1 444 0
 470 0022 0030     		adds	r0, r0, #0
 471 0024 18BF     		it	ne
 472 0026 0120     		movne	r0, #1
 473              	.LVL27:
 474 0028 7047     		bx	lr
 475              		.cfi_endproc
 476              	.LFE121:
 478 002a 00BF     		.section	.text.DCMI_ClearFlag,"ax",%progbits
 479              		.align	2
 480              		.global	DCMI_ClearFlag
 481              		.thumb
 482              		.thumb_func
 484              	DCMI_ClearFlag:
 485              	.LFB122:
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Clears the DCMI's pending flags.
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_FLAG: specifies the flag to clear.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_ClearFlag(uint16_t DCMI_FLAG)
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 486              		.loc 1 458 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 0
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490              		@ link register save eliminated.
 491              	.LVL28:
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Clear the flag by writing in the ICR register 1 in the corresponding 
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   Flag position*/
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ICR = DCMI_FLAG;
 492              		.loc 1 465 0
 493 0000 0023     		movs	r3, #0
 494 0002 C5F20503 		movt	r3, 20485
 495 0006 5861     		str	r0, [r3, #20]
 496 0008 7047     		bx	lr
 497              		.cfi_endproc
 498              	.LFE122:
 500 000a 00BF     		.section	.text.DCMI_GetITStatus,"ax",%progbits
 501              		.align	2
 502              		.global	DCMI_GetITStatus
 503              		.thumb
 504              		.thumb_func
 506              	DCMI_GetITStatus:
 507              	.LFB123:
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Checks whether the DCMI interrupt has occurred or not.
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt source to check.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be one of the following values:
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval The new state of DCMI_IT (SET or RESET).
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 508              		.loc 1 480 0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 512              		@ link register save eliminated.
 513              	.LVL29:
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   ITStatus bitstatus = RESET;
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   uint32_t itstatus = 0;
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Check the parameters */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   assert_param(IS_DCMI_GET_IT(DCMI_IT));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 514              		.loc 1 487 0
 515 0000 0023     		movs	r3, #0
 516 0002 C5F20503 		movt	r3, 20485
 517 0006 1B69     		ldr	r3, [r3, #16]
 518 0008 1840     		ands	r0, r0, r3
 519              	.LVL30:
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   if ((itstatus != (uint16_t)RESET))
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     bitstatus = SET;
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   else
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   {
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****     bitstatus = RESET;
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   }
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   return bitstatus;
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** }
 520              		.loc 1 498 0
 521 000a 0030     		adds	r0, r0, #0
 522 000c 18BF     		it	ne
 523 000e 0120     		movne	r0, #1
 524              	.LVL31:
 525 0010 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE123:
 529 0012 00BF     		.section	.text.DCMI_ClearITPendingBit,"ax",%progbits
 530              		.align	2
 531              		.global	DCMI_ClearITPendingBit
 532              		.thumb
 533              		.thumb_func
 535              	DCMI_ClearITPendingBit:
 536              	.LFB124:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** 
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** /**
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @brief  Clears the DCMI's interrupt pending bits.
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @param  DCMI_IT: specifies the DCMI interrupt pending bit to clear.
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *          This parameter can be any combination of the following values:
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_OVF: Overflow interrupt mask
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   *            @arg DCMI_IT_LINE: Line interrupt mask
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   * @retval None
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   */
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c **** {
 537              		.loc 1 512 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542              	.LVL32:
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   corresponding pending Bit position*/
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dcmi.c ****   DCMI->ICR = DCMI_IT;
 543              		.loc 1 516 0
 544 0000 0023     		movs	r3, #0
 545 0002 C5F20503 		movt	r3, 20485
 546 0006 5861     		str	r0, [r3, #20]
 547 0008 7047     		bx	lr
 548              		.cfi_endproc
 549              	.LFE124:
 551 000a 00BF     		.text
 552              	.Letext0:
 553              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 554              		.file 3 "/usr/include/newlib/stdint.h"
 555              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 556              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dcmi.h"
 557              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dcmi.c
     /tmp/cctcbQlB.s:20     .text.DCMI_DeInit:0000000000000000 $t
     /tmp/cctcbQlB.s:25     .text.DCMI_DeInit:0000000000000000 DCMI_DeInit
     /tmp/cctcbQlB.s:56     .text.DCMI_Init:0000000000000000 $t
     /tmp/cctcbQlB.s:61     .text.DCMI_Init:0000000000000000 DCMI_Init
     /tmp/cctcbQlB.s:126    .text.DCMI_StructInit:0000000000000000 $t
     /tmp/cctcbQlB.s:131    .text.DCMI_StructInit:0000000000000000 DCMI_StructInit
     /tmp/cctcbQlB.s:159    .text.DCMI_CROPConfig:0000000000000000 $t
     /tmp/cctcbQlB.s:164    .text.DCMI_CROPConfig:0000000000000000 DCMI_CROPConfig
     /tmp/cctcbQlB.s:193    .text.DCMI_CROPCmd:0000000000000000 $t
     /tmp/cctcbQlB.s:198    .text.DCMI_CROPCmd:0000000000000000 DCMI_CROPCmd
     /tmp/cctcbQlB.s:227    .text.DCMI_SetEmbeddedSynchroCodes:0000000000000000 $t
     /tmp/cctcbQlB.s:232    .text.DCMI_SetEmbeddedSynchroCodes:0000000000000000 DCMI_SetEmbeddedSynchroCodes
     /tmp/cctcbQlB.s:262    .text.DCMI_JPEGCmd:0000000000000000 $t
     /tmp/cctcbQlB.s:267    .text.DCMI_JPEGCmd:0000000000000000 DCMI_JPEGCmd
     /tmp/cctcbQlB.s:296    .text.DCMI_Cmd:0000000000000000 $t
     /tmp/cctcbQlB.s:301    .text.DCMI_Cmd:0000000000000000 DCMI_Cmd
     /tmp/cctcbQlB.s:330    .text.DCMI_CaptureCmd:0000000000000000 $t
     /tmp/cctcbQlB.s:335    .text.DCMI_CaptureCmd:0000000000000000 DCMI_CaptureCmd
     /tmp/cctcbQlB.s:364    .text.DCMI_ReadData:0000000000000000 $t
     /tmp/cctcbQlB.s:369    .text.DCMI_ReadData:0000000000000000 DCMI_ReadData
     /tmp/cctcbQlB.s:386    .text.DCMI_ITConfig:0000000000000000 $t
     /tmp/cctcbQlB.s:391    .text.DCMI_ITConfig:0000000000000000 DCMI_ITConfig
     /tmp/cctcbQlB.s:425    .text.DCMI_GetFlagStatus:0000000000000000 $t
     /tmp/cctcbQlB.s:430    .text.DCMI_GetFlagStatus:0000000000000000 DCMI_GetFlagStatus
     /tmp/cctcbQlB.s:479    .text.DCMI_ClearFlag:0000000000000000 $t
     /tmp/cctcbQlB.s:484    .text.DCMI_ClearFlag:0000000000000000 DCMI_ClearFlag
     /tmp/cctcbQlB.s:501    .text.DCMI_GetITStatus:0000000000000000 $t
     /tmp/cctcbQlB.s:506    .text.DCMI_GetITStatus:0000000000000000 DCMI_GetITStatus
     /tmp/cctcbQlB.s:530    .text.DCMI_ClearITPendingBit:0000000000000000 $t
     /tmp/cctcbQlB.s:535    .text.DCMI_ClearITPendingBit:0000000000000000 DCMI_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.108.0fbfcc63b300b4b16e86cd9b5110b14a

NO UNDEFINED SYMBOLS
