   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_cryp_tdes.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.CRYP_TDES_ECB,"ax",%progbits
  20              		.align	2
  21              		.global	CRYP_TDES_ECB
  22              		.thumb
  23              		.thumb_func
  25              	CRYP_TDES_ECB:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @file    stm32f4xx_cryp_tdes.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief   This file provides high level functions to encrypt and decrypt an 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          input message using TDES in ECB/CBC modes .
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          peripheral.
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *  @verbatim
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          ===================================================================
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *                                   How to use this driver
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          1. Enable The CRYP controller clock using 
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          2. Encrypt and decrypt using TDES in ECB Mode using CRYP_TDES_ECB()
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *             function.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          3. Encrypt and decrypt using TDES in CBC Mode using CRYP_TDES_CBC()
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *             function.
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *  @endverbatim
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @attention
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ******************************************************************************
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */ 
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Includes ------------------------------------------------------------------*/
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** #include "stm32f4xx_cryp.h"
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief CRYP driver modules
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private typedef -----------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private define ------------------------------------------------------------*/
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** #define TDESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private macro -------------------------------------------------------------*/
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private variables ---------------------------------------------------------*/
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private function prototypes -----------------------------------------------*/
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /* Private functions ---------------------------------------------------------*/
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Private_Functions
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */ 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /** @defgroup CRYP_Group7 High Level TDES functions
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  *  @brief   High Level TDES functions 
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  *
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** @verbatim   
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           High Level TDES functions
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****  ===============================================================================
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** @endverbatim
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @{
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in ECB Mode
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           uint32_t Ilength, uint8_t *Output)
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** {
  28              		.loc 1 98 0
  29              		.cfi_startproc
  30              		@ args = 4, pretend = 0, frame = 48
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 4, -32
  37              		.cfi_offset 5, -28
  38              		.cfi_offset 6, -24
  39              		.cfi_offset 7, -20
  40              		.cfi_offset 8, -16
  41              		.cfi_offset 9, -12
  42              		.cfi_offset 10, -8
  43              		.cfi_offset 14, -4
  44 0004 8CB0     		sub	sp, sp, #48
  45              	.LCFI1:
  46              		.cfi_def_cfa_offset 80
  47 0006 0646     		mov	r6, r0
  48 0008 0C46     		mov	r4, r1
  49 000a 9A46     		mov	r10, r3
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 101 0
  51 000c 0023     		movs	r3, #0
  52              	.LVL1:
  53 000e 0193     		str	r3, [sp, #4]
  54              	.LVL2:
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
  55              		.loc 1 105 0
  56 0010 1546     		mov	r5, r2
  57              	.LVL3:
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
  58              		.loc 1 106 0
  59 0012 DDF85090 		ldr	r9, [sp, #80]
  60              	.LVL4:
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
  61              		.loc 1 110 0
  62 0016 02A8     		add	r0, sp, #8
  63              	.LVL5:
  64 0018 FFF7FEFF 		bl	CRYP_KeyStructInit
  65              	.LVL6:
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
  66              		.loc 1 113 0
  67 001c 012E     		cmp	r6, #1
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
  68              		.loc 1 115 0
  69 001e 0CBF     		ite	eq
  70 0020 0023     		moveq	r3, #0
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****      TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
  71              		.loc 1 119 0
  72 0022 0423     		movne	r3, #4
  73 0024 ADF82830 		strh	r3, [sp, #40]	@ movhi
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
  74              		.loc 1 122 0
  75 0028 0023     		movs	r3, #0
  76 002a ADF82A30 		strh	r3, [sp, #42]	@ movhi
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
  77              		.loc 1 123 0
  78 002e 8023     		movs	r3, #128
  79 0030 ADF82C30 		strh	r3, [sp, #44]	@ movhi
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
  80              		.loc 1 124 0
  81 0034 0AA8     		add	r0, sp, #40
  82 0036 FFF7FEFF 		bl	CRYP_Init
  83              	.LVL7:
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
  84              		.loc 1 127 0
  85 003a 2368     		ldr	r3, [r4]
  86              	.LVL8:
  87              	.LBB30:
  88              	.LBB31:
  89              		.file 2 "libs/CMSIS/Include/core_cmInstr.h"
   1:libs/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:libs/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:libs/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cmInstr.h ****  *
   7:libs/CMSIS/Include/core_cmInstr.h ****  * @note
   8:libs/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmInstr.h ****  *
  10:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  11:libs/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmInstr.h ****  *
  15:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  16:libs/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmInstr.h ****  *
  22:libs/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmInstr.h **** 
  24:libs/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:libs/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:libs/CMSIS/Include/core_cmInstr.h **** 
  27:libs/CMSIS/Include/core_cmInstr.h **** 
  28:libs/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:libs/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:libs/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:libs/CMSIS/Include/core_cmInstr.h ****   @{
  32:libs/CMSIS/Include/core_cmInstr.h **** */
  33:libs/CMSIS/Include/core_cmInstr.h **** 
  34:libs/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmInstr.h **** 
  37:libs/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmInstr.h **** #endif
  40:libs/CMSIS/Include/core_cmInstr.h **** 
  41:libs/CMSIS/Include/core_cmInstr.h **** 
  42:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:libs/CMSIS/Include/core_cmInstr.h **** 
  44:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:libs/CMSIS/Include/core_cmInstr.h ****  */
  46:libs/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:libs/CMSIS/Include/core_cmInstr.h **** 
  48:libs/CMSIS/Include/core_cmInstr.h **** 
  49:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:libs/CMSIS/Include/core_cmInstr.h **** 
  51:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:libs/CMSIS/Include/core_cmInstr.h ****  */
  54:libs/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:libs/CMSIS/Include/core_cmInstr.h **** 
  56:libs/CMSIS/Include/core_cmInstr.h **** 
  57:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:libs/CMSIS/Include/core_cmInstr.h **** 
  59:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:libs/CMSIS/Include/core_cmInstr.h ****  */
  62:libs/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:libs/CMSIS/Include/core_cmInstr.h **** 
  64:libs/CMSIS/Include/core_cmInstr.h **** 
  65:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:libs/CMSIS/Include/core_cmInstr.h **** 
  67:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:libs/CMSIS/Include/core_cmInstr.h ****  */
  69:libs/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:libs/CMSIS/Include/core_cmInstr.h **** 
  71:libs/CMSIS/Include/core_cmInstr.h **** 
  72:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:libs/CMSIS/Include/core_cmInstr.h **** 
  74:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:libs/CMSIS/Include/core_cmInstr.h ****  */
  78:libs/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:libs/CMSIS/Include/core_cmInstr.h **** 
  80:libs/CMSIS/Include/core_cmInstr.h **** 
  81:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:libs/CMSIS/Include/core_cmInstr.h **** 
  83:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:libs/CMSIS/Include/core_cmInstr.h ****  */
  86:libs/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:libs/CMSIS/Include/core_cmInstr.h **** 
  88:libs/CMSIS/Include/core_cmInstr.h **** 
  89:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:libs/CMSIS/Include/core_cmInstr.h **** 
  91:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:libs/CMSIS/Include/core_cmInstr.h ****  */
  94:libs/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:libs/CMSIS/Include/core_cmInstr.h **** 
  96:libs/CMSIS/Include/core_cmInstr.h **** 
  97:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:libs/CMSIS/Include/core_cmInstr.h **** 
  99:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:libs/CMSIS/Include/core_cmInstr.h **** 
 101:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:libs/CMSIS/Include/core_cmInstr.h ****  */
 104:libs/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:libs/CMSIS/Include/core_cmInstr.h **** 
 106:libs/CMSIS/Include/core_cmInstr.h **** 
 107:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:libs/CMSIS/Include/core_cmInstr.h **** 
 109:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:libs/CMSIS/Include/core_cmInstr.h **** 
 111:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:libs/CMSIS/Include/core_cmInstr.h ****  */
 114:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:libs/CMSIS/Include/core_cmInstr.h **** {
 116:libs/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:libs/CMSIS/Include/core_cmInstr.h **** }
 119:libs/CMSIS/Include/core_cmInstr.h **** 
 120:libs/CMSIS/Include/core_cmInstr.h **** 
 121:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:libs/CMSIS/Include/core_cmInstr.h **** 
 123:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:libs/CMSIS/Include/core_cmInstr.h **** 
 125:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:libs/CMSIS/Include/core_cmInstr.h ****  */
 128:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:libs/CMSIS/Include/core_cmInstr.h **** {
 130:libs/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:libs/CMSIS/Include/core_cmInstr.h **** }
 133:libs/CMSIS/Include/core_cmInstr.h **** 
 134:libs/CMSIS/Include/core_cmInstr.h **** 
 135:libs/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:libs/CMSIS/Include/core_cmInstr.h **** 
 137:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:libs/CMSIS/Include/core_cmInstr.h **** 
 139:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:libs/CMSIS/Include/core_cmInstr.h **** 
 141:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:libs/CMSIS/Include/core_cmInstr.h ****  */
 144:libs/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:libs/CMSIS/Include/core_cmInstr.h **** 
 146:libs/CMSIS/Include/core_cmInstr.h **** 
 147:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:libs/CMSIS/Include/core_cmInstr.h **** 
 149:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:libs/CMSIS/Include/core_cmInstr.h **** 
 151:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:libs/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:libs/CMSIS/Include/core_cmInstr.h ****  */
 154:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:libs/CMSIS/Include/core_cmInstr.h **** 
 156:libs/CMSIS/Include/core_cmInstr.h **** 
 157:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:libs/CMSIS/Include/core_cmInstr.h **** 
 159:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:libs/CMSIS/Include/core_cmInstr.h **** 
 161:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:libs/CMSIS/Include/core_cmInstr.h ****  */
 164:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:libs/CMSIS/Include/core_cmInstr.h **** 
 166:libs/CMSIS/Include/core_cmInstr.h **** 
 167:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:libs/CMSIS/Include/core_cmInstr.h **** 
 169:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:libs/CMSIS/Include/core_cmInstr.h **** 
 171:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:libs/CMSIS/Include/core_cmInstr.h ****  */
 174:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:libs/CMSIS/Include/core_cmInstr.h **** 
 176:libs/CMSIS/Include/core_cmInstr.h **** 
 177:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:libs/CMSIS/Include/core_cmInstr.h **** 
 179:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:libs/CMSIS/Include/core_cmInstr.h **** 
 181:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:libs/CMSIS/Include/core_cmInstr.h ****  */
 186:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:libs/CMSIS/Include/core_cmInstr.h **** 
 188:libs/CMSIS/Include/core_cmInstr.h **** 
 189:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:libs/CMSIS/Include/core_cmInstr.h **** 
 191:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:libs/CMSIS/Include/core_cmInstr.h **** 
 193:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:libs/CMSIS/Include/core_cmInstr.h ****  */
 198:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:libs/CMSIS/Include/core_cmInstr.h **** 
 200:libs/CMSIS/Include/core_cmInstr.h **** 
 201:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:libs/CMSIS/Include/core_cmInstr.h **** 
 203:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:libs/CMSIS/Include/core_cmInstr.h **** 
 205:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:libs/CMSIS/Include/core_cmInstr.h ****  */
 210:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:libs/CMSIS/Include/core_cmInstr.h **** 
 212:libs/CMSIS/Include/core_cmInstr.h **** 
 213:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:libs/CMSIS/Include/core_cmInstr.h **** 
 215:libs/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:libs/CMSIS/Include/core_cmInstr.h **** 
 217:libs/CMSIS/Include/core_cmInstr.h ****  */
 218:libs/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:libs/CMSIS/Include/core_cmInstr.h **** 
 220:libs/CMSIS/Include/core_cmInstr.h **** 
 221:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:libs/CMSIS/Include/core_cmInstr.h **** 
 223:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:libs/CMSIS/Include/core_cmInstr.h **** 
 225:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:libs/CMSIS/Include/core_cmInstr.h ****  */
 229:libs/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:libs/CMSIS/Include/core_cmInstr.h **** 
 231:libs/CMSIS/Include/core_cmInstr.h **** 
 232:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:libs/CMSIS/Include/core_cmInstr.h **** 
 234:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:libs/CMSIS/Include/core_cmInstr.h **** 
 236:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:libs/CMSIS/Include/core_cmInstr.h ****  */
 240:libs/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:libs/CMSIS/Include/core_cmInstr.h **** 
 242:libs/CMSIS/Include/core_cmInstr.h **** 
 243:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:libs/CMSIS/Include/core_cmInstr.h **** 
 245:libs/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:libs/CMSIS/Include/core_cmInstr.h **** 
 247:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:libs/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:libs/CMSIS/Include/core_cmInstr.h ****  */
 250:libs/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:libs/CMSIS/Include/core_cmInstr.h **** 
 252:libs/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:libs/CMSIS/Include/core_cmInstr.h **** 
 254:libs/CMSIS/Include/core_cmInstr.h **** 
 255:libs/CMSIS/Include/core_cmInstr.h **** 
 256:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:libs/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:libs/CMSIS/Include/core_cmInstr.h **** 
 259:libs/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:libs/CMSIS/Include/core_cmInstr.h **** 
 261:libs/CMSIS/Include/core_cmInstr.h **** 
 262:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:libs/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:libs/CMSIS/Include/core_cmInstr.h **** 
 265:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:libs/CMSIS/Include/core_cmInstr.h **** 
 267:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:libs/CMSIS/Include/core_cmInstr.h ****  */
 269:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:libs/CMSIS/Include/core_cmInstr.h **** {
 271:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:libs/CMSIS/Include/core_cmInstr.h **** }
 273:libs/CMSIS/Include/core_cmInstr.h **** 
 274:libs/CMSIS/Include/core_cmInstr.h **** 
 275:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:libs/CMSIS/Include/core_cmInstr.h **** 
 277:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:libs/CMSIS/Include/core_cmInstr.h ****  */
 280:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:libs/CMSIS/Include/core_cmInstr.h **** {
 282:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:libs/CMSIS/Include/core_cmInstr.h **** }
 284:libs/CMSIS/Include/core_cmInstr.h **** 
 285:libs/CMSIS/Include/core_cmInstr.h **** 
 286:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:libs/CMSIS/Include/core_cmInstr.h **** 
 288:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:libs/CMSIS/Include/core_cmInstr.h ****  */
 291:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:libs/CMSIS/Include/core_cmInstr.h **** {
 293:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 294:libs/CMSIS/Include/core_cmInstr.h **** }
 295:libs/CMSIS/Include/core_cmInstr.h **** 
 296:libs/CMSIS/Include/core_cmInstr.h **** 
 297:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 298:libs/CMSIS/Include/core_cmInstr.h **** 
 299:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:libs/CMSIS/Include/core_cmInstr.h ****  */
 301:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:libs/CMSIS/Include/core_cmInstr.h **** {
 303:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 304:libs/CMSIS/Include/core_cmInstr.h **** }
 305:libs/CMSIS/Include/core_cmInstr.h **** 
 306:libs/CMSIS/Include/core_cmInstr.h **** 
 307:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:libs/CMSIS/Include/core_cmInstr.h **** 
 309:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 312:libs/CMSIS/Include/core_cmInstr.h ****  */
 313:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:libs/CMSIS/Include/core_cmInstr.h **** {
 315:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 316:libs/CMSIS/Include/core_cmInstr.h **** }
 317:libs/CMSIS/Include/core_cmInstr.h **** 
 318:libs/CMSIS/Include/core_cmInstr.h **** 
 319:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:libs/CMSIS/Include/core_cmInstr.h **** 
 321:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:libs/CMSIS/Include/core_cmInstr.h ****  */
 324:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:libs/CMSIS/Include/core_cmInstr.h **** {
 326:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 327:libs/CMSIS/Include/core_cmInstr.h **** }
 328:libs/CMSIS/Include/core_cmInstr.h **** 
 329:libs/CMSIS/Include/core_cmInstr.h **** 
 330:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:libs/CMSIS/Include/core_cmInstr.h **** 
 332:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:libs/CMSIS/Include/core_cmInstr.h ****  */
 335:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:libs/CMSIS/Include/core_cmInstr.h **** {
 337:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 338:libs/CMSIS/Include/core_cmInstr.h **** }
 339:libs/CMSIS/Include/core_cmInstr.h **** 
 340:libs/CMSIS/Include/core_cmInstr.h **** 
 341:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:libs/CMSIS/Include/core_cmInstr.h **** 
 343:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:libs/CMSIS/Include/core_cmInstr.h **** 
 345:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 347:libs/CMSIS/Include/core_cmInstr.h ****  */
 348:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:libs/CMSIS/Include/core_cmInstr.h **** {
 350:libs/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 351:libs/CMSIS/Include/core_cmInstr.h ****   
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
  90              		.loc 2 352 0
  91              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
  92 003c 1BBA     		rev r3, r3
  93              	@ 0 "" 2
  94              	.LVL9:
  95              		.thumb
  96              	.LBE31:
  97              	.LBE30:
  98              		.loc 1 127 0
  99 003e 0493     		str	r3, [sp, #16]
 100              	.LVL10:
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 101              		.loc 1 129 0
 102 0040 6368     		ldr	r3, [r4, #4]
 103              	.LVL11:
 104              	.LBB32:
 105              	.LBB33:
 106              		.loc 2 352 0
 107              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 108 0042 1BBA     		rev r3, r3
 109              	@ 0 "" 2
 110              	.LVL12:
 111              		.thumb
 112              	.LBE33:
 113              	.LBE32:
 114              		.loc 1 129 0
 115 0044 0593     		str	r3, [sp, #20]
 116              	.LVL13:
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 117              		.loc 1 131 0
 118 0046 A368     		ldr	r3, [r4, #8]
 119              	.LVL14:
 120              	.LBB34:
 121              	.LBB35:
 122              		.loc 2 352 0
 123              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 124 0048 1BBA     		rev r3, r3
 125              	@ 0 "" 2
 126              	.LVL15:
 127              		.thumb
 128              	.LBE35:
 129              	.LBE34:
 130              		.loc 1 131 0
 131 004a 0693     		str	r3, [sp, #24]
 132              	.LVL16:
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 133              		.loc 1 133 0
 134 004c E368     		ldr	r3, [r4, #12]
 135              	.LVL17:
 136              	.LBB36:
 137              	.LBB37:
 138              		.loc 2 352 0
 139              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 140 004e 1BBA     		rev r3, r3
 141              	@ 0 "" 2
 142              	.LVL18:
 143              		.thumb
 144              	.LBE37:
 145              	.LBE36:
 146              		.loc 1 133 0
 147 0050 0793     		str	r3, [sp, #28]
 148              	.LVL19:
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 149              		.loc 1 135 0
 150 0052 2369     		ldr	r3, [r4, #16]
 151              	.LVL20:
 152              	.LBB38:
 153              	.LBB39:
 154              		.loc 2 352 0
 155              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 156 0054 1BBA     		rev r3, r3
 157              	@ 0 "" 2
 158              	.LVL21:
 159              		.thumb
 160              	.LBE39:
 161              	.LBE38:
 162              		.loc 1 135 0
 163 0056 0893     		str	r3, [sp, #32]
 164              	.LVL22:
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 165              		.loc 1 137 0
 166 0058 6369     		ldr	r3, [r4, #20]
 167              	.LVL23:
 168              	.LBB40:
 169              	.LBB41:
 170              		.loc 2 352 0
 171              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 172 005a 1BBA     		rev r3, r3
 173              	@ 0 "" 2
 174              	.LVL24:
 175              		.thumb
 176              	.LBE41:
 177              	.LBE40:
 178              		.loc 1 137 0
 179 005c 0993     		str	r3, [sp, #36]
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 180              		.loc 1 138 0
 181 005e 02A8     		add	r0, sp, #8
 182 0060 FFF7FEFF 		bl	CRYP_KeyInit
 183              	.LVL25:
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 184              		.loc 1 141 0
 185 0064 FFF7FEFF 		bl	CRYP_FIFOFlush
 186              	.LVL26:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 187              		.loc 1 144 0
 188 0068 0120     		movs	r0, #1
 189 006a FFF7FEFF 		bl	CRYP_Cmd
 190              	.LVL27:
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 191              		.loc 1 146 0
 192 006e 0026     		movs	r6, #0
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 193              		.loc 1 103 0
 194 0070 0127     		movs	r7, #1
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 195              		.loc 1 155 0
 196 0072 B046     		mov	r8, r6
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 197              		.loc 1 158 0
 198 0074 1024     		movs	r4, #16
 199              	.LVL28:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 200              		.loc 1 146 0
 201 0076 23E0     		b	.L4
 202              	.LVL29:
 203              	.L8:
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 204              		.loc 1 149 0
 205 0078 2868     		ldr	r0, [r5]
 206 007a FFF7FEFF 		bl	CRYP_DataIn
 207              	.LVL30:
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 208              		.loc 1 151 0
 209 007e 6868     		ldr	r0, [r5, #4]
 210 0080 FFF7FEFF 		bl	CRYP_DataIn
 211              	.LVL31:
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 212              		.loc 1 152 0
 213 0084 0835     		adds	r5, r5, #8
 214              	.LVL32:
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 215              		.loc 1 155 0
 216 0086 CDF80480 		str	r8, [sp, #4]
 217              	.L6:
 218              		.loc 1 158 0 discriminator 1
 219 008a 2046     		mov	r0, r4
 220 008c FFF7FEFF 		bl	CRYP_GetFlagStatus
 221              	.LVL33:
 222 0090 0246     		mov	r2, r0
 223              	.LVL34:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       counter++;
 224              		.loc 1 159 0 discriminator 1
 225 0092 019B     		ldr	r3, [sp, #4]
 226 0094 0133     		adds	r3, r3, #1
 227 0096 0193     		str	r3, [sp, #4]
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 228              		.loc 1 160 0 discriminator 1
 229 0098 019B     		ldr	r3, [sp, #4]
 230 009a B3F5803F 		cmp	r3, #65536
 231 009e 01D0     		beq	.L5
 232 00a0 0028     		cmp	r0, #0
 233 00a2 F2D1     		bne	.L6
 234              	.L5:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 235              		.loc 1 162 0
 236 00a4 52B9     		cbnz	r2, .L9
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     else
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 237              		.loc 1 170 0
 238 00a6 FFF7FEFF 		bl	CRYP_DataOut
 239              	.LVL35:
 240 00aa C9F80000 		str	r0, [r9]
 241              	.LVL36:
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 242              		.loc 1 172 0
 243 00ae FFF7FEFF 		bl	CRYP_DataOut
 244              	.LVL37:
 245 00b2 C9F80400 		str	r0, [r9, #4]
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 246              		.loc 1 173 0
 247 00b6 09F10809 		add	r9, r9, #8
 248              	.LVL38:
 249 00ba 00E0     		b	.L7
 250              	.LVL39:
 251              	.L9:
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 252              		.loc 1 164 0
 253 00bc 4746     		mov	r7, r8
 254              	.LVL40:
 255              	.L7:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 256              		.loc 1 146 0
 257 00be 0836     		adds	r6, r6, #8
 258              	.LVL41:
 259              	.L4:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 260              		.loc 1 146 0 is_stmt 0 discriminator 1
 261 00c0 5645     		cmp	r6, r10
 262 00c2 2CBF     		ite	cs
 263 00c4 0023     		movcs	r3, #0
 264 00c6 07F00103 		andcc	r3, r7, #1
 265 00ca 002B     		cmp	r3, #0
 266 00cc D4D1     		bne	.L8
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 267              		.loc 1 178 0 is_stmt 1
 268 00ce 0020     		movs	r0, #0
 269 00d0 FFF7FEFF 		bl	CRYP_Cmd
 270              	.LVL42:
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   return status; 
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** }
 271              		.loc 1 181 0
 272 00d4 3846     		mov	r0, r7
 273 00d6 0CB0     		add	sp, sp, #48
 274              		@ sp needed
 275 00d8 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 276              		.cfi_endproc
 277              	.LFE110:
 279              		.section	.text.CRYP_TDES_CBC,"ax",%progbits
 280              		.align	2
 281              		.global	CRYP_TDES_CBC
 282              		.thumb
 283              		.thumb_func
 285              	CRYP_TDES_CBC:
 286              	.LFB111:
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** /**
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @brief  Encrypt and decrypt using TDES in CBC Mode
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Mode: encryption or decryption Mode.
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *           This parameter can be one of the following values:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_ENCRYPT: Encryption
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *            @arg MODE_DECRYPT: Decryption
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Key: Key used for TDES algorithm.
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  InitVectors: Initialisation Vectors used for TDES algorithm.
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Input: pointer to the Input buffer.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Ilength: length of the Input buffer, must be a multiple of 8.
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @param  Output: pointer to the returned buffer.
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   * @retval An ErrorStatus enumeration value:
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - SUCCESS: Operation done
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   *          - ERROR: Operation failed
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   */
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****                           uint8_t *Input, uint32_t Ilength, uint8_t *Output)
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** {
 287              		.loc 1 200 0
 288              		.cfi_startproc
 289              		@ args = 8, pretend = 0, frame = 64
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291              	.LVL43:
 292 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 293              	.LCFI2:
 294              		.cfi_def_cfa_offset 32
 295              		.cfi_offset 4, -32
 296              		.cfi_offset 5, -28
 297              		.cfi_offset 6, -24
 298              		.cfi_offset 7, -20
 299              		.cfi_offset 8, -16
 300              		.cfi_offset 9, -12
 301              		.cfi_offset 10, -8
 302              		.cfi_offset 14, -4
 303 0004 90B0     		sub	sp, sp, #64
 304              	.LCFI3:
 305              		.cfi_def_cfa_offset 96
 306 0006 0746     		mov	r7, r0
 307 0008 0C46     		mov	r4, r1
 308 000a 1646     		mov	r6, r2
 309 000c DDF860A0 		ldr	r10, [sp, #96]
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_InitTypeDef TDES_CRYP_InitStructure;
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   __IO uint32_t counter = 0;
 310              		.loc 1 204 0
 311 0010 0022     		movs	r2, #0
 312              	.LVL44:
 313 0012 0192     		str	r2, [sp, #4]
 314              	.LVL45:
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t busystatus = 0;
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ErrorStatus status = SUCCESS;
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t inputaddr  = (uint32_t)Input;
 315              		.loc 1 208 0
 316 0014 1D46     		mov	r5, r3
 317              	.LVL46:
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t outputaddr = (uint32_t)Output;
 318              		.loc 1 209 0
 319 0016 DDF86490 		ldr	r9, [sp, #100]
 320              	.LVL47:
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t ivaddr     = (uint32_t)InitVectors;
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t i = 0;
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto structures initialisation*/
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 321              		.loc 1 214 0
 322 001a 06A8     		add	r0, sp, #24
 323              	.LVL48:
 324 001c FFF7FEFF 		bl	CRYP_KeyStructInit
 325              	.LVL49:
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Crypto Init for Encryption process */
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   if(Mode == MODE_ENCRYPT) /* TDES encryption */
 326              		.loc 1 217 0
 327 0020 012F     		cmp	r7, #1
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 328              		.loc 1 219 0
 329 0022 0CBF     		ite	eq
 330 0024 0023     		moveq	r3, #0
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   else
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 331              		.loc 1 223 0
 332 0026 0423     		movne	r3, #4
 333 0028 ADF83830 		strh	r3, [sp, #56]	@ movhi
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 334              		.loc 1 225 0
 335 002c 0823     		movs	r3, #8
 336 002e ADF83A30 		strh	r3, [sp, #58]	@ movhi
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 337              		.loc 1 226 0
 338 0032 8023     		movs	r3, #128
 339 0034 ADF83C30 		strh	r3, [sp, #60]	@ movhi
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Init(&TDES_CRYP_InitStructure);
 340              		.loc 1 228 0
 341 0038 0EA8     		add	r0, sp, #56
 342 003a FFF7FEFF 		bl	CRYP_Init
 343              	.LVL50:
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Key Initialisation */
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 344              		.loc 1 231 0
 345 003e 2368     		ldr	r3, [r4]
 346              	.LVL51:
 347              	.LBB42:
 348              	.LBB43:
 349              		.loc 2 352 0
 350              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 351 0040 1BBA     		rev r3, r3
 352              	@ 0 "" 2
 353              	.LVL52:
 354              		.thumb
 355              	.LBE43:
 356              	.LBE42:
 357              		.loc 1 231 0
 358 0042 0893     		str	r3, [sp, #32]
 359              	.LVL53:
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 360              		.loc 1 233 0
 361 0044 6368     		ldr	r3, [r4, #4]
 362              	.LVL54:
 363              	.LBB44:
 364              	.LBB45:
 365              		.loc 2 352 0
 366              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 367 0046 1BBA     		rev r3, r3
 368              	@ 0 "" 2
 369              	.LVL55:
 370              		.thumb
 371              	.LBE45:
 372              	.LBE44:
 373              		.loc 1 233 0
 374 0048 0993     		str	r3, [sp, #36]
 375              	.LVL56:
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 376              		.loc 1 235 0
 377 004a A368     		ldr	r3, [r4, #8]
 378              	.LVL57:
 379              	.LBB46:
 380              	.LBB47:
 381              		.loc 2 352 0
 382              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 383 004c 1BBA     		rev r3, r3
 384              	@ 0 "" 2
 385              	.LVL58:
 386              		.thumb
 387              	.LBE47:
 388              	.LBE46:
 389              		.loc 1 235 0
 390 004e 0A93     		str	r3, [sp, #40]
 391              	.LVL59:
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 392              		.loc 1 237 0
 393 0050 E368     		ldr	r3, [r4, #12]
 394              	.LVL60:
 395              	.LBB48:
 396              	.LBB49:
 397              		.loc 2 352 0
 398              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 399 0052 1BBA     		rev r3, r3
 400              	@ 0 "" 2
 401              	.LVL61:
 402              		.thumb
 403              	.LBE49:
 404              	.LBE48:
 405              		.loc 1 237 0
 406 0054 0B93     		str	r3, [sp, #44]
 407              	.LVL62:
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 408              		.loc 1 239 0
 409 0056 2369     		ldr	r3, [r4, #16]
 410              	.LVL63:
 411              	.LBB50:
 412              	.LBB51:
 413              		.loc 2 352 0
 414              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 415 0058 1BBA     		rev r3, r3
 416              	@ 0 "" 2
 417              	.LVL64:
 418              		.thumb
 419              	.LBE51:
 420              	.LBE50:
 421              		.loc 1 239 0
 422 005a 0C93     		str	r3, [sp, #48]
 423              	.LVL65:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   keyaddr+=4;
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 424              		.loc 1 241 0
 425 005c 6369     		ldr	r3, [r4, #20]
 426              	.LVL66:
 427              	.LBB52:
 428              	.LBB53:
 429              		.loc 2 352 0
 430              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 431 005e 1BBA     		rev r3, r3
 432              	@ 0 "" 2
 433              	.LVL67:
 434              		.thumb
 435              	.LBE53:
 436              	.LBE52:
 437              		.loc 1 241 0
 438 0060 0D93     		str	r3, [sp, #52]
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 439              		.loc 1 242 0
 440 0062 06A8     		add	r0, sp, #24
 441 0064 FFF7FEFF 		bl	CRYP_KeyInit
 442              	.LVL68:
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Initialization Vectors */
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 443              		.loc 1 245 0
 444 0068 3368     		ldr	r3, [r6]
 445              	.LVL69:
 446              	.LBB54:
 447              	.LBB55:
 448              		.loc 2 352 0
 449              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 450 006a 1BBA     		rev r3, r3
 451              	@ 0 "" 2
 452              	.LVL70:
 453              		.thumb
 454              	.LBE55:
 455              	.LBE54:
 456              		.loc 1 245 0
 457 006c 0293     		str	r3, [sp, #8]
 458              	.LVL71:
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   ivaddr+=4;
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 459              		.loc 1 247 0
 460 006e 7368     		ldr	r3, [r6, #4]
 461              	.LVL72:
 462              	.LBB56:
 463              	.LBB57:
 464              		.loc 2 352 0
 465              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 466 0070 1BBA     		rev r3, r3
 467              	@ 0 "" 2
 468              	.LVL73:
 469              		.thumb
 470              	.LBE57:
 471              	.LBE56:
 472              		.loc 1 247 0
 473 0072 0393     		str	r3, [sp, #12]
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 474              		.loc 1 248 0
 475 0074 02A8     		add	r0, sp, #8
 476              	.LVL74:
 477 0076 FFF7FEFF 		bl	CRYP_IVInit
 478              	.LVL75:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Flush IN/OUT FIFO */
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_FIFOFlush();
 479              		.loc 1 251 0
 480 007a FFF7FEFF 		bl	CRYP_FIFOFlush
 481              	.LVL76:
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Enable Crypto processor */
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(ENABLE);
 482              		.loc 1 254 0
 483 007e 0120     		movs	r0, #1
 484 0080 FFF7FEFF 		bl	CRYP_Cmd
 485              	.LVL77:
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 486              		.loc 1 256 0
 487 0084 0026     		movs	r6, #0
 488              	.LVL78:
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   uint32_t keyaddr    = (uint32_t)Key;
 489              		.loc 1 206 0
 490 0086 0127     		movs	r7, #1
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Write the Input block in the Input FIFO */
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     CRYP_DataIn(*(uint32_t*)(inputaddr));
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     /* Wait until the complete message has been processed */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     counter = 0;
 491              		.loc 1 265 0
 492 0088 B046     		mov	r8, r6
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 493              		.loc 1 268 0
 494 008a 1024     		movs	r4, #16
 495              	.LVL79:
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 496              		.loc 1 256 0
 497 008c 23E0     		b	.L14
 498              	.LVL80:
 499              	.L18:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 500              		.loc 1 259 0
 501 008e 2868     		ldr	r0, [r5]
 502 0090 FFF7FEFF 		bl	CRYP_DataIn
 503              	.LVL81:
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     inputaddr+=4;
 504              		.loc 1 261 0
 505 0094 6868     		ldr	r0, [r5, #4]
 506 0096 FFF7FEFF 		bl	CRYP_DataIn
 507              	.LVL82:
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 508              		.loc 1 262 0
 509 009a 0835     		adds	r5, r5, #8
 510              	.LVL83:
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     do
 511              		.loc 1 265 0
 512 009c CDF80480 		str	r8, [sp, #4]
 513              	.L16:
 514              		.loc 1 268 0 discriminator 1
 515 00a0 2046     		mov	r0, r4
 516 00a2 FFF7FEFF 		bl	CRYP_GetFlagStatus
 517              	.LVL84:
 518 00a6 0246     		mov	r2, r0
 519              	.LVL85:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       counter++;
 520              		.loc 1 269 0 discriminator 1
 521 00a8 019B     		ldr	r3, [sp, #4]
 522 00aa 0133     		adds	r3, r3, #1
 523 00ac 0193     		str	r3, [sp, #4]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 524              		.loc 1 270 0 discriminator 1
 525 00ae 019B     		ldr	r3, [sp, #4]
 526 00b0 B3F5803F 		cmp	r3, #65536
 527 00b4 01D0     		beq	.L15
 528 00b6 0028     		cmp	r0, #0
 529 00b8 F2D1     		bne	.L16
 530              	.L15:
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     if (busystatus != RESET)
 531              		.loc 1 272 0
 532 00ba 52B9     		cbnz	r2, .L19
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****    {
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****        status = ERROR;
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     else
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     {
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       /* Read the Output block from the Output FIFO */
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 533              		.loc 1 280 0
 534 00bc FFF7FEFF 		bl	CRYP_DataOut
 535              	.LVL86:
 536 00c0 C9F80000 		str	r0, [r9]
 537              	.LVL87:
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       *(uint32_t*)(outputaddr) = CRYP_DataOut();
 538              		.loc 1 282 0
 539 00c4 FFF7FEFF 		bl	CRYP_DataOut
 540              	.LVL88:
 541 00c8 C9F80400 		str	r0, [r9, #4]
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****       outputaddr+=4;
 542              		.loc 1 283 0
 543 00cc 09F10809 		add	r9, r9, #8
 544              	.LVL89:
 545 00d0 00E0     		b	.L17
 546              	.LVL90:
 547              	.L19:
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 548              		.loc 1 274 0
 549 00d2 4746     		mov	r7, r8
 550              	.LVL91:
 551              	.L17:
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 552              		.loc 1 256 0
 553 00d4 0836     		adds	r6, r6, #8
 554              	.LVL92:
 555              	.L14:
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   {
 556              		.loc 1 256 0 is_stmt 0 discriminator 1
 557 00d6 5645     		cmp	r6, r10
 558 00d8 2CBF     		ite	cs
 559 00da 0023     		movcs	r3, #0
 560 00dc 07F00103 		andcc	r3, r7, #1
 561 00e0 002B     		cmp	r3, #0
 562 00e2 D4D1     		bne	.L18
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****     }
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   }
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   /* Disable Crypto */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   CRYP_Cmd(DISABLE);
 563              		.loc 1 288 0 is_stmt 1
 564 00e4 0020     		movs	r0, #0
 565 00e6 FFF7FEFF 		bl	CRYP_Cmd
 566              	.LVL93:
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** 
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c ****   return status; 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_cryp_tdes.c **** }
 567              		.loc 1 291 0
 568 00ea 3846     		mov	r0, r7
 569 00ec 10B0     		add	sp, sp, #64
 570              		@ sp needed
 571 00ee BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 572              		.cfi_endproc
 573              	.LFE111:
 575 00f2 00BF     		.text
 576              	.Letext0:
 577              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 578              		.file 4 "/usr/include/newlib/stdint.h"
 579              		.file 5 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 580              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_cryp.h"
 581              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_cryp_tdes.c
     /tmp/ccUudzF1.s:20     .text.CRYP_TDES_ECB:0000000000000000 $t
     /tmp/ccUudzF1.s:25     .text.CRYP_TDES_ECB:0000000000000000 CRYP_TDES_ECB
     /tmp/ccUudzF1.s:280    .text.CRYP_TDES_CBC:0000000000000000 $t
     /tmp/ccUudzF1.s:285    .text.CRYP_TDES_CBC:0000000000000000 CRYP_TDES_CBC
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.119.d9dc2f059ca5f1650f6b9481919a2fab

UNDEFINED SYMBOLS
CRYP_KeyStructInit
CRYP_Init
CRYP_KeyInit
CRYP_FIFOFlush
CRYP_Cmd
CRYP_DataIn
CRYP_GetFlagStatus
CRYP_DataOut
CRYP_IVInit
