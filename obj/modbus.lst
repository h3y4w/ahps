   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"modbus.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata.crcHi,"a",%progbits
  20              		.align	2
  23              	crcHi:
  24 0000 00000000 		.word	0
  25 0004 C1000000 		.word	193
  26 0008 81000000 		.word	129
  27 000c 40000000 		.word	64
  28 0010 01000000 		.word	1
  29 0014 C0000000 		.word	192
  30 0018 80000000 		.word	128
  31 001c 41000000 		.word	65
  32 0020 01000000 		.word	1
  33 0024 C0000000 		.word	192
  34 0028 80000000 		.word	128
  35 002c 41000000 		.word	65
  36 0030 00000000 		.word	0
  37 0034 C1000000 		.word	193
  38 0038 81000000 		.word	129
  39 003c 40000000 		.word	64
  40 0040 01000000 		.word	1
  41 0044 C0000000 		.word	192
  42 0048 80000000 		.word	128
  43 004c 41000000 		.word	65
  44 0050 00000000 		.word	0
  45 0054 C1000000 		.word	193
  46 0058 81000000 		.word	129
  47 005c 40000000 		.word	64
  48 0060 00000000 		.word	0
  49 0064 C1000000 		.word	193
  50 0068 81000000 		.word	129
  51 006c 40000000 		.word	64
  52 0070 01000000 		.word	1
  53 0074 C0000000 		.word	192
  54 0078 80000000 		.word	128
  55 007c 41000000 		.word	65
  56 0080 01000000 		.word	1
  57 0084 C0000000 		.word	192
  58 0088 80000000 		.word	128
  59 008c 41000000 		.word	65
  60 0090 00000000 		.word	0
  61 0094 C1000000 		.word	193
  62 0098 81000000 		.word	129
  63 009c 40000000 		.word	64
  64 00a0 00000000 		.word	0
  65 00a4 C1000000 		.word	193
  66 00a8 81000000 		.word	129
  67 00ac 40000000 		.word	64
  68 00b0 01000000 		.word	1
  69 00b4 C0000000 		.word	192
  70 00b8 80000000 		.word	128
  71 00bc 41000000 		.word	65
  72 00c0 00000000 		.word	0
  73 00c4 C1000000 		.word	193
  74 00c8 81000000 		.word	129
  75 00cc 40000000 		.word	64
  76 00d0 01000000 		.word	1
  77 00d4 C0000000 		.word	192
  78 00d8 80000000 		.word	128
  79 00dc 41000000 		.word	65
  80 00e0 01000000 		.word	1
  81 00e4 C0000000 		.word	192
  82 00e8 80000000 		.word	128
  83 00ec 41000000 		.word	65
  84 00f0 00000000 		.word	0
  85 00f4 C1000000 		.word	193
  86 00f8 81000000 		.word	129
  87 00fc 40000000 		.word	64
  88 0100 01000000 		.word	1
  89 0104 C0000000 		.word	192
  90 0108 80000000 		.word	128
  91 010c 41000000 		.word	65
  92 0110 00000000 		.word	0
  93 0114 C1000000 		.word	193
  94 0118 81000000 		.word	129
  95 011c 40000000 		.word	64
  96 0120 00000000 		.word	0
  97 0124 C1000000 		.word	193
  98 0128 81000000 		.word	129
  99 012c 40000000 		.word	64
 100 0130 01000000 		.word	1
 101 0134 C0000000 		.word	192
 102 0138 80000000 		.word	128
 103 013c 41000000 		.word	65
 104 0140 00000000 		.word	0
 105 0144 C1000000 		.word	193
 106 0148 81000000 		.word	129
 107 014c 40000000 		.word	64
 108 0150 01000000 		.word	1
 109 0154 C0000000 		.word	192
 110 0158 80000000 		.word	128
 111 015c 41000000 		.word	65
 112 0160 01000000 		.word	1
 113 0164 C0000000 		.word	192
 114 0168 80000000 		.word	128
 115 016c 41000000 		.word	65
 116 0170 00000000 		.word	0
 117 0174 C1000000 		.word	193
 118 0178 81000000 		.word	129
 119 017c 40000000 		.word	64
 120 0180 00000000 		.word	0
 121 0184 C1000000 		.word	193
 122 0188 81000000 		.word	129
 123 018c 40000000 		.word	64
 124 0190 01000000 		.word	1
 125 0194 C0000000 		.word	192
 126 0198 80000000 		.word	128
 127 019c 41000000 		.word	65
 128 01a0 01000000 		.word	1
 129 01a4 C0000000 		.word	192
 130 01a8 80000000 		.word	128
 131 01ac 41000000 		.word	65
 132 01b0 00000000 		.word	0
 133 01b4 C1000000 		.word	193
 134 01b8 81000000 		.word	129
 135 01bc 40000000 		.word	64
 136 01c0 01000000 		.word	1
 137 01c4 C0000000 		.word	192
 138 01c8 80000000 		.word	128
 139 01cc 41000000 		.word	65
 140 01d0 00000000 		.word	0
 141 01d4 C1000000 		.word	193
 142 01d8 81000000 		.word	129
 143 01dc 40000000 		.word	64
 144 01e0 00000000 		.word	0
 145 01e4 C1000000 		.word	193
 146 01e8 81000000 		.word	129
 147 01ec 40000000 		.word	64
 148 01f0 01000000 		.word	1
 149 01f4 C0000000 		.word	192
 150 01f8 80000000 		.word	128
 151 01fc 41000000 		.word	65
 152 0200 01000000 		.word	1
 153 0204 C0000000 		.word	192
 154 0208 80000000 		.word	128
 155 020c 41000000 		.word	65
 156 0210 00000000 		.word	0
 157 0214 C1000000 		.word	193
 158 0218 81000000 		.word	129
 159 021c 40000000 		.word	64
 160 0220 00000000 		.word	0
 161 0224 C1000000 		.word	193
 162 0228 81000000 		.word	129
 163 022c 40000000 		.word	64
 164 0230 01000000 		.word	1
 165 0234 C0000000 		.word	192
 166 0238 80000000 		.word	128
 167 023c 41000000 		.word	65
 168 0240 00000000 		.word	0
 169 0244 C1000000 		.word	193
 170 0248 81000000 		.word	129
 171 024c 40000000 		.word	64
 172 0250 01000000 		.word	1
 173 0254 C0000000 		.word	192
 174 0258 80000000 		.word	128
 175 025c 41000000 		.word	65
 176 0260 01000000 		.word	1
 177 0264 C0000000 		.word	192
 178 0268 80000000 		.word	128
 179 026c 41000000 		.word	65
 180 0270 00000000 		.word	0
 181 0274 C1000000 		.word	193
 182 0278 81000000 		.word	129
 183 027c 40000000 		.word	64
 184 0280 00000000 		.word	0
 185 0284 C1000000 		.word	193
 186 0288 81000000 		.word	129
 187 028c 40000000 		.word	64
 188 0290 01000000 		.word	1
 189 0294 C0000000 		.word	192
 190 0298 80000000 		.word	128
 191 029c 41000000 		.word	65
 192 02a0 01000000 		.word	1
 193 02a4 C0000000 		.word	192
 194 02a8 80000000 		.word	128
 195 02ac 41000000 		.word	65
 196 02b0 00000000 		.word	0
 197 02b4 C1000000 		.word	193
 198 02b8 81000000 		.word	129
 199 02bc 40000000 		.word	64
 200 02c0 01000000 		.word	1
 201 02c4 C0000000 		.word	192
 202 02c8 80000000 		.word	128
 203 02cc 41000000 		.word	65
 204 02d0 00000000 		.word	0
 205 02d4 C1000000 		.word	193
 206 02d8 81000000 		.word	129
 207 02dc 40000000 		.word	64
 208 02e0 00000000 		.word	0
 209 02e4 C1000000 		.word	193
 210 02e8 81000000 		.word	129
 211 02ec 40000000 		.word	64
 212 02f0 01000000 		.word	1
 213 02f4 C0000000 		.word	192
 214 02f8 80000000 		.word	128
 215 02fc 41000000 		.word	65
 216 0300 00000000 		.word	0
 217 0304 C1000000 		.word	193
 218 0308 81000000 		.word	129
 219 030c 40000000 		.word	64
 220 0310 01000000 		.word	1
 221 0314 C0000000 		.word	192
 222 0318 80000000 		.word	128
 223 031c 41000000 		.word	65
 224 0320 01000000 		.word	1
 225 0324 C0000000 		.word	192
 226 0328 80000000 		.word	128
 227 032c 41000000 		.word	65
 228 0330 00000000 		.word	0
 229 0334 C1000000 		.word	193
 230 0338 81000000 		.word	129
 231 033c 40000000 		.word	64
 232 0340 01000000 		.word	1
 233 0344 C0000000 		.word	192
 234 0348 80000000 		.word	128
 235 034c 41000000 		.word	65
 236 0350 00000000 		.word	0
 237 0354 C1000000 		.word	193
 238 0358 81000000 		.word	129
 239 035c 40000000 		.word	64
 240 0360 00000000 		.word	0
 241 0364 C1000000 		.word	193
 242 0368 81000000 		.word	129
 243 036c 40000000 		.word	64
 244 0370 01000000 		.word	1
 245 0374 C0000000 		.word	192
 246 0378 80000000 		.word	128
 247 037c 41000000 		.word	65
 248 0380 01000000 		.word	1
 249 0384 C0000000 		.word	192
 250 0388 80000000 		.word	128
 251 038c 41000000 		.word	65
 252 0390 00000000 		.word	0
 253 0394 C1000000 		.word	193
 254 0398 81000000 		.word	129
 255 039c 40000000 		.word	64
 256 03a0 00000000 		.word	0
 257 03a4 C1000000 		.word	193
 258 03a8 81000000 		.word	129
 259 03ac 40000000 		.word	64
 260 03b0 01000000 		.word	1
 261 03b4 C0000000 		.word	192
 262 03b8 80000000 		.word	128
 263 03bc 41000000 		.word	65
 264 03c0 00000000 		.word	0
 265 03c4 C1000000 		.word	193
 266 03c8 81000000 		.word	129
 267 03cc 40000000 		.word	64
 268 03d0 01000000 		.word	1
 269 03d4 C0000000 		.word	192
 270 03d8 80000000 		.word	128
 271 03dc 41000000 		.word	65
 272 03e0 01000000 		.word	1
 273 03e4 C0000000 		.word	192
 274 03e8 80000000 		.word	128
 275 03ec 41000000 		.word	65
 276 03f0 00000000 		.word	0
 277 03f4 C1000000 		.word	193
 278 03f8 81000000 		.word	129
 279 03fc 40000000 		.word	64
 280              		.section	.rodata.crcLo,"a",%progbits
 281              		.align	2
 284              	crcLo:
 285 0000 00000000 		.word	0
 286 0004 C0000000 		.word	192
 287 0008 C1000000 		.word	193
 288 000c 01000000 		.word	1
 289 0010 C3000000 		.word	195
 290 0014 03000000 		.word	3
 291 0018 02000000 		.word	2
 292 001c C2000000 		.word	194
 293 0020 C6000000 		.word	198
 294 0024 06000000 		.word	6
 295 0028 07000000 		.word	7
 296 002c C7000000 		.word	199
 297 0030 05000000 		.word	5
 298 0034 C5000000 		.word	197
 299 0038 C4000000 		.word	196
 300 003c 04000000 		.word	4
 301 0040 CC000000 		.word	204
 302 0044 0C000000 		.word	12
 303 0048 0D000000 		.word	13
 304 004c CD000000 		.word	205
 305 0050 0F000000 		.word	15
 306 0054 CF000000 		.word	207
 307 0058 CE000000 		.word	206
 308 005c 0E000000 		.word	14
 309 0060 0A000000 		.word	10
 310 0064 CA000000 		.word	202
 311 0068 CB000000 		.word	203
 312 006c 0B000000 		.word	11
 313 0070 C9000000 		.word	201
 314 0074 09000000 		.word	9
 315 0078 08000000 		.word	8
 316 007c C8000000 		.word	200
 317 0080 D8000000 		.word	216
 318 0084 18000000 		.word	24
 319 0088 19000000 		.word	25
 320 008c D9000000 		.word	217
 321 0090 1B000000 		.word	27
 322 0094 DB000000 		.word	219
 323 0098 DA000000 		.word	218
 324 009c 1A000000 		.word	26
 325 00a0 1E000000 		.word	30
 326 00a4 DE000000 		.word	222
 327 00a8 DF000000 		.word	223
 328 00ac 1F000000 		.word	31
 329 00b0 DD000000 		.word	221
 330 00b4 1D000000 		.word	29
 331 00b8 1C000000 		.word	28
 332 00bc DC000000 		.word	220
 333 00c0 14000000 		.word	20
 334 00c4 D4000000 		.word	212
 335 00c8 D5000000 		.word	213
 336 00cc 15000000 		.word	21
 337 00d0 D7000000 		.word	215
 338 00d4 17000000 		.word	23
 339 00d8 16000000 		.word	22
 340 00dc D6000000 		.word	214
 341 00e0 D2000000 		.word	210
 342 00e4 12000000 		.word	18
 343 00e8 13000000 		.word	19
 344 00ec D3000000 		.word	211
 345 00f0 11000000 		.word	17
 346 00f4 D1000000 		.word	209
 347 00f8 D0000000 		.word	208
 348 00fc 10000000 		.word	16
 349 0100 F0000000 		.word	240
 350 0104 30000000 		.word	48
 351 0108 31000000 		.word	49
 352 010c F1000000 		.word	241
 353 0110 33000000 		.word	51
 354 0114 F3000000 		.word	243
 355 0118 F2000000 		.word	242
 356 011c 32000000 		.word	50
 357 0120 36000000 		.word	54
 358 0124 F6000000 		.word	246
 359 0128 F7000000 		.word	247
 360 012c 37000000 		.word	55
 361 0130 F5000000 		.word	245
 362 0134 35000000 		.word	53
 363 0138 34000000 		.word	52
 364 013c F4000000 		.word	244
 365 0140 3C000000 		.word	60
 366 0144 FC000000 		.word	252
 367 0148 FD000000 		.word	253
 368 014c 3D000000 		.word	61
 369 0150 FF000000 		.word	255
 370 0154 3F000000 		.word	63
 371 0158 3E000000 		.word	62
 372 015c FE000000 		.word	254
 373 0160 FA000000 		.word	250
 374 0164 3A000000 		.word	58
 375 0168 3B000000 		.word	59
 376 016c FB000000 		.word	251
 377 0170 39000000 		.word	57
 378 0174 F9000000 		.word	249
 379 0178 F8000000 		.word	248
 380 017c 38000000 		.word	56
 381 0180 28000000 		.word	40
 382 0184 E8000000 		.word	232
 383 0188 E9000000 		.word	233
 384 018c 29000000 		.word	41
 385 0190 EB000000 		.word	235
 386 0194 2B000000 		.word	43
 387 0198 2A000000 		.word	42
 388 019c EA000000 		.word	234
 389 01a0 EE000000 		.word	238
 390 01a4 2E000000 		.word	46
 391 01a8 2F000000 		.word	47
 392 01ac EF000000 		.word	239
 393 01b0 2D000000 		.word	45
 394 01b4 ED000000 		.word	237
 395 01b8 EC000000 		.word	236
 396 01bc 2C000000 		.word	44
 397 01c0 E4000000 		.word	228
 398 01c4 24000000 		.word	36
 399 01c8 25000000 		.word	37
 400 01cc E5000000 		.word	229
 401 01d0 27000000 		.word	39
 402 01d4 E7000000 		.word	231
 403 01d8 E6000000 		.word	230
 404 01dc 26000000 		.word	38
 405 01e0 22000000 		.word	34
 406 01e4 E2000000 		.word	226
 407 01e8 E3000000 		.word	227
 408 01ec 23000000 		.word	35
 409 01f0 E1000000 		.word	225
 410 01f4 21000000 		.word	33
 411 01f8 20000000 		.word	32
 412 01fc E0000000 		.word	224
 413 0200 A0000000 		.word	160
 414 0204 60000000 		.word	96
 415 0208 61000000 		.word	97
 416 020c A1000000 		.word	161
 417 0210 63000000 		.word	99
 418 0214 A3000000 		.word	163
 419 0218 A2000000 		.word	162
 420 021c 62000000 		.word	98
 421 0220 66000000 		.word	102
 422 0224 A6000000 		.word	166
 423 0228 A7000000 		.word	167
 424 022c 67000000 		.word	103
 425 0230 A5000000 		.word	165
 426 0234 65000000 		.word	101
 427 0238 64000000 		.word	100
 428 023c A4000000 		.word	164
 429 0240 6C000000 		.word	108
 430 0244 AC000000 		.word	172
 431 0248 AD000000 		.word	173
 432 024c 6D000000 		.word	109
 433 0250 AF000000 		.word	175
 434 0254 6F000000 		.word	111
 435 0258 6E000000 		.word	110
 436 025c AE000000 		.word	174
 437 0260 AA000000 		.word	170
 438 0264 6A000000 		.word	106
 439 0268 6B000000 		.word	107
 440 026c AB000000 		.word	171
 441 0270 69000000 		.word	105
 442 0274 A9000000 		.word	169
 443 0278 A8000000 		.word	168
 444 027c 68000000 		.word	104
 445 0280 78000000 		.word	120
 446 0284 B8000000 		.word	184
 447 0288 B9000000 		.word	185
 448 028c 79000000 		.word	121
 449 0290 BB000000 		.word	187
 450 0294 7B000000 		.word	123
 451 0298 7A000000 		.word	122
 452 029c BA000000 		.word	186
 453 02a0 BE000000 		.word	190
 454 02a4 7E000000 		.word	126
 455 02a8 7F000000 		.word	127
 456 02ac BF000000 		.word	191
 457 02b0 7D000000 		.word	125
 458 02b4 BD000000 		.word	189
 459 02b8 BC000000 		.word	188
 460 02bc 7C000000 		.word	124
 461 02c0 B4000000 		.word	180
 462 02c4 74000000 		.word	116
 463 02c8 75000000 		.word	117
 464 02cc B5000000 		.word	181
 465 02d0 77000000 		.word	119
 466 02d4 B7000000 		.word	183
 467 02d8 B6000000 		.word	182
 468 02dc 76000000 		.word	118
 469 02e0 72000000 		.word	114
 470 02e4 B2000000 		.word	178
 471 02e8 B3000000 		.word	179
 472 02ec 73000000 		.word	115
 473 02f0 B1000000 		.word	177
 474 02f4 71000000 		.word	113
 475 02f8 70000000 		.word	112
 476 02fc B0000000 		.word	176
 477 0300 50000000 		.word	80
 478 0304 90000000 		.word	144
 479 0308 91000000 		.word	145
 480 030c 51000000 		.word	81
 481 0310 93000000 		.word	147
 482 0314 53000000 		.word	83
 483 0318 52000000 		.word	82
 484 031c 92000000 		.word	146
 485 0320 96000000 		.word	150
 486 0324 56000000 		.word	86
 487 0328 57000000 		.word	87
 488 032c 97000000 		.word	151
 489 0330 55000000 		.word	85
 490 0334 95000000 		.word	149
 491 0338 94000000 		.word	148
 492 033c 54000000 		.word	84
 493 0340 9C000000 		.word	156
 494 0344 5C000000 		.word	92
 495 0348 5D000000 		.word	93
 496 034c 9D000000 		.word	157
 497 0350 5F000000 		.word	95
 498 0354 9F000000 		.word	159
 499 0358 9E000000 		.word	158
 500 035c 5E000000 		.word	94
 501 0360 5A000000 		.word	90
 502 0364 9A000000 		.word	154
 503 0368 9B000000 		.word	155
 504 036c 5B000000 		.word	91
 505 0370 99000000 		.word	153
 506 0374 59000000 		.word	89
 507 0378 58000000 		.word	88
 508 037c 98000000 		.word	152
 509 0380 88000000 		.word	136
 510 0384 48000000 		.word	72
 511 0388 49000000 		.word	73
 512 038c 89000000 		.word	137
 513 0390 4B000000 		.word	75
 514 0394 8B000000 		.word	139
 515 0398 8A000000 		.word	138
 516 039c 4A000000 		.word	74
 517 03a0 4E000000 		.word	78
 518 03a4 8E000000 		.word	142
 519 03a8 8F000000 		.word	143
 520 03ac 4F000000 		.word	79
 521 03b0 8D000000 		.word	141
 522 03b4 4D000000 		.word	77
 523 03b8 4C000000 		.word	76
 524 03bc 8C000000 		.word	140
 525 03c0 44000000 		.word	68
 526 03c4 84000000 		.word	132
 527 03c8 85000000 		.word	133
 528 03cc 45000000 		.word	69
 529 03d0 87000000 		.word	135
 530 03d4 47000000 		.word	71
 531 03d8 46000000 		.word	70
 532 03dc 86000000 		.word	134
 533 03e0 82000000 		.word	130
 534 03e4 42000000 		.word	66
 535 03e8 43000000 		.word	67
 536 03ec 83000000 		.word	131
 537 03f0 41000000 		.word	65
 538 03f4 81000000 		.word	129
 539 03f8 80000000 		.word	128
 540 03fc 40000000 		.word	64
 541              		.global	firstRequest
 542              		.section	.bss.firstRequest,"aw",%nobits
 543              		.align	2
 546              	firstRequest:
 547 0000 00000000 		.space	4
 548              		.global	totalRequest
 549              		.section	.bss.totalRequest,"aw",%nobits
 550              		.align	2
 553              	totalRequest:
 554 0000 00000000 		.space	4
 555              		.global	writeRequest
 556              		.section	.bss.writeRequest,"aw",%nobits
 557              		.align	2
 560              	writeRequest:
 561 0000 00000000 		.space	4
 562              		.global	arrayResponsePacket
 563              		.section	.bss.arrayResponsePacket,"aw",%nobits
 564              		.align	2
 567              	arrayResponsePacket:
 568 0000 00000000 		.space	200
 568      00000000 
 568      00000000 
 568      00000000 
 568      00000000 
 569              		.global	rPacket
 570              		.section	.data.rPacket,"aw",%progbits
 571              		.align	2
 574              	rPacket:
 575 0000 00000000 		.word	arrayResponsePacket
 576              		.global	users
 577              		.section	.bss.users,"aw",%nobits
 578              		.align	2
 581              	users:
 582 0000 00000000 		.space	4
 583              		.comm	s,4,4
 584              		.section	.text.addData,"ax",%progbits
 585              		.align	2
 586              		.global	addData
 587              		.thumb
 588              		.thumb_func
 590              	addData:
 591              	.LFB0:
 592              		.file 1 "src/modbus.c"
   1:src/modbus.c  **** /*
   2:src/modbus.c  ****  * modbus.h
   3:src/modbus.c  ****  *
   4:src/modbus.c  ****  *  Created on: 29-Nov-2012
   5:src/modbus.c  ****  *  Author: chetanpatil
   6:src/modbus.c  ****  */
   7:src/modbus.c  **** 
   8:src/modbus.c  **** #include "modbus.h"
   9:src/modbus.c  **** 
  10:src/modbus.c  **** uint32_t firstRequest = 0;
  11:src/modbus.c  **** uint32_t totalRequest = 0;
  12:src/modbus.c  **** uint32_t writeRequest = 0;
  13:src/modbus.c  **** 
  14:src/modbus.c  **** // Creating packet to send the data back to Master as requested
  15:src/modbus.c  **** uint32_t arrayResponsePacket[50] = { 0 };
  16:src/modbus.c  **** uint32_t *rPacket = arrayResponsePacket;
  17:src/modbus.c  **** 
  18:src/modbus.c  **** // HASHMAP : Using uthash.h
  19:src/modbus.c  **** struct heapStruct *users = NULL;
  20:src/modbus.c  **** struct heapStruct *s;
  21:src/modbus.c  **** 
  22:src/modbus.c  **** //Add the data in HASH MAP
  23:src/modbus.c  **** void addData(uint32_t keyID, uint32_t *keyValue) {
 593              		.loc 1 23 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 80
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 90B5     		push	{r4, r7, lr}
 598              	.LCFI0:
 599              		.cfi_def_cfa_offset 12
 600              		.cfi_offset 4, -12
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 95B0     		sub	sp, sp, #84
 604              	.LCFI1:
 605              		.cfi_def_cfa_offset 96
 606 0004 00AF     		add	r7, sp, #0
 607              	.LCFI2:
 608              		.cfi_def_cfa_register 7
 609 0006 7860     		str	r0, [r7, #4]
 610 0008 3960     		str	r1, [r7]
 611              	.LBB2:
  24:src/modbus.c  **** 	struct heapStruct *s;
  25:src/modbus.c  **** 
  26:src/modbus.c  **** 	HASH_FIND_INT(users, &keyID, s);
 612              		.loc 1 26 0
 613 000a 0023     		movs	r3, #0
 614 000c FB64     		str	r3, [r7, #76]
 615 000e 40F20003 		movw	r3, #:lower16:users
 616 0012 C0F20003 		movt	r3, #:upper16:users
 617 0016 1B68     		ldr	r3, [r3]
 618 0018 002B     		cmp	r3, #0
 619 001a 00F00D82 		beq	.L2
 620              	.LBB3:
 621              		.loc 1 26 0 is_stmt 0 discriminator 1
 622 001e 3B1D     		adds	r3, r7, #4
 623 0020 BB63     		str	r3, [r7, #56]
 624 0022 4BF6EF63 		movw	r3, #48879
 625 0026 CFF6ED63 		movt	r3, 65261
 626 002a BB64     		str	r3, [r7, #72]
 627 002c 47F6B913 		movw	r3, #31161
 628 0030 C9F63763 		movt	r3, 40503
 629 0034 3B64     		str	r3, [r7, #64]
 630 0036 3B6C     		ldr	r3, [r7, #64]
 631 0038 7B64     		str	r3, [r7, #68]
 632 003a 0423     		movs	r3, #4
 633 003c FB63     		str	r3, [r7, #60]
 634 003e BBE0     		b	.L3
 635              	.L4:
 636              		.loc 1 26 0 discriminator 2
 637 0040 BB6B     		ldr	r3, [r7, #56]
 638 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 639 0044 1A46     		mov	r2, r3
 640 0046 BB6B     		ldr	r3, [r7, #56]
 641 0048 0133     		adds	r3, r3, #1
 642 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 643 004c 1B02     		lsls	r3, r3, #8
 644 004e 1A44     		add	r2, r2, r3
 645 0050 BB6B     		ldr	r3, [r7, #56]
 646 0052 0233     		adds	r3, r3, #2
 647 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 648 0056 1B04     		lsls	r3, r3, #16
 649 0058 1A44     		add	r2, r2, r3
 650 005a BB6B     		ldr	r3, [r7, #56]
 651 005c 0333     		adds	r3, r3, #3
 652 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 653 0060 1B06     		lsls	r3, r3, #24
 654 0062 1344     		add	r3, r3, r2
 655 0064 7A6C     		ldr	r2, [r7, #68]
 656 0066 1344     		add	r3, r3, r2
 657 0068 7B64     		str	r3, [r7, #68]
 658 006a BB6B     		ldr	r3, [r7, #56]
 659 006c 0433     		adds	r3, r3, #4
 660 006e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 661 0070 1A46     		mov	r2, r3
 662 0072 BB6B     		ldr	r3, [r7, #56]
 663 0074 0533     		adds	r3, r3, #5
 664 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 665 0078 1B02     		lsls	r3, r3, #8
 666 007a 1A44     		add	r2, r2, r3
 667 007c BB6B     		ldr	r3, [r7, #56]
 668 007e 0633     		adds	r3, r3, #6
 669 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 670 0082 1B04     		lsls	r3, r3, #16
 671 0084 1A44     		add	r2, r2, r3
 672 0086 BB6B     		ldr	r3, [r7, #56]
 673 0088 0733     		adds	r3, r3, #7
 674 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 675 008c 1B06     		lsls	r3, r3, #24
 676 008e 1344     		add	r3, r3, r2
 677 0090 3A6C     		ldr	r2, [r7, #64]
 678 0092 1344     		add	r3, r3, r2
 679 0094 3B64     		str	r3, [r7, #64]
 680 0096 BB6B     		ldr	r3, [r7, #56]
 681 0098 0833     		adds	r3, r3, #8
 682 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 683 009c 1A46     		mov	r2, r3
 684 009e BB6B     		ldr	r3, [r7, #56]
 685 00a0 0933     		adds	r3, r3, #9
 686 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 687 00a4 1B02     		lsls	r3, r3, #8
 688 00a6 1A44     		add	r2, r2, r3
 689 00a8 BB6B     		ldr	r3, [r7, #56]
 690 00aa 0A33     		adds	r3, r3, #10
 691 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 692 00ae 1B04     		lsls	r3, r3, #16
 693 00b0 1A44     		add	r2, r2, r3
 694 00b2 BB6B     		ldr	r3, [r7, #56]
 695 00b4 0B33     		adds	r3, r3, #11
 696 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 697 00b8 1B06     		lsls	r3, r3, #24
 698 00ba 1344     		add	r3, r3, r2
 699 00bc BA6C     		ldr	r2, [r7, #72]
 700 00be 1344     		add	r3, r3, r2
 701 00c0 BB64     		str	r3, [r7, #72]
 702 00c2 7A6C     		ldr	r2, [r7, #68]
 703 00c4 3B6C     		ldr	r3, [r7, #64]
 704 00c6 D31A     		subs	r3, r2, r3
 705 00c8 7B64     		str	r3, [r7, #68]
 706 00ca 7A6C     		ldr	r2, [r7, #68]
 707 00cc BB6C     		ldr	r3, [r7, #72]
 708 00ce D31A     		subs	r3, r2, r3
 709 00d0 7B64     		str	r3, [r7, #68]
 710 00d2 BB6C     		ldr	r3, [r7, #72]
 711 00d4 5B0B     		lsrs	r3, r3, #13
 712 00d6 7A6C     		ldr	r2, [r7, #68]
 713 00d8 5340     		eors	r3, r3, r2
 714 00da 7B64     		str	r3, [r7, #68]
 715 00dc 3A6C     		ldr	r2, [r7, #64]
 716 00de BB6C     		ldr	r3, [r7, #72]
 717 00e0 D31A     		subs	r3, r2, r3
 718 00e2 3B64     		str	r3, [r7, #64]
 719 00e4 3A6C     		ldr	r2, [r7, #64]
 720 00e6 7B6C     		ldr	r3, [r7, #68]
 721 00e8 D31A     		subs	r3, r2, r3
 722 00ea 3B64     		str	r3, [r7, #64]
 723 00ec 7B6C     		ldr	r3, [r7, #68]
 724 00ee 1B02     		lsls	r3, r3, #8
 725 00f0 3A6C     		ldr	r2, [r7, #64]
 726 00f2 5340     		eors	r3, r3, r2
 727 00f4 3B64     		str	r3, [r7, #64]
 728 00f6 BA6C     		ldr	r2, [r7, #72]
 729 00f8 7B6C     		ldr	r3, [r7, #68]
 730 00fa D31A     		subs	r3, r2, r3
 731 00fc BB64     		str	r3, [r7, #72]
 732 00fe BA6C     		ldr	r2, [r7, #72]
 733 0100 3B6C     		ldr	r3, [r7, #64]
 734 0102 D31A     		subs	r3, r2, r3
 735 0104 BB64     		str	r3, [r7, #72]
 736 0106 3B6C     		ldr	r3, [r7, #64]
 737 0108 5B0B     		lsrs	r3, r3, #13
 738 010a BA6C     		ldr	r2, [r7, #72]
 739 010c 5340     		eors	r3, r3, r2
 740 010e BB64     		str	r3, [r7, #72]
 741 0110 7A6C     		ldr	r2, [r7, #68]
 742 0112 3B6C     		ldr	r3, [r7, #64]
 743 0114 D31A     		subs	r3, r2, r3
 744 0116 7B64     		str	r3, [r7, #68]
 745 0118 7A6C     		ldr	r2, [r7, #68]
 746 011a BB6C     		ldr	r3, [r7, #72]
 747 011c D31A     		subs	r3, r2, r3
 748 011e 7B64     		str	r3, [r7, #68]
 749 0120 BB6C     		ldr	r3, [r7, #72]
 750 0122 1B0B     		lsrs	r3, r3, #12
 751 0124 7A6C     		ldr	r2, [r7, #68]
 752 0126 5340     		eors	r3, r3, r2
 753 0128 7B64     		str	r3, [r7, #68]
 754 012a 3A6C     		ldr	r2, [r7, #64]
 755 012c BB6C     		ldr	r3, [r7, #72]
 756 012e D31A     		subs	r3, r2, r3
 757 0130 3B64     		str	r3, [r7, #64]
 758 0132 3A6C     		ldr	r2, [r7, #64]
 759 0134 7B6C     		ldr	r3, [r7, #68]
 760 0136 D31A     		subs	r3, r2, r3
 761 0138 3B64     		str	r3, [r7, #64]
 762 013a 7B6C     		ldr	r3, [r7, #68]
 763 013c 1B04     		lsls	r3, r3, #16
 764 013e 3A6C     		ldr	r2, [r7, #64]
 765 0140 5340     		eors	r3, r3, r2
 766 0142 3B64     		str	r3, [r7, #64]
 767 0144 BA6C     		ldr	r2, [r7, #72]
 768 0146 7B6C     		ldr	r3, [r7, #68]
 769 0148 D31A     		subs	r3, r2, r3
 770 014a BB64     		str	r3, [r7, #72]
 771 014c BA6C     		ldr	r2, [r7, #72]
 772 014e 3B6C     		ldr	r3, [r7, #64]
 773 0150 D31A     		subs	r3, r2, r3
 774 0152 BB64     		str	r3, [r7, #72]
 775 0154 3B6C     		ldr	r3, [r7, #64]
 776 0156 5B09     		lsrs	r3, r3, #5
 777 0158 BA6C     		ldr	r2, [r7, #72]
 778 015a 5340     		eors	r3, r3, r2
 779 015c BB64     		str	r3, [r7, #72]
 780 015e 7A6C     		ldr	r2, [r7, #68]
 781 0160 3B6C     		ldr	r3, [r7, #64]
 782 0162 D31A     		subs	r3, r2, r3
 783 0164 7B64     		str	r3, [r7, #68]
 784 0166 7A6C     		ldr	r2, [r7, #68]
 785 0168 BB6C     		ldr	r3, [r7, #72]
 786 016a D31A     		subs	r3, r2, r3
 787 016c 7B64     		str	r3, [r7, #68]
 788 016e BB6C     		ldr	r3, [r7, #72]
 789 0170 DB08     		lsrs	r3, r3, #3
 790 0172 7A6C     		ldr	r2, [r7, #68]
 791 0174 5340     		eors	r3, r3, r2
 792 0176 7B64     		str	r3, [r7, #68]
 793 0178 3A6C     		ldr	r2, [r7, #64]
 794 017a BB6C     		ldr	r3, [r7, #72]
 795 017c D31A     		subs	r3, r2, r3
 796 017e 3B64     		str	r3, [r7, #64]
 797 0180 3A6C     		ldr	r2, [r7, #64]
 798 0182 7B6C     		ldr	r3, [r7, #68]
 799 0184 D31A     		subs	r3, r2, r3
 800 0186 3B64     		str	r3, [r7, #64]
 801 0188 7B6C     		ldr	r3, [r7, #68]
 802 018a 9B02     		lsls	r3, r3, #10
 803 018c 3A6C     		ldr	r2, [r7, #64]
 804 018e 5340     		eors	r3, r3, r2
 805 0190 3B64     		str	r3, [r7, #64]
 806 0192 BA6C     		ldr	r2, [r7, #72]
 807 0194 7B6C     		ldr	r3, [r7, #68]
 808 0196 D31A     		subs	r3, r2, r3
 809 0198 BB64     		str	r3, [r7, #72]
 810 019a BA6C     		ldr	r2, [r7, #72]
 811 019c 3B6C     		ldr	r3, [r7, #64]
 812 019e D31A     		subs	r3, r2, r3
 813 01a0 BB64     		str	r3, [r7, #72]
 814 01a2 3B6C     		ldr	r3, [r7, #64]
 815 01a4 DB0B     		lsrs	r3, r3, #15
 816 01a6 BA6C     		ldr	r2, [r7, #72]
 817 01a8 5340     		eors	r3, r3, r2
 818 01aa BB64     		str	r3, [r7, #72]
 819 01ac BB6B     		ldr	r3, [r7, #56]
 820 01ae 0C33     		adds	r3, r3, #12
 821 01b0 BB63     		str	r3, [r7, #56]
 822 01b2 FB6B     		ldr	r3, [r7, #60]
 823 01b4 0C3B     		subs	r3, r3, #12
 824 01b6 FB63     		str	r3, [r7, #60]
 825              	.L3:
 826              		.loc 1 26 0 discriminator 1
 827 01b8 FB6B     		ldr	r3, [r7, #60]
 828 01ba 0B2B     		cmp	r3, #11
 829 01bc 3FF640AF 		bhi	.L4
 830              		.loc 1 26 0 discriminator 3
 831 01c0 BB6C     		ldr	r3, [r7, #72]
 832 01c2 0433     		adds	r3, r3, #4
 833 01c4 BB64     		str	r3, [r7, #72]
 834 01c6 FB6B     		ldr	r3, [r7, #60]
 835 01c8 013B     		subs	r3, r3, #1
 836 01ca 0A2B     		cmp	r3, #10
 837 01cc 62D8     		bhi	.L5
 838 01ce 01A2     		adr	r2, .L7
 839 01d0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 840              		.p2align 2
 841              	.L7:
 842 01d4 8B020000 		.word	.L6+1
 843 01d8 7D020000 		.word	.L8+1
 844 01dc 6F020000 		.word	.L9+1
 845 01e0 61020000 		.word	.L10+1
 846 01e4 55020000 		.word	.L11+1
 847 01e8 47020000 		.word	.L12+1
 848 01ec 39020000 		.word	.L13+1
 849 01f0 2B020000 		.word	.L14+1
 850 01f4 1D020000 		.word	.L15+1
 851 01f8 0F020000 		.word	.L16+1
 852 01fc 01020000 		.word	.L17+1
 853              	.L17:
 854              		.loc 1 26 0 discriminator 12
 855 0200 BB6B     		ldr	r3, [r7, #56]
 856 0202 0A33     		adds	r3, r3, #10
 857 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 858 0206 1B06     		lsls	r3, r3, #24
 859 0208 BA6C     		ldr	r2, [r7, #72]
 860 020a 1344     		add	r3, r3, r2
 861 020c BB64     		str	r3, [r7, #72]
 862              	.L16:
 863              		.loc 1 26 0 discriminator 11
 864 020e BB6B     		ldr	r3, [r7, #56]
 865 0210 0933     		adds	r3, r3, #9
 866 0212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 867 0214 1B04     		lsls	r3, r3, #16
 868 0216 BA6C     		ldr	r2, [r7, #72]
 869 0218 1344     		add	r3, r3, r2
 870 021a BB64     		str	r3, [r7, #72]
 871              	.L15:
 872              		.loc 1 26 0 discriminator 10
 873 021c BB6B     		ldr	r3, [r7, #56]
 874 021e 0833     		adds	r3, r3, #8
 875 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 876 0222 1B02     		lsls	r3, r3, #8
 877 0224 BA6C     		ldr	r2, [r7, #72]
 878 0226 1344     		add	r3, r3, r2
 879 0228 BB64     		str	r3, [r7, #72]
 880              	.L14:
 881              		.loc 1 26 0 discriminator 9
 882 022a BB6B     		ldr	r3, [r7, #56]
 883 022c 0733     		adds	r3, r3, #7
 884 022e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 885 0230 1B06     		lsls	r3, r3, #24
 886 0232 3A6C     		ldr	r2, [r7, #64]
 887 0234 1344     		add	r3, r3, r2
 888 0236 3B64     		str	r3, [r7, #64]
 889              	.L13:
 890              		.loc 1 26 0 discriminator 8
 891 0238 BB6B     		ldr	r3, [r7, #56]
 892 023a 0633     		adds	r3, r3, #6
 893 023c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 894 023e 1B04     		lsls	r3, r3, #16
 895 0240 3A6C     		ldr	r2, [r7, #64]
 896 0242 1344     		add	r3, r3, r2
 897 0244 3B64     		str	r3, [r7, #64]
 898              	.L12:
 899              		.loc 1 26 0 discriminator 7
 900 0246 BB6B     		ldr	r3, [r7, #56]
 901 0248 0533     		adds	r3, r3, #5
 902 024a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 903 024c 1B02     		lsls	r3, r3, #8
 904 024e 3A6C     		ldr	r2, [r7, #64]
 905 0250 1344     		add	r3, r3, r2
 906 0252 3B64     		str	r3, [r7, #64]
 907              	.L11:
 908              		.loc 1 26 0 discriminator 6
 909 0254 BB6B     		ldr	r3, [r7, #56]
 910 0256 0433     		adds	r3, r3, #4
 911 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 025a 3A6C     		ldr	r2, [r7, #64]
 913 025c 1344     		add	r3, r3, r2
 914 025e 3B64     		str	r3, [r7, #64]
 915              	.L10:
 916              		.loc 1 26 0 discriminator 5
 917 0260 BB6B     		ldr	r3, [r7, #56]
 918 0262 0333     		adds	r3, r3, #3
 919 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 920 0266 1B06     		lsls	r3, r3, #24
 921 0268 7A6C     		ldr	r2, [r7, #68]
 922 026a 1344     		add	r3, r3, r2
 923 026c 7B64     		str	r3, [r7, #68]
 924              	.L9:
 925              		.loc 1 26 0 discriminator 4
 926 026e BB6B     		ldr	r3, [r7, #56]
 927 0270 0233     		adds	r3, r3, #2
 928 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 929 0274 1B04     		lsls	r3, r3, #16
 930 0276 7A6C     		ldr	r2, [r7, #68]
 931 0278 1344     		add	r3, r3, r2
 932 027a 7B64     		str	r3, [r7, #68]
 933              	.L8:
 934              		.loc 1 26 0 discriminator 3
 935 027c BB6B     		ldr	r3, [r7, #56]
 936 027e 0133     		adds	r3, r3, #1
 937 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 938 0282 1B02     		lsls	r3, r3, #8
 939 0284 7A6C     		ldr	r2, [r7, #68]
 940 0286 1344     		add	r3, r3, r2
 941 0288 7B64     		str	r3, [r7, #68]
 942              	.L6:
 943              		.loc 1 26 0 discriminator 2
 944 028a BB6B     		ldr	r3, [r7, #56]
 945 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 946 028e 7A6C     		ldr	r2, [r7, #68]
 947 0290 1344     		add	r3, r3, r2
 948 0292 7B64     		str	r3, [r7, #68]
 949              	.L5:
 950              		.loc 1 26 0 discriminator 1
 951 0294 7A6C     		ldr	r2, [r7, #68]
 952 0296 3B6C     		ldr	r3, [r7, #64]
 953 0298 D31A     		subs	r3, r2, r3
 954 029a 7B64     		str	r3, [r7, #68]
 955 029c 7A6C     		ldr	r2, [r7, #68]
 956 029e BB6C     		ldr	r3, [r7, #72]
 957 02a0 D31A     		subs	r3, r2, r3
 958 02a2 7B64     		str	r3, [r7, #68]
 959 02a4 BB6C     		ldr	r3, [r7, #72]
 960 02a6 5B0B     		lsrs	r3, r3, #13
 961 02a8 7A6C     		ldr	r2, [r7, #68]
 962 02aa 5340     		eors	r3, r3, r2
 963 02ac 7B64     		str	r3, [r7, #68]
 964 02ae 3A6C     		ldr	r2, [r7, #64]
 965 02b0 BB6C     		ldr	r3, [r7, #72]
 966 02b2 D31A     		subs	r3, r2, r3
 967 02b4 3B64     		str	r3, [r7, #64]
 968 02b6 3A6C     		ldr	r2, [r7, #64]
 969 02b8 7B6C     		ldr	r3, [r7, #68]
 970 02ba D31A     		subs	r3, r2, r3
 971 02bc 3B64     		str	r3, [r7, #64]
 972 02be 7B6C     		ldr	r3, [r7, #68]
 973 02c0 1B02     		lsls	r3, r3, #8
 974 02c2 3A6C     		ldr	r2, [r7, #64]
 975 02c4 5340     		eors	r3, r3, r2
 976 02c6 3B64     		str	r3, [r7, #64]
 977 02c8 BA6C     		ldr	r2, [r7, #72]
 978 02ca 7B6C     		ldr	r3, [r7, #68]
 979 02cc D31A     		subs	r3, r2, r3
 980 02ce BB64     		str	r3, [r7, #72]
 981 02d0 BA6C     		ldr	r2, [r7, #72]
 982 02d2 3B6C     		ldr	r3, [r7, #64]
 983 02d4 D31A     		subs	r3, r2, r3
 984 02d6 BB64     		str	r3, [r7, #72]
 985 02d8 3B6C     		ldr	r3, [r7, #64]
 986 02da 5B0B     		lsrs	r3, r3, #13
 987 02dc BA6C     		ldr	r2, [r7, #72]
 988 02de 5340     		eors	r3, r3, r2
 989 02e0 BB64     		str	r3, [r7, #72]
 990 02e2 7A6C     		ldr	r2, [r7, #68]
 991 02e4 3B6C     		ldr	r3, [r7, #64]
 992 02e6 D31A     		subs	r3, r2, r3
 993 02e8 7B64     		str	r3, [r7, #68]
 994 02ea 7A6C     		ldr	r2, [r7, #68]
 995 02ec BB6C     		ldr	r3, [r7, #72]
 996 02ee D31A     		subs	r3, r2, r3
 997 02f0 7B64     		str	r3, [r7, #68]
 998 02f2 BB6C     		ldr	r3, [r7, #72]
 999 02f4 1B0B     		lsrs	r3, r3, #12
 1000 02f6 7A6C     		ldr	r2, [r7, #68]
 1001 02f8 5340     		eors	r3, r3, r2
 1002 02fa 7B64     		str	r3, [r7, #68]
 1003 02fc 3A6C     		ldr	r2, [r7, #64]
 1004 02fe BB6C     		ldr	r3, [r7, #72]
 1005 0300 D31A     		subs	r3, r2, r3
 1006 0302 3B64     		str	r3, [r7, #64]
 1007 0304 3A6C     		ldr	r2, [r7, #64]
 1008 0306 7B6C     		ldr	r3, [r7, #68]
 1009 0308 D31A     		subs	r3, r2, r3
 1010 030a 3B64     		str	r3, [r7, #64]
 1011 030c 7B6C     		ldr	r3, [r7, #68]
 1012 030e 1B04     		lsls	r3, r3, #16
 1013 0310 3A6C     		ldr	r2, [r7, #64]
 1014 0312 5340     		eors	r3, r3, r2
 1015 0314 3B64     		str	r3, [r7, #64]
 1016 0316 BA6C     		ldr	r2, [r7, #72]
 1017 0318 7B6C     		ldr	r3, [r7, #68]
 1018 031a D31A     		subs	r3, r2, r3
 1019 031c BB64     		str	r3, [r7, #72]
 1020 031e BA6C     		ldr	r2, [r7, #72]
 1021 0320 3B6C     		ldr	r3, [r7, #64]
 1022 0322 D31A     		subs	r3, r2, r3
 1023 0324 BB64     		str	r3, [r7, #72]
 1024 0326 3B6C     		ldr	r3, [r7, #64]
 1025 0328 5B09     		lsrs	r3, r3, #5
 1026 032a BA6C     		ldr	r2, [r7, #72]
 1027 032c 5340     		eors	r3, r3, r2
 1028 032e BB64     		str	r3, [r7, #72]
 1029 0330 7A6C     		ldr	r2, [r7, #68]
 1030 0332 3B6C     		ldr	r3, [r7, #64]
 1031 0334 D31A     		subs	r3, r2, r3
 1032 0336 7B64     		str	r3, [r7, #68]
 1033 0338 7A6C     		ldr	r2, [r7, #68]
 1034 033a BB6C     		ldr	r3, [r7, #72]
 1035 033c D31A     		subs	r3, r2, r3
 1036 033e 7B64     		str	r3, [r7, #68]
 1037 0340 BB6C     		ldr	r3, [r7, #72]
 1038 0342 DB08     		lsrs	r3, r3, #3
 1039 0344 7A6C     		ldr	r2, [r7, #68]
 1040 0346 5340     		eors	r3, r3, r2
 1041 0348 7B64     		str	r3, [r7, #68]
 1042 034a 3A6C     		ldr	r2, [r7, #64]
 1043 034c BB6C     		ldr	r3, [r7, #72]
 1044 034e D31A     		subs	r3, r2, r3
 1045 0350 3B64     		str	r3, [r7, #64]
 1046 0352 3A6C     		ldr	r2, [r7, #64]
 1047 0354 7B6C     		ldr	r3, [r7, #68]
 1048 0356 D31A     		subs	r3, r2, r3
 1049 0358 3B64     		str	r3, [r7, #64]
 1050 035a 7B6C     		ldr	r3, [r7, #68]
 1051 035c 9B02     		lsls	r3, r3, #10
 1052 035e 3A6C     		ldr	r2, [r7, #64]
 1053 0360 5340     		eors	r3, r3, r2
 1054 0362 3B64     		str	r3, [r7, #64]
 1055 0364 BA6C     		ldr	r2, [r7, #72]
 1056 0366 7B6C     		ldr	r3, [r7, #68]
 1057 0368 D31A     		subs	r3, r2, r3
 1058 036a BB64     		str	r3, [r7, #72]
 1059 036c BA6C     		ldr	r2, [r7, #72]
 1060 036e 3B6C     		ldr	r3, [r7, #64]
 1061 0370 D31A     		subs	r3, r2, r3
 1062 0372 BB64     		str	r3, [r7, #72]
 1063 0374 3B6C     		ldr	r3, [r7, #64]
 1064 0376 DB0B     		lsrs	r3, r3, #15
 1065 0378 BA6C     		ldr	r2, [r7, #72]
 1066 037a 5340     		eors	r3, r3, r2
 1067 037c BB64     		str	r3, [r7, #72]
 1068 037e 40F20003 		movw	r3, #:lower16:users
 1069 0382 C0F20003 		movt	r3, #:upper16:users
 1070 0386 1B68     		ldr	r3, [r3]
 1071 0388 9B68     		ldr	r3, [r3, #8]
 1072 038a 5B68     		ldr	r3, [r3, #4]
 1073 038c 5A1E     		subs	r2, r3, #1
 1074 038e BB6C     		ldr	r3, [r7, #72]
 1075 0390 1340     		ands	r3, r3, r2
 1076 0392 FB61     		str	r3, [r7, #28]
 1077              	.LBE3:
 1078 0394 40F20003 		movw	r3, #:lower16:users
 1079 0398 C0F20003 		movt	r3, #:upper16:users
 1080 039c 1B68     		ldr	r3, [r3]
 1081 039e 9B68     		ldr	r3, [r3, #8]
 1082 03a0 1968     		ldr	r1, [r3]
 1083 03a2 FA69     		ldr	r2, [r7, #28]
 1084 03a4 1346     		mov	r3, r2
 1085 03a6 5B00     		lsls	r3, r3, #1
 1086 03a8 1344     		add	r3, r3, r2
 1087 03aa 9B00     		lsls	r3, r3, #2
 1088 03ac 0B44     		add	r3, r3, r1
 1089 03ae 1B68     		ldr	r3, [r3]
 1090 03b0 002B     		cmp	r3, #0
 1091 03b2 18D0     		beq	.L18
 1092 03b4 40F20003 		movw	r3, #:lower16:users
 1093 03b8 C0F20003 		movt	r3, #:upper16:users
 1094 03bc 1B68     		ldr	r3, [r3]
 1095 03be 9B68     		ldr	r3, [r3, #8]
 1096 03c0 1968     		ldr	r1, [r3]
 1097 03c2 FA69     		ldr	r2, [r7, #28]
 1098 03c4 1346     		mov	r3, r2
 1099 03c6 5B00     		lsls	r3, r3, #1
 1100 03c8 1344     		add	r3, r3, r2
 1101 03ca 9B00     		lsls	r3, r3, #2
 1102 03cc 0B44     		add	r3, r3, r1
 1103 03ce 1A68     		ldr	r2, [r3]
 1104 03d0 40F20003 		movw	r3, #:lower16:users
 1105 03d4 C0F20003 		movt	r3, #:upper16:users
 1106 03d8 1B68     		ldr	r3, [r3]
 1107 03da 9B68     		ldr	r3, [r3, #8]
 1108 03dc 5B69     		ldr	r3, [r3, #20]
 1109 03de 5B42     		negs	r3, r3
 1110 03e0 1344     		add	r3, r3, r2
 1111 03e2 FB64     		str	r3, [r7, #76]
 1112 03e4 25E0     		b	.L20
 1113              	.L18:
 1114              		.loc 1 26 0 discriminator 2
 1115 03e6 0023     		movs	r3, #0
 1116 03e8 FB64     		str	r3, [r7, #76]
 1117 03ea 22E0     		b	.L20
 1118              	.L23:
 1119 03ec FB6C     		ldr	r3, [r7, #76]
 1120 03ee 1B6A     		ldr	r3, [r3, #32]
 1121 03f0 042B     		cmp	r3, #4
 1122 03f2 0BD1     		bne	.L21
 1123              		.loc 1 26 0 discriminator 1
 1124 03f4 FB6C     		ldr	r3, [r7, #76]
 1125 03f6 DA69     		ldr	r2, [r3, #28]
 1126 03f8 3B1D     		adds	r3, r7, #4
 1127 03fa 1046     		mov	r0, r2
 1128 03fc 1946     		mov	r1, r3
 1129 03fe 0422     		movs	r2, #4
 1130 0400 FFF7FEFF 		bl	memcmp
 1131 0404 0346     		mov	r3, r0
 1132 0406 002B     		cmp	r3, #0
 1133 0408 00D1     		bne	.L21
 1134 040a 15E0     		b	.L2
 1135              	.L21:
 1136              		.loc 1 26 0 discriminator 2
 1137 040c FB6C     		ldr	r3, [r7, #76]
 1138 040e 9B69     		ldr	r3, [r3, #24]
 1139 0410 002B     		cmp	r3, #0
 1140 0412 0CD0     		beq	.L22
 1141              		.loc 1 26 0 discriminator 1
 1142 0414 FB6C     		ldr	r3, [r7, #76]
 1143 0416 9A69     		ldr	r2, [r3, #24]
 1144 0418 40F20003 		movw	r3, #:lower16:users
 1145 041c C0F20003 		movt	r3, #:upper16:users
 1146 0420 1B68     		ldr	r3, [r3]
 1147 0422 9B68     		ldr	r3, [r3, #8]
 1148 0424 5B69     		ldr	r3, [r3, #20]
 1149 0426 5B42     		negs	r3, r3
 1150 0428 1344     		add	r3, r3, r2
 1151 042a FB64     		str	r3, [r7, #76]
 1152 042c 01E0     		b	.L20
 1153              	.L22:
 1154              		.loc 1 26 0 discriminator 2
 1155 042e 0023     		movs	r3, #0
 1156 0430 FB64     		str	r3, [r7, #76]
 1157              	.L20:
 1158              		.loc 1 26 0 discriminator 1
 1159 0432 FB6C     		ldr	r3, [r7, #76]
 1160 0434 002B     		cmp	r3, #0
 1161 0436 D9D1     		bne	.L23
 1162              	.L2:
 1163              	.LBE2:
  27:src/modbus.c  **** 	// id already in the hash?
  28:src/modbus.c  **** 	if (s == NULL) {
 1164              		.loc 1 28 0 is_stmt 1
 1165 0438 FB6C     		ldr	r3, [r7, #76]
 1166 043a 002B     		cmp	r3, #0
 1167 043c 40F01B84 		bne	.L24
  29:src/modbus.c  **** 		s = (struct heapStruct*) malloc(sizeof(struct heapStruct));
 1168              		.loc 1 29 0
 1169 0440 2820     		movs	r0, #40
 1170 0442 FFF7FEFF 		bl	malloc
 1171 0446 0346     		mov	r3, r0
 1172 0448 FB64     		str	r3, [r7, #76]
  30:src/modbus.c  **** 		s->key = keyID;
 1173              		.loc 1 30 0
 1174 044a 7B68     		ldr	r3, [r7, #4]
 1175 044c 1A46     		mov	r2, r3
 1176 044e FB6C     		ldr	r3, [r7, #76]
 1177 0450 1A60     		str	r2, [r3]
 1178              	.LBB4:
  31:src/modbus.c  **** 		HASH_ADD_INT( users, key, s);
 1179              		.loc 1 31 0
 1180 0452 FB6C     		ldr	r3, [r7, #76]
 1181 0454 0022     		movs	r2, #0
 1182 0456 1A61     		str	r2, [r3, #16]
 1183 0458 FA6C     		ldr	r2, [r7, #76]
 1184 045a FB6C     		ldr	r3, [r7, #76]
 1185 045c DA61     		str	r2, [r3, #28]
 1186 045e FB6C     		ldr	r3, [r7, #76]
 1187 0460 0422     		movs	r2, #4
 1188 0462 1A62     		str	r2, [r3, #32]
 1189 0464 40F20003 		movw	r3, #:lower16:users
 1190 0468 C0F20003 		movt	r3, #:upper16:users
 1191 046c 1B68     		ldr	r3, [r3]
 1192 046e 002B     		cmp	r3, #0
 1193 0470 40F08580 		bne	.L25
 1194              		.loc 1 31 0 is_stmt 0 discriminator 1
 1195 0474 40F20003 		movw	r3, #:lower16:users
 1196 0478 C0F20003 		movt	r3, #:upper16:users
 1197 047c FA6C     		ldr	r2, [r7, #76]
 1198 047e 1A60     		str	r2, [r3]
 1199 0480 40F20003 		movw	r3, #:lower16:users
 1200 0484 C0F20003 		movt	r3, #:upper16:users
 1201 0488 1B68     		ldr	r3, [r3]
 1202 048a 0022     		movs	r2, #0
 1203 048c DA60     		str	r2, [r3, #12]
 1204 048e 40F20003 		movw	r3, #:lower16:users
 1205 0492 C0F20003 		movt	r3, #:upper16:users
 1206 0496 1C68     		ldr	r4, [r3]
 1207 0498 2C20     		movs	r0, #44
 1208 049a FFF7FEFF 		bl	malloc
 1209 049e 0346     		mov	r3, r0
 1210 04a0 A360     		str	r3, [r4, #8]
 1211 04a2 40F20003 		movw	r3, #:lower16:users
 1212 04a6 C0F20003 		movt	r3, #:upper16:users
 1213 04aa 1B68     		ldr	r3, [r3]
 1214 04ac 9B68     		ldr	r3, [r3, #8]
 1215 04ae 002B     		cmp	r3, #0
 1216 04b0 03D1     		bne	.L26
 1217 04b2 4FF0FF30 		mov	r0, #-1
 1218 04b6 FFF7FEFF 		bl	exit
 1219              	.L26:
 1220              		.loc 1 31 0 discriminator 2
 1221 04ba 40F20003 		movw	r3, #:lower16:users
 1222 04be C0F20003 		movt	r3, #:upper16:users
 1223 04c2 1B68     		ldr	r3, [r3]
 1224 04c4 9B68     		ldr	r3, [r3, #8]
 1225 04c6 1846     		mov	r0, r3
 1226 04c8 0021     		movs	r1, #0
 1227 04ca 2C22     		movs	r2, #44
 1228 04cc FFF7FEFF 		bl	memset
 1229 04d0 40F20003 		movw	r3, #:lower16:users
 1230 04d4 C0F20003 		movt	r3, #:upper16:users
 1231 04d8 1B68     		ldr	r3, [r3]
 1232 04da 9A68     		ldr	r2, [r3, #8]
 1233 04dc 40F20003 		movw	r3, #:lower16:users
 1234 04e0 C0F20003 		movt	r3, #:upper16:users
 1235 04e4 1B68     		ldr	r3, [r3]
 1236 04e6 0833     		adds	r3, r3, #8
 1237 04e8 1361     		str	r3, [r2, #16]
 1238 04ea 40F20003 		movw	r3, #:lower16:users
 1239 04ee C0F20003 		movt	r3, #:upper16:users
 1240 04f2 1B68     		ldr	r3, [r3]
 1241 04f4 9B68     		ldr	r3, [r3, #8]
 1242 04f6 2022     		movs	r2, #32
 1243 04f8 5A60     		str	r2, [r3, #4]
 1244 04fa 40F20003 		movw	r3, #:lower16:users
 1245 04fe C0F20003 		movt	r3, #:upper16:users
 1246 0502 1B68     		ldr	r3, [r3]
 1247 0504 9B68     		ldr	r3, [r3, #8]
 1248 0506 0522     		movs	r2, #5
 1249 0508 9A60     		str	r2, [r3, #8]
 1250 050a 40F20003 		movw	r3, #:lower16:users
 1251 050e C0F20003 		movt	r3, #:upper16:users
 1252 0512 1B68     		ldr	r3, [r3]
 1253 0514 9B68     		ldr	r3, [r3, #8]
 1254 0516 0822     		movs	r2, #8
 1255 0518 5A61     		str	r2, [r3, #20]
 1256 051a 40F20003 		movw	r3, #:lower16:users
 1257 051e C0F20003 		movt	r3, #:upper16:users
 1258 0522 1B68     		ldr	r3, [r3]
 1259 0524 9C68     		ldr	r4, [r3, #8]
 1260 0526 4FF4C070 		mov	r0, #384
 1261 052a FFF7FEFF 		bl	malloc
 1262 052e 0346     		mov	r3, r0
 1263 0530 2360     		str	r3, [r4]
 1264 0532 40F20003 		movw	r3, #:lower16:users
 1265 0536 C0F20003 		movt	r3, #:upper16:users
 1266 053a 1B68     		ldr	r3, [r3]
 1267 053c 9B68     		ldr	r3, [r3, #8]
 1268 053e 1B68     		ldr	r3, [r3]
 1269 0540 002B     		cmp	r3, #0
 1270 0542 03D1     		bne	.L27
 1271              		.loc 1 31 0 discriminator 1
 1272 0544 4FF0FF30 		mov	r0, #-1
 1273 0548 FFF7FEFF 		bl	exit
 1274              	.L27:
 1275              		.loc 1 31 0 discriminator 2
 1276 054c 40F20003 		movw	r3, #:lower16:users
 1277 0550 C0F20003 		movt	r3, #:upper16:users
 1278 0554 1B68     		ldr	r3, [r3]
 1279 0556 9B68     		ldr	r3, [r3, #8]
 1280 0558 1B68     		ldr	r3, [r3]
 1281 055a 1846     		mov	r0, r3
 1282 055c 0021     		movs	r1, #0
 1283 055e 4FF4C072 		mov	r2, #384
 1284 0562 FFF7FEFF 		bl	memset
 1285 0566 40F20003 		movw	r3, #:lower16:users
 1286 056a C0F20003 		movt	r3, #:upper16:users
 1287 056e 1B68     		ldr	r3, [r3]
 1288 0570 9A68     		ldr	r2, [r3, #8]
 1289 0572 41F6E173 		movw	r3, #8161
 1290 0576 CAF21103 		movt	r3, 40977
 1291 057a 9362     		str	r3, [r2, #40]
 1292 057c 23E0     		b	.L28
 1293              	.L25:
 1294 057e 40F20003 		movw	r3, #:lower16:users
 1295 0582 C0F20003 		movt	r3, #:upper16:users
 1296 0586 1B68     		ldr	r3, [r3]
 1297 0588 9B68     		ldr	r3, [r3, #8]
 1298 058a 1B69     		ldr	r3, [r3, #16]
 1299 058c FA6C     		ldr	r2, [r7, #76]
 1300 058e 9A60     		str	r2, [r3, #8]
 1301 0590 40F20003 		movw	r3, #:lower16:users
 1302 0594 C0F20003 		movt	r3, #:upper16:users
 1303 0598 1B68     		ldr	r3, [r3]
 1304 059a 9B68     		ldr	r3, [r3, #8]
 1305 059c 1A69     		ldr	r2, [r3, #16]
 1306 059e 40F20003 		movw	r3, #:lower16:users
 1307 05a2 C0F20003 		movt	r3, #:upper16:users
 1308 05a6 1B68     		ldr	r3, [r3]
 1309 05a8 9B68     		ldr	r3, [r3, #8]
 1310 05aa 5B69     		ldr	r3, [r3, #20]
 1311 05ac 5B42     		negs	r3, r3
 1312 05ae 1A44     		add	r2, r2, r3
 1313 05b0 FB6C     		ldr	r3, [r7, #76]
 1314 05b2 DA60     		str	r2, [r3, #12]
 1315 05b4 40F20003 		movw	r3, #:lower16:users
 1316 05b8 C0F20003 		movt	r3, #:upper16:users
 1317 05bc 1B68     		ldr	r3, [r3]
 1318 05be 9B68     		ldr	r3, [r3, #8]
 1319 05c0 FA6C     		ldr	r2, [r7, #76]
 1320 05c2 0832     		adds	r2, r2, #8
 1321 05c4 1A61     		str	r2, [r3, #16]
 1322              	.L28:
 1323              		.loc 1 31 0 discriminator 1
 1324 05c6 40F20003 		movw	r3, #:lower16:users
 1325 05ca C0F20003 		movt	r3, #:upper16:users
 1326 05ce 1B68     		ldr	r3, [r3]
 1327 05d0 9B68     		ldr	r3, [r3, #8]
 1328 05d2 DA68     		ldr	r2, [r3, #12]
 1329 05d4 0132     		adds	r2, r2, #1
 1330 05d6 DA60     		str	r2, [r3, #12]
 1331 05d8 40F20003 		movw	r3, #:lower16:users
 1332 05dc C0F20003 		movt	r3, #:upper16:users
 1333 05e0 1B68     		ldr	r3, [r3]
 1334 05e2 9A68     		ldr	r2, [r3, #8]
 1335 05e4 FB6C     		ldr	r3, [r7, #76]
 1336 05e6 9A60     		str	r2, [r3, #8]
 1337              	.LBB5:
 1338 05e8 FB6C     		ldr	r3, [r7, #76]
 1339 05ea BB62     		str	r3, [r7, #40]
 1340 05ec FA6C     		ldr	r2, [r7, #76]
 1341 05ee 4BF6EF63 		movw	r3, #48879
 1342 05f2 CFF6ED63 		movt	r3, 65261
 1343 05f6 5362     		str	r3, [r2, #36]
 1344 05f8 47F6B913 		movw	r3, #31161
 1345 05fc C9F63763 		movt	r3, 40503
 1346 0600 3B63     		str	r3, [r7, #48]
 1347 0602 3B6B     		ldr	r3, [r7, #48]
 1348 0604 7B63     		str	r3, [r7, #52]
 1349 0606 0423     		movs	r3, #4
 1350 0608 FB62     		str	r3, [r7, #44]
 1351 060a D8E0     		b	.L29
 1352              	.L30:
 1353              		.loc 1 31 0 discriminator 2
 1354 060c BB6A     		ldr	r3, [r7, #40]
 1355 060e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1356 0610 1A46     		mov	r2, r3
 1357 0612 BB6A     		ldr	r3, [r7, #40]
 1358 0614 0133     		adds	r3, r3, #1
 1359 0616 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1360 0618 1B02     		lsls	r3, r3, #8
 1361 061a 1A44     		add	r2, r2, r3
 1362 061c BB6A     		ldr	r3, [r7, #40]
 1363 061e 0233     		adds	r3, r3, #2
 1364 0620 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1365 0622 1B04     		lsls	r3, r3, #16
 1366 0624 1A44     		add	r2, r2, r3
 1367 0626 BB6A     		ldr	r3, [r7, #40]
 1368 0628 0333     		adds	r3, r3, #3
 1369 062a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1370 062c 1B06     		lsls	r3, r3, #24
 1371 062e 1344     		add	r3, r3, r2
 1372 0630 7A6B     		ldr	r2, [r7, #52]
 1373 0632 1344     		add	r3, r3, r2
 1374 0634 7B63     		str	r3, [r7, #52]
 1375 0636 BB6A     		ldr	r3, [r7, #40]
 1376 0638 0433     		adds	r3, r3, #4
 1377 063a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1378 063c 1A46     		mov	r2, r3
 1379 063e BB6A     		ldr	r3, [r7, #40]
 1380 0640 0533     		adds	r3, r3, #5
 1381 0642 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1382 0644 1B02     		lsls	r3, r3, #8
 1383 0646 1A44     		add	r2, r2, r3
 1384 0648 BB6A     		ldr	r3, [r7, #40]
 1385 064a 0633     		adds	r3, r3, #6
 1386 064c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1387 064e 1B04     		lsls	r3, r3, #16
 1388 0650 1A44     		add	r2, r2, r3
 1389 0652 BB6A     		ldr	r3, [r7, #40]
 1390 0654 0733     		adds	r3, r3, #7
 1391 0656 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1392 0658 1B06     		lsls	r3, r3, #24
 1393 065a 1344     		add	r3, r3, r2
 1394 065c 3A6B     		ldr	r2, [r7, #48]
 1395 065e 1344     		add	r3, r3, r2
 1396 0660 3B63     		str	r3, [r7, #48]
 1397 0662 FB6C     		ldr	r3, [r7, #76]
 1398 0664 5A6A     		ldr	r2, [r3, #36]
 1399 0666 BB6A     		ldr	r3, [r7, #40]
 1400 0668 0833     		adds	r3, r3, #8
 1401 066a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1402 066c 1946     		mov	r1, r3
 1403 066e BB6A     		ldr	r3, [r7, #40]
 1404 0670 0933     		adds	r3, r3, #9
 1405 0672 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1406 0674 1B02     		lsls	r3, r3, #8
 1407 0676 1944     		add	r1, r1, r3
 1408 0678 BB6A     		ldr	r3, [r7, #40]
 1409 067a 0A33     		adds	r3, r3, #10
 1410 067c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1411 067e 1B04     		lsls	r3, r3, #16
 1412 0680 1944     		add	r1, r1, r3
 1413 0682 BB6A     		ldr	r3, [r7, #40]
 1414 0684 0B33     		adds	r3, r3, #11
 1415 0686 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1416 0688 1B06     		lsls	r3, r3, #24
 1417 068a 0B44     		add	r3, r3, r1
 1418 068c 1A44     		add	r2, r2, r3
 1419 068e FB6C     		ldr	r3, [r7, #76]
 1420 0690 5A62     		str	r2, [r3, #36]
 1421 0692 7A6B     		ldr	r2, [r7, #52]
 1422 0694 3B6B     		ldr	r3, [r7, #48]
 1423 0696 D31A     		subs	r3, r2, r3
 1424 0698 7B63     		str	r3, [r7, #52]
 1425 069a FB6C     		ldr	r3, [r7, #76]
 1426 069c 5B6A     		ldr	r3, [r3, #36]
 1427 069e 7A6B     		ldr	r2, [r7, #52]
 1428 06a0 D31A     		subs	r3, r2, r3
 1429 06a2 7B63     		str	r3, [r7, #52]
 1430 06a4 FB6C     		ldr	r3, [r7, #76]
 1431 06a6 5B6A     		ldr	r3, [r3, #36]
 1432 06a8 5B0B     		lsrs	r3, r3, #13
 1433 06aa 7A6B     		ldr	r2, [r7, #52]
 1434 06ac 5340     		eors	r3, r3, r2
 1435 06ae 7B63     		str	r3, [r7, #52]
 1436 06b0 FB6C     		ldr	r3, [r7, #76]
 1437 06b2 5B6A     		ldr	r3, [r3, #36]
 1438 06b4 3A6B     		ldr	r2, [r7, #48]
 1439 06b6 D31A     		subs	r3, r2, r3
 1440 06b8 3B63     		str	r3, [r7, #48]
 1441 06ba 3A6B     		ldr	r2, [r7, #48]
 1442 06bc 7B6B     		ldr	r3, [r7, #52]
 1443 06be D31A     		subs	r3, r2, r3
 1444 06c0 3B63     		str	r3, [r7, #48]
 1445 06c2 7B6B     		ldr	r3, [r7, #52]
 1446 06c4 1B02     		lsls	r3, r3, #8
 1447 06c6 3A6B     		ldr	r2, [r7, #48]
 1448 06c8 5340     		eors	r3, r3, r2
 1449 06ca 3B63     		str	r3, [r7, #48]
 1450 06cc FB6C     		ldr	r3, [r7, #76]
 1451 06ce 5A6A     		ldr	r2, [r3, #36]
 1452 06d0 7B6B     		ldr	r3, [r7, #52]
 1453 06d2 D21A     		subs	r2, r2, r3
 1454 06d4 FB6C     		ldr	r3, [r7, #76]
 1455 06d6 5A62     		str	r2, [r3, #36]
 1456 06d8 FB6C     		ldr	r3, [r7, #76]
 1457 06da 5A6A     		ldr	r2, [r3, #36]
 1458 06dc 3B6B     		ldr	r3, [r7, #48]
 1459 06de D21A     		subs	r2, r2, r3
 1460 06e0 FB6C     		ldr	r3, [r7, #76]
 1461 06e2 5A62     		str	r2, [r3, #36]
 1462 06e4 FB6C     		ldr	r3, [r7, #76]
 1463 06e6 5A6A     		ldr	r2, [r3, #36]
 1464 06e8 3B6B     		ldr	r3, [r7, #48]
 1465 06ea 5B0B     		lsrs	r3, r3, #13
 1466 06ec 5A40     		eors	r2, r2, r3
 1467 06ee FB6C     		ldr	r3, [r7, #76]
 1468 06f0 5A62     		str	r2, [r3, #36]
 1469 06f2 7A6B     		ldr	r2, [r7, #52]
 1470 06f4 3B6B     		ldr	r3, [r7, #48]
 1471 06f6 D31A     		subs	r3, r2, r3
 1472 06f8 7B63     		str	r3, [r7, #52]
 1473 06fa FB6C     		ldr	r3, [r7, #76]
 1474 06fc 5B6A     		ldr	r3, [r3, #36]
 1475 06fe 7A6B     		ldr	r2, [r7, #52]
 1476 0700 D31A     		subs	r3, r2, r3
 1477 0702 7B63     		str	r3, [r7, #52]
 1478 0704 FB6C     		ldr	r3, [r7, #76]
 1479 0706 5B6A     		ldr	r3, [r3, #36]
 1480 0708 1B0B     		lsrs	r3, r3, #12
 1481 070a 7A6B     		ldr	r2, [r7, #52]
 1482 070c 5340     		eors	r3, r3, r2
 1483 070e 7B63     		str	r3, [r7, #52]
 1484 0710 FB6C     		ldr	r3, [r7, #76]
 1485 0712 5B6A     		ldr	r3, [r3, #36]
 1486 0714 3A6B     		ldr	r2, [r7, #48]
 1487 0716 D31A     		subs	r3, r2, r3
 1488 0718 3B63     		str	r3, [r7, #48]
 1489 071a 3A6B     		ldr	r2, [r7, #48]
 1490 071c 7B6B     		ldr	r3, [r7, #52]
 1491 071e D31A     		subs	r3, r2, r3
 1492 0720 3B63     		str	r3, [r7, #48]
 1493 0722 7B6B     		ldr	r3, [r7, #52]
 1494 0724 1B04     		lsls	r3, r3, #16
 1495 0726 3A6B     		ldr	r2, [r7, #48]
 1496 0728 5340     		eors	r3, r3, r2
 1497 072a 3B63     		str	r3, [r7, #48]
 1498 072c FB6C     		ldr	r3, [r7, #76]
 1499 072e 5A6A     		ldr	r2, [r3, #36]
 1500 0730 7B6B     		ldr	r3, [r7, #52]
 1501 0732 D21A     		subs	r2, r2, r3
 1502 0734 FB6C     		ldr	r3, [r7, #76]
 1503 0736 5A62     		str	r2, [r3, #36]
 1504 0738 FB6C     		ldr	r3, [r7, #76]
 1505 073a 5A6A     		ldr	r2, [r3, #36]
 1506 073c 3B6B     		ldr	r3, [r7, #48]
 1507 073e D21A     		subs	r2, r2, r3
 1508 0740 FB6C     		ldr	r3, [r7, #76]
 1509 0742 5A62     		str	r2, [r3, #36]
 1510 0744 FB6C     		ldr	r3, [r7, #76]
 1511 0746 5A6A     		ldr	r2, [r3, #36]
 1512 0748 3B6B     		ldr	r3, [r7, #48]
 1513 074a 5B09     		lsrs	r3, r3, #5
 1514 074c 5A40     		eors	r2, r2, r3
 1515 074e FB6C     		ldr	r3, [r7, #76]
 1516 0750 5A62     		str	r2, [r3, #36]
 1517 0752 7A6B     		ldr	r2, [r7, #52]
 1518 0754 3B6B     		ldr	r3, [r7, #48]
 1519 0756 D31A     		subs	r3, r2, r3
 1520 0758 7B63     		str	r3, [r7, #52]
 1521 075a FB6C     		ldr	r3, [r7, #76]
 1522 075c 5B6A     		ldr	r3, [r3, #36]
 1523 075e 7A6B     		ldr	r2, [r7, #52]
 1524 0760 D31A     		subs	r3, r2, r3
 1525 0762 7B63     		str	r3, [r7, #52]
 1526 0764 FB6C     		ldr	r3, [r7, #76]
 1527 0766 5B6A     		ldr	r3, [r3, #36]
 1528 0768 DB08     		lsrs	r3, r3, #3
 1529 076a 7A6B     		ldr	r2, [r7, #52]
 1530 076c 5340     		eors	r3, r3, r2
 1531 076e 7B63     		str	r3, [r7, #52]
 1532 0770 FB6C     		ldr	r3, [r7, #76]
 1533 0772 5B6A     		ldr	r3, [r3, #36]
 1534 0774 3A6B     		ldr	r2, [r7, #48]
 1535 0776 D31A     		subs	r3, r2, r3
 1536 0778 3B63     		str	r3, [r7, #48]
 1537 077a 3A6B     		ldr	r2, [r7, #48]
 1538 077c 7B6B     		ldr	r3, [r7, #52]
 1539 077e D31A     		subs	r3, r2, r3
 1540 0780 3B63     		str	r3, [r7, #48]
 1541 0782 7B6B     		ldr	r3, [r7, #52]
 1542 0784 9B02     		lsls	r3, r3, #10
 1543 0786 3A6B     		ldr	r2, [r7, #48]
 1544 0788 5340     		eors	r3, r3, r2
 1545 078a 3B63     		str	r3, [r7, #48]
 1546 078c FB6C     		ldr	r3, [r7, #76]
 1547 078e 5A6A     		ldr	r2, [r3, #36]
 1548 0790 7B6B     		ldr	r3, [r7, #52]
 1549 0792 D21A     		subs	r2, r2, r3
 1550 0794 FB6C     		ldr	r3, [r7, #76]
 1551 0796 5A62     		str	r2, [r3, #36]
 1552 0798 FB6C     		ldr	r3, [r7, #76]
 1553 079a 5A6A     		ldr	r2, [r3, #36]
 1554 079c 3B6B     		ldr	r3, [r7, #48]
 1555 079e D21A     		subs	r2, r2, r3
 1556 07a0 FB6C     		ldr	r3, [r7, #76]
 1557 07a2 5A62     		str	r2, [r3, #36]
 1558 07a4 FB6C     		ldr	r3, [r7, #76]
 1559 07a6 5A6A     		ldr	r2, [r3, #36]
 1560 07a8 3B6B     		ldr	r3, [r7, #48]
 1561 07aa DB0B     		lsrs	r3, r3, #15
 1562 07ac 5A40     		eors	r2, r2, r3
 1563 07ae FB6C     		ldr	r3, [r7, #76]
 1564 07b0 5A62     		str	r2, [r3, #36]
 1565 07b2 BB6A     		ldr	r3, [r7, #40]
 1566 07b4 0C33     		adds	r3, r3, #12
 1567 07b6 BB62     		str	r3, [r7, #40]
 1568 07b8 FB6A     		ldr	r3, [r7, #44]
 1569 07ba 0C3B     		subs	r3, r3, #12
 1570 07bc FB62     		str	r3, [r7, #44]
 1571              	.L29:
 1572              		.loc 1 31 0 discriminator 1
 1573 07be FB6A     		ldr	r3, [r7, #44]
 1574 07c0 0B2B     		cmp	r3, #11
 1575 07c2 3FF623AF 		bhi	.L30
 1576              		.loc 1 31 0 discriminator 3
 1577 07c6 FB6C     		ldr	r3, [r7, #76]
 1578 07c8 5B6A     		ldr	r3, [r3, #36]
 1579 07ca 1A1D     		adds	r2, r3, #4
 1580 07cc FB6C     		ldr	r3, [r7, #76]
 1581 07ce 5A62     		str	r2, [r3, #36]
 1582 07d0 FB6A     		ldr	r3, [r7, #44]
 1583 07d2 013B     		subs	r3, r3, #1
 1584 07d4 0A2B     		cmp	r3, #10
 1585 07d6 69D8     		bhi	.L31
 1586 07d8 01A2     		adr	r2, .L33
 1587 07da 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1588 07de 00BF     		.p2align 2
 1589              	.L33:
 1590 07e0 A3080000 		.word	.L32+1
 1591 07e4 95080000 		.word	.L34+1
 1592 07e8 87080000 		.word	.L35+1
 1593 07ec 79080000 		.word	.L36+1
 1594 07f0 6D080000 		.word	.L37+1
 1595 07f4 5F080000 		.word	.L38+1
 1596 07f8 51080000 		.word	.L39+1
 1597 07fc 43080000 		.word	.L40+1
 1598 0800 31080000 		.word	.L41+1
 1599 0804 1F080000 		.word	.L42+1
 1600 0808 0D080000 		.word	.L43+1
 1601              	.L43:
 1602              		.loc 1 31 0 discriminator 12
 1603 080c FB6C     		ldr	r3, [r7, #76]
 1604 080e 5A6A     		ldr	r2, [r3, #36]
 1605 0810 BB6A     		ldr	r3, [r7, #40]
 1606 0812 0A33     		adds	r3, r3, #10
 1607 0814 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1608 0816 1B06     		lsls	r3, r3, #24
 1609 0818 1A44     		add	r2, r2, r3
 1610 081a FB6C     		ldr	r3, [r7, #76]
 1611 081c 5A62     		str	r2, [r3, #36]
 1612              	.L42:
 1613              		.loc 1 31 0 discriminator 11
 1614 081e FB6C     		ldr	r3, [r7, #76]
 1615 0820 5A6A     		ldr	r2, [r3, #36]
 1616 0822 BB6A     		ldr	r3, [r7, #40]
 1617 0824 0933     		adds	r3, r3, #9
 1618 0826 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1619 0828 1B04     		lsls	r3, r3, #16
 1620 082a 1A44     		add	r2, r2, r3
 1621 082c FB6C     		ldr	r3, [r7, #76]
 1622 082e 5A62     		str	r2, [r3, #36]
 1623              	.L41:
 1624              		.loc 1 31 0 discriminator 10
 1625 0830 FB6C     		ldr	r3, [r7, #76]
 1626 0832 5A6A     		ldr	r2, [r3, #36]
 1627 0834 BB6A     		ldr	r3, [r7, #40]
 1628 0836 0833     		adds	r3, r3, #8
 1629 0838 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1630 083a 1B02     		lsls	r3, r3, #8
 1631 083c 1A44     		add	r2, r2, r3
 1632 083e FB6C     		ldr	r3, [r7, #76]
 1633 0840 5A62     		str	r2, [r3, #36]
 1634              	.L40:
 1635              		.loc 1 31 0 discriminator 9
 1636 0842 BB6A     		ldr	r3, [r7, #40]
 1637 0844 0733     		adds	r3, r3, #7
 1638 0846 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1639 0848 1B06     		lsls	r3, r3, #24
 1640 084a 3A6B     		ldr	r2, [r7, #48]
 1641 084c 1344     		add	r3, r3, r2
 1642 084e 3B63     		str	r3, [r7, #48]
 1643              	.L39:
 1644              		.loc 1 31 0 discriminator 8
 1645 0850 BB6A     		ldr	r3, [r7, #40]
 1646 0852 0633     		adds	r3, r3, #6
 1647 0854 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1648 0856 1B04     		lsls	r3, r3, #16
 1649 0858 3A6B     		ldr	r2, [r7, #48]
 1650 085a 1344     		add	r3, r3, r2
 1651 085c 3B63     		str	r3, [r7, #48]
 1652              	.L38:
 1653              		.loc 1 31 0 discriminator 7
 1654 085e BB6A     		ldr	r3, [r7, #40]
 1655 0860 0533     		adds	r3, r3, #5
 1656 0862 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1657 0864 1B02     		lsls	r3, r3, #8
 1658 0866 3A6B     		ldr	r2, [r7, #48]
 1659 0868 1344     		add	r3, r3, r2
 1660 086a 3B63     		str	r3, [r7, #48]
 1661              	.L37:
 1662              		.loc 1 31 0 discriminator 6
 1663 086c BB6A     		ldr	r3, [r7, #40]
 1664 086e 0433     		adds	r3, r3, #4
 1665 0870 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1666 0872 3A6B     		ldr	r2, [r7, #48]
 1667 0874 1344     		add	r3, r3, r2
 1668 0876 3B63     		str	r3, [r7, #48]
 1669              	.L36:
 1670              		.loc 1 31 0 discriminator 5
 1671 0878 BB6A     		ldr	r3, [r7, #40]
 1672 087a 0333     		adds	r3, r3, #3
 1673 087c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1674 087e 1B06     		lsls	r3, r3, #24
 1675 0880 7A6B     		ldr	r2, [r7, #52]
 1676 0882 1344     		add	r3, r3, r2
 1677 0884 7B63     		str	r3, [r7, #52]
 1678              	.L35:
 1679              		.loc 1 31 0 discriminator 4
 1680 0886 BB6A     		ldr	r3, [r7, #40]
 1681 0888 0233     		adds	r3, r3, #2
 1682 088a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1683 088c 1B04     		lsls	r3, r3, #16
 1684 088e 7A6B     		ldr	r2, [r7, #52]
 1685 0890 1344     		add	r3, r3, r2
 1686 0892 7B63     		str	r3, [r7, #52]
 1687              	.L34:
 1688              		.loc 1 31 0 discriminator 3
 1689 0894 BB6A     		ldr	r3, [r7, #40]
 1690 0896 0133     		adds	r3, r3, #1
 1691 0898 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1692 089a 1B02     		lsls	r3, r3, #8
 1693 089c 7A6B     		ldr	r2, [r7, #52]
 1694 089e 1344     		add	r3, r3, r2
 1695 08a0 7B63     		str	r3, [r7, #52]
 1696              	.L32:
 1697              		.loc 1 31 0 discriminator 2
 1698 08a2 BB6A     		ldr	r3, [r7, #40]
 1699 08a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1700 08a6 7A6B     		ldr	r2, [r7, #52]
 1701 08a8 1344     		add	r3, r3, r2
 1702 08aa 7B63     		str	r3, [r7, #52]
 1703              	.L31:
 1704              		.loc 1 31 0 discriminator 1
 1705 08ac 7A6B     		ldr	r2, [r7, #52]
 1706 08ae 3B6B     		ldr	r3, [r7, #48]
 1707 08b0 D31A     		subs	r3, r2, r3
 1708 08b2 7B63     		str	r3, [r7, #52]
 1709 08b4 FB6C     		ldr	r3, [r7, #76]
 1710 08b6 5B6A     		ldr	r3, [r3, #36]
 1711 08b8 7A6B     		ldr	r2, [r7, #52]
 1712 08ba D31A     		subs	r3, r2, r3
 1713 08bc 7B63     		str	r3, [r7, #52]
 1714 08be FB6C     		ldr	r3, [r7, #76]
 1715 08c0 5B6A     		ldr	r3, [r3, #36]
 1716 08c2 5B0B     		lsrs	r3, r3, #13
 1717 08c4 7A6B     		ldr	r2, [r7, #52]
 1718 08c6 5340     		eors	r3, r3, r2
 1719 08c8 7B63     		str	r3, [r7, #52]
 1720 08ca FB6C     		ldr	r3, [r7, #76]
 1721 08cc 5B6A     		ldr	r3, [r3, #36]
 1722 08ce 3A6B     		ldr	r2, [r7, #48]
 1723 08d0 D31A     		subs	r3, r2, r3
 1724 08d2 3B63     		str	r3, [r7, #48]
 1725 08d4 3A6B     		ldr	r2, [r7, #48]
 1726 08d6 7B6B     		ldr	r3, [r7, #52]
 1727 08d8 D31A     		subs	r3, r2, r3
 1728 08da 3B63     		str	r3, [r7, #48]
 1729 08dc 7B6B     		ldr	r3, [r7, #52]
 1730 08de 1B02     		lsls	r3, r3, #8
 1731 08e0 3A6B     		ldr	r2, [r7, #48]
 1732 08e2 5340     		eors	r3, r3, r2
 1733 08e4 3B63     		str	r3, [r7, #48]
 1734 08e6 FB6C     		ldr	r3, [r7, #76]
 1735 08e8 5A6A     		ldr	r2, [r3, #36]
 1736 08ea 7B6B     		ldr	r3, [r7, #52]
 1737 08ec D21A     		subs	r2, r2, r3
 1738 08ee FB6C     		ldr	r3, [r7, #76]
 1739 08f0 5A62     		str	r2, [r3, #36]
 1740 08f2 FB6C     		ldr	r3, [r7, #76]
 1741 08f4 5A6A     		ldr	r2, [r3, #36]
 1742 08f6 3B6B     		ldr	r3, [r7, #48]
 1743 08f8 D21A     		subs	r2, r2, r3
 1744 08fa FB6C     		ldr	r3, [r7, #76]
 1745 08fc 5A62     		str	r2, [r3, #36]
 1746 08fe FB6C     		ldr	r3, [r7, #76]
 1747 0900 5A6A     		ldr	r2, [r3, #36]
 1748 0902 3B6B     		ldr	r3, [r7, #48]
 1749 0904 5B0B     		lsrs	r3, r3, #13
 1750 0906 5A40     		eors	r2, r2, r3
 1751 0908 FB6C     		ldr	r3, [r7, #76]
 1752 090a 5A62     		str	r2, [r3, #36]
 1753 090c 7A6B     		ldr	r2, [r7, #52]
 1754 090e 3B6B     		ldr	r3, [r7, #48]
 1755 0910 D31A     		subs	r3, r2, r3
 1756 0912 7B63     		str	r3, [r7, #52]
 1757 0914 FB6C     		ldr	r3, [r7, #76]
 1758 0916 5B6A     		ldr	r3, [r3, #36]
 1759 0918 7A6B     		ldr	r2, [r7, #52]
 1760 091a D31A     		subs	r3, r2, r3
 1761 091c 7B63     		str	r3, [r7, #52]
 1762 091e FB6C     		ldr	r3, [r7, #76]
 1763 0920 5B6A     		ldr	r3, [r3, #36]
 1764 0922 1B0B     		lsrs	r3, r3, #12
 1765 0924 7A6B     		ldr	r2, [r7, #52]
 1766 0926 5340     		eors	r3, r3, r2
 1767 0928 7B63     		str	r3, [r7, #52]
 1768 092a FB6C     		ldr	r3, [r7, #76]
 1769 092c 5B6A     		ldr	r3, [r3, #36]
 1770 092e 3A6B     		ldr	r2, [r7, #48]
 1771 0930 D31A     		subs	r3, r2, r3
 1772 0932 3B63     		str	r3, [r7, #48]
 1773 0934 3A6B     		ldr	r2, [r7, #48]
 1774 0936 7B6B     		ldr	r3, [r7, #52]
 1775 0938 D31A     		subs	r3, r2, r3
 1776 093a 3B63     		str	r3, [r7, #48]
 1777 093c 7B6B     		ldr	r3, [r7, #52]
 1778 093e 1B04     		lsls	r3, r3, #16
 1779 0940 3A6B     		ldr	r2, [r7, #48]
 1780 0942 5340     		eors	r3, r3, r2
 1781 0944 3B63     		str	r3, [r7, #48]
 1782 0946 FB6C     		ldr	r3, [r7, #76]
 1783 0948 5A6A     		ldr	r2, [r3, #36]
 1784 094a 7B6B     		ldr	r3, [r7, #52]
 1785 094c D21A     		subs	r2, r2, r3
 1786 094e FB6C     		ldr	r3, [r7, #76]
 1787 0950 5A62     		str	r2, [r3, #36]
 1788 0952 FB6C     		ldr	r3, [r7, #76]
 1789 0954 5A6A     		ldr	r2, [r3, #36]
 1790 0956 3B6B     		ldr	r3, [r7, #48]
 1791 0958 D21A     		subs	r2, r2, r3
 1792 095a FB6C     		ldr	r3, [r7, #76]
 1793 095c 5A62     		str	r2, [r3, #36]
 1794 095e FB6C     		ldr	r3, [r7, #76]
 1795 0960 5A6A     		ldr	r2, [r3, #36]
 1796 0962 3B6B     		ldr	r3, [r7, #48]
 1797 0964 5B09     		lsrs	r3, r3, #5
 1798 0966 5A40     		eors	r2, r2, r3
 1799 0968 FB6C     		ldr	r3, [r7, #76]
 1800 096a 5A62     		str	r2, [r3, #36]
 1801 096c 7A6B     		ldr	r2, [r7, #52]
 1802 096e 3B6B     		ldr	r3, [r7, #48]
 1803 0970 D31A     		subs	r3, r2, r3
 1804 0972 7B63     		str	r3, [r7, #52]
 1805 0974 FB6C     		ldr	r3, [r7, #76]
 1806 0976 5B6A     		ldr	r3, [r3, #36]
 1807 0978 7A6B     		ldr	r2, [r7, #52]
 1808 097a D31A     		subs	r3, r2, r3
 1809 097c 7B63     		str	r3, [r7, #52]
 1810 097e FB6C     		ldr	r3, [r7, #76]
 1811 0980 5B6A     		ldr	r3, [r3, #36]
 1812 0982 DB08     		lsrs	r3, r3, #3
 1813 0984 7A6B     		ldr	r2, [r7, #52]
 1814 0986 5340     		eors	r3, r3, r2
 1815 0988 7B63     		str	r3, [r7, #52]
 1816 098a FB6C     		ldr	r3, [r7, #76]
 1817 098c 5B6A     		ldr	r3, [r3, #36]
 1818 098e 3A6B     		ldr	r2, [r7, #48]
 1819 0990 D31A     		subs	r3, r2, r3
 1820 0992 3B63     		str	r3, [r7, #48]
 1821 0994 3A6B     		ldr	r2, [r7, #48]
 1822 0996 7B6B     		ldr	r3, [r7, #52]
 1823 0998 D31A     		subs	r3, r2, r3
 1824 099a 3B63     		str	r3, [r7, #48]
 1825 099c 7B6B     		ldr	r3, [r7, #52]
 1826 099e 9B02     		lsls	r3, r3, #10
 1827 09a0 3A6B     		ldr	r2, [r7, #48]
 1828 09a2 5340     		eors	r3, r3, r2
 1829 09a4 3B63     		str	r3, [r7, #48]
 1830 09a6 FB6C     		ldr	r3, [r7, #76]
 1831 09a8 5A6A     		ldr	r2, [r3, #36]
 1832 09aa 7B6B     		ldr	r3, [r7, #52]
 1833 09ac D21A     		subs	r2, r2, r3
 1834 09ae FB6C     		ldr	r3, [r7, #76]
 1835 09b0 5A62     		str	r2, [r3, #36]
 1836 09b2 FB6C     		ldr	r3, [r7, #76]
 1837 09b4 5A6A     		ldr	r2, [r3, #36]
 1838 09b6 3B6B     		ldr	r3, [r7, #48]
 1839 09b8 D21A     		subs	r2, r2, r3
 1840 09ba FB6C     		ldr	r3, [r7, #76]
 1841 09bc 5A62     		str	r2, [r3, #36]
 1842 09be FB6C     		ldr	r3, [r7, #76]
 1843 09c0 5A6A     		ldr	r2, [r3, #36]
 1844 09c2 3B6B     		ldr	r3, [r7, #48]
 1845 09c4 DB0B     		lsrs	r3, r3, #15
 1846 09c6 5A40     		eors	r2, r2, r3
 1847 09c8 FB6C     		ldr	r3, [r7, #76]
 1848 09ca 5A62     		str	r2, [r3, #36]
 1849 09cc FB6C     		ldr	r3, [r7, #76]
 1850 09ce 5A6A     		ldr	r2, [r3, #36]
 1851 09d0 40F20003 		movw	r3, #:lower16:users
 1852 09d4 C0F20003 		movt	r3, #:upper16:users
 1853 09d8 1B68     		ldr	r3, [r3]
 1854 09da 9B68     		ldr	r3, [r3, #8]
 1855 09dc 5B68     		ldr	r3, [r3, #4]
 1856 09de 013B     		subs	r3, r3, #1
 1857 09e0 1340     		ands	r3, r3, r2
 1858 09e2 BB61     		str	r3, [r7, #24]
 1859              	.LBE5:
 1860 09e4 40F20003 		movw	r3, #:lower16:users
 1861 09e8 C0F20003 		movt	r3, #:upper16:users
 1862 09ec 1B68     		ldr	r3, [r3]
 1863 09ee 9B68     		ldr	r3, [r3, #8]
 1864 09f0 1968     		ldr	r1, [r3]
 1865 09f2 BA69     		ldr	r2, [r7, #24]
 1866 09f4 1346     		mov	r3, r2
 1867 09f6 5B00     		lsls	r3, r3, #1
 1868 09f8 1344     		add	r3, r3, r2
 1869 09fa 9B00     		lsls	r3, r3, #2
 1870 09fc 0B44     		add	r3, r3, r1
 1871 09fe 5A68     		ldr	r2, [r3, #4]
 1872 0a00 0132     		adds	r2, r2, #1
 1873 0a02 5A60     		str	r2, [r3, #4]
 1874 0a04 40F20003 		movw	r3, #:lower16:users
 1875 0a08 C0F20003 		movt	r3, #:upper16:users
 1876 0a0c 1B68     		ldr	r3, [r3]
 1877 0a0e 9B68     		ldr	r3, [r3, #8]
 1878 0a10 1968     		ldr	r1, [r3]
 1879 0a12 BA69     		ldr	r2, [r7, #24]
 1880 0a14 1346     		mov	r3, r2
 1881 0a16 5B00     		lsls	r3, r3, #1
 1882 0a18 1344     		add	r3, r3, r2
 1883 0a1a 9B00     		lsls	r3, r3, #2
 1884 0a1c 0B44     		add	r3, r3, r1
 1885 0a1e 1A68     		ldr	r2, [r3]
 1886 0a20 FB6C     		ldr	r3, [r7, #76]
 1887 0a22 9A61     		str	r2, [r3, #24]
 1888 0a24 FB6C     		ldr	r3, [r7, #76]
 1889 0a26 0022     		movs	r2, #0
 1890 0a28 5A61     		str	r2, [r3, #20]
 1891 0a2a 40F20003 		movw	r3, #:lower16:users
 1892 0a2e C0F20003 		movt	r3, #:upper16:users
 1893 0a32 1B68     		ldr	r3, [r3]
 1894 0a34 9B68     		ldr	r3, [r3, #8]
 1895 0a36 1968     		ldr	r1, [r3]
 1896 0a38 BA69     		ldr	r2, [r7, #24]
 1897 0a3a 1346     		mov	r3, r2
 1898 0a3c 5B00     		lsls	r3, r3, #1
 1899 0a3e 1344     		add	r3, r3, r2
 1900 0a40 9B00     		lsls	r3, r3, #2
 1901 0a42 0B44     		add	r3, r3, r1
 1902 0a44 1B68     		ldr	r3, [r3]
 1903 0a46 002B     		cmp	r3, #0
 1904 0a48 10D0     		beq	.L44
 1905 0a4a 40F20003 		movw	r3, #:lower16:users
 1906 0a4e C0F20003 		movt	r3, #:upper16:users
 1907 0a52 1B68     		ldr	r3, [r3]
 1908 0a54 9B68     		ldr	r3, [r3, #8]
 1909 0a56 1968     		ldr	r1, [r3]
 1910 0a58 BA69     		ldr	r2, [r7, #24]
 1911 0a5a 1346     		mov	r3, r2
 1912 0a5c 5B00     		lsls	r3, r3, #1
 1913 0a5e 1344     		add	r3, r3, r2
 1914 0a60 9B00     		lsls	r3, r3, #2
 1915 0a62 0B44     		add	r3, r3, r1
 1916 0a64 1B68     		ldr	r3, [r3]
 1917 0a66 FA6C     		ldr	r2, [r7, #76]
 1918 0a68 0832     		adds	r2, r2, #8
 1919 0a6a DA60     		str	r2, [r3, #12]
 1920              	.L44:
 1921              		.loc 1 31 0 discriminator 2
 1922 0a6c 40F20003 		movw	r3, #:lower16:users
 1923 0a70 C0F20003 		movt	r3, #:upper16:users
 1924 0a74 1B68     		ldr	r3, [r3]
 1925 0a76 9B68     		ldr	r3, [r3, #8]
 1926 0a78 1968     		ldr	r1, [r3]
 1927 0a7a BA69     		ldr	r2, [r7, #24]
 1928 0a7c 1346     		mov	r3, r2
 1929 0a7e 5B00     		lsls	r3, r3, #1
 1930 0a80 1344     		add	r3, r3, r2
 1931 0a82 9B00     		lsls	r3, r3, #2
 1932 0a84 0B44     		add	r3, r3, r1
 1933 0a86 FA6C     		ldr	r2, [r7, #76]
 1934 0a88 0832     		adds	r2, r2, #8
 1935 0a8a 1A60     		str	r2, [r3]
 1936 0a8c 40F20003 		movw	r3, #:lower16:users
 1937 0a90 C0F20003 		movt	r3, #:upper16:users
 1938 0a94 1B68     		ldr	r3, [r3]
 1939 0a96 9B68     		ldr	r3, [r3, #8]
 1940 0a98 1968     		ldr	r1, [r3]
 1941 0a9a BA69     		ldr	r2, [r7, #24]
 1942 0a9c 1346     		mov	r3, r2
 1943 0a9e 5B00     		lsls	r3, r3, #1
 1944 0aa0 1344     		add	r3, r3, r2
 1945 0aa2 9B00     		lsls	r3, r3, #2
 1946 0aa4 0B44     		add	r3, r3, r1
 1947 0aa6 5968     		ldr	r1, [r3, #4]
 1948 0aa8 40F20003 		movw	r3, #:lower16:users
 1949 0aac C0F20003 		movt	r3, #:upper16:users
 1950 0ab0 1B68     		ldr	r3, [r3]
 1951 0ab2 9B68     		ldr	r3, [r3, #8]
 1952 0ab4 1868     		ldr	r0, [r3]
 1953 0ab6 BA69     		ldr	r2, [r7, #24]
 1954 0ab8 1346     		mov	r3, r2
 1955 0aba 5B00     		lsls	r3, r3, #1
 1956 0abc 1344     		add	r3, r3, r2
 1957 0abe 9B00     		lsls	r3, r3, #2
 1958 0ac0 0344     		add	r3, r3, r0
 1959 0ac2 9B68     		ldr	r3, [r3, #8]
 1960 0ac4 5A1C     		adds	r2, r3, #1
 1961 0ac6 1346     		mov	r3, r2
 1962 0ac8 9B00     		lsls	r3, r3, #2
 1963 0aca 1344     		add	r3, r3, r2
 1964 0acc 5B00     		lsls	r3, r3, #1
 1965 0ace 9942     		cmp	r1, r3
 1966 0ad0 C0F0D180 		bcc	.L24
 1967              		.loc 1 31 0 discriminator 1
 1968 0ad4 FB6C     		ldr	r3, [r7, #76]
 1969 0ad6 9B68     		ldr	r3, [r3, #8]
 1970 0ad8 5B6A     		ldr	r3, [r3, #36]
 1971 0ada 012B     		cmp	r3, #1
 1972 0adc 00F0CB80 		beq	.L24
 1973              	.LBB6:
 1974 0ae0 FB6C     		ldr	r3, [r7, #76]
 1975 0ae2 9B68     		ldr	r3, [r3, #8]
 1976 0ae4 5A68     		ldr	r2, [r3, #4]
 1977 0ae6 1346     		mov	r3, r2
 1978 0ae8 5B00     		lsls	r3, r3, #1
 1979 0aea 1344     		add	r3, r3, r2
 1980 0aec DB00     		lsls	r3, r3, #3
 1981 0aee 1846     		mov	r0, r3
 1982 0af0 FFF7FEFF 		bl	malloc
 1983 0af4 0346     		mov	r3, r0
 1984 0af6 7B61     		str	r3, [r7, #20]
 1985 0af8 7B69     		ldr	r3, [r7, #20]
 1986 0afa 002B     		cmp	r3, #0
 1987 0afc 03D1     		bne	.L45
 1988 0afe 4FF0FF30 		mov	r0, #-1
 1989 0b02 FFF7FEFF 		bl	exit
 1990              	.L45:
 1991              		.loc 1 31 0 discriminator 2
 1992 0b06 FB6C     		ldr	r3, [r7, #76]
 1993 0b08 9B68     		ldr	r3, [r3, #8]
 1994 0b0a 5A68     		ldr	r2, [r3, #4]
 1995 0b0c 1346     		mov	r3, r2
 1996 0b0e 5B00     		lsls	r3, r3, #1
 1997 0b10 1344     		add	r3, r3, r2
 1998 0b12 DB00     		lsls	r3, r3, #3
 1999 0b14 7869     		ldr	r0, [r7, #20]
 2000 0b16 0021     		movs	r1, #0
 2001 0b18 1A46     		mov	r2, r3
 2002 0b1a FFF7FEFF 		bl	memset
 2003 0b1e FB6C     		ldr	r3, [r7, #76]
 2004 0b20 9A68     		ldr	r2, [r3, #8]
 2005 0b22 FB6C     		ldr	r3, [r7, #76]
 2006 0b24 9B68     		ldr	r3, [r3, #8]
 2007 0b26 D968     		ldr	r1, [r3, #12]
 2008 0b28 FB6C     		ldr	r3, [r7, #76]
 2009 0b2a 9B68     		ldr	r3, [r3, #8]
 2010 0b2c 9B68     		ldr	r3, [r3, #8]
 2011 0b2e 0133     		adds	r3, r3, #1
 2012 0b30 D940     		lsrs	r1, r1, r3
 2013 0b32 FB6C     		ldr	r3, [r7, #76]
 2014 0b34 9B68     		ldr	r3, [r3, #8]
 2015 0b36 D868     		ldr	r0, [r3, #12]
 2016 0b38 FB6C     		ldr	r3, [r7, #76]
 2017 0b3a 9B68     		ldr	r3, [r3, #8]
 2018 0b3c 5B68     		ldr	r3, [r3, #4]
 2019 0b3e 5B00     		lsls	r3, r3, #1
 2020 0b40 013B     		subs	r3, r3, #1
 2021 0b42 0340     		ands	r3, r3, r0
 2022 0b44 002B     		cmp	r3, #0
 2023 0b46 01D0     		beq	.L46
 2024              		.loc 1 31 0 discriminator 1
 2025 0b48 0123     		movs	r3, #1
 2026 0b4a 00E0     		b	.L47
 2027              	.L46:
 2028              		.loc 1 31 0 discriminator 2
 2029 0b4c 0023     		movs	r3, #0
 2030              	.L47:
 2031              		.loc 1 31 0 discriminator 3
 2032 0b4e 0B44     		add	r3, r3, r1
 2033 0b50 9361     		str	r3, [r2, #24]
 2034 0b52 FB6C     		ldr	r3, [r7, #76]
 2035 0b54 9B68     		ldr	r3, [r3, #8]
 2036 0b56 0022     		movs	r2, #0
 2037 0b58 DA61     		str	r2, [r3, #28]
 2038 0b5a 0023     		movs	r3, #0
 2039 0b5c 7B62     		str	r3, [r7, #36]
 2040 0b5e 53E0     		b	.L48
 2041              	.L53:
 2042              		.loc 1 31 0 discriminator 2
 2043 0b60 FB6C     		ldr	r3, [r7, #76]
 2044 0b62 9B68     		ldr	r3, [r3, #8]
 2045 0b64 1968     		ldr	r1, [r3]
 2046 0b66 7A6A     		ldr	r2, [r7, #36]
 2047 0b68 1346     		mov	r3, r2
 2048 0b6a 5B00     		lsls	r3, r3, #1
 2049 0b6c 1344     		add	r3, r3, r2
 2050 0b6e 9B00     		lsls	r3, r3, #2
 2051 0b70 0B44     		add	r3, r3, r1
 2052 0b72 1B68     		ldr	r3, [r3]
 2053 0b74 3B62     		str	r3, [r7, #32]
 2054 0b76 41E0     		b	.L49
 2055              	.L52:
 2056 0b78 3B6A     		ldr	r3, [r7, #32]
 2057 0b7a 1B69     		ldr	r3, [r3, #16]
 2058 0b7c 3B61     		str	r3, [r7, #16]
 2059 0b7e 3B6A     		ldr	r3, [r7, #32]
 2060 0b80 DA69     		ldr	r2, [r3, #28]
 2061 0b82 FB6C     		ldr	r3, [r7, #76]
 2062 0b84 9B68     		ldr	r3, [r3, #8]
 2063 0b86 5B68     		ldr	r3, [r3, #4]
 2064 0b88 5B00     		lsls	r3, r3, #1
 2065 0b8a 013B     		subs	r3, r3, #1
 2066 0b8c 1340     		ands	r3, r3, r2
 2067 0b8e FB60     		str	r3, [r7, #12]
 2068 0b90 FA68     		ldr	r2, [r7, #12]
 2069 0b92 1346     		mov	r3, r2
 2070 0b94 5B00     		lsls	r3, r3, #1
 2071 0b96 1344     		add	r3, r3, r2
 2072 0b98 9B00     		lsls	r3, r3, #2
 2073 0b9a 7A69     		ldr	r2, [r7, #20]
 2074 0b9c 1344     		add	r3, r3, r2
 2075 0b9e BB60     		str	r3, [r7, #8]
 2076 0ba0 BB68     		ldr	r3, [r7, #8]
 2077 0ba2 5B68     		ldr	r3, [r3, #4]
 2078 0ba4 5A1C     		adds	r2, r3, #1
 2079 0ba6 BB68     		ldr	r3, [r7, #8]
 2080 0ba8 5A60     		str	r2, [r3, #4]
 2081 0baa BB68     		ldr	r3, [r7, #8]
 2082 0bac 5A68     		ldr	r2, [r3, #4]
 2083 0bae FB6C     		ldr	r3, [r7, #76]
 2084 0bb0 9B68     		ldr	r3, [r3, #8]
 2085 0bb2 9B69     		ldr	r3, [r3, #24]
 2086 0bb4 9A42     		cmp	r2, r3
 2087 0bb6 0DD9     		bls	.L50
 2088              		.loc 1 31 0 discriminator 1
 2089 0bb8 FB6C     		ldr	r3, [r7, #76]
 2090 0bba 9B68     		ldr	r3, [r3, #8]
 2091 0bbc DA69     		ldr	r2, [r3, #28]
 2092 0bbe 0132     		adds	r2, r2, #1
 2093 0bc0 DA61     		str	r2, [r3, #28]
 2094 0bc2 BB68     		ldr	r3, [r7, #8]
 2095 0bc4 5A68     		ldr	r2, [r3, #4]
 2096 0bc6 FB6C     		ldr	r3, [r7, #76]
 2097 0bc8 9B68     		ldr	r3, [r3, #8]
 2098 0bca 9B69     		ldr	r3, [r3, #24]
 2099 0bcc B2FBF3F2 		udiv	r2, r2, r3
 2100 0bd0 BB68     		ldr	r3, [r7, #8]
 2101 0bd2 9A60     		str	r2, [r3, #8]
 2102              	.L50:
 2103              		.loc 1 31 0 discriminator 2
 2104 0bd4 3B6A     		ldr	r3, [r7, #32]
 2105 0bd6 0022     		movs	r2, #0
 2106 0bd8 DA60     		str	r2, [r3, #12]
 2107 0bda BB68     		ldr	r3, [r7, #8]
 2108 0bdc 1A68     		ldr	r2, [r3]
 2109 0bde 3B6A     		ldr	r3, [r7, #32]
 2110 0be0 1A61     		str	r2, [r3, #16]
 2111 0be2 BB68     		ldr	r3, [r7, #8]
 2112 0be4 1B68     		ldr	r3, [r3]
 2113 0be6 002B     		cmp	r3, #0
 2114 0be8 03D0     		beq	.L51
 2115              		.loc 1 31 0 discriminator 1
 2116 0bea BB68     		ldr	r3, [r7, #8]
 2117 0bec 1B68     		ldr	r3, [r3]
 2118 0bee 3A6A     		ldr	r2, [r7, #32]
 2119 0bf0 DA60     		str	r2, [r3, #12]
 2120              	.L51:
 2121              		.loc 1 31 0 discriminator 2
 2122 0bf2 BB68     		ldr	r3, [r7, #8]
 2123 0bf4 3A6A     		ldr	r2, [r7, #32]
 2124 0bf6 1A60     		str	r2, [r3]
 2125 0bf8 3B69     		ldr	r3, [r7, #16]
 2126 0bfa 3B62     		str	r3, [r7, #32]
 2127              	.L49:
 2128              		.loc 1 31 0 discriminator 1
 2129 0bfc 3B6A     		ldr	r3, [r7, #32]
 2130 0bfe 002B     		cmp	r3, #0
 2131 0c00 BAD1     		bne	.L52
 2132              		.loc 1 31 0 discriminator 3
 2133 0c02 7B6A     		ldr	r3, [r7, #36]
 2134 0c04 0133     		adds	r3, r3, #1
 2135 0c06 7B62     		str	r3, [r7, #36]
 2136              	.L48:
 2137              		.loc 1 31 0 discriminator 1
 2138 0c08 FB6C     		ldr	r3, [r7, #76]
 2139 0c0a 9B68     		ldr	r3, [r3, #8]
 2140 0c0c 5A68     		ldr	r2, [r3, #4]
 2141 0c0e 7B6A     		ldr	r3, [r7, #36]
 2142 0c10 9A42     		cmp	r2, r3
 2143 0c12 A5D8     		bhi	.L53
 2144              		.loc 1 31 0 discriminator 3
 2145 0c14 FB6C     		ldr	r3, [r7, #76]
 2146 0c16 9B68     		ldr	r3, [r3, #8]
 2147 0c18 1B68     		ldr	r3, [r3]
 2148 0c1a 1846     		mov	r0, r3
 2149 0c1c FFF7FEFF 		bl	free
 2150 0c20 FB6C     		ldr	r3, [r7, #76]
 2151 0c22 9B68     		ldr	r3, [r3, #8]
 2152 0c24 FA6C     		ldr	r2, [r7, #76]
 2153 0c26 9268     		ldr	r2, [r2, #8]
 2154 0c28 5268     		ldr	r2, [r2, #4]
 2155 0c2a 5200     		lsls	r2, r2, #1
 2156 0c2c 5A60     		str	r2, [r3, #4]
 2157 0c2e FB6C     		ldr	r3, [r7, #76]
 2158 0c30 9B68     		ldr	r3, [r3, #8]
 2159 0c32 9A68     		ldr	r2, [r3, #8]
 2160 0c34 0132     		adds	r2, r2, #1
 2161 0c36 9A60     		str	r2, [r3, #8]
 2162 0c38 FB6C     		ldr	r3, [r7, #76]
 2163 0c3a 9B68     		ldr	r3, [r3, #8]
 2164 0c3c 7A69     		ldr	r2, [r7, #20]
 2165 0c3e 1A60     		str	r2, [r3]
 2166 0c40 FB6C     		ldr	r3, [r7, #76]
 2167 0c42 9A68     		ldr	r2, [r3, #8]
 2168 0c44 FB6C     		ldr	r3, [r7, #76]
 2169 0c46 9B68     		ldr	r3, [r3, #8]
 2170 0c48 D969     		ldr	r1, [r3, #28]
 2171 0c4a FB6C     		ldr	r3, [r7, #76]
 2172 0c4c 9B68     		ldr	r3, [r3, #8]
 2173 0c4e DB68     		ldr	r3, [r3, #12]
 2174 0c50 5B08     		lsrs	r3, r3, #1
 2175 0c52 9942     		cmp	r1, r3
 2176 0c54 04D9     		bls	.L54
 2177              		.loc 1 31 0 discriminator 1
 2178 0c56 FB6C     		ldr	r3, [r7, #76]
 2179 0c58 9B68     		ldr	r3, [r3, #8]
 2180 0c5a 1B6A     		ldr	r3, [r3, #32]
 2181 0c5c 0133     		adds	r3, r3, #1
 2182 0c5e 00E0     		b	.L55
 2183              	.L54:
 2184              		.loc 1 31 0 discriminator 2
 2185 0c60 0023     		movs	r3, #0
 2186              	.L55:
 2187              		.loc 1 31 0 discriminator 3
 2188 0c62 1362     		str	r3, [r2, #32]
 2189 0c64 FB6C     		ldr	r3, [r7, #76]
 2190 0c66 9B68     		ldr	r3, [r3, #8]
 2191 0c68 1B6A     		ldr	r3, [r3, #32]
 2192 0c6a 012B     		cmp	r3, #1
 2193 0c6c 03D9     		bls	.L24
 2194              		.loc 1 31 0 discriminator 1
 2195 0c6e FB6C     		ldr	r3, [r7, #76]
 2196 0c70 9B68     		ldr	r3, [r3, #8]
 2197 0c72 0122     		movs	r2, #1
 2198 0c74 5A62     		str	r2, [r3, #36]
 2199              	.L24:
 2200              	.LBE6:
 2201              	.LBE4:
  32:src/modbus.c  **** 		// id: name of key field
  33:src/modbus.c  **** 	}
  34:src/modbus.c  **** 
  35:src/modbus.c  **** 	s->value = (int) keyValue;
 2202              		.loc 1 35 0 is_stmt 1
 2203 0c76 3A68     		ldr	r2, [r7]
 2204 0c78 FB6C     		ldr	r3, [r7, #76]
 2205 0c7a 5A60     		str	r2, [r3, #4]
  36:src/modbus.c  **** }
 2206              		.loc 1 36 0
 2207 0c7c 5437     		adds	r7, r7, #84
 2208 0c7e BD46     		mov	sp, r7
 2209              		@ sp needed
 2210 0c80 90BD     		pop	{r4, r7, pc}
 2211              		.cfi_endproc
 2212              	.LFE0:
 2214 0c82 00BF     		.section	.rodata
 2215              		.align	2
 2216              	.LC0:
 2217 0000 4B657920 		.ascii	"Key 0x%x --> Data 0x%x\012\000"
 2217      30782578 
 2217      202D2D3E 
 2217      20446174 
 2217      61203078 
 2218              		.section	.text.putData,"ax",%progbits
 2219              		.align	2
 2220              		.global	putData
 2221              		.thumb
 2222              		.thumb_func
 2224              	putData:
 2225              	.LFB1:
  37:src/modbus.c  **** 
  38:src/modbus.c  **** //Print the data from HASH MAP
  39:src/modbus.c  **** void putData() {
 2226              		.loc 1 39 0
 2227              		.cfi_startproc
 2228              		@ args = 0, pretend = 0, frame = 8
 2229              		@ frame_needed = 1, uses_anonymous_args = 0
 2230 0000 80B5     		push	{r7, lr}
 2231              	.LCFI3:
 2232              		.cfi_def_cfa_offset 8
 2233              		.cfi_offset 7, -8
 2234              		.cfi_offset 14, -4
 2235 0002 82B0     		sub	sp, sp, #8
 2236              	.LCFI4:
 2237              		.cfi_def_cfa_offset 16
 2238 0004 00AF     		add	r7, sp, #0
 2239              	.LCFI5:
 2240              		.cfi_def_cfa_register 7
  40:src/modbus.c  **** 	struct heapStruct *s;
  41:src/modbus.c  **** 
  42:src/modbus.c  **** 	for (s = users; s != NULL; s = (struct heapStruct*) (s->hh.next)) {
 2241              		.loc 1 42 0
 2242 0006 40F20003 		movw	r3, #:lower16:users
 2243 000a C0F20003 		movt	r3, #:upper16:users
 2244 000e 1B68     		ldr	r3, [r3]
 2245 0010 7B60     		str	r3, [r7, #4]
 2246 0012 0EE0     		b	.L57
 2247              	.L58:
  43:src/modbus.c  **** 		printf("Key 0x%x --> Data 0x%x\n", s->key, s->value);
 2248              		.loc 1 43 0 discriminator 2
 2249 0014 7B68     		ldr	r3, [r7, #4]
 2250 0016 1A68     		ldr	r2, [r3]
 2251 0018 7B68     		ldr	r3, [r7, #4]
 2252 001a 5B68     		ldr	r3, [r3, #4]
 2253 001c 40F20000 		movw	r0, #:lower16:.LC0
 2254 0020 C0F20000 		movt	r0, #:upper16:.LC0
 2255 0024 1146     		mov	r1, r2
 2256 0026 1A46     		mov	r2, r3
 2257 0028 FFF7FEFF 		bl	printf
  42:src/modbus.c  **** 		printf("Key 0x%x --> Data 0x%x\n", s->key, s->value);
 2258              		.loc 1 42 0 discriminator 2
 2259 002c 7B68     		ldr	r3, [r7, #4]
 2260 002e 1B69     		ldr	r3, [r3, #16]
 2261 0030 7B60     		str	r3, [r7, #4]
 2262              	.L57:
  42:src/modbus.c  **** 		printf("Key 0x%x --> Data 0x%x\n", s->key, s->value);
 2263              		.loc 1 42 0 is_stmt 0 discriminator 1
 2264 0032 7B68     		ldr	r3, [r7, #4]
 2265 0034 002B     		cmp	r3, #0
 2266 0036 EDD1     		bne	.L58
  44:src/modbus.c  **** 	}
  45:src/modbus.c  **** }
 2267              		.loc 1 45 0 is_stmt 1
 2268 0038 0837     		adds	r7, r7, #8
 2269 003a BD46     		mov	sp, r7
 2270              		@ sp needed
 2271 003c 80BD     		pop	{r7, pc}
 2272              		.cfi_endproc
 2273              	.LFE1:
 2275 003e 00BF     		.section	.text.getData,"ax",%progbits
 2276              		.align	2
 2277              		.global	getData
 2278              		.thumb
 2279              		.thumb_func
 2281              	getData:
 2282              	.LFB2:
  46:src/modbus.c  **** 
  47:src/modbus.c  **** //Fetch the data from HASH MAP
  48:src/modbus.c  **** struct heapStruct *getData(int key) {
 2283              		.loc 1 48 0
 2284              		.cfi_startproc
 2285              		@ args = 0, pretend = 0, frame = 40
 2286              		@ frame_needed = 1, uses_anonymous_args = 0
 2287 0000 80B5     		push	{r7, lr}
 2288              	.LCFI6:
 2289              		.cfi_def_cfa_offset 8
 2290              		.cfi_offset 7, -8
 2291              		.cfi_offset 14, -4
 2292 0002 8AB0     		sub	sp, sp, #40
 2293              	.LCFI7:
 2294              		.cfi_def_cfa_offset 48
 2295 0004 00AF     		add	r7, sp, #0
 2296              	.LCFI8:
 2297              		.cfi_def_cfa_register 7
 2298 0006 7860     		str	r0, [r7, #4]
 2299              	.LBB7:
  49:src/modbus.c  **** 	struct heapStruct *s;
  50:src/modbus.c  **** 	HASH_FIND_INT( users, &key, s);
 2300              		.loc 1 50 0
 2301 0008 0023     		movs	r3, #0
 2302 000a 7B62     		str	r3, [r7, #36]
 2303 000c 40F20003 		movw	r3, #:lower16:users
 2304 0010 C0F20003 		movt	r3, #:upper16:users
 2305 0014 1B68     		ldr	r3, [r3]
 2306 0016 002B     		cmp	r3, #0
 2307 0018 00F00E82 		beq	.L60
 2308              	.LBB8:
 2309              		.loc 1 50 0 is_stmt 0 discriminator 1
 2310 001c 3B1D     		adds	r3, r7, #4
 2311 001e 3B61     		str	r3, [r7, #16]
 2312 0020 4BF6EF63 		movw	r3, #48879
 2313 0024 CFF6ED63 		movt	r3, 65261
 2314 0028 3B62     		str	r3, [r7, #32]
 2315 002a 47F6B913 		movw	r3, #31161
 2316 002e C9F63763 		movt	r3, 40503
 2317 0032 BB61     		str	r3, [r7, #24]
 2318 0034 BB69     		ldr	r3, [r7, #24]
 2319 0036 FB61     		str	r3, [r7, #28]
 2320 0038 0423     		movs	r3, #4
 2321 003a 7B61     		str	r3, [r7, #20]
 2322 003c BBE0     		b	.L61
 2323              	.L62:
 2324              		.loc 1 50 0 discriminator 2
 2325 003e 3B69     		ldr	r3, [r7, #16]
 2326 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2327 0042 1A46     		mov	r2, r3
 2328 0044 3B69     		ldr	r3, [r7, #16]
 2329 0046 0133     		adds	r3, r3, #1
 2330 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2331 004a 1B02     		lsls	r3, r3, #8
 2332 004c 1A44     		add	r2, r2, r3
 2333 004e 3B69     		ldr	r3, [r7, #16]
 2334 0050 0233     		adds	r3, r3, #2
 2335 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2336 0054 1B04     		lsls	r3, r3, #16
 2337 0056 1A44     		add	r2, r2, r3
 2338 0058 3B69     		ldr	r3, [r7, #16]
 2339 005a 0333     		adds	r3, r3, #3
 2340 005c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2341 005e 1B06     		lsls	r3, r3, #24
 2342 0060 1344     		add	r3, r3, r2
 2343 0062 FA69     		ldr	r2, [r7, #28]
 2344 0064 1344     		add	r3, r3, r2
 2345 0066 FB61     		str	r3, [r7, #28]
 2346 0068 3B69     		ldr	r3, [r7, #16]
 2347 006a 0433     		adds	r3, r3, #4
 2348 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2349 006e 1A46     		mov	r2, r3
 2350 0070 3B69     		ldr	r3, [r7, #16]
 2351 0072 0533     		adds	r3, r3, #5
 2352 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2353 0076 1B02     		lsls	r3, r3, #8
 2354 0078 1A44     		add	r2, r2, r3
 2355 007a 3B69     		ldr	r3, [r7, #16]
 2356 007c 0633     		adds	r3, r3, #6
 2357 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2358 0080 1B04     		lsls	r3, r3, #16
 2359 0082 1A44     		add	r2, r2, r3
 2360 0084 3B69     		ldr	r3, [r7, #16]
 2361 0086 0733     		adds	r3, r3, #7
 2362 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2363 008a 1B06     		lsls	r3, r3, #24
 2364 008c 1344     		add	r3, r3, r2
 2365 008e BA69     		ldr	r2, [r7, #24]
 2366 0090 1344     		add	r3, r3, r2
 2367 0092 BB61     		str	r3, [r7, #24]
 2368 0094 3B69     		ldr	r3, [r7, #16]
 2369 0096 0833     		adds	r3, r3, #8
 2370 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2371 009a 1A46     		mov	r2, r3
 2372 009c 3B69     		ldr	r3, [r7, #16]
 2373 009e 0933     		adds	r3, r3, #9
 2374 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2375 00a2 1B02     		lsls	r3, r3, #8
 2376 00a4 1A44     		add	r2, r2, r3
 2377 00a6 3B69     		ldr	r3, [r7, #16]
 2378 00a8 0A33     		adds	r3, r3, #10
 2379 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2380 00ac 1B04     		lsls	r3, r3, #16
 2381 00ae 1A44     		add	r2, r2, r3
 2382 00b0 3B69     		ldr	r3, [r7, #16]
 2383 00b2 0B33     		adds	r3, r3, #11
 2384 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2385 00b6 1B06     		lsls	r3, r3, #24
 2386 00b8 1344     		add	r3, r3, r2
 2387 00ba 3A6A     		ldr	r2, [r7, #32]
 2388 00bc 1344     		add	r3, r3, r2
 2389 00be 3B62     		str	r3, [r7, #32]
 2390 00c0 FA69     		ldr	r2, [r7, #28]
 2391 00c2 BB69     		ldr	r3, [r7, #24]
 2392 00c4 D31A     		subs	r3, r2, r3
 2393 00c6 FB61     		str	r3, [r7, #28]
 2394 00c8 FA69     		ldr	r2, [r7, #28]
 2395 00ca 3B6A     		ldr	r3, [r7, #32]
 2396 00cc D31A     		subs	r3, r2, r3
 2397 00ce FB61     		str	r3, [r7, #28]
 2398 00d0 3B6A     		ldr	r3, [r7, #32]
 2399 00d2 5B0B     		lsrs	r3, r3, #13
 2400 00d4 FA69     		ldr	r2, [r7, #28]
 2401 00d6 5340     		eors	r3, r3, r2
 2402 00d8 FB61     		str	r3, [r7, #28]
 2403 00da BA69     		ldr	r2, [r7, #24]
 2404 00dc 3B6A     		ldr	r3, [r7, #32]
 2405 00de D31A     		subs	r3, r2, r3
 2406 00e0 BB61     		str	r3, [r7, #24]
 2407 00e2 BA69     		ldr	r2, [r7, #24]
 2408 00e4 FB69     		ldr	r3, [r7, #28]
 2409 00e6 D31A     		subs	r3, r2, r3
 2410 00e8 BB61     		str	r3, [r7, #24]
 2411 00ea FB69     		ldr	r3, [r7, #28]
 2412 00ec 1B02     		lsls	r3, r3, #8
 2413 00ee BA69     		ldr	r2, [r7, #24]
 2414 00f0 5340     		eors	r3, r3, r2
 2415 00f2 BB61     		str	r3, [r7, #24]
 2416 00f4 3A6A     		ldr	r2, [r7, #32]
 2417 00f6 FB69     		ldr	r3, [r7, #28]
 2418 00f8 D31A     		subs	r3, r2, r3
 2419 00fa 3B62     		str	r3, [r7, #32]
 2420 00fc 3A6A     		ldr	r2, [r7, #32]
 2421 00fe BB69     		ldr	r3, [r7, #24]
 2422 0100 D31A     		subs	r3, r2, r3
 2423 0102 3B62     		str	r3, [r7, #32]
 2424 0104 BB69     		ldr	r3, [r7, #24]
 2425 0106 5B0B     		lsrs	r3, r3, #13
 2426 0108 3A6A     		ldr	r2, [r7, #32]
 2427 010a 5340     		eors	r3, r3, r2
 2428 010c 3B62     		str	r3, [r7, #32]
 2429 010e FA69     		ldr	r2, [r7, #28]
 2430 0110 BB69     		ldr	r3, [r7, #24]
 2431 0112 D31A     		subs	r3, r2, r3
 2432 0114 FB61     		str	r3, [r7, #28]
 2433 0116 FA69     		ldr	r2, [r7, #28]
 2434 0118 3B6A     		ldr	r3, [r7, #32]
 2435 011a D31A     		subs	r3, r2, r3
 2436 011c FB61     		str	r3, [r7, #28]
 2437 011e 3B6A     		ldr	r3, [r7, #32]
 2438 0120 1B0B     		lsrs	r3, r3, #12
 2439 0122 FA69     		ldr	r2, [r7, #28]
 2440 0124 5340     		eors	r3, r3, r2
 2441 0126 FB61     		str	r3, [r7, #28]
 2442 0128 BA69     		ldr	r2, [r7, #24]
 2443 012a 3B6A     		ldr	r3, [r7, #32]
 2444 012c D31A     		subs	r3, r2, r3
 2445 012e BB61     		str	r3, [r7, #24]
 2446 0130 BA69     		ldr	r2, [r7, #24]
 2447 0132 FB69     		ldr	r3, [r7, #28]
 2448 0134 D31A     		subs	r3, r2, r3
 2449 0136 BB61     		str	r3, [r7, #24]
 2450 0138 FB69     		ldr	r3, [r7, #28]
 2451 013a 1B04     		lsls	r3, r3, #16
 2452 013c BA69     		ldr	r2, [r7, #24]
 2453 013e 5340     		eors	r3, r3, r2
 2454 0140 BB61     		str	r3, [r7, #24]
 2455 0142 3A6A     		ldr	r2, [r7, #32]
 2456 0144 FB69     		ldr	r3, [r7, #28]
 2457 0146 D31A     		subs	r3, r2, r3
 2458 0148 3B62     		str	r3, [r7, #32]
 2459 014a 3A6A     		ldr	r2, [r7, #32]
 2460 014c BB69     		ldr	r3, [r7, #24]
 2461 014e D31A     		subs	r3, r2, r3
 2462 0150 3B62     		str	r3, [r7, #32]
 2463 0152 BB69     		ldr	r3, [r7, #24]
 2464 0154 5B09     		lsrs	r3, r3, #5
 2465 0156 3A6A     		ldr	r2, [r7, #32]
 2466 0158 5340     		eors	r3, r3, r2
 2467 015a 3B62     		str	r3, [r7, #32]
 2468 015c FA69     		ldr	r2, [r7, #28]
 2469 015e BB69     		ldr	r3, [r7, #24]
 2470 0160 D31A     		subs	r3, r2, r3
 2471 0162 FB61     		str	r3, [r7, #28]
 2472 0164 FA69     		ldr	r2, [r7, #28]
 2473 0166 3B6A     		ldr	r3, [r7, #32]
 2474 0168 D31A     		subs	r3, r2, r3
 2475 016a FB61     		str	r3, [r7, #28]
 2476 016c 3B6A     		ldr	r3, [r7, #32]
 2477 016e DB08     		lsrs	r3, r3, #3
 2478 0170 FA69     		ldr	r2, [r7, #28]
 2479 0172 5340     		eors	r3, r3, r2
 2480 0174 FB61     		str	r3, [r7, #28]
 2481 0176 BA69     		ldr	r2, [r7, #24]
 2482 0178 3B6A     		ldr	r3, [r7, #32]
 2483 017a D31A     		subs	r3, r2, r3
 2484 017c BB61     		str	r3, [r7, #24]
 2485 017e BA69     		ldr	r2, [r7, #24]
 2486 0180 FB69     		ldr	r3, [r7, #28]
 2487 0182 D31A     		subs	r3, r2, r3
 2488 0184 BB61     		str	r3, [r7, #24]
 2489 0186 FB69     		ldr	r3, [r7, #28]
 2490 0188 9B02     		lsls	r3, r3, #10
 2491 018a BA69     		ldr	r2, [r7, #24]
 2492 018c 5340     		eors	r3, r3, r2
 2493 018e BB61     		str	r3, [r7, #24]
 2494 0190 3A6A     		ldr	r2, [r7, #32]
 2495 0192 FB69     		ldr	r3, [r7, #28]
 2496 0194 D31A     		subs	r3, r2, r3
 2497 0196 3B62     		str	r3, [r7, #32]
 2498 0198 3A6A     		ldr	r2, [r7, #32]
 2499 019a BB69     		ldr	r3, [r7, #24]
 2500 019c D31A     		subs	r3, r2, r3
 2501 019e 3B62     		str	r3, [r7, #32]
 2502 01a0 BB69     		ldr	r3, [r7, #24]
 2503 01a2 DB0B     		lsrs	r3, r3, #15
 2504 01a4 3A6A     		ldr	r2, [r7, #32]
 2505 01a6 5340     		eors	r3, r3, r2
 2506 01a8 3B62     		str	r3, [r7, #32]
 2507 01aa 3B69     		ldr	r3, [r7, #16]
 2508 01ac 0C33     		adds	r3, r3, #12
 2509 01ae 3B61     		str	r3, [r7, #16]
 2510 01b0 7B69     		ldr	r3, [r7, #20]
 2511 01b2 0C3B     		subs	r3, r3, #12
 2512 01b4 7B61     		str	r3, [r7, #20]
 2513              	.L61:
 2514              		.loc 1 50 0 discriminator 1
 2515 01b6 7B69     		ldr	r3, [r7, #20]
 2516 01b8 0B2B     		cmp	r3, #11
 2517 01ba 3FF640AF 		bhi	.L62
 2518              		.loc 1 50 0 discriminator 3
 2519 01be 3B6A     		ldr	r3, [r7, #32]
 2520 01c0 0433     		adds	r3, r3, #4
 2521 01c2 3B62     		str	r3, [r7, #32]
 2522 01c4 7B69     		ldr	r3, [r7, #20]
 2523 01c6 013B     		subs	r3, r3, #1
 2524 01c8 0A2B     		cmp	r3, #10
 2525 01ca 63D8     		bhi	.L63
 2526 01cc 01A2     		adr	r2, .L65
 2527 01ce 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2528 01d2 00BF     		.p2align 2
 2529              	.L65:
 2530 01d4 8B020000 		.word	.L64+1
 2531 01d8 7D020000 		.word	.L66+1
 2532 01dc 6F020000 		.word	.L67+1
 2533 01e0 61020000 		.word	.L68+1
 2534 01e4 55020000 		.word	.L69+1
 2535 01e8 47020000 		.word	.L70+1
 2536 01ec 39020000 		.word	.L71+1
 2537 01f0 2B020000 		.word	.L72+1
 2538 01f4 1D020000 		.word	.L73+1
 2539 01f8 0F020000 		.word	.L74+1
 2540 01fc 01020000 		.word	.L75+1
 2541              	.L75:
 2542              		.loc 1 50 0 discriminator 12
 2543 0200 3B69     		ldr	r3, [r7, #16]
 2544 0202 0A33     		adds	r3, r3, #10
 2545 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2546 0206 1B06     		lsls	r3, r3, #24
 2547 0208 3A6A     		ldr	r2, [r7, #32]
 2548 020a 1344     		add	r3, r3, r2
 2549 020c 3B62     		str	r3, [r7, #32]
 2550              	.L74:
 2551              		.loc 1 50 0 discriminator 11
 2552 020e 3B69     		ldr	r3, [r7, #16]
 2553 0210 0933     		adds	r3, r3, #9
 2554 0212 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2555 0214 1B04     		lsls	r3, r3, #16
 2556 0216 3A6A     		ldr	r2, [r7, #32]
 2557 0218 1344     		add	r3, r3, r2
 2558 021a 3B62     		str	r3, [r7, #32]
 2559              	.L73:
 2560              		.loc 1 50 0 discriminator 10
 2561 021c 3B69     		ldr	r3, [r7, #16]
 2562 021e 0833     		adds	r3, r3, #8
 2563 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2564 0222 1B02     		lsls	r3, r3, #8
 2565 0224 3A6A     		ldr	r2, [r7, #32]
 2566 0226 1344     		add	r3, r3, r2
 2567 0228 3B62     		str	r3, [r7, #32]
 2568              	.L72:
 2569              		.loc 1 50 0 discriminator 9
 2570 022a 3B69     		ldr	r3, [r7, #16]
 2571 022c 0733     		adds	r3, r3, #7
 2572 022e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2573 0230 1B06     		lsls	r3, r3, #24
 2574 0232 BA69     		ldr	r2, [r7, #24]
 2575 0234 1344     		add	r3, r3, r2
 2576 0236 BB61     		str	r3, [r7, #24]
 2577              	.L71:
 2578              		.loc 1 50 0 discriminator 8
 2579 0238 3B69     		ldr	r3, [r7, #16]
 2580 023a 0633     		adds	r3, r3, #6
 2581 023c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2582 023e 1B04     		lsls	r3, r3, #16
 2583 0240 BA69     		ldr	r2, [r7, #24]
 2584 0242 1344     		add	r3, r3, r2
 2585 0244 BB61     		str	r3, [r7, #24]
 2586              	.L70:
 2587              		.loc 1 50 0 discriminator 7
 2588 0246 3B69     		ldr	r3, [r7, #16]
 2589 0248 0533     		adds	r3, r3, #5
 2590 024a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2591 024c 1B02     		lsls	r3, r3, #8
 2592 024e BA69     		ldr	r2, [r7, #24]
 2593 0250 1344     		add	r3, r3, r2
 2594 0252 BB61     		str	r3, [r7, #24]
 2595              	.L69:
 2596              		.loc 1 50 0 discriminator 6
 2597 0254 3B69     		ldr	r3, [r7, #16]
 2598 0256 0433     		adds	r3, r3, #4
 2599 0258 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2600 025a BA69     		ldr	r2, [r7, #24]
 2601 025c 1344     		add	r3, r3, r2
 2602 025e BB61     		str	r3, [r7, #24]
 2603              	.L68:
 2604              		.loc 1 50 0 discriminator 5
 2605 0260 3B69     		ldr	r3, [r7, #16]
 2606 0262 0333     		adds	r3, r3, #3
 2607 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2608 0266 1B06     		lsls	r3, r3, #24
 2609 0268 FA69     		ldr	r2, [r7, #28]
 2610 026a 1344     		add	r3, r3, r2
 2611 026c FB61     		str	r3, [r7, #28]
 2612              	.L67:
 2613              		.loc 1 50 0 discriminator 4
 2614 026e 3B69     		ldr	r3, [r7, #16]
 2615 0270 0233     		adds	r3, r3, #2
 2616 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2617 0274 1B04     		lsls	r3, r3, #16
 2618 0276 FA69     		ldr	r2, [r7, #28]
 2619 0278 1344     		add	r3, r3, r2
 2620 027a FB61     		str	r3, [r7, #28]
 2621              	.L66:
 2622              		.loc 1 50 0 discriminator 3
 2623 027c 3B69     		ldr	r3, [r7, #16]
 2624 027e 0133     		adds	r3, r3, #1
 2625 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2626 0282 1B02     		lsls	r3, r3, #8
 2627 0284 FA69     		ldr	r2, [r7, #28]
 2628 0286 1344     		add	r3, r3, r2
 2629 0288 FB61     		str	r3, [r7, #28]
 2630              	.L64:
 2631              		.loc 1 50 0 discriminator 2
 2632 028a 3B69     		ldr	r3, [r7, #16]
 2633 028c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2634 028e FA69     		ldr	r2, [r7, #28]
 2635 0290 1344     		add	r3, r3, r2
 2636 0292 FB61     		str	r3, [r7, #28]
 2637              	.L63:
 2638              		.loc 1 50 0 discriminator 1
 2639 0294 FA69     		ldr	r2, [r7, #28]
 2640 0296 BB69     		ldr	r3, [r7, #24]
 2641 0298 D31A     		subs	r3, r2, r3
 2642 029a FB61     		str	r3, [r7, #28]
 2643 029c FA69     		ldr	r2, [r7, #28]
 2644 029e 3B6A     		ldr	r3, [r7, #32]
 2645 02a0 D31A     		subs	r3, r2, r3
 2646 02a2 FB61     		str	r3, [r7, #28]
 2647 02a4 3B6A     		ldr	r3, [r7, #32]
 2648 02a6 5B0B     		lsrs	r3, r3, #13
 2649 02a8 FA69     		ldr	r2, [r7, #28]
 2650 02aa 5340     		eors	r3, r3, r2
 2651 02ac FB61     		str	r3, [r7, #28]
 2652 02ae BA69     		ldr	r2, [r7, #24]
 2653 02b0 3B6A     		ldr	r3, [r7, #32]
 2654 02b2 D31A     		subs	r3, r2, r3
 2655 02b4 BB61     		str	r3, [r7, #24]
 2656 02b6 BA69     		ldr	r2, [r7, #24]
 2657 02b8 FB69     		ldr	r3, [r7, #28]
 2658 02ba D31A     		subs	r3, r2, r3
 2659 02bc BB61     		str	r3, [r7, #24]
 2660 02be FB69     		ldr	r3, [r7, #28]
 2661 02c0 1B02     		lsls	r3, r3, #8
 2662 02c2 BA69     		ldr	r2, [r7, #24]
 2663 02c4 5340     		eors	r3, r3, r2
 2664 02c6 BB61     		str	r3, [r7, #24]
 2665 02c8 3A6A     		ldr	r2, [r7, #32]
 2666 02ca FB69     		ldr	r3, [r7, #28]
 2667 02cc D31A     		subs	r3, r2, r3
 2668 02ce 3B62     		str	r3, [r7, #32]
 2669 02d0 3A6A     		ldr	r2, [r7, #32]
 2670 02d2 BB69     		ldr	r3, [r7, #24]
 2671 02d4 D31A     		subs	r3, r2, r3
 2672 02d6 3B62     		str	r3, [r7, #32]
 2673 02d8 BB69     		ldr	r3, [r7, #24]
 2674 02da 5B0B     		lsrs	r3, r3, #13
 2675 02dc 3A6A     		ldr	r2, [r7, #32]
 2676 02de 5340     		eors	r3, r3, r2
 2677 02e0 3B62     		str	r3, [r7, #32]
 2678 02e2 FA69     		ldr	r2, [r7, #28]
 2679 02e4 BB69     		ldr	r3, [r7, #24]
 2680 02e6 D31A     		subs	r3, r2, r3
 2681 02e8 FB61     		str	r3, [r7, #28]
 2682 02ea FA69     		ldr	r2, [r7, #28]
 2683 02ec 3B6A     		ldr	r3, [r7, #32]
 2684 02ee D31A     		subs	r3, r2, r3
 2685 02f0 FB61     		str	r3, [r7, #28]
 2686 02f2 3B6A     		ldr	r3, [r7, #32]
 2687 02f4 1B0B     		lsrs	r3, r3, #12
 2688 02f6 FA69     		ldr	r2, [r7, #28]
 2689 02f8 5340     		eors	r3, r3, r2
 2690 02fa FB61     		str	r3, [r7, #28]
 2691 02fc BA69     		ldr	r2, [r7, #24]
 2692 02fe 3B6A     		ldr	r3, [r7, #32]
 2693 0300 D31A     		subs	r3, r2, r3
 2694 0302 BB61     		str	r3, [r7, #24]
 2695 0304 BA69     		ldr	r2, [r7, #24]
 2696 0306 FB69     		ldr	r3, [r7, #28]
 2697 0308 D31A     		subs	r3, r2, r3
 2698 030a BB61     		str	r3, [r7, #24]
 2699 030c FB69     		ldr	r3, [r7, #28]
 2700 030e 1B04     		lsls	r3, r3, #16
 2701 0310 BA69     		ldr	r2, [r7, #24]
 2702 0312 5340     		eors	r3, r3, r2
 2703 0314 BB61     		str	r3, [r7, #24]
 2704 0316 3A6A     		ldr	r2, [r7, #32]
 2705 0318 FB69     		ldr	r3, [r7, #28]
 2706 031a D31A     		subs	r3, r2, r3
 2707 031c 3B62     		str	r3, [r7, #32]
 2708 031e 3A6A     		ldr	r2, [r7, #32]
 2709 0320 BB69     		ldr	r3, [r7, #24]
 2710 0322 D31A     		subs	r3, r2, r3
 2711 0324 3B62     		str	r3, [r7, #32]
 2712 0326 BB69     		ldr	r3, [r7, #24]
 2713 0328 5B09     		lsrs	r3, r3, #5
 2714 032a 3A6A     		ldr	r2, [r7, #32]
 2715 032c 5340     		eors	r3, r3, r2
 2716 032e 3B62     		str	r3, [r7, #32]
 2717 0330 FA69     		ldr	r2, [r7, #28]
 2718 0332 BB69     		ldr	r3, [r7, #24]
 2719 0334 D31A     		subs	r3, r2, r3
 2720 0336 FB61     		str	r3, [r7, #28]
 2721 0338 FA69     		ldr	r2, [r7, #28]
 2722 033a 3B6A     		ldr	r3, [r7, #32]
 2723 033c D31A     		subs	r3, r2, r3
 2724 033e FB61     		str	r3, [r7, #28]
 2725 0340 3B6A     		ldr	r3, [r7, #32]
 2726 0342 DB08     		lsrs	r3, r3, #3
 2727 0344 FA69     		ldr	r2, [r7, #28]
 2728 0346 5340     		eors	r3, r3, r2
 2729 0348 FB61     		str	r3, [r7, #28]
 2730 034a BA69     		ldr	r2, [r7, #24]
 2731 034c 3B6A     		ldr	r3, [r7, #32]
 2732 034e D31A     		subs	r3, r2, r3
 2733 0350 BB61     		str	r3, [r7, #24]
 2734 0352 BA69     		ldr	r2, [r7, #24]
 2735 0354 FB69     		ldr	r3, [r7, #28]
 2736 0356 D31A     		subs	r3, r2, r3
 2737 0358 BB61     		str	r3, [r7, #24]
 2738 035a FB69     		ldr	r3, [r7, #28]
 2739 035c 9B02     		lsls	r3, r3, #10
 2740 035e BA69     		ldr	r2, [r7, #24]
 2741 0360 5340     		eors	r3, r3, r2
 2742 0362 BB61     		str	r3, [r7, #24]
 2743 0364 3A6A     		ldr	r2, [r7, #32]
 2744 0366 FB69     		ldr	r3, [r7, #28]
 2745 0368 D31A     		subs	r3, r2, r3
 2746 036a 3B62     		str	r3, [r7, #32]
 2747 036c 3A6A     		ldr	r2, [r7, #32]
 2748 036e BB69     		ldr	r3, [r7, #24]
 2749 0370 D31A     		subs	r3, r2, r3
 2750 0372 3B62     		str	r3, [r7, #32]
 2751 0374 BB69     		ldr	r3, [r7, #24]
 2752 0376 DB0B     		lsrs	r3, r3, #15
 2753 0378 3A6A     		ldr	r2, [r7, #32]
 2754 037a 5340     		eors	r3, r3, r2
 2755 037c 3B62     		str	r3, [r7, #32]
 2756 037e 40F20003 		movw	r3, #:lower16:users
 2757 0382 C0F20003 		movt	r3, #:upper16:users
 2758 0386 1B68     		ldr	r3, [r3]
 2759 0388 9B68     		ldr	r3, [r3, #8]
 2760 038a 5B68     		ldr	r3, [r3, #4]
 2761 038c 5A1E     		subs	r2, r3, #1
 2762 038e 3B6A     		ldr	r3, [r7, #32]
 2763 0390 1340     		ands	r3, r3, r2
 2764 0392 FB60     		str	r3, [r7, #12]
 2765              	.LBE8:
 2766 0394 40F20003 		movw	r3, #:lower16:users
 2767 0398 C0F20003 		movt	r3, #:upper16:users
 2768 039c 1B68     		ldr	r3, [r3]
 2769 039e 9B68     		ldr	r3, [r3, #8]
 2770 03a0 1968     		ldr	r1, [r3]
 2771 03a2 FA68     		ldr	r2, [r7, #12]
 2772 03a4 1346     		mov	r3, r2
 2773 03a6 5B00     		lsls	r3, r3, #1
 2774 03a8 1344     		add	r3, r3, r2
 2775 03aa 9B00     		lsls	r3, r3, #2
 2776 03ac 0B44     		add	r3, r3, r1
 2777 03ae 1B68     		ldr	r3, [r3]
 2778 03b0 002B     		cmp	r3, #0
 2779 03b2 18D0     		beq	.L76
 2780 03b4 40F20003 		movw	r3, #:lower16:users
 2781 03b8 C0F20003 		movt	r3, #:upper16:users
 2782 03bc 1B68     		ldr	r3, [r3]
 2783 03be 9B68     		ldr	r3, [r3, #8]
 2784 03c0 1968     		ldr	r1, [r3]
 2785 03c2 FA68     		ldr	r2, [r7, #12]
 2786 03c4 1346     		mov	r3, r2
 2787 03c6 5B00     		lsls	r3, r3, #1
 2788 03c8 1344     		add	r3, r3, r2
 2789 03ca 9B00     		lsls	r3, r3, #2
 2790 03cc 0B44     		add	r3, r3, r1
 2791 03ce 1A68     		ldr	r2, [r3]
 2792 03d0 40F20003 		movw	r3, #:lower16:users
 2793 03d4 C0F20003 		movt	r3, #:upper16:users
 2794 03d8 1B68     		ldr	r3, [r3]
 2795 03da 9B68     		ldr	r3, [r3, #8]
 2796 03dc 5B69     		ldr	r3, [r3, #20]
 2797 03de 5B42     		negs	r3, r3
 2798 03e0 1344     		add	r3, r3, r2
 2799 03e2 7B62     		str	r3, [r7, #36]
 2800 03e4 25E0     		b	.L78
 2801              	.L76:
 2802              		.loc 1 50 0 discriminator 2
 2803 03e6 0023     		movs	r3, #0
 2804 03e8 7B62     		str	r3, [r7, #36]
 2805 03ea 22E0     		b	.L78
 2806              	.L81:
 2807 03ec 7B6A     		ldr	r3, [r7, #36]
 2808 03ee 1B6A     		ldr	r3, [r3, #32]
 2809 03f0 042B     		cmp	r3, #4
 2810 03f2 0BD1     		bne	.L79
 2811              		.loc 1 50 0 discriminator 1
 2812 03f4 7B6A     		ldr	r3, [r7, #36]
 2813 03f6 DA69     		ldr	r2, [r3, #28]
 2814 03f8 3B1D     		adds	r3, r7, #4
 2815 03fa 1046     		mov	r0, r2
 2816 03fc 1946     		mov	r1, r3
 2817 03fe 0422     		movs	r2, #4
 2818 0400 FFF7FEFF 		bl	memcmp
 2819 0404 0346     		mov	r3, r0
 2820 0406 002B     		cmp	r3, #0
 2821 0408 00D1     		bne	.L79
 2822 040a 15E0     		b	.L60
 2823              	.L79:
 2824              		.loc 1 50 0 discriminator 2
 2825 040c 7B6A     		ldr	r3, [r7, #36]
 2826 040e 9B69     		ldr	r3, [r3, #24]
 2827 0410 002B     		cmp	r3, #0
 2828 0412 0CD0     		beq	.L80
 2829              		.loc 1 50 0 discriminator 1
 2830 0414 7B6A     		ldr	r3, [r7, #36]
 2831 0416 9A69     		ldr	r2, [r3, #24]
 2832 0418 40F20003 		movw	r3, #:lower16:users
 2833 041c C0F20003 		movt	r3, #:upper16:users
 2834 0420 1B68     		ldr	r3, [r3]
 2835 0422 9B68     		ldr	r3, [r3, #8]
 2836 0424 5B69     		ldr	r3, [r3, #20]
 2837 0426 5B42     		negs	r3, r3
 2838 0428 1344     		add	r3, r3, r2
 2839 042a 7B62     		str	r3, [r7, #36]
 2840 042c 01E0     		b	.L78
 2841              	.L80:
 2842              		.loc 1 50 0 discriminator 2
 2843 042e 0023     		movs	r3, #0
 2844 0430 7B62     		str	r3, [r7, #36]
 2845              	.L78:
 2846              		.loc 1 50 0 discriminator 1
 2847 0432 7B6A     		ldr	r3, [r7, #36]
 2848 0434 002B     		cmp	r3, #0
 2849 0436 D9D1     		bne	.L81
 2850              	.L60:
 2851              	.LBE7:
  51:src/modbus.c  **** 	//s: output pointer
  52:src/modbus.c  **** 	//printf("Data: 0x%x\n", s ? s->name : "unknown");
  53:src/modbus.c  **** 	return s;
 2852              		.loc 1 53 0 is_stmt 1
 2853 0438 7B6A     		ldr	r3, [r7, #36]
  54:src/modbus.c  **** }
 2854              		.loc 1 54 0
 2855 043a 1846     		mov	r0, r3
 2856 043c 2837     		adds	r7, r7, #40
 2857 043e BD46     		mov	sp, r7
 2858              		@ sp needed
 2859 0440 80BD     		pop	{r7, pc}
 2860              		.cfi_endproc
 2861              	.LFE2:
 2863 0442 00BF     		.section	.text.validateSlaveID,"ax",%progbits
 2864              		.align	2
 2865              		.global	validateSlaveID
 2866              		.thumb
 2867              		.thumb_func
 2869              	validateSlaveID:
 2870              	.LFB3:
  55:src/modbus.c  **** 
  56:src/modbus.c  **** // MODBUS :
  57:src/modbus.c  **** 
  58:src/modbus.c  **** //Validating the slaveID
  59:src/modbus.c  **** uint32_t validateSlaveID(uint32_t *qPacket, uint32_t deviceID) {
 2871              		.loc 1 59 0
 2872              		.cfi_startproc
 2873              		@ args = 0, pretend = 0, frame = 8
 2874              		@ frame_needed = 1, uses_anonymous_args = 0
 2875              		@ link register save eliminated.
 2876 0000 80B4     		push	{r7}
 2877              	.LCFI9:
 2878              		.cfi_def_cfa_offset 4
 2879              		.cfi_offset 7, -4
 2880 0002 83B0     		sub	sp, sp, #12
 2881              	.LCFI10:
 2882              		.cfi_def_cfa_offset 16
 2883 0004 00AF     		add	r7, sp, #0
 2884              	.LCFI11:
 2885              		.cfi_def_cfa_register 7
 2886 0006 7860     		str	r0, [r7, #4]
 2887 0008 3960     		str	r1, [r7]
  60:src/modbus.c  **** 	if (*qPacket == deviceID) {
 2888              		.loc 1 60 0
 2889 000a 7B68     		ldr	r3, [r7, #4]
 2890 000c 1A68     		ldr	r2, [r3]
 2891 000e 3B68     		ldr	r3, [r7]
 2892 0010 9A42     		cmp	r2, r3
 2893 0012 14D1     		bne	.L84
  61:src/modbus.c  **** 
  62:src/modbus.c  **** 		//Copy deviceID into repose packet
  63:src/modbus.c  **** 		*rPacket = *qPacket;
 2894              		.loc 1 63 0
 2895 0014 40F20003 		movw	r3, #:lower16:rPacket
 2896 0018 C0F20003 		movt	r3, #:upper16:rPacket
 2897 001c 1B68     		ldr	r3, [r3]
 2898 001e 7A68     		ldr	r2, [r7, #4]
 2899 0020 1268     		ldr	r2, [r2]
 2900 0022 1A60     		str	r2, [r3]
  64:src/modbus.c  **** 		//printf("%d\n",*rPacket);
  65:src/modbus.c  **** 		rPacket++;
 2901              		.loc 1 65 0
 2902 0024 40F20003 		movw	r3, #:lower16:rPacket
 2903 0028 C0F20003 		movt	r3, #:upper16:rPacket
 2904 002c 1B68     		ldr	r3, [r3]
 2905 002e 1A1D     		adds	r2, r3, #4
 2906 0030 40F20003 		movw	r3, #:lower16:rPacket
 2907 0034 C0F20003 		movt	r3, #:upper16:rPacket
 2908 0038 1A60     		str	r2, [r3]
  66:src/modbus.c  **** 		return 1;
 2909              		.loc 1 66 0
 2910 003a 0123     		movs	r3, #1
 2911 003c 00E0     		b	.L85
 2912              	.L84:
  67:src/modbus.c  **** 	} else {
  68:src/modbus.c  **** 		return 0;
 2913              		.loc 1 68 0
 2914 003e 0023     		movs	r3, #0
 2915              	.L85:
  69:src/modbus.c  **** 	}
  70:src/modbus.c  **** }
 2916              		.loc 1 70 0
 2917 0040 1846     		mov	r0, r3
 2918 0042 0C37     		adds	r7, r7, #12
 2919 0044 BD46     		mov	sp, r7
 2920              		@ sp needed
 2921 0046 5DF8047B 		ldr	r7, [sp], #4
 2922 004a 7047     		bx	lr
 2923              		.cfi_endproc
 2924              	.LFE3:
 2926              		.section	.text.validateCrc,"ax",%progbits
 2927              		.align	2
 2928              		.global	validateCrc
 2929              		.thumb
 2930              		.thumb_func
 2932              	validateCrc:
 2933              	.LFB4:
  71:src/modbus.c  **** 
  72:src/modbus.c  **** uint32_t validateCrc(uint32_t *qPacket,uint32_t usDataLen,uint32_t *tempCRC){
 2934              		.loc 1 72 0
 2935              		.cfi_startproc
 2936              		@ args = 0, pretend = 0, frame = 32
 2937              		@ frame_needed = 1, uses_anonymous_args = 0
 2938              		@ link register save eliminated.
 2939 0000 80B4     		push	{r7}
 2940              	.LCFI12:
 2941              		.cfi_def_cfa_offset 4
 2942              		.cfi_offset 7, -4
 2943 0002 89B0     		sub	sp, sp, #36
 2944              	.LCFI13:
 2945              		.cfi_def_cfa_offset 40
 2946 0004 00AF     		add	r7, sp, #0
 2947              	.LCFI14:
 2948              		.cfi_def_cfa_register 7
 2949 0006 F860     		str	r0, [r7, #12]
 2950 0008 B960     		str	r1, [r7, #8]
 2951 000a 7A60     		str	r2, [r7, #4]
  73:src/modbus.c  **** 
  74:src/modbus.c  **** 	/*//CRC 16
  75:src/modbus.c  **** 	uint32_t CRC16(uint32_t *qPacket, uint32_t usDataLen) {*/
  76:src/modbus.c  **** 
  77:src/modbus.c  **** 		uint32_t ucrcHi = 0xFF;
 2952              		.loc 1 77 0
 2953 000c FF23     		movs	r3, #255
 2954 000e FB61     		str	r3, [r7, #28]
  78:src/modbus.c  **** 		uint32_t ucrcLo = 0xFF;
 2955              		.loc 1 78 0
 2956 0010 FF23     		movs	r3, #255
 2957 0012 BB61     		str	r3, [r7, #24]
  79:src/modbus.c  **** 		uint32_t iIndex;
  80:src/modbus.c  **** 
  81:src/modbus.c  **** 		while(usDataLen--){
 2958              		.loc 1 81 0
 2959 0014 18E0     		b	.L87
 2960              	.L88:
  82:src/modbus.c  **** 			iIndex = ucrcLo ^ *(qPacket++);
 2961              		.loc 1 82 0
 2962 0016 FB68     		ldr	r3, [r7, #12]
 2963 0018 1A1D     		adds	r2, r3, #4
 2964 001a FA60     		str	r2, [r7, #12]
 2965 001c 1A68     		ldr	r2, [r3]
 2966 001e BB69     		ldr	r3, [r7, #24]
 2967 0020 5340     		eors	r3, r3, r2
 2968 0022 7B61     		str	r3, [r7, #20]
  83:src/modbus.c  **** 			ucrcLo = ucrcHi ^ crcHi[iIndex];
 2969              		.loc 1 83 0
 2970 0024 40F20003 		movw	r3, #:lower16:crcHi
 2971 0028 C0F20003 		movt	r3, #:upper16:crcHi
 2972 002c 7A69     		ldr	r2, [r7, #20]
 2973 002e 53F82220 		ldr	r2, [r3, r2, lsl #2]
 2974 0032 FB69     		ldr	r3, [r7, #28]
 2975 0034 5340     		eors	r3, r3, r2
 2976 0036 BB61     		str	r3, [r7, #24]
  84:src/modbus.c  **** 			ucrcHi = crcLo[iIndex];
 2977              		.loc 1 84 0
 2978 0038 40F20003 		movw	r3, #:lower16:crcLo
 2979 003c C0F20003 		movt	r3, #:upper16:crcLo
 2980 0040 7A69     		ldr	r2, [r7, #20]
 2981 0042 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2982 0046 FB61     		str	r3, [r7, #28]
 2983              	.L87:
  81:src/modbus.c  **** 			iIndex = ucrcLo ^ *(qPacket++);
 2984              		.loc 1 81 0 discriminator 1
 2985 0048 BB68     		ldr	r3, [r7, #8]
 2986 004a 5A1E     		subs	r2, r3, #1
 2987 004c BA60     		str	r2, [r7, #8]
 2988 004e 002B     		cmp	r3, #0
 2989 0050 E1D1     		bne	.L88
  85:src/modbus.c  **** 		}
  86:src/modbus.c  **** 		//ucrcHi = ucrcHi << 8 | ucrcLo;
  87:src/modbus.c  **** 
  88:src/modbus.c  **** 		if (ucrcLo == *tempCRC++){
 2990              		.loc 1 88 0
 2991 0052 7B68     		ldr	r3, [r7, #4]
 2992 0054 1A1D     		adds	r2, r3, #4
 2993 0056 7A60     		str	r2, [r7, #4]
 2994 0058 1A68     		ldr	r2, [r3]
 2995 005a BB69     		ldr	r3, [r7, #24]
 2996 005c 9A42     		cmp	r2, r3
 2997 005e 06D1     		bne	.L89
  89:src/modbus.c  **** 			if(ucrcHi ==*tempCRC){
 2998              		.loc 1 89 0
 2999 0060 7B68     		ldr	r3, [r7, #4]
 3000 0062 1A68     		ldr	r2, [r3]
 3001 0064 FB69     		ldr	r3, [r7, #28]
 3002 0066 9A42     		cmp	r2, r3
 3003 0068 01D1     		bne	.L89
  90:src/modbus.c  **** 				return 1;
 3004              		.loc 1 90 0
 3005 006a 0123     		movs	r3, #1
 3006 006c 00E0     		b	.L90
 3007              	.L89:
  91:src/modbus.c  **** 			}
  92:src/modbus.c  **** 		}
  93:src/modbus.c  **** 		return 0;
 3008              		.loc 1 93 0
 3009 006e 0023     		movs	r3, #0
 3010              	.L90:
  94:src/modbus.c  **** }
 3011              		.loc 1 94 0
 3012 0070 1846     		mov	r0, r3
 3013 0072 2437     		adds	r7, r7, #36
 3014 0074 BD46     		mov	sp, r7
 3015              		@ sp needed
 3016 0076 5DF8047B 		ldr	r7, [sp], #4
 3017 007a 7047     		bx	lr
 3018              		.cfi_endproc
 3019              	.LFE4:
 3021              		.section	.text.calculateOutputCrc,"ax",%progbits
 3022              		.align	2
 3023              		.global	calculateOutputCrc
 3024              		.thumb
 3025              		.thumb_func
 3027              	calculateOutputCrc:
 3028              	.LFB5:
  95:src/modbus.c  **** 
  96:src/modbus.c  **** uint32_t calculateOutputCrc(uint32_t *tempRpacket,uint32_t rPacketLen){
 3029              		.loc 1 96 0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 24
 3032              		@ frame_needed = 1, uses_anonymous_args = 0
 3033              		@ link register save eliminated.
 3034 0000 80B4     		push	{r7}
 3035              	.LCFI15:
 3036              		.cfi_def_cfa_offset 4
 3037              		.cfi_offset 7, -4
 3038 0002 87B0     		sub	sp, sp, #28
 3039              	.LCFI16:
 3040              		.cfi_def_cfa_offset 32
 3041 0004 00AF     		add	r7, sp, #0
 3042              	.LCFI17:
 3043              		.cfi_def_cfa_register 7
 3044 0006 7860     		str	r0, [r7, #4]
 3045 0008 3960     		str	r1, [r7]
  97:src/modbus.c  **** 	
  98:src/modbus.c  **** 	uint32_t ucrcHi = 0xFF;
 3046              		.loc 1 98 0
 3047 000a FF23     		movs	r3, #255
 3048 000c 7B61     		str	r3, [r7, #20]
  99:src/modbus.c  **** 	uint32_t ucrcLo = 0xFF;
 3049              		.loc 1 99 0
 3050 000e FF23     		movs	r3, #255
 3051 0010 3B61     		str	r3, [r7, #16]
 100:src/modbus.c  **** 	uint32_t iIndex;
 101:src/modbus.c  **** 
 102:src/modbus.c  **** 	while(rPacketLen--){
 3052              		.loc 1 102 0
 3053 0012 18E0     		b	.L92
 3054              	.L93:
 103:src/modbus.c  **** 		iIndex = ucrcLo ^ *(tempRpacket++);
 3055              		.loc 1 103 0
 3056 0014 7B68     		ldr	r3, [r7, #4]
 3057 0016 1A1D     		adds	r2, r3, #4
 3058 0018 7A60     		str	r2, [r7, #4]
 3059 001a 1A68     		ldr	r2, [r3]
 3060 001c 3B69     		ldr	r3, [r7, #16]
 3061 001e 5340     		eors	r3, r3, r2
 3062 0020 FB60     		str	r3, [r7, #12]
 104:src/modbus.c  **** 		ucrcLo = ucrcHi ^ crcHi[iIndex];
 3063              		.loc 1 104 0
 3064 0022 40F20003 		movw	r3, #:lower16:crcHi
 3065 0026 C0F20003 		movt	r3, #:upper16:crcHi
 3066 002a FA68     		ldr	r2, [r7, #12]
 3067 002c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 3068 0030 7B69     		ldr	r3, [r7, #20]
 3069 0032 5340     		eors	r3, r3, r2
 3070 0034 3B61     		str	r3, [r7, #16]
 105:src/modbus.c  **** 		ucrcHi = crcLo[iIndex];
 3071              		.loc 1 105 0
 3072 0036 40F20003 		movw	r3, #:lower16:crcLo
 3073 003a C0F20003 		movt	r3, #:upper16:crcLo
 3074 003e FA68     		ldr	r2, [r7, #12]
 3075 0040 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3076 0044 7B61     		str	r3, [r7, #20]
 3077              	.L92:
 102:src/modbus.c  **** 		iIndex = ucrcLo ^ *(tempRpacket++);
 3078              		.loc 1 102 0 discriminator 1
 3079 0046 3B68     		ldr	r3, [r7]
 3080 0048 5A1E     		subs	r2, r3, #1
 3081 004a 3A60     		str	r2, [r7]
 3082 004c 002B     		cmp	r3, #0
 3083 004e E1D1     		bne	.L93
 106:src/modbus.c  **** 	}
 107:src/modbus.c  **** 	*rPacket++ = ucrcHi;
 3084              		.loc 1 107 0
 3085 0050 40F20003 		movw	r3, #:lower16:rPacket
 3086 0054 C0F20003 		movt	r3, #:upper16:rPacket
 3087 0058 1B68     		ldr	r3, [r3]
 3088 005a 1A46     		mov	r2, r3
 3089 005c 111D     		adds	r1, r2, #4
 3090 005e 40F20003 		movw	r3, #:lower16:rPacket
 3091 0062 C0F20003 		movt	r3, #:upper16:rPacket
 3092 0066 1960     		str	r1, [r3]
 3093 0068 7B69     		ldr	r3, [r7, #20]
 3094 006a 1360     		str	r3, [r2]
 108:src/modbus.c  **** 	*rPacket++ = ucrcLo;
 3095              		.loc 1 108 0
 3096 006c 40F20003 		movw	r3, #:lower16:rPacket
 3097 0070 C0F20003 		movt	r3, #:upper16:rPacket
 3098 0074 1B68     		ldr	r3, [r3]
 3099 0076 1A46     		mov	r2, r3
 3100 0078 111D     		adds	r1, r2, #4
 3101 007a 40F20003 		movw	r3, #:lower16:rPacket
 3102 007e C0F20003 		movt	r3, #:upper16:rPacket
 3103 0082 1960     		str	r1, [r3]
 3104 0084 3B69     		ldr	r3, [r7, #16]
 3105 0086 1360     		str	r3, [r2]
 109:src/modbus.c  **** 	return 0;		
 3106              		.loc 1 109 0
 3107 0088 0023     		movs	r3, #0
 110:src/modbus.c  **** }
 3108              		.loc 1 110 0
 3109 008a 1846     		mov	r0, r3
 3110 008c 1C37     		adds	r7, r7, #28
 3111 008e BD46     		mov	sp, r7
 3112              		@ sp needed
 3113 0090 5DF8047B 		ldr	r7, [sp], #4
 3114 0094 7047     		bx	lr
 3115              		.cfi_endproc
 3116              	.LFE5:
 3118 0096 00BF     		.section	.text.validateFunction,"ax",%progbits
 3119              		.align	2
 3120              		.global	validateFunction
 3121              		.thumb
 3122              		.thumb_func
 3124              	validateFunction:
 3125              	.LFB6:
 111:src/modbus.c  **** 
 112:src/modbus.c  **** //Validate the function
 113:src/modbus.c  **** uint32_t validateFunction(uint32_t *qPacket) {
 3126              		.loc 1 113 0
 3127              		.cfi_startproc
 3128              		@ args = 0, pretend = 0, frame = 8
 3129              		@ frame_needed = 1, uses_anonymous_args = 0
 3130 0000 80B5     		push	{r7, lr}
 3131              	.LCFI18:
 3132              		.cfi_def_cfa_offset 8
 3133              		.cfi_offset 7, -8
 3134              		.cfi_offset 14, -4
 3135 0002 82B0     		sub	sp, sp, #8
 3136              	.LCFI19:
 3137              		.cfi_def_cfa_offset 16
 3138 0004 00AF     		add	r7, sp, #0
 3139              	.LCFI20:
 3140              		.cfi_def_cfa_register 7
 3141 0006 7860     		str	r0, [r7, #4]
 114:src/modbus.c  **** 
 115:src/modbus.c  **** 	qPacket++;
 3142              		.loc 1 115 0
 3143 0008 7B68     		ldr	r3, [r7, #4]
 3144 000a 0433     		adds	r3, r3, #4
 3145 000c 7B60     		str	r3, [r7, #4]
 116:src/modbus.c  **** 
 117:src/modbus.c  **** 	//Copy function address in to respose packet
 118:src/modbus.c  **** 	*rPacket = *qPacket;
 3146              		.loc 1 118 0
 3147 000e 40F20003 		movw	r3, #:lower16:rPacket
 3148 0012 C0F20003 		movt	r3, #:upper16:rPacket
 3149 0016 1B68     		ldr	r3, [r3]
 3150 0018 7A68     		ldr	r2, [r7, #4]
 3151 001a 1268     		ldr	r2, [r2]
 3152 001c 1A60     		str	r2, [r3]
 119:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 120:src/modbus.c  **** 	rPacket++;
 3153              		.loc 1 120 0
 3154 001e 40F20003 		movw	r3, #:lower16:rPacket
 3155 0022 C0F20003 		movt	r3, #:upper16:rPacket
 3156 0026 1B68     		ldr	r3, [r3]
 3157 0028 1A1D     		adds	r2, r3, #4
 3158 002a 40F20003 		movw	r3, #:lower16:rPacket
 3159 002e C0F20003 		movt	r3, #:upper16:rPacket
 3160 0032 1A60     		str	r2, [r3]
 121:src/modbus.c  **** 
 122:src/modbus.c  **** 	switch (*qPacket) {
 3161              		.loc 1 122 0
 3162 0034 7B68     		ldr	r3, [r7, #4]
 3163 0036 1B68     		ldr	r3, [r3]
 3164 0038 013B     		subs	r3, r3, #1
 3165 003a 0F2B     		cmp	r3, #15
 3166 003c 4FD8     		bhi	.L96
 3167 003e 01A2     		adr	r2, .L98
 3168 0040 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3169              		.p2align 2
 3170              	.L98:
 3171 0044 85000000 		.word	.L97+1
 3172 0048 8F000000 		.word	.L99+1
 3173 004c 99000000 		.word	.L100+1
 3174 0050 A3000000 		.word	.L101+1
 3175 0054 AD000000 		.word	.L102+1
 3176 0058 B7000000 		.word	.L103+1
 3177 005c D5000000 		.word	.L104+1
 3178 0060 DF000000 		.word	.L96+1
 3179 0064 DF000000 		.word	.L96+1
 3180 0068 DF000000 		.word	.L96+1
 3181 006c DF000000 		.word	.L96+1
 3182 0070 DF000000 		.word	.L96+1
 3183 0074 DF000000 		.word	.L96+1
 3184 0078 DF000000 		.word	.L96+1
 3185 007c C1000000 		.word	.L105+1
 3186 0080 CB000000 		.word	.L106+1
 3187              	.L97:
 123:src/modbus.c  **** 	case READ_COIL:
 124:src/modbus.c  **** 		readCoil(qPacket);
 3188              		.loc 1 124 0
 3189 0084 7868     		ldr	r0, [r7, #4]
 3190 0086 FFF7FEFF 		bl	readCoil
 125:src/modbus.c  **** 		return 1;
 3191              		.loc 1 125 0
 3192 008a 0123     		movs	r3, #1
 3193 008c 28E0     		b	.L107
 3194              	.L99:
 126:src/modbus.c  **** 		break;
 127:src/modbus.c  **** 	case READ_DISCRETE_INPUTS:
 128:src/modbus.c  **** 		readDiscreteInputs(qPacket);
 3195              		.loc 1 128 0
 3196 008e 7868     		ldr	r0, [r7, #4]
 3197 0090 FFF7FEFF 		bl	readDiscreteInputs
 129:src/modbus.c  **** 		return 1;
 3198              		.loc 1 129 0
 3199 0094 0123     		movs	r3, #1
 3200 0096 23E0     		b	.L107
 3201              	.L100:
 130:src/modbus.c  **** 		break;
 131:src/modbus.c  **** 	case READ_HOLDING_REGISTERS:
 132:src/modbus.c  **** 		readHoldingRegisters(qPacket);
 3202              		.loc 1 132 0
 3203 0098 7868     		ldr	r0, [r7, #4]
 3204 009a FFF7FEFF 		bl	readHoldingRegisters
 133:src/modbus.c  **** 		return 1;
 3205              		.loc 1 133 0
 3206 009e 0123     		movs	r3, #1
 3207 00a0 1EE0     		b	.L107
 3208              	.L101:
 134:src/modbus.c  **** 		break;
 135:src/modbus.c  **** 	case READ_INPUT_REGISTERS:
 136:src/modbus.c  **** 		readInputRegisters(qPacket);
 3209              		.loc 1 136 0
 3210 00a2 7868     		ldr	r0, [r7, #4]
 3211 00a4 FFF7FEFF 		bl	readInputRegisters
 137:src/modbus.c  **** 		return 1;
 3212              		.loc 1 137 0
 3213 00a8 0123     		movs	r3, #1
 3214 00aa 19E0     		b	.L107
 3215              	.L102:
 138:src/modbus.c  **** 		break;
 139:src/modbus.c  **** 	case WRITE_SINGLE_COIL:
 140:src/modbus.c  **** 		writeSingleCoil(qPacket);
 3216              		.loc 1 140 0
 3217 00ac 7868     		ldr	r0, [r7, #4]
 3218 00ae FFF7FEFF 		bl	writeSingleCoil
 141:src/modbus.c  **** 		return 1;
 3219              		.loc 1 141 0
 3220 00b2 0123     		movs	r3, #1
 3221 00b4 14E0     		b	.L107
 3222              	.L103:
 142:src/modbus.c  **** 		break;
 143:src/modbus.c  **** 	case WRITE_SINGLE_REGISTER:
 144:src/modbus.c  **** 		writeSingleRegister(qPacket);
 3223              		.loc 1 144 0
 3224 00b6 7868     		ldr	r0, [r7, #4]
 3225 00b8 FFF7FEFF 		bl	writeSingleRegister
 145:src/modbus.c  **** 		return 1;
 3226              		.loc 1 145 0
 3227 00bc 0123     		movs	r3, #1
 3228 00be 0FE0     		b	.L107
 3229              	.L105:
 146:src/modbus.c  **** 		break;
 147:src/modbus.c  **** 	case WRITE_MULTIPLE_COILS:
 148:src/modbus.c  **** 		writeMultipleCoils(qPacket);
 3230              		.loc 1 148 0
 3231 00c0 7868     		ldr	r0, [r7, #4]
 3232 00c2 FFF7FEFF 		bl	writeMultipleCoils
 149:src/modbus.c  **** 		return 1;
 3233              		.loc 1 149 0
 3234 00c6 0123     		movs	r3, #1
 3235 00c8 0AE0     		b	.L107
 3236              	.L106:
 150:src/modbus.c  **** 		break;
 151:src/modbus.c  **** 	case WRITE_MULTIPLE_REGISTERS:
 152:src/modbus.c  **** 		writeMultipleRegisters(qPacket);
 3237              		.loc 1 152 0
 3238 00ca 7868     		ldr	r0, [r7, #4]
 3239 00cc FFF7FEFF 		bl	writeMultipleRegisters
 153:src/modbus.c  **** 		return 1;
 3240              		.loc 1 153 0
 3241 00d0 0123     		movs	r3, #1
 3242 00d2 05E0     		b	.L107
 3243              	.L104:
 154:src/modbus.c  **** 		break;
 155:src/modbus.c  **** 	case READ_EXCEPTION_STATUS:
 156:src/modbus.c  **** 		readExceptionStatus(qPacket);
 3244              		.loc 1 156 0
 3245 00d4 7868     		ldr	r0, [r7, #4]
 3246 00d6 FFF7FEFF 		bl	readExceptionStatus
 157:src/modbus.c  **** 		return 1;
 3247              		.loc 1 157 0
 3248 00da 0123     		movs	r3, #1
 3249 00dc 00E0     		b	.L107
 3250              	.L96:
 158:src/modbus.c  **** 		break;
 159:src/modbus.c  **** 	default:
 160:src/modbus.c  **** 		return 0;
 3251              		.loc 1 160 0
 3252 00de 0023     		movs	r3, #0
 3253              	.L107:
 161:src/modbus.c  **** 	}
 162:src/modbus.c  **** }
 3254              		.loc 1 162 0
 3255 00e0 1846     		mov	r0, r3
 3256 00e2 0837     		adds	r7, r7, #8
 3257 00e4 BD46     		mov	sp, r7
 3258              		@ sp needed
 3259 00e6 80BD     		pop	{r7, pc}
 3260              		.cfi_endproc
 3261              	.LFE6:
 3263              		.section	.text.writeMultipleRegisters,"ax",%progbits
 3264              		.align	2
 3265              		.global	writeMultipleRegisters
 3266              		.thumb
 3267              		.thumb_func
 3269              	writeMultipleRegisters:
 3270              	.LFB7:
 163:src/modbus.c  **** 
 164:src/modbus.c  **** 
 165:src/modbus.c  **** //TODO : Code to be checked for Multiple Register Writing
 166:src/modbus.c  **** uint32_t writeMultipleRegisters(uint32_t *qPacket) {
 3271              		.loc 1 166 0
 3272              		.cfi_startproc
 3273              		@ args = 0, pretend = 0, frame = 56
 3274              		@ frame_needed = 1, uses_anonymous_args = 0
 3275 0000 80B5     		push	{r7, lr}
 3276              	.LCFI21:
 3277              		.cfi_def_cfa_offset 8
 3278              		.cfi_offset 7, -8
 3279              		.cfi_offset 14, -4
 3280 0002 8EB0     		sub	sp, sp, #56
 3281              	.LCFI22:
 3282              		.cfi_def_cfa_offset 64
 3283 0004 00AF     		add	r7, sp, #0
 3284              	.LCFI23:
 3285              		.cfi_def_cfa_register 7
 3286 0006 7860     		str	r0, [r7, #4]
 167:src/modbus.c  **** 
 168:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 169:src/modbus.c  **** 	qPacket++;
 3287              		.loc 1 169 0
 3288 0008 7B68     		ldr	r3, [r7, #4]
 3289 000a 0433     		adds	r3, r3, #4
 3290 000c 7B60     		str	r3, [r7, #4]
 170:src/modbus.c  **** 
 171:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 172:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3291              		.loc 1 172 0
 3292 000e 7B68     		ldr	r3, [r7, #4]
 3293 0010 1A1D     		adds	r2, r3, #4
 3294 0012 7A60     		str	r2, [r7, #4]
 3295 0014 1B68     		ldr	r3, [r3]
 3296 0016 03F51C42 		add	r2, r3, #39936
 3297 001a 4032     		adds	r2, r2, #64
 3298 001c 40F20003 		movw	r3, #:lower16:firstRequest
 3299 0020 C0F20003 		movt	r3, #:upper16:firstRequest
 3300 0024 1A60     		str	r2, [r3]
 173:src/modbus.c  **** 
 174:src/modbus.c  **** 	//Data address of first coil
 175:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3301              		.loc 1 175 0
 3302 0026 40F20003 		movw	r3, #:lower16:rPacket
 3303 002a C0F20003 		movt	r3, #:upper16:rPacket
 3304 002e 1A68     		ldr	r2, [r3]
 3305 0030 40F20003 		movw	r3, #:lower16:firstRequest
 3306 0034 C0F20003 		movt	r3, #:upper16:firstRequest
 3307 0038 1B68     		ldr	r3, [r3]
 3308 003a 1360     		str	r3, [r2]
 176:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 177:src/modbus.c  **** 	rPacket++;
 3309              		.loc 1 177 0
 3310 003c 40F20003 		movw	r3, #:lower16:rPacket
 3311 0040 C0F20003 		movt	r3, #:upper16:rPacket
 3312 0044 1B68     		ldr	r3, [r3]
 3313 0046 1A1D     		adds	r2, r3, #4
 3314 0048 40F20003 		movw	r3, #:lower16:rPacket
 3315 004c C0F20003 		movt	r3, #:upper16:rPacket
 3316 0050 1A60     		str	r2, [r3]
 178:src/modbus.c  **** 
 179:src/modbus.c  **** 	//move the number of registers to be written.
 180:src/modbus.c  **** 	totalRequest = *qPacket++;
 3317              		.loc 1 180 0
 3318 0052 7B68     		ldr	r3, [r7, #4]
 3319 0054 1A1D     		adds	r2, r3, #4
 3320 0056 7A60     		str	r2, [r7, #4]
 3321 0058 1A68     		ldr	r2, [r3]
 3322 005a 40F20003 		movw	r3, #:lower16:totalRequest
 3323 005e C0F20003 		movt	r3, #:upper16:totalRequest
 3324 0062 1A60     		str	r2, [r3]
 181:src/modbus.c  **** 
 182:src/modbus.c  **** 	//Number of registers to be written
 183:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3325              		.loc 1 183 0
 3326 0064 40F20003 		movw	r3, #:lower16:rPacket
 3327 0068 C0F20003 		movt	r3, #:upper16:rPacket
 3328 006c 1A68     		ldr	r2, [r3]
 3329 006e 40F20003 		movw	r3, #:lower16:totalRequest
 3330 0072 C0F20003 		movt	r3, #:upper16:totalRequest
 3331 0076 1B68     		ldr	r3, [r3]
 3332 0078 1360     		str	r3, [r2]
 184:src/modbus.c  **** 	rPacket++;
 3333              		.loc 1 184 0
 3334 007a 40F20003 		movw	r3, #:lower16:rPacket
 3335 007e C0F20003 		movt	r3, #:upper16:rPacket
 3336 0082 1B68     		ldr	r3, [r3]
 3337 0084 1A1D     		adds	r2, r3, #4
 3338 0086 40F20003 		movw	r3, #:lower16:rPacket
 3339 008a C0F20003 		movt	r3, #:upper16:rPacket
 3340 008e 1A60     		str	r2, [r3]
 185:src/modbus.c  **** 
 186:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 187:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3341              		.loc 1 187 0
 3342 0090 7B68     		ldr	r3, [r7, #4]
 3343 0092 1A1D     		adds	r2, r3, #4
 3344 0094 7A60     		str	r2, [r7, #4]
 3345 0096 1B68     		ldr	r3, [r3]
 3346 0098 FB61     		str	r3, [r7, #28]
 188:src/modbus.c  **** 
 189:src/modbus.c  **** 	//Fetch first address data.
 190:src/modbus.c  **** 	s = getData(firstRequest++);
 3347              		.loc 1 190 0
 3348 009a 40F20003 		movw	r3, #:lower16:firstRequest
 3349 009e C0F20003 		movt	r3, #:upper16:firstRequest
 3350 00a2 1B68     		ldr	r3, [r3]
 3351 00a4 1A46     		mov	r2, r3
 3352 00a6 511C     		adds	r1, r2, #1
 3353 00a8 40F20003 		movw	r3, #:lower16:firstRequest
 3354 00ac C0F20003 		movt	r3, #:upper16:firstRequest
 3355 00b0 1960     		str	r1, [r3]
 3356 00b2 1346     		mov	r3, r2
 3357 00b4 1846     		mov	r0, r3
 3358 00b6 FFF7FEFF 		bl	getData
 3359 00ba 0246     		mov	r2, r0
 3360 00bc 40F20003 		movw	r3, #:lower16:s
 3361 00c0 C0F20003 		movt	r3, #:upper16:s
 3362 00c4 1A60     		str	r2, [r3]
 191:src/modbus.c  **** 
 192:src/modbus.c  **** 	//For WRITE_MULTIPLE_REGISTERS
 193:src/modbus.c  **** 	uint32_t *tempWriteData = qPacket;
 3363              		.loc 1 193 0
 3364 00c6 7B68     		ldr	r3, [r7, #4]
 3365 00c8 BB61     		str	r3, [r7, #24]
 194:src/modbus.c  **** 
 195:src/modbus.c  **** 	int dataToBeWritten = *tempWriteData++;
 3366              		.loc 1 195 0
 3367 00ca BB69     		ldr	r3, [r7, #24]
 3368 00cc 1A1D     		adds	r2, r3, #4
 3369 00ce BA61     		str	r2, [r7, #24]
 3370 00d0 1B68     		ldr	r3, [r3]
 3371 00d2 7B61     		str	r3, [r7, #20]
 196:src/modbus.c  **** 
 197:src/modbus.c  **** 	int tempWriteRequest = (int) dataToBeWritten;
 3372              		.loc 1 197 0
 3373 00d4 7B69     		ldr	r3, [r7, #20]
 3374 00d6 7B63     		str	r3, [r7, #52]
 198:src/modbus.c  **** 	int count = byteStream;
 3375              		.loc 1 198 0
 3376 00d8 FB69     		ldr	r3, [r7, #28]
 3377 00da 3B63     		str	r3, [r7, #48]
 199:src/modbus.c  **** 	int fromBit = 0;
 3378              		.loc 1 199 0
 3379 00dc 0023     		movs	r3, #0
 3380 00de FB62     		str	r3, [r7, #44]
 200:src/modbus.c  **** 	int toBit = 7;
 3381              		.loc 1 200 0
 3382 00e0 0723     		movs	r3, #7
 3383 00e2 BB62     		str	r3, [r7, #40]
 201:src/modbus.c  **** 	int shiftRight;
 202:src/modbus.c  **** 	//int d;
 203:src/modbus.c  **** 
 204:src/modbus.c  **** 	again: while (count != 0) {
 3384              		.loc 1 204 0
 3385 00e4 63E0     		b	.L110
 3386              	.L113:
 3387              	.LBB9:
 205:src/modbus.c  **** 
 206:src/modbus.c  **** 		//Call masking function and store value in r.
 207:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3388              		.loc 1 207 0
 3389 00e6 F86A     		ldr	r0, [r7, #44]
 3390 00e8 B96A     		ldr	r1, [r7, #40]
 3391 00ea FFF7FEFF 		bl	getMask
 3392 00ee 3861     		str	r0, [r7, #16]
 208:src/modbus.c  **** 
 209:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 210:src/modbus.c  **** 		unsigned int result = r & s->value;
 3393              		.loc 1 210 0
 3394 00f0 40F20003 		movw	r3, #:lower16:s
 3395 00f4 C0F20003 		movt	r3, #:upper16:s
 3396 00f8 1B68     		ldr	r3, [r3]
 3397 00fa 5B68     		ldr	r3, [r3, #4]
 3398 00fc 1A46     		mov	r2, r3
 3399 00fe 3B69     		ldr	r3, [r7, #16]
 3400 0100 1340     		ands	r3, r3, r2
 3401 0102 3B62     		str	r3, [r7, #32]
 211:src/modbus.c  **** 
 212:src/modbus.c  **** 		tempWriteRequest = r & tempWriteRequest;
 3402              		.loc 1 212 0
 3403 0104 7A6B     		ldr	r2, [r7, #52]
 3404 0106 3B69     		ldr	r3, [r7, #16]
 3405 0108 1340     		ands	r3, r3, r2
 3406 010a 7B63     		str	r3, [r7, #52]
 213:src/modbus.c  **** 
 214:src/modbus.c  **** 		//Else shift right.
 215:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3407              		.loc 1 215 0
 3408 010c FB6A     		ldr	r3, [r7, #44]
 3409 010e 7B62     		str	r3, [r7, #36]
 3410 0110 08E0     		b	.L111
 3411              	.L112:
 216:src/modbus.c  **** 			result = result >> 1;
 3412              		.loc 1 216 0 discriminator 2
 3413 0112 3B6A     		ldr	r3, [r7, #32]
 3414 0114 5B08     		lsrs	r3, r3, #1
 3415 0116 3B62     		str	r3, [r7, #32]
 217:src/modbus.c  **** 			tempWriteRequest = tempWriteRequest >> 1;
 3416              		.loc 1 217 0 discriminator 2
 3417 0118 7B6B     		ldr	r3, [r7, #52]
 3418 011a 5B10     		asrs	r3, r3, #1
 3419 011c 7B63     		str	r3, [r7, #52]
 215:src/modbus.c  **** 			result = result >> 1;
 3420              		.loc 1 215 0 discriminator 2
 3421 011e 7B6A     		ldr	r3, [r7, #36]
 3422 0120 013B     		subs	r3, r3, #1
 3423 0122 7B62     		str	r3, [r7, #36]
 3424              	.L111:
 215:src/modbus.c  **** 			result = result >> 1;
 3425              		.loc 1 215 0 is_stmt 0 discriminator 1
 3426 0124 7B6A     		ldr	r3, [r7, #36]
 3427 0126 002B     		cmp	r3, #0
 3428 0128 F3DC     		bgt	.L112
 218:src/modbus.c  **** 		}
 219:src/modbus.c  **** 
 220:src/modbus.c  **** 		result = result | tempWriteRequest;
 3429              		.loc 1 220 0 is_stmt 1
 3430 012a 7B6B     		ldr	r3, [r7, #52]
 3431 012c 3A6A     		ldr	r2, [r7, #32]
 3432 012e 1343     		orrs	r3, r3, r2
 3433 0130 3B62     		str	r3, [r7, #32]
 221:src/modbus.c  **** 
 222:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 223:src/modbus.c  **** 		*rPacket = result;
 3434              		.loc 1 223 0
 3435 0132 40F20003 		movw	r3, #:lower16:rPacket
 3436 0136 C0F20003 		movt	r3, #:upper16:rPacket
 3437 013a 1B68     		ldr	r3, [r3]
 3438 013c 3A6A     		ldr	r2, [r7, #32]
 3439 013e 1A60     		str	r2, [r3]
 224:src/modbus.c  **** 		rPacket++;
 3440              		.loc 1 224 0
 3441 0140 40F20003 		movw	r3, #:lower16:rPacket
 3442 0144 C0F20003 		movt	r3, #:upper16:rPacket
 3443 0148 1B68     		ldr	r3, [r3]
 3444 014a 1A1D     		adds	r2, r3, #4
 3445 014c 40F20003 		movw	r3, #:lower16:rPacket
 3446 0150 C0F20003 		movt	r3, #:upper16:rPacket
 3447 0154 1A60     		str	r2, [r3]
 225:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 226:src/modbus.c  **** 
 227:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 228:src/modbus.c  **** 		count--;
 3448              		.loc 1 228 0
 3449 0156 3B6B     		ldr	r3, [r7, #48]
 3450 0158 013B     		subs	r3, r3, #1
 3451 015a 3B63     		str	r3, [r7, #48]
 229:src/modbus.c  **** 		fromBit = fromBit + 8;
 3452              		.loc 1 229 0
 3453 015c FB6A     		ldr	r3, [r7, #44]
 3454 015e 0833     		adds	r3, r3, #8
 3455 0160 FB62     		str	r3, [r7, #44]
 230:src/modbus.c  **** 		toBit = toBit + 8;
 3456              		.loc 1 230 0
 3457 0162 BB6A     		ldr	r3, [r7, #40]
 3458 0164 0833     		adds	r3, r3, #8
 3459 0166 BB62     		str	r3, [r7, #40]
 231:src/modbus.c  **** 		tempWriteRequest = (int) dataToBeWritten;
 3460              		.loc 1 231 0
 3461 0168 7B69     		ldr	r3, [r7, #20]
 3462 016a 7B63     		str	r3, [r7, #52]
 232:src/modbus.c  **** 
 233:src/modbus.c  **** 		// If two bytes written then move on to next register
 234:src/modbus.c  **** 		if (count == 2) {
 3463              		.loc 1 234 0
 3464 016c 3B6B     		ldr	r3, [r7, #48]
 3465 016e 022B     		cmp	r3, #2
 3466 0170 1DD1     		bne	.L110
 3467              	.LBB10:
 235:src/modbus.c  **** 			s = getData(firstRequest++);
 3468              		.loc 1 235 0
 3469 0172 40F20003 		movw	r3, #:lower16:firstRequest
 3470 0176 C0F20003 		movt	r3, #:upper16:firstRequest
 3471 017a 1B68     		ldr	r3, [r3]
 3472 017c 1A46     		mov	r2, r3
 3473 017e 511C     		adds	r1, r2, #1
 3474 0180 40F20003 		movw	r3, #:lower16:firstRequest
 3475 0184 C0F20003 		movt	r3, #:upper16:firstRequest
 3476 0188 1960     		str	r1, [r3]
 3477 018a 1346     		mov	r3, r2
 3478 018c 1846     		mov	r0, r3
 3479 018e FFF7FEFF 		bl	getData
 3480 0192 0246     		mov	r2, r0
 3481 0194 40F20003 		movw	r3, #:lower16:s
 3482 0198 C0F20003 		movt	r3, #:upper16:s
 3483 019c 1A60     		str	r2, [r3]
 236:src/modbus.c  **** 			int dataToBeWritten = *tempWriteData;
 3484              		.loc 1 236 0
 3485 019e BB69     		ldr	r3, [r7, #24]
 3486 01a0 1B68     		ldr	r3, [r3]
 3487 01a2 FB60     		str	r3, [r7, #12]
 237:src/modbus.c  **** 			fromBit = 0;
 3488              		.loc 1 237 0
 3489 01a4 0023     		movs	r3, #0
 3490 01a6 FB62     		str	r3, [r7, #44]
 238:src/modbus.c  **** 			toBit = 7;
 3491              		.loc 1 238 0
 3492 01a8 0723     		movs	r3, #7
 3493 01aa BB62     		str	r3, [r7, #40]
 239:src/modbus.c  **** 			goto again;
 3494              		.loc 1 239 0
 3495 01ac 00BF     		nop
 3496              	.L109:
 3497              	.L110:
 3498              	.LBE10:
 3499              	.LBE9:
 204:src/modbus.c  **** 
 3500              		.loc 1 204 0 discriminator 1
 3501 01ae 3B6B     		ldr	r3, [r7, #48]
 3502 01b0 002B     		cmp	r3, #0
 3503 01b2 98D1     		bne	.L113
 240:src/modbus.c  **** 		}
 241:src/modbus.c  **** 	}
 242:src/modbus.c  **** /*
 243:src/modbus.c  **** 	for (d = 0; d < 5; d++) {
 244:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 245:src/modbus.c  **** 	}
 246:src/modbus.c  **** */
 247:src/modbus.c  **** 	return 0;
 3504              		.loc 1 247 0
 3505 01b4 0023     		movs	r3, #0
 248:src/modbus.c  **** 
 249:src/modbus.c  **** }
 3506              		.loc 1 249 0
 3507 01b6 1846     		mov	r0, r3
 3508 01b8 3837     		adds	r7, r7, #56
 3509 01ba BD46     		mov	sp, r7
 3510              		@ sp needed
 3511 01bc 80BD     		pop	{r7, pc}
 3512              		.cfi_endproc
 3513              	.LFE7:
 3515 01be 00BF     		.section	.rodata
 3516              		.align	2
 3517              	.LC1:
 3518 0018 44617461 		.ascii	"Data: 0x%x\012\000"
 3518      3A203078 
 3518      25780A00 
 3519              		.section	.text.writeMultipleCoils,"ax",%progbits
 3520              		.align	2
 3521              		.global	writeMultipleCoils
 3522              		.thumb
 3523              		.thumb_func
 3525              	writeMultipleCoils:
 3526              	.LFB8:
 250:src/modbus.c  **** 
 251:src/modbus.c  **** //TODO : Code to be checked for Multiple Coils Writing
 252:src/modbus.c  **** uint32_t writeMultipleCoils(uint32_t *qPacket) {
 3527              		.loc 1 252 0
 3528              		.cfi_startproc
 3529              		@ args = 0, pretend = 0, frame = 48
 3530              		@ frame_needed = 1, uses_anonymous_args = 0
 3531 0000 80B5     		push	{r7, lr}
 3532              	.LCFI24:
 3533              		.cfi_def_cfa_offset 8
 3534              		.cfi_offset 7, -8
 3535              		.cfi_offset 14, -4
 3536 0002 8CB0     		sub	sp, sp, #48
 3537              	.LCFI25:
 3538              		.cfi_def_cfa_offset 56
 3539 0004 00AF     		add	r7, sp, #0
 3540              	.LCFI26:
 3541              		.cfi_def_cfa_register 7
 3542 0006 7860     		str	r0, [r7, #4]
 253:src/modbus.c  **** 
 254:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 255:src/modbus.c  **** 	qPacket++;
 3543              		.loc 1 255 0
 3544 0008 7B68     		ldr	r3, [r7, #4]
 3545 000a 0433     		adds	r3, r3, #4
 3546 000c 7B60     		str	r3, [r7, #4]
 256:src/modbus.c  **** 
 257:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket
 258:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3547              		.loc 1 258 0
 3548 000e 7B68     		ldr	r3, [r7, #4]
 3549 0010 1A1D     		adds	r2, r3, #4
 3550 0012 7A60     		str	r2, [r7, #4]
 3551 0014 1A68     		ldr	r2, [r3]
 3552 0016 40F20003 		movw	r3, #:lower16:firstRequest
 3553 001a C0F20003 		movt	r3, #:upper16:firstRequest
 3554 001e 1A60     		str	r2, [r3]
 259:src/modbus.c  **** 
 260:src/modbus.c  **** 	//Data address of first coil
 261:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3555              		.loc 1 261 0
 3556 0020 40F20003 		movw	r3, #:lower16:rPacket
 3557 0024 C0F20003 		movt	r3, #:upper16:rPacket
 3558 0028 1A68     		ldr	r2, [r3]
 3559 002a 40F20003 		movw	r3, #:lower16:firstRequest
 3560 002e C0F20003 		movt	r3, #:upper16:firstRequest
 3561 0032 1B68     		ldr	r3, [r3]
 3562 0034 1360     		str	r3, [r2]
 262:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 263:src/modbus.c  **** 	rPacket++;
 3563              		.loc 1 263 0
 3564 0036 40F20003 		movw	r3, #:lower16:rPacket
 3565 003a C0F20003 		movt	r3, #:upper16:rPacket
 3566 003e 1B68     		ldr	r3, [r3]
 3567 0040 1A1D     		adds	r2, r3, #4
 3568 0042 40F20003 		movw	r3, #:lower16:rPacket
 3569 0046 C0F20003 		movt	r3, #:upper16:rPacket
 3570 004a 1A60     		str	r2, [r3]
 264:src/modbus.c  **** 
 265:src/modbus.c  **** 	//move the number of coils to be written.
 266:src/modbus.c  **** 	totalRequest = *qPacket++;
 3571              		.loc 1 266 0
 3572 004c 7B68     		ldr	r3, [r7, #4]
 3573 004e 1A1D     		adds	r2, r3, #4
 3574 0050 7A60     		str	r2, [r7, #4]
 3575 0052 1A68     		ldr	r2, [r3]
 3576 0054 40F20003 		movw	r3, #:lower16:totalRequest
 3577 0058 C0F20003 		movt	r3, #:upper16:totalRequest
 3578 005c 1A60     		str	r2, [r3]
 267:src/modbus.c  **** 
 268:src/modbus.c  **** 	//Number of coils to be written
 269:src/modbus.c  **** 	*rPacket = (unsigned int) totalRequest;
 3579              		.loc 1 269 0
 3580 005e 40F20003 		movw	r3, #:lower16:rPacket
 3581 0062 C0F20003 		movt	r3, #:upper16:rPacket
 3582 0066 1A68     		ldr	r2, [r3]
 3583 0068 40F20003 		movw	r3, #:lower16:totalRequest
 3584 006c C0F20003 		movt	r3, #:upper16:totalRequest
 3585 0070 1B68     		ldr	r3, [r3]
 3586 0072 1360     		str	r3, [r2]
 270:src/modbus.c  **** 	rPacket++;
 3587              		.loc 1 270 0
 3588 0074 40F20003 		movw	r3, #:lower16:rPacket
 3589 0078 C0F20003 		movt	r3, #:upper16:rPacket
 3590 007c 1B68     		ldr	r3, [r3]
 3591 007e 1A1D     		adds	r2, r3, #4
 3592 0080 40F20003 		movw	r3, #:lower16:rPacket
 3593 0084 C0F20003 		movt	r3, #:upper16:rPacket
 3594 0088 1A60     		str	r2, [r3]
 271:src/modbus.c  **** 
 272:src/modbus.c  **** 	//Number of bytes to be sent to slave by master
 273:src/modbus.c  **** 	unsigned int byteStream = (unsigned int) *qPacket++;
 3595              		.loc 1 273 0
 3596 008a 7B68     		ldr	r3, [r7, #4]
 3597 008c 1A1D     		adds	r2, r3, #4
 3598 008e 7A60     		str	r2, [r7, #4]
 3599 0090 1B68     		ldr	r3, [r3]
 3600 0092 3B61     		str	r3, [r7, #16]
 274:src/modbus.c  **** 
 275:src/modbus.c  **** 	//Fetch first address data.
 276:src/modbus.c  **** 	s = getData(firstRequest++);
 3601              		.loc 1 276 0
 3602 0094 40F20003 		movw	r3, #:lower16:firstRequest
 3603 0098 C0F20003 		movt	r3, #:upper16:firstRequest
 3604 009c 1B68     		ldr	r3, [r3]
 3605 009e 1A46     		mov	r2, r3
 3606 00a0 511C     		adds	r1, r2, #1
 3607 00a2 40F20003 		movw	r3, #:lower16:firstRequest
 3608 00a6 C0F20003 		movt	r3, #:upper16:firstRequest
 3609 00aa 1960     		str	r1, [r3]
 3610 00ac 1346     		mov	r3, r2
 3611 00ae 1846     		mov	r0, r3
 3612 00b0 FFF7FEFF 		bl	getData
 3613 00b4 0246     		mov	r2, r0
 3614 00b6 40F20003 		movw	r3, #:lower16:s
 3615 00ba C0F20003 		movt	r3, #:upper16:s
 3616 00be 1A60     		str	r2, [r3]
 277:src/modbus.c  **** 
 278:src/modbus.c  **** 	uint32_t *dataToBeWritten;
 279:src/modbus.c  **** 	dataToBeWritten = qPacket;
 3617              		.loc 1 279 0
 3618 00c0 7B68     		ldr	r3, [r7, #4]
 3619 00c2 FB62     		str	r3, [r7, #44]
 280:src/modbus.c  **** 	qPacket++;
 3620              		.loc 1 280 0
 3621 00c4 7B68     		ldr	r3, [r7, #4]
 3622 00c6 0433     		adds	r3, r3, #4
 3623 00c8 7B60     		str	r3, [r7, #4]
 281:src/modbus.c  **** 
 282:src/modbus.c  **** 	int tempWriteRequest = *dataToBeWritten++;
 3624              		.loc 1 282 0
 3625 00ca FB6A     		ldr	r3, [r7, #44]
 3626 00cc 1A1D     		adds	r2, r3, #4
 3627 00ce FA62     		str	r2, [r7, #44]
 3628 00d0 1B68     		ldr	r3, [r3]
 3629 00d2 BB62     		str	r3, [r7, #40]
 283:src/modbus.c  **** 	int count = byteStream;
 3630              		.loc 1 283 0
 3631 00d4 3B69     		ldr	r3, [r7, #16]
 3632 00d6 7B62     		str	r3, [r7, #36]
 284:src/modbus.c  **** 	int fromBit = 0;
 3633              		.loc 1 284 0
 3634 00d8 0023     		movs	r3, #0
 3635 00da 3B62     		str	r3, [r7, #32]
 285:src/modbus.c  **** 	int toBit = 7;
 3636              		.loc 1 285 0
 3637 00dc 0723     		movs	r3, #7
 3638 00de FB61     		str	r3, [r7, #28]
 286:src/modbus.c  **** 	int shiftRight;
 287:src/modbus.c  **** 	int d;
 288:src/modbus.c  **** 
 289:src/modbus.c  **** 	while (count != 0) {
 3639              		.loc 1 289 0
 3640 00e0 33E0     		b	.L116
 3641              	.L119:
 3642              	.LBB11:
 290:src/modbus.c  **** 
 291:src/modbus.c  **** 		//Call masking function and store value in r.
 292:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3643              		.loc 1 292 0
 3644 00e2 386A     		ldr	r0, [r7, #32]
 3645 00e4 F969     		ldr	r1, [r7, #28]
 3646 00e6 FFF7FEFF 		bl	getMask
 3647 00ea F860     		str	r0, [r7, #12]
 293:src/modbus.c  **** 
 294:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 295:src/modbus.c  **** 		unsigned int result = r & s->value;
 3648              		.loc 1 295 0
 3649 00ec 40F20003 		movw	r3, #:lower16:s
 3650 00f0 C0F20003 		movt	r3, #:upper16:s
 3651 00f4 1B68     		ldr	r3, [r3]
 3652 00f6 5B68     		ldr	r3, [r3, #4]
 3653 00f8 1A46     		mov	r2, r3
 3654 00fa FB68     		ldr	r3, [r7, #12]
 3655 00fc 1340     		ands	r3, r3, r2
 3656 00fe 7B61     		str	r3, [r7, #20]
 296:src/modbus.c  **** 
 297:src/modbus.c  **** 		//tempWriteRequest = r & tempWriteRequest;
 298:src/modbus.c  **** 
 299:src/modbus.c  **** 		//Else shift right.
 300:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3657              		.loc 1 300 0
 3658 0100 3B6A     		ldr	r3, [r7, #32]
 3659 0102 BB61     		str	r3, [r7, #24]
 3660 0104 05E0     		b	.L117
 3661              	.L118:
 301:src/modbus.c  **** 			result = result >> 1;
 3662              		.loc 1 301 0 discriminator 2
 3663 0106 7B69     		ldr	r3, [r7, #20]
 3664 0108 5B08     		lsrs	r3, r3, #1
 3665 010a 7B61     		str	r3, [r7, #20]
 300:src/modbus.c  **** 			result = result >> 1;
 3666              		.loc 1 300 0 discriminator 2
 3667 010c BB69     		ldr	r3, [r7, #24]
 3668 010e 013B     		subs	r3, r3, #1
 3669 0110 BB61     		str	r3, [r7, #24]
 3670              	.L117:
 300:src/modbus.c  **** 			result = result >> 1;
 3671              		.loc 1 300 0 is_stmt 0 discriminator 1
 3672 0112 BB69     		ldr	r3, [r7, #24]
 3673 0114 002B     		cmp	r3, #0
 3674 0116 F6DC     		bgt	.L118
 302:src/modbus.c  **** 			//tempWriteRequest = tempWriteRequest << 1;
 303:src/modbus.c  **** 		}
 304:src/modbus.c  **** 
 305:src/modbus.c  **** 		result = result | tempWriteRequest;
 3675              		.loc 1 305 0 is_stmt 1
 3676 0118 BB6A     		ldr	r3, [r7, #40]
 3677 011a 7A69     		ldr	r2, [r7, #20]
 3678 011c 1343     		orrs	r3, r3, r2
 3679 011e 7B61     		str	r3, [r7, #20]
 306:src/modbus.c  **** 
 307:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 308:src/modbus.c  **** //		*rPacket = result;
 309:src/modbus.c  **** //		rPacket++;
 310:src/modbus.c  **** 		printf("Data: 0x%x\n", result);
 3680              		.loc 1 310 0
 3681 0120 40F20000 		movw	r0, #:lower16:.LC1
 3682 0124 C0F20000 		movt	r0, #:upper16:.LC1
 3683 0128 7969     		ldr	r1, [r7, #20]
 3684 012a FFF7FEFF 		bl	printf
 311:src/modbus.c  **** 
 312:src/modbus.c  **** 		//Decrease the count for number of bytes to be written
 313:src/modbus.c  **** 		count--;
 3685              		.loc 1 313 0
 3686 012e 7B6A     		ldr	r3, [r7, #36]
 3687 0130 013B     		subs	r3, r3, #1
 3688 0132 7B62     		str	r3, [r7, #36]
 314:src/modbus.c  **** 		fromBit = fromBit + 8;
 3689              		.loc 1 314 0
 3690 0134 3B6A     		ldr	r3, [r7, #32]
 3691 0136 0833     		adds	r3, r3, #8
 3692 0138 3B62     		str	r3, [r7, #32]
 315:src/modbus.c  **** 		toBit = toBit + 8;
 3693              		.loc 1 315 0
 3694 013a FB69     		ldr	r3, [r7, #28]
 3695 013c 0833     		adds	r3, r3, #8
 3696 013e FB61     		str	r3, [r7, #28]
 316:src/modbus.c  **** 		tempWriteRequest = *dataToBeWritten++;
 3697              		.loc 1 316 0
 3698 0140 FB6A     		ldr	r3, [r7, #44]
 3699 0142 1A1D     		adds	r2, r3, #4
 3700 0144 FA62     		str	r2, [r7, #44]
 3701 0146 1B68     		ldr	r3, [r3]
 3702 0148 BB62     		str	r3, [r7, #40]
 3703              	.L116:
 3704              	.LBE11:
 289:src/modbus.c  **** 
 3705              		.loc 1 289 0 discriminator 1
 3706 014a 7B6A     		ldr	r3, [r7, #36]
 3707 014c 002B     		cmp	r3, #0
 3708 014e C8D1     		bne	.L119
 317:src/modbus.c  **** 	}
 318:src/modbus.c  **** 
 319:src/modbus.c  **** //	for (d = 0; d < 5; d++) {
 320:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 321:src/modbus.c  **** //	}
 322:src/modbus.c  **** 
 323:src/modbus.c  **** 	return 0;
 3709              		.loc 1 323 0
 3710 0150 0023     		movs	r3, #0
 324:src/modbus.c  **** }
 3711              		.loc 1 324 0
 3712 0152 1846     		mov	r0, r3
 3713 0154 3037     		adds	r7, r7, #48
 3714 0156 BD46     		mov	sp, r7
 3715              		@ sp needed
 3716 0158 80BD     		pop	{r7, pc}
 3717              		.cfi_endproc
 3718              	.LFE8:
 3720 015a 00BF     		.section	.text.readExceptionStatus,"ax",%progbits
 3721              		.align	2
 3722              		.global	readExceptionStatus
 3723              		.thumb
 3724              		.thumb_func
 3726              	readExceptionStatus:
 3727              	.LFB9:
 325:src/modbus.c  **** 
 326:src/modbus.c  **** uint32_t readExceptionStatus(uint32_t *qPacket) {
 3728              		.loc 1 326 0
 3729              		.cfi_startproc
 3730              		@ args = 0, pretend = 0, frame = 8
 3731              		@ frame_needed = 1, uses_anonymous_args = 0
 3732              		@ link register save eliminated.
 3733 0000 80B4     		push	{r7}
 3734              	.LCFI27:
 3735              		.cfi_def_cfa_offset 4
 3736              		.cfi_offset 7, -4
 3737 0002 83B0     		sub	sp, sp, #12
 3738              	.LCFI28:
 3739              		.cfi_def_cfa_offset 16
 3740 0004 00AF     		add	r7, sp, #0
 3741              	.LCFI29:
 3742              		.cfi_def_cfa_register 7
 3743 0006 7860     		str	r0, [r7, #4]
 327:src/modbus.c  **** 	return 0;
 3744              		.loc 1 327 0
 3745 0008 0023     		movs	r3, #0
 328:src/modbus.c  **** }
 3746              		.loc 1 328 0
 3747 000a 1846     		mov	r0, r3
 3748 000c 0C37     		adds	r7, r7, #12
 3749 000e BD46     		mov	sp, r7
 3750              		@ sp needed
 3751 0010 5DF8047B 		ldr	r7, [sp], #4
 3752 0014 7047     		bx	lr
 3753              		.cfi_endproc
 3754              	.LFE9:
 3756 0016 00BF     		.section	.text.writeSingleRegister,"ax",%progbits
 3757              		.align	2
 3758              		.global	writeSingleRegister
 3759              		.thumb
 3760              		.thumb_func
 3762              	writeSingleRegister:
 3763              	.LFB10:
 329:src/modbus.c  **** 
 330:src/modbus.c  **** uint32_t writeSingleRegister(uint32_t *qPacket) {
 3764              		.loc 1 330 0
 3765              		.cfi_startproc
 3766              		@ args = 0, pretend = 0, frame = 40
 3767              		@ frame_needed = 1, uses_anonymous_args = 0
 3768 0000 80B5     		push	{r7, lr}
 3769              	.LCFI30:
 3770              		.cfi_def_cfa_offset 8
 3771              		.cfi_offset 7, -8
 3772              		.cfi_offset 14, -4
 3773 0002 8AB0     		sub	sp, sp, #40
 3774              	.LCFI31:
 3775              		.cfi_def_cfa_offset 48
 3776 0004 00AF     		add	r7, sp, #0
 3777              	.LCFI32:
 3778              		.cfi_def_cfa_register 7
 3779 0006 7860     		str	r0, [r7, #4]
 331:src/modbus.c  **** 
 332:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 333:src/modbus.c  **** 	qPacket++;
 3780              		.loc 1 333 0
 3781 0008 7B68     		ldr	r3, [r7, #4]
 3782 000a 0433     		adds	r3, r3, #4
 3783 000c 7B60     		str	r3, [r7, #4]
 334:src/modbus.c  **** 
 335:src/modbus.c  **** 	//Store the address requested and move it to response packet
 336:src/modbus.c  **** 	uint32_t tempWriteAddress = *qPacket;
 3784              		.loc 1 336 0
 3785 000e 7B68     		ldr	r3, [r7, #4]
 3786 0010 1B68     		ldr	r3, [r3]
 3787 0012 FB61     		str	r3, [r7, #28]
 337:src/modbus.c  **** 	*rPacket = (unsigned int) tempWriteAddress;
 3788              		.loc 1 337 0
 3789 0014 40F20003 		movw	r3, #:lower16:rPacket
 3790 0018 C0F20003 		movt	r3, #:upper16:rPacket
 3791 001c 1B68     		ldr	r3, [r3]
 3792 001e FA69     		ldr	r2, [r7, #28]
 3793 0020 1A60     		str	r2, [r3]
 338:src/modbus.c  **** 	rPacket++;
 3794              		.loc 1 338 0
 3795 0022 40F20003 		movw	r3, #:lower16:rPacket
 3796 0026 C0F20003 		movt	r3, #:upper16:rPacket
 3797 002a 1B68     		ldr	r3, [r3]
 3798 002c 1A1D     		adds	r2, r3, #4
 3799 002e 40F20003 		movw	r3, #:lower16:rPacket
 3800 0032 C0F20003 		movt	r3, #:upper16:rPacket
 3801 0036 1A60     		str	r2, [r3]
 339:src/modbus.c  **** 
 340:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 341:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 342:src/modbus.c  **** 	firstRequest = 0x9c40 + *qPacket++;
 3802              		.loc 1 342 0
 3803 0038 7B68     		ldr	r3, [r7, #4]
 3804 003a 1A1D     		adds	r2, r3, #4
 3805 003c 7A60     		str	r2, [r7, #4]
 3806 003e 1B68     		ldr	r3, [r3]
 3807 0040 03F51C42 		add	r2, r3, #39936
 3808 0044 4032     		adds	r2, r2, #64
 3809 0046 40F20003 		movw	r3, #:lower16:firstRequest
 3810 004a C0F20003 		movt	r3, #:upper16:firstRequest
 3811 004e 1A60     		str	r2, [r3]
 343:src/modbus.c  **** 
 344:src/modbus.c  **** 	//move the data to be written
 345:src/modbus.c  **** 	writeRequest = *qPacket;
 3812              		.loc 1 345 0
 3813 0050 7B68     		ldr	r3, [r7, #4]
 3814 0052 1A68     		ldr	r2, [r3]
 3815 0054 40F20003 		movw	r3, #:lower16:writeRequest
 3816 0058 C0F20003 		movt	r3, #:upper16:writeRequest
 3817 005c 1A60     		str	r2, [r3]
 346:src/modbus.c  **** 
 347:src/modbus.c  **** 	//stream to be sent back to response packet
 348:src/modbus.c  **** 	//*rPacket = (unsigned int) firstRequest;
 349:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 350:src/modbus.c  **** 	//rPacket++;
 351:src/modbus.c  **** 
 352:src/modbus.c  **** 	//Fetch first address data.
 353:src/modbus.c  **** 	s = getData(firstRequest++);
 3818              		.loc 1 353 0
 3819 005e 40F20003 		movw	r3, #:lower16:firstRequest
 3820 0062 C0F20003 		movt	r3, #:upper16:firstRequest
 3821 0066 1B68     		ldr	r3, [r3]
 3822 0068 1A46     		mov	r2, r3
 3823 006a 511C     		adds	r1, r2, #1
 3824 006c 40F20003 		movw	r3, #:lower16:firstRequest
 3825 0070 C0F20003 		movt	r3, #:upper16:firstRequest
 3826 0074 1960     		str	r1, [r3]
 3827 0076 1346     		mov	r3, r2
 3828 0078 1846     		mov	r0, r3
 3829 007a FFF7FEFF 		bl	getData
 3830 007e 0246     		mov	r2, r0
 3831 0080 40F20003 		movw	r3, #:lower16:s
 3832 0084 C0F20003 		movt	r3, #:upper16:s
 3833 0088 1A60     		str	r2, [r3]
 354:src/modbus.c  **** 
 355:src/modbus.c  **** 	int tempWriteRequest = (int) writeRequest;
 3834              		.loc 1 355 0
 3835 008a 40F20003 		movw	r3, #:lower16:writeRequest
 3836 008e C0F20003 		movt	r3, #:upper16:writeRequest
 3837 0092 1B68     		ldr	r3, [r3]
 3838 0094 BB61     		str	r3, [r7, #24]
 356:src/modbus.c  **** 	int fromBit = 0;
 3839              		.loc 1 356 0
 3840 0096 0023     		movs	r3, #0
 3841 0098 7B61     		str	r3, [r7, #20]
 357:src/modbus.c  **** 	int toBit = 32;
 3842              		.loc 1 357 0
 3843 009a 2023     		movs	r3, #32
 3844 009c 3B61     		str	r3, [r7, #16]
 358:src/modbus.c  **** 	int shiftRight;
 359:src/modbus.c  **** 	int d;
 360:src/modbus.c  **** 
 361:src/modbus.c  **** 	//Call masking function and store value in r.
 362:src/modbus.c  **** 	unsigned int r = getMask(fromBit, toBit);
 3845              		.loc 1 362 0
 3846 009e 7869     		ldr	r0, [r7, #20]
 3847 00a0 3969     		ldr	r1, [r7, #16]
 3848 00a2 FFF7FEFF 		bl	getMask
 3849 00a6 F860     		str	r0, [r7, #12]
 363:src/modbus.c  **** 
 364:src/modbus.c  **** 	//Get masking done on data from hash and store in result.
 365:src/modbus.c  **** 	unsigned int result = r & s->value;
 3850              		.loc 1 365 0
 3851 00a8 40F20003 		movw	r3, #:lower16:s
 3852 00ac C0F20003 		movt	r3, #:upper16:s
 3853 00b0 1B68     		ldr	r3, [r3]
 3854 00b2 5B68     		ldr	r3, [r3, #4]
 3855 00b4 1A46     		mov	r2, r3
 3856 00b6 FB68     		ldr	r3, [r7, #12]
 3857 00b8 1340     		ands	r3, r3, r2
 3858 00ba 3B62     		str	r3, [r7, #32]
 366:src/modbus.c  **** 
 367:src/modbus.c  **** 	//Else shift right.
 368:src/modbus.c  **** 	for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 3859              		.loc 1 368 0
 3860 00bc 7B69     		ldr	r3, [r7, #20]
 3861 00be 7B62     		str	r3, [r7, #36]
 3862 00c0 05E0     		b	.L124
 3863              	.L125:
 369:src/modbus.c  **** 		result = result >> 1;
 3864              		.loc 1 369 0 discriminator 2
 3865 00c2 3B6A     		ldr	r3, [r7, #32]
 3866 00c4 5B08     		lsrs	r3, r3, #1
 3867 00c6 3B62     		str	r3, [r7, #32]
 368:src/modbus.c  **** 		result = result >> 1;
 3868              		.loc 1 368 0 discriminator 2
 3869 00c8 7B6A     		ldr	r3, [r7, #36]
 3870 00ca 013B     		subs	r3, r3, #1
 3871 00cc 7B62     		str	r3, [r7, #36]
 3872              	.L124:
 368:src/modbus.c  **** 		result = result >> 1;
 3873              		.loc 1 368 0 is_stmt 0 discriminator 1
 3874 00ce 7B6A     		ldr	r3, [r7, #36]
 3875 00d0 002B     		cmp	r3, #0
 3876 00d2 F6DC     		bgt	.L125
 370:src/modbus.c  **** 	}
 371:src/modbus.c  **** 
 372:src/modbus.c  **** 	//printf("Data: 0x%x\n", result);
 373:src/modbus.c  **** 
 374:src/modbus.c  **** 	result = result | tempWriteRequest;
 3877              		.loc 1 374 0 is_stmt 1
 3878 00d4 BB69     		ldr	r3, [r7, #24]
 3879 00d6 3A6A     		ldr	r2, [r7, #32]
 3880 00d8 1343     		orrs	r3, r3, r2
 3881 00da 3B62     		str	r3, [r7, #32]
 375:src/modbus.c  **** 
 376:src/modbus.c  **** 	//Store the data to be sent in response packet one by one till requested bits reached.
 377:src/modbus.c  **** 	//*rPacket = result;
 378:src/modbus.c  **** 	//rPacket++;
 379:src/modbus.c  **** 	*rPacket = tempWriteRequest;
 3882              		.loc 1 379 0
 3883 00dc 40F20003 		movw	r3, #:lower16:rPacket
 3884 00e0 C0F20003 		movt	r3, #:upper16:rPacket
 3885 00e4 1B68     		ldr	r3, [r3]
 3886 00e6 BA69     		ldr	r2, [r7, #24]
 3887 00e8 1A60     		str	r2, [r3]
 380:src/modbus.c  **** 	rPacket++;
 3888              		.loc 1 380 0
 3889 00ea 40F20003 		movw	r3, #:lower16:rPacket
 3890 00ee C0F20003 		movt	r3, #:upper16:rPacket
 3891 00f2 1B68     		ldr	r3, [r3]
 3892 00f4 1A1D     		adds	r2, r3, #4
 3893 00f6 40F20003 		movw	r3, #:lower16:rPacket
 3894 00fa C0F20003 		movt	r3, #:upper16:rPacket
 3895 00fe 1A60     		str	r2, [r3]
 381:src/modbus.c  **** 
 382:src/modbus.c  **** //	for (d = 0; d < (1 + 5); d++) {
 383:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 384:src/modbus.c  **** //	}
 385:src/modbus.c  **** 
 386:src/modbus.c  **** 	return 0;
 3896              		.loc 1 386 0
 3897 0100 0023     		movs	r3, #0
 387:src/modbus.c  **** 
 388:src/modbus.c  **** }
 3898              		.loc 1 388 0
 3899 0102 1846     		mov	r0, r3
 3900 0104 2837     		adds	r7, r7, #40
 3901 0106 BD46     		mov	sp, r7
 3902              		@ sp needed
 3903 0108 80BD     		pop	{r7, pc}
 3904              		.cfi_endproc
 3905              	.LFE10:
 3907 010a 00BF     		.section	.text.writeSingleCoil,"ax",%progbits
 3908              		.align	2
 3909              		.global	writeSingleCoil
 3910              		.thumb
 3911              		.thumb_func
 3913              	writeSingleCoil:
 3914              	.LFB11:
 389:src/modbus.c  **** 
 390:src/modbus.c  **** 
 391:src/modbus.c  **** //TODO : Check what to use for writing ON (0xffff0000 or 0xff00) and OFF (0x00000000 or 0x0000)
 392:src/modbus.c  **** uint32_t writeSingleCoil(uint32_t *qPacket) {
 3915              		.loc 1 392 0
 3916              		.cfi_startproc
 3917              		@ args = 0, pretend = 0, frame = 40
 3918              		@ frame_needed = 1, uses_anonymous_args = 0
 3919 0000 80B5     		push	{r7, lr}
 3920              	.LCFI33:
 3921              		.cfi_def_cfa_offset 8
 3922              		.cfi_offset 7, -8
 3923              		.cfi_offset 14, -4
 3924 0002 8AB0     		sub	sp, sp, #40
 3925              	.LCFI34:
 3926              		.cfi_def_cfa_offset 48
 3927 0004 00AF     		add	r7, sp, #0
 3928              	.LCFI35:
 3929              		.cfi_def_cfa_register 7
 3930 0006 7860     		str	r0, [r7, #4]
 393:src/modbus.c  **** 
 394:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 395:src/modbus.c  **** 	qPacket++;
 3931              		.loc 1 395 0
 3932 0008 7B68     		ldr	r3, [r7, #4]
 3933 000a 0433     		adds	r3, r3, #4
 3934 000c 7B60     		str	r3, [r7, #4]
 396:src/modbus.c  **** 
 397:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 398:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 399:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 3935              		.loc 1 399 0
 3936 000e 7B68     		ldr	r3, [r7, #4]
 3937 0010 1A1D     		adds	r2, r3, #4
 3938 0012 7A60     		str	r2, [r7, #4]
 3939 0014 1A68     		ldr	r2, [r3]
 3940 0016 40F20003 		movw	r3, #:lower16:firstRequest
 3941 001a C0F20003 		movt	r3, #:upper16:firstRequest
 3942 001e 1A60     		str	r2, [r3]
 400:src/modbus.c  **** 
 401:src/modbus.c  **** 	//move the data to be written
 402:src/modbus.c  **** 	uint32_t *writeRequest = qPacket;
 3943              		.loc 1 402 0
 3944 0020 7B68     		ldr	r3, [r7, #4]
 3945 0022 7B62     		str	r3, [r7, #36]
 403:src/modbus.c  **** //	writeRequest+=3;
 404:src/modbus.c  **** 
 405:src/modbus.c  **** 	//stream to be sent back to response packet
 406:src/modbus.c  **** 	*rPacket = (unsigned int) firstRequest;
 3946              		.loc 1 406 0
 3947 0024 40F20003 		movw	r3, #:lower16:rPacket
 3948 0028 C0F20003 		movt	r3, #:upper16:rPacket
 3949 002c 1A68     		ldr	r2, [r3]
 3950 002e 40F20003 		movw	r3, #:lower16:firstRequest
 3951 0032 C0F20003 		movt	r3, #:upper16:firstRequest
 3952 0036 1B68     		ldr	r3, [r3]
 3953 0038 1360     		str	r3, [r2]
 407:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 408:src/modbus.c  **** 	rPacket++;
 3954              		.loc 1 408 0
 3955 003a 40F20003 		movw	r3, #:lower16:rPacket
 3956 003e C0F20003 		movt	r3, #:upper16:rPacket
 3957 0042 1B68     		ldr	r3, [r3]
 3958 0044 1A1D     		adds	r2, r3, #4
 3959 0046 40F20003 		movw	r3, #:lower16:rPacket
 3960 004a C0F20003 		movt	r3, #:upper16:rPacket
 3961 004e 1A60     		str	r2, [r3]
 409:src/modbus.c  **** 
 410:src/modbus.c  **** 	//Fetch first address data.
 411:src/modbus.c  **** 	s = getData(firstRequest++);
 3962              		.loc 1 411 0
 3963 0050 40F20003 		movw	r3, #:lower16:firstRequest
 3964 0054 C0F20003 		movt	r3, #:upper16:firstRequest
 3965 0058 1B68     		ldr	r3, [r3]
 3966 005a 1A46     		mov	r2, r3
 3967 005c 511C     		adds	r1, r2, #1
 3968 005e 40F20003 		movw	r3, #:lower16:firstRequest
 3969 0062 C0F20003 		movt	r3, #:upper16:firstRequest
 3970 0066 1960     		str	r1, [r3]
 3971 0068 1346     		mov	r3, r2
 3972 006a 1846     		mov	r0, r3
 3973 006c FFF7FEFF 		bl	getData
 3974 0070 0246     		mov	r2, r0
 3975 0072 40F20003 		movw	r3, #:lower16:s
 3976 0076 C0F20003 		movt	r3, #:upper16:s
 3977 007a 1A60     		str	r2, [r3]
 412:src/modbus.c  **** 
 413:src/modbus.c  **** 	//int tempWriteRequest = (int) writeRequest;
 414:src/modbus.c  **** 	int fromBit = 0;
 3978              		.loc 1 414 0
 3979 007c 0023     		movs	r3, #0
 3980 007e 3B62     		str	r3, [r7, #32]
 415:src/modbus.c  **** 	int toBit = 7;
 3981              		.loc 1 415 0
 3982 0080 0723     		movs	r3, #7
 3983 0082 FB61     		str	r3, [r7, #28]
 416:src/modbus.c  **** 	int shiftRight;
 417:src/modbus.c  **** 	int d;
 418:src/modbus.c  **** 	int count = 0;
 3984              		.loc 1 418 0
 3985 0084 0023     		movs	r3, #0
 3986 0086 7B61     		str	r3, [r7, #20]
 419:src/modbus.c  **** 	unsigned int result;
 420:src/modbus.c  **** 
 421:src/modbus.c  **** 	while(count < 2){
 3987              		.loc 1 421 0
 3988 0088 3DE0     		b	.L128
 3989              	.L131:
 3990              	.LBB12:
 422:src/modbus.c  **** 		//Call masking function and store value in r.
 423:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 3991              		.loc 1 423 0
 3992 008a 386A     		ldr	r0, [r7, #32]
 3993 008c F969     		ldr	r1, [r7, #28]
 3994 008e FFF7FEFF 		bl	getMask
 3995 0092 F860     		str	r0, [r7, #12]
 424:src/modbus.c  **** 
 425:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 426:src/modbus.c  **** 		result = r & s->value;
 3996              		.loc 1 426 0
 3997 0094 40F20003 		movw	r3, #:lower16:s
 3998 0098 C0F20003 		movt	r3, #:upper16:s
 3999 009c 1B68     		ldr	r3, [r3]
 4000 009e 5B68     		ldr	r3, [r3, #4]
 4001 00a0 1A46     		mov	r2, r3
 4002 00a2 FB68     		ldr	r3, [r7, #12]
 4003 00a4 1340     		ands	r3, r3, r2
 4004 00a6 3B61     		str	r3, [r7, #16]
 427:src/modbus.c  **** 
 428:src/modbus.c  **** 		//Else shift right.
 429:src/modbus.c  **** 		for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4005              		.loc 1 429 0
 4006 00a8 3B6A     		ldr	r3, [r7, #32]
 4007 00aa BB61     		str	r3, [r7, #24]
 4008 00ac 05E0     		b	.L129
 4009              	.L130:
 430:src/modbus.c  **** 			result = result >> 1;
 4010              		.loc 1 430 0 discriminator 2
 4011 00ae 3B69     		ldr	r3, [r7, #16]
 4012 00b0 5B08     		lsrs	r3, r3, #1
 4013 00b2 3B61     		str	r3, [r7, #16]
 429:src/modbus.c  **** 			result = result >> 1;
 4014              		.loc 1 429 0 discriminator 2
 4015 00b4 BB69     		ldr	r3, [r7, #24]
 4016 00b6 013B     		subs	r3, r3, #1
 4017 00b8 BB61     		str	r3, [r7, #24]
 4018              	.L129:
 429:src/modbus.c  **** 			result = result >> 1;
 4019              		.loc 1 429 0 is_stmt 0 discriminator 1
 4020 00ba BB69     		ldr	r3, [r7, #24]
 4021 00bc 002B     		cmp	r3, #0
 4022 00be F6DC     		bgt	.L130
 431:src/modbus.c  **** 		}
 432:src/modbus.c  **** 
 433:src/modbus.c  **** 		*rPacket = *writeRequest;
 4023              		.loc 1 433 0 is_stmt 1
 4024 00c0 40F20003 		movw	r3, #:lower16:rPacket
 4025 00c4 C0F20003 		movt	r3, #:upper16:rPacket
 4026 00c8 1B68     		ldr	r3, [r3]
 4027 00ca 7A6A     		ldr	r2, [r7, #36]
 4028 00cc 1268     		ldr	r2, [r2]
 4029 00ce 1A60     		str	r2, [r3]
 434:src/modbus.c  **** 		rPacket++;
 4030              		.loc 1 434 0
 4031 00d0 40F20003 		movw	r3, #:lower16:rPacket
 4032 00d4 C0F20003 		movt	r3, #:upper16:rPacket
 4033 00d8 1B68     		ldr	r3, [r3]
 4034 00da 1A1D     		adds	r2, r3, #4
 4035 00dc 40F20003 		movw	r3, #:lower16:rPacket
 4036 00e0 C0F20003 		movt	r3, #:upper16:rPacket
 4037 00e4 1A60     		str	r2, [r3]
 435:src/modbus.c  **** 
 436:src/modbus.c  **** 		result = result | *writeRequest++;
 4038              		.loc 1 436 0
 4039 00e6 7B6A     		ldr	r3, [r7, #36]
 4040 00e8 1A1D     		adds	r2, r3, #4
 4041 00ea 7A62     		str	r2, [r7, #36]
 4042 00ec 1B68     		ldr	r3, [r3]
 4043 00ee 3A69     		ldr	r2, [r7, #16]
 4044 00f0 1343     		orrs	r3, r3, r2
 4045 00f2 3B61     		str	r3, [r7, #16]
 437:src/modbus.c  **** 
 438:src/modbus.c  **** 		fromBit = fromBit + 8;
 4046              		.loc 1 438 0
 4047 00f4 3B6A     		ldr	r3, [r7, #32]
 4048 00f6 0833     		adds	r3, r3, #8
 4049 00f8 3B62     		str	r3, [r7, #32]
 439:src/modbus.c  **** 		toBit = toBit + 8;
 4050              		.loc 1 439 0
 4051 00fa FB69     		ldr	r3, [r7, #28]
 4052 00fc 0833     		adds	r3, r3, #8
 4053 00fe FB61     		str	r3, [r7, #28]
 440:src/modbus.c  **** 
 441:src/modbus.c  **** 		count++;
 4054              		.loc 1 441 0
 4055 0100 7B69     		ldr	r3, [r7, #20]
 4056 0102 0133     		adds	r3, r3, #1
 4057 0104 7B61     		str	r3, [r7, #20]
 4058              	.L128:
 4059              	.LBE12:
 421:src/modbus.c  **** 		//Call masking function and store value in r.
 4060              		.loc 1 421 0 discriminator 1
 4061 0106 7B69     		ldr	r3, [r7, #20]
 4062 0108 012B     		cmp	r3, #1
 4063 010a BEDD     		ble	.L131
 442:src/modbus.c  **** 	}
 443:src/modbus.c  **** //		//Store the data to be sent in response packet one by one till requested bits reached.
 444:src/modbus.c  **** //		*rPacket = result;
 445:src/modbus.c  **** //		rPacket++;
 446:src/modbus.c  **** //		//printf("Data: 0x%x\n", result);
 447:src/modbus.c  **** 
 448:src/modbus.c  **** 
 449:src/modbus.c  **** //	for (d = 0; d < (1 + 3); d++) {
 450:src/modbus.c  **** //		printf("\n0x%x", arrayResponsePacket[d]);
 451:src/modbus.c  **** //	}
 452:src/modbus.c  **** 
 453:src/modbus.c  **** 	return 0;
 4064              		.loc 1 453 0
 4065 010c 0023     		movs	r3, #0
 454:src/modbus.c  **** 
 455:src/modbus.c  **** }
 4066              		.loc 1 455 0
 4067 010e 1846     		mov	r0, r3
 4068 0110 2837     		adds	r7, r7, #40
 4069 0112 BD46     		mov	sp, r7
 4070              		@ sp needed
 4071 0114 80BD     		pop	{r7, pc}
 4072              		.cfi_endproc
 4073              	.LFE11:
 4075 0116 00BF     		.section	.text.readInputRegisters,"ax",%progbits
 4076              		.align	2
 4077              		.global	readInputRegisters
 4078              		.thumb
 4079              		.thumb_func
 4081              	readInputRegisters:
 4082              	.LFB12:
 456:src/modbus.c  **** 
 457:src/modbus.c  **** uint32_t readInputRegisters(uint32_t *qPacket) {
 4083              		.loc 1 457 0
 4084              		.cfi_startproc
 4085              		@ args = 0, pretend = 0, frame = 48
 4086              		@ frame_needed = 1, uses_anonymous_args = 0
 4087 0000 80B5     		push	{r7, lr}
 4088              	.LCFI36:
 4089              		.cfi_def_cfa_offset 8
 4090              		.cfi_offset 7, -8
 4091              		.cfi_offset 14, -4
 4092 0002 8CB0     		sub	sp, sp, #48
 4093              	.LCFI37:
 4094              		.cfi_def_cfa_offset 56
 4095 0004 00AF     		add	r7, sp, #0
 4096              	.LCFI38:
 4097              		.cfi_def_cfa_register 7
 4098 0006 7860     		str	r0, [r7, #4]
 458:src/modbus.c  **** 
 459:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 460:src/modbus.c  **** 	qPacket++;
 4099              		.loc 1 460 0
 4100 0008 7B68     		ldr	r3, [r7, #4]
 4101 000a 0433     		adds	r3, r3, #4
 4102 000c 7B60     		str	r3, [r7, #4]
 461:src/modbus.c  **** 
 462:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 463:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 464:src/modbus.c  **** 	firstRequest = 0x7530 + *qPacket++;
 4103              		.loc 1 464 0
 4104 000e 7B68     		ldr	r3, [r7, #4]
 4105 0010 1A1D     		adds	r2, r3, #4
 4106 0012 7A60     		str	r2, [r7, #4]
 4107 0014 1B68     		ldr	r3, [r3]
 4108 0016 03F5EA42 		add	r2, r3, #29952
 4109 001a 3032     		adds	r2, r2, #48
 4110 001c 40F20003 		movw	r3, #:lower16:firstRequest
 4111 0020 C0F20003 		movt	r3, #:upper16:firstRequest
 4112 0024 1A60     		str	r2, [r3]
 465:src/modbus.c  **** 	totalRequest = *qPacket;
 4113              		.loc 1 465 0
 4114 0026 7B68     		ldr	r3, [r7, #4]
 4115 0028 1A68     		ldr	r2, [r3]
 4116 002a 40F20003 		movw	r3, #:lower16:totalRequest
 4117 002e C0F20003 		movt	r3, #:upper16:totalRequest
 4118 0032 1A60     		str	r2, [r3]
 466:src/modbus.c  **** 
 467:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 468:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4119              		.loc 1 468 0
 4120 0034 40F20003 		movw	r3, #:lower16:totalRequest
 4121 0038 C0F20003 		movt	r3, #:upper16:totalRequest
 4122 003c 1B68     		ldr	r3, [r3]
 4123 003e DB08     		lsrs	r3, r3, #3
 4124 0040 0133     		adds	r3, r3, #1
 4125 0042 FB60     		str	r3, [r7, #12]
 469:src/modbus.c  **** 
 470:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 471:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4126              		.loc 1 471 0
 4127 0044 40F20003 		movw	r3, #:lower16:rPacket
 4128 0048 C0F20003 		movt	r3, #:upper16:rPacket
 4129 004c 1B68     		ldr	r3, [r3]
 4130 004e FA68     		ldr	r2, [r7, #12]
 4131 0050 1A60     		str	r2, [r3]
 472:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 473:src/modbus.c  **** 	rPacket++;
 4132              		.loc 1 473 0
 4133 0052 40F20003 		movw	r3, #:lower16:rPacket
 4134 0056 C0F20003 		movt	r3, #:upper16:rPacket
 4135 005a 1B68     		ldr	r3, [r3]
 4136 005c 1A1D     		adds	r2, r3, #4
 4137 005e 40F20003 		movw	r3, #:lower16:rPacket
 4138 0062 C0F20003 		movt	r3, #:upper16:rPacket
 4139 0066 1A60     		str	r2, [r3]
 474:src/modbus.c  **** 
 475:src/modbus.c  **** 	//Fetch first address data.
 476:src/modbus.c  **** 	s = getData(firstRequest++);
 4140              		.loc 1 476 0
 4141 0068 40F20003 		movw	r3, #:lower16:firstRequest
 4142 006c C0F20003 		movt	r3, #:upper16:firstRequest
 4143 0070 1B68     		ldr	r3, [r3]
 4144 0072 1A46     		mov	r2, r3
 4145 0074 511C     		adds	r1, r2, #1
 4146 0076 40F20003 		movw	r3, #:lower16:firstRequest
 4147 007a C0F20003 		movt	r3, #:upper16:firstRequest
 4148 007e 1960     		str	r1, [r3]
 4149 0080 1346     		mov	r3, r2
 4150 0082 1846     		mov	r0, r3
 4151 0084 FFF7FEFF 		bl	getData
 4152 0088 0246     		mov	r2, r0
 4153 008a 40F20003 		movw	r3, #:lower16:s
 4154 008e C0F20003 		movt	r3, #:upper16:s
 4155 0092 1A60     		str	r2, [r3]
 477:src/modbus.c  **** 
 478:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4156              		.loc 1 478 0
 4157 0094 40F20003 		movw	r3, #:lower16:totalRequest
 4158 0098 C0F20003 		movt	r3, #:upper16:totalRequest
 4159 009c 1B68     		ldr	r3, [r3]
 4160 009e FB62     		str	r3, [r7, #44]
 479:src/modbus.c  **** 	int count = 0;
 4161              		.loc 1 479 0
 4162 00a0 0023     		movs	r3, #0
 4163 00a2 BB62     		str	r3, [r7, #40]
 480:src/modbus.c  **** 	int fromBit = 0;
 4164              		.loc 1 480 0
 4165 00a4 0023     		movs	r3, #0
 4166 00a6 7B62     		str	r3, [r7, #36]
 481:src/modbus.c  **** 	int toBit = 7;
 4167              		.loc 1 481 0
 4168 00a8 0723     		movs	r3, #7
 4169 00aa 3B62     		str	r3, [r7, #32]
 482:src/modbus.c  **** 	int shiftRight;
 483:src/modbus.c  **** 	int flag = 0;
 4170              		.loc 1 483 0
 4171 00ac 0023     		movs	r3, #0
 4172 00ae BB61     		str	r3, [r7, #24]
 484:src/modbus.c  **** 	int maxCount = 0;
 4173              		.loc 1 484 0
 4174 00b0 0023     		movs	r3, #0
 4175 00b2 7B61     		str	r3, [r7, #20]
 485:src/modbus.c  **** 	//int d;
 486:src/modbus.c  **** 
 487:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4176              		.loc 1 487 0
 4177 00b4 8DE0     		b	.L135
 4178              	.L144:
 4179              	.LBB13:
 488:src/modbus.c  **** 
 489:src/modbus.c  **** 		if (totalRequest < 8) {
 4180              		.loc 1 489 0
 4181 00b6 40F20003 		movw	r3, #:lower16:totalRequest
 4182 00ba C0F20003 		movt	r3, #:upper16:totalRequest
 4183 00be 1B68     		ldr	r3, [r3]
 4184 00c0 072B     		cmp	r3, #7
 4185 00c2 06D8     		bhi	.L136
 490:src/modbus.c  **** 			toBit = totalRequest - 1;
 4186              		.loc 1 490 0
 4187 00c4 40F20003 		movw	r3, #:lower16:totalRequest
 4188 00c8 C0F20003 		movt	r3, #:upper16:totalRequest
 4189 00cc 1B68     		ldr	r3, [r3]
 4190 00ce 013B     		subs	r3, r3, #1
 4191 00d0 3B62     		str	r3, [r7, #32]
 4192              	.L136:
 491:src/modbus.c  **** 		}
 492:src/modbus.c  **** 
 493:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 494:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4193              		.loc 1 494 0
 4194 00d2 FA6A     		ldr	r2, [r7, #44]
 4195 00d4 40F20003 		movw	r3, #:lower16:totalRequest
 4196 00d8 C0F20003 		movt	r3, #:upper16:totalRequest
 4197 00dc 1B68     		ldr	r3, [r3]
 4198 00de 03F00703 		and	r3, r3, #7
 4199 00e2 9A42     		cmp	r2, r3
 4200 00e4 0BD1     		bne	.L137
 4201              		.loc 1 494 0 is_stmt 0 discriminator 1
 4202 00e6 BB69     		ldr	r3, [r7, #24]
 4203 00e8 012B     		cmp	r3, #1
 4204 00ea 08D1     		bne	.L137
 495:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4205              		.loc 1 495 0 is_stmt 1
 4206 00ec 40F20003 		movw	r3, #:lower16:totalRequest
 4207 00f0 C0F20003 		movt	r3, #:upper16:totalRequest
 4208 00f4 1B68     		ldr	r3, [r3]
 4209 00f6 03F00703 		and	r3, r3, #7
 4210 00fa 013B     		subs	r3, r3, #1
 4211 00fc 3B62     		str	r3, [r7, #32]
 4212              	.L137:
 496:src/modbus.c  **** 		}
 497:src/modbus.c  **** 
 498:src/modbus.c  **** 		//Call masking function and store value in r.
 499:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4213              		.loc 1 499 0
 4214 00fe 786A     		ldr	r0, [r7, #36]
 4215 0100 396A     		ldr	r1, [r7, #32]
 4216 0102 FFF7FEFF 		bl	getMask
 4217 0106 B860     		str	r0, [r7, #8]
 500:src/modbus.c  **** 
 501:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 502:src/modbus.c  **** 		unsigned int result = r & s->value;
 4218              		.loc 1 502 0
 4219 0108 40F20003 		movw	r3, #:lower16:s
 4220 010c C0F20003 		movt	r3, #:upper16:s
 4221 0110 1B68     		ldr	r3, [r3]
 4222 0112 5B68     		ldr	r3, [r3, #4]
 4223 0114 1A46     		mov	r2, r3
 4224 0116 BB68     		ldr	r3, [r7, #8]
 4225 0118 1340     		ands	r3, r3, r2
 4226 011a 3B61     		str	r3, [r7, #16]
 503:src/modbus.c  **** 
 504:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 505:src/modbus.c  **** 		if (toBit == 7) {
 4227              		.loc 1 505 0
 4228 011c 3B6A     		ldr	r3, [r7, #32]
 4229 011e 072B     		cmp	r3, #7
 4230 0120 00D1     		bne	.L138
 506:src/modbus.c  **** 			goto next;
 4231              		.loc 1 506 0
 4232 0122 0BE0     		b	.L139
 4233              	.L138:
 507:src/modbus.c  **** 		}
 508:src/modbus.c  **** 
 509:src/modbus.c  **** 		//Else shift right.
 510:src/modbus.c  **** 		else {
 511:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4234              		.loc 1 511 0
 4235 0124 7B6A     		ldr	r3, [r7, #36]
 4236 0126 FB61     		str	r3, [r7, #28]
 4237 0128 05E0     		b	.L140
 4238              	.L141:
 512:src/modbus.c  **** 				result = result >> 1;
 4239              		.loc 1 512 0 discriminator 2
 4240 012a 3B69     		ldr	r3, [r7, #16]
 4241 012c 5B08     		lsrs	r3, r3, #1
 4242 012e 3B61     		str	r3, [r7, #16]
 511:src/modbus.c  **** 				result = result >> 1;
 4243              		.loc 1 511 0 discriminator 2
 4244 0130 FB69     		ldr	r3, [r7, #28]
 4245 0132 013B     		subs	r3, r3, #1
 4246 0134 FB61     		str	r3, [r7, #28]
 4247              	.L140:
 511:src/modbus.c  **** 				result = result >> 1;
 4248              		.loc 1 511 0 is_stmt 0 discriminator 1
 4249 0136 FB69     		ldr	r3, [r7, #28]
 4250 0138 002B     		cmp	r3, #0
 4251 013a F6DC     		bgt	.L141
 4252              	.L139:
 513:src/modbus.c  **** 			}
 514:src/modbus.c  **** 		}
 515:src/modbus.c  **** 
 516:src/modbus.c  **** 		//Label
 517:src/modbus.c  **** 		next:
 518:src/modbus.c  **** 
 519:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 520:src/modbus.c  **** 		*rPacket = result;
 4253              		.loc 1 520 0 is_stmt 1
 4254 013c 40F20003 		movw	r3, #:lower16:rPacket
 4255 0140 C0F20003 		movt	r3, #:upper16:rPacket
 4256 0144 1B68     		ldr	r3, [r3]
 4257 0146 3A69     		ldr	r2, [r7, #16]
 4258 0148 1A60     		str	r2, [r3]
 521:src/modbus.c  **** 		rPacket++;
 4259              		.loc 1 521 0
 4260 014a 40F20003 		movw	r3, #:lower16:rPacket
 4261 014e C0F20003 		movt	r3, #:upper16:rPacket
 4262 0152 1B68     		ldr	r3, [r3]
 4263 0154 1A1D     		adds	r2, r3, #4
 4264 0156 40F20003 		movw	r3, #:lower16:rPacket
 4265 015a C0F20003 		movt	r3, #:upper16:rPacket
 4266 015e 1A60     		str	r2, [r3]
 522:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 523:src/modbus.c  **** 
 524:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 525:src/modbus.c  **** 		count++;
 4267              		.loc 1 525 0
 4268 0160 BB6A     		ldr	r3, [r7, #40]
 4269 0162 0133     		adds	r3, r3, #1
 4270 0164 BB62     		str	r3, [r7, #40]
 526:src/modbus.c  **** 
 527:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 528:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4271              		.loc 1 528 0
 4272 0166 FB6A     		ldr	r3, [r7, #44]
 4273 0168 083B     		subs	r3, r3, #8
 4274 016a FB62     		str	r3, [r7, #44]
 529:src/modbus.c  **** 
 530:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 531:src/modbus.c  **** 		if (totalRequest >= 32) {
 4275              		.loc 1 531 0
 4276 016c 40F20003 		movw	r3, #:lower16:totalRequest
 4277 0170 C0F20003 		movt	r3, #:upper16:totalRequest
 4278 0174 1B68     		ldr	r3, [r3]
 4279 0176 1F2B     		cmp	r3, #31
 4280 0178 01D9     		bls	.L142
 532:src/modbus.c  **** 			maxCount = 4;
 4281              		.loc 1 532 0
 4282 017a 0423     		movs	r3, #4
 4283 017c 7B61     		str	r3, [r7, #20]
 4284              	.L142:
 533:src/modbus.c  **** 		}
 534:src/modbus.c  **** 
 535:src/modbus.c  **** 		//If not then set
 536:src/modbus.c  **** 		/*else{
 537:src/modbus.c  **** 		 count = 0;
 538:src/modbus.c  **** 		 fromBit = 0;
 539:src/modbus.c  **** 		 toBit = 7;
 540:src/modbus.c  **** 		 flag = 1;
 541:src/modbus.c  **** 		 goto again;
 542:src/modbus.c  **** 		 }*/
 543:src/modbus.c  **** 
 544:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 545:src/modbus.c  **** 		if (count == maxCount) {
 4285              		.loc 1 545 0
 4286 017e BA6A     		ldr	r2, [r7, #40]
 4287 0180 7B69     		ldr	r3, [r7, #20]
 4288 0182 9A42     		cmp	r2, r3
 4289 0184 1FD1     		bne	.L143
 546:src/modbus.c  **** 			s = getData(firstRequest++);
 4290              		.loc 1 546 0
 4291 0186 40F20003 		movw	r3, #:lower16:firstRequest
 4292 018a C0F20003 		movt	r3, #:upper16:firstRequest
 4293 018e 1B68     		ldr	r3, [r3]
 4294 0190 1A46     		mov	r2, r3
 4295 0192 511C     		adds	r1, r2, #1
 4296 0194 40F20003 		movw	r3, #:lower16:firstRequest
 4297 0198 C0F20003 		movt	r3, #:upper16:firstRequest
 4298 019c 1960     		str	r1, [r3]
 4299 019e 1346     		mov	r3, r2
 4300 01a0 1846     		mov	r0, r3
 4301 01a2 FFF7FEFF 		bl	getData
 4302 01a6 0246     		mov	r2, r0
 4303 01a8 40F20003 		movw	r3, #:lower16:s
 4304 01ac C0F20003 		movt	r3, #:upper16:s
 4305 01b0 1A60     		str	r2, [r3]
 547:src/modbus.c  **** 			count = 0;
 4306              		.loc 1 547 0
 4307 01b2 0023     		movs	r3, #0
 4308 01b4 BB62     		str	r3, [r7, #40]
 548:src/modbus.c  **** 			fromBit = 0;
 4309              		.loc 1 548 0
 4310 01b6 0023     		movs	r3, #0
 4311 01b8 7B62     		str	r3, [r7, #36]
 549:src/modbus.c  **** 			toBit = 7;
 4312              		.loc 1 549 0
 4313 01ba 0723     		movs	r3, #7
 4314 01bc 3B62     		str	r3, [r7, #32]
 550:src/modbus.c  **** 			flag = 1;
 4315              		.loc 1 550 0
 4316 01be 0123     		movs	r3, #1
 4317 01c0 BB61     		str	r3, [r7, #24]
 551:src/modbus.c  **** 			goto again;
 4318              		.loc 1 551 0
 4319 01c2 00BF     		nop
 4320              	.L134:
 4321              	.LBE13:
 487:src/modbus.c  **** 
 4322              		.loc 1 487 0
 4323 01c4 05E0     		b	.L135
 4324              	.L143:
 4325              	.LBB14:
 552:src/modbus.c  **** 		}
 553:src/modbus.c  **** 
 554:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 555:src/modbus.c  **** 		fromBit = fromBit + 8;
 4326              		.loc 1 555 0
 4327 01c6 7B6A     		ldr	r3, [r7, #36]
 4328 01c8 0833     		adds	r3, r3, #8
 4329 01ca 7B62     		str	r3, [r7, #36]
 556:src/modbus.c  **** 		toBit = toBit + 8;
 4330              		.loc 1 556 0
 4331 01cc 3B6A     		ldr	r3, [r7, #32]
 4332 01ce 0833     		adds	r3, r3, #8
 4333 01d0 3B62     		str	r3, [r7, #32]
 4334              	.L135:
 4335              	.LBE14:
 487:src/modbus.c  **** 
 4336              		.loc 1 487 0 discriminator 1
 4337 01d2 FB6A     		ldr	r3, [r7, #44]
 4338 01d4 002B     		cmp	r3, #0
 4339 01d6 3FF76EAF 		bgt	.L144
 557:src/modbus.c  **** 	}
 558:src/modbus.c  **** /*
 559:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 560:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 561:src/modbus.c  **** 	}
 562:src/modbus.c  **** 
 563:src/modbus.c  **** */
 564:src/modbus.c  **** 	return 0;
 4340              		.loc 1 564 0
 4341 01da 0023     		movs	r3, #0
 565:src/modbus.c  **** 
 566:src/modbus.c  **** }
 4342              		.loc 1 566 0
 4343 01dc 1846     		mov	r0, r3
 4344 01de 3037     		adds	r7, r7, #48
 4345 01e0 BD46     		mov	sp, r7
 4346              		@ sp needed
 4347 01e2 80BD     		pop	{r7, pc}
 4348              		.cfi_endproc
 4349              	.LFE12:
 4351              		.section	.text.readHoldingRegisters,"ax",%progbits
 4352              		.align	2
 4353              		.global	readHoldingRegisters
 4354              		.thumb
 4355              		.thumb_func
 4357              	readHoldingRegisters:
 4358              	.LFB13:
 567:src/modbus.c  **** 
 568:src/modbus.c  **** uint32_t readHoldingRegisters(uint32_t *qPacket) {
 4359              		.loc 1 568 0
 4360              		.cfi_startproc
 4361              		@ args = 0, pretend = 0, frame = 48
 4362              		@ frame_needed = 1, uses_anonymous_args = 0
 4363 0000 80B5     		push	{r7, lr}
 4364              	.LCFI39:
 4365              		.cfi_def_cfa_offset 8
 4366              		.cfi_offset 7, -8
 4367              		.cfi_offset 14, -4
 4368 0002 8CB0     		sub	sp, sp, #48
 4369              	.LCFI40:
 4370              		.cfi_def_cfa_offset 56
 4371 0004 00AF     		add	r7, sp, #0
 4372              	.LCFI41:
 4373              		.cfi_def_cfa_register 7
 4374 0006 7860     		str	r0, [r7, #4]
 569:src/modbus.c  **** 
 570:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 571:src/modbus.c  **** 	qPacket++;
 4375              		.loc 1 571 0
 4376 0008 7B68     		ldr	r3, [r7, #4]
 4377 000a 0433     		adds	r3, r3, #4
 4378 000c 7B60     		str	r3, [r7, #4]
 572:src/modbus.c  **** 
 573:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 574:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 575:src/modbus.c  **** 	firstRequest = 0x9C40 | *qPacket++;
 4379              		.loc 1 575 0
 4380 000e 7B68     		ldr	r3, [r7, #4]
 4381 0010 1A1D     		adds	r2, r3, #4
 4382 0012 7A60     		str	r2, [r7, #4]
 4383 0014 1B68     		ldr	r3, [r3]
 4384 0016 43F41C42 		orr	r2, r3, #39936
 4385 001a 42F04002 		orr	r2, r2, #64
 4386 001e 40F20003 		movw	r3, #:lower16:firstRequest
 4387 0022 C0F20003 		movt	r3, #:upper16:firstRequest
 4388 0026 1A60     		str	r2, [r3]
 576:src/modbus.c  **** 	totalRequest = *qPacket;
 4389              		.loc 1 576 0
 4390 0028 7B68     		ldr	r3, [r7, #4]
 4391 002a 1A68     		ldr	r2, [r3]
 4392 002c 40F20003 		movw	r3, #:lower16:totalRequest
 4393 0030 C0F20003 		movt	r3, #:upper16:totalRequest
 4394 0034 1A60     		str	r2, [r3]
 577:src/modbus.c  **** 
 578:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 579:src/modbus.c  **** 	unsigned int byteStream = totalRequest * 2;
 4395              		.loc 1 579 0
 4396 0036 40F20003 		movw	r3, #:lower16:totalRequest
 4397 003a C0F20003 		movt	r3, #:upper16:totalRequest
 4398 003e 1B68     		ldr	r3, [r3]
 4399 0040 5B00     		lsls	r3, r3, #1
 4400 0042 BB61     		str	r3, [r7, #24]
 580:src/modbus.c  **** 
 581:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to response packet
 582:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4401              		.loc 1 582 0
 4402 0044 40F20003 		movw	r3, #:lower16:rPacket
 4403 0048 C0F20003 		movt	r3, #:upper16:rPacket
 4404 004c 1B68     		ldr	r3, [r3]
 4405 004e BA69     		ldr	r2, [r7, #24]
 4406 0050 1A60     		str	r2, [r3]
 583:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 584:src/modbus.c  **** 	rPacket++;
 4407              		.loc 1 584 0
 4408 0052 40F20003 		movw	r3, #:lower16:rPacket
 4409 0056 C0F20003 		movt	r3, #:upper16:rPacket
 4410 005a 1B68     		ldr	r3, [r3]
 4411 005c 1A1D     		adds	r2, r3, #4
 4412 005e 40F20003 		movw	r3, #:lower16:rPacket
 4413 0062 C0F20003 		movt	r3, #:upper16:rPacket
 4414 0066 1A60     		str	r2, [r3]
 585:src/modbus.c  **** 
 586:src/modbus.c  **** 	//Fetch first address data.
 587:src/modbus.c  **** 	s = getData(firstRequest++);
 4415              		.loc 1 587 0
 4416 0068 40F20003 		movw	r3, #:lower16:firstRequest
 4417 006c C0F20003 		movt	r3, #:upper16:firstRequest
 4418 0070 1B68     		ldr	r3, [r3]
 4419 0072 1A46     		mov	r2, r3
 4420 0074 511C     		adds	r1, r2, #1
 4421 0076 40F20003 		movw	r3, #:lower16:firstRequest
 4422 007a C0F20003 		movt	r3, #:upper16:firstRequest
 4423 007e 1960     		str	r1, [r3]
 4424 0080 1346     		mov	r3, r2
 4425 0082 1846     		mov	r0, r3
 4426 0084 FFF7FEFF 		bl	getData
 4427 0088 0246     		mov	r2, r0
 4428 008a 40F20003 		movw	r3, #:lower16:s
 4429 008e C0F20003 		movt	r3, #:upper16:s
 4430 0092 1A60     		str	r2, [r3]
 588:src/modbus.c  **** 
 589:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4431              		.loc 1 589 0
 4432 0094 40F20003 		movw	r3, #:lower16:totalRequest
 4433 0098 C0F20003 		movt	r3, #:upper16:totalRequest
 4434 009c 1B68     		ldr	r3, [r3]
 4435 009e FB62     		str	r3, [r7, #44]
 590:src/modbus.c  **** 	int fromBit = 0;
 4436              		.loc 1 590 0
 4437 00a0 0023     		movs	r3, #0
 4438 00a2 7B61     		str	r3, [r7, #20]
 591:src/modbus.c  **** 	int toBit = 15;
 4439              		.loc 1 591 0
 4440 00a4 0F23     		movs	r3, #15
 4441 00a6 3B61     		str	r3, [r7, #16]
 592:src/modbus.c  **** 	int shiftRight;
 593:src/modbus.c  **** 	//int d;
 594:src/modbus.c  **** 
 595:src/modbus.c  **** 	while (tempTotalRequest > 0) {
 4442              		.loc 1 595 0
 4443 00a8 53E0     		b	.L147
 4444              	.L152:
 4445              	.LBB15:
 596:src/modbus.c  **** 
 597:src/modbus.c  **** 		int fromBit = 0;
 4446              		.loc 1 597 0
 4447 00aa 0023     		movs	r3, #0
 4448 00ac 7B62     		str	r3, [r7, #36]
 598:src/modbus.c  **** 		int toBit = 7;
 4449              		.loc 1 598 0
 4450 00ae 0723     		movs	r3, #7
 4451 00b0 3B62     		str	r3, [r7, #32]
 599:src/modbus.c  **** 
 600:src/modbus.c  **** 		while(fromBit <= 8){
 4452              		.loc 1 600 0
 4453 00b2 32E0     		b	.L148
 4454              	.L151:
 4455              	.LBB16:
 601:src/modbus.c  **** 				//Call masking function and store value in r.
 602:src/modbus.c  **** 				unsigned int r = getMask(fromBit, toBit);
 4456              		.loc 1 602 0
 4457 00b4 786A     		ldr	r0, [r7, #36]
 4458 00b6 396A     		ldr	r1, [r7, #32]
 4459 00b8 FFF7FEFF 		bl	getMask
 4460 00bc F860     		str	r0, [r7, #12]
 603:src/modbus.c  **** 
 604:src/modbus.c  **** 				//Get masking done on data from hash and store in result.
 605:src/modbus.c  **** 				unsigned int result = r & s->value;
 4461              		.loc 1 605 0
 4462 00be 40F20003 		movw	r3, #:lower16:s
 4463 00c2 C0F20003 		movt	r3, #:upper16:s
 4464 00c6 1B68     		ldr	r3, [r3]
 4465 00c8 5B68     		ldr	r3, [r3, #4]
 4466 00ca 1A46     		mov	r2, r3
 4467 00cc FB68     		ldr	r3, [r7, #12]
 4468 00ce 1340     		ands	r3, r3, r2
 4469 00d0 FB61     		str	r3, [r7, #28]
 606:src/modbus.c  **** 
 607:src/modbus.c  **** 				for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4470              		.loc 1 607 0
 4471 00d2 7B6A     		ldr	r3, [r7, #36]
 4472 00d4 BB62     		str	r3, [r7, #40]
 4473 00d6 05E0     		b	.L149
 4474              	.L150:
 608:src/modbus.c  **** 					result = result >> 1;
 4475              		.loc 1 608 0 discriminator 2
 4476 00d8 FB69     		ldr	r3, [r7, #28]
 4477 00da 5B08     		lsrs	r3, r3, #1
 4478 00dc FB61     		str	r3, [r7, #28]
 607:src/modbus.c  **** 					result = result >> 1;
 4479              		.loc 1 607 0 discriminator 2
 4480 00de BB6A     		ldr	r3, [r7, #40]
 4481 00e0 013B     		subs	r3, r3, #1
 4482 00e2 BB62     		str	r3, [r7, #40]
 4483              	.L149:
 607:src/modbus.c  **** 					result = result >> 1;
 4484              		.loc 1 607 0 is_stmt 0 discriminator 1
 4485 00e4 BB6A     		ldr	r3, [r7, #40]
 4486 00e6 002B     		cmp	r3, #0
 4487 00e8 F6DC     		bgt	.L150
 609:src/modbus.c  **** 				}
 610:src/modbus.c  **** 
 611:src/modbus.c  **** 				//Store the data to be sent in response packet one by one till requested bits reached.
 612:src/modbus.c  **** 				*rPacket = result;
 4488              		.loc 1 612 0 is_stmt 1
 4489 00ea 40F20003 		movw	r3, #:lower16:rPacket
 4490 00ee C0F20003 		movt	r3, #:upper16:rPacket
 4491 00f2 1B68     		ldr	r3, [r3]
 4492 00f4 FA69     		ldr	r2, [r7, #28]
 4493 00f6 1A60     		str	r2, [r3]
 613:src/modbus.c  **** 				rPacket++;
 4494              		.loc 1 613 0
 4495 00f8 40F20003 		movw	r3, #:lower16:rPacket
 4496 00fc C0F20003 		movt	r3, #:upper16:rPacket
 4497 0100 1B68     		ldr	r3, [r3]
 4498 0102 1A1D     		adds	r2, r3, #4
 4499 0104 40F20003 		movw	r3, #:lower16:rPacket
 4500 0108 C0F20003 		movt	r3, #:upper16:rPacket
 4501 010c 1A60     		str	r2, [r3]
 614:src/modbus.c  **** 				//printf("Data: 0x%x\n", result);
 615:src/modbus.c  **** 
 616:src/modbus.c  **** 
 617:src/modbus.c  **** 				//Increase from and to bit
 618:src/modbus.c  **** 				fromBit = fromBit + 8;
 4502              		.loc 1 618 0
 4503 010e 7B6A     		ldr	r3, [r7, #36]
 4504 0110 0833     		adds	r3, r3, #8
 4505 0112 7B62     		str	r3, [r7, #36]
 619:src/modbus.c  **** 				toBit = toBit + 8;
 4506              		.loc 1 619 0
 4507 0114 3B6A     		ldr	r3, [r7, #32]
 4508 0116 0833     		adds	r3, r3, #8
 4509 0118 3B62     		str	r3, [r7, #32]
 4510              	.L148:
 4511              	.LBE16:
 600:src/modbus.c  **** 				//Call masking function and store value in r.
 4512              		.loc 1 600 0 discriminator 1
 4513 011a 7B6A     		ldr	r3, [r7, #36]
 4514 011c 082B     		cmp	r3, #8
 4515 011e C9DD     		ble	.L151
 620:src/modbus.c  **** 		}
 621:src/modbus.c  **** 
 622:src/modbus.c  **** 		//Decrement request count
 623:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 1;
 4516              		.loc 1 623 0
 4517 0120 FB6A     		ldr	r3, [r7, #44]
 4518 0122 013B     		subs	r3, r3, #1
 4519 0124 FB62     		str	r3, [r7, #44]
 624:src/modbus.c  **** 
 625:src/modbus.c  **** 		//Fetch next data .
 626:src/modbus.c  **** 		s = getData(firstRequest++);
 4520              		.loc 1 626 0
 4521 0126 40F20003 		movw	r3, #:lower16:firstRequest
 4522 012a C0F20003 		movt	r3, #:upper16:firstRequest
 4523 012e 1B68     		ldr	r3, [r3]
 4524 0130 1A46     		mov	r2, r3
 4525 0132 511C     		adds	r1, r2, #1
 4526 0134 40F20003 		movw	r3, #:lower16:firstRequest
 4527 0138 C0F20003 		movt	r3, #:upper16:firstRequest
 4528 013c 1960     		str	r1, [r3]
 4529 013e 1346     		mov	r3, r2
 4530 0140 1846     		mov	r0, r3
 4531 0142 FFF7FEFF 		bl	getData
 4532 0146 0246     		mov	r2, r0
 4533 0148 40F20003 		movw	r3, #:lower16:s
 4534 014c C0F20003 		movt	r3, #:upper16:s
 4535 0150 1A60     		str	r2, [r3]
 4536              	.L147:
 4537              	.LBE15:
 595:src/modbus.c  **** 
 4538              		.loc 1 595 0 discriminator 1
 4539 0152 FB6A     		ldr	r3, [r7, #44]
 4540 0154 002B     		cmp	r3, #0
 4541 0156 A8DC     		bgt	.L152
 627:src/modbus.c  **** 	}
 628:src/modbus.c  **** 
 629:src/modbus.c  **** /*	for (d = 0; d < ((byteStream / 2) + 3); d++) {
 630:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 631:src/modbus.c  **** 	}
 632:src/modbus.c  **** */
 633:src/modbus.c  **** 	return 0;
 4542              		.loc 1 633 0
 4543 0158 0023     		movs	r3, #0
 634:src/modbus.c  **** }
 4544              		.loc 1 634 0
 4545 015a 1846     		mov	r0, r3
 4546 015c 3037     		adds	r7, r7, #48
 4547 015e BD46     		mov	sp, r7
 4548              		@ sp needed
 4549 0160 80BD     		pop	{r7, pc}
 4550              		.cfi_endproc
 4551              	.LFE13:
 4553 0162 00BF     		.section	.text.readDiscreteInputs,"ax",%progbits
 4554              		.align	2
 4555              		.global	readDiscreteInputs
 4556              		.thumb
 4557              		.thumb_func
 4559              	readDiscreteInputs:
 4560              	.LFB14:
 635:src/modbus.c  **** 
 636:src/modbus.c  **** uint32_t readDiscreteInputs(uint32_t *qPacket) {
 4561              		.loc 1 636 0
 4562              		.cfi_startproc
 4563              		@ args = 0, pretend = 0, frame = 48
 4564              		@ frame_needed = 1, uses_anonymous_args = 0
 4565 0000 80B5     		push	{r7, lr}
 4566              	.LCFI42:
 4567              		.cfi_def_cfa_offset 8
 4568              		.cfi_offset 7, -8
 4569              		.cfi_offset 14, -4
 4570 0002 8CB0     		sub	sp, sp, #48
 4571              	.LCFI43:
 4572              		.cfi_def_cfa_offset 56
 4573 0004 00AF     		add	r7, sp, #0
 4574              	.LCFI44:
 4575              		.cfi_def_cfa_register 7
 4576 0006 7860     		str	r0, [r7, #4]
 637:src/modbus.c  **** 
 638:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 639:src/modbus.c  **** 	qPacket++;
 4577              		.loc 1 639 0
 4578 0008 7B68     		ldr	r3, [r7, #4]
 4579 000a 0433     		adds	r3, r3, #4
 4580 000c 7B60     		str	r3, [r7, #4]
 640:src/modbus.c  **** 
 641:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 642:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 643:src/modbus.c  **** 	firstRequest = 0x2710 | *qPacket++;
 4581              		.loc 1 643 0
 4582 000e 7B68     		ldr	r3, [r7, #4]
 4583 0010 1A1D     		adds	r2, r3, #4
 4584 0012 7A60     		str	r2, [r7, #4]
 4585 0014 1B68     		ldr	r3, [r3]
 4586 0016 43F41C52 		orr	r2, r3, #9984
 4587 001a 42F01002 		orr	r2, r2, #16
 4588 001e 40F20003 		movw	r3, #:lower16:firstRequest
 4589 0022 C0F20003 		movt	r3, #:upper16:firstRequest
 4590 0026 1A60     		str	r2, [r3]
 644:src/modbus.c  **** 	totalRequest = *qPacket;
 4591              		.loc 1 644 0
 4592 0028 7B68     		ldr	r3, [r7, #4]
 4593 002a 1A68     		ldr	r2, [r3]
 4594 002c 40F20003 		movw	r3, #:lower16:totalRequest
 4595 0030 C0F20003 		movt	r3, #:upper16:totalRequest
 4596 0034 1A60     		str	r2, [r3]
 645:src/modbus.c  **** 
 646:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 647:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4597              		.loc 1 647 0
 4598 0036 40F20003 		movw	r3, #:lower16:totalRequest
 4599 003a C0F20003 		movt	r3, #:upper16:totalRequest
 4600 003e 1B68     		ldr	r3, [r3]
 4601 0040 DB08     		lsrs	r3, r3, #3
 4602 0042 0133     		adds	r3, r3, #1
 4603 0044 FB60     		str	r3, [r7, #12]
 648:src/modbus.c  **** 
 649:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 650:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4604              		.loc 1 650 0
 4605 0046 40F20003 		movw	r3, #:lower16:rPacket
 4606 004a C0F20003 		movt	r3, #:upper16:rPacket
 4607 004e 1B68     		ldr	r3, [r3]
 4608 0050 FA68     		ldr	r2, [r7, #12]
 4609 0052 1A60     		str	r2, [r3]
 651:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 652:src/modbus.c  **** 	rPacket++;
 4610              		.loc 1 652 0
 4611 0054 40F20003 		movw	r3, #:lower16:rPacket
 4612 0058 C0F20003 		movt	r3, #:upper16:rPacket
 4613 005c 1B68     		ldr	r3, [r3]
 4614 005e 1A1D     		adds	r2, r3, #4
 4615 0060 40F20003 		movw	r3, #:lower16:rPacket
 4616 0064 C0F20003 		movt	r3, #:upper16:rPacket
 4617 0068 1A60     		str	r2, [r3]
 653:src/modbus.c  **** 
 654:src/modbus.c  **** 	//Fetch first address data.
 655:src/modbus.c  **** 	s = getData(firstRequest++);
 4618              		.loc 1 655 0
 4619 006a 40F20003 		movw	r3, #:lower16:firstRequest
 4620 006e C0F20003 		movt	r3, #:upper16:firstRequest
 4621 0072 1B68     		ldr	r3, [r3]
 4622 0074 1A46     		mov	r2, r3
 4623 0076 511C     		adds	r1, r2, #1
 4624 0078 40F20003 		movw	r3, #:lower16:firstRequest
 4625 007c C0F20003 		movt	r3, #:upper16:firstRequest
 4626 0080 1960     		str	r1, [r3]
 4627 0082 1346     		mov	r3, r2
 4628 0084 1846     		mov	r0, r3
 4629 0086 FFF7FEFF 		bl	getData
 4630 008a 0246     		mov	r2, r0
 4631 008c 40F20003 		movw	r3, #:lower16:s
 4632 0090 C0F20003 		movt	r3, #:upper16:s
 4633 0094 1A60     		str	r2, [r3]
 656:src/modbus.c  **** 
 657:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4634              		.loc 1 657 0
 4635 0096 40F20003 		movw	r3, #:lower16:totalRequest
 4636 009a C0F20003 		movt	r3, #:upper16:totalRequest
 4637 009e 1B68     		ldr	r3, [r3]
 4638 00a0 FB62     		str	r3, [r7, #44]
 658:src/modbus.c  **** 	int count = 0;
 4639              		.loc 1 658 0
 4640 00a2 0023     		movs	r3, #0
 4641 00a4 BB62     		str	r3, [r7, #40]
 659:src/modbus.c  **** 	int fromBit = 0;
 4642              		.loc 1 659 0
 4643 00a6 0023     		movs	r3, #0
 4644 00a8 7B62     		str	r3, [r7, #36]
 660:src/modbus.c  **** 	int toBit = 7;
 4645              		.loc 1 660 0
 4646 00aa 0723     		movs	r3, #7
 4647 00ac 3B62     		str	r3, [r7, #32]
 661:src/modbus.c  **** 	int shiftRight;
 662:src/modbus.c  **** 	int flag = 0;
 4648              		.loc 1 662 0
 4649 00ae 0023     		movs	r3, #0
 4650 00b0 BB61     		str	r3, [r7, #24]
 663:src/modbus.c  **** 	int maxCount = 0;
 4651              		.loc 1 663 0
 4652 00b2 0023     		movs	r3, #0
 4653 00b4 7B61     		str	r3, [r7, #20]
 664:src/modbus.c  **** 	//int d;
 665:src/modbus.c  **** 
 666:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4654              		.loc 1 666 0
 4655 00b6 8DE0     		b	.L156
 4656              	.L165:
 4657              	.LBB17:
 667:src/modbus.c  **** 
 668:src/modbus.c  **** 		if (totalRequest < 8) {
 4658              		.loc 1 668 0
 4659 00b8 40F20003 		movw	r3, #:lower16:totalRequest
 4660 00bc C0F20003 		movt	r3, #:upper16:totalRequest
 4661 00c0 1B68     		ldr	r3, [r3]
 4662 00c2 072B     		cmp	r3, #7
 4663 00c4 06D8     		bhi	.L157
 669:src/modbus.c  **** 			toBit = totalRequest - 1;
 4664              		.loc 1 669 0
 4665 00c6 40F20003 		movw	r3, #:lower16:totalRequest
 4666 00ca C0F20003 		movt	r3, #:upper16:totalRequest
 4667 00ce 1B68     		ldr	r3, [r3]
 4668 00d0 013B     		subs	r3, r3, #1
 4669 00d2 3B62     		str	r3, [r7, #32]
 4670              	.L157:
 670:src/modbus.c  **** 		}
 671:src/modbus.c  **** 
 672:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 673:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4671              		.loc 1 673 0
 4672 00d4 FA6A     		ldr	r2, [r7, #44]
 4673 00d6 40F20003 		movw	r3, #:lower16:totalRequest
 4674 00da C0F20003 		movt	r3, #:upper16:totalRequest
 4675 00de 1B68     		ldr	r3, [r3]
 4676 00e0 03F00703 		and	r3, r3, #7
 4677 00e4 9A42     		cmp	r2, r3
 4678 00e6 0BD1     		bne	.L158
 4679              		.loc 1 673 0 is_stmt 0 discriminator 1
 4680 00e8 BB69     		ldr	r3, [r7, #24]
 4681 00ea 012B     		cmp	r3, #1
 4682 00ec 08D1     		bne	.L158
 674:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4683              		.loc 1 674 0 is_stmt 1
 4684 00ee 40F20003 		movw	r3, #:lower16:totalRequest
 4685 00f2 C0F20003 		movt	r3, #:upper16:totalRequest
 4686 00f6 1B68     		ldr	r3, [r3]
 4687 00f8 03F00703 		and	r3, r3, #7
 4688 00fc 013B     		subs	r3, r3, #1
 4689 00fe 3B62     		str	r3, [r7, #32]
 4690              	.L158:
 675:src/modbus.c  **** 		}
 676:src/modbus.c  **** 
 677:src/modbus.c  **** 		//Call masking function and store value in r.
 678:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4691              		.loc 1 678 0
 4692 0100 786A     		ldr	r0, [r7, #36]
 4693 0102 396A     		ldr	r1, [r7, #32]
 4694 0104 FFF7FEFF 		bl	getMask
 4695 0108 B860     		str	r0, [r7, #8]
 679:src/modbus.c  **** 
 680:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 681:src/modbus.c  **** 		unsigned int result = r & s->value;
 4696              		.loc 1 681 0
 4697 010a 40F20003 		movw	r3, #:lower16:s
 4698 010e C0F20003 		movt	r3, #:upper16:s
 4699 0112 1B68     		ldr	r3, [r3]
 4700 0114 5B68     		ldr	r3, [r3, #4]
 4701 0116 1A46     		mov	r2, r3
 4702 0118 BB68     		ldr	r3, [r7, #8]
 4703 011a 1340     		ands	r3, r3, r2
 4704 011c 3B61     		str	r3, [r7, #16]
 682:src/modbus.c  **** 
 683:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 684:src/modbus.c  **** 		if (toBit == 7) {
 4705              		.loc 1 684 0
 4706 011e 3B6A     		ldr	r3, [r7, #32]
 4707 0120 072B     		cmp	r3, #7
 4708 0122 00D1     		bne	.L159
 685:src/modbus.c  **** 			goto next;
 4709              		.loc 1 685 0
 4710 0124 0BE0     		b	.L160
 4711              	.L159:
 686:src/modbus.c  **** 		}
 687:src/modbus.c  **** 
 688:src/modbus.c  **** 		//Else shift right.
 689:src/modbus.c  **** 		else {
 690:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4712              		.loc 1 690 0
 4713 0126 7B6A     		ldr	r3, [r7, #36]
 4714 0128 FB61     		str	r3, [r7, #28]
 4715 012a 05E0     		b	.L161
 4716              	.L162:
 691:src/modbus.c  **** 				result = result >> 1;
 4717              		.loc 1 691 0 discriminator 2
 4718 012c 3B69     		ldr	r3, [r7, #16]
 4719 012e 5B08     		lsrs	r3, r3, #1
 4720 0130 3B61     		str	r3, [r7, #16]
 690:src/modbus.c  **** 				result = result >> 1;
 4721              		.loc 1 690 0 discriminator 2
 4722 0132 FB69     		ldr	r3, [r7, #28]
 4723 0134 013B     		subs	r3, r3, #1
 4724 0136 FB61     		str	r3, [r7, #28]
 4725              	.L161:
 690:src/modbus.c  **** 				result = result >> 1;
 4726              		.loc 1 690 0 is_stmt 0 discriminator 1
 4727 0138 FB69     		ldr	r3, [r7, #28]
 4728 013a 002B     		cmp	r3, #0
 4729 013c F6DC     		bgt	.L162
 4730              	.L160:
 692:src/modbus.c  **** 			}
 693:src/modbus.c  **** 		}
 694:src/modbus.c  **** 
 695:src/modbus.c  **** 		//Label
 696:src/modbus.c  **** 		next:
 697:src/modbus.c  **** 
 698:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 699:src/modbus.c  **** 		*rPacket = result;
 4731              		.loc 1 699 0 is_stmt 1
 4732 013e 40F20003 		movw	r3, #:lower16:rPacket
 4733 0142 C0F20003 		movt	r3, #:upper16:rPacket
 4734 0146 1B68     		ldr	r3, [r3]
 4735 0148 3A69     		ldr	r2, [r7, #16]
 4736 014a 1A60     		str	r2, [r3]
 700:src/modbus.c  **** 		rPacket++;
 4737              		.loc 1 700 0
 4738 014c 40F20003 		movw	r3, #:lower16:rPacket
 4739 0150 C0F20003 		movt	r3, #:upper16:rPacket
 4740 0154 1B68     		ldr	r3, [r3]
 4741 0156 1A1D     		adds	r2, r3, #4
 4742 0158 40F20003 		movw	r3, #:lower16:rPacket
 4743 015c C0F20003 		movt	r3, #:upper16:rPacket
 4744 0160 1A60     		str	r2, [r3]
 701:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 702:src/modbus.c  **** 
 703:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 704:src/modbus.c  **** 		count++;
 4745              		.loc 1 704 0
 4746 0162 BB6A     		ldr	r3, [r7, #40]
 4747 0164 0133     		adds	r3, r3, #1
 4748 0166 BB62     		str	r3, [r7, #40]
 705:src/modbus.c  **** 
 706:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 707:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 4749              		.loc 1 707 0
 4750 0168 FB6A     		ldr	r3, [r7, #44]
 4751 016a 083B     		subs	r3, r3, #8
 4752 016c FB62     		str	r3, [r7, #44]
 708:src/modbus.c  **** 
 709:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 710:src/modbus.c  **** 		if (totalRequest >= 32) {
 4753              		.loc 1 710 0
 4754 016e 40F20003 		movw	r3, #:lower16:totalRequest
 4755 0172 C0F20003 		movt	r3, #:upper16:totalRequest
 4756 0176 1B68     		ldr	r3, [r3]
 4757 0178 1F2B     		cmp	r3, #31
 4758 017a 01D9     		bls	.L163
 711:src/modbus.c  **** 			maxCount = 4;
 4759              		.loc 1 711 0
 4760 017c 0423     		movs	r3, #4
 4761 017e 7B61     		str	r3, [r7, #20]
 4762              	.L163:
 712:src/modbus.c  **** 		}
 713:src/modbus.c  **** 
 714:src/modbus.c  **** 		//If not then set
 715:src/modbus.c  **** 		/*else{
 716:src/modbus.c  **** 		 count = 0;
 717:src/modbus.c  **** 		 fromBit = 0;
 718:src/modbus.c  **** 		 toBit = 7;
 719:src/modbus.c  **** 		 flag = 1;
 720:src/modbus.c  **** 		 goto again;
 721:src/modbus.c  **** 		 }*/
 722:src/modbus.c  **** 
 723:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 724:src/modbus.c  **** 		if (count == maxCount) {
 4763              		.loc 1 724 0
 4764 0180 BA6A     		ldr	r2, [r7, #40]
 4765 0182 7B69     		ldr	r3, [r7, #20]
 4766 0184 9A42     		cmp	r2, r3
 4767 0186 1FD1     		bne	.L164
 725:src/modbus.c  **** 			s = getData(firstRequest++);
 4768              		.loc 1 725 0
 4769 0188 40F20003 		movw	r3, #:lower16:firstRequest
 4770 018c C0F20003 		movt	r3, #:upper16:firstRequest
 4771 0190 1B68     		ldr	r3, [r3]
 4772 0192 1A46     		mov	r2, r3
 4773 0194 511C     		adds	r1, r2, #1
 4774 0196 40F20003 		movw	r3, #:lower16:firstRequest
 4775 019a C0F20003 		movt	r3, #:upper16:firstRequest
 4776 019e 1960     		str	r1, [r3]
 4777 01a0 1346     		mov	r3, r2
 4778 01a2 1846     		mov	r0, r3
 4779 01a4 FFF7FEFF 		bl	getData
 4780 01a8 0246     		mov	r2, r0
 4781 01aa 40F20003 		movw	r3, #:lower16:s
 4782 01ae C0F20003 		movt	r3, #:upper16:s
 4783 01b2 1A60     		str	r2, [r3]
 726:src/modbus.c  **** 			count = 0;
 4784              		.loc 1 726 0
 4785 01b4 0023     		movs	r3, #0
 4786 01b6 BB62     		str	r3, [r7, #40]
 727:src/modbus.c  **** 			fromBit = 0;
 4787              		.loc 1 727 0
 4788 01b8 0023     		movs	r3, #0
 4789 01ba 7B62     		str	r3, [r7, #36]
 728:src/modbus.c  **** 			toBit = 7;
 4790              		.loc 1 728 0
 4791 01bc 0723     		movs	r3, #7
 4792 01be 3B62     		str	r3, [r7, #32]
 729:src/modbus.c  **** 			flag = 1;
 4793              		.loc 1 729 0
 4794 01c0 0123     		movs	r3, #1
 4795 01c2 BB61     		str	r3, [r7, #24]
 730:src/modbus.c  **** 			goto again;
 4796              		.loc 1 730 0
 4797 01c4 00BF     		nop
 4798              	.L155:
 4799              	.LBE17:
 666:src/modbus.c  **** 
 4800              		.loc 1 666 0
 4801 01c6 05E0     		b	.L156
 4802              	.L164:
 4803              	.LBB18:
 731:src/modbus.c  **** 		}
 732:src/modbus.c  **** 
 733:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 734:src/modbus.c  **** 		fromBit = fromBit + 8;
 4804              		.loc 1 734 0
 4805 01c8 7B6A     		ldr	r3, [r7, #36]
 4806 01ca 0833     		adds	r3, r3, #8
 4807 01cc 7B62     		str	r3, [r7, #36]
 735:src/modbus.c  **** 		toBit = toBit + 8;
 4808              		.loc 1 735 0
 4809 01ce 3B6A     		ldr	r3, [r7, #32]
 4810 01d0 0833     		adds	r3, r3, #8
 4811 01d2 3B62     		str	r3, [r7, #32]
 4812              	.L156:
 4813              	.LBE18:
 666:src/modbus.c  **** 
 4814              		.loc 1 666 0 discriminator 1
 4815 01d4 FB6A     		ldr	r3, [r7, #44]
 4816 01d6 002B     		cmp	r3, #0
 4817 01d8 3FF76EAF 		bgt	.L165
 736:src/modbus.c  **** 	}
 737:src/modbus.c  **** /*
 738:src/modbus.c  **** 	for (d = 0; d < (byteStream + 3); d++) {
 739:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 740:src/modbus.c  **** 	}
 741:src/modbus.c  **** */
 742:src/modbus.c  **** 	return 0;
 4818              		.loc 1 742 0
 4819 01dc 0023     		movs	r3, #0
 743:src/modbus.c  **** 
 744:src/modbus.c  **** }
 4820              		.loc 1 744 0
 4821 01de 1846     		mov	r0, r3
 4822 01e0 3037     		adds	r7, r7, #48
 4823 01e2 BD46     		mov	sp, r7
 4824              		@ sp needed
 4825 01e4 80BD     		pop	{r7, pc}
 4826              		.cfi_endproc
 4827              	.LFE14:
 4829 01e6 00BF     		.section	.text.readCoil,"ax",%progbits
 4830              		.align	2
 4831              		.global	readCoil
 4832              		.thumb
 4833              		.thumb_func
 4835              	readCoil:
 4836              	.LFB15:
 745:src/modbus.c  **** 
 746:src/modbus.c  **** uint32_t readCoil(uint32_t *qPacket) {
 4837              		.loc 1 746 0
 4838              		.cfi_startproc
 4839              		@ args = 0, pretend = 0, frame = 48
 4840              		@ frame_needed = 1, uses_anonymous_args = 0
 4841 0000 80B5     		push	{r7, lr}
 4842              	.LCFI45:
 4843              		.cfi_def_cfa_offset 8
 4844              		.cfi_offset 7, -8
 4845              		.cfi_offset 14, -4
 4846 0002 8CB0     		sub	sp, sp, #48
 4847              	.LCFI46:
 4848              		.cfi_def_cfa_offset 56
 4849 0004 00AF     		add	r7, sp, #0
 4850              	.LCFI47:
 4851              		.cfi_def_cfa_register 7
 4852 0006 7860     		str	r0, [r7, #4]
 747:src/modbus.c  **** 
 748:src/modbus.c  **** 	//Point qPacket to first address from where data is to be fetched.
 749:src/modbus.c  **** 	qPacket++;
 4853              		.loc 1 749 0
 4854 0008 7B68     		ldr	r3, [r7, #4]
 4855 000a 0433     		adds	r3, r3, #4
 4856 000c 7B60     		str	r3, [r7, #4]
 750:src/modbus.c  **** 
 751:src/modbus.c  **** 	//Assign first address to firstRequest from qPacket and
 752:src/modbus.c  **** 	//qPacket's next value i.e total bit requested to totalRequest.
 753:src/modbus.c  **** 	firstRequest = 0x0000 + *qPacket++;
 4857              		.loc 1 753 0
 4858 000e 7B68     		ldr	r3, [r7, #4]
 4859 0010 1A1D     		adds	r2, r3, #4
 4860 0012 7A60     		str	r2, [r7, #4]
 4861 0014 1A68     		ldr	r2, [r3]
 4862 0016 40F20003 		movw	r3, #:lower16:firstRequest
 4863 001a C0F20003 		movt	r3, #:upper16:firstRequest
 4864 001e 1A60     		str	r2, [r3]
 754:src/modbus.c  **** 	totalRequest = *qPacket;
 4865              		.loc 1 754 0
 4866 0020 7B68     		ldr	r3, [r7, #4]
 4867 0022 1A68     		ldr	r2, [r3]
 4868 0024 40F20003 		movw	r3, #:lower16:totalRequest
 4869 0028 C0F20003 		movt	r3, #:upper16:totalRequest
 4870 002c 1A60     		str	r2, [r3]
 755:src/modbus.c  **** 
 756:src/modbus.c  **** 	//Calculate no. of byte and assign it to rPacket
 757:src/modbus.c  **** 	unsigned int byteStream = ((totalRequest / 8) + 1);
 4871              		.loc 1 757 0
 4872 002e 40F20003 		movw	r3, #:lower16:totalRequest
 4873 0032 C0F20003 		movt	r3, #:upper16:totalRequest
 4874 0036 1B68     		ldr	r3, [r3]
 4875 0038 DB08     		lsrs	r3, r3, #3
 4876 003a 0133     		adds	r3, r3, #1
 4877 003c FB60     		str	r3, [r7, #12]
 758:src/modbus.c  **** 
 759:src/modbus.c  **** 	//Copy no. of byte stream to be sent back to reponse packet
 760:src/modbus.c  **** 	*rPacket = (unsigned int) byteStream;
 4878              		.loc 1 760 0
 4879 003e 40F20003 		movw	r3, #:lower16:rPacket
 4880 0042 C0F20003 		movt	r3, #:upper16:rPacket
 4881 0046 1B68     		ldr	r3, [r3]
 4882 0048 FA68     		ldr	r2, [r7, #12]
 4883 004a 1A60     		str	r2, [r3]
 761:src/modbus.c  **** 	//printf("%d\n",*rPacket);
 762:src/modbus.c  **** 	rPacket++;
 4884              		.loc 1 762 0
 4885 004c 40F20003 		movw	r3, #:lower16:rPacket
 4886 0050 C0F20003 		movt	r3, #:upper16:rPacket
 4887 0054 1B68     		ldr	r3, [r3]
 4888 0056 1A1D     		adds	r2, r3, #4
 4889 0058 40F20003 		movw	r3, #:lower16:rPacket
 4890 005c C0F20003 		movt	r3, #:upper16:rPacket
 4891 0060 1A60     		str	r2, [r3]
 763:src/modbus.c  **** 
 764:src/modbus.c  **** 	//Fetch first address data.
 765:src/modbus.c  **** 	s = getData(firstRequest++);
 4892              		.loc 1 765 0
 4893 0062 40F20003 		movw	r3, #:lower16:firstRequest
 4894 0066 C0F20003 		movt	r3, #:upper16:firstRequest
 4895 006a 1B68     		ldr	r3, [r3]
 4896 006c 1A46     		mov	r2, r3
 4897 006e 511C     		adds	r1, r2, #1
 4898 0070 40F20003 		movw	r3, #:lower16:firstRequest
 4899 0074 C0F20003 		movt	r3, #:upper16:firstRequest
 4900 0078 1960     		str	r1, [r3]
 4901 007a 1346     		mov	r3, r2
 4902 007c 1846     		mov	r0, r3
 4903 007e FFF7FEFF 		bl	getData
 4904 0082 0246     		mov	r2, r0
 4905 0084 40F20003 		movw	r3, #:lower16:s
 4906 0088 C0F20003 		movt	r3, #:upper16:s
 4907 008c 1A60     		str	r2, [r3]
 766:src/modbus.c  **** 
 767:src/modbus.c  **** 	int tempTotalRequest = (int) totalRequest;
 4908              		.loc 1 767 0
 4909 008e 40F20003 		movw	r3, #:lower16:totalRequest
 4910 0092 C0F20003 		movt	r3, #:upper16:totalRequest
 4911 0096 1B68     		ldr	r3, [r3]
 4912 0098 FB62     		str	r3, [r7, #44]
 768:src/modbus.c  **** 	int count = 0;
 4913              		.loc 1 768 0
 4914 009a 0023     		movs	r3, #0
 4915 009c BB62     		str	r3, [r7, #40]
 769:src/modbus.c  **** 	int fromBit = 0;
 4916              		.loc 1 769 0
 4917 009e 0023     		movs	r3, #0
 4918 00a0 7B62     		str	r3, [r7, #36]
 770:src/modbus.c  **** 	int toBit = 7;
 4919              		.loc 1 770 0
 4920 00a2 0723     		movs	r3, #7
 4921 00a4 3B62     		str	r3, [r7, #32]
 771:src/modbus.c  **** 	int shiftRight;
 772:src/modbus.c  **** 	int flag = 0;
 4922              		.loc 1 772 0
 4923 00a6 0023     		movs	r3, #0
 4924 00a8 BB61     		str	r3, [r7, #24]
 773:src/modbus.c  **** 	int maxCount = 0;
 4925              		.loc 1 773 0
 4926 00aa 0023     		movs	r3, #0
 4927 00ac 7B61     		str	r3, [r7, #20]
 774:src/modbus.c  **** 	//int d;
 775:src/modbus.c  **** 
 776:src/modbus.c  **** 	again: while (tempTotalRequest > 0) {
 4928              		.loc 1 776 0
 4929 00ae 8DE0     		b	.L169
 4930              	.L178:
 4931              	.LBB19:
 777:src/modbus.c  **** 
 778:src/modbus.c  **** 		if (totalRequest < 8) {
 4932              		.loc 1 778 0
 4933 00b0 40F20003 		movw	r3, #:lower16:totalRequest
 4934 00b4 C0F20003 		movt	r3, #:upper16:totalRequest
 4935 00b8 1B68     		ldr	r3, [r3]
 4936 00ba 072B     		cmp	r3, #7
 4937 00bc 06D8     		bhi	.L170
 779:src/modbus.c  **** 			toBit = totalRequest - 1;
 4938              		.loc 1 779 0
 4939 00be 40F20003 		movw	r3, #:lower16:totalRequest
 4940 00c2 C0F20003 		movt	r3, #:upper16:totalRequest
 4941 00c6 1B68     		ldr	r3, [r3]
 4942 00c8 013B     		subs	r3, r3, #1
 4943 00ca 3B62     		str	r3, [r7, #32]
 4944              	.L170:
 780:src/modbus.c  **** 		}
 781:src/modbus.c  **** 
 782:src/modbus.c  **** 		//Check if temp (having totalRequest) has modulus value of totalRequest.
 783:src/modbus.c  **** 		if (tempTotalRequest == (totalRequest % 8) && flag == 1) {
 4945              		.loc 1 783 0
 4946 00cc FA6A     		ldr	r2, [r7, #44]
 4947 00ce 40F20003 		movw	r3, #:lower16:totalRequest
 4948 00d2 C0F20003 		movt	r3, #:upper16:totalRequest
 4949 00d6 1B68     		ldr	r3, [r3]
 4950 00d8 03F00703 		and	r3, r3, #7
 4951 00dc 9A42     		cmp	r2, r3
 4952 00de 0BD1     		bne	.L171
 4953              		.loc 1 783 0 is_stmt 0 discriminator 1
 4954 00e0 BB69     		ldr	r3, [r7, #24]
 4955 00e2 012B     		cmp	r3, #1
 4956 00e4 08D1     		bne	.L171
 784:src/modbus.c  **** 			toBit = (totalRequest % 8) - 1; //if true the set toBit to modules minus-1.
 4957              		.loc 1 784 0 is_stmt 1
 4958 00e6 40F20003 		movw	r3, #:lower16:totalRequest
 4959 00ea C0F20003 		movt	r3, #:upper16:totalRequest
 4960 00ee 1B68     		ldr	r3, [r3]
 4961 00f0 03F00703 		and	r3, r3, #7
 4962 00f4 013B     		subs	r3, r3, #1
 4963 00f6 3B62     		str	r3, [r7, #32]
 4964              	.L171:
 785:src/modbus.c  **** 		}
 786:src/modbus.c  **** 
 787:src/modbus.c  **** 		//Call masking function and store value in r.
 788:src/modbus.c  **** 		unsigned int r = getMask(fromBit, toBit);
 4965              		.loc 1 788 0
 4966 00f8 786A     		ldr	r0, [r7, #36]
 4967 00fa 396A     		ldr	r1, [r7, #32]
 4968 00fc FFF7FEFF 		bl	getMask
 4969 0100 B860     		str	r0, [r7, #8]
 789:src/modbus.c  **** 
 790:src/modbus.c  **** 		//Get masking done on data from hash and store in result.
 791:src/modbus.c  **** 		unsigned int result = r & s->value;
 4970              		.loc 1 791 0
 4971 0102 40F20003 		movw	r3, #:lower16:s
 4972 0106 C0F20003 		movt	r3, #:upper16:s
 4973 010a 1B68     		ldr	r3, [r3]
 4974 010c 5B68     		ldr	r3, [r3, #4]
 4975 010e 1A46     		mov	r2, r3
 4976 0110 BB68     		ldr	r3, [r7, #8]
 4977 0112 1340     		ands	r3, r3, r2
 4978 0114 3B61     		str	r3, [r7, #16]
 792:src/modbus.c  **** 
 793:src/modbus.c  **** 		//Check if first 8 Bit then go to "next" label.
 794:src/modbus.c  **** 		if (toBit == 7) {
 4979              		.loc 1 794 0
 4980 0116 3B6A     		ldr	r3, [r7, #32]
 4981 0118 072B     		cmp	r3, #7
 4982 011a 00D1     		bne	.L172
 795:src/modbus.c  **** 			goto next;
 4983              		.loc 1 795 0
 4984 011c 0BE0     		b	.L173
 4985              	.L172:
 796:src/modbus.c  **** 		}
 797:src/modbus.c  **** 
 798:src/modbus.c  **** 		//Else shift right.
 799:src/modbus.c  **** 		else {
 800:src/modbus.c  **** 			for (shiftRight = fromBit; shiftRight > 0; shiftRight--) {
 4986              		.loc 1 800 0
 4987 011e 7B6A     		ldr	r3, [r7, #36]
 4988 0120 FB61     		str	r3, [r7, #28]
 4989 0122 05E0     		b	.L174
 4990              	.L175:
 801:src/modbus.c  **** 				result = result >> 1;
 4991              		.loc 1 801 0 discriminator 2
 4992 0124 3B69     		ldr	r3, [r7, #16]
 4993 0126 5B08     		lsrs	r3, r3, #1
 4994 0128 3B61     		str	r3, [r7, #16]
 800:src/modbus.c  **** 				result = result >> 1;
 4995              		.loc 1 800 0 discriminator 2
 4996 012a FB69     		ldr	r3, [r7, #28]
 4997 012c 013B     		subs	r3, r3, #1
 4998 012e FB61     		str	r3, [r7, #28]
 4999              	.L174:
 800:src/modbus.c  **** 				result = result >> 1;
 5000              		.loc 1 800 0 is_stmt 0 discriminator 1
 5001 0130 FB69     		ldr	r3, [r7, #28]
 5002 0132 002B     		cmp	r3, #0
 5003 0134 F6DC     		bgt	.L175
 5004              	.L173:
 802:src/modbus.c  **** 			}
 803:src/modbus.c  **** 		}
 804:src/modbus.c  **** 
 805:src/modbus.c  **** 		//Label
 806:src/modbus.c  **** 		next:
 807:src/modbus.c  **** 
 808:src/modbus.c  **** 		//Store the data to be sent in response packet one by one till requested bits reached.
 809:src/modbus.c  **** 		*rPacket = result;
 5005              		.loc 1 809 0 is_stmt 1
 5006 0136 40F20003 		movw	r3, #:lower16:rPacket
 5007 013a C0F20003 		movt	r3, #:upper16:rPacket
 5008 013e 1B68     		ldr	r3, [r3]
 5009 0140 3A69     		ldr	r2, [r7, #16]
 5010 0142 1A60     		str	r2, [r3]
 810:src/modbus.c  **** 		rPacket++;
 5011              		.loc 1 810 0
 5012 0144 40F20003 		movw	r3, #:lower16:rPacket
 5013 0148 C0F20003 		movt	r3, #:upper16:rPacket
 5014 014c 1B68     		ldr	r3, [r3]
 5015 014e 1A1D     		adds	r2, r3, #4
 5016 0150 40F20003 		movw	r3, #:lower16:rPacket
 5017 0154 C0F20003 		movt	r3, #:upper16:rPacket
 5018 0158 1A60     		str	r2, [r3]
 811:src/modbus.c  **** //		printf("Data: 0x%x\n", result);
 812:src/modbus.c  **** 
 813:src/modbus.c  **** 		//Increase the countbuffer to check if 32 bit data sent or not
 814:src/modbus.c  **** 		count++;
 5019              		.loc 1 814 0
 5020 015a BB6A     		ldr	r3, [r7, #40]
 5021 015c 0133     		adds	r3, r3, #1
 5022 015e BB62     		str	r3, [r7, #40]
 815:src/modbus.c  **** 
 816:src/modbus.c  **** 		//Decrement the totalReqeust (assigned to temp) by 8 after sending 8 bit.
 817:src/modbus.c  **** 		tempTotalRequest = tempTotalRequest - 8;
 5023              		.loc 1 817 0
 5024 0160 FB6A     		ldr	r3, [r7, #44]
 5025 0162 083B     		subs	r3, r3, #8
 5026 0164 FB62     		str	r3, [r7, #44]
 818:src/modbus.c  **** 
 819:src/modbus.c  **** 		//Check if totalRequest is more than 32 bit or not.
 820:src/modbus.c  **** 		if (totalRequest >= 32) {
 5027              		.loc 1 820 0
 5028 0166 40F20003 		movw	r3, #:lower16:totalRequest
 5029 016a C0F20003 		movt	r3, #:upper16:totalRequest
 5030 016e 1B68     		ldr	r3, [r3]
 5031 0170 1F2B     		cmp	r3, #31
 5032 0172 01D9     		bls	.L176
 821:src/modbus.c  **** 			maxCount = 4;
 5033              		.loc 1 821 0
 5034 0174 0423     		movs	r3, #4
 5035 0176 7B61     		str	r3, [r7, #20]
 5036              	.L176:
 822:src/modbus.c  **** 		}
 823:src/modbus.c  **** 
 824:src/modbus.c  **** 		//If not then set
 825:src/modbus.c  **** 		/*else{
 826:src/modbus.c  **** 		 count = 0;
 827:src/modbus.c  **** 		 fromBit = 0;
 828:src/modbus.c  **** 		 toBit = 7;
 829:src/modbus.c  **** 		 flag = 1;
 830:src/modbus.c  **** 		 goto again;
 831:src/modbus.c  **** 		 }*/
 832:src/modbus.c  **** 
 833:src/modbus.c  **** 		//If count reached b i.e. total 4*8 Bit sent (32 bit) then get next value from hash.
 834:src/modbus.c  **** 		if (count == maxCount) {
 5037              		.loc 1 834 0
 5038 0178 BA6A     		ldr	r2, [r7, #40]
 5039 017a 7B69     		ldr	r3, [r7, #20]
 5040 017c 9A42     		cmp	r2, r3
 5041 017e 1FD1     		bne	.L177
 835:src/modbus.c  **** 			s = getData(firstRequest++);
 5042              		.loc 1 835 0
 5043 0180 40F20003 		movw	r3, #:lower16:firstRequest
 5044 0184 C0F20003 		movt	r3, #:upper16:firstRequest
 5045 0188 1B68     		ldr	r3, [r3]
 5046 018a 1A46     		mov	r2, r3
 5047 018c 511C     		adds	r1, r2, #1
 5048 018e 40F20003 		movw	r3, #:lower16:firstRequest
 5049 0192 C0F20003 		movt	r3, #:upper16:firstRequest
 5050 0196 1960     		str	r1, [r3]
 5051 0198 1346     		mov	r3, r2
 5052 019a 1846     		mov	r0, r3
 5053 019c FFF7FEFF 		bl	getData
 5054 01a0 0246     		mov	r2, r0
 5055 01a2 40F20003 		movw	r3, #:lower16:s
 5056 01a6 C0F20003 		movt	r3, #:upper16:s
 5057 01aa 1A60     		str	r2, [r3]
 836:src/modbus.c  **** 			count = 0;
 5058              		.loc 1 836 0
 5059 01ac 0023     		movs	r3, #0
 5060 01ae BB62     		str	r3, [r7, #40]
 837:src/modbus.c  **** 			fromBit = 0;
 5061              		.loc 1 837 0
 5062 01b0 0023     		movs	r3, #0
 5063 01b2 7B62     		str	r3, [r7, #36]
 838:src/modbus.c  **** 			toBit = 7;
 5064              		.loc 1 838 0
 5065 01b4 0723     		movs	r3, #7
 5066 01b6 3B62     		str	r3, [r7, #32]
 839:src/modbus.c  **** 			flag = 1;
 5067              		.loc 1 839 0
 5068 01b8 0123     		movs	r3, #1
 5069 01ba BB61     		str	r3, [r7, #24]
 840:src/modbus.c  **** 			goto again;
 5070              		.loc 1 840 0
 5071 01bc 00BF     		nop
 5072              	.L168:
 5073              	.LBE19:
 776:src/modbus.c  **** 
 5074              		.loc 1 776 0
 5075 01be 05E0     		b	.L169
 5076              	.L177:
 5077              	.LBB20:
 841:src/modbus.c  **** 		}
 842:src/modbus.c  **** 
 843:src/modbus.c  **** 		//Increase fromBit and toBit to fetch next 8 bit.
 844:src/modbus.c  **** 		fromBit = fromBit + 8;
 5078              		.loc 1 844 0
 5079 01c0 7B6A     		ldr	r3, [r7, #36]
 5080 01c2 0833     		adds	r3, r3, #8
 5081 01c4 7B62     		str	r3, [r7, #36]
 845:src/modbus.c  **** 		toBit = toBit + 8;
 5082              		.loc 1 845 0
 5083 01c6 3B6A     		ldr	r3, [r7, #32]
 5084 01c8 0833     		adds	r3, r3, #8
 5085 01ca 3B62     		str	r3, [r7, #32]
 5086              	.L169:
 5087              	.LBE20:
 776:src/modbus.c  **** 
 5088              		.loc 1 776 0 discriminator 1
 5089 01cc FB6A     		ldr	r3, [r7, #44]
 5090 01ce 002B     		cmp	r3, #0
 5091 01d0 3FF76EAF 		bgt	.L178
 846:src/modbus.c  **** 	}
 847:src/modbus.c  **** 
 848:src/modbus.c  **** /*	for (d = 0; d < (byteStream + 3); d++) {
 849:src/modbus.c  **** 		printf("\n0x%x", arrayResponsePacket[d]);
 850:src/modbus.c  **** 	}
 851:src/modbus.c  **** */
 852:src/modbus.c  **** 	return 0;
 5092              		.loc 1 852 0
 5093 01d4 0023     		movs	r3, #0
 853:src/modbus.c  **** }
 5094              		.loc 1 853 0
 5095 01d6 1846     		mov	r0, r3
 5096 01d8 3037     		adds	r7, r7, #48
 5097 01da BD46     		mov	sp, r7
 5098              		@ sp needed
 5099 01dc 80BD     		pop	{r7, pc}
 5100              		.cfi_endproc
 5101              	.LFE15:
 5103 01de 00BF     		.section	.text.getMask,"ax",%progbits
 5104              		.align	2
 5105              		.global	getMask
 5106              		.thumb
 5107              		.thumb_func
 5109              	getMask:
 5110              	.LFB16:
 854:src/modbus.c  **** 
 855:src/modbus.c  **** unsigned int getMask(int a, int b) {
 5111              		.loc 1 855 0
 5112              		.cfi_startproc
 5113              		@ args = 0, pretend = 0, frame = 16
 5114              		@ frame_needed = 1, uses_anonymous_args = 0
 5115              		@ link register save eliminated.
 5116 0000 80B4     		push	{r7}
 5117              	.LCFI48:
 5118              		.cfi_def_cfa_offset 4
 5119              		.cfi_offset 7, -4
 5120 0002 85B0     		sub	sp, sp, #20
 5121              	.LCFI49:
 5122              		.cfi_def_cfa_offset 24
 5123 0004 00AF     		add	r7, sp, #0
 5124              	.LCFI50:
 5125              		.cfi_def_cfa_register 7
 5126 0006 7860     		str	r0, [r7, #4]
 5127 0008 3960     		str	r1, [r7]
 856:src/modbus.c  **** 	unsigned int i;
 857:src/modbus.c  **** 	unsigned int r = 0;
 5128              		.loc 1 857 0
 5129 000a 0023     		movs	r3, #0
 5130 000c BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5131              		.loc 1 858 0
 5132 000e 7B68     		ldr	r3, [r7, #4]
 5133 0010 FB60     		str	r3, [r7, #12]
 5134 0012 09E0     		b	.L181
 5135              	.L182:
 859:src/modbus.c  **** 		r |= 1 << i;
 5136              		.loc 1 859 0 discriminator 2
 5137 0014 FB68     		ldr	r3, [r7, #12]
 5138 0016 0122     		movs	r2, #1
 5139 0018 02FA03F3 		lsl	r3, r2, r3
 5140 001c BA68     		ldr	r2, [r7, #8]
 5141 001e 1343     		orrs	r3, r3, r2
 5142 0020 BB60     		str	r3, [r7, #8]
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5143              		.loc 1 858 0 discriminator 2
 5144 0022 FB68     		ldr	r3, [r7, #12]
 5145 0024 0133     		adds	r3, r3, #1
 5146 0026 FB60     		str	r3, [r7, #12]
 5147              	.L181:
 858:src/modbus.c  **** 	for (i = a; i <= b; i++) {
 5148              		.loc 1 858 0 is_stmt 0 discriminator 1
 5149 0028 3A68     		ldr	r2, [r7]
 5150 002a FB68     		ldr	r3, [r7, #12]
 5151 002c 9A42     		cmp	r2, r3
 5152 002e F1D2     		bcs	.L182
 860:src/modbus.c  **** 	}
 861:src/modbus.c  **** 	return r;
 5153              		.loc 1 861 0 is_stmt 1
 5154 0030 BB68     		ldr	r3, [r7, #8]
 862:src/modbus.c  **** }
 5155              		.loc 1 862 0
 5156 0032 1846     		mov	r0, r3
 5157 0034 1437     		adds	r7, r7, #20
 5158 0036 BD46     		mov	sp, r7
 5159              		@ sp needed
 5160 0038 5DF8047B 		ldr	r7, [sp], #4
 5161 003c 7047     		bx	lr
 5162              		.cfi_endproc
 5163              	.LFE16:
 5165 003e 00BF     		.text
 5166              	.Letext0:
 5167              		.file 2 "/usr/lib/gcc/arm-none-eabi/4.8.2/include/stddef.h"
 5168              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 5169              		.file 4 "/usr/include/newlib/stdint.h"
 5170              		.file 5 "src/uthash.h"
 5171              		.file 6 "src/modbus.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 modbus.c
     /tmp/ccPDOzHJ.s:20     .rodata.crcHi:0000000000000000 $d
     /tmp/ccPDOzHJ.s:23     .rodata.crcHi:0000000000000000 crcHi
     /tmp/ccPDOzHJ.s:281    .rodata.crcLo:0000000000000000 $d
     /tmp/ccPDOzHJ.s:284    .rodata.crcLo:0000000000000000 crcLo
     /tmp/ccPDOzHJ.s:546    .bss.firstRequest:0000000000000000 firstRequest
     /tmp/ccPDOzHJ.s:543    .bss.firstRequest:0000000000000000 $d
     /tmp/ccPDOzHJ.s:553    .bss.totalRequest:0000000000000000 totalRequest
     /tmp/ccPDOzHJ.s:550    .bss.totalRequest:0000000000000000 $d
     /tmp/ccPDOzHJ.s:560    .bss.writeRequest:0000000000000000 writeRequest
     /tmp/ccPDOzHJ.s:557    .bss.writeRequest:0000000000000000 $d
     /tmp/ccPDOzHJ.s:567    .bss.arrayResponsePacket:0000000000000000 arrayResponsePacket
     /tmp/ccPDOzHJ.s:564    .bss.arrayResponsePacket:0000000000000000 $d
     /tmp/ccPDOzHJ.s:574    .data.rPacket:0000000000000000 rPacket
     /tmp/ccPDOzHJ.s:571    .data.rPacket:0000000000000000 $d
     /tmp/ccPDOzHJ.s:581    .bss.users:0000000000000000 users
     /tmp/ccPDOzHJ.s:578    .bss.users:0000000000000000 $d
                            *COM*:0000000000000004 s
     /tmp/ccPDOzHJ.s:585    .text.addData:0000000000000000 $t
     /tmp/ccPDOzHJ.s:590    .text.addData:0000000000000000 addData
     /tmp/ccPDOzHJ.s:842    .text.addData:00000000000001d4 $d
     /tmp/ccPDOzHJ.s:855    .text.addData:0000000000000200 $t
     /tmp/ccPDOzHJ.s:1590   .text.addData:00000000000007e0 $d
     /tmp/ccPDOzHJ.s:1603   .text.addData:000000000000080c $t
     /tmp/ccPDOzHJ.s:2215   .rodata:0000000000000000 $d
     /tmp/ccPDOzHJ.s:2216   .rodata:0000000000000000 .LC0
     /tmp/ccPDOzHJ.s:2219   .text.putData:0000000000000000 $t
     /tmp/ccPDOzHJ.s:2224   .text.putData:0000000000000000 putData
     /tmp/ccPDOzHJ.s:2276   .text.getData:0000000000000000 $t
     /tmp/ccPDOzHJ.s:2281   .text.getData:0000000000000000 getData
     /tmp/ccPDOzHJ.s:2530   .text.getData:00000000000001d4 $d
     /tmp/ccPDOzHJ.s:2543   .text.getData:0000000000000200 $t
     /tmp/ccPDOzHJ.s:2864   .text.validateSlaveID:0000000000000000 $t
     /tmp/ccPDOzHJ.s:2869   .text.validateSlaveID:0000000000000000 validateSlaveID
     /tmp/ccPDOzHJ.s:2927   .text.validateCrc:0000000000000000 $t
     /tmp/ccPDOzHJ.s:2932   .text.validateCrc:0000000000000000 validateCrc
     /tmp/ccPDOzHJ.s:3022   .text.calculateOutputCrc:0000000000000000 $t
     /tmp/ccPDOzHJ.s:3027   .text.calculateOutputCrc:0000000000000000 calculateOutputCrc
     /tmp/ccPDOzHJ.s:3119   .text.validateFunction:0000000000000000 $t
     /tmp/ccPDOzHJ.s:3124   .text.validateFunction:0000000000000000 validateFunction
     /tmp/ccPDOzHJ.s:3171   .text.validateFunction:0000000000000044 $d
     /tmp/ccPDOzHJ.s:3189   .text.validateFunction:0000000000000084 $t
     /tmp/ccPDOzHJ.s:4835   .text.readCoil:0000000000000000 readCoil
     /tmp/ccPDOzHJ.s:4559   .text.readDiscreteInputs:0000000000000000 readDiscreteInputs
     /tmp/ccPDOzHJ.s:4357   .text.readHoldingRegisters:0000000000000000 readHoldingRegisters
     /tmp/ccPDOzHJ.s:4081   .text.readInputRegisters:0000000000000000 readInputRegisters
     /tmp/ccPDOzHJ.s:3913   .text.writeSingleCoil:0000000000000000 writeSingleCoil
     /tmp/ccPDOzHJ.s:3762   .text.writeSingleRegister:0000000000000000 writeSingleRegister
     /tmp/ccPDOzHJ.s:3525   .text.writeMultipleCoils:0000000000000000 writeMultipleCoils
     /tmp/ccPDOzHJ.s:3269   .text.writeMultipleRegisters:0000000000000000 writeMultipleRegisters
     /tmp/ccPDOzHJ.s:3726   .text.readExceptionStatus:0000000000000000 readExceptionStatus
     /tmp/ccPDOzHJ.s:3264   .text.writeMultipleRegisters:0000000000000000 $t
     /tmp/ccPDOzHJ.s:5109   .text.getMask:0000000000000000 getMask
     /tmp/ccPDOzHJ.s:3517   .rodata:0000000000000018 .LC1
     /tmp/ccPDOzHJ.s:3520   .text.writeMultipleCoils:0000000000000000 $t
     /tmp/ccPDOzHJ.s:3721   .text.readExceptionStatus:0000000000000000 $t
     /tmp/ccPDOzHJ.s:3757   .text.writeSingleRegister:0000000000000000 $t
     /tmp/ccPDOzHJ.s:3908   .text.writeSingleCoil:0000000000000000 $t
     /tmp/ccPDOzHJ.s:4076   .text.readInputRegisters:0000000000000000 $t
     /tmp/ccPDOzHJ.s:4352   .text.readHoldingRegisters:0000000000000000 $t
     /tmp/ccPDOzHJ.s:4554   .text.readDiscreteInputs:0000000000000000 $t
     /tmp/ccPDOzHJ.s:4830   .text.readCoil:0000000000000000 $t
     /tmp/ccPDOzHJ.s:5104   .text.getMask:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memcmp
malloc
exit
memset
free
printf
