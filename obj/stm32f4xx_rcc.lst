   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RCC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	RCC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	RCC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  28              		.loc 1 197 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  33              		.loc 1 199 0
  34 0000 4FF46053 		mov	r3, #14336
  35 0004 C4F20203 		movt	r3, 16386
  36 0008 1A68     		ldr	r2, [r3]
  37 000a 42F00102 		orr	r2, r2, #1
  38 000e 1A60     		str	r2, [r3]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  39              		.loc 1 202 0
  40 0010 0022     		movs	r2, #0
  41 0012 9A60     		str	r2, [r3, #8]
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  42              		.loc 1 205 0
  43 0014 1968     		ldr	r1, [r3]
  44 0016 21F08471 		bic	r1, r1, #17301504
  45 001a 21F48031 		bic	r1, r1, #65536
  46 001e 1960     		str	r1, [r3]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  47              		.loc 1 208 0
  48 0020 43F21001 		movw	r1, #12304
  49 0024 C2F20041 		movt	r1, 9216
  50 0028 5960     		str	r1, [r3, #4]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  51              		.loc 1 211 0
  52 002a 1968     		ldr	r1, [r3]
  53 002c 21F48021 		bic	r1, r1, #262144
  54 0030 1960     		str	r1, [r3]
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  55              		.loc 1 214 0
  56 0032 DA60     		str	r2, [r3, #12]
  57 0034 7047     		bx	lr
  58              		.cfi_endproc
  59              	.LFE110:
  61 0036 00BF     		.section	.text.RCC_HSEConfig,"ax",%progbits
  62              		.align	2
  63              		.global	RCC_HSEConfig
  64              		.thumb
  65              		.thumb_func
  67              	RCC_HSEConfig:
  68              	.LFB111:
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  69              		.loc 1 238 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  74              	.LVL0:
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
  75              		.loc 1 243 0
  76 0000 43F60203 		movw	r3, #14338
  77 0004 C4F20203 		movt	r3, 16386
  78 0008 0022     		movs	r2, #0
  79 000a 1A70     		strb	r2, [r3]
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
  80              		.loc 1 246 0
  81 000c 1870     		strb	r0, [r3]
  82 000e 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE111:
  86              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
  87              		.align	2
  88              		.global	RCC_AdjustHSICalibrationValue
  89              		.thumb
  90              		.thumb_func
  92              	RCC_AdjustHSICalibrationValue:
  93              	.LFB113:
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  94              		.loc 1 293 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99              	.LVL1:
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 100              		.loc 1 298 0
 101 0000 4FF46053 		mov	r3, #14336
 102 0004 C4F20203 		movt	r3, 16386
 103 0008 1A68     		ldr	r2, [r3]
 104              	.LVL2:
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 105              		.loc 1 301 0
 106 000a 22F0F802 		bic	r2, r2, #248
 107              	.LVL3:
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 108              		.loc 1 304 0
 109 000e 42EAC000 		orr	r0, r2, r0, lsl #3
 110              	.LVL4:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 111              		.loc 1 307 0
 112 0012 1860     		str	r0, [r3]
 113 0014 7047     		bx	lr
 114              		.cfi_endproc
 115              	.LFE113:
 117 0016 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 118              		.align	2
 119              		.global	RCC_HSICmd
 120              		.thumb
 121              		.thumb_func
 123              	RCC_HSICmd:
 124              	.LFB114:
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 125              		.loc 1 329 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.LVL5:
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 131              		.loc 1 333 0
 132 0000 0023     		movs	r3, #0
 133 0002 C4F24723 		movt	r3, 16967
 134 0006 1860     		str	r0, [r3]
 135 0008 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE114:
 139 000a 00BF     		.section	.text.RCC_LSEConfig,"ax",%progbits
 140              		.align	2
 141              		.global	RCC_LSEConfig
 142              		.thumb
 143              		.thumb_func
 145              	RCC_LSEConfig:
 146              	.LFB115:
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 147              		.loc 1 354 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              		@ link register save eliminated.
 152              	.LVL6:
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 153              		.loc 1 360 0
 154 0000 43F67003 		movw	r3, #14448
 155 0004 C4F20203 		movt	r3, 16386
 156 0008 0022     		movs	r2, #0
 157 000a 1A70     		strb	r2, [r3]
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 158              		.loc 1 363 0
 159 000c 1A70     		strb	r2, [r3]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 160              		.loc 1 366 0
 161 000e 0128     		cmp	r0, #1
 162 0010 02D0     		beq	.L7
 163 0012 0428     		cmp	r0, #4
 164 0014 07D0     		beq	.L8
 165 0016 7047     		bx	lr
 166              	.L7:
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 167              		.loc 1 370 0
 168 0018 43F67003 		movw	r3, #14448
 169 001c C4F20203 		movt	r3, 16386
 170 0020 0122     		movs	r2, #1
 171 0022 1A70     		strb	r2, [r3]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 172              		.loc 1 371 0
 173 0024 7047     		bx	lr
 174              	.L8:
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 175              		.loc 1 374 0
 176 0026 43F67003 		movw	r3, #14448
 177 002a C4F20203 		movt	r3, 16386
 178 002e 0522     		movs	r2, #5
 179 0030 1A70     		strb	r2, [r3]
 180 0032 7047     		bx	lr
 181              		.cfi_endproc
 182              	.LFE115:
 184              		.section	.text.RCC_LSICmd,"ax",%progbits
 185              		.align	2
 186              		.global	RCC_LSICmd
 187              		.thumb
 188              		.thumb_func
 190              	RCC_LSICmd:
 191              	.LFB116:
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 192              		.loc 1 394 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197              	.LVL7:
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 198              		.loc 1 398 0
 199 0000 4FF46863 		mov	r3, #3712
 200 0004 C4F24723 		movt	r3, 16967
 201 0008 1860     		str	r0, [r3]
 202 000a 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE116:
 206              		.section	.text.RCC_PLLConfig,"ax",%progbits
 207              		.align	2
 208              		.global	RCC_PLLConfig
 209              		.thumb
 210              		.thumb_func
 212              	RCC_PLLConfig:
 213              	.LFB117:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 214              		.loc 1 437 0
 215              		.cfi_startproc
 216              		@ args = 4, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219              	.LVL8:
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 220              		.loc 1 445 0
 221 0000 41EA8212 		orr	r2, r1, r2, lsl #6
 222              	.LVL9:
 223 0004 5B08     		lsrs	r3, r3, #1
 224              	.LVL10:
 225 0006 013B     		subs	r3, r3, #1
 226 0008 42EA0342 		orr	r2, r2, r3, lsl #16
 227 000c 1043     		orrs	r0, r0, r2
 228              	.LVL11:
 229 000e 009B     		ldr	r3, [sp]
 230 0010 40EA0362 		orr	r2, r0, r3, lsl #24
 231 0014 4FF46053 		mov	r3, #14336
 232 0018 C4F20203 		movt	r3, 16386
 233 001c 5A60     		str	r2, [r3, #4]
 234              	.LVL12:
 235 001e 7047     		bx	lr
 236              		.cfi_endproc
 237              	.LFE117:
 239              		.section	.text.RCC_PLLCmd,"ax",%progbits
 240              		.align	2
 241              		.global	RCC_PLLCmd
 242              		.thumb
 243              		.thumb_func
 245              	RCC_PLLCmd:
 246              	.LFB118:
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 247              		.loc 1 460 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252              	.LVL13:
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 253              		.loc 1 463 0
 254 0000 6023     		movs	r3, #96
 255 0002 C4F24723 		movt	r3, 16967
 256 0006 1860     		str	r0, [r3]
 257 0008 7047     		bx	lr
 258              		.cfi_endproc
 259              	.LFE118:
 261 000a 00BF     		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 262              		.align	2
 263              		.global	RCC_PLLI2SConfig
 264              		.thumb
 265              		.thumb_func
 267              	RCC_PLLI2SConfig:
 268              	.LFB119:
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 269              		.loc 1 487 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274              	.LVL14:
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 275              		.loc 1 492 0
 276 0000 0907     		lsls	r1, r1, #28
 277              	.LVL15:
 278 0002 41EA8010 		orr	r0, r1, r0, lsl #6
 279              	.LVL16:
 280 0006 4FF46053 		mov	r3, #14336
 281 000a C4F20203 		movt	r3, 16386
 282 000e C3F88400 		str	r0, [r3, #132]
 283 0012 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE119:
 287              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 288              		.align	2
 289              		.global	RCC_PLLI2SCmd
 290              		.thumb
 291              		.thumb_func
 293              	RCC_PLLI2SCmd:
 294              	.LFB120:
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 295              		.loc 1 503 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300              	.LVL17:
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 301              		.loc 1 506 0
 302 0000 6823     		movs	r3, #104
 303 0002 C4F24723 		movt	r3, 16967
 304 0006 1860     		str	r0, [r3]
 305 0008 7047     		bx	lr
 306              		.cfi_endproc
 307              	.LFE120:
 309 000a 00BF     		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 310              		.align	2
 311              		.global	RCC_ClockSecuritySystemCmd
 312              		.thumb
 313              		.thumb_func
 315              	RCC_ClockSecuritySystemCmd:
 316              	.LFB121:
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 317              		.loc 1 521 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              		@ link register save eliminated.
 322              	.LVL18:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 323              		.loc 1 524 0
 324 0000 4C23     		movs	r3, #76
 325 0002 C4F24723 		movt	r3, 16967
 326 0006 1860     		str	r0, [r3]
 327 0008 7047     		bx	lr
 328              		.cfi_endproc
 329              	.LFE121:
 331 000a 00BF     		.section	.text.RCC_MCO1Config,"ax",%progbits
 332              		.align	2
 333              		.global	RCC_MCO1Config
 334              		.thumb
 335              		.thumb_func
 337              	RCC_MCO1Config:
 338              	.LFB122:
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 339              		.loc 1 546 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343              		@ link register save eliminated.
 344              	.LVL19:
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 345              		.loc 1 553 0
 346 0000 4FF46053 		mov	r3, #14336
 347 0004 C4F20203 		movt	r3, 16386
 348 0008 9A68     		ldr	r2, [r3, #8]
 349              	.LVL20:
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 350              		.loc 1 556 0
 351 000a 22F0EC62 		bic	r2, r2, #123731968
 352              	.LVL21:
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 353              		.loc 1 559 0
 354 000e 0143     		orrs	r1, r1, r0
 355              	.LVL22:
 356 0010 0A43     		orrs	r2, r2, r1
 357              	.LVL23:
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 358              		.loc 1 562 0
 359 0012 9A60     		str	r2, [r3, #8]
 360 0014 7047     		bx	lr
 361              		.cfi_endproc
 362              	.LFE122:
 364 0016 00BF     		.section	.text.RCC_MCO2Config,"ax",%progbits
 365              		.align	2
 366              		.global	RCC_MCO2Config
 367              		.thumb
 368              		.thumb_func
 370              	RCC_MCO2Config:
 371              	.LFB123:
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 372              		.loc 1 584 0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 376              		@ link register save eliminated.
 377              	.LVL24:
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 378              		.loc 1 591 0
 379 0000 4FF46053 		mov	r3, #14336
 380 0004 C4F20203 		movt	r3, 16386
 381 0008 9A68     		ldr	r2, [r3, #8]
 382              	.LVL25:
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 383              		.loc 1 594 0
 384 000a 22F07842 		bic	r2, r2, #-134217728
 385              	.LVL26:
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 386              		.loc 1 597 0
 387 000e 0143     		orrs	r1, r1, r0
 388              	.LVL27:
 389 0010 0A43     		orrs	r2, r2, r1
 390              	.LVL28:
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 391              		.loc 1 600 0
 392 0012 9A60     		str	r2, [r3, #8]
 393 0014 7047     		bx	lr
 394              		.cfi_endproc
 395              	.LFE123:
 397 0016 00BF     		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 398              		.align	2
 399              		.global	RCC_SYSCLKConfig
 400              		.thumb
 401              		.thumb_func
 403              	RCC_SYSCLKConfig:
 404              	.LFB124:
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 405              		.loc 1 689 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410              	.LVL29:
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 411              		.loc 1 695 0
 412 0000 4FF46053 		mov	r3, #14336
 413 0004 C4F20203 		movt	r3, 16386
 414 0008 9A68     		ldr	r2, [r3, #8]
 415              	.LVL30:
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 416              		.loc 1 698 0
 417 000a 22F00302 		bic	r2, r2, #3
 418              	.LVL31:
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 419              		.loc 1 701 0
 420 000e 1043     		orrs	r0, r0, r2
 421              	.LVL32:
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 422              		.loc 1 704 0
 423 0010 9860     		str	r0, [r3, #8]
 424 0012 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE124:
 428              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 429              		.align	2
 430              		.global	RCC_GetSYSCLKSource
 431              		.thumb
 432              		.thumb_func
 434              	RCC_GetSYSCLKSource:
 435              	.LFB125:
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 436              		.loc 1 717 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 441              		.loc 1 718 0
 442 0000 4FF46053 		mov	r3, #14336
 443 0004 C4F20203 		movt	r3, 16386
 444 0008 9868     		ldr	r0, [r3, #8]
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 445              		.loc 1 719 0
 446 000a 00F00C00 		and	r0, r0, #12
 447 000e 7047     		bx	lr
 448              		.cfi_endproc
 449              	.LFE125:
 451              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 452              		.align	2
 453              		.global	RCC_HCLKConfig
 454              		.thumb
 455              		.thumb_func
 457              	RCC_HCLKConfig:
 458              	.LFB126:
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 459              		.loc 1 742 0
 460              		.cfi_startproc
 461              		@ args = 0, pretend = 0, frame = 0
 462              		@ frame_needed = 0, uses_anonymous_args = 0
 463              		@ link register save eliminated.
 464              	.LVL33:
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 465              		.loc 1 748 0
 466 0000 4FF46053 		mov	r3, #14336
 467 0004 C4F20203 		movt	r3, 16386
 468 0008 9A68     		ldr	r2, [r3, #8]
 469              	.LVL34:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 470              		.loc 1 751 0
 471 000a 22F0F002 		bic	r2, r2, #240
 472              	.LVL35:
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 473              		.loc 1 754 0
 474 000e 1043     		orrs	r0, r0, r2
 475              	.LVL36:
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 476              		.loc 1 757 0
 477 0010 9860     		str	r0, [r3, #8]
 478 0012 7047     		bx	lr
 479              		.cfi_endproc
 480              	.LFE126:
 482              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 483              		.align	2
 484              		.global	RCC_PCLK1Config
 485              		.thumb
 486              		.thumb_func
 488              	RCC_PCLK1Config:
 489              	.LFB127:
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 490              		.loc 1 774 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL37:
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 496              		.loc 1 780 0
 497 0000 4FF46053 		mov	r3, #14336
 498 0004 C4F20203 		movt	r3, 16386
 499 0008 9A68     		ldr	r2, [r3, #8]
 500              	.LVL38:
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 501              		.loc 1 783 0
 502 000a 22F4E052 		bic	r2, r2, #7168
 503              	.LVL39:
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 504              		.loc 1 786 0
 505 000e 1043     		orrs	r0, r0, r2
 506              	.LVL40:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 507              		.loc 1 789 0
 508 0010 9860     		str	r0, [r3, #8]
 509 0012 7047     		bx	lr
 510              		.cfi_endproc
 511              	.LFE127:
 513              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 514              		.align	2
 515              		.global	RCC_PCLK2Config
 516              		.thumb
 517              		.thumb_func
 519              	RCC_PCLK2Config:
 520              	.LFB128:
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 521              		.loc 1 805 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              		@ link register save eliminated.
 526              	.LVL41:
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 527              		.loc 1 811 0
 528 0000 4FF46053 		mov	r3, #14336
 529 0004 C4F20203 		movt	r3, 16386
 530 0008 9A68     		ldr	r2, [r3, #8]
 531              	.LVL42:
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 532              		.loc 1 814 0
 533 000a 22F46042 		bic	r2, r2, #57344
 534              	.LVL43:
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 535              		.loc 1 817 0
 536 000e 42EAC000 		orr	r0, r2, r0, lsl #3
 537              	.LVL44:
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 538              		.loc 1 820 0
 539 0012 9860     		str	r0, [r3, #8]
 540 0014 7047     		bx	lr
 541              		.cfi_endproc
 542              	.LFE128:
 544 0016 00BF     		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 545              		.align	2
 546              		.global	RCC_GetClocksFreq
 547              		.thumb
 548              		.thumb_func
 550              	RCC_GetClocksFreq:
 551              	.LFB129:
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 552              		.loc 1 857 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 0
 555              		@ frame_needed = 0, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557              	.LVL45:
 558 0000 10B4     		push	{r4}
 559              	.LCFI0:
 560              		.cfi_def_cfa_offset 4
 561              		.cfi_offset 4, -4
 562              	.LVL46:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 563              		.loc 1 861 0
 564 0002 4FF46053 		mov	r3, #14336
 565 0006 C4F20203 		movt	r3, 16386
 566 000a 9B68     		ldr	r3, [r3, #8]
 567 000c 03F00C03 		and	r3, r3, #12
 568              	.LVL47:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 569              		.loc 1 863 0
 570 0010 042B     		cmp	r3, #4
 571 0012 09D0     		beq	.L24
 572 0014 082B     		cmp	r3, #8
 573 0016 0DD0     		beq	.L25
 574 0018 002B     		cmp	r3, #0
 575 001a 36D1     		bne	.L30
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 576              		.loc 1 866 0
 577 001c 4FF41053 		mov	r3, #9216
 578              	.LVL48:
 579 0020 C0F2F403 		movt	r3, 244
 580 0024 0360     		str	r3, [r0]
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 581              		.loc 1 867 0
 582 0026 35E0     		b	.L27
 583              	.LVL49:
 584              	.L24:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 585              		.loc 1 869 0
 586 0028 4FF49053 		mov	r3, #4608
 587              	.LVL50:
 588 002c C0F27A03 		movt	r3, 122
 589 0030 0360     		str	r3, [r0]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 590              		.loc 1 870 0
 591 0032 2FE0     		b	.L27
 592              	.LVL51:
 593              	.L25:
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 594              		.loc 1 876 0
 595 0034 4FF46053 		mov	r3, #14336
 596              	.LVL52:
 597 0038 C4F20203 		movt	r3, 16386
 598 003c 5A68     		ldr	r2, [r3, #4]
 599              	.LVL53:
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 600              		.loc 1 877 0
 601 003e 5B68     		ldr	r3, [r3, #4]
 602 0040 03F03F03 		and	r3, r3, #63
 603              	.LVL54:
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 604              		.loc 1 879 0
 605 0044 12F4800F 		tst	r2, #4194304
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 606              		.loc 1 882 0
 607 0048 19BF     		ittee	ne
 608 004a 4FF49051 		movne	r1, #4608
 609 004e C0F27A01 		movtne	r1, 122
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 610              		.loc 1 887 0
 611 0052 4FF41051 		moveq	r1, #9216
 612 0056 C0F2F401 		movteq	r1, 244
 613 005a B1FBF3F3 		udiv	r3, r1, r3
 614              	.LVL55:
 615 005e 4FF46052 		mov	r2, #14336
 616              	.LVL56:
 617 0062 C4F20202 		movt	r2, 16386
 618 0066 5168     		ldr	r1, [r2, #4]
 619 0068 C1F38811 		ubfx	r1, r1, #6, #9
 620 006c 01FB03F1 		mul	r1, r1, r3
 621              	.LVL57:
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 622              		.loc 1 890 0
 623 0070 4FF46053 		mov	r3, #14336
 624 0074 C4F20203 		movt	r3, 16386
 625 0078 5A68     		ldr	r2, [r3, #4]
 626 007a C2F30142 		ubfx	r2, r2, #16, #2
 627 007e 0132     		adds	r2, r2, #1
 628 0080 5200     		lsls	r2, r2, #1
 629              	.LVL58:
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 630              		.loc 1 891 0
 631 0082 B1FBF2F3 		udiv	r3, r1, r2
 632 0086 0360     		str	r3, [r0]
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 633              		.loc 1 892 0
 634 0088 04E0     		b	.L27
 635              	.LVL59:
 636              	.L30:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 637              		.loc 1 894 0
 638 008a 4FF41053 		mov	r3, #9216
 639              	.LVL60:
 640 008e C0F2F403 		movt	r3, 244
 641 0092 0360     		str	r3, [r0]
 642              	.LVL61:
 643              	.L27:
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 644              		.loc 1 900 0
 645 0094 4FF46052 		mov	r2, #14336
 646 0098 C4F20202 		movt	r2, 16386
 647 009c 9168     		ldr	r1, [r2, #8]
 648              	.LVL62:
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 649              		.loc 1 901 0
 650 009e C1F30311 		ubfx	r1, r1, #4, #4
 651              	.LVL63:
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 652              		.loc 1 902 0
 653 00a2 40F20003 		movw	r3, #:lower16:.LANCHOR0
 654 00a6 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 655 00aa 595C     		ldrb	r1, [r3, r1]	@ zero_extendqisi2
 656              	.LVL64:
 657 00ac C9B2     		uxtb	r1, r1
 658              	.LVL65:
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 659              		.loc 1 904 0
 660 00ae 0468     		ldr	r4, [r0]
 661 00b0 24FA01F1 		lsr	r1, r4, r1
 662              	.LVL66:
 663 00b4 4160     		str	r1, [r0, #4]
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 664              		.loc 1 907 0
 665 00b6 9468     		ldr	r4, [r2, #8]
 666              	.LVL67:
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 667              		.loc 1 908 0
 668 00b8 C4F38224 		ubfx	r4, r4, #10, #3
 669              	.LVL68:
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 670              		.loc 1 909 0
 671 00bc 1C5D     		ldrb	r4, [r3, r4]	@ zero_extendqisi2
 672              	.LVL69:
 673 00be E4B2     		uxtb	r4, r4
 674              	.LVL70:
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 675              		.loc 1 911 0
 676 00c0 21FA04F4 		lsr	r4, r1, r4
 677              	.LVL71:
 678 00c4 8460     		str	r4, [r0, #8]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 679              		.loc 1 914 0
 680 00c6 9268     		ldr	r2, [r2, #8]
 681              	.LVL72:
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 682              		.loc 1 915 0
 683 00c8 C2F34232 		ubfx	r2, r2, #13, #3
 684              	.LVL73:
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 685              		.loc 1 916 0
 686 00cc 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 687 00ce DBB2     		uxtb	r3, r3
 688              	.LVL74:
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 689              		.loc 1 918 0
 690 00d0 D940     		lsrs	r1, r1, r3
 691 00d2 C160     		str	r1, [r0, #12]
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 692              		.loc 1 919 0
 693 00d4 5DF8044B 		ldr	r4, [sp], #4
 694 00d8 7047     		bx	lr
 695              		.cfi_endproc
 696              	.LFE129:
 698 00da 00BF     		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 699              		.align	2
 700              		.global	RCC_RTCCLKConfig
 701              		.thumb
 702              		.thumb_func
 704              	RCC_RTCCLKConfig:
 705              	.LFB130:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 706              		.loc 1 982 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 0
 709              		@ frame_needed = 0, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 711              	.LVL75:
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 712              		.loc 1 988 0
 713 0000 00F44073 		and	r3, r0, #768
 714 0004 B3F5407F 		cmp	r3, #768
 715 0008 0CD1     		bne	.L32
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 716              		.loc 1 990 0
 717 000a 4FF46053 		mov	r3, #14336
 718 000e C4F20203 		movt	r3, 16386
 719 0012 9968     		ldr	r1, [r3, #8]
 720              	.LVL76:
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 721              		.loc 1 993 0
 722 0014 21F4F811 		bic	r1, r1, #2031616
 723              	.LVL77:
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 724              		.loc 1 996 0
 725 0018 20F07042 		bic	r2, r0, #-268435456
 726 001c 22F44072 		bic	r2, r2, #768
 727 0020 0A43     		orrs	r2, r2, r1
 728              	.LVL78:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 729              		.loc 1 999 0
 730 0022 9A60     		str	r2, [r3, #8]
 731              	.LVL79:
 732              	.L32:
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 733              		.loc 1 1003 0
 734 0024 4FF46053 		mov	r3, #14336
 735 0028 C4F20203 		movt	r3, 16386
 736 002c 1A6F     		ldr	r2, [r3, #112]
 737 002e C0F30B00 		ubfx	r0, r0, #0, #12
 738              	.LVL80:
 739 0032 1043     		orrs	r0, r0, r2
 740 0034 1867     		str	r0, [r3, #112]
 741 0036 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE130:
 745              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 746              		.align	2
 747              		.global	RCC_RTCCLKCmd
 748              		.thumb
 749              		.thumb_func
 751              	RCC_RTCCLKCmd:
 752              	.LFB131:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 753              		.loc 1 1014 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758              	.LVL81:
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 759              		.loc 1 1018 0
 760 0000 40F63C63 		movw	r3, #3644
 761 0004 C4F24723 		movt	r3, 16967
 762 0008 1860     		str	r0, [r3]
 763 000a 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE131:
 767              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 768              		.align	2
 769              		.global	RCC_BackupResetCmd
 770              		.thumb
 771              		.thumb_func
 773              	RCC_BackupResetCmd:
 774              	.LFB132:
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 775              		.loc 1 1031 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780              	.LVL82:
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 781              		.loc 1 1034 0
 782 0000 4FF46463 		mov	r3, #3648
 783 0004 C4F24723 		movt	r3, 16967
 784 0008 1860     		str	r0, [r3]
 785 000a 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE132:
 789              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 790              		.align	2
 791              		.global	RCC_I2SCLKConfig
 792              		.thumb
 793              		.thumb_func
 795              	RCC_I2SCLKConfig:
 796              	.LFB133:
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 797              		.loc 1 1051 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 0
 800              		@ frame_needed = 0, uses_anonymous_args = 0
 801              		@ link register save eliminated.
 802              	.LVL83:
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 803              		.loc 1 1055 0
 804 0000 4FF4AE73 		mov	r3, #348
 805 0004 C4F24723 		movt	r3, 16967
 806 0008 1860     		str	r0, [r3]
 807 000a 7047     		bx	lr
 808              		.cfi_endproc
 809              	.LFE133:
 811              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 812              		.align	2
 813              		.global	RCC_AHB1PeriphClockCmd
 814              		.thumb
 815              		.thumb_func
 817              	RCC_AHB1PeriphClockCmd:
 818              	.LFB134:
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 819              		.loc 1 1089 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 823              		@ link register save eliminated.
 824              	.LVL84:
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 825              		.loc 1 1094 0
 826 0000 39B1     		cbz	r1, .L37
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 827              		.loc 1 1096 0
 828 0002 4FF46053 		mov	r3, #14336
 829 0006 C4F20203 		movt	r3, 16386
 830 000a 1A6B     		ldr	r2, [r3, #48]
 831 000c 1043     		orrs	r0, r0, r2
 832              	.LVL85:
 833 000e 1863     		str	r0, [r3, #48]
 834 0010 7047     		bx	lr
 835              	.LVL86:
 836              	.L37:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 837              		.loc 1 1100 0
 838 0012 4FF46053 		mov	r3, #14336
 839 0016 C4F20203 		movt	r3, 16386
 840 001a 1A6B     		ldr	r2, [r3, #48]
 841 001c 22EA0000 		bic	r0, r2, r0
 842              	.LVL87:
 843 0020 1863     		str	r0, [r3, #48]
 844 0022 7047     		bx	lr
 845              		.cfi_endproc
 846              	.LFE134:
 848              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 849              		.align	2
 850              		.global	RCC_AHB2PeriphClockCmd
 851              		.thumb
 852              		.thumb_func
 854              	RCC_AHB2PeriphClockCmd:
 855              	.LFB135:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 856              		.loc 1 1121 0
 857              		.cfi_startproc
 858              		@ args = 0, pretend = 0, frame = 0
 859              		@ frame_needed = 0, uses_anonymous_args = 0
 860              		@ link register save eliminated.
 861              	.LVL88:
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 862              		.loc 1 1126 0
 863 0000 39B1     		cbz	r1, .L40
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 864              		.loc 1 1128 0
 865 0002 4FF46053 		mov	r3, #14336
 866 0006 C4F20203 		movt	r3, 16386
 867 000a 5A6B     		ldr	r2, [r3, #52]
 868 000c 1043     		orrs	r0, r0, r2
 869              	.LVL89:
 870 000e 5863     		str	r0, [r3, #52]
 871 0010 7047     		bx	lr
 872              	.LVL90:
 873              	.L40:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 874              		.loc 1 1132 0
 875 0012 4FF46053 		mov	r3, #14336
 876 0016 C4F20203 		movt	r3, 16386
 877 001a 5A6B     		ldr	r2, [r3, #52]
 878 001c 22EA0000 		bic	r0, r2, r0
 879              	.LVL91:
 880 0020 5863     		str	r0, [r3, #52]
 881 0022 7047     		bx	lr
 882              		.cfi_endproc
 883              	.LFE135:
 885              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 886              		.align	2
 887              		.global	RCC_AHB3PeriphClockCmd
 888              		.thumb
 889              		.thumb_func
 891              	RCC_AHB3PeriphClockCmd:
 892              	.LFB136:
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 893              		.loc 1 1148 0
 894              		.cfi_startproc
 895              		@ args = 0, pretend = 0, frame = 0
 896              		@ frame_needed = 0, uses_anonymous_args = 0
 897              		@ link register save eliminated.
 898              	.LVL92:
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 899              		.loc 1 1153 0
 900 0000 39B1     		cbz	r1, .L43
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 901              		.loc 1 1155 0
 902 0002 4FF46053 		mov	r3, #14336
 903 0006 C4F20203 		movt	r3, 16386
 904 000a 9A6B     		ldr	r2, [r3, #56]
 905 000c 1043     		orrs	r0, r0, r2
 906              	.LVL93:
 907 000e 9863     		str	r0, [r3, #56]
 908 0010 7047     		bx	lr
 909              	.LVL94:
 910              	.L43:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 911              		.loc 1 1159 0
 912 0012 4FF46053 		mov	r3, #14336
 913 0016 C4F20203 		movt	r3, 16386
 914 001a 9A6B     		ldr	r2, [r3, #56]
 915 001c 22EA0000 		bic	r0, r2, r0
 916              	.LVL95:
 917 0020 9863     		str	r0, [r3, #56]
 918 0022 7047     		bx	lr
 919              		.cfi_endproc
 920              	.LFE136:
 922              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 923              		.align	2
 924              		.global	RCC_APB1PeriphClockCmd
 925              		.thumb
 926              		.thumb_func
 928              	RCC_APB1PeriphClockCmd:
 929              	.LFB137:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 930              		.loc 1 1198 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              		@ link register save eliminated.
 935              	.LVL96:
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 936              		.loc 1 1203 0
 937 0000 39B1     		cbz	r1, .L46
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 938              		.loc 1 1205 0
 939 0002 4FF46053 		mov	r3, #14336
 940 0006 C4F20203 		movt	r3, 16386
 941 000a 1A6C     		ldr	r2, [r3, #64]
 942 000c 1043     		orrs	r0, r0, r2
 943              	.LVL97:
 944 000e 1864     		str	r0, [r3, #64]
 945 0010 7047     		bx	lr
 946              	.LVL98:
 947              	.L46:
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 948              		.loc 1 1209 0
 949 0012 4FF46053 		mov	r3, #14336
 950 0016 C4F20203 		movt	r3, 16386
 951 001a 1A6C     		ldr	r2, [r3, #64]
 952 001c 22EA0000 		bic	r0, r2, r0
 953              	.LVL99:
 954 0020 1864     		str	r0, [r3, #64]
 955 0022 7047     		bx	lr
 956              		.cfi_endproc
 957              	.LFE137:
 959              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 960              		.align	2
 961              		.global	RCC_APB2PeriphClockCmd
 962              		.thumb
 963              		.thumb_func
 965              	RCC_APB2PeriphClockCmd:
 966              	.LFB138:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 967              		.loc 1 1238 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 0
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 972              	.LVL100:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 973              		.loc 1 1243 0
 974 0000 39B1     		cbz	r1, .L49
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 975              		.loc 1 1245 0
 976 0002 4FF46053 		mov	r3, #14336
 977 0006 C4F20203 		movt	r3, 16386
 978 000a 5A6C     		ldr	r2, [r3, #68]
 979 000c 1043     		orrs	r0, r0, r2
 980              	.LVL101:
 981 000e 5864     		str	r0, [r3, #68]
 982 0010 7047     		bx	lr
 983              	.LVL102:
 984              	.L49:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 985              		.loc 1 1249 0
 986 0012 4FF46053 		mov	r3, #14336
 987 0016 C4F20203 		movt	r3, 16386
 988 001a 5A6C     		ldr	r2, [r3, #68]
 989 001c 22EA0000 		bic	r0, r2, r0
 990              	.LVL103:
 991 0020 5864     		str	r0, [r3, #68]
 992 0022 7047     		bx	lr
 993              		.cfi_endproc
 994              	.LFE138:
 996              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 997              		.align	2
 998              		.global	RCC_AHB1PeriphResetCmd
 999              		.thumb
 1000              		.thumb_func
 1002              	RCC_AHB1PeriphResetCmd:
 1003              	.LFB139:
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1004              		.loc 1 1277 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 0
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008              		@ link register save eliminated.
 1009              	.LVL104:
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1010              		.loc 1 1282 0
 1011 0000 39B1     		cbz	r1, .L52
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1012              		.loc 1 1284 0
 1013 0002 4FF46053 		mov	r3, #14336
 1014 0006 C4F20203 		movt	r3, 16386
 1015 000a 1A69     		ldr	r2, [r3, #16]
 1016 000c 1043     		orrs	r0, r0, r2
 1017              	.LVL105:
 1018 000e 1861     		str	r0, [r3, #16]
 1019 0010 7047     		bx	lr
 1020              	.LVL106:
 1021              	.L52:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1022              		.loc 1 1288 0
 1023 0012 4FF46053 		mov	r3, #14336
 1024 0016 C4F20203 		movt	r3, 16386
 1025 001a 1A69     		ldr	r2, [r3, #16]
 1026 001c 22EA0000 		bic	r0, r2, r0
 1027              	.LVL107:
 1028 0020 1861     		str	r0, [r3, #16]
 1029 0022 7047     		bx	lr
 1030              		.cfi_endproc
 1031              	.LFE139:
 1033              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1034              		.align	2
 1035              		.global	RCC_AHB2PeriphResetCmd
 1036              		.thumb
 1037              		.thumb_func
 1039              	RCC_AHB2PeriphResetCmd:
 1040              	.LFB140:
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1041              		.loc 1 1306 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 0
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045              		@ link register save eliminated.
 1046              	.LVL108:
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1047              		.loc 1 1311 0
 1048 0000 39B1     		cbz	r1, .L55
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1049              		.loc 1 1313 0
 1050 0002 4FF46053 		mov	r3, #14336
 1051 0006 C4F20203 		movt	r3, 16386
 1052 000a 5A69     		ldr	r2, [r3, #20]
 1053 000c 1043     		orrs	r0, r0, r2
 1054              	.LVL109:
 1055 000e 5861     		str	r0, [r3, #20]
 1056 0010 7047     		bx	lr
 1057              	.LVL110:
 1058              	.L55:
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1059              		.loc 1 1317 0
 1060 0012 4FF46053 		mov	r3, #14336
 1061 0016 C4F20203 		movt	r3, 16386
 1062 001a 5A69     		ldr	r2, [r3, #20]
 1063 001c 22EA0000 		bic	r0, r2, r0
 1064              	.LVL111:
 1065 0020 5861     		str	r0, [r3, #20]
 1066 0022 7047     		bx	lr
 1067              		.cfi_endproc
 1068              	.LFE140:
 1070              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1071              		.align	2
 1072              		.global	RCC_AHB3PeriphResetCmd
 1073              		.thumb
 1074              		.thumb_func
 1076              	RCC_AHB3PeriphResetCmd:
 1077              	.LFB141:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1078              		.loc 1 1330 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 1083              	.LVL112:
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1084              		.loc 1 1335 0
 1085 0000 39B1     		cbz	r1, .L58
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1086              		.loc 1 1337 0
 1087 0002 4FF46053 		mov	r3, #14336
 1088 0006 C4F20203 		movt	r3, 16386
 1089 000a 9A69     		ldr	r2, [r3, #24]
 1090 000c 1043     		orrs	r0, r0, r2
 1091              	.LVL113:
 1092 000e 9861     		str	r0, [r3, #24]
 1093 0010 7047     		bx	lr
 1094              	.LVL114:
 1095              	.L58:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1096              		.loc 1 1341 0
 1097 0012 4FF46053 		mov	r3, #14336
 1098 0016 C4F20203 		movt	r3, 16386
 1099 001a 9A69     		ldr	r2, [r3, #24]
 1100 001c 22EA0000 		bic	r0, r2, r0
 1101              	.LVL115:
 1102 0020 9861     		str	r0, [r3, #24]
 1103 0022 7047     		bx	lr
 1104              		.cfi_endproc
 1105              	.LFE141:
 1107              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1108              		.align	2
 1109              		.global	RCC_APB1PeriphResetCmd
 1110              		.thumb
 1111              		.thumb_func
 1113              	RCC_APB1PeriphResetCmd:
 1114              	.LFB142:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1115              		.loc 1 1377 0
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 0
 1118              		@ frame_needed = 0, uses_anonymous_args = 0
 1119              		@ link register save eliminated.
 1120              	.LVL116:
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1121              		.loc 1 1381 0
 1122 0000 39B1     		cbz	r1, .L61
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1123              		.loc 1 1383 0
 1124 0002 4FF46053 		mov	r3, #14336
 1125 0006 C4F20203 		movt	r3, 16386
 1126 000a 1A6A     		ldr	r2, [r3, #32]
 1127 000c 1043     		orrs	r0, r0, r2
 1128              	.LVL117:
 1129 000e 1862     		str	r0, [r3, #32]
 1130 0010 7047     		bx	lr
 1131              	.LVL118:
 1132              	.L61:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1133              		.loc 1 1387 0
 1134 0012 4FF46053 		mov	r3, #14336
 1135 0016 C4F20203 		movt	r3, 16386
 1136 001a 1A6A     		ldr	r2, [r3, #32]
 1137 001c 22EA0000 		bic	r0, r2, r0
 1138              	.LVL119:
 1139 0020 1862     		str	r0, [r3, #32]
 1140 0022 7047     		bx	lr
 1141              		.cfi_endproc
 1142              	.LFE142:
 1144              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1145              		.align	2
 1146              		.global	RCC_APB2PeriphResetCmd
 1147              		.thumb
 1148              		.thumb_func
 1150              	RCC_APB2PeriphResetCmd:
 1151              	.LFB143:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1152              		.loc 1 1413 0
 1153              		.cfi_startproc
 1154              		@ args = 0, pretend = 0, frame = 0
 1155              		@ frame_needed = 0, uses_anonymous_args = 0
 1156              		@ link register save eliminated.
 1157              	.LVL120:
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1158              		.loc 1 1417 0
 1159 0000 39B1     		cbz	r1, .L64
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1160              		.loc 1 1419 0
 1161 0002 4FF46053 		mov	r3, #14336
 1162 0006 C4F20203 		movt	r3, 16386
 1163 000a 5A6A     		ldr	r2, [r3, #36]
 1164 000c 1043     		orrs	r0, r0, r2
 1165              	.LVL121:
 1166 000e 5862     		str	r0, [r3, #36]
 1167 0010 7047     		bx	lr
 1168              	.LVL122:
 1169              	.L64:
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1170              		.loc 1 1423 0
 1171 0012 4FF46053 		mov	r3, #14336
 1172 0016 C4F20203 		movt	r3, 16386
 1173 001a 5A6A     		ldr	r2, [r3, #36]
 1174 001c 22EA0000 		bic	r0, r2, r0
 1175              	.LVL123:
 1176 0020 5862     		str	r0, [r3, #36]
 1177 0022 7047     		bx	lr
 1178              		.cfi_endproc
 1179              	.LFE143:
 1181              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1182              		.align	2
 1183              		.global	RCC_AHB1PeriphClockLPModeCmd
 1184              		.thumb
 1185              		.thumb_func
 1187              	RCC_AHB1PeriphClockLPModeCmd:
 1188              	.LFB144:
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1189              		.loc 1 1459 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 0
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193              		@ link register save eliminated.
 1194              	.LVL124:
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1195              		.loc 1 1463 0
 1196 0000 39B1     		cbz	r1, .L67
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 1197              		.loc 1 1465 0
 1198 0002 4FF46053 		mov	r3, #14336
 1199 0006 C4F20203 		movt	r3, 16386
 1200 000a 1A6D     		ldr	r2, [r3, #80]
 1201 000c 1043     		orrs	r0, r0, r2
 1202              	.LVL125:
 1203 000e 1865     		str	r0, [r3, #80]
 1204 0010 7047     		bx	lr
 1205              	.LVL126:
 1206              	.L67:
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 1207              		.loc 1 1469 0
 1208 0012 4FF46053 		mov	r3, #14336
 1209 0016 C4F20203 		movt	r3, 16386
 1210 001a 1A6D     		ldr	r2, [r3, #80]
 1211 001c 22EA0000 		bic	r0, r2, r0
 1212              	.LVL127:
 1213 0020 1865     		str	r0, [r3, #80]
 1214 0022 7047     		bx	lr
 1215              		.cfi_endproc
 1216              	.LFE144:
 1218              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1219              		.align	2
 1220              		.global	RCC_AHB2PeriphClockLPModeCmd
 1221              		.thumb
 1222              		.thumb_func
 1224              	RCC_AHB2PeriphClockLPModeCmd:
 1225              	.LFB145:
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1226              		.loc 1 1491 0
 1227              		.cfi_startproc
 1228              		@ args = 0, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 1230              		@ link register save eliminated.
 1231              	.LVL128:
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1232              		.loc 1 1495 0
 1233 0000 39B1     		cbz	r1, .L70
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 1234              		.loc 1 1497 0
 1235 0002 4FF46053 		mov	r3, #14336
 1236 0006 C4F20203 		movt	r3, 16386
 1237 000a 5A6D     		ldr	r2, [r3, #84]
 1238 000c 1043     		orrs	r0, r0, r2
 1239              	.LVL129:
 1240 000e 5865     		str	r0, [r3, #84]
 1241 0010 7047     		bx	lr
 1242              	.LVL130:
 1243              	.L70:
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 1244              		.loc 1 1501 0
 1245 0012 4FF46053 		mov	r3, #14336
 1246 0016 C4F20203 		movt	r3, 16386
 1247 001a 5A6D     		ldr	r2, [r3, #84]
 1248 001c 22EA0000 		bic	r0, r2, r0
 1249              	.LVL131:
 1250 0020 5865     		str	r0, [r3, #84]
 1251 0022 7047     		bx	lr
 1252              		.cfi_endproc
 1253              	.LFE145:
 1255              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1256              		.align	2
 1257              		.global	RCC_AHB3PeriphClockLPModeCmd
 1258              		.thumb
 1259              		.thumb_func
 1261              	RCC_AHB3PeriphClockLPModeCmd:
 1262              	.LFB146:
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1263              		.loc 1 1518 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268              	.LVL132:
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1269              		.loc 1 1522 0
 1270 0000 39B1     		cbz	r1, .L73
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 1271              		.loc 1 1524 0
 1272 0002 4FF46053 		mov	r3, #14336
 1273 0006 C4F20203 		movt	r3, 16386
 1274 000a 9A6D     		ldr	r2, [r3, #88]
 1275 000c 1043     		orrs	r0, r0, r2
 1276              	.LVL133:
 1277 000e 9865     		str	r0, [r3, #88]
 1278 0010 7047     		bx	lr
 1279              	.LVL134:
 1280              	.L73:
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 1281              		.loc 1 1528 0
 1282 0012 4FF46053 		mov	r3, #14336
 1283 0016 C4F20203 		movt	r3, 16386
 1284 001a 9A6D     		ldr	r2, [r3, #88]
 1285 001c 22EA0000 		bic	r0, r2, r0
 1286              	.LVL135:
 1287 0020 9865     		str	r0, [r3, #88]
 1288 0022 7047     		bx	lr
 1289              		.cfi_endproc
 1290              	.LFE146:
 1292              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1293              		.align	2
 1294              		.global	RCC_APB1PeriphClockLPModeCmd
 1295              		.thumb
 1296              		.thumb_func
 1298              	RCC_APB1PeriphClockLPModeCmd:
 1299              	.LFB147:
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1300              		.loc 1 1568 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 0
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 1304              		@ link register save eliminated.
 1305              	.LVL136:
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1306              		.loc 1 1572 0
 1307 0000 39B1     		cbz	r1, .L76
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 1308              		.loc 1 1574 0
 1309 0002 4FF46053 		mov	r3, #14336
 1310 0006 C4F20203 		movt	r3, 16386
 1311 000a 1A6E     		ldr	r2, [r3, #96]
 1312 000c 1043     		orrs	r0, r0, r2
 1313              	.LVL137:
 1314 000e 1866     		str	r0, [r3, #96]
 1315 0010 7047     		bx	lr
 1316              	.LVL138:
 1317              	.L76:
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 1318              		.loc 1 1578 0
 1319 0012 4FF46053 		mov	r3, #14336
 1320 0016 C4F20203 		movt	r3, 16386
 1321 001a 1A6E     		ldr	r2, [r3, #96]
 1322 001c 22EA0000 		bic	r0, r2, r0
 1323              	.LVL139:
 1324 0020 1866     		str	r0, [r3, #96]
 1325 0022 7047     		bx	lr
 1326              		.cfi_endproc
 1327              	.LFE147:
 1329              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1330              		.align	2
 1331              		.global	RCC_APB2PeriphClockLPModeCmd
 1332              		.thumb
 1333              		.thumb_func
 1335              	RCC_APB2PeriphClockLPModeCmd:
 1336              	.LFB148:
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1337              		.loc 1 1608 0
 1338              		.cfi_startproc
 1339              		@ args = 0, pretend = 0, frame = 0
 1340              		@ frame_needed = 0, uses_anonymous_args = 0
 1341              		@ link register save eliminated.
 1342              	.LVL140:
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1343              		.loc 1 1612 0
 1344 0000 39B1     		cbz	r1, .L79
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 1345              		.loc 1 1614 0
 1346 0002 4FF46053 		mov	r3, #14336
 1347 0006 C4F20203 		movt	r3, 16386
 1348 000a 5A6E     		ldr	r2, [r3, #100]
 1349 000c 1043     		orrs	r0, r0, r2
 1350              	.LVL141:
 1351 000e 5866     		str	r0, [r3, #100]
 1352 0010 7047     		bx	lr
 1353              	.LVL142:
 1354              	.L79:
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 1355              		.loc 1 1618 0
 1356 0012 4FF46053 		mov	r3, #14336
 1357 0016 C4F20203 		movt	r3, 16386
 1358 001a 5A6E     		ldr	r2, [r3, #100]
 1359 001c 22EA0000 		bic	r0, r2, r0
 1360              	.LVL143:
 1361 0020 5866     		str	r0, [r3, #100]
 1362 0022 7047     		bx	lr
 1363              		.cfi_endproc
 1364              	.LFE148:
 1366              		.section	.text.RCC_ITConfig,"ax",%progbits
 1367              		.align	2
 1368              		.global	RCC_ITConfig
 1369              		.thumb
 1370              		.thumb_func
 1372              	RCC_ITConfig:
 1373              	.LFB149:
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1374              		.loc 1 1653 0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 1379              	.LVL144:
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1380              		.loc 1 1657 0
 1381 0000 39B1     		cbz	r1, .L82
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1382              		.loc 1 1660 0
 1383 0002 43F60D03 		movw	r3, #14349
 1384 0006 C4F20203 		movt	r3, 16386
 1385 000a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1386 000c 1043     		orrs	r0, r0, r2
 1387              	.LVL145:
 1388 000e 1870     		strb	r0, [r3]
 1389 0010 7047     		bx	lr
 1390              	.LVL146:
 1391              	.L82:
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1392              		.loc 1 1665 0
 1393 0012 43F60D03 		movw	r3, #14349
 1394 0016 C4F20203 		movt	r3, 16386
 1395 001a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1396 001c 22EA0000 		bic	r0, r2, r0
 1397              	.LVL147:
 1398 0020 1870     		strb	r0, [r3]
 1399 0022 7047     		bx	lr
 1400              		.cfi_endproc
 1401              	.LFE149:
 1403              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1404              		.align	2
 1405              		.global	RCC_GetFlagStatus
 1406              		.thumb
 1407              		.thumb_func
 1409              	RCC_GetFlagStatus:
 1410              	.LFB150:
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1411              		.loc 1 1689 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		@ link register save eliminated.
 1416              	.LVL148:
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 1417              		.loc 1 1698 0
 1418 0000 4309     		lsrs	r3, r0, #5
 1419              	.LVL149:
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1420              		.loc 1 1699 0
 1421 0002 012B     		cmp	r3, #1
 1422 0004 05D1     		bne	.L85
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 1423              		.loc 1 1701 0
 1424 0006 4FF46053 		mov	r3, #14336
 1425              	.LVL150:
 1426 000a C4F20203 		movt	r3, 16386
 1427 000e 1B68     		ldr	r3, [r3]
 1428              	.LVL151:
 1429 0010 07E0     		b	.L86
 1430              	.LVL152:
 1431              	.L85:
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1432              		.loc 1 1703 0
 1433 0012 022B     		cmp	r3, #2
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 1434              		.loc 1 1705 0
 1435 0014 4FF46053 		mov	r3, #14336
 1436              	.LVL153:
 1437 0018 C4F20203 		movt	r3, 16386
 1438 001c 0CBF     		ite	eq
 1439 001e 1B6F     		ldreq	r3, [r3, #112]
 1440              	.LVL154:
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 1441              		.loc 1 1709 0
 1442 0020 5B6F     		ldrne	r3, [r3, #116]
 1443              	.LVL155:
 1444              	.L86:
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 1445              		.loc 1 1713 0
 1446 0022 00F01F00 		and	r0, r0, #31
 1447              	.LVL156:
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1448              		.loc 1 1714 0
 1449 0026 23FA00F0 		lsr	r0, r3, r0
 1450              	.LVL157:
 1451 002a 00F00100 		and	r0, r0, #1
 1452              	.LVL158:
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1453              		.loc 1 1724 0
 1454 002e 7047     		bx	lr
 1455              		.cfi_endproc
 1456              	.LFE150:
 1458              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 1459              		.align	2
 1460              		.global	RCC_WaitForHSEStartUp
 1461              		.thumb
 1462              		.thumb_func
 1464              	RCC_WaitForHSEStartUp:
 1465              	.LFB112:
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 1466              		.loc 1 262 0
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 8
 1469              		@ frame_needed = 0, uses_anonymous_args = 0
 1470 0000 10B5     		push	{r4, lr}
 1471              	.LCFI1:
 1472              		.cfi_def_cfa_offset 8
 1473              		.cfi_offset 4, -8
 1474              		.cfi_offset 14, -4
 1475 0002 82B0     		sub	sp, sp, #8
 1476              	.LCFI2:
 1477              		.cfi_def_cfa_offset 16
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 1478              		.loc 1 263 0
 1479 0004 0023     		movs	r3, #0
 1480 0006 0193     		str	r3, [sp, #4]
 1481              	.LVL159:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 1482              		.loc 1 269 0
 1483 0008 3124     		movs	r4, #49
 1484              	.LVL160:
 1485              	.L92:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 1486              		.loc 1 269 0 is_stmt 0 discriminator 1
 1487 000a 2046     		mov	r0, r4
 1488 000c FFF7FEFF 		bl	RCC_GetFlagStatus
 1489              	.LVL161:
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 1490              		.loc 1 270 0 is_stmt 1 discriminator 1
 1491 0010 019B     		ldr	r3, [sp, #4]
 1492 0012 0133     		adds	r3, r3, #1
 1493 0014 0193     		str	r3, [sp, #4]
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1494              		.loc 1 271 0 discriminator 1
 1495 0016 019B     		ldr	r3, [sp, #4]
 1496 0018 B3F5A06F 		cmp	r3, #1280
 1497 001c 01D0     		beq	.L91
 1498 001e 0028     		cmp	r0, #0
 1499 0020 F3D0     		beq	.L92
 1500              	.L91:
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1501              		.loc 1 273 0
 1502 0022 3120     		movs	r0, #49
 1503              	.LVL162:
 1504 0024 FFF7FEFF 		bl	RCC_GetFlagStatus
 1505              	.LVL163:
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1506              		.loc 1 282 0
 1507 0028 0030     		adds	r0, r0, #0
 1508 002a 18BF     		it	ne
 1509 002c 0120     		movne	r0, #1
 1510              	.LVL164:
 1511 002e 02B0     		add	sp, sp, #8
 1512              		@ sp needed
 1513 0030 10BD     		pop	{r4, pc}
 1514              		.cfi_endproc
 1515              	.LFE112:
 1517 0032 00BF     		.section	.text.RCC_ClearFlag,"ax",%progbits
 1518              		.align	2
 1519              		.global	RCC_ClearFlag
 1520              		.thumb
 1521              		.thumb_func
 1523              	RCC_ClearFlag:
 1524              	.LFB151:
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1525              		.loc 1 1734 0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529              		@ link register save eliminated.
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1530              		.loc 1 1736 0
 1531 0000 4FF46053 		mov	r3, #14336
 1532 0004 C4F20203 		movt	r3, 16386
 1533 0008 5A6F     		ldr	r2, [r3, #116]
 1534 000a 42F08072 		orr	r2, r2, #16777216
 1535 000e 5A67     		str	r2, [r3, #116]
 1536 0010 7047     		bx	lr
 1537              		.cfi_endproc
 1538              	.LFE151:
 1540 0012 00BF     		.section	.text.RCC_GetITStatus,"ax",%progbits
 1541              		.align	2
 1542              		.global	RCC_GetITStatus
 1543              		.thumb
 1544              		.thumb_func
 1546              	RCC_GetITStatus:
 1547              	.LFB152:
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1548              		.loc 1 1753 0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 1553              	.LVL165:
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1554              		.loc 1 1760 0
 1555 0000 4FF46053 		mov	r3, #14336
 1556 0004 C4F20203 		movt	r3, 16386
 1557 0008 DB68     		ldr	r3, [r3, #12]
 1558 000a 1840     		ands	r0, r0, r3
 1559              	.LVL166:
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1560              		.loc 1 1770 0
 1561 000c 0030     		adds	r0, r0, #0
 1562 000e 18BF     		it	ne
 1563 0010 0120     		movne	r0, #1
 1564              	.LVL167:
 1565 0012 7047     		bx	lr
 1566              		.cfi_endproc
 1567              	.LFE152:
 1569              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1570              		.align	2
 1571              		.global	RCC_ClearITPendingBit
 1572              		.thumb
 1573              		.thumb_func
 1575              	RCC_ClearITPendingBit:
 1576              	.LFB153:
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1577              		.loc 1 1786 0
 1578              		.cfi_startproc
 1579              		@ args = 0, pretend = 0, frame = 0
 1580              		@ frame_needed = 0, uses_anonymous_args = 0
 1581              		@ link register save eliminated.
 1582              	.LVL168:
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1583              		.loc 1 1792 0
 1584 0000 43F60E03 		movw	r3, #14350
 1585 0004 C4F20203 		movt	r3, 16386
 1586 0008 1870     		strb	r0, [r3]
 1587 000a 7047     		bx	lr
 1588              		.cfi_endproc
 1589              	.LFE153:
 1591              		.section	.data.APBAHBPrescTable,"aw",%progbits
 1592              		.align	2
 1593              		.set	.LANCHOR0,. + 0
 1596              	APBAHBPrescTable:
 1597 0000 00       		.byte	0
 1598 0001 00       		.byte	0
 1599 0002 00       		.byte	0
 1600 0003 00       		.byte	0
 1601 0004 01       		.byte	1
 1602 0005 02       		.byte	2
 1603 0006 03       		.byte	3
 1604 0007 04       		.byte	4
 1605 0008 01       		.byte	1
 1606 0009 02       		.byte	2
 1607 000a 03       		.byte	3
 1608 000b 04       		.byte	4
 1609 000c 06       		.byte	6
 1610 000d 07       		.byte	7
 1611 000e 08       		.byte	8
 1612 000f 09       		.byte	9
 1613              		.text
 1614              	.Letext0:
 1615              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1616              		.file 3 "/usr/include/newlib/stdint.h"
 1617              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1618              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1619              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/ccREzXly.s:20     .text.RCC_DeInit:0000000000000000 $t
     /tmp/ccREzXly.s:25     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/ccREzXly.s:62     .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/ccREzXly.s:67     .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/ccREzXly.s:87     .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/ccREzXly.s:92     .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/ccREzXly.s:118    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/ccREzXly.s:123    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/ccREzXly.s:140    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/ccREzXly.s:145    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/ccREzXly.s:185    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/ccREzXly.s:190    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/ccREzXly.s:207    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/ccREzXly.s:212    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/ccREzXly.s:240    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/ccREzXly.s:245    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/ccREzXly.s:262    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/ccREzXly.s:267    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/ccREzXly.s:288    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/ccREzXly.s:293    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/ccREzXly.s:310    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/ccREzXly.s:315    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/ccREzXly.s:332    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/ccREzXly.s:337    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/ccREzXly.s:365    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/ccREzXly.s:370    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/ccREzXly.s:398    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/ccREzXly.s:403    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/ccREzXly.s:429    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/ccREzXly.s:434    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/ccREzXly.s:452    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/ccREzXly.s:457    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/ccREzXly.s:483    .text.RCC_PCLK1Config:0000000000000000 $t
     /tmp/ccREzXly.s:488    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/ccREzXly.s:514    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/ccREzXly.s:519    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/ccREzXly.s:545    .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/ccREzXly.s:550    .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/ccREzXly.s:1593   .data.APBAHBPrescTable:0000000000000000 .LANCHOR0
     /tmp/ccREzXly.s:699    .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/ccREzXly.s:704    .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/ccREzXly.s:746    .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/ccREzXly.s:751    .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/ccREzXly.s:768    .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/ccREzXly.s:773    .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/ccREzXly.s:790    .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/ccREzXly.s:795    .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/ccREzXly.s:812    .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccREzXly.s:817    .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/ccREzXly.s:849    .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccREzXly.s:854    .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/ccREzXly.s:886    .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
     /tmp/ccREzXly.s:891    .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
     /tmp/ccREzXly.s:923    .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccREzXly.s:928    .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/ccREzXly.s:960    .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccREzXly.s:965    .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/ccREzXly.s:997    .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1002   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/ccREzXly.s:1034   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1039   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/ccREzXly.s:1071   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1076   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
     /tmp/ccREzXly.s:1108   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1113   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/ccREzXly.s:1145   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1150   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/ccREzXly.s:1182   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1187   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccREzXly.s:1219   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1224   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccREzXly.s:1256   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1261   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/ccREzXly.s:1293   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1298   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccREzXly.s:1330   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccREzXly.s:1335   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccREzXly.s:1367   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/ccREzXly.s:1372   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/ccREzXly.s:1404   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/ccREzXly.s:1409   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/ccREzXly.s:1459   .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/ccREzXly.s:1464   .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/ccREzXly.s:1518   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/ccREzXly.s:1523   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/ccREzXly.s:1541   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/ccREzXly.s:1546   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/ccREzXly.s:1570   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccREzXly.s:1575   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
     /tmp/ccREzXly.s:1592   .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/ccREzXly.s:1596   .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.59.500d8387b03c0deb8faa115446cfddd9

NO UNDEFINED SYMBOLS
