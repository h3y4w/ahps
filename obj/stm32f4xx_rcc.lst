   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.data.APBAHBPrescTable,"aw",%progbits
  20              		.align	2
  23              	APBAHBPrescTable:
  24 0000 00       		.byte	0
  25 0001 00       		.byte	0
  26 0002 00       		.byte	0
  27 0003 00       		.byte	0
  28 0004 01       		.byte	1
  29 0005 02       		.byte	2
  30 0006 03       		.byte	3
  31 0007 04       		.byte	4
  32 0008 01       		.byte	1
  33 0009 02       		.byte	2
  34 000a 03       		.byte	3
  35 000b 04       		.byte	4
  36 000c 06       		.byte	6
  37 000d 07       		.byte	7
  38 000e 08       		.byte	8
  39 000f 09       		.byte	9
  40              		.section	.text.RCC_DeInit,"ax",%progbits
  41              		.align	2
  42              		.global	RCC_DeInit
  43              		.thumb
  44              		.thumb_func
  46              	RCC_DeInit:
  47              	.LFB110:
  48              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  49              		.loc 1 197 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 1, uses_anonymous_args = 0
  53              		@ link register save eliminated.
  54 0000 80B4     		push	{r7}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 7, -4
  58 0002 00AF     		add	r7, sp, #0
  59              	.LCFI1:
  60              		.cfi_def_cfa_register 7
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  61              		.loc 1 199 0
  62 0004 4FF46053 		mov	r3, #14336
  63 0008 C4F20203 		movt	r3, 16386
  64 000c 4FF46052 		mov	r2, #14336
  65 0010 C4F20202 		movt	r2, 16386
  66 0014 1268     		ldr	r2, [r2]
  67 0016 42F00102 		orr	r2, r2, #1
  68 001a 1A60     		str	r2, [r3]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  69              		.loc 1 202 0
  70 001c 4FF46053 		mov	r3, #14336
  71 0020 C4F20203 		movt	r3, 16386
  72 0024 0022     		movs	r2, #0
  73 0026 9A60     		str	r2, [r3, #8]
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  74              		.loc 1 205 0
  75 0028 4FF46053 		mov	r3, #14336
  76 002c C4F20203 		movt	r3, 16386
  77 0030 4FF46052 		mov	r2, #14336
  78 0034 C4F20202 		movt	r2, 16386
  79 0038 1268     		ldr	r2, [r2]
  80 003a 22F08472 		bic	r2, r2, #17301504
  81 003e 22F48032 		bic	r2, r2, #65536
  82 0042 1A60     		str	r2, [r3]
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  83              		.loc 1 208 0
  84 0044 4FF46053 		mov	r3, #14336
  85 0048 C4F20203 		movt	r3, 16386
  86 004c 43F21002 		movw	r2, #12304
  87 0050 C2F20042 		movt	r2, 9216
  88 0054 5A60     		str	r2, [r3, #4]
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  89              		.loc 1 211 0
  90 0056 4FF46053 		mov	r3, #14336
  91 005a C4F20203 		movt	r3, 16386
  92 005e 4FF46052 		mov	r2, #14336
  93 0062 C4F20202 		movt	r2, 16386
  94 0066 1268     		ldr	r2, [r2]
  95 0068 22F48022 		bic	r2, r2, #262144
  96 006c 1A60     		str	r2, [r3]
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  97              		.loc 1 214 0
  98 006e 4FF46053 		mov	r3, #14336
  99 0072 C4F20203 		movt	r3, 16386
 100 0076 0022     		movs	r2, #0
 101 0078 DA60     		str	r2, [r3, #12]
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 102              		.loc 1 215 0
 103 007a BD46     		mov	sp, r7
 104              		@ sp needed
 105 007c 5DF8047B 		ldr	r7, [sp], #4
 106 0080 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE110:
 110 0082 00BF     		.section	.text.RCC_HSEConfig,"ax",%progbits
 111              		.align	2
 112              		.global	RCC_HSEConfig
 113              		.thumb
 114              		.thumb_func
 116              	RCC_HSEConfig:
 117              	.LFB111:
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 118              		.loc 1 238 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 8
 121              		@ frame_needed = 1, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123 0000 80B4     		push	{r7}
 124              	.LCFI2:
 125              		.cfi_def_cfa_offset 4
 126              		.cfi_offset 7, -4
 127 0002 83B0     		sub	sp, sp, #12
 128              	.LCFI3:
 129              		.cfi_def_cfa_offset 16
 130 0004 00AF     		add	r7, sp, #0
 131              	.LCFI4:
 132              		.cfi_def_cfa_register 7
 133 0006 0346     		mov	r3, r0
 134 0008 FB71     		strb	r3, [r7, #7]
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 135              		.loc 1 243 0
 136 000a 43F60203 		movw	r3, #14338
 137 000e C4F20203 		movt	r3, 16386
 138 0012 0022     		movs	r2, #0
 139 0014 1A70     		strb	r2, [r3]
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 140              		.loc 1 246 0
 141 0016 43F60203 		movw	r3, #14338
 142 001a C4F20203 		movt	r3, 16386
 143 001e FA79     		ldrb	r2, [r7, #7]
 144 0020 1A70     		strb	r2, [r3]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 145              		.loc 1 247 0
 146 0022 0C37     		adds	r7, r7, #12
 147 0024 BD46     		mov	sp, r7
 148              		@ sp needed
 149 0026 5DF8047B 		ldr	r7, [sp], #4
 150 002a 7047     		bx	lr
 151              		.cfi_endproc
 152              	.LFE111:
 154              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 155              		.align	2
 156              		.global	RCC_WaitForHSEStartUp
 157              		.thumb
 158              		.thumb_func
 160              	RCC_WaitForHSEStartUp:
 161              	.LFB112:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 162              		.loc 1 262 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 8
 165              		@ frame_needed = 1, uses_anonymous_args = 0
 166 0000 80B5     		push	{r7, lr}
 167              	.LCFI5:
 168              		.cfi_def_cfa_offset 8
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 82B0     		sub	sp, sp, #8
 172              	.LCFI6:
 173              		.cfi_def_cfa_offset 16
 174 0004 00AF     		add	r7, sp, #0
 175              	.LCFI7:
 176              		.cfi_def_cfa_register 7
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 177              		.loc 1 263 0
 178 0006 0023     		movs	r3, #0
 179 0008 3B60     		str	r3, [r7]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 180              		.loc 1 264 0
 181 000a 0023     		movs	r3, #0
 182 000c FB71     		strb	r3, [r7, #7]
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 183              		.loc 1 265 0
 184 000e 0023     		movs	r3, #0
 185 0010 BB71     		strb	r3, [r7, #6]
 186              	.L5:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 187              		.loc 1 269 0 discriminator 1
 188 0012 3120     		movs	r0, #49
 189 0014 FFF7FEFF 		bl	RCC_GetFlagStatus
 190 0018 0346     		mov	r3, r0
 191 001a BB71     		strb	r3, [r7, #6]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 192              		.loc 1 270 0 discriminator 1
 193 001c 3B68     		ldr	r3, [r7]
 194 001e 0133     		adds	r3, r3, #1
 195 0020 3B60     		str	r3, [r7]
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 196              		.loc 1 271 0 discriminator 1
 197 0022 3B68     		ldr	r3, [r7]
 198 0024 B3F5A06F 		cmp	r3, #1280
 199 0028 02D0     		beq	.L4
 200 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 201 002c 002B     		cmp	r3, #0
 202 002e F0D0     		beq	.L5
 203              	.L4:
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 204              		.loc 1 273 0
 205 0030 3120     		movs	r0, #49
 206 0032 FFF7FEFF 		bl	RCC_GetFlagStatus
 207 0036 0346     		mov	r3, r0
 208 0038 002B     		cmp	r3, #0
 209 003a 02D0     		beq	.L6
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 210              		.loc 1 275 0
 211 003c 0123     		movs	r3, #1
 212 003e FB71     		strb	r3, [r7, #7]
 213 0040 01E0     		b	.L7
 214              	.L6:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 215              		.loc 1 279 0
 216 0042 0023     		movs	r3, #0
 217 0044 FB71     		strb	r3, [r7, #7]
 218              	.L7:
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 219              		.loc 1 281 0
 220 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 221              		.loc 1 282 0
 222 0048 1846     		mov	r0, r3
 223 004a 0837     		adds	r7, r7, #8
 224 004c BD46     		mov	sp, r7
 225              		@ sp needed
 226 004e 80BD     		pop	{r7, pc}
 227              		.cfi_endproc
 228              	.LFE112:
 230              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 231              		.align	2
 232              		.global	RCC_AdjustHSICalibrationValue
 233              		.thumb
 234              		.thumb_func
 236              	RCC_AdjustHSICalibrationValue:
 237              	.LFB113:
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 238              		.loc 1 293 0
 239              		.cfi_startproc
 240              		@ args = 0, pretend = 0, frame = 16
 241              		@ frame_needed = 1, uses_anonymous_args = 0
 242              		@ link register save eliminated.
 243 0000 80B4     		push	{r7}
 244              	.LCFI8:
 245              		.cfi_def_cfa_offset 4
 246              		.cfi_offset 7, -4
 247 0002 85B0     		sub	sp, sp, #20
 248              	.LCFI9:
 249              		.cfi_def_cfa_offset 24
 250 0004 00AF     		add	r7, sp, #0
 251              	.LCFI10:
 252              		.cfi_def_cfa_register 7
 253 0006 0346     		mov	r3, r0
 254 0008 FB71     		strb	r3, [r7, #7]
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 255              		.loc 1 294 0
 256 000a 0023     		movs	r3, #0
 257 000c FB60     		str	r3, [r7, #12]
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 258              		.loc 1 298 0
 259 000e 4FF46053 		mov	r3, #14336
 260 0012 C4F20203 		movt	r3, 16386
 261 0016 1B68     		ldr	r3, [r3]
 262 0018 FB60     		str	r3, [r7, #12]
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 263              		.loc 1 301 0
 264 001a FB68     		ldr	r3, [r7, #12]
 265 001c 23F0F803 		bic	r3, r3, #248
 266 0020 FB60     		str	r3, [r7, #12]
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 267              		.loc 1 304 0
 268 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 269 0024 DB00     		lsls	r3, r3, #3
 270 0026 FA68     		ldr	r2, [r7, #12]
 271 0028 1343     		orrs	r3, r3, r2
 272 002a FB60     		str	r3, [r7, #12]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 273              		.loc 1 307 0
 274 002c 4FF46053 		mov	r3, #14336
 275 0030 C4F20203 		movt	r3, 16386
 276 0034 FA68     		ldr	r2, [r7, #12]
 277 0036 1A60     		str	r2, [r3]
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 278              		.loc 1 308 0
 279 0038 1437     		adds	r7, r7, #20
 280 003a BD46     		mov	sp, r7
 281              		@ sp needed
 282 003c 5DF8047B 		ldr	r7, [sp], #4
 283 0040 7047     		bx	lr
 284              		.cfi_endproc
 285              	.LFE113:
 287 0042 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 288              		.align	2
 289              		.global	RCC_HSICmd
 290              		.thumb
 291              		.thumb_func
 293              	RCC_HSICmd:
 294              	.LFB114:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 295              		.loc 1 329 0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 8
 298              		@ frame_needed = 1, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 300 0000 80B4     		push	{r7}
 301              	.LCFI11:
 302              		.cfi_def_cfa_offset 4
 303              		.cfi_offset 7, -4
 304 0002 83B0     		sub	sp, sp, #12
 305              	.LCFI12:
 306              		.cfi_def_cfa_offset 16
 307 0004 00AF     		add	r7, sp, #0
 308              	.LCFI13:
 309              		.cfi_def_cfa_register 7
 310 0006 0346     		mov	r3, r0
 311 0008 FB71     		strb	r3, [r7, #7]
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 312              		.loc 1 333 0
 313 000a 0023     		movs	r3, #0
 314 000c C4F24723 		movt	r3, 16967
 315 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 316 0012 1A60     		str	r2, [r3]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 317              		.loc 1 334 0
 318 0014 0C37     		adds	r7, r7, #12
 319 0016 BD46     		mov	sp, r7
 320              		@ sp needed
 321 0018 5DF8047B 		ldr	r7, [sp], #4
 322 001c 7047     		bx	lr
 323              		.cfi_endproc
 324              	.LFE114:
 326              		.section	.text.RCC_LSEConfig,"ax",%progbits
 327              		.align	2
 328              		.global	RCC_LSEConfig
 329              		.thumb
 330              		.thumb_func
 332              	RCC_LSEConfig:
 333              	.LFB115:
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 334              		.loc 1 354 0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 8
 337              		@ frame_needed = 1, uses_anonymous_args = 0
 338              		@ link register save eliminated.
 339 0000 80B4     		push	{r7}
 340              	.LCFI14:
 341              		.cfi_def_cfa_offset 4
 342              		.cfi_offset 7, -4
 343 0002 83B0     		sub	sp, sp, #12
 344              	.LCFI15:
 345              		.cfi_def_cfa_offset 16
 346 0004 00AF     		add	r7, sp, #0
 347              	.LCFI16:
 348              		.cfi_def_cfa_register 7
 349 0006 0346     		mov	r3, r0
 350 0008 FB71     		strb	r3, [r7, #7]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 351              		.loc 1 360 0
 352 000a 43F67003 		movw	r3, #14448
 353 000e C4F20203 		movt	r3, 16386
 354 0012 0022     		movs	r2, #0
 355 0014 1A70     		strb	r2, [r3]
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 356              		.loc 1 363 0
 357 0016 43F67003 		movw	r3, #14448
 358 001a C4F20203 		movt	r3, 16386
 359 001e 0022     		movs	r2, #0
 360 0020 1A70     		strb	r2, [r3]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 361              		.loc 1 366 0
 362 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 363 0024 012B     		cmp	r3, #1
 364 0026 02D0     		beq	.L13
 365 0028 042B     		cmp	r3, #4
 366 002a 07D0     		beq	.L14
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 367              		.loc 1 377 0
 368 002c 0DE0     		b	.L11
 369              	.L13:
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 370              		.loc 1 370 0
 371 002e 43F67003 		movw	r3, #14448
 372 0032 C4F20203 		movt	r3, 16386
 373 0036 0122     		movs	r2, #1
 374 0038 1A70     		strb	r2, [r3]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 375              		.loc 1 371 0
 376 003a 06E0     		b	.L11
 377              	.L14:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 378              		.loc 1 374 0
 379 003c 43F67003 		movw	r3, #14448
 380 0040 C4F20203 		movt	r3, 16386
 381 0044 0522     		movs	r2, #5
 382 0046 1A70     		strb	r2, [r3]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 383              		.loc 1 375 0
 384 0048 00BF     		nop
 385              	.L11:
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 386              		.loc 1 379 0
 387 004a 0C37     		adds	r7, r7, #12
 388 004c BD46     		mov	sp, r7
 389              		@ sp needed
 390 004e 5DF8047B 		ldr	r7, [sp], #4
 391 0052 7047     		bx	lr
 392              		.cfi_endproc
 393              	.LFE115:
 395              		.section	.text.RCC_LSICmd,"ax",%progbits
 396              		.align	2
 397              		.global	RCC_LSICmd
 398              		.thumb
 399              		.thumb_func
 401              	RCC_LSICmd:
 402              	.LFB116:
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 403              		.loc 1 394 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 8
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 80B4     		push	{r7}
 409              	.LCFI17:
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 7, -4
 412 0002 83B0     		sub	sp, sp, #12
 413              	.LCFI18:
 414              		.cfi_def_cfa_offset 16
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI19:
 417              		.cfi_def_cfa_register 7
 418 0006 0346     		mov	r3, r0
 419 0008 FB71     		strb	r3, [r7, #7]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 420              		.loc 1 398 0
 421 000a 4FF46863 		mov	r3, #3712
 422 000e C4F24723 		movt	r3, 16967
 423 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 424 0014 1A60     		str	r2, [r3]
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 425              		.loc 1 399 0
 426 0016 0C37     		adds	r7, r7, #12
 427 0018 BD46     		mov	sp, r7
 428              		@ sp needed
 429 001a 5DF8047B 		ldr	r7, [sp], #4
 430 001e 7047     		bx	lr
 431              		.cfi_endproc
 432              	.LFE116:
 434              		.section	.text.RCC_PLLConfig,"ax",%progbits
 435              		.align	2
 436              		.global	RCC_PLLConfig
 437              		.thumb
 438              		.thumb_func
 440              	RCC_PLLConfig:
 441              	.LFB117:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 442              		.loc 1 437 0
 443              		.cfi_startproc
 444              		@ args = 4, pretend = 0, frame = 16
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447 0000 80B4     		push	{r7}
 448              	.LCFI20:
 449              		.cfi_def_cfa_offset 4
 450              		.cfi_offset 7, -4
 451 0002 85B0     		sub	sp, sp, #20
 452              	.LCFI21:
 453              		.cfi_def_cfa_offset 24
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI22:
 456              		.cfi_def_cfa_register 7
 457 0006 F860     		str	r0, [r7, #12]
 458 0008 B960     		str	r1, [r7, #8]
 459 000a 7A60     		str	r2, [r7, #4]
 460 000c 3B60     		str	r3, [r7]
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 461              		.loc 1 445 0
 462 000e 4FF46053 		mov	r3, #14336
 463 0012 C4F20203 		movt	r3, 16386
 464 0016 7A68     		ldr	r2, [r7, #4]
 465 0018 9101     		lsls	r1, r2, #6
 466 001a BA68     		ldr	r2, [r7, #8]
 467 001c 1143     		orrs	r1, r1, r2
 468 001e 3A68     		ldr	r2, [r7]
 469 0020 5208     		lsrs	r2, r2, #1
 470 0022 013A     		subs	r2, r2, #1
 471 0024 1204     		lsls	r2, r2, #16
 472 0026 1143     		orrs	r1, r1, r2
 473 0028 FA68     		ldr	r2, [r7, #12]
 474 002a 1143     		orrs	r1, r1, r2
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 475              		.loc 1 446 0
 476 002c BA69     		ldr	r2, [r7, #24]
 477 002e 1206     		lsls	r2, r2, #24
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 478              		.loc 1 445 0
 479 0030 0A43     		orrs	r2, r2, r1
 480 0032 5A60     		str	r2, [r3, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 481              		.loc 1 447 0
 482 0034 1437     		adds	r7, r7, #20
 483 0036 BD46     		mov	sp, r7
 484              		@ sp needed
 485 0038 5DF8047B 		ldr	r7, [sp], #4
 486 003c 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE117:
 490 003e 00BF     		.section	.text.RCC_PLLCmd,"ax",%progbits
 491              		.align	2
 492              		.global	RCC_PLLCmd
 493              		.thumb
 494              		.thumb_func
 496              	RCC_PLLCmd:
 497              	.LFB118:
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 498              		.loc 1 460 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 8
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502              		@ link register save eliminated.
 503 0000 80B4     		push	{r7}
 504              	.LCFI23:
 505              		.cfi_def_cfa_offset 4
 506              		.cfi_offset 7, -4
 507 0002 83B0     		sub	sp, sp, #12
 508              	.LCFI24:
 509              		.cfi_def_cfa_offset 16
 510 0004 00AF     		add	r7, sp, #0
 511              	.LCFI25:
 512              		.cfi_def_cfa_register 7
 513 0006 0346     		mov	r3, r0
 514 0008 FB71     		strb	r3, [r7, #7]
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 515              		.loc 1 463 0
 516 000a 6023     		movs	r3, #96
 517 000c C4F24723 		movt	r3, 16967
 518 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 519 0012 1A60     		str	r2, [r3]
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 520              		.loc 1 464 0
 521 0014 0C37     		adds	r7, r7, #12
 522 0016 BD46     		mov	sp, r7
 523              		@ sp needed
 524 0018 5DF8047B 		ldr	r7, [sp], #4
 525 001c 7047     		bx	lr
 526              		.cfi_endproc
 527              	.LFE118:
 529              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 530              		.align	2
 531              		.global	RCC_PLLI2SConfig
 532              		.thumb
 533              		.thumb_func
 535              	RCC_PLLI2SConfig:
 536              	.LFB119:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 537              		.loc 1 487 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 8
 540              		@ frame_needed = 1, uses_anonymous_args = 0
 541              		@ link register save eliminated.
 542 0000 80B4     		push	{r7}
 543              	.LCFI26:
 544              		.cfi_def_cfa_offset 4
 545              		.cfi_offset 7, -4
 546 0002 83B0     		sub	sp, sp, #12
 547              	.LCFI27:
 548              		.cfi_def_cfa_offset 16
 549 0004 00AF     		add	r7, sp, #0
 550              	.LCFI28:
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 553 0008 3960     		str	r1, [r7]
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 554              		.loc 1 492 0
 555 000a 4FF46053 		mov	r3, #14336
 556 000e C4F20203 		movt	r3, 16386
 557 0012 7A68     		ldr	r2, [r7, #4]
 558 0014 9101     		lsls	r1, r2, #6
 559 0016 3A68     		ldr	r2, [r7]
 560 0018 1207     		lsls	r2, r2, #28
 561 001a 0A43     		orrs	r2, r2, r1
 562 001c C3F88420 		str	r2, [r3, #132]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 563              		.loc 1 493 0
 564 0020 0C37     		adds	r7, r7, #12
 565 0022 BD46     		mov	sp, r7
 566              		@ sp needed
 567 0024 5DF8047B 		ldr	r7, [sp], #4
 568 0028 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE119:
 572 002a 00BF     		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 573              		.align	2
 574              		.global	RCC_PLLI2SCmd
 575              		.thumb
 576              		.thumb_func
 578              	RCC_PLLI2SCmd:
 579              	.LFB120:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 580              		.loc 1 503 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 8
 583              		@ frame_needed = 1, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585 0000 80B4     		push	{r7}
 586              	.LCFI29:
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 0002 83B0     		sub	sp, sp, #12
 590              	.LCFI30:
 591              		.cfi_def_cfa_offset 16
 592 0004 00AF     		add	r7, sp, #0
 593              	.LCFI31:
 594              		.cfi_def_cfa_register 7
 595 0006 0346     		mov	r3, r0
 596 0008 FB71     		strb	r3, [r7, #7]
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 597              		.loc 1 506 0
 598 000a 6823     		movs	r3, #104
 599 000c C4F24723 		movt	r3, 16967
 600 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 601 0012 1A60     		str	r2, [r3]
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 602              		.loc 1 507 0
 603 0014 0C37     		adds	r7, r7, #12
 604 0016 BD46     		mov	sp, r7
 605              		@ sp needed
 606 0018 5DF8047B 		ldr	r7, [sp], #4
 607 001c 7047     		bx	lr
 608              		.cfi_endproc
 609              	.LFE120:
 611              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 612              		.align	2
 613              		.global	RCC_ClockSecuritySystemCmd
 614              		.thumb
 615              		.thumb_func
 617              	RCC_ClockSecuritySystemCmd:
 618              	.LFB121:
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 619              		.loc 1 521 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 8
 622              		@ frame_needed = 1, uses_anonymous_args = 0
 623              		@ link register save eliminated.
 624 0000 80B4     		push	{r7}
 625              	.LCFI32:
 626              		.cfi_def_cfa_offset 4
 627              		.cfi_offset 7, -4
 628 0002 83B0     		sub	sp, sp, #12
 629              	.LCFI33:
 630              		.cfi_def_cfa_offset 16
 631 0004 00AF     		add	r7, sp, #0
 632              	.LCFI34:
 633              		.cfi_def_cfa_register 7
 634 0006 0346     		mov	r3, r0
 635 0008 FB71     		strb	r3, [r7, #7]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 636              		.loc 1 524 0
 637 000a 4C23     		movs	r3, #76
 638 000c C4F24723 		movt	r3, 16967
 639 0010 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 640 0012 1A60     		str	r2, [r3]
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 641              		.loc 1 525 0
 642 0014 0C37     		adds	r7, r7, #12
 643 0016 BD46     		mov	sp, r7
 644              		@ sp needed
 645 0018 5DF8047B 		ldr	r7, [sp], #4
 646 001c 7047     		bx	lr
 647              		.cfi_endproc
 648              	.LFE121:
 650              		.section	.text.RCC_MCO1Config,"ax",%progbits
 651              		.align	2
 652              		.global	RCC_MCO1Config
 653              		.thumb
 654              		.thumb_func
 656              	RCC_MCO1Config:
 657              	.LFB122:
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 658              		.loc 1 546 0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 16
 661              		@ frame_needed = 1, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 663 0000 80B4     		push	{r7}
 664              	.LCFI35:
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 0002 85B0     		sub	sp, sp, #20
 668              	.LCFI36:
 669              		.cfi_def_cfa_offset 24
 670 0004 00AF     		add	r7, sp, #0
 671              	.LCFI37:
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
 674 0008 3960     		str	r1, [r7]
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 675              		.loc 1 547 0
 676 000a 0023     		movs	r3, #0
 677 000c FB60     		str	r3, [r7, #12]
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 678              		.loc 1 553 0
 679 000e 4FF46053 		mov	r3, #14336
 680 0012 C4F20203 		movt	r3, 16386
 681 0016 9B68     		ldr	r3, [r3, #8]
 682 0018 FB60     		str	r3, [r7, #12]
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 683              		.loc 1 556 0
 684 001a FB68     		ldr	r3, [r7, #12]
 685 001c 23F0EC63 		bic	r3, r3, #123731968
 686 0020 FB60     		str	r3, [r7, #12]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 687              		.loc 1 559 0
 688 0022 7A68     		ldr	r2, [r7, #4]
 689 0024 3B68     		ldr	r3, [r7]
 690 0026 1343     		orrs	r3, r3, r2
 691 0028 FA68     		ldr	r2, [r7, #12]
 692 002a 1343     		orrs	r3, r3, r2
 693 002c FB60     		str	r3, [r7, #12]
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 694              		.loc 1 562 0
 695 002e 4FF46053 		mov	r3, #14336
 696 0032 C4F20203 		movt	r3, 16386
 697 0036 FA68     		ldr	r2, [r7, #12]
 698 0038 9A60     		str	r2, [r3, #8]
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 699              		.loc 1 563 0
 700 003a 1437     		adds	r7, r7, #20
 701 003c BD46     		mov	sp, r7
 702              		@ sp needed
 703 003e 5DF8047B 		ldr	r7, [sp], #4
 704 0042 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE122:
 708              		.section	.text.RCC_MCO2Config,"ax",%progbits
 709              		.align	2
 710              		.global	RCC_MCO2Config
 711              		.thumb
 712              		.thumb_func
 714              	RCC_MCO2Config:
 715              	.LFB123:
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 716              		.loc 1 584 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              	.LCFI38:
 723              		.cfi_def_cfa_offset 4
 724              		.cfi_offset 7, -4
 725 0002 85B0     		sub	sp, sp, #20
 726              	.LCFI39:
 727              		.cfi_def_cfa_offset 24
 728 0004 00AF     		add	r7, sp, #0
 729              	.LCFI40:
 730              		.cfi_def_cfa_register 7
 731 0006 7860     		str	r0, [r7, #4]
 732 0008 3960     		str	r1, [r7]
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 733              		.loc 1 585 0
 734 000a 0023     		movs	r3, #0
 735 000c FB60     		str	r3, [r7, #12]
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 736              		.loc 1 591 0
 737 000e 4FF46053 		mov	r3, #14336
 738 0012 C4F20203 		movt	r3, 16386
 739 0016 9B68     		ldr	r3, [r3, #8]
 740 0018 FB60     		str	r3, [r7, #12]
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 741              		.loc 1 594 0
 742 001a FB68     		ldr	r3, [r7, #12]
 743 001c 23F07843 		bic	r3, r3, #-134217728
 744 0020 FB60     		str	r3, [r7, #12]
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 745              		.loc 1 597 0
 746 0022 7A68     		ldr	r2, [r7, #4]
 747 0024 3B68     		ldr	r3, [r7]
 748 0026 1343     		orrs	r3, r3, r2
 749 0028 FA68     		ldr	r2, [r7, #12]
 750 002a 1343     		orrs	r3, r3, r2
 751 002c FB60     		str	r3, [r7, #12]
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 752              		.loc 1 600 0
 753 002e 4FF46053 		mov	r3, #14336
 754 0032 C4F20203 		movt	r3, 16386
 755 0036 FA68     		ldr	r2, [r7, #12]
 756 0038 9A60     		str	r2, [r3, #8]
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 757              		.loc 1 601 0
 758 003a 1437     		adds	r7, r7, #20
 759 003c BD46     		mov	sp, r7
 760              		@ sp needed
 761 003e 5DF8047B 		ldr	r7, [sp], #4
 762 0042 7047     		bx	lr
 763              		.cfi_endproc
 764              	.LFE123:
 766              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 767              		.align	2
 768              		.global	RCC_SYSCLKConfig
 769              		.thumb
 770              		.thumb_func
 772              	RCC_SYSCLKConfig:
 773              	.LFB124:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 774              		.loc 1 689 0
 775              		.cfi_startproc
 776              		@ args = 0, pretend = 0, frame = 16
 777              		@ frame_needed = 1, uses_anonymous_args = 0
 778              		@ link register save eliminated.
 779 0000 80B4     		push	{r7}
 780              	.LCFI41:
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 7, -4
 783 0002 85B0     		sub	sp, sp, #20
 784              	.LCFI42:
 785              		.cfi_def_cfa_offset 24
 786 0004 00AF     		add	r7, sp, #0
 787              	.LCFI43:
 788              		.cfi_def_cfa_register 7
 789 0006 7860     		str	r0, [r7, #4]
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 790              		.loc 1 690 0
 791 0008 0023     		movs	r3, #0
 792 000a FB60     		str	r3, [r7, #12]
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 793              		.loc 1 695 0
 794 000c 4FF46053 		mov	r3, #14336
 795 0010 C4F20203 		movt	r3, 16386
 796 0014 9B68     		ldr	r3, [r3, #8]
 797 0016 FB60     		str	r3, [r7, #12]
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 798              		.loc 1 698 0
 799 0018 FB68     		ldr	r3, [r7, #12]
 800 001a 23F00303 		bic	r3, r3, #3
 801 001e FB60     		str	r3, [r7, #12]
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 802              		.loc 1 701 0
 803 0020 FA68     		ldr	r2, [r7, #12]
 804 0022 7B68     		ldr	r3, [r7, #4]
 805 0024 1343     		orrs	r3, r3, r2
 806 0026 FB60     		str	r3, [r7, #12]
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 807              		.loc 1 704 0
 808 0028 4FF46053 		mov	r3, #14336
 809 002c C4F20203 		movt	r3, 16386
 810 0030 FA68     		ldr	r2, [r7, #12]
 811 0032 9A60     		str	r2, [r3, #8]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 812              		.loc 1 705 0
 813 0034 1437     		adds	r7, r7, #20
 814 0036 BD46     		mov	sp, r7
 815              		@ sp needed
 816 0038 5DF8047B 		ldr	r7, [sp], #4
 817 003c 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE124:
 821 003e 00BF     		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 822              		.align	2
 823              		.global	RCC_GetSYSCLKSource
 824              		.thumb
 825              		.thumb_func
 827              	RCC_GetSYSCLKSource:
 828              	.LFB125:
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 829              		.loc 1 717 0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 1, uses_anonymous_args = 0
 833              		@ link register save eliminated.
 834 0000 80B4     		push	{r7}
 835              	.LCFI44:
 836              		.cfi_def_cfa_offset 4
 837              		.cfi_offset 7, -4
 838 0002 00AF     		add	r7, sp, #0
 839              	.LCFI45:
 840              		.cfi_def_cfa_register 7
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 841              		.loc 1 718 0
 842 0004 4FF46053 		mov	r3, #14336
 843 0008 C4F20203 		movt	r3, 16386
 844 000c 9B68     		ldr	r3, [r3, #8]
 845 000e DBB2     		uxtb	r3, r3
 846 0010 03F00C03 		and	r3, r3, #12
 847 0014 DBB2     		uxtb	r3, r3
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 848              		.loc 1 719 0
 849 0016 1846     		mov	r0, r3
 850 0018 BD46     		mov	sp, r7
 851              		@ sp needed
 852 001a 5DF8047B 		ldr	r7, [sp], #4
 853 001e 7047     		bx	lr
 854              		.cfi_endproc
 855              	.LFE125:
 857              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 858              		.align	2
 859              		.global	RCC_HCLKConfig
 860              		.thumb
 861              		.thumb_func
 863              	RCC_HCLKConfig:
 864              	.LFB126:
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 865              		.loc 1 742 0
 866              		.cfi_startproc
 867              		@ args = 0, pretend = 0, frame = 16
 868              		@ frame_needed = 1, uses_anonymous_args = 0
 869              		@ link register save eliminated.
 870 0000 80B4     		push	{r7}
 871              	.LCFI46:
 872              		.cfi_def_cfa_offset 4
 873              		.cfi_offset 7, -4
 874 0002 85B0     		sub	sp, sp, #20
 875              	.LCFI47:
 876              		.cfi_def_cfa_offset 24
 877 0004 00AF     		add	r7, sp, #0
 878              	.LCFI48:
 879              		.cfi_def_cfa_register 7
 880 0006 7860     		str	r0, [r7, #4]
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 881              		.loc 1 743 0
 882 0008 0023     		movs	r3, #0
 883 000a FB60     		str	r3, [r7, #12]
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 884              		.loc 1 748 0
 885 000c 4FF46053 		mov	r3, #14336
 886 0010 C4F20203 		movt	r3, 16386
 887 0014 9B68     		ldr	r3, [r3, #8]
 888 0016 FB60     		str	r3, [r7, #12]
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 889              		.loc 1 751 0
 890 0018 FB68     		ldr	r3, [r7, #12]
 891 001a 23F0F003 		bic	r3, r3, #240
 892 001e FB60     		str	r3, [r7, #12]
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 893              		.loc 1 754 0
 894 0020 FA68     		ldr	r2, [r7, #12]
 895 0022 7B68     		ldr	r3, [r7, #4]
 896 0024 1343     		orrs	r3, r3, r2
 897 0026 FB60     		str	r3, [r7, #12]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 898              		.loc 1 757 0
 899 0028 4FF46053 		mov	r3, #14336
 900 002c C4F20203 		movt	r3, 16386
 901 0030 FA68     		ldr	r2, [r7, #12]
 902 0032 9A60     		str	r2, [r3, #8]
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 903              		.loc 1 758 0
 904 0034 1437     		adds	r7, r7, #20
 905 0036 BD46     		mov	sp, r7
 906              		@ sp needed
 907 0038 5DF8047B 		ldr	r7, [sp], #4
 908 003c 7047     		bx	lr
 909              		.cfi_endproc
 910              	.LFE126:
 912 003e 00BF     		.section	.text.RCC_PCLK1Config,"ax",%progbits
 913              		.align	2
 914              		.global	RCC_PCLK1Config
 915              		.thumb
 916              		.thumb_func
 918              	RCC_PCLK1Config:
 919              	.LFB127:
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 920              		.loc 1 774 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 16
 923              		@ frame_needed = 1, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925 0000 80B4     		push	{r7}
 926              	.LCFI49:
 927              		.cfi_def_cfa_offset 4
 928              		.cfi_offset 7, -4
 929 0002 85B0     		sub	sp, sp, #20
 930              	.LCFI50:
 931              		.cfi_def_cfa_offset 24
 932 0004 00AF     		add	r7, sp, #0
 933              	.LCFI51:
 934              		.cfi_def_cfa_register 7
 935 0006 7860     		str	r0, [r7, #4]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 936              		.loc 1 775 0
 937 0008 0023     		movs	r3, #0
 938 000a FB60     		str	r3, [r7, #12]
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 939              		.loc 1 780 0
 940 000c 4FF46053 		mov	r3, #14336
 941 0010 C4F20203 		movt	r3, 16386
 942 0014 9B68     		ldr	r3, [r3, #8]
 943 0016 FB60     		str	r3, [r7, #12]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 944              		.loc 1 783 0
 945 0018 FB68     		ldr	r3, [r7, #12]
 946 001a 23F4E053 		bic	r3, r3, #7168
 947 001e FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 948              		.loc 1 786 0
 949 0020 FA68     		ldr	r2, [r7, #12]
 950 0022 7B68     		ldr	r3, [r7, #4]
 951 0024 1343     		orrs	r3, r3, r2
 952 0026 FB60     		str	r3, [r7, #12]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 953              		.loc 1 789 0
 954 0028 4FF46053 		mov	r3, #14336
 955 002c C4F20203 		movt	r3, 16386
 956 0030 FA68     		ldr	r2, [r7, #12]
 957 0032 9A60     		str	r2, [r3, #8]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 958              		.loc 1 790 0
 959 0034 1437     		adds	r7, r7, #20
 960 0036 BD46     		mov	sp, r7
 961              		@ sp needed
 962 0038 5DF8047B 		ldr	r7, [sp], #4
 963 003c 7047     		bx	lr
 964              		.cfi_endproc
 965              	.LFE127:
 967 003e 00BF     		.section	.text.RCC_PCLK2Config,"ax",%progbits
 968              		.align	2
 969              		.global	RCC_PCLK2Config
 970              		.thumb
 971              		.thumb_func
 973              	RCC_PCLK2Config:
 974              	.LFB128:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 975              		.loc 1 805 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 16
 978              		@ frame_needed = 1, uses_anonymous_args = 0
 979              		@ link register save eliminated.
 980 0000 80B4     		push	{r7}
 981              	.LCFI52:
 982              		.cfi_def_cfa_offset 4
 983              		.cfi_offset 7, -4
 984 0002 85B0     		sub	sp, sp, #20
 985              	.LCFI53:
 986              		.cfi_def_cfa_offset 24
 987 0004 00AF     		add	r7, sp, #0
 988              	.LCFI54:
 989              		.cfi_def_cfa_register 7
 990 0006 7860     		str	r0, [r7, #4]
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 991              		.loc 1 806 0
 992 0008 0023     		movs	r3, #0
 993 000a FB60     		str	r3, [r7, #12]
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 994              		.loc 1 811 0
 995 000c 4FF46053 		mov	r3, #14336
 996 0010 C4F20203 		movt	r3, 16386
 997 0014 9B68     		ldr	r3, [r3, #8]
 998 0016 FB60     		str	r3, [r7, #12]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 999              		.loc 1 814 0
 1000 0018 FB68     		ldr	r3, [r7, #12]
 1001 001a 23F46043 		bic	r3, r3, #57344
 1002 001e FB60     		str	r3, [r7, #12]
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1003              		.loc 1 817 0
 1004 0020 7B68     		ldr	r3, [r7, #4]
 1005 0022 DB00     		lsls	r3, r3, #3
 1006 0024 FA68     		ldr	r2, [r7, #12]
 1007 0026 1343     		orrs	r3, r3, r2
 1008 0028 FB60     		str	r3, [r7, #12]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 1009              		.loc 1 820 0
 1010 002a 4FF46053 		mov	r3, #14336
 1011 002e C4F20203 		movt	r3, 16386
 1012 0032 FA68     		ldr	r2, [r7, #12]
 1013 0034 9A60     		str	r2, [r3, #8]
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1014              		.loc 1 821 0
 1015 0036 1437     		adds	r7, r7, #20
 1016 0038 BD46     		mov	sp, r7
 1017              		@ sp needed
 1018 003a 5DF8047B 		ldr	r7, [sp], #4
 1019 003e 7047     		bx	lr
 1020              		.cfi_endproc
 1021              	.LFE128:
 1023              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1024              		.align	2
 1025              		.global	RCC_GetClocksFreq
 1026              		.thumb
 1027              		.thumb_func
 1029              	RCC_GetClocksFreq:
 1030              	.LFB129:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1031              		.loc 1 857 0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 32
 1034              		@ frame_needed = 1, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
 1036 0000 80B4     		push	{r7}
 1037              	.LCFI55:
 1038              		.cfi_def_cfa_offset 4
 1039              		.cfi_offset 7, -4
 1040 0002 89B0     		sub	sp, sp, #36
 1041              	.LCFI56:
 1042              		.cfi_def_cfa_offset 40
 1043 0004 00AF     		add	r7, sp, #0
 1044              	.LCFI57:
 1045              		.cfi_def_cfa_register 7
 1046 0006 7860     		str	r0, [r7, #4]
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1047              		.loc 1 858 0
 1048 0008 0023     		movs	r3, #0
 1049 000a BB61     		str	r3, [r7, #24]
 1050 000c 0023     		movs	r3, #0
 1051 000e 7B61     		str	r3, [r7, #20]
 1052 0010 0023     		movs	r3, #0
 1053 0012 FB61     		str	r3, [r7, #28]
 1054 0014 0223     		movs	r3, #2
 1055 0016 3B61     		str	r3, [r7, #16]
 1056 0018 0023     		movs	r3, #0
 1057 001a FB60     		str	r3, [r7, #12]
 1058 001c 0223     		movs	r3, #2
 1059 001e BB60     		str	r3, [r7, #8]
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1060              		.loc 1 861 0
 1061 0020 4FF46053 		mov	r3, #14336
 1062 0024 C4F20203 		movt	r3, 16386
 1063 0028 9B68     		ldr	r3, [r3, #8]
 1064 002a 03F00C03 		and	r3, r3, #12
 1065 002e BB61     		str	r3, [r7, #24]
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1066              		.loc 1 863 0
 1067 0030 BB69     		ldr	r3, [r7, #24]
 1068 0032 042B     		cmp	r3, #4
 1069 0034 0AD0     		beq	.L32
 1070 0036 082B     		cmp	r3, #8
 1071 0038 0FD0     		beq	.L33
 1072 003a 002B     		cmp	r3, #0
 1073 003c 5AD1     		bne	.L38
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1074              		.loc 1 866 0
 1075 003e 7A68     		ldr	r2, [r7, #4]
 1076 0040 4FF41053 		mov	r3, #9216
 1077 0044 C0F2F403 		movt	r3, 244
 1078 0048 1360     		str	r3, [r2]
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1079              		.loc 1 867 0
 1080 004a 5AE0     		b	.L35
 1081              	.L32:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1082              		.loc 1 869 0
 1083 004c 7A68     		ldr	r2, [r7, #4]
 1084 004e 4FF49053 		mov	r3, #4608
 1085 0052 C0F27A03 		movt	r3, 122
 1086 0056 1360     		str	r3, [r2]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1087              		.loc 1 870 0
 1088 0058 53E0     		b	.L35
 1089              	.L33:
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1090              		.loc 1 876 0
 1091 005a 4FF46053 		mov	r3, #14336
 1092 005e C4F20203 		movt	r3, 16386
 1093 0062 5B68     		ldr	r3, [r3, #4]
 1094 0064 03F48003 		and	r3, r3, #4194304
 1095 0068 9B0D     		lsrs	r3, r3, #22
 1096 006a FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1097              		.loc 1 877 0
 1098 006c 4FF46053 		mov	r3, #14336
 1099 0070 C4F20203 		movt	r3, 16386
 1100 0074 5B68     		ldr	r3, [r3, #4]
 1101 0076 03F03F03 		and	r3, r3, #63
 1102 007a BB60     		str	r3, [r7, #8]
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1103              		.loc 1 879 0
 1104 007c FB68     		ldr	r3, [r7, #12]
 1105 007e 002B     		cmp	r3, #0
 1106 0080 13D0     		beq	.L36
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1107              		.loc 1 882 0
 1108 0082 4FF49053 		mov	r3, #4608
 1109 0086 C0F27A03 		movt	r3, 122
 1110 008a BA68     		ldr	r2, [r7, #8]
 1111 008c B3FBF2F2 		udiv	r2, r3, r2
 1112 0090 4FF46053 		mov	r3, #14336
 1113 0094 C4F20203 		movt	r3, 16386
 1114 0098 5968     		ldr	r1, [r3, #4]
 1115 009a 47F6C073 		movw	r3, #32704
 1116 009e 0B40     		ands	r3, r3, r1
 1117 00a0 9B09     		lsrs	r3, r3, #6
 1118 00a2 03FB02F3 		mul	r3, r3, r2
 1119 00a6 FB61     		str	r3, [r7, #28]
 1120 00a8 12E0     		b	.L37
 1121              	.L36:
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1122              		.loc 1 887 0
 1123 00aa 4FF41053 		mov	r3, #9216
 1124 00ae C0F2F403 		movt	r3, 244
 1125 00b2 BA68     		ldr	r2, [r7, #8]
 1126 00b4 B3FBF2F2 		udiv	r2, r3, r2
 1127 00b8 4FF46053 		mov	r3, #14336
 1128 00bc C4F20203 		movt	r3, 16386
 1129 00c0 5968     		ldr	r1, [r3, #4]
 1130 00c2 47F6C073 		movw	r3, #32704
 1131 00c6 0B40     		ands	r3, r3, r1
 1132 00c8 9B09     		lsrs	r3, r3, #6
 1133 00ca 03FB02F3 		mul	r3, r3, r2
 1134 00ce FB61     		str	r3, [r7, #28]
 1135              	.L37:
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1136              		.loc 1 890 0
 1137 00d0 4FF46053 		mov	r3, #14336
 1138 00d4 C4F20203 		movt	r3, 16386
 1139 00d8 5B68     		ldr	r3, [r3, #4]
 1140 00da 03F44033 		and	r3, r3, #196608
 1141 00de 1B0C     		lsrs	r3, r3, #16
 1142 00e0 0133     		adds	r3, r3, #1
 1143 00e2 5B00     		lsls	r3, r3, #1
 1144 00e4 3B61     		str	r3, [r7, #16]
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1145              		.loc 1 891 0
 1146 00e6 FA69     		ldr	r2, [r7, #28]
 1147 00e8 3B69     		ldr	r3, [r7, #16]
 1148 00ea B2FBF3F2 		udiv	r2, r2, r3
 1149 00ee 7B68     		ldr	r3, [r7, #4]
 1150 00f0 1A60     		str	r2, [r3]
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1151              		.loc 1 892 0
 1152 00f2 06E0     		b	.L35
 1153              	.L38:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1154              		.loc 1 894 0
 1155 00f4 7A68     		ldr	r2, [r7, #4]
 1156 00f6 4FF41053 		mov	r3, #9216
 1157 00fa C0F2F403 		movt	r3, 244
 1158 00fe 1360     		str	r3, [r2]
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1159              		.loc 1 895 0
 1160 0100 00BF     		nop
 1161              	.L35:
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1162              		.loc 1 900 0
 1163 0102 4FF46053 		mov	r3, #14336
 1164 0106 C4F20203 		movt	r3, 16386
 1165 010a 9B68     		ldr	r3, [r3, #8]
 1166 010c 03F0F003 		and	r3, r3, #240
 1167 0110 BB61     		str	r3, [r7, #24]
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1168              		.loc 1 901 0
 1169 0112 BB69     		ldr	r3, [r7, #24]
 1170 0114 1B09     		lsrs	r3, r3, #4
 1171 0116 BB61     		str	r3, [r7, #24]
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1172              		.loc 1 902 0
 1173 0118 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1174 011c C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1175 0120 BA69     		ldr	r2, [r7, #24]
 1176 0122 1344     		add	r3, r3, r2
 1177 0124 1B78     		ldrb	r3, [r3]
 1178 0126 DBB2     		uxtb	r3, r3
 1179 0128 7B61     		str	r3, [r7, #20]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1180              		.loc 1 904 0
 1181 012a 7B68     		ldr	r3, [r7, #4]
 1182 012c 1A68     		ldr	r2, [r3]
 1183 012e 7B69     		ldr	r3, [r7, #20]
 1184 0130 DA40     		lsrs	r2, r2, r3
 1185 0132 7B68     		ldr	r3, [r7, #4]
 1186 0134 5A60     		str	r2, [r3, #4]
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1187              		.loc 1 907 0
 1188 0136 4FF46053 		mov	r3, #14336
 1189 013a C4F20203 		movt	r3, 16386
 1190 013e 9B68     		ldr	r3, [r3, #8]
 1191 0140 03F4E053 		and	r3, r3, #7168
 1192 0144 BB61     		str	r3, [r7, #24]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1193              		.loc 1 908 0
 1194 0146 BB69     		ldr	r3, [r7, #24]
 1195 0148 9B0A     		lsrs	r3, r3, #10
 1196 014a BB61     		str	r3, [r7, #24]
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1197              		.loc 1 909 0
 1198 014c 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1199 0150 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1200 0154 BA69     		ldr	r2, [r7, #24]
 1201 0156 1344     		add	r3, r3, r2
 1202 0158 1B78     		ldrb	r3, [r3]
 1203 015a DBB2     		uxtb	r3, r3
 1204 015c 7B61     		str	r3, [r7, #20]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1205              		.loc 1 911 0
 1206 015e 7B68     		ldr	r3, [r7, #4]
 1207 0160 5A68     		ldr	r2, [r3, #4]
 1208 0162 7B69     		ldr	r3, [r7, #20]
 1209 0164 DA40     		lsrs	r2, r2, r3
 1210 0166 7B68     		ldr	r3, [r7, #4]
 1211 0168 9A60     		str	r2, [r3, #8]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1212              		.loc 1 914 0
 1213 016a 4FF46053 		mov	r3, #14336
 1214 016e C4F20203 		movt	r3, 16386
 1215 0172 9B68     		ldr	r3, [r3, #8]
 1216 0174 03F46043 		and	r3, r3, #57344
 1217 0178 BB61     		str	r3, [r7, #24]
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1218              		.loc 1 915 0
 1219 017a BB69     		ldr	r3, [r7, #24]
 1220 017c 5B0B     		lsrs	r3, r3, #13
 1221 017e BB61     		str	r3, [r7, #24]
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1222              		.loc 1 916 0
 1223 0180 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1224 0184 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1225 0188 BA69     		ldr	r2, [r7, #24]
 1226 018a 1344     		add	r3, r3, r2
 1227 018c 1B78     		ldrb	r3, [r3]
 1228 018e DBB2     		uxtb	r3, r3
 1229 0190 7B61     		str	r3, [r7, #20]
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1230              		.loc 1 918 0
 1231 0192 7B68     		ldr	r3, [r7, #4]
 1232 0194 5A68     		ldr	r2, [r3, #4]
 1233 0196 7B69     		ldr	r3, [r7, #20]
 1234 0198 DA40     		lsrs	r2, r2, r3
 1235 019a 7B68     		ldr	r3, [r7, #4]
 1236 019c DA60     		str	r2, [r3, #12]
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1237              		.loc 1 919 0
 1238 019e 2437     		adds	r7, r7, #36
 1239 01a0 BD46     		mov	sp, r7
 1240              		@ sp needed
 1241 01a2 5DF8047B 		ldr	r7, [sp], #4
 1242 01a6 7047     		bx	lr
 1243              		.cfi_endproc
 1244              	.LFE129:
 1246              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1247              		.align	2
 1248              		.global	RCC_RTCCLKConfig
 1249              		.thumb
 1250              		.thumb_func
 1252              	RCC_RTCCLKConfig:
 1253              	.LFB130:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1254              		.loc 1 982 0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 16
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
 1259 0000 80B4     		push	{r7}
 1260              	.LCFI58:
 1261              		.cfi_def_cfa_offset 4
 1262              		.cfi_offset 7, -4
 1263 0002 85B0     		sub	sp, sp, #20
 1264              	.LCFI59:
 1265              		.cfi_def_cfa_offset 24
 1266 0004 00AF     		add	r7, sp, #0
 1267              	.LCFI60:
 1268              		.cfi_def_cfa_register 7
 1269 0006 7860     		str	r0, [r7, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1270              		.loc 1 983 0
 1271 0008 0023     		movs	r3, #0
 1272 000a FB60     		str	r3, [r7, #12]
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1273              		.loc 1 988 0
 1274 000c 7B68     		ldr	r3, [r7, #4]
 1275 000e 03F44073 		and	r3, r3, #768
 1276 0012 B3F5407F 		cmp	r3, #768
 1277 0016 17D1     		bne	.L40
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1278              		.loc 1 990 0
 1279 0018 4FF46053 		mov	r3, #14336
 1280 001c C4F20203 		movt	r3, 16386
 1281 0020 9B68     		ldr	r3, [r3, #8]
 1282 0022 FB60     		str	r3, [r7, #12]
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1283              		.loc 1 993 0
 1284 0024 FB68     		ldr	r3, [r7, #12]
 1285 0026 23F4F813 		bic	r3, r3, #2031616
 1286 002a FB60     		str	r3, [r7, #12]
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1287              		.loc 1 996 0
 1288 002c 7B68     		ldr	r3, [r7, #4]
 1289 002e 23F07043 		bic	r3, r3, #-268435456
 1290 0032 23F44073 		bic	r3, r3, #768
 1291 0036 FA68     		ldr	r2, [r7, #12]
 1292 0038 1343     		orrs	r3, r3, r2
 1293 003a FB60     		str	r3, [r7, #12]
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1294              		.loc 1 999 0
 1295 003c 4FF46053 		mov	r3, #14336
 1296 0040 C4F20203 		movt	r3, 16386
 1297 0044 FA68     		ldr	r2, [r7, #12]
 1298 0046 9A60     		str	r2, [r3, #8]
 1299              	.L40:
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1300              		.loc 1 1003 0
 1301 0048 4FF46053 		mov	r3, #14336
 1302 004c C4F20203 		movt	r3, 16386
 1303 0050 4FF46052 		mov	r2, #14336
 1304 0054 C4F20202 		movt	r2, 16386
 1305 0058 116F     		ldr	r1, [r2, #112]
 1306 005a 7A68     		ldr	r2, [r7, #4]
 1307 005c C2F30B02 		ubfx	r2, r2, #0, #12
 1308 0060 0A43     		orrs	r2, r2, r1
 1309 0062 1A67     		str	r2, [r3, #112]
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1310              		.loc 1 1004 0
 1311 0064 1437     		adds	r7, r7, #20
 1312 0066 BD46     		mov	sp, r7
 1313              		@ sp needed
 1314 0068 5DF8047B 		ldr	r7, [sp], #4
 1315 006c 7047     		bx	lr
 1316              		.cfi_endproc
 1317              	.LFE130:
 1319 006e 00BF     		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1320              		.align	2
 1321              		.global	RCC_RTCCLKCmd
 1322              		.thumb
 1323              		.thumb_func
 1325              	RCC_RTCCLKCmd:
 1326              	.LFB131:
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1327              		.loc 1 1014 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 8
 1330              		@ frame_needed = 1, uses_anonymous_args = 0
 1331              		@ link register save eliminated.
 1332 0000 80B4     		push	{r7}
 1333              	.LCFI61:
 1334              		.cfi_def_cfa_offset 4
 1335              		.cfi_offset 7, -4
 1336 0002 83B0     		sub	sp, sp, #12
 1337              	.LCFI62:
 1338              		.cfi_def_cfa_offset 16
 1339 0004 00AF     		add	r7, sp, #0
 1340              	.LCFI63:
 1341              		.cfi_def_cfa_register 7
 1342 0006 0346     		mov	r3, r0
 1343 0008 FB71     		strb	r3, [r7, #7]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1344              		.loc 1 1018 0
 1345 000a 40F63C63 		movw	r3, #3644
 1346 000e C4F24723 		movt	r3, 16967
 1347 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1348 0014 1A60     		str	r2, [r3]
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1349              		.loc 1 1019 0
 1350 0016 0C37     		adds	r7, r7, #12
 1351 0018 BD46     		mov	sp, r7
 1352              		@ sp needed
 1353 001a 5DF8047B 		ldr	r7, [sp], #4
 1354 001e 7047     		bx	lr
 1355              		.cfi_endproc
 1356              	.LFE131:
 1358              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1359              		.align	2
 1360              		.global	RCC_BackupResetCmd
 1361              		.thumb
 1362              		.thumb_func
 1364              	RCC_BackupResetCmd:
 1365              	.LFB132:
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1366              		.loc 1 1031 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 8
 1369              		@ frame_needed = 1, uses_anonymous_args = 0
 1370              		@ link register save eliminated.
 1371 0000 80B4     		push	{r7}
 1372              	.LCFI64:
 1373              		.cfi_def_cfa_offset 4
 1374              		.cfi_offset 7, -4
 1375 0002 83B0     		sub	sp, sp, #12
 1376              	.LCFI65:
 1377              		.cfi_def_cfa_offset 16
 1378 0004 00AF     		add	r7, sp, #0
 1379              	.LCFI66:
 1380              		.cfi_def_cfa_register 7
 1381 0006 0346     		mov	r3, r0
 1382 0008 FB71     		strb	r3, [r7, #7]
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1383              		.loc 1 1034 0
 1384 000a 4FF46463 		mov	r3, #3648
 1385 000e C4F24723 		movt	r3, 16967
 1386 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1387 0014 1A60     		str	r2, [r3]
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1388              		.loc 1 1035 0
 1389 0016 0C37     		adds	r7, r7, #12
 1390 0018 BD46     		mov	sp, r7
 1391              		@ sp needed
 1392 001a 5DF8047B 		ldr	r7, [sp], #4
 1393 001e 7047     		bx	lr
 1394              		.cfi_endproc
 1395              	.LFE132:
 1397              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1398              		.align	2
 1399              		.global	RCC_I2SCLKConfig
 1400              		.thumb
 1401              		.thumb_func
 1403              	RCC_I2SCLKConfig:
 1404              	.LFB133:
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1405              		.loc 1 1051 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 8
 1408              		@ frame_needed = 1, uses_anonymous_args = 0
 1409              		@ link register save eliminated.
 1410 0000 80B4     		push	{r7}
 1411              	.LCFI67:
 1412              		.cfi_def_cfa_offset 4
 1413              		.cfi_offset 7, -4
 1414 0002 83B0     		sub	sp, sp, #12
 1415              	.LCFI68:
 1416              		.cfi_def_cfa_offset 16
 1417 0004 00AF     		add	r7, sp, #0
 1418              	.LCFI69:
 1419              		.cfi_def_cfa_register 7
 1420 0006 7860     		str	r0, [r7, #4]
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1421              		.loc 1 1055 0
 1422 0008 4FF4AE73 		mov	r3, #348
 1423 000c C4F24723 		movt	r3, 16967
 1424 0010 7A68     		ldr	r2, [r7, #4]
 1425 0012 1A60     		str	r2, [r3]
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1426              		.loc 1 1056 0
 1427 0014 0C37     		adds	r7, r7, #12
 1428 0016 BD46     		mov	sp, r7
 1429              		@ sp needed
 1430 0018 5DF8047B 		ldr	r7, [sp], #4
 1431 001c 7047     		bx	lr
 1432              		.cfi_endproc
 1433              	.LFE133:
 1435 001e 00BF     		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1436              		.align	2
 1437              		.global	RCC_AHB1PeriphClockCmd
 1438              		.thumb
 1439              		.thumb_func
 1441              	RCC_AHB1PeriphClockCmd:
 1442              	.LFB134:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1443              		.loc 1 1089 0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 8
 1446              		@ frame_needed = 1, uses_anonymous_args = 0
 1447              		@ link register save eliminated.
 1448 0000 80B4     		push	{r7}
 1449              	.LCFI70:
 1450              		.cfi_def_cfa_offset 4
 1451              		.cfi_offset 7, -4
 1452 0002 83B0     		sub	sp, sp, #12
 1453              	.LCFI71:
 1454              		.cfi_def_cfa_offset 16
 1455 0004 00AF     		add	r7, sp, #0
 1456              	.LCFI72:
 1457              		.cfi_def_cfa_register 7
 1458 0006 7860     		str	r0, [r7, #4]
 1459 0008 0B46     		mov	r3, r1
 1460 000a FB70     		strb	r3, [r7, #3]
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1461              		.loc 1 1094 0
 1462 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1463 000e 002B     		cmp	r3, #0
 1464 0010 0CD0     		beq	.L45
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1465              		.loc 1 1096 0
 1466 0012 4FF46053 		mov	r3, #14336
 1467 0016 C4F20203 		movt	r3, 16386
 1468 001a 4FF46052 		mov	r2, #14336
 1469 001e C4F20202 		movt	r2, 16386
 1470 0022 116B     		ldr	r1, [r2, #48]
 1471 0024 7A68     		ldr	r2, [r7, #4]
 1472 0026 0A43     		orrs	r2, r2, r1
 1473 0028 1A63     		str	r2, [r3, #48]
 1474 002a 0CE0     		b	.L44
 1475              	.L45:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1476              		.loc 1 1100 0
 1477 002c 4FF46053 		mov	r3, #14336
 1478 0030 C4F20203 		movt	r3, 16386
 1479 0034 4FF46052 		mov	r2, #14336
 1480 0038 C4F20202 		movt	r2, 16386
 1481 003c 116B     		ldr	r1, [r2, #48]
 1482 003e 7A68     		ldr	r2, [r7, #4]
 1483 0040 D243     		mvns	r2, r2
 1484 0042 0A40     		ands	r2, r2, r1
 1485 0044 1A63     		str	r2, [r3, #48]
 1486              	.L44:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1487              		.loc 1 1102 0
 1488 0046 0C37     		adds	r7, r7, #12
 1489 0048 BD46     		mov	sp, r7
 1490              		@ sp needed
 1491 004a 5DF8047B 		ldr	r7, [sp], #4
 1492 004e 7047     		bx	lr
 1493              		.cfi_endproc
 1494              	.LFE134:
 1496              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1497              		.align	2
 1498              		.global	RCC_AHB2PeriphClockCmd
 1499              		.thumb
 1500              		.thumb_func
 1502              	RCC_AHB2PeriphClockCmd:
 1503              	.LFB135:
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1504              		.loc 1 1121 0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 8
 1507              		@ frame_needed = 1, uses_anonymous_args = 0
 1508              		@ link register save eliminated.
 1509 0000 80B4     		push	{r7}
 1510              	.LCFI73:
 1511              		.cfi_def_cfa_offset 4
 1512              		.cfi_offset 7, -4
 1513 0002 83B0     		sub	sp, sp, #12
 1514              	.LCFI74:
 1515              		.cfi_def_cfa_offset 16
 1516 0004 00AF     		add	r7, sp, #0
 1517              	.LCFI75:
 1518              		.cfi_def_cfa_register 7
 1519 0006 7860     		str	r0, [r7, #4]
 1520 0008 0B46     		mov	r3, r1
 1521 000a FB70     		strb	r3, [r7, #3]
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1522              		.loc 1 1126 0
 1523 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1524 000e 002B     		cmp	r3, #0
 1525 0010 0CD0     		beq	.L48
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1526              		.loc 1 1128 0
 1527 0012 4FF46053 		mov	r3, #14336
 1528 0016 C4F20203 		movt	r3, 16386
 1529 001a 4FF46052 		mov	r2, #14336
 1530 001e C4F20202 		movt	r2, 16386
 1531 0022 516B     		ldr	r1, [r2, #52]
 1532 0024 7A68     		ldr	r2, [r7, #4]
 1533 0026 0A43     		orrs	r2, r2, r1
 1534 0028 5A63     		str	r2, [r3, #52]
 1535 002a 0CE0     		b	.L47
 1536              	.L48:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1537              		.loc 1 1132 0
 1538 002c 4FF46053 		mov	r3, #14336
 1539 0030 C4F20203 		movt	r3, 16386
 1540 0034 4FF46052 		mov	r2, #14336
 1541 0038 C4F20202 		movt	r2, 16386
 1542 003c 516B     		ldr	r1, [r2, #52]
 1543 003e 7A68     		ldr	r2, [r7, #4]
 1544 0040 D243     		mvns	r2, r2
 1545 0042 0A40     		ands	r2, r2, r1
 1546 0044 5A63     		str	r2, [r3, #52]
 1547              	.L47:
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1548              		.loc 1 1134 0
 1549 0046 0C37     		adds	r7, r7, #12
 1550 0048 BD46     		mov	sp, r7
 1551              		@ sp needed
 1552 004a 5DF8047B 		ldr	r7, [sp], #4
 1553 004e 7047     		bx	lr
 1554              		.cfi_endproc
 1555              	.LFE135:
 1557              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1558              		.align	2
 1559              		.global	RCC_AHB3PeriphClockCmd
 1560              		.thumb
 1561              		.thumb_func
 1563              	RCC_AHB3PeriphClockCmd:
 1564              	.LFB136:
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1565              		.loc 1 1148 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 8
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569              		@ link register save eliminated.
 1570 0000 80B4     		push	{r7}
 1571              	.LCFI76:
 1572              		.cfi_def_cfa_offset 4
 1573              		.cfi_offset 7, -4
 1574 0002 83B0     		sub	sp, sp, #12
 1575              	.LCFI77:
 1576              		.cfi_def_cfa_offset 16
 1577 0004 00AF     		add	r7, sp, #0
 1578              	.LCFI78:
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
 1581 0008 0B46     		mov	r3, r1
 1582 000a FB70     		strb	r3, [r7, #3]
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1583              		.loc 1 1153 0
 1584 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1585 000e 002B     		cmp	r3, #0
 1586 0010 0CD0     		beq	.L51
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1587              		.loc 1 1155 0
 1588 0012 4FF46053 		mov	r3, #14336
 1589 0016 C4F20203 		movt	r3, 16386
 1590 001a 4FF46052 		mov	r2, #14336
 1591 001e C4F20202 		movt	r2, 16386
 1592 0022 916B     		ldr	r1, [r2, #56]
 1593 0024 7A68     		ldr	r2, [r7, #4]
 1594 0026 0A43     		orrs	r2, r2, r1
 1595 0028 9A63     		str	r2, [r3, #56]
 1596 002a 0CE0     		b	.L50
 1597              	.L51:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1598              		.loc 1 1159 0
 1599 002c 4FF46053 		mov	r3, #14336
 1600 0030 C4F20203 		movt	r3, 16386
 1601 0034 4FF46052 		mov	r2, #14336
 1602 0038 C4F20202 		movt	r2, 16386
 1603 003c 916B     		ldr	r1, [r2, #56]
 1604 003e 7A68     		ldr	r2, [r7, #4]
 1605 0040 D243     		mvns	r2, r2
 1606 0042 0A40     		ands	r2, r2, r1
 1607 0044 9A63     		str	r2, [r3, #56]
 1608              	.L50:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1609              		.loc 1 1161 0
 1610 0046 0C37     		adds	r7, r7, #12
 1611 0048 BD46     		mov	sp, r7
 1612              		@ sp needed
 1613 004a 5DF8047B 		ldr	r7, [sp], #4
 1614 004e 7047     		bx	lr
 1615              		.cfi_endproc
 1616              	.LFE136:
 1618              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1619              		.align	2
 1620              		.global	RCC_APB1PeriphClockCmd
 1621              		.thumb
 1622              		.thumb_func
 1624              	RCC_APB1PeriphClockCmd:
 1625              	.LFB137:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1626              		.loc 1 1198 0
 1627              		.cfi_startproc
 1628              		@ args = 0, pretend = 0, frame = 8
 1629              		@ frame_needed = 1, uses_anonymous_args = 0
 1630              		@ link register save eliminated.
 1631 0000 80B4     		push	{r7}
 1632              	.LCFI79:
 1633              		.cfi_def_cfa_offset 4
 1634              		.cfi_offset 7, -4
 1635 0002 83B0     		sub	sp, sp, #12
 1636              	.LCFI80:
 1637              		.cfi_def_cfa_offset 16
 1638 0004 00AF     		add	r7, sp, #0
 1639              	.LCFI81:
 1640              		.cfi_def_cfa_register 7
 1641 0006 7860     		str	r0, [r7, #4]
 1642 0008 0B46     		mov	r3, r1
 1643 000a FB70     		strb	r3, [r7, #3]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1644              		.loc 1 1203 0
 1645 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1646 000e 002B     		cmp	r3, #0
 1647 0010 0CD0     		beq	.L54
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1648              		.loc 1 1205 0
 1649 0012 4FF46053 		mov	r3, #14336
 1650 0016 C4F20203 		movt	r3, 16386
 1651 001a 4FF46052 		mov	r2, #14336
 1652 001e C4F20202 		movt	r2, 16386
 1653 0022 116C     		ldr	r1, [r2, #64]
 1654 0024 7A68     		ldr	r2, [r7, #4]
 1655 0026 0A43     		orrs	r2, r2, r1
 1656 0028 1A64     		str	r2, [r3, #64]
 1657 002a 0CE0     		b	.L53
 1658              	.L54:
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1659              		.loc 1 1209 0
 1660 002c 4FF46053 		mov	r3, #14336
 1661 0030 C4F20203 		movt	r3, 16386
 1662 0034 4FF46052 		mov	r2, #14336
 1663 0038 C4F20202 		movt	r2, 16386
 1664 003c 116C     		ldr	r1, [r2, #64]
 1665 003e 7A68     		ldr	r2, [r7, #4]
 1666 0040 D243     		mvns	r2, r2
 1667 0042 0A40     		ands	r2, r2, r1
 1668 0044 1A64     		str	r2, [r3, #64]
 1669              	.L53:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1670              		.loc 1 1211 0
 1671 0046 0C37     		adds	r7, r7, #12
 1672 0048 BD46     		mov	sp, r7
 1673              		@ sp needed
 1674 004a 5DF8047B 		ldr	r7, [sp], #4
 1675 004e 7047     		bx	lr
 1676              		.cfi_endproc
 1677              	.LFE137:
 1679              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1680              		.align	2
 1681              		.global	RCC_APB2PeriphClockCmd
 1682              		.thumb
 1683              		.thumb_func
 1685              	RCC_APB2PeriphClockCmd:
 1686              	.LFB138:
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1687              		.loc 1 1238 0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 8
 1690              		@ frame_needed = 1, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
 1692 0000 80B4     		push	{r7}
 1693              	.LCFI82:
 1694              		.cfi_def_cfa_offset 4
 1695              		.cfi_offset 7, -4
 1696 0002 83B0     		sub	sp, sp, #12
 1697              	.LCFI83:
 1698              		.cfi_def_cfa_offset 16
 1699 0004 00AF     		add	r7, sp, #0
 1700              	.LCFI84:
 1701              		.cfi_def_cfa_register 7
 1702 0006 7860     		str	r0, [r7, #4]
 1703 0008 0B46     		mov	r3, r1
 1704 000a FB70     		strb	r3, [r7, #3]
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1705              		.loc 1 1243 0
 1706 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1707 000e 002B     		cmp	r3, #0
 1708 0010 0CD0     		beq	.L57
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1709              		.loc 1 1245 0
 1710 0012 4FF46053 		mov	r3, #14336
 1711 0016 C4F20203 		movt	r3, 16386
 1712 001a 4FF46052 		mov	r2, #14336
 1713 001e C4F20202 		movt	r2, 16386
 1714 0022 516C     		ldr	r1, [r2, #68]
 1715 0024 7A68     		ldr	r2, [r7, #4]
 1716 0026 0A43     		orrs	r2, r2, r1
 1717 0028 5A64     		str	r2, [r3, #68]
 1718 002a 0CE0     		b	.L56
 1719              	.L57:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1720              		.loc 1 1249 0
 1721 002c 4FF46053 		mov	r3, #14336
 1722 0030 C4F20203 		movt	r3, 16386
 1723 0034 4FF46052 		mov	r2, #14336
 1724 0038 C4F20202 		movt	r2, 16386
 1725 003c 516C     		ldr	r1, [r2, #68]
 1726 003e 7A68     		ldr	r2, [r7, #4]
 1727 0040 D243     		mvns	r2, r2
 1728 0042 0A40     		ands	r2, r2, r1
 1729 0044 5A64     		str	r2, [r3, #68]
 1730              	.L56:
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1731              		.loc 1 1251 0
 1732 0046 0C37     		adds	r7, r7, #12
 1733 0048 BD46     		mov	sp, r7
 1734              		@ sp needed
 1735 004a 5DF8047B 		ldr	r7, [sp], #4
 1736 004e 7047     		bx	lr
 1737              		.cfi_endproc
 1738              	.LFE138:
 1740              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1741              		.align	2
 1742              		.global	RCC_AHB1PeriphResetCmd
 1743              		.thumb
 1744              		.thumb_func
 1746              	RCC_AHB1PeriphResetCmd:
 1747              	.LFB139:
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1748              		.loc 1 1277 0
 1749              		.cfi_startproc
 1750              		@ args = 0, pretend = 0, frame = 8
 1751              		@ frame_needed = 1, uses_anonymous_args = 0
 1752              		@ link register save eliminated.
 1753 0000 80B4     		push	{r7}
 1754              	.LCFI85:
 1755              		.cfi_def_cfa_offset 4
 1756              		.cfi_offset 7, -4
 1757 0002 83B0     		sub	sp, sp, #12
 1758              	.LCFI86:
 1759              		.cfi_def_cfa_offset 16
 1760 0004 00AF     		add	r7, sp, #0
 1761              	.LCFI87:
 1762              		.cfi_def_cfa_register 7
 1763 0006 7860     		str	r0, [r7, #4]
 1764 0008 0B46     		mov	r3, r1
 1765 000a FB70     		strb	r3, [r7, #3]
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1766              		.loc 1 1282 0
 1767 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1768 000e 002B     		cmp	r3, #0
 1769 0010 0CD0     		beq	.L60
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1770              		.loc 1 1284 0
 1771 0012 4FF46053 		mov	r3, #14336
 1772 0016 C4F20203 		movt	r3, 16386
 1773 001a 4FF46052 		mov	r2, #14336
 1774 001e C4F20202 		movt	r2, 16386
 1775 0022 1169     		ldr	r1, [r2, #16]
 1776 0024 7A68     		ldr	r2, [r7, #4]
 1777 0026 0A43     		orrs	r2, r2, r1
 1778 0028 1A61     		str	r2, [r3, #16]
 1779 002a 0CE0     		b	.L59
 1780              	.L60:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1781              		.loc 1 1288 0
 1782 002c 4FF46053 		mov	r3, #14336
 1783 0030 C4F20203 		movt	r3, 16386
 1784 0034 4FF46052 		mov	r2, #14336
 1785 0038 C4F20202 		movt	r2, 16386
 1786 003c 1169     		ldr	r1, [r2, #16]
 1787 003e 7A68     		ldr	r2, [r7, #4]
 1788 0040 D243     		mvns	r2, r2
 1789 0042 0A40     		ands	r2, r2, r1
 1790 0044 1A61     		str	r2, [r3, #16]
 1791              	.L59:
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1792              		.loc 1 1290 0
 1793 0046 0C37     		adds	r7, r7, #12
 1794 0048 BD46     		mov	sp, r7
 1795              		@ sp needed
 1796 004a 5DF8047B 		ldr	r7, [sp], #4
 1797 004e 7047     		bx	lr
 1798              		.cfi_endproc
 1799              	.LFE139:
 1801              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1802              		.align	2
 1803              		.global	RCC_AHB2PeriphResetCmd
 1804              		.thumb
 1805              		.thumb_func
 1807              	RCC_AHB2PeriphResetCmd:
 1808              	.LFB140:
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1809              		.loc 1 1306 0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 8
 1812              		@ frame_needed = 1, uses_anonymous_args = 0
 1813              		@ link register save eliminated.
 1814 0000 80B4     		push	{r7}
 1815              	.LCFI88:
 1816              		.cfi_def_cfa_offset 4
 1817              		.cfi_offset 7, -4
 1818 0002 83B0     		sub	sp, sp, #12
 1819              	.LCFI89:
 1820              		.cfi_def_cfa_offset 16
 1821 0004 00AF     		add	r7, sp, #0
 1822              	.LCFI90:
 1823              		.cfi_def_cfa_register 7
 1824 0006 7860     		str	r0, [r7, #4]
 1825 0008 0B46     		mov	r3, r1
 1826 000a FB70     		strb	r3, [r7, #3]
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1827              		.loc 1 1311 0
 1828 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1829 000e 002B     		cmp	r3, #0
 1830 0010 0CD0     		beq	.L63
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1831              		.loc 1 1313 0
 1832 0012 4FF46053 		mov	r3, #14336
 1833 0016 C4F20203 		movt	r3, 16386
 1834 001a 4FF46052 		mov	r2, #14336
 1835 001e C4F20202 		movt	r2, 16386
 1836 0022 5169     		ldr	r1, [r2, #20]
 1837 0024 7A68     		ldr	r2, [r7, #4]
 1838 0026 0A43     		orrs	r2, r2, r1
 1839 0028 5A61     		str	r2, [r3, #20]
 1840 002a 0CE0     		b	.L62
 1841              	.L63:
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1842              		.loc 1 1317 0
 1843 002c 4FF46053 		mov	r3, #14336
 1844 0030 C4F20203 		movt	r3, 16386
 1845 0034 4FF46052 		mov	r2, #14336
 1846 0038 C4F20202 		movt	r2, 16386
 1847 003c 5169     		ldr	r1, [r2, #20]
 1848 003e 7A68     		ldr	r2, [r7, #4]
 1849 0040 D243     		mvns	r2, r2
 1850 0042 0A40     		ands	r2, r2, r1
 1851 0044 5A61     		str	r2, [r3, #20]
 1852              	.L62:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1853              		.loc 1 1319 0
 1854 0046 0C37     		adds	r7, r7, #12
 1855 0048 BD46     		mov	sp, r7
 1856              		@ sp needed
 1857 004a 5DF8047B 		ldr	r7, [sp], #4
 1858 004e 7047     		bx	lr
 1859              		.cfi_endproc
 1860              	.LFE140:
 1862              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1863              		.align	2
 1864              		.global	RCC_AHB3PeriphResetCmd
 1865              		.thumb
 1866              		.thumb_func
 1868              	RCC_AHB3PeriphResetCmd:
 1869              	.LFB141:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1870              		.loc 1 1330 0
 1871              		.cfi_startproc
 1872              		@ args = 0, pretend = 0, frame = 8
 1873              		@ frame_needed = 1, uses_anonymous_args = 0
 1874              		@ link register save eliminated.
 1875 0000 80B4     		push	{r7}
 1876              	.LCFI91:
 1877              		.cfi_def_cfa_offset 4
 1878              		.cfi_offset 7, -4
 1879 0002 83B0     		sub	sp, sp, #12
 1880              	.LCFI92:
 1881              		.cfi_def_cfa_offset 16
 1882 0004 00AF     		add	r7, sp, #0
 1883              	.LCFI93:
 1884              		.cfi_def_cfa_register 7
 1885 0006 7860     		str	r0, [r7, #4]
 1886 0008 0B46     		mov	r3, r1
 1887 000a FB70     		strb	r3, [r7, #3]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1888              		.loc 1 1335 0
 1889 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1890 000e 002B     		cmp	r3, #0
 1891 0010 0CD0     		beq	.L66
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1892              		.loc 1 1337 0
 1893 0012 4FF46053 		mov	r3, #14336
 1894 0016 C4F20203 		movt	r3, 16386
 1895 001a 4FF46052 		mov	r2, #14336
 1896 001e C4F20202 		movt	r2, 16386
 1897 0022 9169     		ldr	r1, [r2, #24]
 1898 0024 7A68     		ldr	r2, [r7, #4]
 1899 0026 0A43     		orrs	r2, r2, r1
 1900 0028 9A61     		str	r2, [r3, #24]
 1901 002a 0CE0     		b	.L65
 1902              	.L66:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1903              		.loc 1 1341 0
 1904 002c 4FF46053 		mov	r3, #14336
 1905 0030 C4F20203 		movt	r3, 16386
 1906 0034 4FF46052 		mov	r2, #14336
 1907 0038 C4F20202 		movt	r2, 16386
 1908 003c 9169     		ldr	r1, [r2, #24]
 1909 003e 7A68     		ldr	r2, [r7, #4]
 1910 0040 D243     		mvns	r2, r2
 1911 0042 0A40     		ands	r2, r2, r1
 1912 0044 9A61     		str	r2, [r3, #24]
 1913              	.L65:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1914              		.loc 1 1343 0
 1915 0046 0C37     		adds	r7, r7, #12
 1916 0048 BD46     		mov	sp, r7
 1917              		@ sp needed
 1918 004a 5DF8047B 		ldr	r7, [sp], #4
 1919 004e 7047     		bx	lr
 1920              		.cfi_endproc
 1921              	.LFE141:
 1923              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1924              		.align	2
 1925              		.global	RCC_APB1PeriphResetCmd
 1926              		.thumb
 1927              		.thumb_func
 1929              	RCC_APB1PeriphResetCmd:
 1930              	.LFB142:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1931              		.loc 1 1377 0
 1932              		.cfi_startproc
 1933              		@ args = 0, pretend = 0, frame = 8
 1934              		@ frame_needed = 1, uses_anonymous_args = 0
 1935              		@ link register save eliminated.
 1936 0000 80B4     		push	{r7}
 1937              	.LCFI94:
 1938              		.cfi_def_cfa_offset 4
 1939              		.cfi_offset 7, -4
 1940 0002 83B0     		sub	sp, sp, #12
 1941              	.LCFI95:
 1942              		.cfi_def_cfa_offset 16
 1943 0004 00AF     		add	r7, sp, #0
 1944              	.LCFI96:
 1945              		.cfi_def_cfa_register 7
 1946 0006 7860     		str	r0, [r7, #4]
 1947 0008 0B46     		mov	r3, r1
 1948 000a FB70     		strb	r3, [r7, #3]
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1949              		.loc 1 1381 0
 1950 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1951 000e 002B     		cmp	r3, #0
 1952 0010 0CD0     		beq	.L69
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1953              		.loc 1 1383 0
 1954 0012 4FF46053 		mov	r3, #14336
 1955 0016 C4F20203 		movt	r3, 16386
 1956 001a 4FF46052 		mov	r2, #14336
 1957 001e C4F20202 		movt	r2, 16386
 1958 0022 116A     		ldr	r1, [r2, #32]
 1959 0024 7A68     		ldr	r2, [r7, #4]
 1960 0026 0A43     		orrs	r2, r2, r1
 1961 0028 1A62     		str	r2, [r3, #32]
 1962 002a 0CE0     		b	.L68
 1963              	.L69:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1964              		.loc 1 1387 0
 1965 002c 4FF46053 		mov	r3, #14336
 1966 0030 C4F20203 		movt	r3, 16386
 1967 0034 4FF46052 		mov	r2, #14336
 1968 0038 C4F20202 		movt	r2, 16386
 1969 003c 116A     		ldr	r1, [r2, #32]
 1970 003e 7A68     		ldr	r2, [r7, #4]
 1971 0040 D243     		mvns	r2, r2
 1972 0042 0A40     		ands	r2, r2, r1
 1973 0044 1A62     		str	r2, [r3, #32]
 1974              	.L68:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1975              		.loc 1 1389 0
 1976 0046 0C37     		adds	r7, r7, #12
 1977 0048 BD46     		mov	sp, r7
 1978              		@ sp needed
 1979 004a 5DF8047B 		ldr	r7, [sp], #4
 1980 004e 7047     		bx	lr
 1981              		.cfi_endproc
 1982              	.LFE142:
 1984              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1985              		.align	2
 1986              		.global	RCC_APB2PeriphResetCmd
 1987              		.thumb
 1988              		.thumb_func
 1990              	RCC_APB2PeriphResetCmd:
 1991              	.LFB143:
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1992              		.loc 1 1413 0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 8
 1995              		@ frame_needed = 1, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 1997 0000 80B4     		push	{r7}
 1998              	.LCFI97:
 1999              		.cfi_def_cfa_offset 4
 2000              		.cfi_offset 7, -4
 2001 0002 83B0     		sub	sp, sp, #12
 2002              	.LCFI98:
 2003              		.cfi_def_cfa_offset 16
 2004 0004 00AF     		add	r7, sp, #0
 2005              	.LCFI99:
 2006              		.cfi_def_cfa_register 7
 2007 0006 7860     		str	r0, [r7, #4]
 2008 0008 0B46     		mov	r3, r1
 2009 000a FB70     		strb	r3, [r7, #3]
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2010              		.loc 1 1417 0
 2011 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2012 000e 002B     		cmp	r3, #0
 2013 0010 0CD0     		beq	.L72
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2014              		.loc 1 1419 0
 2015 0012 4FF46053 		mov	r3, #14336
 2016 0016 C4F20203 		movt	r3, 16386
 2017 001a 4FF46052 		mov	r2, #14336
 2018 001e C4F20202 		movt	r2, 16386
 2019 0022 516A     		ldr	r1, [r2, #36]
 2020 0024 7A68     		ldr	r2, [r7, #4]
 2021 0026 0A43     		orrs	r2, r2, r1
 2022 0028 5A62     		str	r2, [r3, #36]
 2023 002a 0CE0     		b	.L71
 2024              	.L72:
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2025              		.loc 1 1423 0
 2026 002c 4FF46053 		mov	r3, #14336
 2027 0030 C4F20203 		movt	r3, 16386
 2028 0034 4FF46052 		mov	r2, #14336
 2029 0038 C4F20202 		movt	r2, 16386
 2030 003c 516A     		ldr	r1, [r2, #36]
 2031 003e 7A68     		ldr	r2, [r7, #4]
 2032 0040 D243     		mvns	r2, r2
 2033 0042 0A40     		ands	r2, r2, r1
 2034 0044 5A62     		str	r2, [r3, #36]
 2035              	.L71:
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2036              		.loc 1 1425 0
 2037 0046 0C37     		adds	r7, r7, #12
 2038 0048 BD46     		mov	sp, r7
 2039              		@ sp needed
 2040 004a 5DF8047B 		ldr	r7, [sp], #4
 2041 004e 7047     		bx	lr
 2042              		.cfi_endproc
 2043              	.LFE143:
 2045              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2046              		.align	2
 2047              		.global	RCC_AHB1PeriphClockLPModeCmd
 2048              		.thumb
 2049              		.thumb_func
 2051              	RCC_AHB1PeriphClockLPModeCmd:
 2052              	.LFB144:
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2053              		.loc 1 1459 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 8
 2056              		@ frame_needed = 1, uses_anonymous_args = 0
 2057              		@ link register save eliminated.
 2058 0000 80B4     		push	{r7}
 2059              	.LCFI100:
 2060              		.cfi_def_cfa_offset 4
 2061              		.cfi_offset 7, -4
 2062 0002 83B0     		sub	sp, sp, #12
 2063              	.LCFI101:
 2064              		.cfi_def_cfa_offset 16
 2065 0004 00AF     		add	r7, sp, #0
 2066              	.LCFI102:
 2067              		.cfi_def_cfa_register 7
 2068 0006 7860     		str	r0, [r7, #4]
 2069 0008 0B46     		mov	r3, r1
 2070 000a FB70     		strb	r3, [r7, #3]
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2071              		.loc 1 1463 0
 2072 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2073 000e 002B     		cmp	r3, #0
 2074 0010 0CD0     		beq	.L75
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2075              		.loc 1 1465 0
 2076 0012 4FF46053 		mov	r3, #14336
 2077 0016 C4F20203 		movt	r3, 16386
 2078 001a 4FF46052 		mov	r2, #14336
 2079 001e C4F20202 		movt	r2, 16386
 2080 0022 116D     		ldr	r1, [r2, #80]
 2081 0024 7A68     		ldr	r2, [r7, #4]
 2082 0026 0A43     		orrs	r2, r2, r1
 2083 0028 1A65     		str	r2, [r3, #80]
 2084 002a 0CE0     		b	.L74
 2085              	.L75:
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2086              		.loc 1 1469 0
 2087 002c 4FF46053 		mov	r3, #14336
 2088 0030 C4F20203 		movt	r3, 16386
 2089 0034 4FF46052 		mov	r2, #14336
 2090 0038 C4F20202 		movt	r2, 16386
 2091 003c 116D     		ldr	r1, [r2, #80]
 2092 003e 7A68     		ldr	r2, [r7, #4]
 2093 0040 D243     		mvns	r2, r2
 2094 0042 0A40     		ands	r2, r2, r1
 2095 0044 1A65     		str	r2, [r3, #80]
 2096              	.L74:
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2097              		.loc 1 1471 0
 2098 0046 0C37     		adds	r7, r7, #12
 2099 0048 BD46     		mov	sp, r7
 2100              		@ sp needed
 2101 004a 5DF8047B 		ldr	r7, [sp], #4
 2102 004e 7047     		bx	lr
 2103              		.cfi_endproc
 2104              	.LFE144:
 2106              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2107              		.align	2
 2108              		.global	RCC_AHB2PeriphClockLPModeCmd
 2109              		.thumb
 2110              		.thumb_func
 2112              	RCC_AHB2PeriphClockLPModeCmd:
 2113              	.LFB145:
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2114              		.loc 1 1491 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 8
 2117              		@ frame_needed = 1, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 2119 0000 80B4     		push	{r7}
 2120              	.LCFI103:
 2121              		.cfi_def_cfa_offset 4
 2122              		.cfi_offset 7, -4
 2123 0002 83B0     		sub	sp, sp, #12
 2124              	.LCFI104:
 2125              		.cfi_def_cfa_offset 16
 2126 0004 00AF     		add	r7, sp, #0
 2127              	.LCFI105:
 2128              		.cfi_def_cfa_register 7
 2129 0006 7860     		str	r0, [r7, #4]
 2130 0008 0B46     		mov	r3, r1
 2131 000a FB70     		strb	r3, [r7, #3]
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2132              		.loc 1 1495 0
 2133 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2134 000e 002B     		cmp	r3, #0
 2135 0010 0CD0     		beq	.L78
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2136              		.loc 1 1497 0
 2137 0012 4FF46053 		mov	r3, #14336
 2138 0016 C4F20203 		movt	r3, 16386
 2139 001a 4FF46052 		mov	r2, #14336
 2140 001e C4F20202 		movt	r2, 16386
 2141 0022 516D     		ldr	r1, [r2, #84]
 2142 0024 7A68     		ldr	r2, [r7, #4]
 2143 0026 0A43     		orrs	r2, r2, r1
 2144 0028 5A65     		str	r2, [r3, #84]
 2145 002a 0CE0     		b	.L77
 2146              	.L78:
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2147              		.loc 1 1501 0
 2148 002c 4FF46053 		mov	r3, #14336
 2149 0030 C4F20203 		movt	r3, 16386
 2150 0034 4FF46052 		mov	r2, #14336
 2151 0038 C4F20202 		movt	r2, 16386
 2152 003c 516D     		ldr	r1, [r2, #84]
 2153 003e 7A68     		ldr	r2, [r7, #4]
 2154 0040 D243     		mvns	r2, r2
 2155 0042 0A40     		ands	r2, r2, r1
 2156 0044 5A65     		str	r2, [r3, #84]
 2157              	.L77:
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2158              		.loc 1 1503 0
 2159 0046 0C37     		adds	r7, r7, #12
 2160 0048 BD46     		mov	sp, r7
 2161              		@ sp needed
 2162 004a 5DF8047B 		ldr	r7, [sp], #4
 2163 004e 7047     		bx	lr
 2164              		.cfi_endproc
 2165              	.LFE145:
 2167              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2168              		.align	2
 2169              		.global	RCC_AHB3PeriphClockLPModeCmd
 2170              		.thumb
 2171              		.thumb_func
 2173              	RCC_AHB3PeriphClockLPModeCmd:
 2174              	.LFB146:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2175              		.loc 1 1518 0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 8
 2178              		@ frame_needed = 1, uses_anonymous_args = 0
 2179              		@ link register save eliminated.
 2180 0000 80B4     		push	{r7}
 2181              	.LCFI106:
 2182              		.cfi_def_cfa_offset 4
 2183              		.cfi_offset 7, -4
 2184 0002 83B0     		sub	sp, sp, #12
 2185              	.LCFI107:
 2186              		.cfi_def_cfa_offset 16
 2187 0004 00AF     		add	r7, sp, #0
 2188              	.LCFI108:
 2189              		.cfi_def_cfa_register 7
 2190 0006 7860     		str	r0, [r7, #4]
 2191 0008 0B46     		mov	r3, r1
 2192 000a FB70     		strb	r3, [r7, #3]
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2193              		.loc 1 1522 0
 2194 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2195 000e 002B     		cmp	r3, #0
 2196 0010 0CD0     		beq	.L81
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2197              		.loc 1 1524 0
 2198 0012 4FF46053 		mov	r3, #14336
 2199 0016 C4F20203 		movt	r3, 16386
 2200 001a 4FF46052 		mov	r2, #14336
 2201 001e C4F20202 		movt	r2, 16386
 2202 0022 916D     		ldr	r1, [r2, #88]
 2203 0024 7A68     		ldr	r2, [r7, #4]
 2204 0026 0A43     		orrs	r2, r2, r1
 2205 0028 9A65     		str	r2, [r3, #88]
 2206 002a 0CE0     		b	.L80
 2207              	.L81:
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2208              		.loc 1 1528 0
 2209 002c 4FF46053 		mov	r3, #14336
 2210 0030 C4F20203 		movt	r3, 16386
 2211 0034 4FF46052 		mov	r2, #14336
 2212 0038 C4F20202 		movt	r2, 16386
 2213 003c 916D     		ldr	r1, [r2, #88]
 2214 003e 7A68     		ldr	r2, [r7, #4]
 2215 0040 D243     		mvns	r2, r2
 2216 0042 0A40     		ands	r2, r2, r1
 2217 0044 9A65     		str	r2, [r3, #88]
 2218              	.L80:
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2219              		.loc 1 1530 0
 2220 0046 0C37     		adds	r7, r7, #12
 2221 0048 BD46     		mov	sp, r7
 2222              		@ sp needed
 2223 004a 5DF8047B 		ldr	r7, [sp], #4
 2224 004e 7047     		bx	lr
 2225              		.cfi_endproc
 2226              	.LFE146:
 2228              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2229              		.align	2
 2230              		.global	RCC_APB1PeriphClockLPModeCmd
 2231              		.thumb
 2232              		.thumb_func
 2234              	RCC_APB1PeriphClockLPModeCmd:
 2235              	.LFB147:
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2236              		.loc 1 1568 0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 8
 2239              		@ frame_needed = 1, uses_anonymous_args = 0
 2240              		@ link register save eliminated.
 2241 0000 80B4     		push	{r7}
 2242              	.LCFI109:
 2243              		.cfi_def_cfa_offset 4
 2244              		.cfi_offset 7, -4
 2245 0002 83B0     		sub	sp, sp, #12
 2246              	.LCFI110:
 2247              		.cfi_def_cfa_offset 16
 2248 0004 00AF     		add	r7, sp, #0
 2249              	.LCFI111:
 2250              		.cfi_def_cfa_register 7
 2251 0006 7860     		str	r0, [r7, #4]
 2252 0008 0B46     		mov	r3, r1
 2253 000a FB70     		strb	r3, [r7, #3]
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2254              		.loc 1 1572 0
 2255 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2256 000e 002B     		cmp	r3, #0
 2257 0010 0CD0     		beq	.L84
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2258              		.loc 1 1574 0
 2259 0012 4FF46053 		mov	r3, #14336
 2260 0016 C4F20203 		movt	r3, 16386
 2261 001a 4FF46052 		mov	r2, #14336
 2262 001e C4F20202 		movt	r2, 16386
 2263 0022 116E     		ldr	r1, [r2, #96]
 2264 0024 7A68     		ldr	r2, [r7, #4]
 2265 0026 0A43     		orrs	r2, r2, r1
 2266 0028 1A66     		str	r2, [r3, #96]
 2267 002a 0CE0     		b	.L83
 2268              	.L84:
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2269              		.loc 1 1578 0
 2270 002c 4FF46053 		mov	r3, #14336
 2271 0030 C4F20203 		movt	r3, 16386
 2272 0034 4FF46052 		mov	r2, #14336
 2273 0038 C4F20202 		movt	r2, 16386
 2274 003c 116E     		ldr	r1, [r2, #96]
 2275 003e 7A68     		ldr	r2, [r7, #4]
 2276 0040 D243     		mvns	r2, r2
 2277 0042 0A40     		ands	r2, r2, r1
 2278 0044 1A66     		str	r2, [r3, #96]
 2279              	.L83:
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2280              		.loc 1 1580 0
 2281 0046 0C37     		adds	r7, r7, #12
 2282 0048 BD46     		mov	sp, r7
 2283              		@ sp needed
 2284 004a 5DF8047B 		ldr	r7, [sp], #4
 2285 004e 7047     		bx	lr
 2286              		.cfi_endproc
 2287              	.LFE147:
 2289              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2290              		.align	2
 2291              		.global	RCC_APB2PeriphClockLPModeCmd
 2292              		.thumb
 2293              		.thumb_func
 2295              	RCC_APB2PeriphClockLPModeCmd:
 2296              	.LFB148:
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2297              		.loc 1 1608 0
 2298              		.cfi_startproc
 2299              		@ args = 0, pretend = 0, frame = 8
 2300              		@ frame_needed = 1, uses_anonymous_args = 0
 2301              		@ link register save eliminated.
 2302 0000 80B4     		push	{r7}
 2303              	.LCFI112:
 2304              		.cfi_def_cfa_offset 4
 2305              		.cfi_offset 7, -4
 2306 0002 83B0     		sub	sp, sp, #12
 2307              	.LCFI113:
 2308              		.cfi_def_cfa_offset 16
 2309 0004 00AF     		add	r7, sp, #0
 2310              	.LCFI114:
 2311              		.cfi_def_cfa_register 7
 2312 0006 7860     		str	r0, [r7, #4]
 2313 0008 0B46     		mov	r3, r1
 2314 000a FB70     		strb	r3, [r7, #3]
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2315              		.loc 1 1612 0
 2316 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2317 000e 002B     		cmp	r3, #0
 2318 0010 0CD0     		beq	.L87
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2319              		.loc 1 1614 0
 2320 0012 4FF46053 		mov	r3, #14336
 2321 0016 C4F20203 		movt	r3, 16386
 2322 001a 4FF46052 		mov	r2, #14336
 2323 001e C4F20202 		movt	r2, 16386
 2324 0022 516E     		ldr	r1, [r2, #100]
 2325 0024 7A68     		ldr	r2, [r7, #4]
 2326 0026 0A43     		orrs	r2, r2, r1
 2327 0028 5A66     		str	r2, [r3, #100]
 2328 002a 0CE0     		b	.L86
 2329              	.L87:
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2330              		.loc 1 1618 0
 2331 002c 4FF46053 		mov	r3, #14336
 2332 0030 C4F20203 		movt	r3, 16386
 2333 0034 4FF46052 		mov	r2, #14336
 2334 0038 C4F20202 		movt	r2, 16386
 2335 003c 516E     		ldr	r1, [r2, #100]
 2336 003e 7A68     		ldr	r2, [r7, #4]
 2337 0040 D243     		mvns	r2, r2
 2338 0042 0A40     		ands	r2, r2, r1
 2339 0044 5A66     		str	r2, [r3, #100]
 2340              	.L86:
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2341              		.loc 1 1620 0
 2342 0046 0C37     		adds	r7, r7, #12
 2343 0048 BD46     		mov	sp, r7
 2344              		@ sp needed
 2345 004a 5DF8047B 		ldr	r7, [sp], #4
 2346 004e 7047     		bx	lr
 2347              		.cfi_endproc
 2348              	.LFE148:
 2350              		.section	.text.RCC_ITConfig,"ax",%progbits
 2351              		.align	2
 2352              		.global	RCC_ITConfig
 2353              		.thumb
 2354              		.thumb_func
 2356              	RCC_ITConfig:
 2357              	.LFB149:
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2358              		.loc 1 1653 0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 8
 2361              		@ frame_needed = 1, uses_anonymous_args = 0
 2362              		@ link register save eliminated.
 2363 0000 80B4     		push	{r7}
 2364              	.LCFI115:
 2365              		.cfi_def_cfa_offset 4
 2366              		.cfi_offset 7, -4
 2367 0002 83B0     		sub	sp, sp, #12
 2368              	.LCFI116:
 2369              		.cfi_def_cfa_offset 16
 2370 0004 00AF     		add	r7, sp, #0
 2371              	.LCFI117:
 2372              		.cfi_def_cfa_register 7
 2373 0006 0246     		mov	r2, r0
 2374 0008 0B46     		mov	r3, r1
 2375 000a FA71     		strb	r2, [r7, #7]
 2376 000c BB71     		strb	r3, [r7, #6]
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2377              		.loc 1 1657 0
 2378 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2379 0010 002B     		cmp	r3, #0
 2380 0012 0ED0     		beq	.L90
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2381              		.loc 1 1660 0
 2382 0014 43F60D03 		movw	r3, #14349
 2383 0018 C4F20203 		movt	r3, 16386
 2384 001c 43F60D02 		movw	r2, #14349
 2385 0020 C4F20202 		movt	r2, 16386
 2386 0024 1278     		ldrb	r2, [r2]
 2387 0026 D1B2     		uxtb	r1, r2
 2388 0028 FA79     		ldrb	r2, [r7, #7]
 2389 002a 0A43     		orrs	r2, r2, r1
 2390 002c D2B2     		uxtb	r2, r2
 2391 002e 1A70     		strb	r2, [r3]
 2392 0030 0FE0     		b	.L89
 2393              	.L90:
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2394              		.loc 1 1665 0
 2395 0032 43F60D03 		movw	r3, #14349
 2396 0036 C4F20203 		movt	r3, 16386
 2397 003a 43F60D02 		movw	r2, #14349
 2398 003e C4F20202 		movt	r2, 16386
 2399 0042 1278     		ldrb	r2, [r2]
 2400 0044 D1B2     		uxtb	r1, r2
 2401 0046 FA79     		ldrb	r2, [r7, #7]
 2402 0048 D243     		mvns	r2, r2
 2403 004a D2B2     		uxtb	r2, r2
 2404 004c 0A40     		ands	r2, r2, r1
 2405 004e D2B2     		uxtb	r2, r2
 2406 0050 1A70     		strb	r2, [r3]
 2407              	.L89:
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2408              		.loc 1 1667 0
 2409 0052 0C37     		adds	r7, r7, #12
 2410 0054 BD46     		mov	sp, r7
 2411              		@ sp needed
 2412 0056 5DF8047B 		ldr	r7, [sp], #4
 2413 005a 7047     		bx	lr
 2414              		.cfi_endproc
 2415              	.LFE149:
 2417              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2418              		.align	2
 2419              		.global	RCC_GetFlagStatus
 2420              		.thumb
 2421              		.thumb_func
 2423              	RCC_GetFlagStatus:
 2424              	.LFB150:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2425              		.loc 1 1689 0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 24
 2428              		@ frame_needed = 1, uses_anonymous_args = 0
 2429              		@ link register save eliminated.
 2430 0000 80B4     		push	{r7}
 2431              	.LCFI118:
 2432              		.cfi_def_cfa_offset 4
 2433              		.cfi_offset 7, -4
 2434 0002 87B0     		sub	sp, sp, #28
 2435              	.LCFI119:
 2436              		.cfi_def_cfa_offset 32
 2437 0004 00AF     		add	r7, sp, #0
 2438              	.LCFI120:
 2439              		.cfi_def_cfa_register 7
 2440 0006 0346     		mov	r3, r0
 2441 0008 FB71     		strb	r3, [r7, #7]
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2442              		.loc 1 1690 0
 2443 000a 0023     		movs	r3, #0
 2444 000c FB60     		str	r3, [r7, #12]
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2445              		.loc 1 1691 0
 2446 000e 0023     		movs	r3, #0
 2447 0010 7B61     		str	r3, [r7, #20]
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2448              		.loc 1 1692 0
 2449 0012 0023     		movs	r3, #0
 2450 0014 FB74     		strb	r3, [r7, #19]
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2451              		.loc 1 1698 0
 2452 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2453 0018 5B09     		lsrs	r3, r3, #5
 2454 001a DBB2     		uxtb	r3, r3
 2455 001c FB60     		str	r3, [r7, #12]
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2456              		.loc 1 1699 0
 2457 001e FB68     		ldr	r3, [r7, #12]
 2458 0020 012B     		cmp	r3, #1
 2459 0022 06D1     		bne	.L93
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2460              		.loc 1 1701 0
 2461 0024 4FF46053 		mov	r3, #14336
 2462 0028 C4F20203 		movt	r3, 16386
 2463 002c 1B68     		ldr	r3, [r3]
 2464 002e 7B61     		str	r3, [r7, #20]
 2465 0030 0FE0     		b	.L94
 2466              	.L93:
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2467              		.loc 1 1703 0
 2468 0032 FB68     		ldr	r3, [r7, #12]
 2469 0034 022B     		cmp	r3, #2
 2470 0036 06D1     		bne	.L95
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2471              		.loc 1 1705 0
 2472 0038 4FF46053 		mov	r3, #14336
 2473 003c C4F20203 		movt	r3, 16386
 2474 0040 1B6F     		ldr	r3, [r3, #112]
 2475 0042 7B61     		str	r3, [r7, #20]
 2476 0044 05E0     		b	.L94
 2477              	.L95:
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2478              		.loc 1 1709 0
 2479 0046 4FF46053 		mov	r3, #14336
 2480 004a C4F20203 		movt	r3, 16386
 2481 004e 5B6F     		ldr	r3, [r3, #116]
 2482 0050 7B61     		str	r3, [r7, #20]
 2483              	.L94:
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2484              		.loc 1 1713 0
 2485 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2486 0054 03F01F03 		and	r3, r3, #31
 2487 0058 FB60     		str	r3, [r7, #12]
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2488              		.loc 1 1714 0
 2489 005a FB68     		ldr	r3, [r7, #12]
 2490 005c 7A69     		ldr	r2, [r7, #20]
 2491 005e 22FA03F3 		lsr	r3, r2, r3
 2492 0062 03F00103 		and	r3, r3, #1
 2493 0066 002B     		cmp	r3, #0
 2494 0068 02D0     		beq	.L96
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2495              		.loc 1 1716 0
 2496 006a 0123     		movs	r3, #1
 2497 006c FB74     		strb	r3, [r7, #19]
 2498 006e 01E0     		b	.L97
 2499              	.L96:
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2500              		.loc 1 1720 0
 2501 0070 0023     		movs	r3, #0
 2502 0072 FB74     		strb	r3, [r7, #19]
 2503              	.L97:
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2504              		.loc 1 1723 0
 2505 0074 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2506              		.loc 1 1724 0
 2507 0076 1846     		mov	r0, r3
 2508 0078 1C37     		adds	r7, r7, #28
 2509 007a BD46     		mov	sp, r7
 2510              		@ sp needed
 2511 007c 5DF8047B 		ldr	r7, [sp], #4
 2512 0080 7047     		bx	lr
 2513              		.cfi_endproc
 2514              	.LFE150:
 2516 0082 00BF     		.section	.text.RCC_ClearFlag,"ax",%progbits
 2517              		.align	2
 2518              		.global	RCC_ClearFlag
 2519              		.thumb
 2520              		.thumb_func
 2522              	RCC_ClearFlag:
 2523              	.LFB151:
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2524              		.loc 1 1734 0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 0
 2527              		@ frame_needed = 1, uses_anonymous_args = 0
 2528              		@ link register save eliminated.
 2529 0000 80B4     		push	{r7}
 2530              	.LCFI121:
 2531              		.cfi_def_cfa_offset 4
 2532              		.cfi_offset 7, -4
 2533 0002 00AF     		add	r7, sp, #0
 2534              	.LCFI122:
 2535              		.cfi_def_cfa_register 7
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2536              		.loc 1 1736 0
 2537 0004 4FF46053 		mov	r3, #14336
 2538 0008 C4F20203 		movt	r3, 16386
 2539 000c 4FF46052 		mov	r2, #14336
 2540 0010 C4F20202 		movt	r2, 16386
 2541 0014 526F     		ldr	r2, [r2, #116]
 2542 0016 42F08072 		orr	r2, r2, #16777216
 2543 001a 5A67     		str	r2, [r3, #116]
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2544              		.loc 1 1737 0
 2545 001c BD46     		mov	sp, r7
 2546              		@ sp needed
 2547 001e 5DF8047B 		ldr	r7, [sp], #4
 2548 0022 7047     		bx	lr
 2549              		.cfi_endproc
 2550              	.LFE151:
 2552              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2553              		.align	2
 2554              		.global	RCC_GetITStatus
 2555              		.thumb
 2556              		.thumb_func
 2558              	RCC_GetITStatus:
 2559              	.LFB152:
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2560              		.loc 1 1753 0
 2561              		.cfi_startproc
 2562              		@ args = 0, pretend = 0, frame = 16
 2563              		@ frame_needed = 1, uses_anonymous_args = 0
 2564              		@ link register save eliminated.
 2565 0000 80B4     		push	{r7}
 2566              	.LCFI123:
 2567              		.cfi_def_cfa_offset 4
 2568              		.cfi_offset 7, -4
 2569 0002 85B0     		sub	sp, sp, #20
 2570              	.LCFI124:
 2571              		.cfi_def_cfa_offset 24
 2572 0004 00AF     		add	r7, sp, #0
 2573              	.LCFI125:
 2574              		.cfi_def_cfa_register 7
 2575 0006 0346     		mov	r3, r0
 2576 0008 FB71     		strb	r3, [r7, #7]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2577              		.loc 1 1754 0
 2578 000a 0023     		movs	r3, #0
 2579 000c FB73     		strb	r3, [r7, #15]
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2580              		.loc 1 1760 0
 2581 000e 4FF46053 		mov	r3, #14336
 2582 0012 C4F20203 		movt	r3, 16386
 2583 0016 DA68     		ldr	r2, [r3, #12]
 2584 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2585 001a 1340     		ands	r3, r3, r2
 2586 001c 002B     		cmp	r3, #0
 2587 001e 02D0     		beq	.L101
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2588              		.loc 1 1762 0
 2589 0020 0123     		movs	r3, #1
 2590 0022 FB73     		strb	r3, [r7, #15]
 2591 0024 01E0     		b	.L102
 2592              	.L101:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2593              		.loc 1 1766 0
 2594 0026 0023     		movs	r3, #0
 2595 0028 FB73     		strb	r3, [r7, #15]
 2596              	.L102:
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2597              		.loc 1 1769 0
 2598 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2599              		.loc 1 1770 0
 2600 002c 1846     		mov	r0, r3
 2601 002e 1437     		adds	r7, r7, #20
 2602 0030 BD46     		mov	sp, r7
 2603              		@ sp needed
 2604 0032 5DF8047B 		ldr	r7, [sp], #4
 2605 0036 7047     		bx	lr
 2606              		.cfi_endproc
 2607              	.LFE152:
 2609              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2610              		.align	2
 2611              		.global	RCC_ClearITPendingBit
 2612              		.thumb
 2613              		.thumb_func
 2615              	RCC_ClearITPendingBit:
 2616              	.LFB153:
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2617              		.loc 1 1786 0
 2618              		.cfi_startproc
 2619              		@ args = 0, pretend = 0, frame = 8
 2620              		@ frame_needed = 1, uses_anonymous_args = 0
 2621              		@ link register save eliminated.
 2622 0000 80B4     		push	{r7}
 2623              	.LCFI126:
 2624              		.cfi_def_cfa_offset 4
 2625              		.cfi_offset 7, -4
 2626 0002 83B0     		sub	sp, sp, #12
 2627              	.LCFI127:
 2628              		.cfi_def_cfa_offset 16
 2629 0004 00AF     		add	r7, sp, #0
 2630              	.LCFI128:
 2631              		.cfi_def_cfa_register 7
 2632 0006 0346     		mov	r3, r0
 2633 0008 FB71     		strb	r3, [r7, #7]
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2634              		.loc 1 1792 0
 2635 000a 43F60E03 		movw	r3, #14350
 2636 000e C4F20203 		movt	r3, 16386
 2637 0012 FA79     		ldrb	r2, [r7, #7]
 2638 0014 1A70     		strb	r2, [r3]
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2639              		.loc 1 1793 0
 2640 0016 0C37     		adds	r7, r7, #12
 2641 0018 BD46     		mov	sp, r7
 2642              		@ sp needed
 2643 001a 5DF8047B 		ldr	r7, [sp], #4
 2644 001e 7047     		bx	lr
 2645              		.cfi_endproc
 2646              	.LFE153:
 2648              		.text
 2649              	.Letext0:
 2650              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2651              		.file 3 "/usr/include/newlib/stdint.h"
 2652              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2653              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 2654              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rcc.c
     /tmp/ccGzYsd4.s:20     .data.APBAHBPrescTable:0000000000000000 $d
     /tmp/ccGzYsd4.s:23     .data.APBAHBPrescTable:0000000000000000 APBAHBPrescTable
     /tmp/ccGzYsd4.s:41     .text.RCC_DeInit:0000000000000000 $t
     /tmp/ccGzYsd4.s:46     .text.RCC_DeInit:0000000000000000 RCC_DeInit
     /tmp/ccGzYsd4.s:111    .text.RCC_HSEConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:116    .text.RCC_HSEConfig:0000000000000000 RCC_HSEConfig
     /tmp/ccGzYsd4.s:155    .text.RCC_WaitForHSEStartUp:0000000000000000 $t
     /tmp/ccGzYsd4.s:160    .text.RCC_WaitForHSEStartUp:0000000000000000 RCC_WaitForHSEStartUp
     /tmp/ccGzYsd4.s:2423   .text.RCC_GetFlagStatus:0000000000000000 RCC_GetFlagStatus
     /tmp/ccGzYsd4.s:231    .text.RCC_AdjustHSICalibrationValue:0000000000000000 $t
     /tmp/ccGzYsd4.s:236    .text.RCC_AdjustHSICalibrationValue:0000000000000000 RCC_AdjustHSICalibrationValue
     /tmp/ccGzYsd4.s:288    .text.RCC_HSICmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:293    .text.RCC_HSICmd:0000000000000000 RCC_HSICmd
     /tmp/ccGzYsd4.s:327    .text.RCC_LSEConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:332    .text.RCC_LSEConfig:0000000000000000 RCC_LSEConfig
     /tmp/ccGzYsd4.s:396    .text.RCC_LSICmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:401    .text.RCC_LSICmd:0000000000000000 RCC_LSICmd
     /tmp/ccGzYsd4.s:435    .text.RCC_PLLConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:440    .text.RCC_PLLConfig:0000000000000000 RCC_PLLConfig
     /tmp/ccGzYsd4.s:491    .text.RCC_PLLCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:496    .text.RCC_PLLCmd:0000000000000000 RCC_PLLCmd
     /tmp/ccGzYsd4.s:530    .text.RCC_PLLI2SConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:535    .text.RCC_PLLI2SConfig:0000000000000000 RCC_PLLI2SConfig
     /tmp/ccGzYsd4.s:573    .text.RCC_PLLI2SCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:578    .text.RCC_PLLI2SCmd:0000000000000000 RCC_PLLI2SCmd
     /tmp/ccGzYsd4.s:612    .text.RCC_ClockSecuritySystemCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:617    .text.RCC_ClockSecuritySystemCmd:0000000000000000 RCC_ClockSecuritySystemCmd
     /tmp/ccGzYsd4.s:651    .text.RCC_MCO1Config:0000000000000000 $t
     /tmp/ccGzYsd4.s:656    .text.RCC_MCO1Config:0000000000000000 RCC_MCO1Config
     /tmp/ccGzYsd4.s:709    .text.RCC_MCO2Config:0000000000000000 $t
     /tmp/ccGzYsd4.s:714    .text.RCC_MCO2Config:0000000000000000 RCC_MCO2Config
     /tmp/ccGzYsd4.s:767    .text.RCC_SYSCLKConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:772    .text.RCC_SYSCLKConfig:0000000000000000 RCC_SYSCLKConfig
     /tmp/ccGzYsd4.s:822    .text.RCC_GetSYSCLKSource:0000000000000000 $t
     /tmp/ccGzYsd4.s:827    .text.RCC_GetSYSCLKSource:0000000000000000 RCC_GetSYSCLKSource
     /tmp/ccGzYsd4.s:858    .text.RCC_HCLKConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:863    .text.RCC_HCLKConfig:0000000000000000 RCC_HCLKConfig
     /tmp/ccGzYsd4.s:913    .text.RCC_PCLK1Config:0000000000000000 $t
     /tmp/ccGzYsd4.s:918    .text.RCC_PCLK1Config:0000000000000000 RCC_PCLK1Config
     /tmp/ccGzYsd4.s:968    .text.RCC_PCLK2Config:0000000000000000 $t
     /tmp/ccGzYsd4.s:973    .text.RCC_PCLK2Config:0000000000000000 RCC_PCLK2Config
     /tmp/ccGzYsd4.s:1024   .text.RCC_GetClocksFreq:0000000000000000 $t
     /tmp/ccGzYsd4.s:1029   .text.RCC_GetClocksFreq:0000000000000000 RCC_GetClocksFreq
     /tmp/ccGzYsd4.s:1247   .text.RCC_RTCCLKConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:1252   .text.RCC_RTCCLKConfig:0000000000000000 RCC_RTCCLKConfig
     /tmp/ccGzYsd4.s:1320   .text.RCC_RTCCLKCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1325   .text.RCC_RTCCLKCmd:0000000000000000 RCC_RTCCLKCmd
     /tmp/ccGzYsd4.s:1359   .text.RCC_BackupResetCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1364   .text.RCC_BackupResetCmd:0000000000000000 RCC_BackupResetCmd
     /tmp/ccGzYsd4.s:1398   .text.RCC_I2SCLKConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:1403   .text.RCC_I2SCLKConfig:0000000000000000 RCC_I2SCLKConfig
     /tmp/ccGzYsd4.s:1436   .text.RCC_AHB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1441   .text.RCC_AHB1PeriphClockCmd:0000000000000000 RCC_AHB1PeriphClockCmd
     /tmp/ccGzYsd4.s:1497   .text.RCC_AHB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1502   .text.RCC_AHB2PeriphClockCmd:0000000000000000 RCC_AHB2PeriphClockCmd
     /tmp/ccGzYsd4.s:1558   .text.RCC_AHB3PeriphClockCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1563   .text.RCC_AHB3PeriphClockCmd:0000000000000000 RCC_AHB3PeriphClockCmd
     /tmp/ccGzYsd4.s:1619   .text.RCC_APB1PeriphClockCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1624   .text.RCC_APB1PeriphClockCmd:0000000000000000 RCC_APB1PeriphClockCmd
     /tmp/ccGzYsd4.s:1680   .text.RCC_APB2PeriphClockCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1685   .text.RCC_APB2PeriphClockCmd:0000000000000000 RCC_APB2PeriphClockCmd
     /tmp/ccGzYsd4.s:1741   .text.RCC_AHB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1746   .text.RCC_AHB1PeriphResetCmd:0000000000000000 RCC_AHB1PeriphResetCmd
     /tmp/ccGzYsd4.s:1802   .text.RCC_AHB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1807   .text.RCC_AHB2PeriphResetCmd:0000000000000000 RCC_AHB2PeriphResetCmd
     /tmp/ccGzYsd4.s:1863   .text.RCC_AHB3PeriphResetCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1868   .text.RCC_AHB3PeriphResetCmd:0000000000000000 RCC_AHB3PeriphResetCmd
     /tmp/ccGzYsd4.s:1924   .text.RCC_APB1PeriphResetCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1929   .text.RCC_APB1PeriphResetCmd:0000000000000000 RCC_APB1PeriphResetCmd
     /tmp/ccGzYsd4.s:1985   .text.RCC_APB2PeriphResetCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:1990   .text.RCC_APB2PeriphResetCmd:0000000000000000 RCC_APB2PeriphResetCmd
     /tmp/ccGzYsd4.s:2046   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:2051   .text.RCC_AHB1PeriphClockLPModeCmd:0000000000000000 RCC_AHB1PeriphClockLPModeCmd
     /tmp/ccGzYsd4.s:2107   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:2112   .text.RCC_AHB2PeriphClockLPModeCmd:0000000000000000 RCC_AHB2PeriphClockLPModeCmd
     /tmp/ccGzYsd4.s:2168   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:2173   .text.RCC_AHB3PeriphClockLPModeCmd:0000000000000000 RCC_AHB3PeriphClockLPModeCmd
     /tmp/ccGzYsd4.s:2229   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:2234   .text.RCC_APB1PeriphClockLPModeCmd:0000000000000000 RCC_APB1PeriphClockLPModeCmd
     /tmp/ccGzYsd4.s:2290   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 $t
     /tmp/ccGzYsd4.s:2295   .text.RCC_APB2PeriphClockLPModeCmd:0000000000000000 RCC_APB2PeriphClockLPModeCmd
     /tmp/ccGzYsd4.s:2351   .text.RCC_ITConfig:0000000000000000 $t
     /tmp/ccGzYsd4.s:2356   .text.RCC_ITConfig:0000000000000000 RCC_ITConfig
     /tmp/ccGzYsd4.s:2418   .text.RCC_GetFlagStatus:0000000000000000 $t
     /tmp/ccGzYsd4.s:2517   .text.RCC_ClearFlag:0000000000000000 $t
     /tmp/ccGzYsd4.s:2522   .text.RCC_ClearFlag:0000000000000000 RCC_ClearFlag
     /tmp/ccGzYsd4.s:2553   .text.RCC_GetITStatus:0000000000000000 $t
     /tmp/ccGzYsd4.s:2558   .text.RCC_GetITStatus:0000000000000000 RCC_GetITStatus
     /tmp/ccGzYsd4.s:2610   .text.RCC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccGzYsd4.s:2615   .text.RCC_ClearITPendingBit:0000000000000000 RCC_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
