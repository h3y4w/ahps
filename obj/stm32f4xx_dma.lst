   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_dma.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.DMA_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	DMA_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	DMA_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  28              		.loc 1 189 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  34              		.loc 1 194 0
  35 0000 0368     		ldr	r3, [r0]
  36 0002 23F00103 		bic	r3, r3, #1
  37 0006 0360     		str	r3, [r0]
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  38              		.loc 1 197 0
  39 0008 0023     		movs	r3, #0
  40 000a 0360     		str	r3, [r0]
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  41              		.loc 1 200 0
  42 000c 4360     		str	r3, [r0, #4]
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  43              		.loc 1 203 0
  44 000e 8360     		str	r3, [r0, #8]
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  45              		.loc 1 206 0
  46 0010 C360     		str	r3, [r0, #12]
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  47              		.loc 1 209 0
  48 0012 0361     		str	r3, [r0, #16]
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  49              		.loc 1 212 0
  50 0014 2123     		movs	r3, #33
  51 0016 4361     		str	r3, [r0, #20]
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  52              		.loc 1 215 0
  53 0018 46F21003 		movw	r3, #24592
  54 001c C4F20203 		movt	r3, 16386
  55 0020 9842     		cmp	r0, r3
  56 0022 06D1     		bne	.L2
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  57              		.loc 1 218 0
  58 0024 4FF4C043 		mov	r3, #24576
  59 0028 C4F20203 		movt	r3, 16386
  60 002c 3D22     		movs	r2, #61
  61 002e 9A60     		str	r2, [r3, #8]
  62 0030 7047     		bx	lr
  63              	.L2:
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  64              		.loc 1 220 0
  65 0032 46F22803 		movw	r3, #24616
  66 0036 C4F20203 		movt	r3, 16386
  67 003a 9842     		cmp	r0, r3
  68 003c 07D1     		bne	.L4
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
  69              		.loc 1 223 0
  70 003e 4FF4C043 		mov	r3, #24576
  71 0042 C4F20203 		movt	r3, 16386
  72 0046 4FF47462 		mov	r2, #3904
  73 004a 9A60     		str	r2, [r3, #8]
  74 004c 7047     		bx	lr
  75              	.L4:
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
  76              		.loc 1 225 0
  77 004e 46F24003 		movw	r3, #24640
  78 0052 C4F20203 		movt	r3, 16386
  79 0056 9842     		cmp	r0, r3
  80 0058 07D1     		bne	.L5
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
  81              		.loc 1 228 0
  82 005a 4FF4C043 		mov	r3, #24576
  83 005e C4F20203 		movt	r3, 16386
  84 0062 4FF47412 		mov	r2, #3997696
  85 0066 9A60     		str	r2, [r3, #8]
  86 0068 7047     		bx	lr
  87              	.L5:
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
  88              		.loc 1 230 0
  89 006a 46F25803 		movw	r3, #24664
  90 006e C4F20203 		movt	r3, 16386
  91 0072 9842     		cmp	r0, r3
  92 0074 07D1     		bne	.L6
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
  93              		.loc 1 233 0
  94 0076 4FF4C043 		mov	r3, #24576
  95 007a C4F20203 		movt	r3, 16386
  96 007e 4FF07462 		mov	r2, #255852544
  97 0082 9A60     		str	r2, [r3, #8]
  98 0084 7047     		bx	lr
  99              	.L6:
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 100              		.loc 1 235 0
 101 0086 46F27003 		movw	r3, #24688
 102 008a C4F20203 		movt	r3, 16386
 103 008e 9842     		cmp	r0, r3
 104 0090 08D1     		bne	.L7
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 105              		.loc 1 238 0
 106 0092 4FF4C043 		mov	r3, #24576
 107 0096 C4F20203 		movt	r3, 16386
 108 009a 3D22     		movs	r2, #61
 109 009c C2F20002 		movt	r2, 8192
 110 00a0 DA60     		str	r2, [r3, #12]
 111 00a2 7047     		bx	lr
 112              	.L7:
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 113              		.loc 1 240 0
 114 00a4 46F28803 		movw	r3, #24712
 115 00a8 C4F20203 		movt	r3, 16386
 116 00ac 9842     		cmp	r0, r3
 117 00ae 09D1     		bne	.L8
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 118              		.loc 1 243 0
 119 00b0 4FF4C043 		mov	r3, #24576
 120 00b4 C4F20203 		movt	r3, 16386
 121 00b8 4FF47462 		mov	r2, #3904
 122 00bc C2F20002 		movt	r2, 8192
 123 00c0 DA60     		str	r2, [r3, #12]
 124 00c2 7047     		bx	lr
 125              	.L8:
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 126              		.loc 1 245 0
 127 00c4 46F2A003 		movw	r3, #24736
 128 00c8 C4F20203 		movt	r3, 16386
 129 00cc 9842     		cmp	r0, r3
 130 00ce 08D1     		bne	.L9
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 131              		.loc 1 248 0
 132 00d0 4FF4C043 		mov	r3, #24576
 133 00d4 C4F20203 		movt	r3, 16386
 134 00d8 0022     		movs	r2, #0
 135 00da C2F23D02 		movt	r2, 8253
 136 00de DA60     		str	r2, [r3, #12]
 137 00e0 7047     		bx	lr
 138              	.L9:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 139              		.loc 1 250 0
 140 00e2 46F2B803 		movw	r3, #24760
 141 00e6 C4F20203 		movt	r3, 16386
 142 00ea 9842     		cmp	r0, r3
 143 00ec 07D1     		bne	.L10
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 144              		.loc 1 253 0
 145 00ee 4FF4C043 		mov	r3, #24576
 146 00f2 C4F20203 		movt	r3, 16386
 147 00f6 4FF03D52 		mov	r2, #792723456
 148 00fa DA60     		str	r2, [r3, #12]
 149 00fc 7047     		bx	lr
 150              	.L10:
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 151              		.loc 1 255 0
 152 00fe 46F21043 		movw	r3, #25616
 153 0102 C4F20203 		movt	r3, 16386
 154 0106 9842     		cmp	r0, r3
 155 0108 06D1     		bne	.L11
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 156              		.loc 1 258 0
 157 010a 4FF4C843 		mov	r3, #25600
 158 010e C4F20203 		movt	r3, 16386
 159 0112 3D22     		movs	r2, #61
 160 0114 9A60     		str	r2, [r3, #8]
 161 0116 7047     		bx	lr
 162              	.L11:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 163              		.loc 1 260 0
 164 0118 46F22843 		movw	r3, #25640
 165 011c C4F20203 		movt	r3, 16386
 166 0120 9842     		cmp	r0, r3
 167 0122 07D1     		bne	.L12
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 168              		.loc 1 263 0
 169 0124 4FF4C843 		mov	r3, #25600
 170 0128 C4F20203 		movt	r3, 16386
 171 012c 4FF47462 		mov	r2, #3904
 172 0130 9A60     		str	r2, [r3, #8]
 173 0132 7047     		bx	lr
 174              	.L12:
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 175              		.loc 1 265 0
 176 0134 46F24043 		movw	r3, #25664
 177 0138 C4F20203 		movt	r3, 16386
 178 013c 9842     		cmp	r0, r3
 179 013e 07D1     		bne	.L13
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 180              		.loc 1 268 0
 181 0140 4FF4C843 		mov	r3, #25600
 182 0144 C4F20203 		movt	r3, 16386
 183 0148 4FF47412 		mov	r2, #3997696
 184 014c 9A60     		str	r2, [r3, #8]
 185 014e 7047     		bx	lr
 186              	.L13:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 187              		.loc 1 270 0
 188 0150 46F25843 		movw	r3, #25688
 189 0154 C4F20203 		movt	r3, 16386
 190 0158 9842     		cmp	r0, r3
 191 015a 07D1     		bne	.L14
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 192              		.loc 1 273 0
 193 015c 4FF4C843 		mov	r3, #25600
 194 0160 C4F20203 		movt	r3, 16386
 195 0164 4FF07462 		mov	r2, #255852544
 196 0168 9A60     		str	r2, [r3, #8]
 197 016a 7047     		bx	lr
 198              	.L14:
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 199              		.loc 1 275 0
 200 016c 46F27043 		movw	r3, #25712
 201 0170 C4F20203 		movt	r3, 16386
 202 0174 9842     		cmp	r0, r3
 203 0176 08D1     		bne	.L15
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 204              		.loc 1 278 0
 205 0178 4FF4C843 		mov	r3, #25600
 206 017c C4F20203 		movt	r3, 16386
 207 0180 3D22     		movs	r2, #61
 208 0182 C2F20002 		movt	r2, 8192
 209 0186 DA60     		str	r2, [r3, #12]
 210 0188 7047     		bx	lr
 211              	.L15:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 212              		.loc 1 280 0
 213 018a 46F28843 		movw	r3, #25736
 214 018e C4F20203 		movt	r3, 16386
 215 0192 9842     		cmp	r0, r3
 216 0194 09D1     		bne	.L16
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 217              		.loc 1 283 0
 218 0196 4FF4C843 		mov	r3, #25600
 219 019a C4F20203 		movt	r3, 16386
 220 019e 4FF47462 		mov	r2, #3904
 221 01a2 C2F20002 		movt	r2, 8192
 222 01a6 DA60     		str	r2, [r3, #12]
 223 01a8 7047     		bx	lr
 224              	.L16:
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 225              		.loc 1 285 0
 226 01aa 46F2A043 		movw	r3, #25760
 227 01ae C4F20203 		movt	r3, 16386
 228 01b2 9842     		cmp	r0, r3
 229 01b4 08D1     		bne	.L17
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 230              		.loc 1 288 0
 231 01b6 4FF4C843 		mov	r3, #25600
 232 01ba C4F20203 		movt	r3, 16386
 233 01be 0022     		movs	r2, #0
 234 01c0 C2F23D02 		movt	r2, 8253
 235 01c4 DA60     		str	r2, [r3, #12]
 236 01c6 7047     		bx	lr
 237              	.L17:
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 238              		.loc 1 292 0
 239 01c8 46F2B843 		movw	r3, #25784
 240 01cc C4F20203 		movt	r3, 16386
 241 01d0 9842     		cmp	r0, r3
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 242              		.loc 1 295 0
 243 01d2 01BF     		itttt	eq
 244 01d4 4FF4C843 		moveq	r3, #25600
 245 01d8 C4F20203 		movteq	r3, 16386
 246 01dc 4FF03D52 		moveq	r2, #792723456
 247 01e0 DA60     		streq	r2, [r3, #12]
 248 01e2 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE110:
 252              		.section	.text.DMA_Init,"ax",%progbits
 253              		.align	2
 254              		.global	DMA_Init
 255              		.thumb
 256              		.thumb_func
 258              	DMA_Init:
 259              	.LFB111:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 260              		.loc 1 312 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265              	.LVL1:
 266 0000 10B4     		push	{r4}
 267              	.LCFI0:
 268              		.cfi_def_cfa_offset 4
 269              		.cfi_offset 4, -4
 270              	.LVL2:
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 271              		.loc 1 333 0
 272 0002 0268     		ldr	r2, [r0]
 273              	.LVL3:
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 274              		.loc 1 336 0
 275 0004 48F23F03 		movw	r3, #32831
 276 0008 CFF21C03 		movt	r3, 61468
 277              	.LVL4:
 278 000c 1340     		ands	r3, r3, r2
 279              	.LVL5:
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 280              		.loc 1 352 0
 281 000e 0C68     		ldr	r4, [r1]
 282 0010 CA68     		ldr	r2, [r1, #12]
 283 0012 1443     		orrs	r4, r4, r2
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 284              		.loc 1 353 0
 285 0014 4A69     		ldr	r2, [r1, #20]
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 286              		.loc 1 352 0
 287 0016 1443     		orrs	r4, r4, r2
 288              		.loc 1 353 0
 289 0018 8A69     		ldr	r2, [r1, #24]
 290 001a 1443     		orrs	r4, r4, r2
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 291              		.loc 1 354 0
 292 001c CA69     		ldr	r2, [r1, #28]
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 293              		.loc 1 353 0
 294 001e 1443     		orrs	r4, r4, r2
 295              		.loc 1 354 0
 296 0020 0A6A     		ldr	r2, [r1, #32]
 297 0022 1443     		orrs	r4, r4, r2
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 298              		.loc 1 355 0
 299 0024 4A6A     		ldr	r2, [r1, #36]
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 300              		.loc 1 354 0
 301 0026 1443     		orrs	r4, r4, r2
 302              		.loc 1 355 0
 303 0028 8A6A     		ldr	r2, [r1, #40]
 304 002a 1443     		orrs	r4, r4, r2
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 305              		.loc 1 356 0
 306 002c 4A6B     		ldr	r2, [r1, #52]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 307              		.loc 1 355 0
 308 002e 1443     		orrs	r4, r4, r2
 309              		.loc 1 356 0
 310 0030 8A6B     		ldr	r2, [r1, #56]
 311 0032 2243     		orrs	r2, r2, r4
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 312              		.loc 1 352 0
 313 0034 1343     		orrs	r3, r3, r2
 314              	.LVL6:
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 315              		.loc 1 359 0
 316 0036 0360     		str	r3, [r0]
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 317              		.loc 1 363 0
 318 0038 4469     		ldr	r4, [r0, #20]
 319              	.LVL7:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 320              		.loc 1 366 0
 321 003a 24F00704 		bic	r4, r4, #7
 322              	.LVL8:
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 323              		.loc 1 371 0
 324 003e CA6A     		ldr	r2, [r1, #44]
 325 0040 0B6B     		ldr	r3, [r1, #48]
 326 0042 1343     		orrs	r3, r3, r2
 327 0044 2343     		orrs	r3, r3, r4
 328              	.LVL9:
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 329              		.loc 1 374 0
 330 0046 4361     		str	r3, [r0, #20]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 331              		.loc 1 378 0
 332 0048 0B69     		ldr	r3, [r1, #16]
 333              	.LVL10:
 334 004a 4360     		str	r3, [r0, #4]
 335              	.LVL11:
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 336              		.loc 1 382 0
 337 004c 4B68     		ldr	r3, [r1, #4]
 338 004e 8360     		str	r3, [r0, #8]
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 339              		.loc 1 386 0
 340 0050 8B68     		ldr	r3, [r1, #8]
 341 0052 C360     		str	r3, [r0, #12]
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 342              		.loc 1 387 0
 343 0054 5DF8044B 		ldr	r4, [sp], #4
 344 0058 7047     		bx	lr
 345              		.cfi_endproc
 346              	.LFE111:
 348 005a 00BF     		.section	.text.DMA_StructInit,"ax",%progbits
 349              		.align	2
 350              		.global	DMA_StructInit
 351              		.thumb
 352              		.thumb_func
 354              	DMA_StructInit:
 355              	.LFB112:
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 356              		.loc 1 396 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              		@ link register save eliminated.
 361              	.LVL12:
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 362              		.loc 1 399 0
 363 0000 0023     		movs	r3, #0
 364 0002 0360     		str	r3, [r0]
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 365              		.loc 1 402 0
 366 0004 4360     		str	r3, [r0, #4]
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 367              		.loc 1 405 0
 368 0006 8360     		str	r3, [r0, #8]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 369              		.loc 1 408 0
 370 0008 C360     		str	r3, [r0, #12]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 371              		.loc 1 411 0
 372 000a 0361     		str	r3, [r0, #16]
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 373              		.loc 1 414 0
 374 000c 4361     		str	r3, [r0, #20]
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 375              		.loc 1 417 0
 376 000e 8361     		str	r3, [r0, #24]
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 377              		.loc 1 420 0
 378 0010 C361     		str	r3, [r0, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 379              		.loc 1 423 0
 380 0012 0362     		str	r3, [r0, #32]
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 381              		.loc 1 426 0
 382 0014 4362     		str	r3, [r0, #36]
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 383              		.loc 1 429 0
 384 0016 8362     		str	r3, [r0, #40]
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 385              		.loc 1 432 0
 386 0018 C362     		str	r3, [r0, #44]
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 387              		.loc 1 435 0
 388 001a 0363     		str	r3, [r0, #48]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 389              		.loc 1 438 0
 390 001c 4363     		str	r3, [r0, #52]
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 391              		.loc 1 441 0
 392 001e 8363     		str	r3, [r0, #56]
 393 0020 7047     		bx	lr
 394              		.cfi_endproc
 395              	.LFE112:
 397 0022 00BF     		.section	.text.DMA_Cmd,"ax",%progbits
 398              		.align	2
 399              		.global	DMA_Cmd
 400              		.thumb
 401              		.thumb_func
 403              	DMA_Cmd:
 404              	.LFB113:
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 405              		.loc 1 471 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 410              	.LVL13:
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 411              		.loc 1 476 0
 412 0000 21B1     		cbz	r1, .L21
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 413              		.loc 1 479 0
 414 0002 0368     		ldr	r3, [r0]
 415 0004 43F00103 		orr	r3, r3, #1
 416 0008 0360     		str	r3, [r0]
 417 000a 7047     		bx	lr
 418              	.L21:
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 419              		.loc 1 484 0
 420 000c 0368     		ldr	r3, [r0]
 421 000e 23F00103 		bic	r3, r3, #1
 422 0012 0360     		str	r3, [r0]
 423 0014 7047     		bx	lr
 424              		.cfi_endproc
 425              	.LFE113:
 427 0016 00BF     		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 428              		.align	2
 429              		.global	DMA_PeriphIncOffsetSizeConfig
 430              		.thumb
 431              		.thumb_func
 433              	DMA_PeriphIncOffsetSizeConfig:
 434              	.LFB114:
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 435              		.loc 1 507 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 0, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440              	.LVL14:
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 441              		.loc 1 513 0
 442 0000 21B1     		cbz	r1, .L24
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 443              		.loc 1 516 0
 444 0002 0368     		ldr	r3, [r0]
 445 0004 43F40043 		orr	r3, r3, #32768
 446 0008 0360     		str	r3, [r0]
 447 000a 7047     		bx	lr
 448              	.L24:
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 449              		.loc 1 521 0
 450 000c 0368     		ldr	r3, [r0]
 451 000e 23F40043 		bic	r3, r3, #32768
 452 0012 0360     		str	r3, [r0]
 453 0014 7047     		bx	lr
 454              		.cfi_endproc
 455              	.LFE114:
 457 0016 00BF     		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 458              		.align	2
 459              		.global	DMA_FlowControllerConfig
 460              		.thumb
 461              		.thumb_func
 463              	DMA_FlowControllerConfig:
 464              	.LFB115:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 465              		.loc 1 543 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470              	.LVL15:
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 471              		.loc 1 549 0
 472 0000 21B1     		cbz	r1, .L27
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 473              		.loc 1 552 0
 474 0002 0368     		ldr	r3, [r0]
 475 0004 43F02003 		orr	r3, r3, #32
 476 0008 0360     		str	r3, [r0]
 477 000a 7047     		bx	lr
 478              	.L27:
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 479              		.loc 1 557 0
 480 000c 0368     		ldr	r3, [r0]
 481 000e 23F02003 		bic	r3, r3, #32
 482 0012 0360     		str	r3, [r0]
 483 0014 7047     		bx	lr
 484              		.cfi_endproc
 485              	.LFE115:
 487 0016 00BF     		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 488              		.align	2
 489              		.global	DMA_SetCurrDataCounter
 490              		.thumb
 491              		.thumb_func
 493              	DMA_SetCurrDataCounter:
 494              	.LFB116:
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 495              		.loc 1 627 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 0, uses_anonymous_args = 0
 499              		@ link register save eliminated.
 500              	.LVL16:
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 501              		.loc 1 632 0
 502 0000 4160     		str	r1, [r0, #4]
 503 0002 7047     		bx	lr
 504              		.cfi_endproc
 505              	.LFE116:
 507              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 508              		.align	2
 509              		.global	DMA_GetCurrDataCounter
 510              		.thumb
 511              		.thumb_func
 513              	DMA_GetCurrDataCounter:
 514              	.LFB117:
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 515              		.loc 1 642 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520              	.LVL17:
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 521              		.loc 1 647 0
 522 0000 4068     		ldr	r0, [r0, #4]
 523              	.LVL18:
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 524              		.loc 1 648 0
 525 0002 80B2     		uxth	r0, r0
 526 0004 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE117:
 530 0006 00BF     		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 531              		.align	2
 532              		.global	DMA_DoubleBufferModeConfig
 533              		.thumb
 534              		.thumb_func
 536              	DMA_DoubleBufferModeConfig:
 537              	.LFB118:
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 538              		.loc 1 720 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 543              	.LVL19:
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 544              		.loc 1 725 0
 545 0000 22B1     		cbz	r2, .L32
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 546              		.loc 1 728 0
 547 0002 0368     		ldr	r3, [r0]
 548 0004 43F40023 		orr	r3, r3, #524288
 549 0008 0360     		str	r3, [r0]
 550 000a 03E0     		b	.L33
 551              	.L32:
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 552              		.loc 1 733 0
 553 000c 0368     		ldr	r3, [r0]
 554 000e 23F40023 		bic	r3, r3, #524288
 555 0012 0360     		str	r3, [r0]
 556              	.L33:
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 557              		.loc 1 737 0
 558 0014 0161     		str	r1, [r0, #16]
 559 0016 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE118:
 563              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 564              		.align	2
 565              		.global	DMA_DoubleBufferModeCmd
 566              		.thumb
 567              		.thumb_func
 569              	DMA_DoubleBufferModeCmd:
 570              	.LFB119:
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 571              		.loc 1 750 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576              	.LVL20:
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 577              		.loc 1 756 0
 578 0000 21B1     		cbz	r1, .L35
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 579              		.loc 1 759 0
 580 0002 0368     		ldr	r3, [r0]
 581 0004 43F48023 		orr	r3, r3, #262144
 582 0008 0360     		str	r3, [r0]
 583 000a 7047     		bx	lr
 584              	.L35:
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 585              		.loc 1 764 0
 586 000c 0368     		ldr	r3, [r0]
 587 000e 23F48023 		bic	r3, r3, #262144
 588 0012 0360     		str	r3, [r0]
 589 0014 7047     		bx	lr
 590              		.cfi_endproc
 591              	.LFE119:
 593 0016 00BF     		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 594              		.align	2
 595              		.global	DMA_MemoryTargetConfig
 596              		.thumb
 597              		.thumb_func
 599              	DMA_MemoryTargetConfig:
 600              	.LFB120:
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 601              		.loc 1 792 0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
 606              	.LVL21:
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 607              		.loc 1 798 0
 608 0000 0AB1     		cbz	r2, .L38
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 609              		.loc 1 801 0
 610 0002 0161     		str	r1, [r0, #16]
 611 0004 7047     		bx	lr
 612              	.L38:
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 613              		.loc 1 806 0
 614 0006 C160     		str	r1, [r0, #12]
 615 0008 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE120:
 619 000a 00BF     		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 620              		.align	2
 621              		.global	DMA_GetCurrentMemoryTarget
 622              		.thumb
 623              		.thumb_func
 625              	DMA_GetCurrentMemoryTarget:
 626              	.LFB121:
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 627              		.loc 1 817 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 0
 630              		@ frame_needed = 0, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632              	.LVL22:
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 633              		.loc 1 824 0
 634 0000 0068     		ldr	r0, [r0]
 635              	.LVL23:
 636 0002 00F40020 		and	r0, r0, #524288
 637              	.LVL24:
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 638              		.loc 1 835 0
 639 0006 0030     		adds	r0, r0, #0
 640 0008 18BF     		it	ne
 641 000a 0120     		movne	r0, #1
 642              	.LVL25:
 643 000c 7047     		bx	lr
 644              		.cfi_endproc
 645              	.LFE121:
 647 000e 00BF     		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 648              		.align	2
 649              		.global	DMA_GetCmdStatus
 650              		.thumb
 651              		.thumb_func
 653              	DMA_GetCmdStatus:
 654              	.LFB122:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 655              		.loc 1 926 0
 656              		.cfi_startproc
 657              		@ args = 0, pretend = 0, frame = 0
 658              		@ frame_needed = 0, uses_anonymous_args = 0
 659              		@ link register save eliminated.
 660              	.LVL26:
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 661              		.loc 1 932 0
 662 0000 0068     		ldr	r0, [r0]
 663              	.LVL27:
 664 0002 00F00100 		and	r0, r0, #1
 665              	.LVL28:
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 666              		.loc 1 944 0
 667 0006 7047     		bx	lr
 668              		.cfi_endproc
 669              	.LFE122:
 671              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 672              		.align	2
 673              		.global	DMA_GetFIFOStatus
 674              		.thumb
 675              		.thumb_func
 677              	DMA_GetFIFOStatus:
 678              	.LFB123:
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 679              		.loc 1 960 0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 684              	.LVL29:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 685              		.loc 1 967 0
 686 0000 4069     		ldr	r0, [r0, #20]
 687              	.LVL30:
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 688              		.loc 1 970 0
 689 0002 00F03800 		and	r0, r0, #56
 690              	.LVL31:
 691 0006 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE123:
 695              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 696              		.align	2
 697              		.global	DMA_GetFlagStatus
 698              		.thumb
 699              		.thumb_func
 701              	DMA_GetFlagStatus:
 702              	.LFB124:
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 703              		.loc 1 987 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708              	.LVL32:
 709 0000 10B4     		push	{r4}
 710              	.LCFI1:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 4, -4
 713              	.LVL33:
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 714              		.loc 1 997 0
 715 0002 46F20F44 		movw	r4, #25615
 716 0006 C4F20204 		movt	r4, 16386
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 717              		.loc 1 1000 0
 718 000a 4FF4C842 		mov	r2, #25600
 719 000e C4F20202 		movt	r2, 16386
 720 0012 4FF4C043 		mov	r3, #24576
 721 0016 C4F20203 		movt	r3, 16386
 722 001a A042     		cmp	r0, r4
 723 001c 88BF     		it	hi
 724 001e 1346     		movhi	r3, r2
 725              	.LVL34:
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 726              		.loc 1 1009 0
 727 0020 11F0005F 		tst	r1, #536870912
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 728              		.loc 1 1012 0
 729 0024 14BF     		ite	ne
 730 0026 5B68     		ldrne	r3, [r3, #4]
 731              	.LVL35:
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 732              		.loc 1 1017 0
 733 0028 1B68     		ldreq	r3, [r3]
 734              	.LVL36:
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 735              		.loc 1 1021 0
 736 002a 23F0F023 		bic	r3, r3, #-268374016
 737              	.LVL37:
 738 002e 23F08213 		bic	r3, r3, #8519810
 739              	.LVL38:
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 740              		.loc 1 1024 0
 741 0032 03EA0100 		and	r0, r3, r1
 742              	.LVL39:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 743              		.loc 1 1037 0
 744 0036 0030     		adds	r0, r0, #0
 745 0038 18BF     		it	ne
 746 003a 0120     		movne	r0, #1
 747              	.LVL40:
 748 003c 5DF8044B 		ldr	r4, [sp], #4
 749 0040 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE124:
 753 0042 00BF     		.section	.text.DMA_ClearFlag,"ax",%progbits
 754              		.align	2
 755              		.global	DMA_ClearFlag
 756              		.thumb
 757              		.thumb_func
 759              	DMA_ClearFlag:
 760              	.LFB125:
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 761              		.loc 1 1054 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 0
 764              		@ frame_needed = 0, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766              	.LVL41:
 767 0000 10B4     		push	{r4}
 768              	.LCFI2:
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 4, -4
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 771              		.loc 1 1062 0
 772 0002 46F20F44 		movw	r4, #25615
 773 0006 C4F20204 		movt	r4, 16386
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 774              		.loc 1 1065 0
 775 000a 4FF4C842 		mov	r2, #25600
 776 000e C4F20202 		movt	r2, 16386
 777 0012 4FF4C043 		mov	r3, #24576
 778 0016 C4F20203 		movt	r3, 16386
 779 001a A042     		cmp	r0, r4
 780 001c 88BF     		it	hi
 781 001e 1346     		movhi	r3, r2
 782              	.LVL42:
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 783              		.loc 1 1074 0
 784 0020 11F0005F 		tst	r1, #536870912
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 785              		.loc 1 1077 0
 786 0024 21F0F021 		bic	r1, r1, #-268374016
 787              	.LVL43:
 788 0028 21F08211 		bic	r1, r1, #8519810
 789 002c 14BF     		ite	ne
 790 002e D960     		strne	r1, [r3, #12]
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 791              		.loc 1 1082 0
 792 0030 9960     		streq	r1, [r3, #8]
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 793              		.loc 1 1084 0
 794 0032 5DF8044B 		ldr	r4, [sp], #4
 795 0036 7047     		bx	lr
 796              		.cfi_endproc
 797              	.LFE125:
 799              		.section	.text.DMA_ITConfig,"ax",%progbits
 800              		.align	2
 801              		.global	DMA_ITConfig
 802              		.thumb
 803              		.thumb_func
 805              	DMA_ITConfig:
 806              	.LFB126:
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 807              		.loc 1 1101 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 0
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 812              	.LVL44:
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 813              		.loc 1 1108 0
 814 0000 11F0800F 		tst	r1, #128
 815 0004 09D0     		beq	.L60
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 816              		.loc 1 1110 0
 817 0006 22B1     		cbz	r2, .L61
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 818              		.loc 1 1113 0
 819 0008 4369     		ldr	r3, [r0, #20]
 820 000a 43F08003 		orr	r3, r3, #128
 821 000e 4361     		str	r3, [r0, #20]
 822 0010 03E0     		b	.L60
 823              	.L61:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 824              		.loc 1 1118 0
 825 0012 4369     		ldr	r3, [r0, #20]
 826 0014 23F08003 		bic	r3, r3, #128
 827 0018 4361     		str	r3, [r0, #20]
 828              	.L60:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 829              		.loc 1 1123 0
 830 001a 8029     		cmp	r1, #128
 831 001c 0CD0     		beq	.L59
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 832              		.loc 1 1125 0
 833 001e 2AB1     		cbz	r2, .L63
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 834              		.loc 1 1128 0
 835 0020 0368     		ldr	r3, [r0]
 836 0022 01F01E01 		and	r1, r1, #30
 837              	.LVL45:
 838 0026 1943     		orrs	r1, r1, r3
 839 0028 0160     		str	r1, [r0]
 840 002a 7047     		bx	lr
 841              	.LVL46:
 842              	.L63:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 843              		.loc 1 1133 0
 844 002c 0368     		ldr	r3, [r0]
 845 002e 01F01E01 		and	r1, r1, #30
 846              	.LVL47:
 847 0032 23EA0101 		bic	r1, r3, r1
 848 0036 0160     		str	r1, [r0]
 849              	.L59:
 850 0038 7047     		bx	lr
 851              		.cfi_endproc
 852              	.LFE126:
 854 003a 00BF     		.section	.text.DMA_GetITStatus,"ax",%progbits
 855              		.align	2
 856              		.global	DMA_GetITStatus
 857              		.thumb
 858              		.thumb_func
 860              	DMA_GetITStatus:
 861              	.LFB127:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 862              		.loc 1 1153 0
 863              		.cfi_startproc
 864              		@ args = 0, pretend = 0, frame = 0
 865              		@ frame_needed = 0, uses_anonymous_args = 0
 866              		@ link register save eliminated.
 867              	.LVL48:
 868 0000 10B4     		push	{r4}
 869              	.LCFI3:
 870              		.cfi_def_cfa_offset 4
 871              		.cfi_offset 4, -4
 872              	.LVL49:
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 873              		.loc 1 1163 0
 874 0002 46F20F44 		movw	r4, #25615
 875 0006 C4F20204 		movt	r4, 16386
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 876              		.loc 1 1166 0
 877 000a 4FF4C842 		mov	r2, #25600
 878 000e C4F20202 		movt	r2, 16386
 879 0012 4FF4C043 		mov	r3, #24576
 880 0016 C4F20203 		movt	r3, 16386
 881 001a A042     		cmp	r0, r4
 882 001c 88BF     		it	hi
 883 001e 1346     		movhi	r3, r2
 884              	.LVL50:
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 885              		.loc 1 1175 0
 886 0020 21F0F022 		bic	r2, r1, #-268374016
 887 0024 32F0C314 		bics	r4, r2, #12779715
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 888              		.loc 1 1178 0
 889 0028 1FBF     		itttt	ne
 890 002a CA0A     		lsrne	r2, r1, #11
 891 002c 02F01E02 		andne	r2, r2, #30
 892              	.LVL51:
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 893              		.loc 1 1181 0
 894 0030 0068     		ldrne	r0, [r0]
 895              	.LVL52:
 896 0032 1040     		andne	r0, r0, r2
 897              	.LVL53:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 898              		.loc 1 1186 0
 899 0034 04BF     		itt	eq
 900 0036 4069     		ldreq	r0, [r0, #20]
 901              	.LVL54:
 902 0038 00F08000 		andeq	r0, r0, #128
 903              	.LVL55:
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 904              		.loc 1 1190 0
 905 003c 11F0005F 		tst	r1, #536870912
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 906              		.loc 1 1193 0
 907 0040 14BF     		ite	ne
 908 0042 5B68     		ldrne	r3, [r3, #4]
 909              	.LVL56:
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 910              		.loc 1 1198 0
 911 0044 1B68     		ldreq	r3, [r3]
 912              	.LVL57:
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 913              		.loc 1 1202 0
 914 0046 23F0F023 		bic	r3, r3, #-268374016
 915              	.LVL58:
 916 004a 23F08213 		bic	r3, r3, #8519810
 917              	.LVL59:
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 918              		.loc 1 1205 0
 919 004e 0B42     		tst	r3, r1
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 920              		.loc 1 1213 0
 921 0050 08BF     		it	eq
 922 0052 0020     		moveq	r0, #0
 923              	.LVL60:
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 924              		.loc 1 1205 0
 925 0054 03D0     		beq	.L70
 926              		.loc 1 1213 0 discriminator 1
 927 0056 0030     		adds	r0, r0, #0
 928 0058 18BF     		it	ne
 929 005a 0120     		movne	r0, #1
 930 005c FFE7     		b	.L70
 931              	.L70:
 932              	.LVL61:
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 933              		.loc 1 1218 0
 934 005e 5DF8044B 		ldr	r4, [sp], #4
 935 0062 7047     		bx	lr
 936              		.cfi_endproc
 937              	.LFE127:
 939              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 940              		.align	2
 941              		.global	DMA_ClearITPendingBit
 942              		.thumb
 943              		.thumb_func
 945              	DMA_ClearITPendingBit:
 946              	.LFB128:
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 947              		.loc 1 1235 0
 948              		.cfi_startproc
 949              		@ args = 0, pretend = 0, frame = 0
 950              		@ frame_needed = 0, uses_anonymous_args = 0
 951              		@ link register save eliminated.
 952              	.LVL62:
 953 0000 10B4     		push	{r4}
 954              	.LCFI4:
 955              		.cfi_def_cfa_offset 4
 956              		.cfi_offset 4, -4
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 957              		.loc 1 1243 0
 958 0002 46F20F44 		movw	r4, #25615
 959 0006 C4F20204 		movt	r4, 16386
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 960              		.loc 1 1246 0
 961 000a 4FF4C842 		mov	r2, #25600
 962 000e C4F20202 		movt	r2, 16386
 963 0012 4FF4C043 		mov	r3, #24576
 964 0016 C4F20203 		movt	r3, 16386
 965 001a A042     		cmp	r0, r4
 966 001c 88BF     		it	hi
 967 001e 1346     		movhi	r3, r2
 968              	.LVL63:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 969              		.loc 1 1255 0
 970 0020 11F0005F 		tst	r1, #536870912
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 971              		.loc 1 1258 0
 972 0024 21F0F021 		bic	r1, r1, #-268374016
 973              	.LVL64:
 974 0028 21F08211 		bic	r1, r1, #8519810
 975 002c 14BF     		ite	ne
 976 002e D960     		strne	r1, [r3, #12]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 977              		.loc 1 1263 0
 978 0030 9960     		streq	r1, [r3, #8]
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 979              		.loc 1 1265 0
 980 0032 5DF8044B 		ldr	r4, [sp], #4
 981 0036 7047     		bx	lr
 982              		.cfi_endproc
 983              	.LFE128:
 985              		.text
 986              	.Letext0:
 987              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 988              		.file 3 "/usr/include/newlib/stdint.h"
 989              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 990              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h"
 991              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma.c
     /tmp/cczbjwmO.s:20     .text.DMA_DeInit:0000000000000000 $t
     /tmp/cczbjwmO.s:25     .text.DMA_DeInit:0000000000000000 DMA_DeInit
     /tmp/cczbjwmO.s:253    .text.DMA_Init:0000000000000000 $t
     /tmp/cczbjwmO.s:258    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/cczbjwmO.s:349    .text.DMA_StructInit:0000000000000000 $t
     /tmp/cczbjwmO.s:354    .text.DMA_StructInit:0000000000000000 DMA_StructInit
     /tmp/cczbjwmO.s:398    .text.DMA_Cmd:0000000000000000 $t
     /tmp/cczbjwmO.s:403    .text.DMA_Cmd:0000000000000000 DMA_Cmd
     /tmp/cczbjwmO.s:428    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 $t
     /tmp/cczbjwmO.s:433    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/cczbjwmO.s:458    .text.DMA_FlowControllerConfig:0000000000000000 $t
     /tmp/cczbjwmO.s:463    .text.DMA_FlowControllerConfig:0000000000000000 DMA_FlowControllerConfig
     /tmp/cczbjwmO.s:488    .text.DMA_SetCurrDataCounter:0000000000000000 $t
     /tmp/cczbjwmO.s:493    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
     /tmp/cczbjwmO.s:508    .text.DMA_GetCurrDataCounter:0000000000000000 $t
     /tmp/cczbjwmO.s:513    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
     /tmp/cczbjwmO.s:531    .text.DMA_DoubleBufferModeConfig:0000000000000000 $t
     /tmp/cczbjwmO.s:536    .text.DMA_DoubleBufferModeConfig:0000000000000000 DMA_DoubleBufferModeConfig
     /tmp/cczbjwmO.s:564    .text.DMA_DoubleBufferModeCmd:0000000000000000 $t
     /tmp/cczbjwmO.s:569    .text.DMA_DoubleBufferModeCmd:0000000000000000 DMA_DoubleBufferModeCmd
     /tmp/cczbjwmO.s:594    .text.DMA_MemoryTargetConfig:0000000000000000 $t
     /tmp/cczbjwmO.s:599    .text.DMA_MemoryTargetConfig:0000000000000000 DMA_MemoryTargetConfig
     /tmp/cczbjwmO.s:620    .text.DMA_GetCurrentMemoryTarget:0000000000000000 $t
     /tmp/cczbjwmO.s:625    .text.DMA_GetCurrentMemoryTarget:0000000000000000 DMA_GetCurrentMemoryTarget
     /tmp/cczbjwmO.s:648    .text.DMA_GetCmdStatus:0000000000000000 $t
     /tmp/cczbjwmO.s:653    .text.DMA_GetCmdStatus:0000000000000000 DMA_GetCmdStatus
     /tmp/cczbjwmO.s:672    .text.DMA_GetFIFOStatus:0000000000000000 $t
     /tmp/cczbjwmO.s:677    .text.DMA_GetFIFOStatus:0000000000000000 DMA_GetFIFOStatus
     /tmp/cczbjwmO.s:696    .text.DMA_GetFlagStatus:0000000000000000 $t
     /tmp/cczbjwmO.s:701    .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
     /tmp/cczbjwmO.s:754    .text.DMA_ClearFlag:0000000000000000 $t
     /tmp/cczbjwmO.s:759    .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
     /tmp/cczbjwmO.s:800    .text.DMA_ITConfig:0000000000000000 $t
     /tmp/cczbjwmO.s:805    .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
     /tmp/cczbjwmO.s:855    .text.DMA_GetITStatus:0000000000000000 $t
     /tmp/cczbjwmO.s:860    .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
     /tmp/cczbjwmO.s:940    .text.DMA_ClearITPendingBit:0000000000000000 $t
     /tmp/cczbjwmO.s:945    .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.112.18d4286c7d51453d084bac9a606f398a

NO UNDEFINED SYMBOLS
