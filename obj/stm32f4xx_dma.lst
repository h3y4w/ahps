   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_dma.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.DMA_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	DMA_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	DMA_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  28              		.loc 1 189 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  44              		.loc 1 194 0
  45 0008 7B68     		ldr	r3, [r7, #4]
  46 000a 1B68     		ldr	r3, [r3]
  47 000c 23F00102 		bic	r2, r3, #1
  48 0010 7B68     		ldr	r3, [r7, #4]
  49 0012 1A60     		str	r2, [r3]
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  50              		.loc 1 197 0
  51 0014 7B68     		ldr	r3, [r7, #4]
  52 0016 0022     		movs	r2, #0
  53 0018 1A60     		str	r2, [r3]
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  54              		.loc 1 200 0
  55 001a 7B68     		ldr	r3, [r7, #4]
  56 001c 0022     		movs	r2, #0
  57 001e 5A60     		str	r2, [r3, #4]
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  58              		.loc 1 203 0
  59 0020 7B68     		ldr	r3, [r7, #4]
  60 0022 0022     		movs	r2, #0
  61 0024 9A60     		str	r2, [r3, #8]
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  62              		.loc 1 206 0
  63 0026 7B68     		ldr	r3, [r7, #4]
  64 0028 0022     		movs	r2, #0
  65 002a DA60     		str	r2, [r3, #12]
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  66              		.loc 1 209 0
  67 002c 7B68     		ldr	r3, [r7, #4]
  68 002e 0022     		movs	r2, #0
  69 0030 1A61     		str	r2, [r3, #16]
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  70              		.loc 1 212 0
  71 0032 7B68     		ldr	r3, [r7, #4]
  72 0034 2122     		movs	r2, #33
  73 0036 5A61     		str	r2, [r3, #20]
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  74              		.loc 1 215 0
  75 0038 7A68     		ldr	r2, [r7, #4]
  76 003a 46F21003 		movw	r3, #24592
  77 003e C4F20203 		movt	r3, 16386
  78 0042 9A42     		cmp	r2, r3
  79 0044 06D1     		bne	.L2
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  80              		.loc 1 218 0
  81 0046 4FF4C043 		mov	r3, #24576
  82 004a C4F20203 		movt	r3, 16386
  83 004e 3D22     		movs	r2, #61
  84 0050 9A60     		str	r2, [r3, #8]
  85 0052 E6E0     		b	.L1
  86              	.L2:
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  87              		.loc 1 220 0
  88 0054 7A68     		ldr	r2, [r7, #4]
  89 0056 46F22803 		movw	r3, #24616
  90 005a C4F20203 		movt	r3, 16386
  91 005e 9A42     		cmp	r2, r3
  92 0060 07D1     		bne	.L4
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
  93              		.loc 1 223 0
  94 0062 4FF4C043 		mov	r3, #24576
  95 0066 C4F20203 		movt	r3, 16386
  96 006a 4FF47462 		mov	r2, #3904
  97 006e 9A60     		str	r2, [r3, #8]
  98 0070 D7E0     		b	.L1
  99              	.L4:
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
 100              		.loc 1 225 0
 101 0072 7A68     		ldr	r2, [r7, #4]
 102 0074 46F24003 		movw	r3, #24640
 103 0078 C4F20203 		movt	r3, 16386
 104 007c 9A42     		cmp	r2, r3
 105 007e 07D1     		bne	.L5
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 106              		.loc 1 228 0
 107 0080 4FF4C043 		mov	r3, #24576
 108 0084 C4F20203 		movt	r3, 16386
 109 0088 4FF47412 		mov	r2, #3997696
 110 008c 9A60     		str	r2, [r3, #8]
 111 008e C8E0     		b	.L1
 112              	.L5:
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 113              		.loc 1 230 0
 114 0090 7A68     		ldr	r2, [r7, #4]
 115 0092 46F25803 		movw	r3, #24664
 116 0096 C4F20203 		movt	r3, 16386
 117 009a 9A42     		cmp	r2, r3
 118 009c 07D1     		bne	.L6
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 119              		.loc 1 233 0
 120 009e 4FF4C043 		mov	r3, #24576
 121 00a2 C4F20203 		movt	r3, 16386
 122 00a6 4FF07462 		mov	r2, #255852544
 123 00aa 9A60     		str	r2, [r3, #8]
 124 00ac B9E0     		b	.L1
 125              	.L6:
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 126              		.loc 1 235 0
 127 00ae 7A68     		ldr	r2, [r7, #4]
 128 00b0 46F27003 		movw	r3, #24688
 129 00b4 C4F20203 		movt	r3, 16386
 130 00b8 9A42     		cmp	r2, r3
 131 00ba 08D1     		bne	.L7
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 132              		.loc 1 238 0
 133 00bc 4FF4C043 		mov	r3, #24576
 134 00c0 C4F20203 		movt	r3, 16386
 135 00c4 3D22     		movs	r2, #61
 136 00c6 C2F20002 		movt	r2, 8192
 137 00ca DA60     		str	r2, [r3, #12]
 138 00cc A9E0     		b	.L1
 139              	.L7:
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 140              		.loc 1 240 0
 141 00ce 7A68     		ldr	r2, [r7, #4]
 142 00d0 46F28803 		movw	r3, #24712
 143 00d4 C4F20203 		movt	r3, 16386
 144 00d8 9A42     		cmp	r2, r3
 145 00da 09D1     		bne	.L8
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 146              		.loc 1 243 0
 147 00dc 4FF4C043 		mov	r3, #24576
 148 00e0 C4F20203 		movt	r3, 16386
 149 00e4 4FF47462 		mov	r2, #3904
 150 00e8 C2F20002 		movt	r2, 8192
 151 00ec DA60     		str	r2, [r3, #12]
 152 00ee 98E0     		b	.L1
 153              	.L8:
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 154              		.loc 1 245 0
 155 00f0 7A68     		ldr	r2, [r7, #4]
 156 00f2 46F2A003 		movw	r3, #24736
 157 00f6 C4F20203 		movt	r3, 16386
 158 00fa 9A42     		cmp	r2, r3
 159 00fc 08D1     		bne	.L9
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 160              		.loc 1 248 0
 161 00fe 4FF4C043 		mov	r3, #24576
 162 0102 C4F20203 		movt	r3, 16386
 163 0106 0022     		movs	r2, #0
 164 0108 C2F23D02 		movt	r2, 8253
 165 010c DA60     		str	r2, [r3, #12]
 166 010e 88E0     		b	.L1
 167              	.L9:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 168              		.loc 1 250 0
 169 0110 7A68     		ldr	r2, [r7, #4]
 170 0112 46F2B803 		movw	r3, #24760
 171 0116 C4F20203 		movt	r3, 16386
 172 011a 9A42     		cmp	r2, r3
 173 011c 07D1     		bne	.L10
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 174              		.loc 1 253 0
 175 011e 4FF4C043 		mov	r3, #24576
 176 0122 C4F20203 		movt	r3, 16386
 177 0126 4FF03D52 		mov	r2, #792723456
 178 012a DA60     		str	r2, [r3, #12]
 179 012c 79E0     		b	.L1
 180              	.L10:
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 181              		.loc 1 255 0
 182 012e 7A68     		ldr	r2, [r7, #4]
 183 0130 46F21043 		movw	r3, #25616
 184 0134 C4F20203 		movt	r3, 16386
 185 0138 9A42     		cmp	r2, r3
 186 013a 06D1     		bne	.L11
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 187              		.loc 1 258 0
 188 013c 4FF4C843 		mov	r3, #25600
 189 0140 C4F20203 		movt	r3, 16386
 190 0144 3D22     		movs	r2, #61
 191 0146 9A60     		str	r2, [r3, #8]
 192 0148 6BE0     		b	.L1
 193              	.L11:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 194              		.loc 1 260 0
 195 014a 7A68     		ldr	r2, [r7, #4]
 196 014c 46F22843 		movw	r3, #25640
 197 0150 C4F20203 		movt	r3, 16386
 198 0154 9A42     		cmp	r2, r3
 199 0156 07D1     		bne	.L12
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 200              		.loc 1 263 0
 201 0158 4FF4C843 		mov	r3, #25600
 202 015c C4F20203 		movt	r3, 16386
 203 0160 4FF47462 		mov	r2, #3904
 204 0164 9A60     		str	r2, [r3, #8]
 205 0166 5CE0     		b	.L1
 206              	.L12:
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 207              		.loc 1 265 0
 208 0168 7A68     		ldr	r2, [r7, #4]
 209 016a 46F24043 		movw	r3, #25664
 210 016e C4F20203 		movt	r3, 16386
 211 0172 9A42     		cmp	r2, r3
 212 0174 07D1     		bne	.L13
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 213              		.loc 1 268 0
 214 0176 4FF4C843 		mov	r3, #25600
 215 017a C4F20203 		movt	r3, 16386
 216 017e 4FF47412 		mov	r2, #3997696
 217 0182 9A60     		str	r2, [r3, #8]
 218 0184 4DE0     		b	.L1
 219              	.L13:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 220              		.loc 1 270 0
 221 0186 7A68     		ldr	r2, [r7, #4]
 222 0188 46F25843 		movw	r3, #25688
 223 018c C4F20203 		movt	r3, 16386
 224 0190 9A42     		cmp	r2, r3
 225 0192 07D1     		bne	.L14
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 226              		.loc 1 273 0
 227 0194 4FF4C843 		mov	r3, #25600
 228 0198 C4F20203 		movt	r3, 16386
 229 019c 4FF07462 		mov	r2, #255852544
 230 01a0 9A60     		str	r2, [r3, #8]
 231 01a2 3EE0     		b	.L1
 232              	.L14:
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 233              		.loc 1 275 0
 234 01a4 7A68     		ldr	r2, [r7, #4]
 235 01a6 46F27043 		movw	r3, #25712
 236 01aa C4F20203 		movt	r3, 16386
 237 01ae 9A42     		cmp	r2, r3
 238 01b0 08D1     		bne	.L15
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 239              		.loc 1 278 0
 240 01b2 4FF4C843 		mov	r3, #25600
 241 01b6 C4F20203 		movt	r3, 16386
 242 01ba 3D22     		movs	r2, #61
 243 01bc C2F20002 		movt	r2, 8192
 244 01c0 DA60     		str	r2, [r3, #12]
 245 01c2 2EE0     		b	.L1
 246              	.L15:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 247              		.loc 1 280 0
 248 01c4 7A68     		ldr	r2, [r7, #4]
 249 01c6 46F28843 		movw	r3, #25736
 250 01ca C4F20203 		movt	r3, 16386
 251 01ce 9A42     		cmp	r2, r3
 252 01d0 09D1     		bne	.L16
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 253              		.loc 1 283 0
 254 01d2 4FF4C843 		mov	r3, #25600
 255 01d6 C4F20203 		movt	r3, 16386
 256 01da 4FF47462 		mov	r2, #3904
 257 01de C2F20002 		movt	r2, 8192
 258 01e2 DA60     		str	r2, [r3, #12]
 259 01e4 1DE0     		b	.L1
 260              	.L16:
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 261              		.loc 1 285 0
 262 01e6 7A68     		ldr	r2, [r7, #4]
 263 01e8 46F2A043 		movw	r3, #25760
 264 01ec C4F20203 		movt	r3, 16386
 265 01f0 9A42     		cmp	r2, r3
 266 01f2 08D1     		bne	.L17
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 267              		.loc 1 288 0
 268 01f4 4FF4C843 		mov	r3, #25600
 269 01f8 C4F20203 		movt	r3, 16386
 270 01fc 0022     		movs	r2, #0
 271 01fe C2F23D02 		movt	r2, 8253
 272 0202 DA60     		str	r2, [r3, #12]
 273 0204 0DE0     		b	.L1
 274              	.L17:
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 275              		.loc 1 292 0
 276 0206 7A68     		ldr	r2, [r7, #4]
 277 0208 46F2B843 		movw	r3, #25784
 278 020c C4F20203 		movt	r3, 16386
 279 0210 9A42     		cmp	r2, r3
 280 0212 06D1     		bne	.L1
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 281              		.loc 1 295 0
 282 0214 4FF4C843 		mov	r3, #25600
 283 0218 C4F20203 		movt	r3, 16386
 284 021c 4FF03D52 		mov	r2, #792723456
 285 0220 DA60     		str	r2, [r3, #12]
 286              	.L1:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 287              		.loc 1 298 0
 288 0222 0C37     		adds	r7, r7, #12
 289 0224 BD46     		mov	sp, r7
 290              		@ sp needed
 291 0226 5DF8047B 		ldr	r7, [sp], #4
 292 022a 7047     		bx	lr
 293              		.cfi_endproc
 294              	.LFE110:
 296              		.section	.text.DMA_Init,"ax",%progbits
 297              		.align	2
 298              		.global	DMA_Init
 299              		.thumb
 300              		.thumb_func
 302              	DMA_Init:
 303              	.LFB111:
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 304              		.loc 1 312 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 16
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 309 0000 80B4     		push	{r7}
 310              	.LCFI3:
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 7, -4
 313 0002 85B0     		sub	sp, sp, #20
 314              	.LCFI4:
 315              		.cfi_def_cfa_offset 24
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI5:
 318              		.cfi_def_cfa_register 7
 319 0006 7860     		str	r0, [r7, #4]
 320 0008 3960     		str	r1, [r7]
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 321              		.loc 1 313 0
 322 000a 0023     		movs	r3, #0
 323 000c FB60     		str	r3, [r7, #12]
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 324              		.loc 1 333 0
 325 000e 7B68     		ldr	r3, [r7, #4]
 326 0010 1B68     		ldr	r3, [r3]
 327 0012 FB60     		str	r3, [r7, #12]
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 328              		.loc 1 336 0
 329 0014 FA68     		ldr	r2, [r7, #12]
 330 0016 48F23F03 		movw	r3, #32831
 331 001a CFF21C03 		movt	r3, 61468
 332 001e 1340     		ands	r3, r3, r2
 333 0020 FB60     		str	r3, [r7, #12]
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 334              		.loc 1 352 0
 335 0022 3B68     		ldr	r3, [r7]
 336 0024 1A68     		ldr	r2, [r3]
 337 0026 3B68     		ldr	r3, [r7]
 338 0028 DB68     		ldr	r3, [r3, #12]
 339 002a 1A43     		orrs	r2, r2, r3
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 340              		.loc 1 353 0
 341 002c 3B68     		ldr	r3, [r7]
 342 002e 5B69     		ldr	r3, [r3, #20]
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 343              		.loc 1 352 0
 344 0030 1A43     		orrs	r2, r2, r3
 345              		.loc 1 353 0
 346 0032 3B68     		ldr	r3, [r7]
 347 0034 9B69     		ldr	r3, [r3, #24]
 348 0036 1A43     		orrs	r2, r2, r3
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 349              		.loc 1 354 0
 350 0038 3B68     		ldr	r3, [r7]
 351 003a DB69     		ldr	r3, [r3, #28]
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 352              		.loc 1 353 0
 353 003c 1A43     		orrs	r2, r2, r3
 354              		.loc 1 354 0
 355 003e 3B68     		ldr	r3, [r7]
 356 0040 1B6A     		ldr	r3, [r3, #32]
 357 0042 1A43     		orrs	r2, r2, r3
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 358              		.loc 1 355 0
 359 0044 3B68     		ldr	r3, [r7]
 360 0046 5B6A     		ldr	r3, [r3, #36]
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 361              		.loc 1 354 0
 362 0048 1A43     		orrs	r2, r2, r3
 363              		.loc 1 355 0
 364 004a 3B68     		ldr	r3, [r7]
 365 004c 9B6A     		ldr	r3, [r3, #40]
 366 004e 1A43     		orrs	r2, r2, r3
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 367              		.loc 1 356 0
 368 0050 3B68     		ldr	r3, [r7]
 369 0052 5B6B     		ldr	r3, [r3, #52]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 370              		.loc 1 355 0
 371 0054 1A43     		orrs	r2, r2, r3
 372              		.loc 1 356 0
 373 0056 3B68     		ldr	r3, [r7]
 374 0058 9B6B     		ldr	r3, [r3, #56]
 375 005a 1343     		orrs	r3, r3, r2
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 376              		.loc 1 352 0
 377 005c FA68     		ldr	r2, [r7, #12]
 378 005e 1343     		orrs	r3, r3, r2
 379 0060 FB60     		str	r3, [r7, #12]
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 380              		.loc 1 359 0
 381 0062 7B68     		ldr	r3, [r7, #4]
 382 0064 FA68     		ldr	r2, [r7, #12]
 383 0066 1A60     		str	r2, [r3]
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 384              		.loc 1 363 0
 385 0068 7B68     		ldr	r3, [r7, #4]
 386 006a 5B69     		ldr	r3, [r3, #20]
 387 006c FB60     		str	r3, [r7, #12]
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 388              		.loc 1 366 0
 389 006e FB68     		ldr	r3, [r7, #12]
 390 0070 23F00703 		bic	r3, r3, #7
 391 0074 FB60     		str	r3, [r7, #12]
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 392              		.loc 1 371 0
 393 0076 3B68     		ldr	r3, [r7]
 394 0078 DA6A     		ldr	r2, [r3, #44]
 395 007a 3B68     		ldr	r3, [r7]
 396 007c 1B6B     		ldr	r3, [r3, #48]
 397 007e 1343     		orrs	r3, r3, r2
 398 0080 FA68     		ldr	r2, [r7, #12]
 399 0082 1343     		orrs	r3, r3, r2
 400 0084 FB60     		str	r3, [r7, #12]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 401              		.loc 1 374 0
 402 0086 7B68     		ldr	r3, [r7, #4]
 403 0088 FA68     		ldr	r2, [r7, #12]
 404 008a 5A61     		str	r2, [r3, #20]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 405              		.loc 1 378 0
 406 008c 3B68     		ldr	r3, [r7]
 407 008e 1A69     		ldr	r2, [r3, #16]
 408 0090 7B68     		ldr	r3, [r7, #4]
 409 0092 5A60     		str	r2, [r3, #4]
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 410              		.loc 1 382 0
 411 0094 3B68     		ldr	r3, [r7]
 412 0096 5A68     		ldr	r2, [r3, #4]
 413 0098 7B68     		ldr	r3, [r7, #4]
 414 009a 9A60     		str	r2, [r3, #8]
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 415              		.loc 1 386 0
 416 009c 3B68     		ldr	r3, [r7]
 417 009e 9A68     		ldr	r2, [r3, #8]
 418 00a0 7B68     		ldr	r3, [r7, #4]
 419 00a2 DA60     		str	r2, [r3, #12]
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 420              		.loc 1 387 0
 421 00a4 1437     		adds	r7, r7, #20
 422 00a6 BD46     		mov	sp, r7
 423              		@ sp needed
 424 00a8 5DF8047B 		ldr	r7, [sp], #4
 425 00ac 7047     		bx	lr
 426              		.cfi_endproc
 427              	.LFE111:
 429 00ae 00BF     		.section	.text.DMA_StructInit,"ax",%progbits
 430              		.align	2
 431              		.global	DMA_StructInit
 432              		.thumb
 433              		.thumb_func
 435              	DMA_StructInit:
 436              	.LFB112:
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 437              		.loc 1 396 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 8
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442 0000 80B4     		push	{r7}
 443              	.LCFI6:
 444              		.cfi_def_cfa_offset 4
 445              		.cfi_offset 7, -4
 446 0002 83B0     		sub	sp, sp, #12
 447              	.LCFI7:
 448              		.cfi_def_cfa_offset 16
 449 0004 00AF     		add	r7, sp, #0
 450              	.LCFI8:
 451              		.cfi_def_cfa_register 7
 452 0006 7860     		str	r0, [r7, #4]
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 453              		.loc 1 399 0
 454 0008 7B68     		ldr	r3, [r7, #4]
 455 000a 0022     		movs	r2, #0
 456 000c 1A60     		str	r2, [r3]
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 457              		.loc 1 402 0
 458 000e 7B68     		ldr	r3, [r7, #4]
 459 0010 0022     		movs	r2, #0
 460 0012 5A60     		str	r2, [r3, #4]
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 461              		.loc 1 405 0
 462 0014 7B68     		ldr	r3, [r7, #4]
 463 0016 0022     		movs	r2, #0
 464 0018 9A60     		str	r2, [r3, #8]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 465              		.loc 1 408 0
 466 001a 7B68     		ldr	r3, [r7, #4]
 467 001c 0022     		movs	r2, #0
 468 001e DA60     		str	r2, [r3, #12]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 469              		.loc 1 411 0
 470 0020 7B68     		ldr	r3, [r7, #4]
 471 0022 0022     		movs	r2, #0
 472 0024 1A61     		str	r2, [r3, #16]
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 473              		.loc 1 414 0
 474 0026 7B68     		ldr	r3, [r7, #4]
 475 0028 0022     		movs	r2, #0
 476 002a 5A61     		str	r2, [r3, #20]
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 477              		.loc 1 417 0
 478 002c 7B68     		ldr	r3, [r7, #4]
 479 002e 0022     		movs	r2, #0
 480 0030 9A61     		str	r2, [r3, #24]
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 481              		.loc 1 420 0
 482 0032 7B68     		ldr	r3, [r7, #4]
 483 0034 0022     		movs	r2, #0
 484 0036 DA61     		str	r2, [r3, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 485              		.loc 1 423 0
 486 0038 7B68     		ldr	r3, [r7, #4]
 487 003a 0022     		movs	r2, #0
 488 003c 1A62     		str	r2, [r3, #32]
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 489              		.loc 1 426 0
 490 003e 7B68     		ldr	r3, [r7, #4]
 491 0040 0022     		movs	r2, #0
 492 0042 5A62     		str	r2, [r3, #36]
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 493              		.loc 1 429 0
 494 0044 7B68     		ldr	r3, [r7, #4]
 495 0046 0022     		movs	r2, #0
 496 0048 9A62     		str	r2, [r3, #40]
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 497              		.loc 1 432 0
 498 004a 7B68     		ldr	r3, [r7, #4]
 499 004c 0022     		movs	r2, #0
 500 004e DA62     		str	r2, [r3, #44]
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 501              		.loc 1 435 0
 502 0050 7B68     		ldr	r3, [r7, #4]
 503 0052 0022     		movs	r2, #0
 504 0054 1A63     		str	r2, [r3, #48]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 505              		.loc 1 438 0
 506 0056 7B68     		ldr	r3, [r7, #4]
 507 0058 0022     		movs	r2, #0
 508 005a 5A63     		str	r2, [r3, #52]
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 509              		.loc 1 441 0
 510 005c 7B68     		ldr	r3, [r7, #4]
 511 005e 0022     		movs	r2, #0
 512 0060 9A63     		str	r2, [r3, #56]
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 513              		.loc 1 442 0
 514 0062 0C37     		adds	r7, r7, #12
 515 0064 BD46     		mov	sp, r7
 516              		@ sp needed
 517 0066 5DF8047B 		ldr	r7, [sp], #4
 518 006a 7047     		bx	lr
 519              		.cfi_endproc
 520              	.LFE112:
 522              		.section	.text.DMA_Cmd,"ax",%progbits
 523              		.align	2
 524              		.global	DMA_Cmd
 525              		.thumb
 526              		.thumb_func
 528              	DMA_Cmd:
 529              	.LFB113:
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 530              		.loc 1 471 0
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 8
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534              		@ link register save eliminated.
 535 0000 80B4     		push	{r7}
 536              	.LCFI9:
 537              		.cfi_def_cfa_offset 4
 538              		.cfi_offset 7, -4
 539 0002 83B0     		sub	sp, sp, #12
 540              	.LCFI10:
 541              		.cfi_def_cfa_offset 16
 542 0004 00AF     		add	r7, sp, #0
 543              	.LCFI11:
 544              		.cfi_def_cfa_register 7
 545 0006 7860     		str	r0, [r7, #4]
 546 0008 0B46     		mov	r3, r1
 547 000a FB70     		strb	r3, [r7, #3]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 548              		.loc 1 476 0
 549 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 550 000e 002B     		cmp	r3, #0
 551 0010 06D0     		beq	.L21
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 552              		.loc 1 479 0
 553 0012 7B68     		ldr	r3, [r7, #4]
 554 0014 1B68     		ldr	r3, [r3]
 555 0016 43F00102 		orr	r2, r3, #1
 556 001a 7B68     		ldr	r3, [r7, #4]
 557 001c 1A60     		str	r2, [r3]
 558 001e 05E0     		b	.L20
 559              	.L21:
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 560              		.loc 1 484 0
 561 0020 7B68     		ldr	r3, [r7, #4]
 562 0022 1B68     		ldr	r3, [r3]
 563 0024 23F00102 		bic	r2, r3, #1
 564 0028 7B68     		ldr	r3, [r7, #4]
 565 002a 1A60     		str	r2, [r3]
 566              	.L20:
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 567              		.loc 1 486 0
 568 002c 0C37     		adds	r7, r7, #12
 569 002e BD46     		mov	sp, r7
 570              		@ sp needed
 571 0030 5DF8047B 		ldr	r7, [sp], #4
 572 0034 7047     		bx	lr
 573              		.cfi_endproc
 574              	.LFE113:
 576 0036 00BF     		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 577              		.align	2
 578              		.global	DMA_PeriphIncOffsetSizeConfig
 579              		.thumb
 580              		.thumb_func
 582              	DMA_PeriphIncOffsetSizeConfig:
 583              	.LFB114:
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 584              		.loc 1 507 0
 585              		.cfi_startproc
 586              		@ args = 0, pretend = 0, frame = 8
 587              		@ frame_needed = 1, uses_anonymous_args = 0
 588              		@ link register save eliminated.
 589 0000 80B4     		push	{r7}
 590              	.LCFI12:
 591              		.cfi_def_cfa_offset 4
 592              		.cfi_offset 7, -4
 593 0002 83B0     		sub	sp, sp, #12
 594              	.LCFI13:
 595              		.cfi_def_cfa_offset 16
 596 0004 00AF     		add	r7, sp, #0
 597              	.LCFI14:
 598              		.cfi_def_cfa_register 7
 599 0006 7860     		str	r0, [r7, #4]
 600 0008 3960     		str	r1, [r7]
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 601              		.loc 1 513 0
 602 000a 3B68     		ldr	r3, [r7]
 603 000c 002B     		cmp	r3, #0
 604 000e 06D0     		beq	.L24
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 605              		.loc 1 516 0
 606 0010 7B68     		ldr	r3, [r7, #4]
 607 0012 1B68     		ldr	r3, [r3]
 608 0014 43F40042 		orr	r2, r3, #32768
 609 0018 7B68     		ldr	r3, [r7, #4]
 610 001a 1A60     		str	r2, [r3]
 611 001c 05E0     		b	.L23
 612              	.L24:
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 613              		.loc 1 521 0
 614 001e 7B68     		ldr	r3, [r7, #4]
 615 0020 1B68     		ldr	r3, [r3]
 616 0022 23F40042 		bic	r2, r3, #32768
 617 0026 7B68     		ldr	r3, [r7, #4]
 618 0028 1A60     		str	r2, [r3]
 619              	.L23:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 620              		.loc 1 523 0
 621 002a 0C37     		adds	r7, r7, #12
 622 002c BD46     		mov	sp, r7
 623              		@ sp needed
 624 002e 5DF8047B 		ldr	r7, [sp], #4
 625 0032 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE114:
 629              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 630              		.align	2
 631              		.global	DMA_FlowControllerConfig
 632              		.thumb
 633              		.thumb_func
 635              	DMA_FlowControllerConfig:
 636              	.LFB115:
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 637              		.loc 1 543 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 8
 640              		@ frame_needed = 1, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642 0000 80B4     		push	{r7}
 643              	.LCFI15:
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 0002 83B0     		sub	sp, sp, #12
 647              	.LCFI16:
 648              		.cfi_def_cfa_offset 16
 649 0004 00AF     		add	r7, sp, #0
 650              	.LCFI17:
 651              		.cfi_def_cfa_register 7
 652 0006 7860     		str	r0, [r7, #4]
 653 0008 3960     		str	r1, [r7]
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 654              		.loc 1 549 0
 655 000a 3B68     		ldr	r3, [r7]
 656 000c 002B     		cmp	r3, #0
 657 000e 06D0     		beq	.L27
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 658              		.loc 1 552 0
 659 0010 7B68     		ldr	r3, [r7, #4]
 660 0012 1B68     		ldr	r3, [r3]
 661 0014 43F02002 		orr	r2, r3, #32
 662 0018 7B68     		ldr	r3, [r7, #4]
 663 001a 1A60     		str	r2, [r3]
 664 001c 05E0     		b	.L26
 665              	.L27:
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 666              		.loc 1 557 0
 667 001e 7B68     		ldr	r3, [r7, #4]
 668 0020 1B68     		ldr	r3, [r3]
 669 0022 23F02002 		bic	r2, r3, #32
 670 0026 7B68     		ldr	r3, [r7, #4]
 671 0028 1A60     		str	r2, [r3]
 672              	.L26:
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 673              		.loc 1 559 0
 674 002a 0C37     		adds	r7, r7, #12
 675 002c BD46     		mov	sp, r7
 676              		@ sp needed
 677 002e 5DF8047B 		ldr	r7, [sp], #4
 678 0032 7047     		bx	lr
 679              		.cfi_endproc
 680              	.LFE115:
 682              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 683              		.align	2
 684              		.global	DMA_SetCurrDataCounter
 685              		.thumb
 686              		.thumb_func
 688              	DMA_SetCurrDataCounter:
 689              	.LFB116:
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 690              		.loc 1 627 0
 691              		.cfi_startproc
 692              		@ args = 0, pretend = 0, frame = 8
 693              		@ frame_needed = 1, uses_anonymous_args = 0
 694              		@ link register save eliminated.
 695 0000 80B4     		push	{r7}
 696              	.LCFI18:
 697              		.cfi_def_cfa_offset 4
 698              		.cfi_offset 7, -4
 699 0002 83B0     		sub	sp, sp, #12
 700              	.LCFI19:
 701              		.cfi_def_cfa_offset 16
 702 0004 00AF     		add	r7, sp, #0
 703              	.LCFI20:
 704              		.cfi_def_cfa_register 7
 705 0006 7860     		str	r0, [r7, #4]
 706 0008 0B46     		mov	r3, r1
 707 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 708              		.loc 1 632 0
 709 000c 7A88     		ldrh	r2, [r7, #2]
 710 000e 7B68     		ldr	r3, [r7, #4]
 711 0010 5A60     		str	r2, [r3, #4]
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 712              		.loc 1 633 0
 713 0012 0C37     		adds	r7, r7, #12
 714 0014 BD46     		mov	sp, r7
 715              		@ sp needed
 716 0016 5DF8047B 		ldr	r7, [sp], #4
 717 001a 7047     		bx	lr
 718              		.cfi_endproc
 719              	.LFE116:
 721              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 722              		.align	2
 723              		.global	DMA_GetCurrDataCounter
 724              		.thumb
 725              		.thumb_func
 727              	DMA_GetCurrDataCounter:
 728              	.LFB117:
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 729              		.loc 1 642 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 8
 732              		@ frame_needed = 1, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734 0000 80B4     		push	{r7}
 735              	.LCFI21:
 736              		.cfi_def_cfa_offset 4
 737              		.cfi_offset 7, -4
 738 0002 83B0     		sub	sp, sp, #12
 739              	.LCFI22:
 740              		.cfi_def_cfa_offset 16
 741 0004 00AF     		add	r7, sp, #0
 742              	.LCFI23:
 743              		.cfi_def_cfa_register 7
 744 0006 7860     		str	r0, [r7, #4]
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 745              		.loc 1 647 0
 746 0008 7B68     		ldr	r3, [r7, #4]
 747 000a 5B68     		ldr	r3, [r3, #4]
 748 000c 9BB2     		uxth	r3, r3
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 749              		.loc 1 648 0
 750 000e 1846     		mov	r0, r3
 751 0010 0C37     		adds	r7, r7, #12
 752 0012 BD46     		mov	sp, r7
 753              		@ sp needed
 754 0014 5DF8047B 		ldr	r7, [sp], #4
 755 0018 7047     		bx	lr
 756              		.cfi_endproc
 757              	.LFE117:
 759 001a 00BF     		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 760              		.align	2
 761              		.global	DMA_DoubleBufferModeConfig
 762              		.thumb
 763              		.thumb_func
 765              	DMA_DoubleBufferModeConfig:
 766              	.LFB118:
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 767              		.loc 1 720 0
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 16
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771              		@ link register save eliminated.
 772 0000 80B4     		push	{r7}
 773              	.LCFI24:
 774              		.cfi_def_cfa_offset 4
 775              		.cfi_offset 7, -4
 776 0002 85B0     		sub	sp, sp, #20
 777              	.LCFI25:
 778              		.cfi_def_cfa_offset 24
 779 0004 00AF     		add	r7, sp, #0
 780              	.LCFI26:
 781              		.cfi_def_cfa_register 7
 782 0006 F860     		str	r0, [r7, #12]
 783 0008 B960     		str	r1, [r7, #8]
 784 000a 7A60     		str	r2, [r7, #4]
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 785              		.loc 1 725 0
 786 000c 7B68     		ldr	r3, [r7, #4]
 787 000e 002B     		cmp	r3, #0
 788 0010 06D0     		beq	.L33
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 789              		.loc 1 728 0
 790 0012 FB68     		ldr	r3, [r7, #12]
 791 0014 1B68     		ldr	r3, [r3]
 792 0016 43F40022 		orr	r2, r3, #524288
 793 001a FB68     		ldr	r3, [r7, #12]
 794 001c 1A60     		str	r2, [r3]
 795 001e 05E0     		b	.L34
 796              	.L33:
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 797              		.loc 1 733 0
 798 0020 FB68     		ldr	r3, [r7, #12]
 799 0022 1B68     		ldr	r3, [r3]
 800 0024 23F40022 		bic	r2, r3, #524288
 801 0028 FB68     		ldr	r3, [r7, #12]
 802 002a 1A60     		str	r2, [r3]
 803              	.L34:
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 804              		.loc 1 737 0
 805 002c FB68     		ldr	r3, [r7, #12]
 806 002e BA68     		ldr	r2, [r7, #8]
 807 0030 1A61     		str	r2, [r3, #16]
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 808              		.loc 1 738 0
 809 0032 1437     		adds	r7, r7, #20
 810 0034 BD46     		mov	sp, r7
 811              		@ sp needed
 812 0036 5DF8047B 		ldr	r7, [sp], #4
 813 003a 7047     		bx	lr
 814              		.cfi_endproc
 815              	.LFE118:
 817              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 818              		.align	2
 819              		.global	DMA_DoubleBufferModeCmd
 820              		.thumb
 821              		.thumb_func
 823              	DMA_DoubleBufferModeCmd:
 824              	.LFB119:
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 825              		.loc 1 750 0
 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 8
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830 0000 80B4     		push	{r7}
 831              	.LCFI27:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 7, -4
 834 0002 83B0     		sub	sp, sp, #12
 835              	.LCFI28:
 836              		.cfi_def_cfa_offset 16
 837 0004 00AF     		add	r7, sp, #0
 838              	.LCFI29:
 839              		.cfi_def_cfa_register 7
 840 0006 7860     		str	r0, [r7, #4]
 841 0008 0B46     		mov	r3, r1
 842 000a FB70     		strb	r3, [r7, #3]
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 843              		.loc 1 756 0
 844 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 845 000e 002B     		cmp	r3, #0
 846 0010 06D0     		beq	.L36
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 847              		.loc 1 759 0
 848 0012 7B68     		ldr	r3, [r7, #4]
 849 0014 1B68     		ldr	r3, [r3]
 850 0016 43F48022 		orr	r2, r3, #262144
 851 001a 7B68     		ldr	r3, [r7, #4]
 852 001c 1A60     		str	r2, [r3]
 853 001e 05E0     		b	.L35
 854              	.L36:
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 855              		.loc 1 764 0
 856 0020 7B68     		ldr	r3, [r7, #4]
 857 0022 1B68     		ldr	r3, [r3]
 858 0024 23F48022 		bic	r2, r3, #262144
 859 0028 7B68     		ldr	r3, [r7, #4]
 860 002a 1A60     		str	r2, [r3]
 861              	.L35:
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 862              		.loc 1 766 0
 863 002c 0C37     		adds	r7, r7, #12
 864 002e BD46     		mov	sp, r7
 865              		@ sp needed
 866 0030 5DF8047B 		ldr	r7, [sp], #4
 867 0034 7047     		bx	lr
 868              		.cfi_endproc
 869              	.LFE119:
 871 0036 00BF     		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 872              		.align	2
 873              		.global	DMA_MemoryTargetConfig
 874              		.thumb
 875              		.thumb_func
 877              	DMA_MemoryTargetConfig:
 878              	.LFB120:
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 879              		.loc 1 792 0
 880              		.cfi_startproc
 881              		@ args = 0, pretend = 0, frame = 16
 882              		@ frame_needed = 1, uses_anonymous_args = 0
 883              		@ link register save eliminated.
 884 0000 80B4     		push	{r7}
 885              	.LCFI30:
 886              		.cfi_def_cfa_offset 4
 887              		.cfi_offset 7, -4
 888 0002 85B0     		sub	sp, sp, #20
 889              	.LCFI31:
 890              		.cfi_def_cfa_offset 24
 891 0004 00AF     		add	r7, sp, #0
 892              	.LCFI32:
 893              		.cfi_def_cfa_register 7
 894 0006 F860     		str	r0, [r7, #12]
 895 0008 B960     		str	r1, [r7, #8]
 896 000a 7A60     		str	r2, [r7, #4]
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 897              		.loc 1 798 0
 898 000c 7B68     		ldr	r3, [r7, #4]
 899 000e 002B     		cmp	r3, #0
 900 0010 03D0     		beq	.L39
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 901              		.loc 1 801 0
 902 0012 FB68     		ldr	r3, [r7, #12]
 903 0014 BA68     		ldr	r2, [r7, #8]
 904 0016 1A61     		str	r2, [r3, #16]
 905 0018 02E0     		b	.L38
 906              	.L39:
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 907              		.loc 1 806 0
 908 001a FB68     		ldr	r3, [r7, #12]
 909 001c BA68     		ldr	r2, [r7, #8]
 910 001e DA60     		str	r2, [r3, #12]
 911              	.L38:
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 912              		.loc 1 808 0
 913 0020 1437     		adds	r7, r7, #20
 914 0022 BD46     		mov	sp, r7
 915              		@ sp needed
 916 0024 5DF8047B 		ldr	r7, [sp], #4
 917 0028 7047     		bx	lr
 918              		.cfi_endproc
 919              	.LFE120:
 921 002a 00BF     		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 922              		.align	2
 923              		.global	DMA_GetCurrentMemoryTarget
 924              		.thumb
 925              		.thumb_func
 927              	DMA_GetCurrentMemoryTarget:
 928              	.LFB121:
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 929              		.loc 1 817 0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 16
 932              		@ frame_needed = 1, uses_anonymous_args = 0
 933              		@ link register save eliminated.
 934 0000 80B4     		push	{r7}
 935              	.LCFI33:
 936              		.cfi_def_cfa_offset 4
 937              		.cfi_offset 7, -4
 938 0002 85B0     		sub	sp, sp, #20
 939              	.LCFI34:
 940              		.cfi_def_cfa_offset 24
 941 0004 00AF     		add	r7, sp, #0
 942              	.LCFI35:
 943              		.cfi_def_cfa_register 7
 944 0006 7860     		str	r0, [r7, #4]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 945              		.loc 1 818 0
 946 0008 0023     		movs	r3, #0
 947 000a FB60     		str	r3, [r7, #12]
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 948              		.loc 1 824 0
 949 000c 7B68     		ldr	r3, [r7, #4]
 950 000e 1B68     		ldr	r3, [r3]
 951 0010 03F40023 		and	r3, r3, #524288
 952 0014 002B     		cmp	r3, #0
 953 0016 02D0     		beq	.L42
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 954              		.loc 1 827 0
 955 0018 0123     		movs	r3, #1
 956 001a FB60     		str	r3, [r7, #12]
 957 001c 01E0     		b	.L43
 958              	.L42:
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 959              		.loc 1 832 0
 960 001e 0023     		movs	r3, #0
 961 0020 FB60     		str	r3, [r7, #12]
 962              	.L43:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 963              		.loc 1 834 0
 964 0022 FB68     		ldr	r3, [r7, #12]
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 965              		.loc 1 835 0
 966 0024 1846     		mov	r0, r3
 967 0026 1437     		adds	r7, r7, #20
 968 0028 BD46     		mov	sp, r7
 969              		@ sp needed
 970 002a 5DF8047B 		ldr	r7, [sp], #4
 971 002e 7047     		bx	lr
 972              		.cfi_endproc
 973              	.LFE121:
 975              		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 976              		.align	2
 977              		.global	DMA_GetCmdStatus
 978              		.thumb
 979              		.thumb_func
 981              	DMA_GetCmdStatus:
 982              	.LFB122:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 983              		.loc 1 926 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 16
 986              		@ frame_needed = 1, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988 0000 80B4     		push	{r7}
 989              	.LCFI36:
 990              		.cfi_def_cfa_offset 4
 991              		.cfi_offset 7, -4
 992 0002 85B0     		sub	sp, sp, #20
 993              	.LCFI37:
 994              		.cfi_def_cfa_offset 24
 995 0004 00AF     		add	r7, sp, #0
 996              	.LCFI38:
 997              		.cfi_def_cfa_register 7
 998 0006 7860     		str	r0, [r7, #4]
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 999              		.loc 1 927 0
 1000 0008 0023     		movs	r3, #0
 1001 000a FB73     		strb	r3, [r7, #15]
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 1002              		.loc 1 932 0
 1003 000c 7B68     		ldr	r3, [r7, #4]
 1004 000e 1B68     		ldr	r3, [r3]
 1005 0010 03F00103 		and	r3, r3, #1
 1006 0014 002B     		cmp	r3, #0
 1007 0016 02D0     		beq	.L46
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 1008              		.loc 1 935 0
 1009 0018 0123     		movs	r3, #1
 1010 001a FB73     		strb	r3, [r7, #15]
 1011 001c 01E0     		b	.L47
 1012              	.L46:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 1013              		.loc 1 941 0
 1014 001e 0023     		movs	r3, #0
 1015 0020 FB73     		strb	r3, [r7, #15]
 1016              	.L47:
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 1017              		.loc 1 943 0
 1018 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1019              		.loc 1 944 0
 1020 0024 1846     		mov	r0, r3
 1021 0026 1437     		adds	r7, r7, #20
 1022 0028 BD46     		mov	sp, r7
 1023              		@ sp needed
 1024 002a 5DF8047B 		ldr	r7, [sp], #4
 1025 002e 7047     		bx	lr
 1026              		.cfi_endproc
 1027              	.LFE122:
 1029              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 1030              		.align	2
 1031              		.global	DMA_GetFIFOStatus
 1032              		.thumb
 1033              		.thumb_func
 1035              	DMA_GetFIFOStatus:
 1036              	.LFB123:
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1037              		.loc 1 960 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 16
 1040              		@ frame_needed = 1, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 1042 0000 80B4     		push	{r7}
 1043              	.LCFI39:
 1044              		.cfi_def_cfa_offset 4
 1045              		.cfi_offset 7, -4
 1046 0002 85B0     		sub	sp, sp, #20
 1047              	.LCFI40:
 1048              		.cfi_def_cfa_offset 24
 1049 0004 00AF     		add	r7, sp, #0
 1050              	.LCFI41:
 1051              		.cfi_def_cfa_register 7
 1052 0006 7860     		str	r0, [r7, #4]
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1053              		.loc 1 961 0
 1054 0008 0023     		movs	r3, #0
 1055 000a FB60     		str	r3, [r7, #12]
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 1056              		.loc 1 967 0
 1057 000c 7B68     		ldr	r3, [r7, #4]
 1058 000e 5B69     		ldr	r3, [r3, #20]
 1059 0010 03F03803 		and	r3, r3, #56
 1060 0014 FB60     		str	r3, [r7, #12]
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 1061              		.loc 1 969 0
 1062 0016 FB68     		ldr	r3, [r7, #12]
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1063              		.loc 1 970 0
 1064 0018 1846     		mov	r0, r3
 1065 001a 1437     		adds	r7, r7, #20
 1066 001c BD46     		mov	sp, r7
 1067              		@ sp needed
 1068 001e 5DF8047B 		ldr	r7, [sp], #4
 1069 0022 7047     		bx	lr
 1070              		.cfi_endproc
 1071              	.LFE123:
 1073              		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 1074              		.align	2
 1075              		.global	DMA_GetFlagStatus
 1076              		.thumb
 1077              		.thumb_func
 1079              	DMA_GetFlagStatus:
 1080              	.LFB124:
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1081              		.loc 1 987 0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 24
 1084              		@ frame_needed = 1, uses_anonymous_args = 0
 1085              		@ link register save eliminated.
 1086 0000 80B4     		push	{r7}
 1087              	.LCFI42:
 1088              		.cfi_def_cfa_offset 4
 1089              		.cfi_offset 7, -4
 1090 0002 87B0     		sub	sp, sp, #28
 1091              	.LCFI43:
 1092              		.cfi_def_cfa_offset 32
 1093 0004 00AF     		add	r7, sp, #0
 1094              	.LCFI44:
 1095              		.cfi_def_cfa_register 7
 1096 0006 7860     		str	r0, [r7, #4]
 1097 0008 3960     		str	r1, [r7]
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 1098              		.loc 1 988 0
 1099 000a 0023     		movs	r3, #0
 1100 000c FB75     		strb	r3, [r7, #23]
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1101              		.loc 1 990 0
 1102 000e 0023     		movs	r3, #0
 1103 0010 FB60     		str	r3, [r7, #12]
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1104              		.loc 1 997 0
 1105 0012 7A68     		ldr	r2, [r7, #4]
 1106 0014 46F20F43 		movw	r3, #25615
 1107 0018 C4F20203 		movt	r3, 16386
 1108 001c 9A42     		cmp	r2, r3
 1109 001e 05D8     		bhi	.L52
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1110              		.loc 1 1000 0
 1111 0020 4FF4C043 		mov	r3, #24576
 1112 0024 C4F20203 		movt	r3, 16386
 1113 0028 3B61     		str	r3, [r7, #16]
 1114 002a 04E0     		b	.L53
 1115              	.L52:
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1116              		.loc 1 1005 0
 1117 002c 4FF4C843 		mov	r3, #25600
 1118 0030 C4F20203 		movt	r3, 16386
 1119 0034 3B61     		str	r3, [r7, #16]
 1120              	.L53:
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1121              		.loc 1 1009 0
 1122 0036 3B68     		ldr	r3, [r7]
 1123 0038 03F00053 		and	r3, r3, #536870912
 1124 003c 002B     		cmp	r3, #0
 1125 003e 03D0     		beq	.L54
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 1126              		.loc 1 1012 0
 1127 0040 3B69     		ldr	r3, [r7, #16]
 1128 0042 5B68     		ldr	r3, [r3, #4]
 1129 0044 FB60     		str	r3, [r7, #12]
 1130 0046 02E0     		b	.L55
 1131              	.L54:
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 1132              		.loc 1 1017 0
 1133 0048 3B69     		ldr	r3, [r7, #16]
 1134 004a 1B68     		ldr	r3, [r3]
 1135 004c FB60     		str	r3, [r7, #12]
 1136              	.L55:
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1137              		.loc 1 1021 0
 1138 004e FB68     		ldr	r3, [r7, #12]
 1139 0050 23F0F023 		bic	r3, r3, #-268374016
 1140 0054 23F08213 		bic	r3, r3, #8519810
 1141 0058 FB60     		str	r3, [r7, #12]
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 1142              		.loc 1 1024 0
 1143 005a FA68     		ldr	r2, [r7, #12]
 1144 005c 3B68     		ldr	r3, [r7]
 1145 005e 1340     		ands	r3, r3, r2
 1146 0060 002B     		cmp	r3, #0
 1147 0062 02D0     		beq	.L56
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1148              		.loc 1 1027 0
 1149 0064 0123     		movs	r3, #1
 1150 0066 FB75     		strb	r3, [r7, #23]
 1151 0068 01E0     		b	.L57
 1152              	.L56:
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1153              		.loc 1 1032 0
 1154 006a 0023     		movs	r3, #0
 1155 006c FB75     		strb	r3, [r7, #23]
 1156              	.L57:
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1157              		.loc 1 1036 0
 1158 006e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1159              		.loc 1 1037 0
 1160 0070 1846     		mov	r0, r3
 1161 0072 1C37     		adds	r7, r7, #28
 1162 0074 BD46     		mov	sp, r7
 1163              		@ sp needed
 1164 0076 5DF8047B 		ldr	r7, [sp], #4
 1165 007a 7047     		bx	lr
 1166              		.cfi_endproc
 1167              	.LFE124:
 1169              		.section	.text.DMA_ClearFlag,"ax",%progbits
 1170              		.align	2
 1171              		.global	DMA_ClearFlag
 1172              		.thumb
 1173              		.thumb_func
 1175              	DMA_ClearFlag:
 1176              	.LFB125:
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1177              		.loc 1 1054 0
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 16
 1180              		@ frame_needed = 1, uses_anonymous_args = 0
 1181              		@ link register save eliminated.
 1182 0000 80B4     		push	{r7}
 1183              	.LCFI45:
 1184              		.cfi_def_cfa_offset 4
 1185              		.cfi_offset 7, -4
 1186 0002 85B0     		sub	sp, sp, #20
 1187              	.LCFI46:
 1188              		.cfi_def_cfa_offset 24
 1189 0004 00AF     		add	r7, sp, #0
 1190              	.LCFI47:
 1191              		.cfi_def_cfa_register 7
 1192 0006 7860     		str	r0, [r7, #4]
 1193 0008 3960     		str	r1, [r7]
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1194              		.loc 1 1062 0
 1195 000a 7A68     		ldr	r2, [r7, #4]
 1196 000c 46F20F43 		movw	r3, #25615
 1197 0010 C4F20203 		movt	r3, 16386
 1198 0014 9A42     		cmp	r2, r3
 1199 0016 05D8     		bhi	.L60
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1200              		.loc 1 1065 0
 1201 0018 4FF4C043 		mov	r3, #24576
 1202 001c C4F20203 		movt	r3, 16386
 1203 0020 FB60     		str	r3, [r7, #12]
 1204 0022 04E0     		b	.L61
 1205              	.L60:
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1206              		.loc 1 1070 0
 1207 0024 4FF4C843 		mov	r3, #25600
 1208 0028 C4F20203 		movt	r3, 16386
 1209 002c FB60     		str	r3, [r7, #12]
 1210              	.L61:
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1211              		.loc 1 1074 0
 1212 002e 3B68     		ldr	r3, [r7]
 1213 0030 03F00053 		and	r3, r3, #536870912
 1214 0034 002B     		cmp	r3, #0
 1215 0036 07D0     		beq	.L62
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1216              		.loc 1 1077 0
 1217 0038 3B68     		ldr	r3, [r7]
 1218 003a 23F0F023 		bic	r3, r3, #-268374016
 1219 003e 23F08213 		bic	r3, r3, #8519810
 1220 0042 FA68     		ldr	r2, [r7, #12]
 1221 0044 D360     		str	r3, [r2, #12]
 1222 0046 06E0     		b	.L59
 1223              	.L62:
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1224              		.loc 1 1082 0
 1225 0048 3B68     		ldr	r3, [r7]
 1226 004a 23F0F023 		bic	r3, r3, #-268374016
 1227 004e 23F08213 		bic	r3, r3, #8519810
 1228 0052 FA68     		ldr	r2, [r7, #12]
 1229 0054 9360     		str	r3, [r2, #8]
 1230              	.L59:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1231              		.loc 1 1084 0
 1232 0056 1437     		adds	r7, r7, #20
 1233 0058 BD46     		mov	sp, r7
 1234              		@ sp needed
 1235 005a 5DF8047B 		ldr	r7, [sp], #4
 1236 005e 7047     		bx	lr
 1237              		.cfi_endproc
 1238              	.LFE125:
 1240              		.section	.text.DMA_ITConfig,"ax",%progbits
 1241              		.align	2
 1242              		.global	DMA_ITConfig
 1243              		.thumb
 1244              		.thumb_func
 1246              	DMA_ITConfig:
 1247              	.LFB126:
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1248              		.loc 1 1101 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 16
 1251              		@ frame_needed = 1, uses_anonymous_args = 0
 1252              		@ link register save eliminated.
 1253 0000 80B4     		push	{r7}
 1254              	.LCFI48:
 1255              		.cfi_def_cfa_offset 4
 1256              		.cfi_offset 7, -4
 1257 0002 85B0     		sub	sp, sp, #20
 1258              	.LCFI49:
 1259              		.cfi_def_cfa_offset 24
 1260 0004 00AF     		add	r7, sp, #0
 1261              	.LCFI50:
 1262              		.cfi_def_cfa_register 7
 1263 0006 F860     		str	r0, [r7, #12]
 1264 0008 B960     		str	r1, [r7, #8]
 1265 000a 1346     		mov	r3, r2
 1266 000c FB71     		strb	r3, [r7, #7]
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 1267              		.loc 1 1108 0
 1268 000e BB68     		ldr	r3, [r7, #8]
 1269 0010 03F08003 		and	r3, r3, #128
 1270 0014 002B     		cmp	r3, #0
 1271 0016 0FD0     		beq	.L65
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1272              		.loc 1 1110 0
 1273 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1274 001a 002B     		cmp	r3, #0
 1275 001c 06D0     		beq	.L66
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 1276              		.loc 1 1113 0
 1277 001e FB68     		ldr	r3, [r7, #12]
 1278 0020 5B69     		ldr	r3, [r3, #20]
 1279 0022 43F08002 		orr	r2, r3, #128
 1280 0026 FB68     		ldr	r3, [r7, #12]
 1281 0028 5A61     		str	r2, [r3, #20]
 1282 002a 05E0     		b	.L65
 1283              	.L66:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 1284              		.loc 1 1118 0
 1285 002c FB68     		ldr	r3, [r7, #12]
 1286 002e 5B69     		ldr	r3, [r3, #20]
 1287 0030 23F08002 		bic	r2, r3, #128
 1288 0034 FB68     		ldr	r3, [r7, #12]
 1289 0036 5A61     		str	r2, [r3, #20]
 1290              	.L65:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 1291              		.loc 1 1123 0
 1292 0038 BB68     		ldr	r3, [r7, #8]
 1293 003a 802B     		cmp	r3, #128
 1294 003c 14D0     		beq	.L64
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1295              		.loc 1 1125 0
 1296 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1297 0040 002B     		cmp	r3, #0
 1298 0042 08D0     		beq	.L68
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 1299              		.loc 1 1128 0
 1300 0044 FB68     		ldr	r3, [r7, #12]
 1301 0046 1A68     		ldr	r2, [r3]
 1302 0048 BB68     		ldr	r3, [r7, #8]
 1303 004a 03F01E03 		and	r3, r3, #30
 1304 004e 1A43     		orrs	r2, r2, r3
 1305 0050 FB68     		ldr	r3, [r7, #12]
 1306 0052 1A60     		str	r2, [r3]
 1307 0054 08E0     		b	.L64
 1308              	.L68:
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 1309              		.loc 1 1133 0
 1310 0056 FB68     		ldr	r3, [r7, #12]
 1311 0058 1A68     		ldr	r2, [r3]
 1312 005a BB68     		ldr	r3, [r7, #8]
 1313 005c 03F01E03 		and	r3, r3, #30
 1314 0060 DB43     		mvns	r3, r3
 1315 0062 1A40     		ands	r2, r2, r3
 1316 0064 FB68     		ldr	r3, [r7, #12]
 1317 0066 1A60     		str	r2, [r3]
 1318              	.L64:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1319              		.loc 1 1136 0
 1320 0068 1437     		adds	r7, r7, #20
 1321 006a BD46     		mov	sp, r7
 1322              		@ sp needed
 1323 006c 5DF8047B 		ldr	r7, [sp], #4
 1324 0070 7047     		bx	lr
 1325              		.cfi_endproc
 1326              	.LFE126:
 1328 0072 00BF     		.section	.text.DMA_GetITStatus,"ax",%progbits
 1329              		.align	2
 1330              		.global	DMA_GetITStatus
 1331              		.thumb
 1332              		.thumb_func
 1334              	DMA_GetITStatus:
 1335              	.LFB127:
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1336              		.loc 1 1153 0
 1337              		.cfi_startproc
 1338              		@ args = 0, pretend = 0, frame = 24
 1339              		@ frame_needed = 1, uses_anonymous_args = 0
 1340              		@ link register save eliminated.
 1341 0000 80B4     		push	{r7}
 1342              	.LCFI51:
 1343              		.cfi_def_cfa_offset 4
 1344              		.cfi_offset 7, -4
 1345 0002 87B0     		sub	sp, sp, #28
 1346              	.LCFI52:
 1347              		.cfi_def_cfa_offset 32
 1348 0004 00AF     		add	r7, sp, #0
 1349              	.LCFI53:
 1350              		.cfi_def_cfa_register 7
 1351 0006 7860     		str	r0, [r7, #4]
 1352 0008 3960     		str	r1, [r7]
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 1353              		.loc 1 1154 0
 1354 000a 0023     		movs	r3, #0
 1355 000c FB75     		strb	r3, [r7, #23]
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 1356              		.loc 1 1156 0
 1357 000e 0023     		movs	r3, #0
 1358 0010 FB60     		str	r3, [r7, #12]
 1359 0012 0023     		movs	r3, #0
 1360 0014 BB60     		str	r3, [r7, #8]
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1361              		.loc 1 1163 0
 1362 0016 7A68     		ldr	r2, [r7, #4]
 1363 0018 46F20F43 		movw	r3, #25615
 1364 001c C4F20203 		movt	r3, 16386
 1365 0020 9A42     		cmp	r2, r3
 1366 0022 05D8     		bhi	.L70
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1367              		.loc 1 1166 0
 1368 0024 4FF4C043 		mov	r3, #24576
 1369 0028 C4F20203 		movt	r3, 16386
 1370 002c 3B61     		str	r3, [r7, #16]
 1371 002e 04E0     		b	.L71
 1372              	.L70:
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1373              		.loc 1 1171 0
 1374 0030 4FF4C843 		mov	r3, #25600
 1375 0034 C4F20203 		movt	r3, 16386
 1376 0038 3B61     		str	r3, [r7, #16]
 1377              	.L71:
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 1378              		.loc 1 1175 0
 1379 003a 3B68     		ldr	r3, [r7]
 1380 003c 23F0F023 		bic	r3, r3, #-268374016
 1381 0040 23F0C313 		bic	r3, r3, #12779715
 1382 0044 002B     		cmp	r3, #0
 1383 0046 0AD0     		beq	.L72
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 1384              		.loc 1 1178 0
 1385 0048 3B68     		ldr	r3, [r7]
 1386 004a DB0A     		lsrs	r3, r3, #11
 1387 004c 03F01E03 		and	r3, r3, #30
 1388 0050 FB60     		str	r3, [r7, #12]
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 1389              		.loc 1 1181 0
 1390 0052 7B68     		ldr	r3, [r7, #4]
 1391 0054 1A68     		ldr	r2, [r3]
 1392 0056 FB68     		ldr	r3, [r7, #12]
 1393 0058 1340     		ands	r3, r3, r2
 1394 005a BB60     		str	r3, [r7, #8]
 1395 005c 04E0     		b	.L73
 1396              	.L72:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 1397              		.loc 1 1186 0
 1398 005e 7B68     		ldr	r3, [r7, #4]
 1399 0060 5B69     		ldr	r3, [r3, #20]
 1400 0062 03F08003 		and	r3, r3, #128
 1401 0066 BB60     		str	r3, [r7, #8]
 1402              	.L73:
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1403              		.loc 1 1190 0
 1404 0068 3B68     		ldr	r3, [r7]
 1405 006a 03F00053 		and	r3, r3, #536870912
 1406 006e 002B     		cmp	r3, #0
 1407 0070 03D0     		beq	.L74
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 1408              		.loc 1 1193 0
 1409 0072 3B69     		ldr	r3, [r7, #16]
 1410 0074 5B68     		ldr	r3, [r3, #4]
 1411 0076 FB60     		str	r3, [r7, #12]
 1412 0078 02E0     		b	.L75
 1413              	.L74:
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 1414              		.loc 1 1198 0
 1415 007a 3B69     		ldr	r3, [r7, #16]
 1416 007c 1B68     		ldr	r3, [r3]
 1417 007e FB60     		str	r3, [r7, #12]
 1418              	.L75:
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1419              		.loc 1 1202 0
 1420 0080 FB68     		ldr	r3, [r7, #12]
 1421 0082 23F0F023 		bic	r3, r3, #-268374016
 1422 0086 23F08213 		bic	r3, r3, #8519810
 1423 008a FB60     		str	r3, [r7, #12]
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1424              		.loc 1 1205 0
 1425 008c FA68     		ldr	r2, [r7, #12]
 1426 008e 3B68     		ldr	r3, [r7]
 1427 0090 1340     		ands	r3, r3, r2
 1428 0092 002B     		cmp	r3, #0
 1429 0094 05D0     		beq	.L76
 1430              		.loc 1 1205 0 is_stmt 0 discriminator 1
 1431 0096 BB68     		ldr	r3, [r7, #8]
 1432 0098 002B     		cmp	r3, #0
 1433 009a 02D0     		beq	.L76
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1434              		.loc 1 1208 0 is_stmt 1
 1435 009c 0123     		movs	r3, #1
 1436 009e FB75     		strb	r3, [r7, #23]
 1437 00a0 01E0     		b	.L77
 1438              	.L76:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1439              		.loc 1 1213 0
 1440 00a2 0023     		movs	r3, #0
 1441 00a4 FB75     		strb	r3, [r7, #23]
 1442              	.L77:
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1443              		.loc 1 1217 0
 1444 00a6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1445              		.loc 1 1218 0
 1446 00a8 1846     		mov	r0, r3
 1447 00aa 1C37     		adds	r7, r7, #28
 1448 00ac BD46     		mov	sp, r7
 1449              		@ sp needed
 1450 00ae 5DF8047B 		ldr	r7, [sp], #4
 1451 00b2 7047     		bx	lr
 1452              		.cfi_endproc
 1453              	.LFE127:
 1455              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 1456              		.align	2
 1457              		.global	DMA_ClearITPendingBit
 1458              		.thumb
 1459              		.thumb_func
 1461              	DMA_ClearITPendingBit:
 1462              	.LFB128:
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1463              		.loc 1 1235 0
 1464              		.cfi_startproc
 1465              		@ args = 0, pretend = 0, frame = 16
 1466              		@ frame_needed = 1, uses_anonymous_args = 0
 1467              		@ link register save eliminated.
 1468 0000 80B4     		push	{r7}
 1469              	.LCFI54:
 1470              		.cfi_def_cfa_offset 4
 1471              		.cfi_offset 7, -4
 1472 0002 85B0     		sub	sp, sp, #20
 1473              	.LCFI55:
 1474              		.cfi_def_cfa_offset 24
 1475 0004 00AF     		add	r7, sp, #0
 1476              	.LCFI56:
 1477              		.cfi_def_cfa_register 7
 1478 0006 7860     		str	r0, [r7, #4]
 1479 0008 3960     		str	r1, [r7]
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1480              		.loc 1 1243 0
 1481 000a 7A68     		ldr	r2, [r7, #4]
 1482 000c 46F20F43 		movw	r3, #25615
 1483 0010 C4F20203 		movt	r3, 16386
 1484 0014 9A42     		cmp	r2, r3
 1485 0016 05D8     		bhi	.L80
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1486              		.loc 1 1246 0
 1487 0018 4FF4C043 		mov	r3, #24576
 1488 001c C4F20203 		movt	r3, 16386
 1489 0020 FB60     		str	r3, [r7, #12]
 1490 0022 04E0     		b	.L81
 1491              	.L80:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1492              		.loc 1 1251 0
 1493 0024 4FF4C843 		mov	r3, #25600
 1494 0028 C4F20203 		movt	r3, 16386
 1495 002c FB60     		str	r3, [r7, #12]
 1496              	.L81:
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1497              		.loc 1 1255 0
 1498 002e 3B68     		ldr	r3, [r7]
 1499 0030 03F00053 		and	r3, r3, #536870912
 1500 0034 002B     		cmp	r3, #0
 1501 0036 07D0     		beq	.L82
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1502              		.loc 1 1258 0
 1503 0038 3B68     		ldr	r3, [r7]
 1504 003a 23F0F023 		bic	r3, r3, #-268374016
 1505 003e 23F08213 		bic	r3, r3, #8519810
 1506 0042 FA68     		ldr	r2, [r7, #12]
 1507 0044 D360     		str	r3, [r2, #12]
 1508 0046 06E0     		b	.L79
 1509              	.L82:
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1510              		.loc 1 1263 0
 1511 0048 3B68     		ldr	r3, [r7]
 1512 004a 23F0F023 		bic	r3, r3, #-268374016
 1513 004e 23F08213 		bic	r3, r3, #8519810
 1514 0052 FA68     		ldr	r2, [r7, #12]
 1515 0054 9360     		str	r3, [r2, #8]
 1516              	.L79:
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1517              		.loc 1 1265 0
 1518 0056 1437     		adds	r7, r7, #20
 1519 0058 BD46     		mov	sp, r7
 1520              		@ sp needed
 1521 005a 5DF8047B 		ldr	r7, [sp], #4
 1522 005e 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE128:
 1526              		.text
 1527              	.Letext0:
 1528              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1529              		.file 3 "/usr/include/newlib/stdint.h"
 1530              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1531              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_dma.h"
 1532              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_dma.c
     /tmp/ccHXOkLp.s:20     .text.DMA_DeInit:0000000000000000 $t
     /tmp/ccHXOkLp.s:25     .text.DMA_DeInit:0000000000000000 DMA_DeInit
     /tmp/ccHXOkLp.s:297    .text.DMA_Init:0000000000000000 $t
     /tmp/ccHXOkLp.s:302    .text.DMA_Init:0000000000000000 DMA_Init
     /tmp/ccHXOkLp.s:430    .text.DMA_StructInit:0000000000000000 $t
     /tmp/ccHXOkLp.s:435    .text.DMA_StructInit:0000000000000000 DMA_StructInit
     /tmp/ccHXOkLp.s:523    .text.DMA_Cmd:0000000000000000 $t
     /tmp/ccHXOkLp.s:528    .text.DMA_Cmd:0000000000000000 DMA_Cmd
     /tmp/ccHXOkLp.s:577    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 $t
     /tmp/ccHXOkLp.s:582    .text.DMA_PeriphIncOffsetSizeConfig:0000000000000000 DMA_PeriphIncOffsetSizeConfig
     /tmp/ccHXOkLp.s:630    .text.DMA_FlowControllerConfig:0000000000000000 $t
     /tmp/ccHXOkLp.s:635    .text.DMA_FlowControllerConfig:0000000000000000 DMA_FlowControllerConfig
     /tmp/ccHXOkLp.s:683    .text.DMA_SetCurrDataCounter:0000000000000000 $t
     /tmp/ccHXOkLp.s:688    .text.DMA_SetCurrDataCounter:0000000000000000 DMA_SetCurrDataCounter
     /tmp/ccHXOkLp.s:722    .text.DMA_GetCurrDataCounter:0000000000000000 $t
     /tmp/ccHXOkLp.s:727    .text.DMA_GetCurrDataCounter:0000000000000000 DMA_GetCurrDataCounter
     /tmp/ccHXOkLp.s:760    .text.DMA_DoubleBufferModeConfig:0000000000000000 $t
     /tmp/ccHXOkLp.s:765    .text.DMA_DoubleBufferModeConfig:0000000000000000 DMA_DoubleBufferModeConfig
     /tmp/ccHXOkLp.s:818    .text.DMA_DoubleBufferModeCmd:0000000000000000 $t
     /tmp/ccHXOkLp.s:823    .text.DMA_DoubleBufferModeCmd:0000000000000000 DMA_DoubleBufferModeCmd
     /tmp/ccHXOkLp.s:872    .text.DMA_MemoryTargetConfig:0000000000000000 $t
     /tmp/ccHXOkLp.s:877    .text.DMA_MemoryTargetConfig:0000000000000000 DMA_MemoryTargetConfig
     /tmp/ccHXOkLp.s:922    .text.DMA_GetCurrentMemoryTarget:0000000000000000 $t
     /tmp/ccHXOkLp.s:927    .text.DMA_GetCurrentMemoryTarget:0000000000000000 DMA_GetCurrentMemoryTarget
     /tmp/ccHXOkLp.s:976    .text.DMA_GetCmdStatus:0000000000000000 $t
     /tmp/ccHXOkLp.s:981    .text.DMA_GetCmdStatus:0000000000000000 DMA_GetCmdStatus
     /tmp/ccHXOkLp.s:1030   .text.DMA_GetFIFOStatus:0000000000000000 $t
     /tmp/ccHXOkLp.s:1035   .text.DMA_GetFIFOStatus:0000000000000000 DMA_GetFIFOStatus
     /tmp/ccHXOkLp.s:1074   .text.DMA_GetFlagStatus:0000000000000000 $t
     /tmp/ccHXOkLp.s:1079   .text.DMA_GetFlagStatus:0000000000000000 DMA_GetFlagStatus
     /tmp/ccHXOkLp.s:1170   .text.DMA_ClearFlag:0000000000000000 $t
     /tmp/ccHXOkLp.s:1175   .text.DMA_ClearFlag:0000000000000000 DMA_ClearFlag
     /tmp/ccHXOkLp.s:1241   .text.DMA_ITConfig:0000000000000000 $t
     /tmp/ccHXOkLp.s:1246   .text.DMA_ITConfig:0000000000000000 DMA_ITConfig
     /tmp/ccHXOkLp.s:1329   .text.DMA_GetITStatus:0000000000000000 $t
     /tmp/ccHXOkLp.s:1334   .text.DMA_GetITStatus:0000000000000000 DMA_GetITStatus
     /tmp/ccHXOkLp.s:1456   .text.DMA_ClearITPendingBit:0000000000000000 $t
     /tmp/ccHXOkLp.s:1461   .text.DMA_ClearITPendingBit:0000000000000000 DMA_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
