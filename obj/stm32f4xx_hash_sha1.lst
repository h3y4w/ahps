   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_hash_sha1.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HASH_SHA1,"ax",%progbits
  20              		.align	2
  21              		.global	HASH_SHA1
  22              		.thumb
  23              		.thumb_func
  25              	HASH_SHA1:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @file    stm32f4xx_hash_sha1.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief   This file provides high level functions to compute the HASH SHA1 and
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          HMAC SHA1 Digest of an input message.
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          It uses the stm32f4xx_hash.c/.h drivers to access the STM32F4xx HASH
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          peripheral.
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *  @verbatim
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          ===================================================================
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *                                   How to use this driver
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          ===================================================================
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          1. Enable The HASH controller clock using 
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_HASH, ENABLE); function.
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          2. Calculate the HASH SHA1 Digest using HASH_SHA1() function.
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          3. Calculate the HMAC SHA1 Digest using HMAC_SHA1() function.
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *  @endverbatim
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @attention
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ******************************************************************************
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Includes ------------------------------------------------------------------*/
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** #include "stm32f4xx_hash.h"
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH 
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief HASH driver modules
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private typedef -----------------------------------------------------------*/
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private define ------------------------------------------------------------*/
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** #define SHA1BUSY_TIMEOUT    ((uint32_t) 0x00010000)
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private macro -------------------------------------------------------------*/
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private variables ---------------------------------------------------------*/
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private function prototypes -----------------------------------------------*/
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /* Private functions ---------------------------------------------------------*/
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Private_Functions
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */ 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /** @defgroup HASH_Group6 High Level SHA1 functions
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  *  @brief   High Level SHA1 Hash and HMAC functions 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** @verbatim   
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****                           High Level SHA1 Hash and HMAC functions
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****  ===============================================================================
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** @endverbatim
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @{
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /**
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HASH SHA1 digest.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** {
  28              		.loc 1 88 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 48
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 8DB0     		sub	sp, sp, #52
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 72
  44 0004 0E46     		mov	r6, r1
  45 0006 1746     		mov	r7, r2
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
  46              		.loc 1 91 0
  47 0008 0024     		movs	r4, #0
  48 000a ADF80A40 		strh	r4, [sp, #10]	@ movhi
  49              	.LVL1:
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
  50              		.loc 1 93 0
  51 000e 0194     		str	r4, [sp, #4]
  52              	.LVL2:
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
  53              		.loc 1 96 0
  54 0010 0546     		mov	r5, r0
  55              	.LVL3:
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
  56              		.loc 1 100 0
  57 0012 01F00303 		and	r3, r1, #3
  58 0016 DB00     		lsls	r3, r3, #3
  59 0018 ADF80A30 		strh	r3, [sp, #10]	@ movhi
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
  60              		.loc 1 103 0
  61 001c FFF7FEFF 		bl	HASH_DeInit
  62              	.LVL4:
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
  63              		.loc 1 106 0
  64 0020 0894     		str	r4, [sp, #32]
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
  65              		.loc 1 107 0
  66 0022 0994     		str	r4, [sp, #36]
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
  67              		.loc 1 108 0
  68 0024 2023     		movs	r3, #32
  69 0026 0A93     		str	r3, [sp, #40]
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
  70              		.loc 1 109 0
  71 0028 0DEB0300 		add	r0, sp, r3
  72 002c FFF7FEFF 		bl	HASH_Init
  73              	.LVL5:
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the data */
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
  74              		.loc 1 112 0
  75 0030 BDF80A00 		ldrh	r0, [sp, #10]
  76 0034 80B2     		uxth	r0, r0
  77 0036 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
  78              	.LVL6:
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Write the Input block in the IN FIFO */
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Ilen; i+=4)
  79              		.loc 1 115 0
  80 003a 04E0     		b	.L2
  81              	.LVL7:
  82              	.L3:
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)inputaddr);
  83              		.loc 1 117 0 discriminator 2
  84 003c 55F8040B 		ldr	r0, [r5], #4
  85              	.LVL8:
  86 0040 FFF7FEFF 		bl	HASH_DataIn
  87              	.LVL9:
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
  88              		.loc 1 115 0 discriminator 2
  89 0044 0434     		adds	r4, r4, #4
  90              	.LVL10:
  91              	.L2:
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
  92              		.loc 1 115 0 is_stmt 0 discriminator 1
  93 0046 B442     		cmp	r4, r6
  94 0048 F8D3     		bcc	.L3
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     inputaddr+=4;
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
  95              		.loc 1 122 0 is_stmt 1
  96 004a FFF7FEFF 		bl	HASH_StartDigest
  97              	.LVL11:
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   do
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
  98              		.loc 1 127 0
  99 004e 0824     		movs	r4, #8
 100              	.LVL12:
 101              	.L5:
 102              		.loc 1 127 0 is_stmt 0 discriminator 1
 103 0050 2046     		mov	r0, r4
 104 0052 FFF7FEFF 		bl	HASH_GetFlagStatus
 105              	.LVL13:
 106 0056 0246     		mov	r2, r0
 107              	.LVL14:
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     counter++;
 108              		.loc 1 128 0 is_stmt 1 discriminator 1
 109 0058 019B     		ldr	r3, [sp, #4]
 110 005a 0133     		adds	r3, r3, #1
 111 005c 0193     		str	r3, [sp, #4]
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 112              		.loc 1 129 0 discriminator 1
 113 005e 019B     		ldr	r3, [sp, #4]
 114 0060 B3F5803F 		cmp	r3, #65536
 115 0064 01D0     		beq	.L4
 116 0066 0028     		cmp	r0, #0
 117 0068 F2D1     		bne	.L5
 118              	.L4:
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 119              		.loc 1 133 0
 120 006a 0020     		movs	r0, #0
 121              	.LVL15:
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 122              		.loc 1 131 0
 123 006c 9AB9     		cbnz	r2, .L6
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   else
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Read the message digest */
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_GetDigest(&SHA1_MessageDigest);
 124              		.loc 1 138 0
 125 006e 03A8     		add	r0, sp, #12
 126 0070 FFF7FEFF 		bl	HASH_GetDigest
 127              	.LVL16:
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 128              		.loc 1 139 0
 129 0074 039B     		ldr	r3, [sp, #12]
 130              	.LVL17:
 131              	.LBB22:
 132              	.LBB23:
 133              		.file 2 "libs/CMSIS/Include/core_cmInstr.h"
   1:libs/CMSIS/Include/core_cmInstr.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:libs/CMSIS/Include/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:libs/CMSIS/Include/core_cmInstr.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmInstr.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cmInstr.h ****  *
   7:libs/CMSIS/Include/core_cmInstr.h ****  * @note
   8:libs/CMSIS/Include/core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmInstr.h ****  *
  10:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  11:libs/CMSIS/Include/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmInstr.h ****  *
  15:libs/CMSIS/Include/core_cmInstr.h ****  * @par
  16:libs/CMSIS/Include/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmInstr.h ****  *
  22:libs/CMSIS/Include/core_cmInstr.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmInstr.h **** 
  24:libs/CMSIS/Include/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:libs/CMSIS/Include/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:libs/CMSIS/Include/core_cmInstr.h **** 
  27:libs/CMSIS/Include/core_cmInstr.h **** 
  28:libs/CMSIS/Include/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:libs/CMSIS/Include/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:libs/CMSIS/Include/core_cmInstr.h ****   Access to dedicated instructions
  31:libs/CMSIS/Include/core_cmInstr.h ****   @{
  32:libs/CMSIS/Include/core_cmInstr.h **** */
  33:libs/CMSIS/Include/core_cmInstr.h **** 
  34:libs/CMSIS/Include/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmInstr.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmInstr.h **** 
  37:libs/CMSIS/Include/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmInstr.h **** #endif
  40:libs/CMSIS/Include/core_cmInstr.h **** 
  41:libs/CMSIS/Include/core_cmInstr.h **** 
  42:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
  43:libs/CMSIS/Include/core_cmInstr.h **** 
  44:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:libs/CMSIS/Include/core_cmInstr.h ****  */
  46:libs/CMSIS/Include/core_cmInstr.h **** #define __NOP                             __nop
  47:libs/CMSIS/Include/core_cmInstr.h **** 
  48:libs/CMSIS/Include/core_cmInstr.h **** 
  49:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:libs/CMSIS/Include/core_cmInstr.h **** 
  51:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
  53:libs/CMSIS/Include/core_cmInstr.h ****  */
  54:libs/CMSIS/Include/core_cmInstr.h **** #define __WFI                             __wfi
  55:libs/CMSIS/Include/core_cmInstr.h **** 
  56:libs/CMSIS/Include/core_cmInstr.h **** 
  57:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
  58:libs/CMSIS/Include/core_cmInstr.h **** 
  59:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:libs/CMSIS/Include/core_cmInstr.h ****  */
  62:libs/CMSIS/Include/core_cmInstr.h **** #define __WFE                             __wfe
  63:libs/CMSIS/Include/core_cmInstr.h **** 
  64:libs/CMSIS/Include/core_cmInstr.h **** 
  65:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
  66:libs/CMSIS/Include/core_cmInstr.h **** 
  67:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:libs/CMSIS/Include/core_cmInstr.h ****  */
  69:libs/CMSIS/Include/core_cmInstr.h **** #define __SEV                             __sev
  70:libs/CMSIS/Include/core_cmInstr.h **** 
  71:libs/CMSIS/Include/core_cmInstr.h **** 
  72:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:libs/CMSIS/Include/core_cmInstr.h **** 
  74:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:libs/CMSIS/Include/core_cmInstr.h ****  */
  78:libs/CMSIS/Include/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:libs/CMSIS/Include/core_cmInstr.h **** 
  80:libs/CMSIS/Include/core_cmInstr.h **** 
  81:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:libs/CMSIS/Include/core_cmInstr.h **** 
  83:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:libs/CMSIS/Include/core_cmInstr.h ****  */
  86:libs/CMSIS/Include/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:libs/CMSIS/Include/core_cmInstr.h **** 
  88:libs/CMSIS/Include/core_cmInstr.h **** 
  89:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:libs/CMSIS/Include/core_cmInstr.h **** 
  91:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:libs/CMSIS/Include/core_cmInstr.h ****  */
  94:libs/CMSIS/Include/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:libs/CMSIS/Include/core_cmInstr.h **** 
  96:libs/CMSIS/Include/core_cmInstr.h **** 
  97:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:libs/CMSIS/Include/core_cmInstr.h **** 
  99:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:libs/CMSIS/Include/core_cmInstr.h **** 
 101:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 103:libs/CMSIS/Include/core_cmInstr.h ****  */
 104:libs/CMSIS/Include/core_cmInstr.h **** #define __REV                             __rev
 105:libs/CMSIS/Include/core_cmInstr.h **** 
 106:libs/CMSIS/Include/core_cmInstr.h **** 
 107:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:libs/CMSIS/Include/core_cmInstr.h **** 
 109:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:libs/CMSIS/Include/core_cmInstr.h **** 
 111:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 113:libs/CMSIS/Include/core_cmInstr.h ****  */
 114:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:libs/CMSIS/Include/core_cmInstr.h **** {
 116:libs/CMSIS/Include/core_cmInstr.h ****   rev16 r0, r0
 117:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 118:libs/CMSIS/Include/core_cmInstr.h **** }
 119:libs/CMSIS/Include/core_cmInstr.h **** 
 120:libs/CMSIS/Include/core_cmInstr.h **** 
 121:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:libs/CMSIS/Include/core_cmInstr.h **** 
 123:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:libs/CMSIS/Include/core_cmInstr.h **** 
 125:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 127:libs/CMSIS/Include/core_cmInstr.h ****  */
 128:libs/CMSIS/Include/core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:libs/CMSIS/Include/core_cmInstr.h **** {
 130:libs/CMSIS/Include/core_cmInstr.h ****   revsh r0, r0
 131:libs/CMSIS/Include/core_cmInstr.h ****   bx lr
 132:libs/CMSIS/Include/core_cmInstr.h **** }
 133:libs/CMSIS/Include/core_cmInstr.h **** 
 134:libs/CMSIS/Include/core_cmInstr.h **** 
 135:libs/CMSIS/Include/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:libs/CMSIS/Include/core_cmInstr.h **** 
 137:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:libs/CMSIS/Include/core_cmInstr.h **** 
 139:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:libs/CMSIS/Include/core_cmInstr.h **** 
 141:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 143:libs/CMSIS/Include/core_cmInstr.h ****  */
 144:libs/CMSIS/Include/core_cmInstr.h **** #define __RBIT                            __rbit
 145:libs/CMSIS/Include/core_cmInstr.h **** 
 146:libs/CMSIS/Include/core_cmInstr.h **** 
 147:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:libs/CMSIS/Include/core_cmInstr.h **** 
 149:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:libs/CMSIS/Include/core_cmInstr.h **** 
 151:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:libs/CMSIS/Include/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:libs/CMSIS/Include/core_cmInstr.h ****  */
 154:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:libs/CMSIS/Include/core_cmInstr.h **** 
 156:libs/CMSIS/Include/core_cmInstr.h **** 
 157:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:libs/CMSIS/Include/core_cmInstr.h **** 
 159:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:libs/CMSIS/Include/core_cmInstr.h **** 
 161:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:libs/CMSIS/Include/core_cmInstr.h ****  */
 164:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:libs/CMSIS/Include/core_cmInstr.h **** 
 166:libs/CMSIS/Include/core_cmInstr.h **** 
 167:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:libs/CMSIS/Include/core_cmInstr.h **** 
 169:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:libs/CMSIS/Include/core_cmInstr.h **** 
 171:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:libs/CMSIS/Include/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:libs/CMSIS/Include/core_cmInstr.h ****  */
 174:libs/CMSIS/Include/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:libs/CMSIS/Include/core_cmInstr.h **** 
 176:libs/CMSIS/Include/core_cmInstr.h **** 
 177:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:libs/CMSIS/Include/core_cmInstr.h **** 
 179:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:libs/CMSIS/Include/core_cmInstr.h **** 
 181:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 182:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 184:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 185:libs/CMSIS/Include/core_cmInstr.h ****  */
 186:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:libs/CMSIS/Include/core_cmInstr.h **** 
 188:libs/CMSIS/Include/core_cmInstr.h **** 
 189:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:libs/CMSIS/Include/core_cmInstr.h **** 
 191:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:libs/CMSIS/Include/core_cmInstr.h **** 
 193:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 194:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 196:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 197:libs/CMSIS/Include/core_cmInstr.h ****  */
 198:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:libs/CMSIS/Include/core_cmInstr.h **** 
 200:libs/CMSIS/Include/core_cmInstr.h **** 
 201:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:libs/CMSIS/Include/core_cmInstr.h **** 
 203:libs/CMSIS/Include/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:libs/CMSIS/Include/core_cmInstr.h **** 
 205:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to store
 206:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:libs/CMSIS/Include/core_cmInstr.h ****     \return          0  Function succeeded
 208:libs/CMSIS/Include/core_cmInstr.h ****     \return          1  Function failed
 209:libs/CMSIS/Include/core_cmInstr.h ****  */
 210:libs/CMSIS/Include/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:libs/CMSIS/Include/core_cmInstr.h **** 
 212:libs/CMSIS/Include/core_cmInstr.h **** 
 213:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:libs/CMSIS/Include/core_cmInstr.h **** 
 215:libs/CMSIS/Include/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:libs/CMSIS/Include/core_cmInstr.h **** 
 217:libs/CMSIS/Include/core_cmInstr.h ****  */
 218:libs/CMSIS/Include/core_cmInstr.h **** #define __CLREX                           __clrex
 219:libs/CMSIS/Include/core_cmInstr.h **** 
 220:libs/CMSIS/Include/core_cmInstr.h **** 
 221:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Signed Saturate
 222:libs/CMSIS/Include/core_cmInstr.h **** 
 223:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates a signed value.
 224:libs/CMSIS/Include/core_cmInstr.h **** 
 225:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 228:libs/CMSIS/Include/core_cmInstr.h ****  */
 229:libs/CMSIS/Include/core_cmInstr.h **** #define __SSAT                            __ssat
 230:libs/CMSIS/Include/core_cmInstr.h **** 
 231:libs/CMSIS/Include/core_cmInstr.h **** 
 232:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:libs/CMSIS/Include/core_cmInstr.h **** 
 234:libs/CMSIS/Include/core_cmInstr.h ****     This function saturates an unsigned value.
 235:libs/CMSIS/Include/core_cmInstr.h **** 
 236:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:libs/CMSIS/Include/core_cmInstr.h ****     \return             Saturated value
 239:libs/CMSIS/Include/core_cmInstr.h ****  */
 240:libs/CMSIS/Include/core_cmInstr.h **** #define __USAT                            __usat
 241:libs/CMSIS/Include/core_cmInstr.h **** 
 242:libs/CMSIS/Include/core_cmInstr.h **** 
 243:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Count leading zeros
 244:libs/CMSIS/Include/core_cmInstr.h **** 
 245:libs/CMSIS/Include/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:libs/CMSIS/Include/core_cmInstr.h **** 
 247:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:libs/CMSIS/Include/core_cmInstr.h ****     \return             number of leading zeros in value
 249:libs/CMSIS/Include/core_cmInstr.h ****  */
 250:libs/CMSIS/Include/core_cmInstr.h **** #define __CLZ                             __clz 
 251:libs/CMSIS/Include/core_cmInstr.h **** 
 252:libs/CMSIS/Include/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:libs/CMSIS/Include/core_cmInstr.h **** 
 254:libs/CMSIS/Include/core_cmInstr.h **** 
 255:libs/CMSIS/Include/core_cmInstr.h **** 
 256:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:libs/CMSIS/Include/core_cmInstr.h **** /* IAR iccarm specific functions */
 258:libs/CMSIS/Include/core_cmInstr.h **** 
 259:libs/CMSIS/Include/core_cmInstr.h **** #include <cmsis_iar.h>
 260:libs/CMSIS/Include/core_cmInstr.h **** 
 261:libs/CMSIS/Include/core_cmInstr.h **** 
 262:libs/CMSIS/Include/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:libs/CMSIS/Include/core_cmInstr.h **** /* GNU gcc specific functions */
 264:libs/CMSIS/Include/core_cmInstr.h **** 
 265:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  No Operation
 266:libs/CMSIS/Include/core_cmInstr.h **** 
 267:libs/CMSIS/Include/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:libs/CMSIS/Include/core_cmInstr.h ****  */
 269:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:libs/CMSIS/Include/core_cmInstr.h **** {
 271:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("nop");
 272:libs/CMSIS/Include/core_cmInstr.h **** }
 273:libs/CMSIS/Include/core_cmInstr.h **** 
 274:libs/CMSIS/Include/core_cmInstr.h **** 
 275:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:libs/CMSIS/Include/core_cmInstr.h **** 
 277:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:libs/CMSIS/Include/core_cmInstr.h ****     until one of a number of events occurs.
 279:libs/CMSIS/Include/core_cmInstr.h ****  */
 280:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:libs/CMSIS/Include/core_cmInstr.h **** {
 282:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfi");
 283:libs/CMSIS/Include/core_cmInstr.h **** }
 284:libs/CMSIS/Include/core_cmInstr.h **** 
 285:libs/CMSIS/Include/core_cmInstr.h **** 
 286:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Wait For Event
 287:libs/CMSIS/Include/core_cmInstr.h **** 
 288:libs/CMSIS/Include/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:libs/CMSIS/Include/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:libs/CMSIS/Include/core_cmInstr.h ****  */
 291:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:libs/CMSIS/Include/core_cmInstr.h **** {
 293:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("wfe");
 294:libs/CMSIS/Include/core_cmInstr.h **** }
 295:libs/CMSIS/Include/core_cmInstr.h **** 
 296:libs/CMSIS/Include/core_cmInstr.h **** 
 297:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Send Event
 298:libs/CMSIS/Include/core_cmInstr.h **** 
 299:libs/CMSIS/Include/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 300:libs/CMSIS/Include/core_cmInstr.h ****  */
 301:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __SEV(void)
 302:libs/CMSIS/Include/core_cmInstr.h **** {
 303:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("sev");
 304:libs/CMSIS/Include/core_cmInstr.h **** }
 305:libs/CMSIS/Include/core_cmInstr.h **** 
 306:libs/CMSIS/Include/core_cmInstr.h **** 
 307:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 308:libs/CMSIS/Include/core_cmInstr.h **** 
 309:libs/CMSIS/Include/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
 310:libs/CMSIS/Include/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
 311:libs/CMSIS/Include/core_cmInstr.h ****     memory, after the instruction has been completed.
 312:libs/CMSIS/Include/core_cmInstr.h ****  */
 313:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __ISB(void)
 314:libs/CMSIS/Include/core_cmInstr.h **** {
 315:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("isb");
 316:libs/CMSIS/Include/core_cmInstr.h **** }
 317:libs/CMSIS/Include/core_cmInstr.h **** 
 318:libs/CMSIS/Include/core_cmInstr.h **** 
 319:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 320:libs/CMSIS/Include/core_cmInstr.h **** 
 321:libs/CMSIS/Include/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
 322:libs/CMSIS/Include/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 323:libs/CMSIS/Include/core_cmInstr.h ****  */
 324:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DSB(void)
 325:libs/CMSIS/Include/core_cmInstr.h **** {
 326:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dsb");
 327:libs/CMSIS/Include/core_cmInstr.h **** }
 328:libs/CMSIS/Include/core_cmInstr.h **** 
 329:libs/CMSIS/Include/core_cmInstr.h **** 
 330:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Data Memory Barrier
 331:libs/CMSIS/Include/core_cmInstr.h **** 
 332:libs/CMSIS/Include/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
 333:libs/CMSIS/Include/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 334:libs/CMSIS/Include/core_cmInstr.h ****  */
 335:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
 336:libs/CMSIS/Include/core_cmInstr.h **** {
 337:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("dmb");
 338:libs/CMSIS/Include/core_cmInstr.h **** }
 339:libs/CMSIS/Include/core_cmInstr.h **** 
 340:libs/CMSIS/Include/core_cmInstr.h **** 
 341:libs/CMSIS/Include/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 342:libs/CMSIS/Include/core_cmInstr.h **** 
 343:libs/CMSIS/Include/core_cmInstr.h ****     This function reverses the byte order in integer value.
 344:libs/CMSIS/Include/core_cmInstr.h **** 
 345:libs/CMSIS/Include/core_cmInstr.h ****     \param [in]    value  Value to reverse
 346:libs/CMSIS/Include/core_cmInstr.h ****     \return               Reversed value
 347:libs/CMSIS/Include/core_cmInstr.h ****  */
 348:libs/CMSIS/Include/core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
 349:libs/CMSIS/Include/core_cmInstr.h **** {
 350:libs/CMSIS/Include/core_cmInstr.h ****   uint32_t result;
 351:libs/CMSIS/Include/core_cmInstr.h ****   
 352:libs/CMSIS/Include/core_cmInstr.h ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 134              		.loc 2 352 0
 135              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 136 0076 1BBA     		rev r3, r3
 137              	@ 0 "" 2
 138              	.LVL18:
 139              		.thumb
 140              	.LBE23:
 141              	.LBE22:
 142              		.loc 1 139 0
 143 0078 3B60     		str	r3, [r7]
 144              	.LVL19:
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 145              		.loc 1 141 0
 146 007a 049B     		ldr	r3, [sp, #16]
 147              	.LVL20:
 148              	.LBB24:
 149              	.LBB25:
 150              		.loc 2 352 0
 151              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 152 007c 1BBA     		rev r3, r3
 153              	@ 0 "" 2
 154              	.LVL21:
 155              		.thumb
 156              	.LBE25:
 157              	.LBE24:
 158              		.loc 1 141 0
 159 007e 7B60     		str	r3, [r7, #4]
 160              	.LVL22:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 161              		.loc 1 143 0
 162 0080 059B     		ldr	r3, [sp, #20]
 163              	.LVL23:
 164              	.LBB26:
 165              	.LBB27:
 166              		.loc 2 352 0
 167              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 168 0082 1BBA     		rev r3, r3
 169              	@ 0 "" 2
 170              	.LVL24:
 171              		.thumb
 172              	.LBE27:
 173              	.LBE26:
 174              		.loc 1 143 0
 175 0084 BB60     		str	r3, [r7, #8]
 176              	.LVL25:
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 177              		.loc 1 145 0
 178 0086 069B     		ldr	r3, [sp, #24]
 179              	.LVL26:
 180              	.LBB28:
 181              	.LBB29:
 182              		.loc 2 352 0
 183              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 184 0088 1BBA     		rev r3, r3
 185              	@ 0 "" 2
 186              	.LVL27:
 187              		.thumb
 188              	.LBE29:
 189              	.LBE28:
 190              		.loc 1 145 0
 191 008a FB60     		str	r3, [r7, #12]
 192              	.LVL28:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     outputaddr+=4;
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 193              		.loc 1 147 0
 194 008c 079B     		ldr	r3, [sp, #28]
 195              	.LVL29:
 196              	.LBB30:
 197              	.LBB31:
 198              		.loc 2 352 0
 199              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 200 008e 1BBA     		rev r3, r3
 201              	@ 0 "" 2
 202              	.LVL30:
 203              		.thumb
 204              	.LBE31:
 205              	.LBE30:
 206              		.loc 1 147 0
 207 0090 3B61     		str	r3, [r7, #16]
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 208              		.loc 1 95 0
 209 0092 0120     		movs	r0, #1
 210 0094 FFE7     		b	.L6
 211              	.LVL31:
 212              	.L6:
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   return status;
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** }
 213              		.loc 1 150 0
 214 0096 0DB0     		add	sp, sp, #52
 215              		@ sp needed
 216 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 217              		.cfi_endproc
 218              	.LFE110:
 220 009a 00BF     		.section	.text.HMAC_SHA1,"ax",%progbits
 221              		.align	2
 222              		.global	HMAC_SHA1
 223              		.thumb
 224              		.thumb_func
 226              	HMAC_SHA1:
 227              	.LFB111:
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** /**
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @brief  Compute the HMAC SHA1 digest.
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Key: pointer to the Key used for HMAC.
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Keylen: length of the Key used for HMAC.  
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Input: pointer to the Input buffer to be treated.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Ilen: length of the Input buffer.
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @param  Output: the returned digest
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   * @retval An ErrorStatus enumeration value:
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - SUCCESS: digest computation done
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   *          - ERROR: digest computation failed
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   */
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****                       uint32_t Ilen, uint8_t Output[20])
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** {
 228              		.loc 1 165 0
 229              		.cfi_startproc
 230              		@ args = 4, pretend = 0, frame = 48
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL32:
 233 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 234              	.LCFI2:
 235              		.cfi_def_cfa_offset 28
 236              		.cfi_offset 4, -28
 237              		.cfi_offset 5, -24
 238              		.cfi_offset 6, -20
 239              		.cfi_offset 7, -16
 240              		.cfi_offset 8, -12
 241              		.cfi_offset 9, -8
 242              		.cfi_offset 14, -4
 243 0004 8DB0     		sub	sp, sp, #52
 244              	.LCFI3:
 245              		.cfi_def_cfa_offset 80
 246 0006 8146     		mov	r9, r0
 247 0008 0D46     		mov	r5, r1
 248 000a 1F46     		mov	r7, r3
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_InitTypeDef SHA1_HASH_InitStructure;
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_MsgDigest SHA1_MessageDigest;
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitsdata = 0;
 249              		.loc 1 168 0
 250 000c 0024     		movs	r4, #0
 251 000e ADF80A40 		strh	r4, [sp, #10]	@ movhi
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint16_t nbvalidbitskey = 0;
 252              		.loc 1 169 0
 253 0012 ADF80840 		strh	r4, [sp, #8]	@ movhi
 254              	.LVL33:
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t i = 0;
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   __IO uint32_t counter = 0;
 255              		.loc 1 171 0
 256 0016 0194     		str	r4, [sp, #4]
 257              	.LVL34:
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t busystatus = 0;
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   ErrorStatus status = SUCCESS;
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 258              		.loc 1 174 0
 259 0018 8046     		mov	r8, r0
 260              	.LVL35:
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t inputaddr  = (uint32_t)Input;
 261              		.loc 1 175 0
 262 001a 1646     		mov	r6, r2
 263              	.LVL36:
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t outputaddr = (uint32_t)Output;
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Input data */
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   nbvalidbitsdata = 8 * (Ilen % 4);
 264              		.loc 1 179 0
 265 001c 03F00303 		and	r3, r3, #3
 266              	.LVL37:
 267 0020 DB00     		lsls	r3, r3, #3
 268 0022 ADF80A30 		strh	r3, [sp, #10]	@ movhi
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Number of valid bits in last word of the Key */
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   nbvalidbitskey = 8 * (Keylen % 4);
 269              		.loc 1 182 0
 270 0026 01F00303 		and	r3, r1, #3
 271 002a DB00     		lsls	r3, r3, #3
 272 002c ADF80830 		strh	r3, [sp, #8]	@ movhi
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH peripheral initialization */
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_DeInit();
 273              		.loc 1 185 0
 274 0030 FFF7FEFF 		bl	HASH_DeInit
 275              	.LVL38:
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* HASH Configuration */
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 276              		.loc 1 188 0
 277 0034 0894     		str	r4, [sp, #32]
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 278              		.loc 1 189 0
 279 0036 4023     		movs	r3, #64
 280 0038 0993     		str	r3, [sp, #36]
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 281              		.loc 1 190 0
 282 003a 2023     		movs	r3, #32
 283 003c 0A93     		str	r3, [sp, #40]
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   if(Keylen > 64)
 284              		.loc 1 191 0
 285 003e 402D     		cmp	r5, #64
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* HMAC long Key */
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 286              		.loc 1 194 0
 287 0040 8CBF     		ite	hi
 288 0042 4FF48033 		movhi	r3, #65536
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   else
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* HMAC short Key */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 289              		.loc 1 199 0
 290 0046 0023     		movls	r3, #0
 291 0048 0B93     		str	r3, [sp, #44]
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_Init(&SHA1_HASH_InitStructure);
 292              		.loc 1 201 0
 293 004a 08A8     		add	r0, sp, #32
 294 004c FFF7FEFF 		bl	HASH_Init
 295              	.LVL39:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Configure the number of valid bits in last word of the Key */
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 296              		.loc 1 204 0
 297 0050 BDF80800 		ldrh	r0, [sp, #8]
 298 0054 80B2     		uxth	r0, r0
 299 0056 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 300              	.LVL40:
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Write the Key */
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   for(i=0; i<Keylen; i+=4)
 301              		.loc 1 207 0
 302 005a 0024     		movs	r4, #0
 303 005c 04E0     		b	.L12
 304              	.LVL41:
 305              	.L13:
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_DataIn(*(uint32_t*)keyaddr);
 306              		.loc 1 209 0 discriminator 2
 307 005e 59F8040B 		ldr	r0, [r9], #4
 308              	.LVL42:
 309 0062 FFF7FEFF 		bl	HASH_DataIn
 310              	.LVL43:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 311              		.loc 1 207 0 discriminator 2
 312 0066 0434     		adds	r4, r4, #4
 313              	.LVL44:
 314              	.L12:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 315              		.loc 1 207 0 is_stmt 0 discriminator 1
 316 0068 AC42     		cmp	r4, r5
 317 006a F8D3     		bcc	.L13
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     keyaddr+=4;
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* Start the HASH processor */
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   HASH_StartDigest();
 318              		.loc 1 214 0 is_stmt 1
 319 006c FFF7FEFF 		bl	HASH_StartDigest
 320              	.LVL45:
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   /* wait until the Busy flag is RESET */
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   do
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 321              		.loc 1 219 0
 322 0070 4FF00809 		mov	r9, #8
 323              	.LVL46:
 324              	.L15:
 325              		.loc 1 219 0 is_stmt 0 discriminator 1
 326 0074 4846     		mov	r0, r9
 327 0076 FFF7FEFF 		bl	HASH_GetFlagStatus
 328              	.LVL47:
 329 007a 0346     		mov	r3, r0
 330              	.LVL48:
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     counter++;
 331              		.loc 1 220 0 is_stmt 1 discriminator 1
 332 007c 019C     		ldr	r4, [sp, #4]
 333 007e 0134     		adds	r4, r4, #1
 334 0080 0194     		str	r4, [sp, #4]
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 335              		.loc 1 221 0 discriminator 1
 336 0082 019C     		ldr	r4, [sp, #4]
 337 0084 B4F5803F 		cmp	r4, #65536
 338 0088 01D0     		beq	.L14
 339 008a 0028     		cmp	r0, #0
 340 008c F2D1     		bne	.L15
 341              	.L14:
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   if (busystatus != RESET)
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****      status = ERROR;
 342              		.loc 1 225 0
 343 008e 0020     		movs	r0, #0
 344              	.LVL49:
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 345              		.loc 1 223 0
 346 0090 002B     		cmp	r3, #0
 347 0092 59D1     		bne	.L16
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   else
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Configure the number of valid bits in last word of the Input data */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 348              		.loc 1 230 0
 349 0094 BDF80A00 		ldrh	r0, [sp, #10]
 350 0098 80B2     		uxth	r0, r0
 351 009a FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 352              	.LVL50:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Write the Input block in the IN FIFO */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     for(i=0; i<Ilen; i+=4)
 353              		.loc 1 233 0
 354 009e 0024     		movs	r4, #0
 355 00a0 04E0     		b	.L17
 356              	.LVL51:
 357              	.L18:
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       HASH_DataIn(*(uint32_t*)inputaddr);
 358              		.loc 1 235 0 discriminator 2
 359 00a2 56F8040B 		ldr	r0, [r6], #4
 360              	.LVL52:
 361 00a6 FFF7FEFF 		bl	HASH_DataIn
 362              	.LVL53:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 363              		.loc 1 233 0 discriminator 2
 364 00aa 0434     		adds	r4, r4, #4
 365              	.LVL54:
 366              	.L17:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 367              		.loc 1 233 0 is_stmt 0 discriminator 1
 368 00ac BC42     		cmp	r4, r7
 369 00ae F8D3     		bcc	.L18
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       inputaddr+=4;
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* Start the HASH processor */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     HASH_StartDigest();
 370              		.loc 1 240 0 is_stmt 1
 371 00b0 FFF7FEFF 		bl	HASH_StartDigest
 372              	.LVL55:
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     /* wait until the Busy flag is RESET */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     counter =0;
 373              		.loc 1 244 0
 374 00b4 0023     		movs	r3, #0
 375 00b6 0193     		str	r3, [sp, #4]
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     do
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 376              		.loc 1 247 0
 377 00b8 0824     		movs	r4, #8
 378              	.LVL56:
 379              	.L20:
 380              		.loc 1 247 0 is_stmt 0 discriminator 1
 381 00ba 2046     		mov	r0, r4
 382 00bc FFF7FEFF 		bl	HASH_GetFlagStatus
 383              	.LVL57:
 384 00c0 0246     		mov	r2, r0
 385              	.LVL58:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       counter++;
 386              		.loc 1 248 0 is_stmt 1 discriminator 1
 387 00c2 019B     		ldr	r3, [sp, #4]
 388 00c4 0133     		adds	r3, r3, #1
 389 00c6 0193     		str	r3, [sp, #4]
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 390              		.loc 1 249 0 discriminator 1
 391 00c8 019B     		ldr	r3, [sp, #4]
 392 00ca B3F5803F 		cmp	r3, #65536
 393 00ce 01D0     		beq	.L19
 394 00d0 0028     		cmp	r0, #0
 395 00d2 F2D1     		bne	.L20
 396              	.L19:
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     if (busystatus != RESET)
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       status = ERROR;
 397              		.loc 1 253 0
 398 00d4 0020     		movs	r0, #0
 399              	.LVL59:
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {
 400              		.loc 1 251 0
 401 00d6 002A     		cmp	r2, #0
 402 00d8 36D1     		bne	.L16
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     else
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     {  
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* Configure the number of valid bits in last word of the Key */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 403              		.loc 1 258 0
 404 00da BDF80800 		ldrh	r0, [sp, #8]
 405 00de 80B2     		uxth	r0, r0
 406 00e0 FFF7FEFF 		bl	HASH_SetLastWordValidBitsNbr
 407              	.LVL60:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* Write the Key */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       keyaddr = (uint32_t)Key;
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       for(i=0; i<Keylen; i+=4)
 408              		.loc 1 262 0
 409 00e4 0024     		movs	r4, #0
 410 00e6 04E0     		b	.L21
 411              	.LVL61:
 412              	.L22:
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         HASH_DataIn(*(uint32_t*)keyaddr);
 413              		.loc 1 264 0 discriminator 2
 414 00e8 58F8040B 		ldr	r0, [r8], #4
 415              	.LVL62:
 416 00ec FFF7FEFF 		bl	HASH_DataIn
 417              	.LVL63:
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 418              		.loc 1 262 0 discriminator 2
 419 00f0 0434     		adds	r4, r4, #4
 420              	.LVL64:
 421              	.L21:
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 422              		.loc 1 262 0 is_stmt 0 discriminator 1
 423 00f2 AC42     		cmp	r4, r5
 424 00f4 F8D3     		bcc	.L22
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         keyaddr+=4;
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* Start the HASH processor */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       HASH_StartDigest();
 425              		.loc 1 269 0 is_stmt 1
 426 00f6 FFF7FEFF 		bl	HASH_StartDigest
 427              	.LVL65:
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       /* wait until the Busy flag is RESET */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       counter =0;
 428              		.loc 1 272 0
 429 00fa 0023     		movs	r3, #0
 430 00fc 0193     		str	r3, [sp, #4]
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       do
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 431              		.loc 1 275 0
 432 00fe 0824     		movs	r4, #8
 433              	.LVL66:
 434              	.L24:
 435              		.loc 1 275 0 is_stmt 0 discriminator 1
 436 0100 2046     		mov	r0, r4
 437 0102 FFF7FEFF 		bl	HASH_GetFlagStatus
 438              	.LVL67:
 439 0106 0246     		mov	r2, r0
 440              	.LVL68:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         counter++;
 441              		.loc 1 276 0 is_stmt 1 discriminator 1
 442 0108 019B     		ldr	r3, [sp, #4]
 443 010a 0133     		adds	r3, r3, #1
 444 010c 0193     		str	r3, [sp, #4]
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 445              		.loc 1 277 0 discriminator 1
 446 010e 019B     		ldr	r3, [sp, #4]
 447 0110 B3F5803F 		cmp	r3, #65536
 448 0114 01D0     		beq	.L23
 449 0116 0028     		cmp	r0, #0
 450 0118 F2D1     		bne	.L24
 451              	.L23:
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       if (busystatus != RESET)
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         status = ERROR;
 452              		.loc 1 281 0
 453 011a 0020     		movs	r0, #0
 454              	.LVL69:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 455              		.loc 1 279 0
 456 011c A2B9     		cbnz	r2, .L16
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       else
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       {
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         /* Read the message digest */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         HASH_GetDigest(&SHA1_MessageDigest);
 457              		.loc 1 286 0
 458 011e 03A8     		add	r0, sp, #12
 459 0120 FFF7FEFF 		bl	HASH_GetDigest
 460              	.LVL70:
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 461              		.loc 1 287 0
 462 0124 039B     		ldr	r3, [sp, #12]
 463              	.LVL71:
 464              	.LBB32:
 465              	.LBB33:
 466              		.loc 2 352 0
 467              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 468 0126 1BBA     		rev r3, r3
 469              	@ 0 "" 2
 470              	.LVL72:
 471              		.thumb
 472              	.LBE33:
 473              	.LBE32:
 474              		.loc 1 287 0
 475 0128 149A     		ldr	r2, [sp, #80]
 476 012a 1360     		str	r3, [r2]
 477              	.LVL73:
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 478              		.loc 1 289 0
 479 012c 049B     		ldr	r3, [sp, #16]
 480              	.LVL74:
 481              	.LBB34:
 482              	.LBB35:
 483              		.loc 2 352 0
 484              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 485 012e 1BBA     		rev r3, r3
 486              	@ 0 "" 2
 487              	.LVL75:
 488              		.thumb
 489              	.LBE35:
 490              	.LBE34:
 491              		.loc 1 289 0
 492 0130 5360     		str	r3, [r2, #4]
 493              	.LVL76:
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 494              		.loc 1 291 0
 495 0132 059B     		ldr	r3, [sp, #20]
 496              	.LVL77:
 497              	.LBB36:
 498              	.LBB37:
 499              		.loc 2 352 0
 500              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 501 0134 1BBA     		rev r3, r3
 502              	@ 0 "" 2
 503              	.LVL78:
 504              		.thumb
 505              	.LBE37:
 506              	.LBE36:
 507              		.loc 1 291 0
 508 0136 9360     		str	r3, [r2, #8]
 509              	.LVL79:
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 510              		.loc 1 293 0
 511 0138 069B     		ldr	r3, [sp, #24]
 512              	.LVL80:
 513              	.LBB38:
 514              	.LBB39:
 515              		.loc 2 352 0
 516              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 517 013a 1BBA     		rev r3, r3
 518              	@ 0 "" 2
 519              	.LVL81:
 520              		.thumb
 521              	.LBE39:
 522              	.LBE38:
 523              		.loc 1 293 0
 524 013c D360     		str	r3, [r2, #12]
 525              	.LVL82:
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         outputaddr+=4;
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****         *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 526              		.loc 1 295 0
 527 013e 079B     		ldr	r3, [sp, #28]
 528              	.LVL83:
 529              	.LBB40:
 530              	.LBB41:
 531              		.loc 2 352 0
 532              	@ 352 "libs/CMSIS/Include/core_cmInstr.h" 1
 533 0140 1BBA     		rev r3, r3
 534              	@ 0 "" 2
 535              	.LVL84:
 536              		.thumb
 537              	.LBE41:
 538              	.LBE40:
 539              		.loc 1 295 0
 540 0142 1361     		str	r3, [r2, #16]
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   uint32_t keyaddr    = (uint32_t)Key;
 541              		.loc 1 173 0
 542 0144 0120     		movs	r0, #1
 543 0146 FFE7     		b	.L16
 544              	.LVL85:
 545              	.L16:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****       }
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****     }  
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c ****   return status;  
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_hash_sha1.c **** }
 546              		.loc 1 300 0
 547 0148 0DB0     		add	sp, sp, #52
 548              		@ sp needed
 549 014a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 550              		.cfi_endproc
 551              	.LFE111:
 553 014e 00BF     		.text
 554              	.Letext0:
 555              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 556              		.file 4 "/usr/include/newlib/stdint.h"
 557              		.file 5 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 558              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_hash.h"
 559              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hash_sha1.c
     /tmp/ccOTEtrN.s:20     .text.HASH_SHA1:0000000000000000 $t
     /tmp/ccOTEtrN.s:25     .text.HASH_SHA1:0000000000000000 HASH_SHA1
     /tmp/ccOTEtrN.s:221    .text.HMAC_SHA1:0000000000000000 $t
     /tmp/ccOTEtrN.s:226    .text.HMAC_SHA1:0000000000000000 HMAC_SHA1
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.89.9ba18c49c32633e81d41c07ca4cb2830

UNDEFINED SYMBOLS
HASH_DeInit
HASH_Init
HASH_SetLastWordValidBitsNbr
HASH_DataIn
HASH_StartDigest
HASH_GetFlagStatus
HASH_GetDigest
