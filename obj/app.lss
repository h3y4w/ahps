
obj/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084d4  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  0800865c  0800865c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08008664  08008664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800866c  0800866c  0001066c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000008ec  20000000  08008670  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005fc  200008f0  08008f5c  000188f0  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20000eec  08008f5c  00018eec  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000188ec  2**0
                  CONTENTS, READONLY
  9 .comment      0000001f  00000000  00000000  0001891a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001eea5  00000000  00000000  00018939  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000058fd  00000000  00000000  000377de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00014f40  00000000  00000000  0003d0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000013f0  00000000  00000000  00052020  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000015b0  00000000  00000000  00053410  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00013454  00000000  00000000  000549c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c41f  00000000  00000000  00067e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00064577  00000000  00000000  00074233  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00002d9c  00000000  00000000  000d87ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f640 00ec 	movw	r0, #2284	; 0x8ec
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	200008ef 	.word	0x200008ef

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f640 00ec 	movw	r0, #2284	; 0x8ec
 80001b6:	f640 03ec 	movw	r3, #2284	; 0x8ec
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f640 04f0 	movw	r4, #2288	; 0x8f0
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f248 6044 	movw	r0, #34372	; 0x8644
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f248 6044 	movw	r0, #34372	; 0x8644
 8000220:	f640 01f4 	movw	r1, #2292	; 0x8f4
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f640 00ec 	movw	r0, #2284	; 0x8ec
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <memcpy>:
 8000250:	4684      	mov	ip, r0
 8000252:	ea41 0300 	orr.w	r3, r1, r0
 8000256:	f013 0303 	ands.w	r3, r3, #3
 800025a:	d16d      	bne.n	8000338 <memcpy+0xe8>
 800025c:	3a40      	subs	r2, #64	; 0x40
 800025e:	d341      	bcc.n	80002e4 <memcpy+0x94>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	3a40      	subs	r2, #64	; 0x40
 80002e2:	d2bd      	bcs.n	8000260 <memcpy+0x10>
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	d311      	bcc.n	800030c <memcpy+0xbc>
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	3a10      	subs	r2, #16
 800030a:	d2ed      	bcs.n	80002e8 <memcpy+0x98>
 800030c:	320c      	adds	r2, #12
 800030e:	d305      	bcc.n	800031c <memcpy+0xcc>
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	3a04      	subs	r2, #4
 800031a:	d2f9      	bcs.n	8000310 <memcpy+0xc0>
 800031c:	3204      	adds	r2, #4
 800031e:	d008      	beq.n	8000332 <memcpy+0xe2>
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d301      	bcc.n	8000332 <memcpy+0xe2>
 800032e:	880b      	ldrh	r3, [r1, #0]
 8000330:	8003      	strh	r3, [r0, #0]
 8000332:	4660      	mov	r0, ip
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	2a08      	cmp	r2, #8
 800033a:	d313      	bcc.n	8000364 <memcpy+0x114>
 800033c:	078b      	lsls	r3, r1, #30
 800033e:	d08d      	beq.n	800025c <memcpy+0xc>
 8000340:	f010 0303 	ands.w	r3, r0, #3
 8000344:	d08a      	beq.n	800025c <memcpy+0xc>
 8000346:	f1c3 0304 	rsb	r3, r3, #4
 800034a:	1ad2      	subs	r2, r2, r3
 800034c:	07db      	lsls	r3, r3, #31
 800034e:	bf1c      	itt	ne
 8000350:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000354:	f800 3b01 	strbne.w	r3, [r0], #1
 8000358:	d380      	bcc.n	800025c <memcpy+0xc>
 800035a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800035e:	f820 3b02 	strh.w	r3, [r0], #2
 8000362:	e77b      	b.n	800025c <memcpy+0xc>
 8000364:	3a04      	subs	r2, #4
 8000366:	d3d9      	bcc.n	800031c <memcpy+0xcc>
 8000368:	3a01      	subs	r2, #1
 800036a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800036e:	f800 3b01 	strb.w	r3, [r0], #1
 8000372:	d2f9      	bcs.n	8000368 <memcpy+0x118>
 8000374:	780b      	ldrb	r3, [r1, #0]
 8000376:	7003      	strb	r3, [r0, #0]
 8000378:	784b      	ldrb	r3, [r1, #1]
 800037a:	7043      	strb	r3, [r0, #1]
 800037c:	788b      	ldrb	r3, [r1, #2]
 800037e:	7083      	strb	r3, [r0, #2]
 8000380:	4660      	mov	r0, ip
 8000382:	4770      	bx	lr

08000384 <__aeabi_drsub>:
 8000384:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000388:	e002      	b.n	8000390 <__adddf3>
 800038a:	bf00      	nop

0800038c <__aeabi_dsub>:
 800038c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000390 <__adddf3>:
 8000390:	b530      	push	{r4, r5, lr}
 8000392:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000396:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	bf1f      	itttt	ne
 80003a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b6:	f000 80e2 	beq.w	800057e <__adddf3+0x1ee>
 80003ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003c2:	bfb8      	it	lt
 80003c4:	426d      	neglt	r5, r5
 80003c6:	dd0c      	ble.n	80003e2 <__adddf3+0x52>
 80003c8:	442c      	add	r4, r5
 80003ca:	ea80 0202 	eor.w	r2, r0, r2
 80003ce:	ea81 0303 	eor.w	r3, r1, r3
 80003d2:	ea82 0000 	eor.w	r0, r2, r0
 80003d6:	ea83 0101 	eor.w	r1, r3, r1
 80003da:	ea80 0202 	eor.w	r2, r0, r2
 80003de:	ea81 0303 	eor.w	r3, r1, r3
 80003e2:	2d36      	cmp	r5, #54	; 0x36
 80003e4:	bf88      	it	hi
 80003e6:	bd30      	pophi	{r4, r5, pc}
 80003e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x70>
 80003fa:	4240      	negs	r0, r0
 80003fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000400:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000404:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000408:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x84>
 800040e:	4252      	negs	r2, r2
 8000410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000414:	ea94 0f05 	teq	r4, r5
 8000418:	f000 80a7 	beq.w	800056a <__adddf3+0x1da>
 800041c:	f1a4 0401 	sub.w	r4, r4, #1
 8000420:	f1d5 0e20 	rsbs	lr, r5, #32
 8000424:	db0d      	blt.n	8000442 <__adddf3+0xb2>
 8000426:	fa02 fc0e 	lsl.w	ip, r2, lr
 800042a:	fa22 f205 	lsr.w	r2, r2, r5
 800042e:	1880      	adds	r0, r0, r2
 8000430:	f141 0100 	adc.w	r1, r1, #0
 8000434:	fa03 f20e 	lsl.w	r2, r3, lr
 8000438:	1880      	adds	r0, r0, r2
 800043a:	fa43 f305 	asr.w	r3, r3, r5
 800043e:	4159      	adcs	r1, r3
 8000440:	e00e      	b.n	8000460 <__adddf3+0xd0>
 8000442:	f1a5 0520 	sub.w	r5, r5, #32
 8000446:	f10e 0e20 	add.w	lr, lr, #32
 800044a:	2a01      	cmp	r2, #1
 800044c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000450:	bf28      	it	cs
 8000452:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	18c0      	adds	r0, r0, r3
 800045c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	d507      	bpl.n	8000476 <__adddf3+0xe6>
 8000466:	f04f 0e00 	mov.w	lr, #0
 800046a:	f1dc 0c00 	rsbs	ip, ip, #0
 800046e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000472:	eb6e 0101 	sbc.w	r1, lr, r1
 8000476:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800047a:	d31b      	bcc.n	80004b4 <__adddf3+0x124>
 800047c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000480:	d30c      	bcc.n	800049c <__adddf3+0x10c>
 8000482:	0849      	lsrs	r1, r1, #1
 8000484:	ea5f 0030 	movs.w	r0, r0, rrx
 8000488:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800048c:	f104 0401 	add.w	r4, r4, #1
 8000490:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000494:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000498:	f080 809a 	bcs.w	80005d0 <__adddf3+0x240>
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	bf08      	it	eq
 80004a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a6:	f150 0000 	adcs.w	r0, r0, #0
 80004aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ae:	ea41 0105 	orr.w	r1, r1, r5
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b8:	4140      	adcs	r0, r0
 80004ba:	eb41 0101 	adc.w	r1, r1, r1
 80004be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004c2:	f1a4 0401 	sub.w	r4, r4, #1
 80004c6:	d1e9      	bne.n	800049c <__adddf3+0x10c>
 80004c8:	f091 0f00 	teq	r1, #0
 80004cc:	bf04      	itt	eq
 80004ce:	4601      	moveq	r1, r0
 80004d0:	2000      	moveq	r0, #0
 80004d2:	fab1 f381 	clz	r3, r1
 80004d6:	bf08      	it	eq
 80004d8:	3320      	addeq	r3, #32
 80004da:	f1a3 030b 	sub.w	r3, r3, #11
 80004de:	f1b3 0220 	subs.w	r2, r3, #32
 80004e2:	da0c      	bge.n	80004fe <__adddf3+0x16e>
 80004e4:	320c      	adds	r2, #12
 80004e6:	dd08      	ble.n	80004fa <__adddf3+0x16a>
 80004e8:	f102 0c14 	add.w	ip, r2, #20
 80004ec:	f1c2 020c 	rsb	r2, r2, #12
 80004f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f4:	fa21 f102 	lsr.w	r1, r1, r2
 80004f8:	e00c      	b.n	8000514 <__adddf3+0x184>
 80004fa:	f102 0214 	add.w	r2, r2, #20
 80004fe:	bfd8      	it	le
 8000500:	f1c2 0c20 	rsble	ip, r2, #32
 8000504:	fa01 f102 	lsl.w	r1, r1, r2
 8000508:	fa20 fc0c 	lsr.w	ip, r0, ip
 800050c:	bfdc      	itt	le
 800050e:	ea41 010c 	orrle.w	r1, r1, ip
 8000512:	4090      	lslle	r0, r2
 8000514:	1ae4      	subs	r4, r4, r3
 8000516:	bfa2      	ittt	ge
 8000518:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800051c:	4329      	orrge	r1, r5
 800051e:	bd30      	popge	{r4, r5, pc}
 8000520:	ea6f 0404 	mvn.w	r4, r4
 8000524:	3c1f      	subs	r4, #31
 8000526:	da1c      	bge.n	8000562 <__adddf3+0x1d2>
 8000528:	340c      	adds	r4, #12
 800052a:	dc0e      	bgt.n	800054a <__adddf3+0x1ba>
 800052c:	f104 0414 	add.w	r4, r4, #20
 8000530:	f1c4 0220 	rsb	r2, r4, #32
 8000534:	fa20 f004 	lsr.w	r0, r0, r4
 8000538:	fa01 f302 	lsl.w	r3, r1, r2
 800053c:	ea40 0003 	orr.w	r0, r0, r3
 8000540:	fa21 f304 	lsr.w	r3, r1, r4
 8000544:	ea45 0103 	orr.w	r1, r5, r3
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	f1c4 040c 	rsb	r4, r4, #12
 800054e:	f1c4 0220 	rsb	r2, r4, #32
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 f304 	lsl.w	r3, r1, r4
 800055a:	ea40 0003 	orr.w	r0, r0, r3
 800055e:	4629      	mov	r1, r5
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	fa21 f004 	lsr.w	r0, r1, r4
 8000566:	4629      	mov	r1, r5
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f094 0f00 	teq	r4, #0
 800056e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000572:	bf06      	itte	eq
 8000574:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000578:	3401      	addeq	r4, #1
 800057a:	3d01      	subne	r5, #1
 800057c:	e74e      	b.n	800041c <__adddf3+0x8c>
 800057e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000582:	bf18      	it	ne
 8000584:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000588:	d029      	beq.n	80005de <__adddf3+0x24e>
 800058a:	ea94 0f05 	teq	r4, r5
 800058e:	bf08      	it	eq
 8000590:	ea90 0f02 	teqeq	r0, r2
 8000594:	d005      	beq.n	80005a2 <__adddf3+0x212>
 8000596:	ea54 0c00 	orrs.w	ip, r4, r0
 800059a:	bf04      	itt	eq
 800059c:	4619      	moveq	r1, r3
 800059e:	4610      	moveq	r0, r2
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	ea91 0f03 	teq	r1, r3
 80005a6:	bf1e      	ittt	ne
 80005a8:	2100      	movne	r1, #0
 80005aa:	2000      	movne	r0, #0
 80005ac:	bd30      	popne	{r4, r5, pc}
 80005ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005b2:	d105      	bne.n	80005c0 <__adddf3+0x230>
 80005b4:	0040      	lsls	r0, r0, #1
 80005b6:	4149      	adcs	r1, r1
 80005b8:	bf28      	it	cs
 80005ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd30      	pop	{r4, r5, pc}
 80005c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c4:	bf3c      	itt	cc
 80005c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ca:	bd30      	popcc	{r4, r5, pc}
 80005cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d8:	f04f 0000 	mov.w	r0, #0
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e2:	bf1a      	itte	ne
 80005e4:	4619      	movne	r1, r3
 80005e6:	4610      	movne	r0, r2
 80005e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005ec:	bf1c      	itt	ne
 80005ee:	460b      	movne	r3, r1
 80005f0:	4602      	movne	r2, r0
 80005f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f6:	bf06      	itte	eq
 80005f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005fc:	ea91 0f03 	teqeq	r1, r3
 8000600:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop

08000608 <__aeabi_ui2d>:
 8000608:	f090 0f00 	teq	r0, #0
 800060c:	bf04      	itt	eq
 800060e:	2100      	moveq	r1, #0
 8000610:	4770      	bxeq	lr
 8000612:	b530      	push	{r4, r5, lr}
 8000614:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000618:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061c:	f04f 0500 	mov.w	r5, #0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e750      	b.n	80004c8 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_i2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000640:	bf48      	it	mi
 8000642:	4240      	negmi	r0, r0
 8000644:	f04f 0100 	mov.w	r1, #0
 8000648:	e73e      	b.n	80004c8 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_f2d>:
 800064c:	0042      	lsls	r2, r0, #1
 800064e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000652:	ea4f 0131 	mov.w	r1, r1, rrx
 8000656:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800065a:	bf1f      	itttt	ne
 800065c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000664:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000668:	4770      	bxne	lr
 800066a:	f092 0f00 	teq	r2, #0
 800066e:	bf14      	ite	ne
 8000670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 7460 	mov.w	r4, #896	; 0x380
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	e720      	b.n	80004c8 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_ul2d>:
 8000688:	ea50 0201 	orrs.w	r2, r0, r1
 800068c:	bf08      	it	eq
 800068e:	4770      	bxeq	lr
 8000690:	b530      	push	{r4, r5, lr}
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	e00a      	b.n	80006ae <__aeabi_l2d+0x16>

08000698 <__aeabi_l2d>:
 8000698:	ea50 0201 	orrs.w	r2, r0, r1
 800069c:	bf08      	it	eq
 800069e:	4770      	bxeq	lr
 80006a0:	b530      	push	{r4, r5, lr}
 80006a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006a6:	d502      	bpl.n	80006ae <__aeabi_l2d+0x16>
 80006a8:	4240      	negs	r0, r0
 80006aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ba:	f43f aedc 	beq.w	8000476 <__adddf3+0xe6>
 80006be:	f04f 0203 	mov.w	r2, #3
 80006c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c6:	bf18      	it	ne
 80006c8:	3203      	addne	r2, #3
 80006ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ce:	bf18      	it	ne
 80006d0:	3203      	addne	r2, #3
 80006d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006d6:	f1c2 0320 	rsb	r3, r2, #32
 80006da:	fa00 fc03 	lsl.w	ip, r0, r3
 80006de:	fa20 f002 	lsr.w	r0, r0, r2
 80006e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80006e6:	ea40 000e 	orr.w	r0, r0, lr
 80006ea:	fa21 f102 	lsr.w	r1, r1, r2
 80006ee:	4414      	add	r4, r2
 80006f0:	e6c1      	b.n	8000476 <__adddf3+0xe6>
 80006f2:	bf00      	nop

080006f4 <__aeabi_dmul>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000702:	bf1d      	ittte	ne
 8000704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000708:	ea94 0f0c 	teqne	r4, ip
 800070c:	ea95 0f0c 	teqne	r5, ip
 8000710:	f000 f8de 	bleq	80008d0 <__aeabi_dmul+0x1dc>
 8000714:	442c      	add	r4, r5
 8000716:	ea81 0603 	eor.w	r6, r1, r3
 800071a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800071e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000722:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000726:	bf18      	it	ne
 8000728:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000734:	d038      	beq.n	80007a8 <__aeabi_dmul+0xb4>
 8000736:	fba0 ce02 	umull	ip, lr, r0, r2
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000742:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000746:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074a:	f04f 0600 	mov.w	r6, #0
 800074e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000752:	f09c 0f00 	teq	ip, #0
 8000756:	bf18      	it	ne
 8000758:	f04e 0e01 	orrne.w	lr, lr, #1
 800075c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000760:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000764:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000768:	d204      	bcs.n	8000774 <__aeabi_dmul+0x80>
 800076a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800076e:	416d      	adcs	r5, r5
 8000770:	eb46 0606 	adc.w	r6, r6, r6
 8000774:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000778:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800077c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000780:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000784:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000788:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800078c:	bf88      	it	hi
 800078e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000792:	d81e      	bhi.n	80007d2 <__aeabi_dmul+0xde>
 8000794:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000798:	bf08      	it	eq
 800079a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800079e:	f150 0000 	adcs.w	r0, r0, #0
 80007a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007ac:	ea46 0101 	orr.w	r1, r6, r1
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007bc:	bfc2      	ittt	gt
 80007be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007c6:	bd70      	popgt	{r4, r5, r6, pc}
 80007c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007cc:	f04f 0e00 	mov.w	lr, #0
 80007d0:	3c01      	subs	r4, #1
 80007d2:	f300 80ab 	bgt.w	800092c <__aeabi_dmul+0x238>
 80007d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007da:	bfde      	ittt	le
 80007dc:	2000      	movle	r0, #0
 80007de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e2:	bd70      	pople	{r4, r5, r6, pc}
 80007e4:	f1c4 0400 	rsb	r4, r4, #0
 80007e8:	3c20      	subs	r4, #32
 80007ea:	da35      	bge.n	8000858 <__aeabi_dmul+0x164>
 80007ec:	340c      	adds	r4, #12
 80007ee:	dc1b      	bgt.n	8000828 <__aeabi_dmul+0x134>
 80007f0:	f104 0414 	add.w	r4, r4, #20
 80007f4:	f1c4 0520 	rsb	r5, r4, #32
 80007f8:	fa00 f305 	lsl.w	r3, r0, r5
 80007fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000800:	fa01 f205 	lsl.w	r2, r1, r5
 8000804:	ea40 0002 	orr.w	r0, r0, r2
 8000808:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800080c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000814:	fa21 f604 	lsr.w	r6, r1, r4
 8000818:	eb42 0106 	adc.w	r1, r2, r6
 800081c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000820:	bf08      	it	eq
 8000822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f1c4 040c 	rsb	r4, r4, #12
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f304 	lsl.w	r3, r0, r4
 8000834:	fa20 f005 	lsr.w	r0, r0, r5
 8000838:	fa01 f204 	lsl.w	r2, r1, r4
 800083c:	ea40 0002 	orr.w	r0, r0, r2
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000848:	f141 0100 	adc.w	r1, r1, #0
 800084c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000850:	bf08      	it	eq
 8000852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f205 	lsl.w	r2, r0, r5
 8000860:	ea4e 0e02 	orr.w	lr, lr, r2
 8000864:	fa20 f304 	lsr.w	r3, r0, r4
 8000868:	fa01 f205 	lsl.w	r2, r1, r5
 800086c:	ea43 0302 	orr.w	r3, r3, r2
 8000870:	fa21 f004 	lsr.w	r0, r1, r4
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	fa21 f204 	lsr.w	r2, r1, r4
 800087c:	ea20 0002 	bic.w	r0, r0, r2
 8000880:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000888:	bf08      	it	eq
 800088a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f094 0f00 	teq	r4, #0
 8000894:	d10f      	bne.n	80008b6 <__aeabi_dmul+0x1c2>
 8000896:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089a:	0040      	lsls	r0, r0, #1
 800089c:	eb41 0101 	adc.w	r1, r1, r1
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf08      	it	eq
 80008a6:	3c01      	subeq	r4, #1
 80008a8:	d0f7      	beq.n	800089a <__aeabi_dmul+0x1a6>
 80008aa:	ea41 0106 	orr.w	r1, r1, r6
 80008ae:	f095 0f00 	teq	r5, #0
 80008b2:	bf18      	it	ne
 80008b4:	4770      	bxne	lr
 80008b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ba:	0052      	lsls	r2, r2, #1
 80008bc:	eb43 0303 	adc.w	r3, r3, r3
 80008c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c4:	bf08      	it	eq
 80008c6:	3d01      	subeq	r5, #1
 80008c8:	d0f7      	beq.n	80008ba <__aeabi_dmul+0x1c6>
 80008ca:	ea43 0306 	orr.w	r3, r3, r6
 80008ce:	4770      	bx	lr
 80008d0:	ea94 0f0c 	teq	r4, ip
 80008d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d8:	bf18      	it	ne
 80008da:	ea95 0f0c 	teqne	r5, ip
 80008de:	d00c      	beq.n	80008fa <__aeabi_dmul+0x206>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	d1d1      	bne.n	8000890 <__aeabi_dmul+0x19c>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fe:	bf06      	itte	eq
 8000900:	4610      	moveq	r0, r2
 8000902:	4619      	moveq	r1, r3
 8000904:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000908:	d019      	beq.n	800093e <__aeabi_dmul+0x24a>
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	d102      	bne.n	8000916 <__aeabi_dmul+0x222>
 8000910:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000914:	d113      	bne.n	800093e <__aeabi_dmul+0x24a>
 8000916:	ea95 0f0c 	teq	r5, ip
 800091a:	d105      	bne.n	8000928 <__aeabi_dmul+0x234>
 800091c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000920:	bf1c      	itt	ne
 8000922:	4610      	movne	r0, r2
 8000924:	4619      	movne	r1, r3
 8000926:	d10a      	bne.n	800093e <__aeabi_dmul+0x24a>
 8000928:	ea81 0103 	eor.w	r1, r1, r3
 800092c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000930:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	bd70      	pop	{r4, r5, r6, pc}
 800093e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000942:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000946:	bd70      	pop	{r4, r5, r6, pc}

08000948 <__aeabi_ddiv>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000956:	bf1d      	ittte	ne
 8000958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800095c:	ea94 0f0c 	teqne	r4, ip
 8000960:	ea95 0f0c 	teqne	r5, ip
 8000964:	f000 f8a7 	bleq	8000ab6 <__aeabi_ddiv+0x16e>
 8000968:	eba4 0405 	sub.w	r4, r4, r5
 800096c:	ea81 0e03 	eor.w	lr, r1, r3
 8000970:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000974:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000978:	f000 8088 	beq.w	8000a8c <__aeabi_ddiv+0x144>
 800097c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000980:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000984:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000988:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800098c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000990:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000994:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000998:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800099c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a0:	429d      	cmp	r5, r3
 80009a2:	bf08      	it	eq
 80009a4:	4296      	cmpeq	r6, r2
 80009a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ae:	d202      	bcs.n	80009b6 <__aeabi_ddiv+0x6e>
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	1ab6      	subs	r6, r6, r2
 80009b8:	eb65 0503 	sbc.w	r5, r5, r3
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d2:	bf22      	ittt	cs
 80009d4:	1ab6      	subcs	r6, r6, r2
 80009d6:	4675      	movcs	r5, lr
 80009d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ea:	bf22      	ittt	cs
 80009ec:	1ab6      	subcs	r6, r6, r2
 80009ee:	4675      	movcs	r5, lr
 80009f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a02:	bf22      	ittt	cs
 8000a04:	1ab6      	subcs	r6, r6, r2
 8000a06:	4675      	movcs	r5, lr
 8000a08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a12:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1a:	bf22      	ittt	cs
 8000a1c:	1ab6      	subcs	r6, r6, r2
 8000a1e:	4675      	movcs	r5, lr
 8000a20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a24:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a28:	d018      	beq.n	8000a5c <__aeabi_ddiv+0x114>
 8000a2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a46:	d1c0      	bne.n	80009ca <__aeabi_ddiv+0x82>
 8000a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a4c:	d10b      	bne.n	8000a66 <__aeabi_ddiv+0x11e>
 8000a4e:	ea41 0100 	orr.w	r1, r1, r0
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5a:	e7b6      	b.n	80009ca <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a60:	bf04      	itt	eq
 8000a62:	4301      	orreq	r1, r0
 8000a64:	2000      	moveq	r0, #0
 8000a66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6a:	bf88      	it	hi
 8000a6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a70:	f63f aeaf 	bhi.w	80007d2 <__aeabi_dmul+0xde>
 8000a74:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a78:	bf04      	itt	eq
 8000a7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a82:	f150 0000 	adcs.w	r0, r0, #0
 8000a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a98:	bfc2      	ittt	gt
 8000a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa2:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa8:	f04f 0e00 	mov.w	lr, #0
 8000aac:	3c01      	subs	r4, #1
 8000aae:	e690      	b.n	80007d2 <__aeabi_dmul+0xde>
 8000ab0:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab4:	e68d      	b.n	80007d2 <__aeabi_dmul+0xde>
 8000ab6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aba:	ea94 0f0c 	teq	r4, ip
 8000abe:	bf08      	it	eq
 8000ac0:	ea95 0f0c 	teqeq	r5, ip
 8000ac4:	f43f af3b 	beq.w	800093e <__aeabi_dmul+0x24a>
 8000ac8:	ea94 0f0c 	teq	r4, ip
 8000acc:	d10a      	bne.n	8000ae4 <__aeabi_ddiv+0x19c>
 8000ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad2:	f47f af34 	bne.w	800093e <__aeabi_dmul+0x24a>
 8000ad6:	ea95 0f0c 	teq	r5, ip
 8000ada:	f47f af25 	bne.w	8000928 <__aeabi_dmul+0x234>
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	e72c      	b.n	800093e <__aeabi_dmul+0x24a>
 8000ae4:	ea95 0f0c 	teq	r5, ip
 8000ae8:	d106      	bne.n	8000af8 <__aeabi_ddiv+0x1b0>
 8000aea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aee:	f43f aefd 	beq.w	80008ec <__aeabi_dmul+0x1f8>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e722      	b.n	800093e <__aeabi_dmul+0x24a>
 8000af8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000afc:	bf18      	it	ne
 8000afe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b02:	f47f aec5 	bne.w	8000890 <__aeabi_dmul+0x19c>
 8000b06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0a:	f47f af0d 	bne.w	8000928 <__aeabi_dmul+0x234>
 8000b0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b12:	f47f aeeb 	bne.w	80008ec <__aeabi_dmul+0x1f8>
 8000b16:	e712      	b.n	800093e <__aeabi_dmul+0x24a>

08000b18 <__gedf2>:
 8000b18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b1c:	e006      	b.n	8000b2c <__cmpdf2+0x4>
 8000b1e:	bf00      	nop

08000b20 <__ledf2>:
 8000b20:	f04f 0c01 	mov.w	ip, #1
 8000b24:	e002      	b.n	8000b2c <__cmpdf2+0x4>
 8000b26:	bf00      	nop

08000b28 <__cmpdf2>:
 8000b28:	f04f 0c01 	mov.w	ip, #1
 8000b2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b3c:	bf18      	it	ne
 8000b3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b42:	d01b      	beq.n	8000b7c <__cmpdf2+0x54>
 8000b44:	b001      	add	sp, #4
 8000b46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4a:	bf0c      	ite	eq
 8000b4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b50:	ea91 0f03 	teqne	r1, r3
 8000b54:	bf02      	ittt	eq
 8000b56:	ea90 0f02 	teqeq	r0, r2
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	4770      	bxeq	lr
 8000b5e:	f110 0f00 	cmn.w	r0, #0
 8000b62:	ea91 0f03 	teq	r1, r3
 8000b66:	bf58      	it	pl
 8000b68:	4299      	cmppl	r1, r3
 8000b6a:	bf08      	it	eq
 8000b6c:	4290      	cmpeq	r0, r2
 8000b6e:	bf2c      	ite	cs
 8000b70:	17d8      	asrcs	r0, r3, #31
 8000b72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b76:	f040 0001 	orr.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__cmpdf2+0x64>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d107      	bne.n	8000b9c <__cmpdf2+0x74>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d1d6      	bne.n	8000b44 <__cmpdf2+0x1c>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d0d3      	beq.n	8000b44 <__cmpdf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cdrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4662      	mov	r2, ip
 8000baa:	468c      	mov	ip, r1
 8000bac:	4619      	mov	r1, r3
 8000bae:	4663      	mov	r3, ip
 8000bb0:	e000      	b.n	8000bb4 <__aeabi_cdcmpeq>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_cdcmpeq>:
 8000bb4:	b501      	push	{r0, lr}
 8000bb6:	f7ff ffb7 	bl	8000b28 <__cmpdf2>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	bf48      	it	mi
 8000bbe:	f110 0f00 	cmnmi.w	r0, #0
 8000bc2:	bd01      	pop	{r0, pc}

08000bc4 <__aeabi_dcmpeq>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff fff4 	bl	8000bb4 <__aeabi_cdcmpeq>
 8000bcc:	bf0c      	ite	eq
 8000bce:	2001      	moveq	r0, #1
 8000bd0:	2000      	movne	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmplt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffea 	bl	8000bb4 <__aeabi_cdcmpeq>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmple>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffe0 	bl	8000bb4 <__aeabi_cdcmpeq>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmpge>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffce 	bl	8000ba4 <__aeabi_cdrcmple>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpgt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffc4 	bl	8000ba4 <__aeabi_cdrcmple>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b94b      	cbnz	r3, 8000c8e <__aeabi_uldivmod+0x16>
 8000c7a:	b942      	cbnz	r2, 8000c8e <__aeabi_uldivmod+0x16>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	d002      	beq.n	8000c8a <__aeabi_uldivmod+0x12>
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	4608      	mov	r0, r1
 8000c8a:	f000 b83b 	b.w	8000d04 <__aeabi_idiv0>
 8000c8e:	b082      	sub	sp, #8
 8000c90:	46ec      	mov	ip, sp
 8000c92:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c96:	f000 f81d 	bl	8000cd4 <__gnu_uldivmod_helper>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bc0c      	pop	{r2, r3}
 8000ca2:	4770      	bx	lr

08000ca4 <__gnu_ldivmod_helper>:
 8000ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ca8:	9c06      	ldr	r4, [sp, #24]
 8000caa:	4615      	mov	r5, r2
 8000cac:	4606      	mov	r6, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	f000 f829 	bl	8000d08 <__divdi3>
 8000cb6:	fb05 f301 	mul.w	r3, r5, r1
 8000cba:	fb00 3808 	mla	r8, r0, r8, r3
 8000cbe:	fba5 2300 	umull	r2, r3, r5, r0
 8000cc2:	4443      	add	r3, r8
 8000cc4:	1ab2      	subs	r2, r6, r2
 8000cc6:	eb67 0303 	sbc.w	r3, r7, r3
 8000cca:	e9c4 2300 	strd	r2, r3, [r4]
 8000cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cd2:	bf00      	nop

08000cd4 <__gnu_uldivmod_helper>:
 8000cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cd8:	9c06      	ldr	r4, [sp, #24]
 8000cda:	4615      	mov	r5, r2
 8000cdc:	4606      	mov	r6, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	f000 f967 	bl	8000fb4 <__udivdi3>
 8000ce6:	fb00 f808 	mul.w	r8, r0, r8
 8000cea:	fba0 2305 	umull	r2, r3, r0, r5
 8000cee:	fb05 8801 	mla	r8, r5, r1, r8
 8000cf2:	4443      	add	r3, r8
 8000cf4:	1ab2      	subs	r2, r6, r2
 8000cf6:	eb67 0303 	sbc.w	r3, r7, r3
 8000cfa:	e9c4 2300 	strd	r2, r3, [r4]
 8000cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__divdi3>:
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d0e:	bfa8      	it	ge
 8000d10:	2600      	movge	r6, #0
 8000d12:	f2c0 80a9 	blt.w	8000e68 <__divdi3+0x160>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f2c0 80a1 	blt.w	8000e5e <__divdi3+0x156>
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	4690      	mov	r8, r2
 8000d20:	469c      	mov	ip, r3
 8000d22:	4614      	mov	r4, r2
 8000d24:	4605      	mov	r5, r0
 8000d26:	460f      	mov	r7, r1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d147      	bne.n	8000dbc <__divdi3+0xb4>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	d95b      	bls.n	8000de8 <__divdi3+0xe0>
 8000d30:	fab2 f382 	clz	r3, r2
 8000d34:	b153      	cbz	r3, 8000d4c <__divdi3+0x44>
 8000d36:	f1c3 0220 	rsb	r2, r3, #32
 8000d3a:	fa01 f703 	lsl.w	r7, r1, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	fa08 f403 	lsl.w	r4, r8, r3
 8000d46:	4317      	orrs	r7, r2
 8000d48:	fa00 f503 	lsl.w	r5, r0, r3
 8000d4c:	0c21      	lsrs	r1, r4, #16
 8000d4e:	fbb7 f2f1 	udiv	r2, r7, r1
 8000d52:	0c2b      	lsrs	r3, r5, #16
 8000d54:	fb01 7c12 	mls	ip, r1, r2, r7
 8000d58:	b2a0      	uxth	r0, r4
 8000d5a:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000d5e:	fb00 f302 	mul.w	r3, r0, r2
 8000d62:	42bb      	cmp	r3, r7
 8000d64:	d909      	bls.n	8000d7a <__divdi3+0x72>
 8000d66:	193f      	adds	r7, r7, r4
 8000d68:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8000d6c:	d204      	bcs.n	8000d78 <__divdi3+0x70>
 8000d6e:	42bb      	cmp	r3, r7
 8000d70:	bf84      	itt	hi
 8000d72:	3a02      	subhi	r2, #2
 8000d74:	193f      	addhi	r7, r7, r4
 8000d76:	d800      	bhi.n	8000d7a <__divdi3+0x72>
 8000d78:	4662      	mov	r2, ip
 8000d7a:	1aff      	subs	r7, r7, r3
 8000d7c:	fbb7 f3f1 	udiv	r3, r7, r1
 8000d80:	b2ad      	uxth	r5, r5
 8000d82:	fb01 7113 	mls	r1, r1, r3, r7
 8000d86:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000d8a:	fb00 f003 	mul.w	r0, r0, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__divdi3+0x9c>
 8000d92:	1909      	adds	r1, r1, r4
 8000d94:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 8000d98:	d203      	bcs.n	8000da2 <__divdi3+0x9a>
 8000d9a:	4288      	cmp	r0, r1
 8000d9c:	bf88      	it	hi
 8000d9e:	3b02      	subhi	r3, #2
 8000da0:	d800      	bhi.n	8000da4 <__divdi3+0x9c>
 8000da2:	463b      	mov	r3, r7
 8000da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	4611      	mov	r1, r2
 8000dae:	b116      	cbz	r6, 8000db6 <__divdi3+0xae>
 8000db0:	4240      	negs	r0, r0
 8000db2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dba:	4770      	bx	lr
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	bf84      	itt	hi
 8000dc0:	2200      	movhi	r2, #0
 8000dc2:	4613      	movhi	r3, r2
 8000dc4:	d8f1      	bhi.n	8000daa <__divdi3+0xa2>
 8000dc6:	fabc f18c 	clz	r1, ip
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__divdi3+0x1e8>
 8000dd0:	45cc      	cmp	ip, r9
 8000dd2:	bf28      	it	cs
 8000dd4:	4580      	cmpcs	r8, r0
 8000dd6:	bf8c      	ite	hi
 8000dd8:	2200      	movhi	r2, #0
 8000dda:	2201      	movls	r2, #1
 8000ddc:	bf9c      	itt	ls
 8000dde:	2301      	movls	r3, #1
 8000de0:	460a      	movls	r2, r1
 8000de2:	d9e2      	bls.n	8000daa <__divdi3+0xa2>
 8000de4:	4613      	mov	r3, r2
 8000de6:	e7e0      	b.n	8000daa <__divdi3+0xa2>
 8000de8:	b912      	cbnz	r2, 8000df0 <__divdi3+0xe8>
 8000dea:	2301      	movs	r3, #1
 8000dec:	fbb3 f4f2 	udiv	r4, r3, r2
 8000df0:	fab4 f384 	clz	r3, r4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d13d      	bne.n	8000e74 <__divdi3+0x16c>
 8000df8:	1b3f      	subs	r7, r7, r4
 8000dfa:	0c20      	lsrs	r0, r4, #16
 8000dfc:	fa1f fc84 	uxth.w	ip, r4
 8000e00:	2201      	movs	r2, #1
 8000e02:	fbb7 f1f0 	udiv	r1, r7, r0
 8000e06:	0c2b      	lsrs	r3, r5, #16
 8000e08:	fb00 7711 	mls	r7, r0, r1, r7
 8000e0c:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8000e10:	fb0c f301 	mul.w	r3, ip, r1
 8000e14:	42bb      	cmp	r3, r7
 8000e16:	d90a      	bls.n	8000e2e <__divdi3+0x126>
 8000e18:	193f      	adds	r7, r7, r4
 8000e1a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e1e:	f080 80c1 	bcs.w	8000fa4 <__divdi3+0x29c>
 8000e22:	42bb      	cmp	r3, r7
 8000e24:	bf84      	itt	hi
 8000e26:	3902      	subhi	r1, #2
 8000e28:	193f      	addhi	r7, r7, r4
 8000e2a:	f240 80bb 	bls.w	8000fa4 <__divdi3+0x29c>
 8000e2e:	1aff      	subs	r7, r7, r3
 8000e30:	fbb7 f3f0 	udiv	r3, r7, r0
 8000e34:	b2ad      	uxth	r5, r5
 8000e36:	fb00 7013 	mls	r0, r0, r3, r7
 8000e3a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8000e3e:	fb0c fc03 	mul.w	ip, ip, r3
 8000e42:	4584      	cmp	ip, r0
 8000e44:	d908      	bls.n	8000e58 <__divdi3+0x150>
 8000e46:	1900      	adds	r0, r0, r4
 8000e48:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 8000e4c:	d203      	bcs.n	8000e56 <__divdi3+0x14e>
 8000e4e:	4584      	cmp	ip, r0
 8000e50:	bf88      	it	hi
 8000e52:	3b02      	subhi	r3, #2
 8000e54:	d800      	bhi.n	8000e58 <__divdi3+0x150>
 8000e56:	463b      	mov	r3, r7
 8000e58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5c:	e7a5      	b.n	8000daa <__divdi3+0xa2>
 8000e5e:	43f6      	mvns	r6, r6
 8000e60:	4252      	negs	r2, r2
 8000e62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e66:	e759      	b.n	8000d1c <__divdi3+0x14>
 8000e68:	4240      	negs	r0, r0
 8000e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000e72:	e750      	b.n	8000d16 <__divdi3+0xe>
 8000e74:	409c      	lsls	r4, r3
 8000e76:	f1c3 0220 	rsb	r2, r3, #32
 8000e7a:	fa27 f102 	lsr.w	r1, r7, r2
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa25 f202 	lsr.w	r2, r5, r2
 8000e84:	409f      	lsls	r7, r3
 8000e86:	4317      	orrs	r7, r2
 8000e88:	fbb1 f2f0 	udiv	r2, r1, r0
 8000e8c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e90:	fb00 1112 	mls	r1, r0, r2, r1
 8000e94:	fa1f fc84 	uxth.w	ip, r4
 8000e98:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 8000e9c:	fb0c f802 	mul.w	r8, ip, r2
 8000ea0:	4588      	cmp	r8, r1
 8000ea2:	fa05 f503 	lsl.w	r5, r5, r3
 8000ea6:	d908      	bls.n	8000eba <__divdi3+0x1b2>
 8000ea8:	1909      	adds	r1, r1, r4
 8000eaa:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000eae:	d27f      	bcs.n	8000fb0 <__divdi3+0x2a8>
 8000eb0:	4588      	cmp	r8, r1
 8000eb2:	bf84      	itt	hi
 8000eb4:	3a02      	subhi	r2, #2
 8000eb6:	1909      	addhi	r1, r1, r4
 8000eb8:	d97a      	bls.n	8000fb0 <__divdi3+0x2a8>
 8000eba:	ebc8 0101 	rsb	r1, r8, r1
 8000ebe:	fbb1 f3f0 	udiv	r3, r1, r0
 8000ec2:	fb00 1113 	mls	r1, r0, r3, r1
 8000ec6:	b2bf      	uxth	r7, r7
 8000ec8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ecc:	fb0c f103 	mul.w	r1, ip, r3
 8000ed0:	42b9      	cmp	r1, r7
 8000ed2:	d909      	bls.n	8000ee8 <__divdi3+0x1e0>
 8000ed4:	193f      	adds	r7, r7, r4
 8000ed6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eda:	d204      	bcs.n	8000ee6 <__divdi3+0x1de>
 8000edc:	42b9      	cmp	r1, r7
 8000ede:	bf84      	itt	hi
 8000ee0:	3b02      	subhi	r3, #2
 8000ee2:	193f      	addhi	r7, r7, r4
 8000ee4:	d800      	bhi.n	8000ee8 <__divdi3+0x1e0>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	1a7f      	subs	r7, r7, r1
 8000eea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000eee:	e788      	b.n	8000e02 <__divdi3+0xfa>
 8000ef0:	f1c1 0320 	rsb	r3, r1, #32
 8000ef4:	fa28 f203 	lsr.w	r2, r8, r3
 8000ef8:	fa0c fc01 	lsl.w	ip, ip, r1
 8000efc:	ea42 0c0c 	orr.w	ip, r2, ip
 8000f00:	fa29 f403 	lsr.w	r4, r9, r3
 8000f04:	ea4f 4a1c 	mov.w	sl, ip, lsr #16
 8000f08:	fa20 f303 	lsr.w	r3, r0, r3
 8000f0c:	fa09 f901 	lsl.w	r9, r9, r1
 8000f10:	ea43 0009 	orr.w	r0, r3, r9
 8000f14:	fbb4 f7fa 	udiv	r7, r4, sl
 8000f18:	fb0a 4417 	mls	r4, sl, r7, r4
 8000f1c:	0c03      	lsrs	r3, r0, #16
 8000f1e:	fa1f f98c 	uxth.w	r9, ip
 8000f22:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f26:	fb09 fb07 	mul.w	fp, r9, r7
 8000f2a:	45a3      	cmp	fp, r4
 8000f2c:	fa08 f201 	lsl.w	r2, r8, r1
 8000f30:	d909      	bls.n	8000f46 <__divdi3+0x23e>
 8000f32:	eb14 040c 	adds.w	r4, r4, ip
 8000f36:	f107 33ff 	add.w	r3, r7, #4294967295	; 0xffffffff
 8000f3a:	d237      	bcs.n	8000fac <__divdi3+0x2a4>
 8000f3c:	45a3      	cmp	fp, r4
 8000f3e:	bf84      	itt	hi
 8000f40:	3f02      	subhi	r7, #2
 8000f42:	4464      	addhi	r4, ip
 8000f44:	d932      	bls.n	8000fac <__divdi3+0x2a4>
 8000f46:	ebcb 0404 	rsb	r4, fp, r4
 8000f4a:	fbb4 f3fa 	udiv	r3, r4, sl
 8000f4e:	fb0a 4413 	mls	r4, sl, r3, r4
 8000f52:	b280      	uxth	r0, r0
 8000f54:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f58:	fb09 f403 	mul.w	r4, r9, r3
 8000f5c:	4284      	cmp	r4, r0
 8000f5e:	d909      	bls.n	8000f74 <__divdi3+0x26c>
 8000f60:	eb10 000c 	adds.w	r0, r0, ip
 8000f64:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f68:	d21e      	bcs.n	8000fa8 <__divdi3+0x2a0>
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	bf84      	itt	hi
 8000f6e:	3b02      	subhi	r3, #2
 8000f70:	4460      	addhi	r0, ip
 8000f72:	d919      	bls.n	8000fa8 <__divdi3+0x2a0>
 8000f74:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8000f78:	1b00      	subs	r0, r0, r4
 8000f7a:	fba7 2302 	umull	r2, r3, r7, r2
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d30d      	bcc.n	8000f9e <__divdi3+0x296>
 8000f82:	bf14      	ite	ne
 8000f84:	2300      	movne	r3, #0
 8000f86:	2301      	moveq	r3, #1
 8000f88:	fa05 f101 	lsl.w	r1, r5, r1
 8000f8c:	4291      	cmp	r1, r2
 8000f8e:	bf2c      	ite	cs
 8000f90:	2200      	movcs	r2, #0
 8000f92:	f003 0201 	andcc.w	r2, r3, #1
 8000f96:	463b      	mov	r3, r7
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	f43f af06 	beq.w	8000daa <__divdi3+0xa2>
 8000f9e:	1e7b      	subs	r3, r7, #1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	e702      	b.n	8000daa <__divdi3+0xa2>
 8000fa4:	4641      	mov	r1, r8
 8000fa6:	e742      	b.n	8000e2e <__divdi3+0x126>
 8000fa8:	4643      	mov	r3, r8
 8000faa:	e7e3      	b.n	8000f74 <__divdi3+0x26c>
 8000fac:	461f      	mov	r7, r3
 8000fae:	e7ca      	b.n	8000f46 <__divdi3+0x23e>
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	e782      	b.n	8000eba <__divdi3+0x1b2>

08000fb4 <__udivdi3>:
 8000fb4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000fb8:	4614      	mov	r4, r2
 8000fba:	4605      	mov	r5, r0
 8000fbc:	460e      	mov	r6, r1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d141      	bne.n	8001046 <__udivdi3+0x92>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d954      	bls.n	8001070 <__udivdi3+0xbc>
 8000fc6:	fab2 f382 	clz	r3, r2
 8000fca:	b14b      	cbz	r3, 8000fe0 <__udivdi3+0x2c>
 8000fcc:	f1c3 0620 	rsb	r6, r3, #32
 8000fd0:	4099      	lsls	r1, r3
 8000fd2:	fa20 f606 	lsr.w	r6, r0, r6
 8000fd6:	fa02 f403 	lsl.w	r4, r2, r3
 8000fda:	430e      	orrs	r6, r1
 8000fdc:	fa00 f503 	lsl.w	r5, r0, r3
 8000fe0:	0c22      	lsrs	r2, r4, #16
 8000fe2:	fbb6 f0f2 	udiv	r0, r6, r2
 8000fe6:	0c2b      	lsrs	r3, r5, #16
 8000fe8:	fb02 6110 	mls	r1, r2, r0, r6
 8000fec:	b2a7      	uxth	r7, r4
 8000fee:	ea43 4601 	orr.w	r6, r3, r1, lsl #16
 8000ff2:	fb07 f300 	mul.w	r3, r7, r0
 8000ff6:	42b3      	cmp	r3, r6
 8000ff8:	d909      	bls.n	800100e <__udivdi3+0x5a>
 8000ffa:	1936      	adds	r6, r6, r4
 8000ffc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001000:	d204      	bcs.n	800100c <__udivdi3+0x58>
 8001002:	42b3      	cmp	r3, r6
 8001004:	bf84      	itt	hi
 8001006:	3802      	subhi	r0, #2
 8001008:	1936      	addhi	r6, r6, r4
 800100a:	d800      	bhi.n	800100e <__udivdi3+0x5a>
 800100c:	4608      	mov	r0, r1
 800100e:	1af6      	subs	r6, r6, r3
 8001010:	fbb6 f3f2 	udiv	r3, r6, r2
 8001014:	b2ad      	uxth	r5, r5
 8001016:	fb02 6213 	mls	r2, r2, r3, r6
 800101a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800101e:	fb07 f703 	mul.w	r7, r7, r3
 8001022:	4297      	cmp	r7, r2
 8001024:	d909      	bls.n	800103a <__udivdi3+0x86>
 8001026:	1912      	adds	r2, r2, r4
 8001028:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800102c:	f080 80ea 	bcs.w	8001204 <__udivdi3+0x250>
 8001030:	4297      	cmp	r7, r2
 8001032:	bf88      	it	hi
 8001034:	3b02      	subhi	r3, #2
 8001036:	f240 80e5 	bls.w	8001204 <__udivdi3+0x250>
 800103a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800103e:	2100      	movs	r1, #0
 8001040:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001044:	4770      	bx	lr
 8001046:	428b      	cmp	r3, r1
 8001048:	bf84      	itt	hi
 800104a:	2100      	movhi	r1, #0
 800104c:	4608      	movhi	r0, r1
 800104e:	d8f7      	bhi.n	8001040 <__udivdi3+0x8c>
 8001050:	fab3 f483 	clz	r4, r3
 8001054:	2c00      	cmp	r4, #0
 8001056:	d149      	bne.n	80010ec <__udivdi3+0x138>
 8001058:	428b      	cmp	r3, r1
 800105a:	bf28      	it	cs
 800105c:	4282      	cmpcs	r2, r0
 800105e:	bf8c      	ite	hi
 8001060:	2100      	movhi	r1, #0
 8001062:	2101      	movls	r1, #1
 8001064:	bf9c      	itt	ls
 8001066:	2001      	movls	r0, #1
 8001068:	4621      	movls	r1, r4
 800106a:	d9e9      	bls.n	8001040 <__udivdi3+0x8c>
 800106c:	4608      	mov	r0, r1
 800106e:	e7e7      	b.n	8001040 <__udivdi3+0x8c>
 8001070:	b912      	cbnz	r2, 8001078 <__udivdi3+0xc4>
 8001072:	2401      	movs	r4, #1
 8001074:	fbb4 f4f2 	udiv	r4, r4, r2
 8001078:	fab4 f784 	clz	r7, r4
 800107c:	2f00      	cmp	r7, #0
 800107e:	f040 8082 	bne.w	8001186 <__udivdi3+0x1d2>
 8001082:	1b0b      	subs	r3, r1, r4
 8001084:	0c26      	lsrs	r6, r4, #16
 8001086:	b2a7      	uxth	r7, r4
 8001088:	2101      	movs	r1, #1
 800108a:	fbb3 f0f6 	udiv	r0, r3, r6
 800108e:	0c2a      	lsrs	r2, r5, #16
 8001090:	fb06 3310 	mls	r3, r6, r0, r3
 8001094:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8001098:	fb07 f200 	mul.w	r2, r7, r0
 800109c:	429a      	cmp	r2, r3
 800109e:	d90a      	bls.n	80010b6 <__udivdi3+0x102>
 80010a0:	191b      	adds	r3, r3, r4
 80010a2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80010a6:	f080 80af 	bcs.w	8001208 <__udivdi3+0x254>
 80010aa:	429a      	cmp	r2, r3
 80010ac:	bf84      	itt	hi
 80010ae:	3802      	subhi	r0, #2
 80010b0:	191b      	addhi	r3, r3, r4
 80010b2:	f240 80a9 	bls.w	8001208 <__udivdi3+0x254>
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	fbb3 f2f6 	udiv	r2, r3, r6
 80010bc:	b2ad      	uxth	r5, r5
 80010be:	fb06 3312 	mls	r3, r6, r2, r3
 80010c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010c6:	fb07 f702 	mul.w	r7, r7, r2
 80010ca:	42af      	cmp	r7, r5
 80010cc:	d909      	bls.n	80010e2 <__udivdi3+0x12e>
 80010ce:	192c      	adds	r4, r5, r4
 80010d0:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80010d4:	f080 809a 	bcs.w	800120c <__udivdi3+0x258>
 80010d8:	42a7      	cmp	r7, r4
 80010da:	bf88      	it	hi
 80010dc:	3a02      	subhi	r2, #2
 80010de:	f240 8095 	bls.w	800120c <__udivdi3+0x258>
 80010e2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80010e6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80010ea:	4770      	bx	lr
 80010ec:	f1c4 0520 	rsb	r5, r4, #32
 80010f0:	fa22 f605 	lsr.w	r6, r2, r5
 80010f4:	40a3      	lsls	r3, r4
 80010f6:	4333      	orrs	r3, r6
 80010f8:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80010fc:	fa21 f605 	lsr.w	r6, r1, r5
 8001100:	40a1      	lsls	r1, r4
 8001102:	fa20 f505 	lsr.w	r5, r0, r5
 8001106:	fbb6 fcf8 	udiv	ip, r6, r8
 800110a:	430d      	orrs	r5, r1
 800110c:	fb08 661c 	mls	r6, r8, ip, r6
 8001110:	0c29      	lsrs	r1, r5, #16
 8001112:	fa1f f983 	uxth.w	r9, r3
 8001116:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 800111a:	fb09 f70c 	mul.w	r7, r9, ip
 800111e:	42b7      	cmp	r7, r6
 8001120:	fa02 f204 	lsl.w	r2, r2, r4
 8001124:	d904      	bls.n	8001130 <__udivdi3+0x17c>
 8001126:	18f6      	adds	r6, r6, r3
 8001128:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800112c:	d376      	bcc.n	800121c <__udivdi3+0x268>
 800112e:	468c      	mov	ip, r1
 8001130:	1bf6      	subs	r6, r6, r7
 8001132:	fbb6 f7f8 	udiv	r7, r6, r8
 8001136:	fb08 6617 	mls	r6, r8, r7, r6
 800113a:	b2ad      	uxth	r5, r5
 800113c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001140:	fb09 f607 	mul.w	r6, r9, r7
 8001144:	42ae      	cmp	r6, r5
 8001146:	d904      	bls.n	8001152 <__udivdi3+0x19e>
 8001148:	18ed      	adds	r5, r5, r3
 800114a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800114e:	d35f      	bcc.n	8001210 <__udivdi3+0x25c>
 8001150:	460f      	mov	r7, r1
 8001152:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
 8001156:	1bad      	subs	r5, r5, r6
 8001158:	fba7 2302 	umull	r2, r3, r7, r2
 800115c:	429d      	cmp	r5, r3
 800115e:	d30d      	bcc.n	800117c <__udivdi3+0x1c8>
 8001160:	fa00 f104 	lsl.w	r1, r0, r4
 8001164:	bf14      	ite	ne
 8001166:	2500      	movne	r5, #0
 8001168:	2501      	moveq	r5, #1
 800116a:	4291      	cmp	r1, r2
 800116c:	bf2c      	ite	cs
 800116e:	2100      	movcs	r1, #0
 8001170:	f005 0101 	andcc.w	r1, r5, #1
 8001174:	4638      	mov	r0, r7
 8001176:	2900      	cmp	r1, #0
 8001178:	f43f af62 	beq.w	8001040 <__udivdi3+0x8c>
 800117c:	1e78      	subs	r0, r7, #1
 800117e:	2100      	movs	r1, #0
 8001180:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001184:	4770      	bx	lr
 8001186:	40bc      	lsls	r4, r7
 8001188:	f1c7 0320 	rsb	r3, r7, #32
 800118c:	fa21 fc03 	lsr.w	ip, r1, r3
 8001190:	0c26      	lsrs	r6, r4, #16
 8001192:	40b9      	lsls	r1, r7
 8001194:	fa20 f303 	lsr.w	r3, r0, r3
 8001198:	430b      	orrs	r3, r1
 800119a:	fbbc f1f6 	udiv	r1, ip, r6
 800119e:	0c1a      	lsrs	r2, r3, #16
 80011a0:	fb06 cc11 	mls	ip, r6, r1, ip
 80011a4:	fa1f f884 	uxth.w	r8, r4
 80011a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80011ac:	fb08 f201 	mul.w	r2, r8, r1
 80011b0:	4562      	cmp	r2, ip
 80011b2:	fa00 f507 	lsl.w	r5, r0, r7
 80011b6:	d909      	bls.n	80011cc <__udivdi3+0x218>
 80011b8:	eb1c 0c04 	adds.w	ip, ip, r4
 80011bc:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80011c0:	d233      	bcs.n	800122a <__udivdi3+0x276>
 80011c2:	4562      	cmp	r2, ip
 80011c4:	bf84      	itt	hi
 80011c6:	3902      	subhi	r1, #2
 80011c8:	44a4      	addhi	ip, r4
 80011ca:	d92e      	bls.n	800122a <__udivdi3+0x276>
 80011cc:	ebc2 0c0c 	rsb	ip, r2, ip
 80011d0:	fbbc f2f6 	udiv	r2, ip, r6
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	fb06 cc12 	mls	ip, r6, r2, ip
 80011da:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80011de:	fb08 f002 	mul.w	r0, r8, r2
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d909      	bls.n	80011fa <__udivdi3+0x246>
 80011e6:	191b      	adds	r3, r3, r4
 80011e8:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 80011ec:	d204      	bcs.n	80011f8 <__udivdi3+0x244>
 80011ee:	4298      	cmp	r0, r3
 80011f0:	bf84      	itt	hi
 80011f2:	3a02      	subhi	r2, #2
 80011f4:	191b      	addhi	r3, r3, r4
 80011f6:	d800      	bhi.n	80011fa <__udivdi3+0x246>
 80011f8:	463a      	mov	r2, r7
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8001200:	4647      	mov	r7, r8
 8001202:	e742      	b.n	800108a <__udivdi3+0xd6>
 8001204:	460b      	mov	r3, r1
 8001206:	e718      	b.n	800103a <__udivdi3+0x86>
 8001208:	4660      	mov	r0, ip
 800120a:	e754      	b.n	80010b6 <__udivdi3+0x102>
 800120c:	461a      	mov	r2, r3
 800120e:	e768      	b.n	80010e2 <__udivdi3+0x12e>
 8001210:	42ae      	cmp	r6, r5
 8001212:	bf84      	itt	hi
 8001214:	3f02      	subhi	r7, #2
 8001216:	18ed      	addhi	r5, r5, r3
 8001218:	d89b      	bhi.n	8001152 <__udivdi3+0x19e>
 800121a:	e799      	b.n	8001150 <__udivdi3+0x19c>
 800121c:	42b7      	cmp	r7, r6
 800121e:	bf84      	itt	hi
 8001220:	f1ac 0c02 	subhi.w	ip, ip, #2
 8001224:	18f6      	addhi	r6, r6, r3
 8001226:	d883      	bhi.n	8001130 <__udivdi3+0x17c>
 8001228:	e781      	b.n	800112e <__udivdi3+0x17a>
 800122a:	4601      	mov	r1, r0
 800122c:	e7ce      	b.n	80011cc <__udivdi3+0x218>
 800122e:	bf00      	nop

08001230 <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8001230:	b510      	push	{r4, lr}
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 8001232:	f002 fbc9 	bl	80039c8 <vPortEnterCritical>

    int t = TIM7->CNT;
 8001236:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800123a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800123e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if (t < t0)
 8001240:	f640 130c 	movw	r3, #2316	; 0x90c
 8001244:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	428b      	cmp	r3, r1
        t += 0x10000;
 800124c:	bfc8      	it	gt
 800124e:	f501 3180 	addgt.w	r1, r1, #65536	; 0x10000

    tickcount += t - t0;
 8001252:	1ac8      	subs	r0, r1, r3
 8001254:	f640 1410 	movw	r4, #2320	; 0x910
 8001258:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800125c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001260:	1812      	adds	r2, r2, r0
 8001262:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8001266:	e9c4 2300 	strd	r2, r3, [r4]
    t0 = t;
 800126a:	f640 130c 	movw	r3, #2316	; 0x90c
 800126e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001272:	8019      	strh	r1, [r3, #0]

    vPortExitCritical();
 8001274:	f002 fbb4 	bl	80039e0 <vPortExitCritical>

    return tickcount;
}
 8001278:	e9d4 0100 	ldrd	r0, r1, [r4]
 800127c:	bd10      	pop	{r4, pc}
 800127e:	bf00      	nop

08001280 <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 8001280:	b410      	push	{r4}
    uint16_t  t0 = TIM7->CNT;
 8001282:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001286:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800128a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128c:	b292      	uxth	r2, r2
    for (;;) {
        int  t = TIM7->CNT;
 800128e:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 8001292:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001296:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (t < t0)
 8001298:	4611      	mov	r1, r2
 800129a:	429a      	cmp	r2, r3
            t += 0x10000;
 800129c:	bfc8      	it	gt
 800129e:	f503 3380 	addgt.w	r3, r3, #65536	; 0x10000

        if (us < t - t0)
 80012a2:	1a9a      	subs	r2, r3, r2
 80012a4:	4282      	cmp	r2, r0
 80012a6:	d803      	bhi.n	80012b0 <delay_us+0x30>
            return;

        us -= t - t0;
 80012a8:	1ac9      	subs	r1, r1, r3
 80012aa:	4408      	add	r0, r1
        t0  = t;
 80012ac:	b29a      	uxth	r2, r3
    }
 80012ae:	e7f2      	b.n	8001296 <delay_us+0x16>
}
 80012b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <delay_ms>:
 * Perform a millisecond delay
 *
 * \param  ms  number of milliseconds to wait.
 */
void delay_ms(unsigned long ms)
{
 80012b8:	b508      	push	{r3, lr}
    delay_us(ms * 1000);
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fb03 f000 	mul.w	r0, r3, r0
 80012c2:	f7ff ffdd 	bl	8001280 <delay_us>
 80012c6:	bd08      	pop	{r3, pc}

080012c8 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 80012c8:	b500      	push	{lr}
 80012ca:	b085      	sub	sp, #20
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 80012cc:	4668      	mov	r0, sp
 80012ce:	f002 fc7f 	bl	8003bd0 <RCC_GetClocksFreq>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80012d2:	2020      	movs	r0, #32
 80012d4:	2101      	movs	r1, #1
 80012d6:	f002 fd1d 	bl	8003d14 <RCC_APB1PeriphClockCmd>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 80012da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e4:	f042 0220 	orr.w	r2, r2, #32
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 80012ea:	f64d 6383 	movw	r3, #56963	; 0xde83
 80012ee:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80012f2:	9a03      	ldr	r2, [sp, #12]
 80012f4:	fba3 1302 	umull	r1, r3, r3, r2
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001302:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001306:	8503      	strh	r3, [r0, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8001308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130c:	62c3      	str	r3, [r0, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 800130e:	2101      	movs	r1, #1
 8001310:	8001      	strh	r1, [r0, #0]

    TIM_Cmd(TIM7, ENABLE);
 8001312:	f002 feb7 	bl	8004084 <TIM_Cmd>
}
 8001316:	b005      	add	sp, #20
 8001318:	f85d fb04 	ldr.w	pc, [sp], #4

0800131c <vUSART_command_handler>:
// USART_IRQ():
//  create task copy_buffer() with high priority and pass pointer to buffer 
//  copy_buffer() will then have a callback function which will be command_handler which will pass newly copied pointer
//USE sent_mutex to check if usart has sent message

void vUSART_command_handler (char *pos) {
 800131c:	b510      	push	{r4, lr}
 800131e:	4604      	mov	r4, r0
    char term = '\003';
    replace_char(pos, ' ', term);
 8001320:	2120      	movs	r1, #32
 8001322:	2203      	movs	r2, #3
 8001324:	f000 fe74 	bl	8002010 <replace_char>
    command_routing(pos, term);
 8001328:	4620      	mov	r0, r4
 800132a:	2103      	movs	r1, #3
 800132c:	f001 fa94 	bl	8002858 <command_routing>
    vTaskDelete(NULL);
 8001330:	2000      	movs	r0, #0
 8001332:	f001 fd3f 	bl	8002db4 <vTaskDelete>
 8001336:	bd10      	pop	{r4, pc}

08001338 <idle_blinky>:
        while (1){};
    }
}


void idle_blinky (void *pvParameters) {
 8001338:	b580      	push	{r7, lr}

    GPIO_SetBits(GPIOD, GPIO_Pin_4);
 800133a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800133e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001342:	2110      	movs	r1, #16
 8001344:	f002 fc1c 	bl	8003b80 <GPIO_SetBits>
    while(1) {
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8001348:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 800134c:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001350:	f44f 5980 	mov.w	r9, #4096	; 0x1000
        delay_ms(500);
 8001354:	f44f 75fa 	mov.w	r5, #500	; 0x1f4

        GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8001358:	f44f 5800 	mov.w	r8, #8192	; 0x2000
        delay_ms(500);

        GPIO_SetBits(GPIOD, GPIO_Pin_14);
 800135c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
        delay_ms(500);

        GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8001360:	f44f 4600 	mov.w	r6, #32768	; 0x8000

void idle_blinky (void *pvParameters) {

    GPIO_SetBits(GPIOD, GPIO_Pin_4);
    while(1) {
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8001364:	4620      	mov	r0, r4
 8001366:	4649      	mov	r1, r9
 8001368:	f002 fc0a 	bl	8003b80 <GPIO_SetBits>
        delay_ms(500);
 800136c:	4628      	mov	r0, r5
 800136e:	f7ff ffa3 	bl	80012b8 <delay_ms>

        GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8001372:	4620      	mov	r0, r4
 8001374:	4641      	mov	r1, r8
 8001376:	f002 fc03 	bl	8003b80 <GPIO_SetBits>
        delay_ms(500);
 800137a:	4628      	mov	r0, r5
 800137c:	f7ff ff9c 	bl	80012b8 <delay_ms>

        GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8001380:	4620      	mov	r0, r4
 8001382:	4639      	mov	r1, r7
 8001384:	f002 fbfc 	bl	8003b80 <GPIO_SetBits>
        delay_ms(500);
 8001388:	4628      	mov	r0, r5
 800138a:	f7ff ff95 	bl	80012b8 <delay_ms>

        GPIO_SetBits(GPIOD, GPIO_Pin_15);
 800138e:	4620      	mov	r0, r4
 8001390:	4631      	mov	r1, r6
 8001392:	f002 fbf5 	bl	8003b80 <GPIO_SetBits>
        delay_ms(500);
 8001396:	4628      	mov	r0, r5
 8001398:	f7ff ff8e 	bl	80012b8 <delay_ms>

        GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 800139c:	4620      	mov	r0, r4
 800139e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013a2:	f002 fbef 	bl	8003b84 <GPIO_ResetBits>
        delay_ms(500);
 80013a6:	4628      	mov	r0, r5
 80013a8:	f7ff ff86 	bl	80012b8 <delay_ms>
 80013ac:	e7da      	b.n	8001364 <idle_blinky+0x2c>
 80013ae:	bf00      	nop

080013b0 <vPH_read_value>:
   vTaskDelete(NULL);
}



void vPH_read_value(PHMeter_Module *meter) {
 80013b0:	b510      	push	{r4, lr}
    if (meter) {
 80013b2:	b168      	cbz	r0, 80013d0 <vPH_read_value+0x20>
        meter->state = MODULE_RUNNING;
 80013b4:	2300      	movs	r3, #0
     //   USART_rtos_puts(USART2, "Reading PHMeter Reservoir...\r\n");
        //USART2_rtos_puts("Read pH Meter...\r\n");
        meter->value = TEST_PH_VALUE;
 80013b6:	f240 0200 	movw	r2, #0
 80013ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	6002      	str	r2, [r0, #0]
        meter->state = MODULE_EXECUTED;
 80013c2:	2202      	movs	r2, #2
 80013c4:	7202      	strb	r2, [r0, #8]
        xSemaphoreGive(meter->mutex);
 80013c6:	6840      	ldr	r0, [r0, #4]
 80013c8:	4619      	mov	r1, r3
 80013ca:	461a      	mov	r2, r3
 80013cc:	f002 f924 	bl	8003618 <xQueueGenericSend>

        }

    vTaskDelete(NULL);
 80013d0:	2000      	movs	r0, #0
 80013d2:	f001 fcef 	bl	8002db4 <vTaskDelete>
 80013d6:	bd10      	pop	{r4, pc}

080013d8 <vPH_task>:
    params->ppump->state = MODULE_EXECUTED; 

    vTaskDelete(NULL);
}

void vPH_task(void) {
 80013d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013dc:	b0a9      	sub	sp, #164	; 0xa4

    Timer_node timer = {NULL, NULL};
 80013de:	2400      	movs	r4, #0
 80013e0:	941f      	str	r4, [sp, #124]	; 0x7c
 80013e2:	9420      	str	r4, [sp, #128]	; 0x80
 80013e4:	9421      	str	r4, [sp, #132]	; 0x84
 80013e6:	9422      	str	r4, [sp, #136]	; 0x88
 80013e8:	9423      	str	r4, [sp, #140]	; 0x8c
 80013ea:	9424      	str	r4, [sp, #144]	; 0x90
 80013ec:	9425      	str	r4, [sp, #148]	; 0x94
 80013ee:	9426      	str	r4, [sp, #152]	; 0x98
 80013f0:	9427      	str	r4, [sp, #156]	; 0x9c
    RTC_TimeTypeDef t;


    USART_rtos_packet packet, packet1, packet2, packet3;

    packet.USARTx_rtos = packet1.USARTx_rtos = packet2.USARTx_rtos = packet3.USARTx_rtos = &USART1_rtos;
 80013f2:	f640 43a8 	movw	r3, #3240	; 0xca8
 80013f6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013fa:	930e      	str	r3, [sp, #56]	; 0x38
 80013fc:	9312      	str	r3, [sp, #72]	; 0x48
 80013fe:	9316      	str	r3, [sp, #88]	; 0x58
 8001400:	a828      	add	r0, sp, #160	; 0xa0
 8001402:	f840 3d38 	str.w	r3, [r0, #-56]!
    USART_rtos_puts(&packet, "PH Task Launched...\r\n");
 8001406:	f647 7168 	movw	r1, #32616	; 0x7f68
 800140a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800140e:	f000 fda5 	bl	8001f5c <USART_rtos_puts>

    //RTC_GetTime(RTC_Format_BIN, &t);
    getTime(&t);
 8001412:	a81e      	add	r0, sp, #120	; 0x78
 8001414:	f001 fb32 	bl	8002a7c <getTime>

    timer.epoch = getEpoch(&t, getSystemDay()) + 60*60*3; //* 60 * 24;
 8001418:	f001 fa76 	bl	8002908 <getSystemDay>
 800141c:	4601      	mov	r1, r0
 800141e:	a81e      	add	r0, sp, #120	; 0x78
 8001420:	f001 fb32 	bl	8002a88 <getEpoch>
 8001424:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 8001428:	3030      	adds	r0, #48	; 0x30
 800142a:	9021      	str	r0, [sp, #132]	; 0x84
    timer.id = 1;
 800142c:	2301      	movs	r3, #1
 800142e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    int r = addTimerInterrupt(&timer, &timer_list_head); //ph_timer 
 8001432:	a81f      	add	r0, sp, #124	; 0x7c
 8001434:	f640 51f0 	movw	r1, #3568	; 0xdf0
 8001438:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800143c:	f001 fa8c 	bl	8002958 <addTimerInterrupt>
 8001440:	4605      	mov	r5, r0

    //int r = 1;

    unsigned portBASE_TYPE parent_priority = uxTaskPriorityGet(NULL);
 8001442:	4620      	mov	r0, r4
 8001444:	f001 fcf6 	bl	8002e34 <uxTaskPriorityGet>
 8001448:	9004      	str	r0, [sp, #16]

    while (1) {

        if (r) {
            if (hydroponics.PHMeter_Resvoir.mutex == NULL) {
 800144a:	f640 440c 	movw	r4, #3084	; 0xc0c
 800144e:	f2c2 0400 	movt	r4, #8192	; 0x2000
           //add if sepamphore is not null error check
            int TARGET_PH_REACHED = 0;
             //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
            
            if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
                USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");
 8001452:	f647 7280 	movw	r2, #32640	; 0x7f80
 8001456:	f6c0 0200 	movt	r2, #2048	; 0x800
 800145a:	9207      	str	r2, [sp, #28]
                while (!TARGET_PH_REACHED) {
                    vPPump_parameters ppump_params;
                    portTickType start_time;
                    portTickType end_time;

                    xTaskCreate(vPH_read_value, (signed char*)"PH Read", 128, &hydroponics.PHMeter_Resvoir, parent_priority+1, NULL);
 800145c:	f241 37b1 	movw	r7, #5041	; 0x13b1
 8001460:	f6c0 0700 	movt	r7, #2048	; 0x800
 8001464:	f647 7aa0 	movw	sl, #32672	; 0x7fa0
 8001468:	f6c0 0a00 	movt	sl, #2048	; 0x800
                    while(hydroponics.PHMeter_Resvoir.state != MODULE_EXECUTED);

                    int value = hydroponics.PHMeter_Resvoir.value; 
                    char msg[20];
                    packet3.msg = msg;
                    USART_rtos_sputs(&packet3, "PH VALUE: %d\r\n", value);
 800146c:	f647 7ba8 	movw	fp, #32680	; 0x7fa8
 8001470:	f6c0 0b00 	movt	fp, #2048	; 0x800

    unsigned portBASE_TYPE parent_priority = uxTaskPriorityGet(NULL);

    while (1) {

        if (r) {
 8001474:	2d00      	cmp	r5, #0
 8001476:	d0fd      	beq.n	8001474 <vPH_task+0x9c>
            if (hydroponics.PHMeter_Resvoir.mutex == NULL) {
 8001478:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800147c:	b920      	cbnz	r0, 8001488 <vPH_task+0xb0>
                hydroponics.PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
 800147e:	f002 f935 	bl	80036ec <xQueueCreateMutex>
 8001482:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
                continue;
 8001486:	e7f5      	b.n	8001474 <vPH_task+0x9c>

           //add if sepamphore is not null error check
            int TARGET_PH_REACHED = 0;
             //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
            
            if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
 8001488:	2100      	movs	r1, #0
 800148a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800148e:	460b      	mov	r3, r1
 8001490:	f002 f94e 	bl	8003730 <xQueueGenericReceive>
 8001494:	2801      	cmp	r0, #1
 8001496:	d1ed      	bne.n	8001474 <vPH_task+0x9c>
                USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");
 8001498:	a816      	add	r0, sp, #88	; 0x58
 800149a:	9907      	ldr	r1, [sp, #28]
 800149c:	f000 fd5e 	bl	8001f5c <USART_rtos_puts>

                hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
                hydroponics.PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
                continue;
            }

           //add if sepamphore is not null error check
            int TARGET_PH_REACHED = 0;
 80014a6:	f04f 0800 	mov.w	r8, #0

                        //RTC_GetTime(RTC_Format_BIN, &t);
                        getTime(&t);

                        timer.epoch = getEpoch(&t, getSystemDay()) + 60*60*3; //* 60 * 24;
                        USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
 80014aa:	f647 73e0 	movw	r3, #32736	; 0x7fe0
 80014ae:	f6c0 0300 	movt	r3, #2048	; 0x800
 80014b2:	9306      	str	r3, [sp, #24]
            
            if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
                USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");

                hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
                while (!TARGET_PH_REACHED) {
 80014b4:	e083      	b.n	80015be <vPH_task+0x1e6>
                    vPPump_parameters ppump_params;
                    portTickType start_time;
                    portTickType end_time;

                    xTaskCreate(vPH_read_value, (signed char*)"PH Read", 128, &hydroponics.PHMeter_Resvoir, parent_priority+1, NULL);
 80014b6:	9a04      	ldr	r2, [sp, #16]
 80014b8:	1c53      	adds	r3, r2, #1
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2300      	movs	r3, #0
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	9303      	str	r3, [sp, #12]
 80014c4:	4638      	mov	r0, r7
 80014c6:	4651      	mov	r1, sl
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	4b3f      	ldr	r3, [pc, #252]	; (80015c8 <vPH_task+0x1f0>)
 80014cc:	f001 fbd0 	bl	8002c70 <xTaskGenericCreate>

                    while(hydroponics.PHMeter_Resvoir.state != MODULE_EXECUTED);
 80014d0:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d1fb      	bne.n	80014d0 <vPH_task+0xf8>

                    int value = hydroponics.PHMeter_Resvoir.value; 
 80014d8:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
                    char msg[20];
                    packet3.msg = msg;
 80014dc:	ab09      	add	r3, sp, #36	; 0x24
 80014de:	930f      	str	r3, [sp, #60]	; 0x3c
                    USART_rtos_sputs(&packet3, "PH VALUE: %d\r\n", value);
 80014e0:	a80e      	add	r0, sp, #56	; 0x38
 80014e2:	4659      	mov	r1, fp
 80014e4:	4632      	mov	r2, r6
 80014e6:	f000 fd73 	bl	8001fd0 <USART_rtos_sputs>

                    hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
 80014ea:	2301      	movs	r3, #1
 80014ec:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90

                    int amount;
                    PPump_Module *ppump;

                    if (value < hydroponics.target_ph){
 80014f0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80014f4:	42b3      	cmp	r3, r6
 80014f6:	dd14      	ble.n	8001522 <vPH_task+0x14a>
                        USART_rtos_puts(&packet2, "Adding PH Up...\r\n");
 80014f8:	a812      	add	r0, sp, #72	; 0x48
 80014fa:	f647 71b8 	movw	r1, #32696	; 0x7fb8
 80014fe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001502:	f000 fd2b 	bl	8001f5c <USART_rtos_puts>
                        TEST_PH_VALUE+=5;
 8001506:	f240 0300 	movw	r3, #0
 800150a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	3205      	adds	r2, #5
 8001512:	601a      	str	r2, [r3, #0]
                     ///   USART_rtos_puts(USART2, "ADDING PH UP\r\n");
                        amount = hydroponics.target_ph - value;
 8001514:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001518:	1b9b      	subs	r3, r3, r6
 800151a:	9305      	str	r3, [sp, #20]
                        ppump = &hydroponics.PPump_PHUp;
 800151c:	f104 0904 	add.w	r9, r4, #4
 8001520:	e032      	b.n	8001588 <vPH_task+0x1b0>

                    }
                    else if (value > hydroponics.target_ph) {
 8001522:	429e      	cmp	r6, r3
 8001524:	dd14      	ble.n	8001550 <vPH_task+0x178>
                        USART_rtos_puts(&packet2, "Adding PH DOwn...\r\n");
 8001526:	a812      	add	r0, sp, #72	; 0x48
 8001528:	f647 71cc 	movw	r1, #32716	; 0x7fcc
 800152c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001530:	f000 fd14 	bl	8001f5c <USART_rtos_puts>
                        TEST_PH_VALUE-=5;
 8001534:	f240 0300 	movw	r3, #0
 8001538:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	3a05      	subs	r2, #5
 8001540:	601a      	str	r2, [r3, #0]
                        amount = value - hydroponics.target_ph;
 8001542:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001546:	1af3      	subs	r3, r6, r3
 8001548:	9305      	str	r3, [sp, #20]
                        ppump = &hydroponics.PPump_PHDown;
 800154a:	f104 0930 	add.w	r9, r4, #48	; 0x30
 800154e:	e01b      	b.n	8001588 <vPH_task+0x1b0>
                    }
                    else {
                        TARGET_PH_REACHED = 1;

                        //RTC_GetTime(RTC_Format_BIN, &t);
                        getTime(&t);
 8001550:	a81e      	add	r0, sp, #120	; 0x78
 8001552:	f001 fa93 	bl	8002a7c <getTime>

                        timer.epoch = getEpoch(&t, getSystemDay()) + 60*60*3; //* 60 * 24;
 8001556:	f001 f9d7 	bl	8002908 <getSystemDay>
 800155a:	4601      	mov	r1, r0
 800155c:	a81e      	add	r0, sp, #120	; 0x78
 800155e:	f001 fa93 	bl	8002a88 <getEpoch>
 8001562:	f500 5028 	add.w	r0, r0, #10752	; 0x2a00
 8001566:	3030      	adds	r0, #48	; 0x30
 8001568:	9021      	str	r0, [sp, #132]	; 0x84
                        USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
 800156a:	a812      	add	r0, sp, #72	; 0x48
 800156c:	9906      	ldr	r1, [sp, #24]
 800156e:	f000 fcf5 	bl	8001f5c <USART_rtos_puts>
                        r = addTimerInterrupt(&timer, &timer_list_head); 
 8001572:	a81f      	add	r0, sp, #124	; 0x7c
 8001574:	f640 51f0 	movw	r1, #3568	; 0xdf0
 8001578:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800157c:	f001 f9ec 	bl	8002958 <addTimerInterrupt>
 8001580:	4605      	mov	r5, r0
                        amount = value - hydroponics.target_ph;
                        ppump = &hydroponics.PPump_PHDown;

                    }
                    else {
                        TARGET_PH_REACHED = 1;
 8001582:	f04f 0801 	mov.w	r8, #1
                        timer.epoch = getEpoch(&t, getSystemDay()) + 60*60*3; //* 60 * 24;
                        USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
                        r = addTimerInterrupt(&timer, &timer_list_head); 


                        continue;
 8001586:	e01a      	b.n	80015be <vPH_task+0x1e6>
                    };

                    start_time = xTaskGetTickCount();
 8001588:	f001 fc9c 	bl	8002ec4 <xTaskGetTickCount>
 800158c:	9008      	str	r0, [sp, #32]
                    end_time = (portTickType)(1000*hydroponics.ph_delay) / portTICK_RATE_MS;
 800158e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001592:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8001596:	fb06 f603 	mul.w	r6, r6, r3

                    if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
 800159a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800159e:	2100      	movs	r1, #0
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a4:	460b      	mov	r3, r1
 80015a6:	f002 f8c3 	bl	8003730 <xQueueGenericReceive>
 80015aa:	2801      	cmp	r0, #1
 80015ac:	d107      	bne.n	80015be <vPH_task+0x1e6>
                        PPump_Module_dispense(ppump, amount);
 80015ae:	4648      	mov	r0, r9
 80015b0:	9905      	ldr	r1, [sp, #20]
 80015b2:	f000 fc41 	bl	8001e38 <PPump_Module_dispense>
                    }
                    else {
                        continue;
                    }

                    vTaskDelayUntil(&start_time, end_time);
 80015b6:	a808      	add	r0, sp, #32
 80015b8:	4631      	mov	r1, r6
 80015ba:	f001 fd9f 	bl	80030fc <vTaskDelayUntil>
            
            if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
                USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");

                hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
                while (!TARGET_PH_REACHED) {
 80015be:	f1b8 0f00 	cmp.w	r8, #0
 80015c2:	f43f af78 	beq.w	80014b6 <vPH_task+0xde>
 80015c6:	e755      	b.n	8001474 <vPH_task+0x9c>
 80015c8:	20000c94 	.word	0x20000c94

080015cc <vInterruptTimer>:
        }
    }
}


void vInterruptTimer(void) {
 80015cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80015d0:	b083      	sub	sp, #12

    RTC_TimeTypeDef t;

    portTickType xLastWake = xTaskGetTickCount();
 80015d2:	f001 fc77 	bl	8002ec4 <xTaskGetTickCount>
 80015d6:	f10d 0808 	add.w	r8, sp, #8
 80015da:	f848 0d08 	str.w	r0, [r8, #-8]!
    while(1) {
        /*
        USART_rtos_packet packet;
        packet.USARTx_rtos = &USART1_rtos; 
*/
        vTaskDelayUntil(&xLastWake, ((1000*1) / portTICK_RATE_MS));
 80015de:	f44f 797a 	mov.w	r9, #1000	; 0x3e8

        xLastWake = xTaskGetTickCount();
        
        Timer_node* cursor = timer_list_head;
 80015e2:	f640 57f0 	movw	r7, #3568	; 0xdf0
 80015e6:	f2c2 0700 	movt	r7, #8192	; 0x2000
        Timer_node* c1 = NULL;// = cursor; 
 80015ea:	2600      	movs	r6, #0
    while(1) {
        /*
        USART_rtos_packet packet;
        packet.USARTx_rtos = &USART1_rtos; 
*/
        vTaskDelayUntil(&xLastWake, ((1000*1) / portTICK_RATE_MS));
 80015ec:	4668      	mov	r0, sp
 80015ee:	4649      	mov	r1, r9
 80015f0:	f001 fd84 	bl	80030fc <vTaskDelayUntil>

        xLastWake = xTaskGetTickCount();
 80015f4:	f001 fc66 	bl	8002ec4 <xTaskGetTickCount>
 80015f8:	9000      	str	r0, [sp, #0]
        
        Timer_node* cursor = timer_list_head;
 80015fa:	683c      	ldr	r4, [r7, #0]
        Timer_node* c1 = NULL;// = cursor; 
 80015fc:	4635      	mov	r5, r6

        while(cursor) { //problem is herefix logic for linked list
 80015fe:	e01b      	b.n	8001638 <vInterruptTimer+0x6c>
            //RTC_GetTime(RTC_Format_BIN, &t);
            getTime(&t);
 8001600:	a801      	add	r0, sp, #4
 8001602:	f001 fa3b 	bl	8002a7c <getTime>
                flag_end = 1;
                c1 = cursor;
            }
*/

            if (getEpoch(&t, getSystemDay()) > cursor->epoch) { //phs epoch
 8001606:	f001 f97f 	bl	8002908 <getSystemDay>
 800160a:	4601      	mov	r1, r0
 800160c:	a801      	add	r0, sp, #4
 800160e:	f001 fa3b 	bl	8002a88 <getEpoch>
 8001612:	68a3      	ldr	r3, [r4, #8]
 8001614:	4298      	cmp	r0, r3
 8001616:	d90d      	bls.n	8001634 <vInterruptTimer+0x68>

                xSemaphoreGive(cursor->timer_mutex);
 8001618:	6820      	ldr	r0, [r4, #0]
 800161a:	4631      	mov	r1, r6
 800161c:	4632      	mov	r2, r6
 800161e:	4633      	mov	r3, r6
 8001620:	f001 fffa 	bl	8003618 <xQueueGenericSend>

                if (c1 == NULL/*timer_list_head*/) {
 8001624:	b915      	cbnz	r5, 800162c <vInterruptTimer+0x60>
                    timer_list_head = cursor->next;
 8001626:	6864      	ldr	r4, [r4, #4]
 8001628:	603c      	str	r4, [r7, #0]
 800162a:	e005      	b.n	8001638 <vInterruptTimer+0x6c>
                    cursor = timer_list_head;
                    //cursor = c1 = timer_list_head;
                }
                else {
                    c1->next = cursor->next;
 800162c:	6863      	ldr	r3, [r4, #4]
 800162e:	606b      	str	r3, [r5, #4]
                    cursor = cursor->next;
 8001630:	6864      	ldr	r4, [r4, #4]
                if (!(flag_end)) {
                    cursor->next = cursor->next->next; //removes timer from list;
                }
                */

                continue;
 8001632:	e001      	b.n	8001638 <vInterruptTimer+0x6c>

            ///c1 = cursor; //sets c1 as cursor -1 offset
            ///cursor = c1->next;

            
            c1 = cursor;
 8001634:	4625      	mov	r5, r4
            cursor = cursor->next;
 8001636:	6864      	ldr	r4, [r4, #4]
        xLastWake = xTaskGetTickCount();
        
        Timer_node* cursor = timer_list_head;
        Timer_node* c1 = NULL;// = cursor; 

        while(cursor) { //problem is herefix logic for linked list
 8001638:	2c00      	cmp	r4, #0
 800163a:	d1e1      	bne.n	8001600 <vInterruptTimer+0x34>
 800163c:	e7d6      	b.n	80015ec <vInterruptTimer+0x20>
 800163e:	bf00      	nop

08001640 <vIncrementDay>:
    seconds += t->RTC_Minutes * 60;
    seconds += t->RTC_Hours * 3600;
    return seconds;
}

void vIncrementDay(void) {
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001644:	b096      	sub	sp, #88	; 0x58
    Timer_node timer = {NULL, NULL};
 8001646:	2400      	movs	r4, #0
 8001648:	940d      	str	r4, [sp, #52]	; 0x34
 800164a:	940e      	str	r4, [sp, #56]	; 0x38
 800164c:	940f      	str	r4, [sp, #60]	; 0x3c
 800164e:	9410      	str	r4, [sp, #64]	; 0x40
 8001650:	9411      	str	r4, [sp, #68]	; 0x44
 8001652:	9412      	str	r4, [sp, #72]	; 0x48
 8001654:	9413      	str	r4, [sp, #76]	; 0x4c
 8001656:	9414      	str	r4, [sp, #80]	; 0x50
 8001658:	9415      	str	r4, [sp, #84]	; 0x54
    //timer.timer_mutex = NULL;
    //timer.timer_mutex = xSemaphoreCreateMutex();
    
    RTC_TimeTypeDef t;
    //RTC_GetTime(RTC_Format_BIN, &t);
    getTime(&t);
 800165a:	a80c      	add	r0, sp, #48	; 0x30
 800165c:	f001 fa0e 	bl	8002a7c <getTime>

//    timer.epoch = getEpoch(&t, getSystemDay())  +(60 /** 60 * 24*/); //number of seconds in a day;

    timer.debug0 = getEpoch(&t, getSystemDay());
 8001660:	f001 f952 	bl	8002908 <getSystemDay>
 8001664:	4601      	mov	r1, r0
 8001666:	a80c      	add	r0, sp, #48	; 0x30
 8001668:	f001 fa0e 	bl	8002a88 <getEpoch>
 800166c:	9012      	str	r0, [sp, #72]	; 0x48
    timer.id = 2;
 800166e:	2302      	movs	r3, #2
 8001670:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40


    int x = 0;
    while (1) {
        x++;
        RTC_GetTime(RTC_Format_BIN, &t);
 8001674:	4627      	mov	r7, r4
        //getTime(&t);

        timer.epoch = getEpoch(&t, getSystemDay())  +(15 /** 60 * 24*/); //number of seconds in a day;
        //USART_puts(USART1, "\r\n+++++++RAN++++++++\r\n");

        int r = addTimerInterrupt(&timer, &timer_list_head); //adds timer again //increment timer;
 8001676:	f640 56f0 	movw	r6, #3568	; 0xdf0
 800167a:	f2c2 0600 	movt	r6, #8192	; 0x2000
*/
//            USART_rtos_sputs(&packet, "\r\nCOOL:%d\r\n", 69);

            USART_rtos_packet packet;

            packet.USARTx_rtos = &USART1_rtos;
 800167e:	f640 48a8 	movw	r8, #3240	; 0xca8
 8001682:	f2c2 0800 	movt	r8, #8192	; 0x2000
            char msg[]="\r\nCOOL:%d\r\n";
 8001686:	f647 75f4 	movw	r5, #32756	; 0x7ff4
 800168a:	f6c0 0500 	movt	r5, #2048	; 0x800
    //r = (xSemaphoreTake(timer->timer_mutex, portMAX_DELAY) == pdTRUE);


    int x = 0;
    while (1) {
        x++;
 800168e:	3401      	adds	r4, #1
        RTC_GetTime(RTC_Format_BIN, &t);
 8001690:	4638      	mov	r0, r7
 8001692:	a90c      	add	r1, sp, #48	; 0x30
 8001694:	f002 fc88 	bl	8003fa8 <RTC_GetTime>
        //getTime(&t);

        timer.epoch = getEpoch(&t, getSystemDay())  +(15 /** 60 * 24*/); //number of seconds in a day;
 8001698:	f001 f936 	bl	8002908 <getSystemDay>
 800169c:	4601      	mov	r1, r0
 800169e:	a80c      	add	r0, sp, #48	; 0x30
 80016a0:	f001 f9f2 	bl	8002a88 <getEpoch>
 80016a4:	300f      	adds	r0, #15
 80016a6:	900f      	str	r0, [sp, #60]	; 0x3c
        //USART_puts(USART1, "\r\n+++++++RAN++++++++\r\n");

        int r = addTimerInterrupt(&timer, &timer_list_head); //adds timer again //increment timer;
 80016a8:	a80d      	add	r0, sp, #52	; 0x34
 80016aa:	4631      	mov	r1, r6
 80016ac:	f001 f954 	bl	8002958 <addTimerInterrupt>
        if (r) {
 80016b0:	2800      	cmp	r0, #0
 80016b2:	d0ec      	beq.n	800168e <vIncrementDay+0x4e>

                timer.debug2 = x;
 80016b4:	9414      	str	r4, [sp, #80]	; 0x50
            //setSystemDay(getSystemDay()+1);

            //xSemaphoreGive(timer.timer_mutex);

            //RTC_GetTime(RTC_Format_BIN, &t);
            getTime(&t);
 80016b6:	a80c      	add	r0, sp, #48	; 0x30
 80016b8:	f001 f9e0 	bl	8002a7c <getTime>

            unsigned int e = getEpoch(&t, getSystemDay());
 80016bc:	f001 f924 	bl	8002908 <getSystemDay>
 80016c0:	4601      	mov	r1, r0
 80016c2:	a80c      	add	r0, sp, #48	; 0x30
 80016c4:	f001 f9e0 	bl	8002a88 <getEpoch>
            timer.debug0 = getEpoch(&t, getSystemDay());
 80016c8:	f001 f91e 	bl	8002908 <getSystemDay>
 80016cc:	4601      	mov	r1, r0
 80016ce:	a80c      	add	r0, sp, #48	; 0x30
 80016d0:	f001 f9da 	bl	8002a88 <getEpoch>
 80016d4:	9012      	str	r0, [sp, #72]	; 0x48
*/
//            USART_rtos_sputs(&packet, "\r\nCOOL:%d\r\n", 69);

            USART_rtos_packet packet;

            packet.USARTx_rtos = &USART1_rtos;
 80016d6:	f8cd 8020 	str.w	r8, [sp, #32]
            char msg[]="\r\nCOOL:%d\r\n";
 80016da:	ab01      	add	r3, sp, #4
 80016dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            char buffer[15];
            packet.msg = buffer;
 80016e4:	aa04      	add	r2, sp, #16
 80016e6:	9209      	str	r2, [sp, #36]	; 0x24

            USART_rtos_sputs(&packet, msg, 69);
 80016e8:	a808      	add	r0, sp, #32
 80016ea:	4619      	mov	r1, r3
 80016ec:	2245      	movs	r2, #69	; 0x45
 80016ee:	f000 fc6f 	bl	8001fd0 <USART_rtos_sputs>

            //USART_rtos_sputs(&packet, "%u %d:%d:%d (%u)\r\n", getSystemDay(), t.RTC_Hours, t.RTC_Minutes, t.RTC_Seconds, timer.epoch);
            USART_rtos_wait_send(&packet);
 80016f2:	a808      	add	r0, sp, #32
 80016f4:	f000 fbbe 	bl	8001e74 <USART_rtos_wait_send>
 80016f8:	e7c9      	b.n	800168e <vIncrementDay+0x4e>
 80016fa:	bf00      	nop

080016fc <USART1_IRQHandler>:
    }

}


void USART1_IRQHandler(void){
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	b084      	sub	sp, #16
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE)){
 8001700:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001704:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001708:	f240 5125 	movw	r1, #1317	; 0x525
 800170c:	f002 fd64 	bl	80041d8 <USART_GetITStatus>
 8001710:	2800      	cmp	r0, #0
 8001712:	f000 8097 	beq.w	8001844 <USART1_IRQHandler+0x148>
        static unsigned int count=0;

		
		//static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART2 data register is saved in t
 8001716:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800171e:	8899      	ldrh	r1, [r3, #4]
 8001720:	b2c9      	uxtb	r1, r1


        if (t == 8 || t== 127) {
 8001722:	297f      	cmp	r1, #127	; 0x7f
 8001724:	bf18      	it	ne
 8001726:	2908      	cmpne	r1, #8
 8001728:	d11a      	bne.n	8001760 <USART1_IRQHandler+0x64>
            USART1_rtos.write_pos--;
 800172a:	f640 43a8 	movw	r3, #3240	; 0xca8
 800172e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	3a01      	subs	r2, #1
 8001736:	601a      	str	r2, [r3, #0]
            USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 8001738:	4413      	add	r3, r2
 800173a:	220d      	movs	r2, #13
 800173c:	771a      	strb	r2, [r3, #28]
            USART_put(USART1, '\b');
 800173e:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001742:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001746:	4620      	mov	r0, r4
 8001748:	2108      	movs	r1, #8
 800174a:	f000 fbb5 	bl	8001eb8 <USART_put>
            USART_put(USART1, ' ');
 800174e:	4620      	mov	r0, r4
 8001750:	2120      	movs	r1, #32
 8001752:	f000 fbb1 	bl	8001eb8 <USART_put>
            USART_put(USART1, '\b');
 8001756:	4620      	mov	r0, r4
 8001758:	2108      	movs	r1, #8
 800175a:	f000 fbad 	bl	8001eb8 <USART_put>
            return;
 800175e:	e071      	b.n	8001844 <USART1_IRQHandler+0x148>

        }

		// check if the received character is not the LF character (used to determine end of string) 
		// or the if the maximum string length has been been reached 
		else if/*(*/ (t != '\r')/* && (cnt< MAX_STRLEN-1) )*/{ 
 8001760:	290d      	cmp	r1, #13
 8001762:	d026      	beq.n	80017b2 <USART1_IRQHandler+0xb6>
            count++;
 8001764:	f640 1318 	movw	r3, #2328	; 0x918
 8001768:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	3201      	adds	r2, #1
 8001770:	601a      	str	r2, [r3, #0]
        if (USART1_rtos.write_pos == USART_BUFFER_LEN-1) USART1_rtos.write_pos=0;
 8001772:	f640 43a8 	movw	r3, #3240	; 0xca8
 8001776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	f240 132b 	movw	r3, #299	; 0x12b
 8001780:	429a      	cmp	r2, r3
 8001782:	bf01      	itttt	eq
 8001784:	f640 43a8 	movweq	r3, #3240	; 0xca8
 8001788:	f2c2 0300 	movteq	r3, #8192	; 0x2000
 800178c:	2200      	moveq	r2, #0
 800178e:	601a      	streq	r2, [r3, #0]

			USART1_rtos.buffer[USART1_rtos.write_pos] = t;
 8001790:	f640 44a8 	movw	r4, #3240	; 0xca8
 8001794:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	4423      	add	r3, r4
 800179c:	7719      	strb	r1, [r3, #28]
            USART_put(USART1, t);
 800179e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017a2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80017a6:	f000 fb87 	bl	8001eb8 <USART_put>
            USART1_rtos.write_pos++;
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	6023      	str	r3, [r4, #0]
 80017b0:	e048      	b.n	8001844 <USART1_IRQHandler+0x148>

		}

		else{ // otherwise reset the character counter and print newline 
            if (count != 0) {
 80017b2:	f640 1318 	movw	r3, #2328	; 0x918
 80017b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d037      	beq.n	8001830 <USART1_IRQHandler+0x134>
                
                USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 80017c0:	f640 44a8 	movw	r4, #3240	; 0xca8
 80017c4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	4423      	add	r3, r4
 80017cc:	220d      	movs	r2, #13
 80017ce:	771a      	strb	r2, [r3, #28]

                USART_puts(USART1, "\r\n");
 80017d0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80017d8:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 80017dc:	f6c0 0100 	movt	r1, #2048	; 0x800
 80017e0:	f000 fb7c 	bl	8001edc <USART_puts>

                //char *pos = &USART1_received_string[USART1_write_pos-count];
                //char command[len];
//                USART_readline(USART1, &command, len);
                char *pos = &USART1_rtos.buffer[USART1_rtos.write_pos-count];
 80017e4:	6822      	ldr	r2, [r4, #0]
 80017e6:	f640 1618 	movw	r6, #2328	; 0x918
 80017ea:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80017ee:	6833      	ldr	r3, [r6, #0]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	4423      	add	r3, r4


                xTaskCreate(vUSART_command_handler, (signed char*)"vUSART_command_handler", 468, pos, tskIDLE_PRIORITY+9, NULL);
 80017f4:	2209      	movs	r2, #9
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	2500      	movs	r5, #0
 80017fa:	9501      	str	r5, [sp, #4]
 80017fc:	9502      	str	r5, [sp, #8]
 80017fe:	9503      	str	r5, [sp, #12]
 8001800:	f241 301d 	movw	r0, #4893	; 0x131d
 8001804:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001808:	f248 0100 	movw	r1, #32768	; 0x8000
 800180c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001810:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8001814:	331c      	adds	r3, #28
 8001816:	f001 fa2b 	bl	8002c70 <xTaskGenericCreate>
//                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY, NULL);

                xSemaphoreGive(USART1_rtos.transmit_event_mutex);
 800181a:	69a0      	ldr	r0, [r4, #24]
 800181c:	4629      	mov	r1, r5
 800181e:	462a      	mov	r2, r5
 8001820:	462b      	mov	r3, r5
 8001822:	f001 fef9 	bl	8003618 <xQueueGenericSend>

                count = 0;
 8001826:	6035      	str	r5, [r6, #0]
                USART1_rtos.write_pos++;
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	6023      	str	r3, [r4, #0]
 800182e:	e009      	b.n	8001844 <USART1_IRQHandler+0x148>

            }
            else USART_puts(USART1, "\r\n");
 8001830:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001834:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001838:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 800183c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001840:	f000 fb4c 	bl	8001edc <USART_puts>
		}
	}
}
 8001844:	b004      	add	sp, #16
 8001846:	bd70      	pop	{r4, r5, r6, pc}

08001848 <USART1_Init>:
*/

//Initialize GPIO and USART2
//

void USART1_Init(void) {
 8001848:	b530      	push	{r4, r5, lr}
 800184a:	b089      	sub	sp, #36	; 0x24

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800184c:	2002      	movs	r0, #2
 800184e:	2101      	movs	r1, #1
 8001850:	f002 fa4e 	bl	8003cf0 <RCC_AHB1PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);	
 8001854:	2010      	movs	r0, #16
 8001856:	2101      	movs	r1, #1
 8001858:	f002 fa6e 	bl	8003d38 <RCC_APB2PeriphClockCmd>
	USART_InitTypeDef USART_InitStructure;

    NVIC_InitTypeDef NVIC_InitStructure;

	//GPIO Configuration
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6;
 800185c:	23c0      	movs	r3, #192	; 0xc0
 800185e:	9306      	str	r3, [sp, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001860:	2302      	movs	r3, #2
 8001862:	f88d 301c 	strb.w	r3, [sp, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001866:	2400      	movs	r4, #0
 8001868:	f88d 401e 	strb.w	r4, [sp, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800186c:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001870:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001874:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001878:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800187c:	4628      	mov	r0, r5
 800187e:	a906      	add	r1, sp, #24
 8001880:	f002 f936 	bl	8003af0 <GPIO_Init>


	//Connect USART pins to AF
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 8001884:	4628      	mov	r0, r5
 8001886:	2106      	movs	r1, #6
 8001888:	2207      	movs	r2, #7
 800188a:	f002 f97d 	bl	8003b88 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 800188e:	4628      	mov	r0, r5
 8001890:	2107      	movs	r1, #7
 8001892:	460a      	mov	r2, r1
 8001894:	f002 f978 	bl	8003b88 <GPIO_PinAFConfig>


	//USART Parameters
	USART_InitStructure.USART_BaudRate = 38400;
 8001898:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800189c:	9302      	str	r3, [sp, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800189e:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80018a2:	f8ad 400e 	strh.w	r4, [sp, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 80018a6:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80018aa:	f8ad 4014 	strh.w	r4, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 80018ae:	230c      	movs	r3, #12
 80018b0:	f8ad 3012 	strh.w	r3, [sp, #18]

	//Configuring And Enabling USART2
	USART_Init(USART1, &USART_InitStructure);
 80018b4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80018b8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80018bc:	4628      	mov	r0, r5
 80018be:	a902      	add	r1, sp, #8
 80018c0:	f002 fbee 	bl	80040a0 <USART_Init>


    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //allow usart interrupt
 80018c4:	4628      	mov	r0, r5
 80018c6:	f240 5125 	movw	r1, #1317	; 0x525
 80018ca:	2201      	movs	r2, #1
 80018cc:	f002 fc68 	bl	80041a0 <USART_ITConfig>

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 80018d0:	2325      	movs	r3, #37	; 0x25
 80018d2:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80018d6:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80018da:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80018de:	2401      	movs	r4, #1
 80018e0:	f88d 4007 	strb.w	r4, [sp, #7]

    NVIC_Init(&NVIC_InitStructure);
 80018e4:	a801      	add	r0, sp, #4
 80018e6:	f002 f8c5 	bl	8003a74 <NVIC_Init>

	USART_Cmd(USART1, ENABLE);
 80018ea:	4628      	mov	r0, r5
 80018ec:	4621      	mov	r1, r4
 80018ee:	f002 fc45 	bl	800417c <USART_Cmd>


}
 80018f2:	b009      	add	sp, #36	; 0x24
 80018f4:	bd30      	pop	{r4, r5, pc}
 80018f6:	bf00      	nop

080018f8 <initx>:
void initx(void){
 80018f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018fa:	b089      	sub	sp, #36	; 0x24
	//Enable GPIO Clocks For USART2
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80018fc:	2001      	movs	r0, #1
 80018fe:	4601      	mov	r1, r0
 8001900:	f002 f9f6 	bl	8003cf0 <RCC_AHB1PeriphClockCmd>

	//Enable Clocks for USART2
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
 8001904:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001908:	2101      	movs	r1, #1
 800190a:	f002 fa03 	bl	8003d14 <RCC_APB1PeriphClockCmd>
	USART_InitTypeDef USART_InitStructure;

    NVIC_InitTypeDef NVIC_InitStructure;

	//GPIO Configuration
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800190e:	270c      	movs	r7, #12
 8001910:	9706      	str	r7, [sp, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001912:	2602      	movs	r6, #2
 8001914:	f88d 601c 	strb.w	r6, [sp, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001918:	2400      	movs	r4, #0
 800191a:	f88d 401e 	strb.w	r4, [sp, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800191e:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001922:	f88d 601d 	strb.w	r6, [sp, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001926:	4625      	mov	r5, r4
 8001928:	f2c4 0502 	movt	r5, #16386	; 0x4002
 800192c:	4628      	mov	r0, r5
 800192e:	a906      	add	r1, sp, #24
 8001930:	f002 f8de 	bl	8003af0 <GPIO_Init>


	//Connect USART pins to AF
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001934:	4628      	mov	r0, r5
 8001936:	4631      	mov	r1, r6
 8001938:	2207      	movs	r2, #7
 800193a:	f002 f925 	bl	8003b88 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 800193e:	4628      	mov	r0, r5
 8001940:	2103      	movs	r1, #3
 8001942:	2207      	movs	r2, #7
 8001944:	f002 f920 	bl	8003b88 <GPIO_PinAFConfig>

	//Initialize LED
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001948:	2008      	movs	r0, #8
 800194a:	2101      	movs	r1, #1
 800194c:	f002 f9d0 	bl	8003cf0 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 8001950:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001954:	9306      	str	r3, [sp, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001956:	2501      	movs	r5, #1
 8001958:	f88d 501c 	strb.w	r5, [sp, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800195c:	f88d 401e 	strb.w	r4, [sp, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001960:	2303      	movs	r3, #3
 8001962:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001966:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 800196a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800196e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001972:	a906      	add	r1, sp, #24
 8001974:	f002 f8bc 	bl	8003af0 <GPIO_Init>
	//USART Parameters

	USART_InitStructure.USART_BaudRate = 38400;
 8001978:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 800197c:	9302      	str	r3, [sp, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800197e:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001982:	f8ad 400e 	strh.w	r4, [sp, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 8001986:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800198a:	f8ad 4014 	strh.w	r4, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 800198e:	f8ad 7012 	strh.w	r7, [sp, #18]

	//Configuring And Enabling USART2
	USART_Init(USART2, &USART_InitStructure);
 8001992:	f44f 4688 	mov.w	r6, #17408	; 0x4400
 8001996:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800199a:	4630      	mov	r0, r6
 800199c:	a902      	add	r1, sp, #8
 800199e:	f002 fb7f 	bl	80040a0 <USART_Init>


    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80019a2:	4630      	mov	r0, r6
 80019a4:	f240 5125 	movw	r1, #1317	; 0x525
 80019a8:	462a      	mov	r2, r5
 80019aa:	f002 fbf9 	bl	80041a0 <USART_ITConfig>

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80019ae:	2326      	movs	r3, #38	; 0x26
 80019b0:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80019b4:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80019b8:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80019bc:	f88d 5007 	strb.w	r5, [sp, #7]

    NVIC_Init(&NVIC_InitStructure);
 80019c0:	a801      	add	r0, sp, #4
 80019c2:	f002 f857 	bl	8003a74 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 80019c6:	4630      	mov	r0, r6
 80019c8:	4629      	mov	r1, r5
 80019ca:	f002 fbd7 	bl	800417c <USART_Cmd>
}
 80019ce:	b009      	add	sp, #36	; 0x24
 80019d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d2:	bf00      	nop

080019d4 <vRTC_Init>:
    }
    vTaskDelete(NULL);
}


void vRTC_Init(void) {
 80019d4:	b510      	push	{r4, lr}
 80019d6:	b084      	sub	sp, #16
    RTC_InitTypeDef RTC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 80019d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019dc:	2101      	movs	r1, #1
 80019de:	f002 f999 	bl	8003d14 <RCC_APB1PeriphClockCmd>
    PWR_BackupAccessCmd(ENABLE);
 80019e2:	2001      	movs	r0, #1
 80019e4:	f002 f8e8 	bl	8003bb8 <PWR_BackupAccessCmd>

    RCC_LSICmd(ENABLE);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f002 f8eb 	bl	8003bc4 <RCC_LSICmd>
    while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 80019ee:	2461      	movs	r4, #97	; 0x61
 80019f0:	4620      	mov	r0, r4
 80019f2:	f002 f9b3 	bl	8003d5c <RCC_GetFlagStatus>
 80019f6:	2800      	cmp	r0, #0
 80019f8:	d0fa      	beq.n	80019f0 <vRTC_Init+0x1c>
    RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 80019fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019fe:	f002 f955 	bl	8003cac <RCC_RTCCLKConfig>
    RCC_RTCCLKCmd(ENABLE);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f002 f96e 	bl	8003ce4 <RCC_RTCCLKCmd>
    RTC_WaitForSynchro();
 8001a08:	f002 fa50 	bl	8003eac <RTC_WaitForSynchro>

    //if (RTC_ReadBackupRegister(RTC_BKP_DR0)!=0x9527) {
        RTC_WriteProtectionCmd(DISABLE); 
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f002 f9d3 	bl	8003db8 <RTC_WriteProtectionCmd>

        //RTC_EnterInitMode();

        RTC_InitStructure.RTC_HourFormat = RTC_HourFormat_24;
 8001a12:	2400      	movs	r4, #0
 8001a14:	9401      	str	r4, [sp, #4]
        RTC_InitStructure.RTC_AsynchPrediv = 0x7D-1;
 8001a16:	237c      	movs	r3, #124	; 0x7c
 8001a18:	9302      	str	r3, [sp, #8]
        RTC_InitStructure.RTC_SynchPrediv = 0xFF-1;
 8001a1a:	23fe      	movs	r3, #254	; 0xfe
 8001a1c:	9303      	str	r3, [sp, #12]
        RTC_Init(&RTC_InitStructure);
 8001a1e:	a801      	add	r0, sp, #4
 8001a20:	f002 fa18 	bl	8003e54 <RTC_Init>

        //setTime(0x23, 0x58, 0x00);
        setTime(0x00, 0x00, 0x00);
 8001a24:	4620      	mov	r0, r4
 8001a26:	4621      	mov	r1, r4
 8001a28:	4622      	mov	r2, r4
 8001a2a:	f000 ffc7 	bl	80029bc <setTime>


        setDate(12, 5, 17);
 8001a2e:	200c      	movs	r0, #12
 8001a30:	2105      	movs	r1, #5
 8001a32:	2211      	movs	r2, #17
 8001a34:	f001 f808 	bl	8002a48 <setDate>
        //RTC_WriteProtectionCmd(ENABLE);
        //RTC_WriteBackupRegister(RTC_BKP_DR0,0x9527);  //Initialization is complete, set the flag
    //}

//      PWR_BackupAccessCmd(DISABLE);
}
 8001a38:	b004      	add	sp, #16
 8001a3a:	bd10      	pop	{r4, pc}

08001a3c <main>:
        //USART_puts(USART1, "5\r\n");

    }
}

int main(void){
 8001a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a40:	b088      	sub	sp, #32
	//Call initx(); To Initialize USART & GPIO
    
	initx();
 8001a42:	f7ff ff59 	bl	80018f8 <initx>
    USART1_Init();
 8001a46:	f7ff feff 	bl	8001848 <USART1_Init>
    init_us_timer();
 8001a4a:	f7ff fc3d 	bl	80012c8 <init_us_timer>
    vRTC_Init();
 8001a4e:	f7ff ffc1 	bl	80019d4 <vRTC_Init>
    setTime(0, 0, 0);
 8001a52:	2000      	movs	r0, #0
 8001a54:	4601      	mov	r1, r0
 8001a56:	4602      	mov	r2, r0
 8001a58:	f000 ffb0 	bl	80029bc <setTime>

    setSystemDay(1); //sets it as first day 
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 ff59 	bl	8002914 <setSystemDay>
    timer_list_head = NULL;
 8001a62:	f640 53f0 	movw	r3, #3568	; 0xdf0
 8001a66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a6a:	2500      	movs	r5, #0
 8001a6c:	601d      	str	r5, [r3, #0]
    USART_rtos_init(&USART1_rtos, USART1);
 8001a6e:	f640 44a8 	movw	r4, #3240	; 0xca8
 8001a72:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001a76:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 8001a7a:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8001a7e:	4620      	mov	r0, r4
 8001a80:	4631      	mov	r1, r6
 8001a82:	f000 fa05 	bl	8001e90 <USART_rtos_init>
    setup_output(&USART1_rtos);
 8001a86:	4620      	mov	r0, r4
 8001a88:	f000 fabc 	bl	8002004 <setup_output>
    //CLOCK_SetClockTo168MHz();
   // setSysTick();

    int i;

    USART_puts(USART1, "\nBooting up...\r\n");
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f248 0198 	movw	r1, #32920	; 0x8098
 8001a92:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001a96:	f000 fa21 	bl	8001edc <USART_puts>
    for(i=0; i<2; i++) { 
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8001a9a:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 8001a9e:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001aa2:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
        GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8001aa6:	f44f 5900 	mov.w	r9, #8192	; 0x2000
        GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8001aaa:	f44f 4880 	mov.w	r8, #16384	; 0x4000
        GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8001aae:	f44f 4700 	mov.w	r7, #32768	; 0x8000
        delay_ms(500);
 8001ab2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   // setSysTick();

    int i;

    USART_puts(USART1, "\nBooting up...\r\n");
    for(i=0; i<2; i++) { 
 8001ab6:	e01b      	b.n	8001af0 <main+0xb4>
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8001ab8:	4620      	mov	r0, r4
 8001aba:	4651      	mov	r1, sl
 8001abc:	f002 f860 	bl	8003b80 <GPIO_SetBits>
        GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4649      	mov	r1, r9
 8001ac4:	f002 f85c 	bl	8003b80 <GPIO_SetBits>
        GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4641      	mov	r1, r8
 8001acc:	f002 f858 	bl	8003b80 <GPIO_SetBits>
        GPIO_SetBits(GPIOD, GPIO_Pin_15);
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4639      	mov	r1, r7
 8001ad4:	f002 f854 	bl	8003b80 <GPIO_SetBits>
        delay_ms(500);
 8001ad8:	4630      	mov	r0, r6
 8001ada:	f7ff fbed 	bl	80012b8 <delay_ms>

        GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001ae4:	f002 f84e 	bl	8003b84 <GPIO_ResetBits>
        delay_ms(500);
 8001ae8:	4630      	mov	r0, r6
 8001aea:	f7ff fbe5 	bl	80012b8 <delay_ms>
   // setSysTick();

    int i;

    USART_puts(USART1, "\nBooting up...\r\n");
    for(i=0; i<2; i++) { 
 8001aee:	3501      	adds	r5, #1
 8001af0:	2d01      	cmp	r5, #1
 8001af2:	dde1      	ble.n	8001ab8 <main+0x7c>

        GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
        delay_ms(500);
    }

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001af4:	2010      	movs	r0, #16
 8001af6:	2101      	movs	r1, #1
 8001af8:	f002 f8fa 	bl	8003cf0 <RCC_AHB1PeriphClockCmd>

    GPIO_InitTypeDef gpio_ppump;

    gpio_ppump.GPIO_Pin = GPIO_Pin_5; 
 8001afc:	2620      	movs	r6, #32
 8001afe:	9606      	str	r6, [sp, #24]
    gpio_ppump.GPIO_OType = GPIO_OType_PP; 
 8001b00:	2400      	movs	r4, #0
 8001b02:	f88d 401e 	strb.w	r4, [sp, #30]
    gpio_ppump.GPIO_Mode = GPIO_Mode_OUT; 
 8001b06:	2701      	movs	r7, #1
 8001b08:	f88d 701c 	strb.w	r7, [sp, #28]
    gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	f88d 301d 	strb.w	r3, [sp, #29]
    GPIO_Init(GPIOE, &gpio_ppump);
 8001b12:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 8001b16:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	a906      	add	r1, sp, #24
 8001b1e:	f001 ffe7 	bl	8003af0 <GPIO_Init>

    GPIO_ResetBits(GPIOE, GPIO_Pin_5);
 8001b22:	4628      	mov	r0, r5
 8001b24:	4631      	mov	r1, r6
 8001b26:	f002 f82d 	bl	8003b84 <GPIO_ResetBits>
        GPIO_SetBits(GPIOE, GPIO_Pin_6);

*/


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001b2a:	2004      	movs	r0, #4
 8001b2c:	4639      	mov	r1, r7
 8001b2e:	f002 f8df 	bl	8003cf0 <RCC_AHB1PeriphClockCmd>

    GPIO_InitTypeDef gpio_ultrasonic;

    gpio_ultrasonic.GPIO_Pin = GPIO_Pin_7; //echo
 8001b32:	2680      	movs	r6, #128	; 0x80
 8001b34:	9604      	str	r6, [sp, #16]
    gpio_ultrasonic.GPIO_OType = GPIO_OType_PP;
 8001b36:	f88d 4016 	strb.w	r4, [sp, #22]
    //gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_DOWN;
    gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 8001b3a:	f88d 4014 	strb.w	r4, [sp, #20]
    gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	f88d 3015 	strb.w	r3, [sp, #21]
    GPIO_Init(GPIOE, &gpio_ultrasonic);
 8001b44:	4628      	mov	r0, r5
 8001b46:	a904      	add	r1, sp, #16
 8001b48:	f001 ffd2 	bl	8003af0 <GPIO_Init>

    gpio_ultrasonic.GPIO_Pin = GPIO_Pin_8; //trigger
 8001b4c:	f44f 7880 	mov.w	r8, #256	; 0x100
 8001b50:	f8cd 8010 	str.w	r8, [sp, #16]
    gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 8001b54:	f88d 7014 	strb.w	r7, [sp, #20]
    GPIO_Init(GPIOE, &gpio_ultrasonic);
 8001b58:	4628      	mov	r0, r5
 8001b5a:	a904      	add	r1, sp, #16
 8001b5c:	f001 ffc8 	bl	8003af0 <GPIO_Init>
    servo_init(&servo2, &(TIM4->CCR2), 500, 1000);
    servo_set_degrees(&servo1, 90);
*/


    xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY, NULL);
 8001b60:	9400      	str	r4, [sp, #0]
 8001b62:	9401      	str	r4, [sp, #4]
 8001b64:	9402      	str	r4, [sp, #8]
 8001b66:	9403      	str	r4, [sp, #12]
 8001b68:	f241 3039 	movw	r0, #4921	; 0x1339
 8001b6c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b70:	f248 01ac 	movw	r1, #32940	; 0x80ac
 8001b74:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b78:	4632      	mov	r2, r6
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	f001 f878 	bl	8002c70 <xTaskGenericCreate>
    xTaskCreate(vInterruptTimer, (signed char*)"vInterruptTimer", 128, NULL, tskIDLE_PRIORITY+15, NULL);
 8001b80:	230f      	movs	r3, #15
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	9401      	str	r4, [sp, #4]
 8001b86:	9402      	str	r4, [sp, #8]
 8001b88:	9403      	str	r4, [sp, #12]
 8001b8a:	f241 50cd 	movw	r0, #5581	; 0x15cd
 8001b8e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001b92:	f248 01b8 	movw	r1, #32952	; 0x80b8
 8001b96:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001b9a:	4632      	mov	r2, r6
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	f001 f867 	bl	8002c70 <xTaskGenericCreate>
    xTaskCreate(vIncrementDay, (signed char*)"vIncrementDay", 128, NULL, tskIDLE_PRIORITY+10, NULL);
 8001ba2:	230a      	movs	r3, #10
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	9401      	str	r4, [sp, #4]
 8001ba8:	9402      	str	r4, [sp, #8]
 8001baa:	9403      	str	r4, [sp, #12]
 8001bac:	f241 6041 	movw	r0, #5697	; 0x1641
 8001bb0:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bb4:	f248 01c8 	movw	r1, #32968	; 0x80c8
 8001bb8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bbc:	4632      	mov	r2, r6
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	f001 f856 	bl	8002c70 <xTaskGenericCreate>


    vLight_parameters light_p;
    //ph_p.target_ph = 200;

    USART_puts(USART1, "LOOK AT LINE 18 FOR TODO!\r\n------------------------\r\n\r\n");
 8001bc4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001bc8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001bcc:	f248 01d8 	movw	r1, #32984	; 0x80d8
 8001bd0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bd4:	f000 f982 	bl	8001edc <USART_puts>
    //xTaskCreate(vHydroponicSystem_Init, (signed char*)"vHydroponicSystem_Init", 256, NULL, tskIDLE_PRIORITY+9, NULL);
    //xTaskCreate(vLightingSystem_Init, (signed char*)"vLightingSystem_Init", 64, NULL, tskIDLE_PRIORITY+9, NULL);
    //xTaskCreate(vACSystem_Init, (signed char*)"vACSystem_Init", 64, NULL, tskIDLE_PRIORITY+9, NULL);


    xTaskCreate(vPH_task, (signed char*)"vPH", 256, NULL, tskIDLE_PRIORITY+5, NULL);
 8001bd8:	2305      	movs	r3, #5
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	9401      	str	r4, [sp, #4]
 8001bde:	9402      	str	r4, [sp, #8]
 8001be0:	9403      	str	r4, [sp, #12]
 8001be2:	f241 30d9 	movw	r0, #5081	; 0x13d9
 8001be6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001bea:	f248 1110 	movw	r1, #33040	; 0x8110
 8001bee:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001bf2:	4642      	mov	r2, r8
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	f001 f83b 	bl	8002c70 <xTaskGenericCreate>
   
	//xTaskCreate(UsartTask, (signed char*)"UsartTask", 128, NULL, tskIDLE_PRIORITY+1, NULL);

	//Call Scheduler
	vTaskStartScheduler();
 8001bfa:	f001 f92b 	bl	8002e54 <vTaskStartScheduler>
    //
    
}
 8001bfe:	4620      	mov	r0, r4
 8001c00:	b008      	add	sp, #32
 8001c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c06:	bf00      	nop

08001c08 <Reset_Handler>:
 8001c08:	2100      	movs	r1, #0
 8001c0a:	e003      	b.n	8001c14 <LoopCopyDataInit>

08001c0c <CopyDataInit>:
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <LoopFillZerobss+0x20>)
 8001c0e:	585b      	ldr	r3, [r3, r1]
 8001c10:	5043      	str	r3, [r0, r1]
 8001c12:	3104      	adds	r1, #4

08001c14 <LoopCopyDataInit>:
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopFillZerobss+0x24>)
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <LoopFillZerobss+0x28>)
 8001c18:	1842      	adds	r2, r0, r1
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3f6      	bcc.n	8001c0c <CopyDataInit>
 8001c1e:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopFillZerobss+0x2c>)
 8001c20:	e002      	b.n	8001c28 <LoopFillZerobss>

08001c22 <FillZerobss>:
 8001c22:	2300      	movs	r3, #0
 8001c24:	f842 3b04 	str.w	r3, [r2], #4

08001c28 <LoopFillZerobss>:
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <LoopFillZerobss+0x30>)
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3f9      	bcc.n	8001c22 <FillZerobss>
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <LoopFillZerobss+0x34>)
 8001c30:	6801      	ldr	r1, [r0, #0]
 8001c32:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001c36:	6001      	str	r1, [r0, #0]
 8001c38:	f000 f8a2 	bl	8001d80 <SystemInit>
 8001c3c:	f002 fb12 	bl	8004264 <__libc_init_array>
 8001c40:	f7ff fefc 	bl	8001a3c <main>
 8001c44:	4770      	bx	lr
 8001c46:	0000      	.short	0x0000
 8001c48:	08008670 	.word	0x08008670
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	200008ec 	.word	0x200008ec
 8001c54:	200008f0 	.word	0x200008f0
 8001c58:	20000eec 	.word	0x20000eec
 8001c5c:	e000ed88 	.word	0xe000ed88

08001c60 <ADC_IRQHandler>:
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
 8001c62:	0000      	movs	r0, r0

08001c64 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001c64:	b082      	sub	sp, #8
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9300      	str	r3, [sp, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001c6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c7a:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001c7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001c80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c84:	6813      	ldr	r3, [r2, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	9300      	str	r3, [sp, #0]
    StartUpCounter++;
 8001c8c:	9b01      	ldr	r3, [sp, #4]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	9301      	str	r3, [sp, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001c92:	9b00      	ldr	r3, [sp, #0]
 8001c94:	b91b      	cbnz	r3, 8001c9e <SetSysClock+0x3a>
 8001c96:	9b01      	ldr	r3, [sp, #4]
 8001c98:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001c9c:	d1f2      	bne.n	8001c84 <SetSysClock+0x20>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001c9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ca2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8001cac:	bf14      	ite	ne
 8001cae:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001cb0:	2300      	moveq	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001cb4:	9b00      	ldr	r3, [sp, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d146      	bne.n	8001d48 <SetSysClock+0xe4>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001cba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8001cca:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8001cce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001cd8:	6011      	str	r1, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ce4:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8001cec:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001cee:	f245 4208 	movw	r2, #21512	; 0x5408
 8001cf2:	f2c0 7240 	movt	r2, #1856	; 0x740
 8001cf6:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001d00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d0e:	d0fb      	beq.n	8001d08 <SetSysClock+0xa4>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001d10:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d18:	f240 6205 	movw	r2, #1541	; 0x605
 8001d1c:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001d1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	f022 0203 	bic.w	r2, r2, #3
 8001d2c:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	f042 0202 	orr.w	r2, r2, #2
 8001d34:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001d36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d3e:	6893      	ldr	r3, [r2, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d1fa      	bne.n	8001d3e <SetSysClock+0xda>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8001d48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001d56:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8001d58:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d5c:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8001d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8001d6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001d70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d74:	6813      	ldr	r3, [r2, #0]
 8001d76:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001d7a:	d0fb      	beq.n	8001d74 <SetSysClock+0x110>
  {
  }
}
 8001d7c:	b002      	add	sp, #8
 8001d7e:	4770      	bx	lr

08001d80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b508      	push	{r3, lr}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d96:	6819      	ldr	r1, [r3, #0]
 8001d98:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8001d9c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001da0:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001da2:	f243 0110 	movw	r1, #12304	; 0x3010
 8001da6:	f2c2 4100 	movt	r1, #9216	; 0x2400
 8001daa:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8001db2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001db4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001db6:	f7ff ff55 	bl	8001c64 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dba:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8001dbe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001dc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	bd08      	pop	{r3, pc}
 8001dca:	bf00      	nop

08001dcc <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 8001dcc:	b430      	push	{r4, r5}
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 8001dce:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8001dd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	b943      	cbnz	r3, 8001dec <_sbrk_r+0x20>
        __brkval = &end;
 8001dda:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8001dde:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001de2:	f640 62ec 	movw	r2, #3820	; 0xeec
 8001de6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001dea:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 8001dec:	f640 53f4 	movw	r3, #3572	; 0xdf4
 8001df0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4411      	add	r1, r2
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001df8:	f3ef 8508 	mrs	r5, MSP
 8001dfc:	f240 0308 	movw	r3, #8
 8001e00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e04:	681c      	ldr	r4, [r3, #0]
 8001e06:	1b2b      	subs	r3, r5, r4
 8001e08:	4299      	cmp	r1, r3
        r->_errno = ENOMEM;
 8001e0a:	bf83      	ittte	hi
 8001e0c:	230c      	movhi	r3, #12
 8001e0e:	6003      	strhi	r3, [r0, #0]
        return (void*)-1;
 8001e10:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    }

    void *ret = __brkval;
    __brkval += incr;
 8001e14:	f640 53f4 	movwls	r3, #3572	; 0xdf4
 8001e18:	bf9e      	ittt	ls
 8001e1a:	f2c2 0300 	movtls	r3, #8192	; 0x2000
 8001e1e:	6019      	strls	r1, [r3, #0]

    return ret;
 8001e20:	4610      	movls	r0, r2
}
 8001e22:	bc30      	pop	{r4, r5}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <__malloc_lock>:
    return -1;
}


void __malloc_lock(struct _reent *r)
{
 8001e28:	b508      	push	{r3, lr}
    vPortEnterCritical();
 8001e2a:	f001 fdcd 	bl	80039c8 <vPortEnterCritical>
 8001e2e:	bd08      	pop	{r3, pc}

08001e30 <__malloc_unlock>:
}


void __malloc_unlock(struct _reent *r)
{
 8001e30:	b508      	push	{r3, lr}
    vPortExitCritical();
 8001e32:	f001 fdd5 	bl	80039e0 <vPortExitCritical>
 8001e36:	bd08      	pop	{r3, pc}

08001e38 <PPump_Module_dispense>:
        module->state = MODULE_STANDBY;
        module->mutex = xSemaphoreCreateMutex();
    }
}

void PPump_Module_dispense(PPump_Module *module, int amount_ml) {
 8001e38:	b538      	push	{r3, r4, r5, lr}
 8001e3a:	460d      	mov	r5, r1
    if (module) {
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	b1b8      	cbz	r0, 8001e70 <PPump_Module_dispense+0x38>
        GPIO_SetBits(module->port_out, module->pin_out);
 8001e40:	6800      	ldr	r0, [r0, #0]
 8001e42:	88a1      	ldrh	r1, [r4, #4]
 8001e44:	f001 fe9c 	bl	8003b80 <GPIO_SetBits>
        delay_ms((module->ml_per_m/60*amount_ml)*1000);
 8001e48:	88e2      	ldrh	r2, [r4, #6]
 8001e4a:	f648 0389 	movw	r3, #34953	; 0x8889
 8001e4e:	f6c8 0388 	movt	r3, #34952	; 0x8888
 8001e52:	fba3 1302 	umull	r1, r3, r3, r2
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	fb05 f503 	mul.w	r5, r5, r3
 8001e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e60:	fb00 f005 	mul.w	r0, r0, r5
 8001e64:	f7ff fa28 	bl	80012b8 <delay_ms>
        GPIO_ResetBits(module->port_out, module->pin_out);
 8001e68:	6820      	ldr	r0, [r4, #0]
 8001e6a:	88a1      	ldrh	r1, [r4, #4]
 8001e6c:	f001 fe8a 	bl	8003b84 <GPIO_ResetBits>
 8001e70:	bd38      	pop	{r3, r4, r5, pc}
 8001e72:	bf00      	nop

08001e74 <USART_rtos_wait_send>:
#include "usart_rtos.h"
#include <stdlib.h>
#include <stdarg.h>


int USART_rtos_wait_send(USART_rtos_packet *packet) {
 8001e74:	b508      	push	{r3, lr}
 8001e76:	4603      	mov	r3, r0
    
    return (xSemaphoreTake(packet->sent_mutex, packet->max_block) == pdTRUE);
 8001e78:	6880      	ldr	r0, [r0, #8]
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	f001 fc56 	bl	8003730 <xQueueGenericReceive>
}
 8001e84:	2801      	cmp	r0, #1
 8001e86:	bf14      	ite	ne
 8001e88:	2000      	movne	r0, #0
 8001e8a:	2001      	moveq	r0, #1
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop

08001e90 <USART_rtos_init>:
    }
    return -1;
}


void USART_rtos_init(USART_rtos *USARTx_rtos,USART_TypeDef *USARTx) { //pass usart_Rtos and usartx
 8001e90:	b510      	push	{r4, lr}
 8001e92:	4604      	mov	r4, r0
    USARTx_rtos->id = USARTx;
 8001e94:	6081      	str	r1, [r0, #8]
    USARTx_rtos->write_pos = 0;
 8001e96:	2300      	movs	r3, #0
 8001e98:	6003      	str	r3, [r0, #0]
    USARTx_rtos->read_pos = 0;
 8001e9a:	6043      	str	r3, [r0, #4]

    USARTx_rtos->transmit_mutex = xSemaphoreCreateMutex(); 
 8001e9c:	f001 fc26 	bl	80036ec <xQueueCreateMutex>
 8001ea0:	60e0      	str	r0, [r4, #12]
    USARTx_rtos->receive_mutex = xSemaphoreCreateMutex(); 
 8001ea2:	f001 fc23 	bl	80036ec <xQueueCreateMutex>
 8001ea6:	6120      	str	r0, [r4, #16]

    USARTx_rtos->transmit_event_mutex = xSemaphoreCreateMutex(); 
 8001ea8:	f001 fc20 	bl	80036ec <xQueueCreateMutex>
 8001eac:	61a0      	str	r0, [r4, #24]
    USARTx_rtos->receive_event_mutex = xSemaphoreCreateMutex(); 
 8001eae:	f001 fc1d 	bl	80036ec <xQueueCreateMutex>
 8001eb2:	6160      	str	r0, [r4, #20]
 8001eb4:	bd10      	pop	{r4, pc}
 8001eb6:	bf00      	nop

08001eb8 <USART_put>:
} 

void USART_put(USART_TypeDef* USARTx, volatile char c) {
 8001eb8:	b500      	push	{lr}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	f88d 1007 	strb.w	r1, [sp, #7]
    // wait until data register is empty
    while(!(USARTx->SR & 0x00000040) );
 8001ec0:	8803      	ldrh	r3, [r0, #0]
 8001ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f9      	beq.n	8001ec0 <USART_put+0x8>
    USART_SendData(USARTx, c);
 8001ecc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001ed0:	f002 f962 	bl	8004198 <USART_SendData>
}
 8001ed4:	b003      	add	sp, #12
 8001ed6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001eda:	bf00      	nop

08001edc <USART_puts>:

void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	4606      	mov	r6, r0
 8001ee0:	460c      	mov	r4, r1
	while(*s){
 8001ee2:	e007      	b.n	8001ef4 <USART_puts+0x18>
        USART_put(USARTx, *s);
 8001ee4:	4625      	mov	r5, r4
 8001ee6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001eea:	4630      	mov	r0, r6
 8001eec:	f7ff ffe4 	bl	8001eb8 <USART_put>
		*s++;
 8001ef0:	7823      	ldrb	r3, [r4, #0]
 8001ef2:	462c      	mov	r4, r5
    while(!(USARTx->SR & 0x00000040) );
    USART_SendData(USARTx, c);
}

void USART_puts(USART_TypeDef* USARTx, volatile char *s){
	while(*s){
 8001ef4:	7823      	ldrb	r3, [r4, #0]
 8001ef6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001efa:	d1f3      	bne.n	8001ee4 <USART_puts+0x8>
        USART_put(USARTx, *s);
		*s++;
	}
}
 8001efc:	bd70      	pop	{r4, r5, r6, pc}
 8001efe:	bf00      	nop

08001f00 <vUSART_puts>:
int USART_rtos_wait_send(USART_rtos_packet *packet) {
    
    return (xSemaphoreTake(packet->sent_mutex, packet->max_block) == pdTRUE);
}

void vUSART_puts(USART_rtos_packet *packet) {
 8001f00:	b510      	push	{r4, lr}
 8001f02:	4604      	mov	r4, r0

    if (xSemaphoreTake(packet->USARTx_rtos->transmit_mutex, portMAX_DELAY) == pdTRUE) {
 8001f04:	6803      	ldr	r3, [r0, #0]
 8001f06:	68d8      	ldr	r0, [r3, #12]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f0e:	460b      	mov	r3, r1
 8001f10:	f001 fc0e 	bl	8003730 <xQueueGenericReceive>
 8001f14:	2801      	cmp	r0, #1
 8001f16:	d11c      	bne.n	8001f52 <vUSART_puts+0x52>
        taskENTER_CRITICAL();
 8001f18:	f001 fd56 	bl	80039c8 <vPortEnterCritical>
        USART_puts(packet->USARTx_rtos->id, packet->msg);
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	6898      	ldr	r0, [r3, #8]
 8001f20:	6861      	ldr	r1, [r4, #4]
 8001f22:	f7ff ffdb 	bl	8001edc <USART_puts>

        xSemaphoreGive(packet->USARTx_rtos->transmit_event_mutex);
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	6998      	ldr	r0, [r3, #24]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	460b      	mov	r3, r1
 8001f30:	f001 fb72 	bl	8003618 <xQueueGenericSend>
        xSemaphoreGive(packet->USARTx_rtos->transmit_mutex);
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	68d8      	ldr	r0, [r3, #12]
 8001f38:	2100      	movs	r1, #0
 8001f3a:	460a      	mov	r2, r1
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	f001 fb6b 	bl	8003618 <xQueueGenericSend>

        xSemaphoreGive(packet->sent_mutex); 
 8001f42:	68a0      	ldr	r0, [r4, #8]
 8001f44:	2100      	movs	r1, #0
 8001f46:	460a      	mov	r2, r1
 8001f48:	460b      	mov	r3, r1
 8001f4a:	f001 fb65 	bl	8003618 <xQueueGenericSend>
        taskEXIT_CRITICAL();
 8001f4e:	f001 fd47 	bl	80039e0 <vPortExitCritical>

    }
    vTaskDelete(NULL);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 ff2e 	bl	8002db4 <vTaskDelete>
 8001f58:	bd10      	pop	{r4, pc}
 8001f5a:	bf00      	nop

08001f5c <USART_rtos_puts>:
}

void USART_rtos_puts(USART_rtos_packet *packet, char *msg) {
 8001f5c:	b510      	push	{r4, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	4604      	mov	r4, r0

    packet->msg = msg;
 8001f62:	6041      	str	r1, [r0, #4]
    packet->sent_mutex = xSemaphoreCreateMutex();
 8001f64:	f001 fbc2 	bl	80036ec <xQueueCreateMutex>
 8001f68:	60a0      	str	r0, [r4, #8]


    if (xSemaphoreTake(packet->sent_mutex, portMAX_DELAY) == pdTRUE) { //change this from max_delay
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f70:	460b      	mov	r3, r1
 8001f72:	f001 fbdd 	bl	8003730 <xQueueGenericReceive>
 8001f76:	2801      	cmp	r0, #1
 8001f78:	d115      	bne.n	8001fa6 <USART_rtos_puts+0x4a>

        //if (packet->task_handle == NULL) //allow to assign different tasks wont work now tho
        //if (packet->max_block == NULL) packet->max_block = 
        packet->max_block = portMAX_DELAY;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f7e:	60e3      	str	r3, [r4, #12]

        xTaskCreate(vUSART_puts, (signed char*)"vUSART_puts", 128, packet, tskIDLE_PRIORITY+8, NULL);
 8001f80:	2308      	movs	r3, #8
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	9302      	str	r3, [sp, #8]
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	f641 7001 	movw	r0, #7937	; 0x1f01
 8001f90:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001f94:	f248 1114 	movw	r1, #33044	; 0x8114
 8001f98:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	f000 fe66 	bl	8002c70 <xTaskGenericCreate>
 8001fa4:	e011      	b.n	8001fca <USART_rtos_puts+0x6e>

    }
    else {
        USART_puts(USART1, "ERROR483\r\n");
 8001fa6:	f248 1420 	movw	r4, #33056	; 0x8120
 8001faa:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001fae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001fb2:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001fb6:	4621      	mov	r1, r4
 8001fb8:	f7ff ff90 	bl	8001edc <USART_puts>
        USART_puts(USART2, "ERROR483\r\n");
 8001fbc:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001fc0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	f7ff ff89 	bl	8001edc <USART_puts>

    }

};
 8001fca:	b004      	add	sp, #16
 8001fcc:	bd10      	pop	{r4, pc}
 8001fce:	bf00      	nop

08001fd0 <USART_rtos_sputs>:

int USART_rtos_sputs(USART_rtos_packet *packet, const char *format, ...) {
 8001fd0:	b40e      	push	{r1, r2, r3}
 8001fd2:	b530      	push	{r4, r5, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	4604      	mov	r4, r0
    if (packet->msg){
 8001fd8:	6843      	ldr	r3, [r0, #4]
 8001fda:	b163      	cbz	r3, 8001ff6 <USART_rtos_sputs+0x26>


        va_list ap;
        int rv;

        va_start(ap, format);
 8001fdc:	aa06      	add	r2, sp, #24
 8001fde:	9201      	str	r2, [sp, #4]
        rv = vsprintf(packet->msg, format, ap);
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	9905      	ldr	r1, [sp, #20]
 8001fe4:	f003 ff62 	bl	8005eac <vsprintf>
 8001fe8:	4605      	mov	r5, r0
        va_end(ap);

        USART_rtos_puts(packet, packet->msg);
 8001fea:	4620      	mov	r0, r4
 8001fec:	6861      	ldr	r1, [r4, #4]
 8001fee:	f7ff ffb5 	bl	8001f5c <USART_rtos_puts>

        return rv;
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	e001      	b.n	8001ffa <USART_rtos_sputs+0x2a>
    }
    return -1;
 8001ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001ffa:	b002      	add	sp, #8
 8001ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002000:	b003      	add	sp, #12
 8002002:	4770      	bx	lr

08002004 <setup_output>:
#include "hb_structs.h"

USART_rtos *USARTOutput_rtos; 

void setup_output(USART_rtos *USARTx_rtos) {
    USARTOutput_rtos = USARTx_rtos;
 8002004:	f640 53f8 	movw	r3, #3576	; 0xdf8
 8002008:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800200c:	6018      	str	r0, [r3, #0]
 800200e:	4770      	bx	lr

08002010 <replace_char>:
}

void replace_char(char *msg, char find, char replace) {
    while(*msg!='\r') {
 8002010:	e003      	b.n	800201a <replace_char+0xa>
        if (*msg == find) *msg = replace;
 8002012:	428b      	cmp	r3, r1
 8002014:	bf08      	it	eq
 8002016:	7002      	strbeq	r2, [r0, #0]
        msg++;
 8002018:	3001      	adds	r0, #1
void setup_output(USART_rtos *USARTx_rtos) {
    USARTOutput_rtos = USARTx_rtos;
}

void replace_char(char *msg, char find, char replace) {
    while(*msg!='\r') {
 800201a:	7803      	ldrb	r3, [r0, #0]
 800201c:	2b0d      	cmp	r3, #13
 800201e:	d1f8      	bne.n	8002012 <replace_char+0x2>
        if (*msg == find) *msg = replace;
        msg++;
    }
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <str_compare>:

int str_compare(char *str1, char *str2, const char terminator) {
 8002024:	b430      	push	{r4, r5}
    int i;
    for(i=0;; i++) {
 8002026:	2300      	movs	r3, #0

        if (str1[i] == str2[i]) {
 8002028:	5cc4      	ldrb	r4, [r0, r3]
 800202a:	5ccd      	ldrb	r5, [r1, r3]
 800202c:	42ac      	cmp	r4, r5
 800202e:	d103      	bne.n	8002038 <str_compare+0x14>
            if (str1[i] == terminator) return 1; // strs match
 8002030:	4294      	cmp	r4, r2
 8002032:	d003      	beq.n	800203c <str_compare+0x18>
    }
}

int str_compare(char *str1, char *str2, const char terminator) {
    int i;
    for(i=0;; i++) {
 8002034:	3301      	adds	r3, #1
        }

        else {
            return 0;
        }
    }
 8002036:	e7f7      	b.n	8002028 <str_compare+0x4>
        if (str1[i] == str2[i]) {
            if (str1[i] == terminator) return 1; // strs match
        }

        else {
            return 0;
 8002038:	2000      	movs	r0, #0
 800203a:	e000      	b.n	800203e <str_compare+0x1a>
int str_compare(char *str1, char *str2, const char terminator) {
    int i;
    for(i=0;; i++) {

        if (str1[i] == str2[i]) {
            if (str1[i] == terminator) return 1; // strs match
 800203c:	2001      	movs	r0, #1

        else {
            return 0;
        }
    }
}
 800203e:	bc30      	pop	{r4, r5}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <find_next_char>:


int find_next_char(char *msg, int offset, char find) {
    int i=0;
 8002044:	2300      	movs	r3, #0
    while (1) {
        if (msg[i] == find) break;
 8002046:	5cc1      	ldrb	r1, [r0, r3]
 8002048:	4291      	cmp	r1, r2
 800204a:	d002      	beq.n	8002052 <find_next_char+0xe>
        else if (msg[i] == '\0') {
 800204c:	b119      	cbz	r1, 8002056 <find_next_char+0x12>
            return -1;
            break;
        }
        i++;
 800204e:	3301      	adds	r3, #1
    }
 8002050:	e7f9      	b.n	8002046 <find_next_char+0x2>

    return i;
 8002052:	4618      	mov	r0, r3
 8002054:	4770      	bx	lr
int find_next_char(char *msg, int offset, char find) {
    int i=0;
    while (1) {
        if (msg[i] == find) break;
        else if (msg[i] == '\0') {
            return -1;
 8002056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
        i++;
    }

    return i;
}
 800205a:	4770      	bx	lr

0800205c <str_to_int>:


int str_to_int(char *buffer, char terminator) {
 800205c:	b470      	push	{r4, r5, r6}
 800205e:	4605      	mov	r5, r0
    int num = 0;
    int i=0;
    int neg=0;

    if (buffer[i] == '-') {
 8002060:	7803      	ldrb	r3, [r0, #0]
 8002062:	2b2d      	cmp	r3, #45	; 0x2d


int str_to_int(char *buffer, char terminator) {
    int num = 0;
    int i=0;
    int neg=0;
 8002064:	bf14      	ite	ne
 8002066:	2600      	movne	r6, #0

    if (buffer[i] == '-') {
        i++;
        neg = 1;
 8002068:	2601      	moveq	r6, #1
    int num = 0;
    int i=0;
    int neg=0;

    if (buffer[i] == '-') {
        i++;
 800206a:	4632      	mov	r2, r6
}


int str_to_int(char *buffer, char terminator) {
    int num = 0;
    int i=0;
 800206c:	2000      	movs	r0, #0
 800206e:	e00a      	b.n	8002086 <str_to_int+0x2a>
        i++;
        neg = 1;
    }

    for(i; buffer[i]!=terminator; i++) {
        if (buffer[i] >= '0' && buffer[i]<='9'){
 8002070:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8002074:	b2e4      	uxtb	r4, r4
 8002076:	2c09      	cmp	r4, #9
 8002078:	d808      	bhi.n	800208c <str_to_int+0x30>
            num *= 10; 
 800207a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            num += buffer[i]-'0';
 800207e:	3b30      	subs	r3, #48	; 0x30
 8002080:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    if (buffer[i] == '-') {
        i++;
        neg = 1;
    }

    for(i; buffer[i]!=terminator; i++) {
 8002084:	3201      	adds	r2, #1
 8002086:	5cab      	ldrb	r3, [r5, r2]
 8002088:	428b      	cmp	r3, r1
 800208a:	d1f1      	bne.n	8002070 <str_to_int+0x14>
        else {
            break;
        }    
    }

    if (neg) {
 800208c:	b106      	cbz	r6, 8002090 <str_to_int+0x34>
        num *= -1;
 800208e:	4240      	negs	r0, r0
    }
    return num;

}
 8002090:	bc70      	pop	{r4, r5, r6}
 8002092:	4770      	bx	lr

08002094 <command_set_regime_ph>:
                                    {-1, -1}
                                  }; //ph, delay

int REGIME_LIGHTING[MAX_REGIME_LIGHTING][2] ={{-1, -1}}; //distance, hours_on

void command_set_regime_ph(char *pos, char term) {
 8002094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002098:	b0ad      	sub	sp, #180	; 0xb4
 800209a:	4604      	mov	r4, r0
 800209c:	460f      	mov	r7, r1
    USART_rtos_packet packet;
    char buffer[80];
    char msg[] = "{'object_type': 'REGIME_PH', 'method': 'set', 'error':%d, 'object_id':%d}\r\n";
 800209e:	a801      	add	r0, sp, #4
 80020a0:	f248 115c 	movw	r1, #33116	; 0x815c
 80020a4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80020a8:	224c      	movs	r2, #76	; 0x4c
 80020aa:	f7fe f8d1 	bl	8000250 <memcpy>
    packet.msg = buffer;
 80020ae:	ab14      	add	r3, sp, #80	; 0x50
 80020b0:	9329      	str	r3, [sp, #164]	; 0xa4

    packet.USARTx_rtos = USARTOutput_rtos; 
 80020b2:	f640 53f8 	movw	r3, #3576	; 0xdf8
 80020b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	9328      	str	r3, [sp, #160]	; 0xa0


    int NEW_ITEM = 0;

    int idx = find_next_char(pos, 0, term);
 80020be:	4620      	mov	r0, r4
 80020c0:	2100      	movs	r1, #0
 80020c2:	463a      	mov	r2, r7
 80020c4:	f7ff ffbe 	bl	8002044 <find_next_char>
    pos+=idx+1;
 80020c8:	3001      	adds	r0, #1
 80020ca:	4404      	add	r4, r0

    int regime_id = str_to_int(pos, '\003')-1;
 80020cc:	4620      	mov	r0, r4
 80020ce:	2103      	movs	r1, #3
 80020d0:	f7ff ffc4 	bl	800205c <str_to_int>
 80020d4:	1e46      	subs	r6, r0, #1
    if (!(regime_id >= -1 && regime_id <MAX_REGIME_PH)){
 80020d6:	280a      	cmp	r0, #10
 80020d8:	d90a      	bls.n	80020f0 <command_set_regime_ph+0x5c>
        USART_rtos_sputs(&packet, msg, 100, -1); // error 100: incorrect id
 80020da:	a828      	add	r0, sp, #160	; 0xa0
 80020dc:	a901      	add	r1, sp, #4
 80020de:	2264      	movs	r2, #100	; 0x64
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020e4:	f7ff ff74 	bl	8001fd0 <USART_rtos_sputs>
        USART_rtos_wait_send(&packet);
 80020e8:	a828      	add	r0, sp, #160	; 0xa0
 80020ea:	f7ff fec3 	bl	8001e74 <USART_rtos_wait_send>
        return;
 80020ee:	e082      	b.n	80021f6 <command_set_regime_ph+0x162>
    }

    else if (regime_id == -1) {
 80020f0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    packet.msg = buffer;

    packet.USARTx_rtos = USARTOutput_rtos; 


    int NEW_ITEM = 0;
 80020f4:	bf18      	it	ne
 80020f6:	f04f 0b00 	movne.w	fp, #0
        USART_rtos_sputs(&packet, msg, 100, -1); // error 100: incorrect id
        USART_rtos_wait_send(&packet);
        return;
    }

    else if (regime_id == -1) {
 80020fa:	d123      	bne.n	8002144 <command_set_regime_ph+0xb0>
 80020fc:	e00c      	b.n	8002118 <command_set_regime_ph+0x84>
        int i;
        for(i=0; i<MAX_REGIME_PH; i++) if (REGIME_PH[i][1]  == -1 && REGIME_PH[i][0] == -1) break;
 80020fe:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002108:	d104      	bne.n	8002114 <command_set_regime_ph+0x80>
 800210a:	f852 3036 	ldr.w	r3, [r2, r6, lsl #3]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002112:	d008      	beq.n	8002126 <command_set_regime_ph+0x92>
 8002114:	3601      	adds	r6, #1
 8002116:	e004      	b.n	8002122 <command_set_regime_ph+0x8e>
 8002118:	2600      	movs	r6, #0
 800211a:	f240 020c 	movw	r2, #12
 800211e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002122:	2e09      	cmp	r6, #9
 8002124:	ddeb      	ble.n	80020fe <command_set_regime_ph+0x6a>

        if (i == MAX_REGIME_PH) {
 8002126:	2e0a      	cmp	r6, #10
 8002128:	d10a      	bne.n	8002140 <command_set_regime_ph+0xac>

            USART_rtos_sputs(&packet, msg, 101, -1); //error 101: need to overwrite existing rows
 800212a:	a828      	add	r0, sp, #160	; 0xa0
 800212c:	a901      	add	r1, sp, #4
 800212e:	2265      	movs	r2, #101	; 0x65
 8002130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002134:	f7ff ff4c 	bl	8001fd0 <USART_rtos_sputs>
            USART_rtos_wait_send(&packet);
 8002138:	a828      	add	r0, sp, #160	; 0xa0
 800213a:	f7ff fe9b 	bl	8001e74 <USART_rtos_wait_send>
            return;
 800213e:	e05a      	b.n	80021f6 <command_set_regime_ph+0x162>
        }

        regime_id = i;
        NEW_ITEM = 1;
 8002140:	f04f 0b01 	mov.w	fp, #1
    }


    idx = find_next_char(pos, 0, term);
 8002144:	4620      	mov	r0, r4
 8002146:	2100      	movs	r1, #0
 8002148:	463a      	mov	r2, r7
 800214a:	f7ff ff7b 	bl	8002044 <find_next_char>
    pos+=idx+1;
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	441c      	add	r4, r3

    //break this up into smaller functions for each task

    int i;
    for(i=0; i<2 && idx!=0; i++) {
 8002152:	2500      	movs	r5, #0
                REGIME_PH[regime_id][0] = v;
                break;

            case 'd': 
               pos++;
               v = str_to_int(pos, '\003'); 
 8002154:	f04f 0803 	mov.w	r8, #3
               //printf("d=%d\n", v);
               REGIME_PH[regime_id][1] = v;
 8002158:	f240 090c 	movw	r9, #12
 800215c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8002160:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    pos+=idx+1;

    //break this up into smaller functions for each task

    int i;
    for(i=0; i<2 && idx!=0; i++) {
 8002164:	e038      	b.n	80021d8 <command_set_regime_ph+0x144>
        switch (*pos) {
 8002166:	7823      	ldrb	r3, [r4, #0]
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d009      	beq.n	8002180 <command_set_regime_ph+0xec>
 800216c:	2b70      	cmp	r3, #112	; 0x70
 800216e:	d10f      	bne.n	8002190 <command_set_regime_ph+0xfc>
            int v;
            char buffer[30];

            case 'p':
                pos++;
 8002170:	3401      	adds	r4, #1
                v = str_to_int(pos, '\003');
 8002172:	4620      	mov	r0, r4
 8002174:	4641      	mov	r1, r8
 8002176:	f7ff ff71 	bl	800205c <str_to_int>
                //printf("p=%d\n", v);
                REGIME_PH[regime_id][0] = v;
 800217a:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
                break;
 800217e:	e020      	b.n	80021c2 <command_set_regime_ph+0x12e>

            case 'd': 
               pos++;
 8002180:	3401      	adds	r4, #1
               v = str_to_int(pos, '\003'); 
 8002182:	4620      	mov	r0, r4
 8002184:	4641      	mov	r1, r8
 8002186:	f7ff ff69 	bl	800205c <str_to_int>
               //printf("d=%d\n", v);
               REGIME_PH[regime_id][1] = v;
 800218a:	f8ca 0004 	str.w	r0, [sl, #4]
               break;
 800218e:	e018      	b.n	80021c2 <command_set_regime_ph+0x12e>

            default:
               USART_rtos_sputs(&packet, msg, 102, -1); //error 102: incorrect variable
 8002190:	a828      	add	r0, sp, #160	; 0xa0
 8002192:	a901      	add	r1, sp, #4
 8002194:	2266      	movs	r2, #102	; 0x66
 8002196:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800219a:	f7ff ff19 	bl	8001fd0 <USART_rtos_sputs>
               USART_rtos_wait_send(&packet);
 800219e:	a828      	add	r0, sp, #160	; 0xa0
 80021a0:	f7ff fe68 	bl	8001e74 <USART_rtos_wait_send>
               if (NEW_ITEM) {
 80021a4:	f1bb 0f00 	cmp.w	fp, #0
 80021a8:	d00b      	beq.n	80021c2 <command_set_regime_ph+0x12e>
                   REGIME_PH[regime_id][0] = -1; //PH setting
 80021aa:	f240 030c 	movw	r3, #12
 80021ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b6:	f843 2036 	str.w	r2, [r3, r6, lsl #3]
                   REGIME_PH[regime_id][1] = -1; // delay
 80021ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	e019      	b.n	80021f6 <command_set_regime_ph+0x162>
                   return;
               }

        }
        idx = find_next_char(pos, 0, term);
 80021c2:	4620      	mov	r0, r4
 80021c4:	2100      	movs	r1, #0
 80021c6:	463a      	mov	r2, r7
 80021c8:	f7ff ff3c 	bl	8002044 <find_next_char>
        if (idx == -1) break;
 80021cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80021d0:	d00b      	beq.n	80021ea <command_set_regime_ph+0x156>
        pos+=idx+1;
 80021d2:	1c43      	adds	r3, r0, #1
 80021d4:	441c      	add	r4, r3
    pos+=idx+1;

    //break this up into smaller functions for each task

    int i;
    for(i=0; i<2 && idx!=0; i++) {
 80021d6:	3501      	adds	r5, #1
 80021d8:	2d01      	cmp	r5, #1
 80021da:	bfcc      	ite	gt
 80021dc:	2300      	movgt	r3, #0
 80021de:	2301      	movle	r3, #1
 80021e0:	2800      	cmp	r0, #0
 80021e2:	bf08      	it	eq
 80021e4:	2300      	moveq	r3, #0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1bd      	bne.n	8002166 <command_set_regime_ph+0xd2>
        }
        idx = find_next_char(pos, 0, term);
        if (idx == -1) break;
        pos+=idx+1;
    }
    USART_rtos_sputs(&packet, msg, 0, regime_id+1);
 80021ea:	a828      	add	r0, sp, #160	; 0xa0
 80021ec:	a901      	add	r1, sp, #4
 80021ee:	2200      	movs	r2, #0
 80021f0:	1c73      	adds	r3, r6, #1
 80021f2:	f7ff feed 	bl	8001fd0 <USART_rtos_sputs>


}
 80021f6:	b02d      	add	sp, #180	; 0xb4
 80021f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021fc <command_set_stage>:

void command_set_stage(char *pos, char term) {
 80021fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002200:	b0ad      	sub	sp, #180	; 0xb4
 8002202:	4604      	mov	r4, r0
 8002204:	460f      	mov	r7, r1
    USART_rtos_packet packet;
    char buffer[80];
    char msg[] = "{'object_type': 'STAGE', 'method': 'set', 'error':%d, 'object_id':%d}\r\n";
 8002206:	a802      	add	r0, sp, #8
 8002208:	f248 11a8 	movw	r1, #33192	; 0x81a8
 800220c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002210:	2248      	movs	r2, #72	; 0x48
 8002212:	f7fe f81d 	bl	8000250 <memcpy>
    packet.msg = buffer;
 8002216:	ab14      	add	r3, sp, #80	; 0x50
 8002218:	9329      	str	r3, [sp, #164]	; 0xa4
    packet.USARTx_rtos = USARTOutput_rtos;
 800221a:	f640 53f8 	movw	r3, #3576	; 0xdf8
 800221e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	9328      	str	r3, [sp, #160]	; 0xa0

    int NEW_ITEM = 0;

    int idx = find_next_char(pos, 0, term);
 8002226:	4620      	mov	r0, r4
 8002228:	2100      	movs	r1, #0
 800222a:	463a      	mov	r2, r7
 800222c:	f7ff ff0a 	bl	8002044 <find_next_char>
    pos+=idx+1;
 8002230:	3001      	adds	r0, #1
 8002232:	1825      	adds	r5, r4, r0

    int stage_id = str_to_int(pos, '\003')-1;
 8002234:	4628      	mov	r0, r5
 8002236:	2103      	movs	r1, #3
 8002238:	f7ff ff10 	bl	800205c <str_to_int>
 800223c:	1e44      	subs	r4, r0, #1

    if (!(stage_id >= -1 && stage_id <MAX_STAGES)) {
 800223e:	280a      	cmp	r0, #10
 8002240:	d90a      	bls.n	8002258 <command_set_stage+0x5c>
        USART_rtos_sputs(&packet, msg, 100, -1); // error 100: incorrect id
 8002242:	a828      	add	r0, sp, #160	; 0xa0
 8002244:	a902      	add	r1, sp, #8
 8002246:	2264      	movs	r2, #100	; 0x64
 8002248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800224c:	f7ff fec0 	bl	8001fd0 <USART_rtos_sputs>
        USART_rtos_wait_send(&packet);
 8002250:	a828      	add	r0, sp, #160	; 0xa0
 8002252:	f7ff fe0f 	bl	8001e74 <USART_rtos_wait_send>
        return;
 8002256:	e0a9      	b.n	80023ac <command_set_stage+0x1b0>
    }

    else if (stage_id == -1) {
 8002258:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800225c:	d00a      	beq.n	8002274 <command_set_stage+0x78>
    char buffer[80];
    char msg[] = "{'object_type': 'STAGE', 'method': 'set', 'error':%d, 'object_id':%d}\r\n";
    packet.msg = buffer;
    packet.USARTx_rtos = USARTOutput_rtos;

    int NEW_ITEM = 0;
 800225e:	2200      	movs	r2, #0
 8002260:	9201      	str	r2, [sp, #4]
 8002262:	e026      	b.n	80022b2 <command_set_stage+0xb6>
    }

    else if (stage_id == -1) {
        int i;
        for(i=0; i<MAX_STAGES; i++) {
            if (stages[i].using == 0) break;
 8002264:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8002268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	b143      	cbz	r3, 8002282 <command_set_stage+0x86>
        return;
    }

    else if (stage_id == -1) {
        int i;
        for(i=0; i<MAX_STAGES; i++) {
 8002270:	3401      	adds	r4, #1
 8002272:	e004      	b.n	800227e <command_set_stage+0x82>
 8002274:	2400      	movs	r4, #0
            if (stages[i].using == 0) break;
 8002276:	f640 52fc 	movw	r2, #3580	; 0xdfc
 800227a:	f2c2 0200 	movt	r2, #8192	; 0x2000
        return;
    }

    else if (stage_id == -1) {
        int i;
        for(i=0; i<MAX_STAGES; i++) {
 800227e:	2c09      	cmp	r4, #9
 8002280:	ddf0      	ble.n	8002264 <command_set_stage+0x68>
            if (stages[i].using == 0) break;
        }

        if (i == MAX_STAGES) {
 8002282:	2c0a      	cmp	r4, #10
 8002284:	d10a      	bne.n	800229c <command_set_stage+0xa0>
            USART_rtos_sputs(&packet, msg, 101, -1); //error 101: need to overwrite existing rows
 8002286:	a828      	add	r0, sp, #160	; 0xa0
 8002288:	a902      	add	r1, sp, #8
 800228a:	2265      	movs	r2, #101	; 0x65
 800228c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002290:	f7ff fe9e 	bl	8001fd0 <USART_rtos_sputs>
            USART_rtos_wait_send(&packet);
 8002294:	a828      	add	r0, sp, #160	; 0xa0
 8002296:	f7ff fded 	bl	8001e74 <USART_rtos_wait_send>
            return;
 800229a:	e087      	b.n	80023ac <command_set_stage+0x1b0>
        }

        stage_id = i;
        stages[stage_id].using = 1;
 800229c:	f640 53fc 	movw	r3, #3580	; 0xdfc
 80022a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022a4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80022a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80022ac:	2201      	movs	r2, #1
 80022ae:	615a      	str	r2, [r3, #20]
        NEW_ITEM = 1;
 80022b0:	9201      	str	r2, [sp, #4]
    }

    idx = find_next_char(pos, 0, term);
 80022b2:	4628      	mov	r0, r5
 80022b4:	2100      	movs	r1, #0
 80022b6:	463a      	mov	r2, r7
 80022b8:	f7ff fec4 	bl	8002044 <find_next_char>
    pos+=idx+1;
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	441d      	add	r5, r3

    int i;

    stages[stage_id].id = stage_id+1;
 80022c0:	f104 0b01 	add.w	fp, r4, #1
 80022c4:	f640 53fc 	movw	r3, #3580	; 0xdfc
 80022c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022cc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80022d0:	f843 b032 	str.w	fp, [r3, r2, lsl #3]

    for(i=0; i<5 && idx!=0; i++) {
 80022d4:	2600      	movs	r6, #0
               stages[stage_id].regime_lighting_id = v;
               break;

            case 'o': //order 
               pos++;
               v = str_to_int(pos, '\003'); 
 80022d6:	f04f 0a03 	mov.w	sl, #3
//               printf("g=%d\n", v);
               stages[stage_id].order = v;
 80022da:	f640 53fc 	movw	r3, #3580	; 0xdfc
 80022de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022e2:	eb03 09c2 	add.w	r9, r3, r2, lsl #3

               }
               USART_rtos_wait_send(&packet);
               return;
        }
        idx = find_next_char(pos, 0, term);
 80022e6:	46b0      	mov	r8, r6

    int i;

    stages[stage_id].id = stage_id+1;

    for(i=0; i<5 && idx!=0; i++) {
 80022e8:	e04e      	b.n	8002388 <command_set_stage+0x18c>
        int v;
        //pos++;
        switch (/**(pos-1)*/*pos) {
 80022ea:	782b      	ldrb	r3, [r5, #0]
 80022ec:	3b69      	subs	r3, #105	; 0x69
 80022ee:	2b07      	cmp	r3, #7
 80022f0:	d825      	bhi.n	800233e <command_set_stage+0x142>
 80022f2:	e8df f003 	tbb	[pc, r3]
 80022f6:	2414      	.short	0x2414
 80022f8:	24240424 	.word	0x24240424
 80022fc:	0c1c      	.short	0x0c1c
            case 'l': //length in days
               pos++;
 80022fe:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002300:	4628      	mov	r0, r5
 8002302:	4651      	mov	r1, sl
 8002304:	f7ff feaa 	bl	800205c <str_to_int>
               stages[stage_id].length = v;
 8002308:	f8c9 0004 	str.w	r0, [r9, #4]
               break;
 800230c:	e031      	b.n	8002372 <command_set_stage+0x176>

            case 'p': //regime_ph_id 
               pos++;
 800230e:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002310:	4628      	mov	r0, r5
 8002312:	4651      	mov	r1, sl
 8002314:	f7ff fea2 	bl	800205c <str_to_int>
  //             printf("p=%d\n", v);
               stages[stage_id].regime_ph_id = v;
 8002318:	f8c9 000c 	str.w	r0, [r9, #12]
               break;
 800231c:	e029      	b.n	8002372 <command_set_stage+0x176>

            case 'i': //regime_lighting_id 
               pos++;
 800231e:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002320:	4628      	mov	r0, r5
 8002322:	4651      	mov	r1, sl
 8002324:	f7ff fe9a 	bl	800205c <str_to_int>
//               printf("g=%d\n", v);
               stages[stage_id].regime_lighting_id = v;
 8002328:	f8c9 0010 	str.w	r0, [r9, #16]
               break;
 800232c:	e021      	b.n	8002372 <command_set_stage+0x176>

            case 'o': //order 
               pos++;
 800232e:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002330:	4628      	mov	r0, r5
 8002332:	4651      	mov	r1, sl
 8002334:	f7ff fe92 	bl	800205c <str_to_int>
//               printf("g=%d\n", v);
               stages[stage_id].order = v;
 8002338:	f8c9 0008 	str.w	r0, [r9, #8]
               break;
 800233c:	e019      	b.n	8002372 <command_set_stage+0x176>
            

            default:
               USART_rtos_sputs(&packet, msg, 102, stage_id+1); // error 102: incorrect variable
 800233e:	a828      	add	r0, sp, #160	; 0xa0
 8002340:	a902      	add	r1, sp, #8
 8002342:	2266      	movs	r2, #102	; 0x66
 8002344:	465b      	mov	r3, fp
 8002346:	f7ff fe43 	bl	8001fd0 <USART_rtos_sputs>
               if (NEW_ITEM) {
 800234a:	9b01      	ldr	r3, [sp, #4]
 800234c:	b16b      	cbz	r3, 800236a <command_set_stage+0x16e>
                   stages[stage_id].using = 0;
 800234e:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8002352:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002356:	0060      	lsls	r0, r4, #1
 8002358:	1901      	adds	r1, r0, r4
 800235a:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800235e:	2300      	movs	r3, #0
 8002360:	614b      	str	r3, [r1, #20]
                   stages[stage_id].order = 0;
 8002362:	608b      	str	r3, [r1, #8]
                   stages[stage_id].regime_lighting_id = 0;
 8002364:	610b      	str	r3, [r1, #16]
                   stages[stage_id].regime_ph_id = 0;
 8002366:	60cb      	str	r3, [r1, #12]
                   stages[stage_id].length = 0;
 8002368:	604b      	str	r3, [r1, #4]

               }
               USART_rtos_wait_send(&packet);
 800236a:	a828      	add	r0, sp, #160	; 0xa0
 800236c:	f7ff fd82 	bl	8001e74 <USART_rtos_wait_send>
               return;
 8002370:	e01c      	b.n	80023ac <command_set_stage+0x1b0>
        }
        idx = find_next_char(pos, 0, term);
 8002372:	4628      	mov	r0, r5
 8002374:	4641      	mov	r1, r8
 8002376:	463a      	mov	r2, r7
 8002378:	f7ff fe64 	bl	8002044 <find_next_char>
        if (idx == -1) break;
 800237c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002380:	d00b      	beq.n	800239a <command_set_stage+0x19e>
        pos+=idx+1;
 8002382:	1c43      	adds	r3, r0, #1
 8002384:	441d      	add	r5, r3

    int i;

    stages[stage_id].id = stage_id+1;

    for(i=0; i<5 && idx!=0; i++) {
 8002386:	3601      	adds	r6, #1
 8002388:	2e04      	cmp	r6, #4
 800238a:	bfcc      	ite	gt
 800238c:	2300      	movgt	r3, #0
 800238e:	2301      	movle	r3, #1
 8002390:	2800      	cmp	r0, #0
 8002392:	bf08      	it	eq
 8002394:	2300      	moveq	r3, #0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1a7      	bne.n	80022ea <command_set_stage+0xee>
        }
        idx = find_next_char(pos, 0, term);
        if (idx == -1) break;
        pos+=idx+1;
    }
    USART_rtos_sputs(&packet, msg, 0, stage_id+1);
 800239a:	a828      	add	r0, sp, #160	; 0xa0
 800239c:	a902      	add	r1, sp, #8
 800239e:	2200      	movs	r2, #0
 80023a0:	465b      	mov	r3, fp
 80023a2:	f7ff fe15 	bl	8001fd0 <USART_rtos_sputs>
    USART_rtos_wait_send(&packet);
 80023a6:	a828      	add	r0, sp, #160	; 0xa0
 80023a8:	f7ff fd64 	bl	8001e74 <USART_rtos_wait_send>
}
 80023ac:	b02d      	add	sp, #180	; 0xb4
 80023ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b2:	bf00      	nop

080023b4 <command_set>:

void command_set(char *pos, char term) {
 80023b4:	b530      	push	{r4, r5, lr}
 80023b6:	b085      	sub	sp, #20
 80023b8:	460c      	mov	r4, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 80023ba:	f640 53f8 	movw	r3, #3576	; 0xdf8
 80023be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	9300      	str	r3, [sp, #0]
    pos+=4;
 80023c6:	1d05      	adds	r5, r0, #4

    if (str_compare(pos, "REGIME_PH\003", term)) {
 80023c8:	4628      	mov	r0, r5
 80023ca:	f248 11f0 	movw	r1, #33264	; 0x81f0
 80023ce:	f6c0 0100 	movt	r1, #2048	; 0x800
 80023d2:	4622      	mov	r2, r4
 80023d4:	f7ff fe26 	bl	8002024 <str_compare>
 80023d8:	b120      	cbz	r0, 80023e4 <command_set+0x30>
        command_set_regime_ph(pos, term);
 80023da:	4628      	mov	r0, r5
 80023dc:	4621      	mov	r1, r4
 80023de:	f7ff fe59 	bl	8002094 <command_set_regime_ph>
 80023e2:	e020      	b.n	8002426 <command_set+0x72>
    }

    else if (str_compare(pos, "STAGE\003", term)) {
 80023e4:	4628      	mov	r0, r5
 80023e6:	f248 11fc 	movw	r1, #33276	; 0x81fc
 80023ea:	f6c0 0100 	movt	r1, #2048	; 0x800
 80023ee:	4622      	mov	r2, r4
 80023f0:	f7ff fe18 	bl	8002024 <str_compare>
 80023f4:	b120      	cbz	r0, 8002400 <command_set+0x4c>
        command_set_stage(pos, term);
 80023f6:	4628      	mov	r0, r5
 80023f8:	4621      	mov	r1, r4
 80023fa:	f7ff feff 	bl	80021fc <command_set_stage>
 80023fe:	e012      	b.n	8002426 <command_set+0x72>
    }

    else if (str_compare(pos, "REGIME_LIGHTING\003", term)) {
 8002400:	4628      	mov	r0, r5
 8002402:	f248 2104 	movw	r1, #33284	; 0x8204
 8002406:	f6c0 0100 	movt	r1, #2048	; 0x800
 800240a:	4622      	mov	r2, r4
 800240c:	f7ff fe0a 	bl	8002024 <str_compare>
 8002410:	b948      	cbnz	r0, 8002426 <command_set+0x72>
    }

    else {
        USART_rtos_puts(&packet, "{'object_type': '', method: 'set', error: 10, 'object_id': -1}\r\n"); // error 10: unknown object
 8002412:	4668      	mov	r0, sp
 8002414:	f248 2118 	movw	r1, #33304	; 0x8218
 8002418:	f6c0 0100 	movt	r1, #2048	; 0x800
 800241c:	f7ff fd9e 	bl	8001f5c <USART_rtos_puts>
        USART_rtos_wait_send(&packet);
 8002420:	4668      	mov	r0, sp
 8002422:	f7ff fd27 	bl	8001e74 <USART_rtos_wait_send>
        return;
    }

}
 8002426:	b005      	add	sp, #20
 8002428:	bd30      	pop	{r4, r5, pc}
 800242a:	bf00      	nop

0800242c <command_del_regime_ph>:

void command_del_regime_ph (char *pos, char term) {
 800242c:	b510      	push	{r4, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	4604      	mov	r4, r0
 8002432:	460a      	mov	r2, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002434:	f640 53f8 	movw	r3, #3576	; 0xdf8
 8002438:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	9300      	str	r3, [sp, #0]

    int idx = find_next_char(pos, 0, term);
 8002440:	2100      	movs	r1, #0
 8002442:	f7ff fdff 	bl	8002044 <find_next_char>
    pos+=idx+1;
 8002446:	3001      	adds	r0, #1
    int regime_id = str_to_int(pos, '\003')-1;
 8002448:	4420      	add	r0, r4
 800244a:	2103      	movs	r1, #3
 800244c:	f7ff fe06 	bl	800205c <str_to_int>
 8002450:	1e44      	subs	r4, r0, #1

    if (!(regime_id>=0 && regime_id < MAX_REGIME_PH)) {
 8002452:	2c09      	cmp	r4, #9
 8002454:	d907      	bls.n	8002466 <command_del_regime_ph+0x3a>
        USART_rtos_puts(&packet, "Error: Incorrect REGIME_PH id\r\n");
 8002456:	4668      	mov	r0, sp
 8002458:	f248 215c 	movw	r1, #33372	; 0x825c
 800245c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002460:	f7ff fd7c 	bl	8001f5c <USART_rtos_puts>
 8002464:	e012      	b.n	800248c <command_del_regime_ph+0x60>
        return;
    }

    USART_rtos_sputs(&packet, "DEBUG: DELETING REGIME_ID %d\r\n", regime_id);
 8002466:	4668      	mov	r0, sp
 8002468:	f248 217c 	movw	r1, #33404	; 0x827c
 800246c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002470:	4622      	mov	r2, r4
 8002472:	f7ff fdad 	bl	8001fd0 <USART_rtos_sputs>
    REGIME_PH[regime_id][0] = -1;
 8002476:	f240 030c 	movw	r3, #12
 800247a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800247e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002482:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    REGIME_PH[regime_id][1] = -1;
 8002486:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800248a:	6062      	str	r2, [r4, #4]
}
 800248c:	b004      	add	sp, #16
 800248e:	bd10      	pop	{r4, pc}

08002490 <command_del_stage>:

void command_del_stage (char *pos, char term) {
 8002490:	b530      	push	{r4, r5, lr}
 8002492:	b085      	sub	sp, #20
 8002494:	4604      	mov	r4, r0
 8002496:	460a      	mov	r2, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002498:	f640 53f8 	movw	r3, #3576	; 0xdf8
 800249c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	9300      	str	r3, [sp, #0]

    int idx = find_next_char(pos, 0, term);
 80024a4:	2100      	movs	r1, #0
 80024a6:	f7ff fdcd 	bl	8002044 <find_next_char>
    pos+=idx+1;
 80024aa:	3001      	adds	r0, #1

    int stage_id = str_to_int(pos, '\003')-1;
 80024ac:	4420      	add	r0, r4
 80024ae:	2103      	movs	r1, #3
 80024b0:	f7ff fdd4 	bl	800205c <str_to_int>
 80024b4:	4602      	mov	r2, r0
 80024b6:	1e43      	subs	r3, r0, #1

    if (!(stage_id >= 0 && stage_id <MAX_STAGES)) {
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d907      	bls.n	80024cc <command_del_stage+0x3c>

        USART_rtos_puts(&packet, "Error: Incorrect stage id\r\n");
 80024bc:	4668      	mov	r0, sp
 80024be:	f248 219c 	movw	r1, #33436	; 0x829c
 80024c2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80024c6:	f7ff fd49 	bl	8001f5c <USART_rtos_puts>
 80024ca:	e014      	b.n	80024f6 <command_del_stage+0x66>
        return;
    }

    stages[stage_id].using = 0;
 80024cc:	f640 54fc 	movw	r4, #3580	; 0xdfc
 80024d0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80024d4:	0058      	lsls	r0, r3, #1
 80024d6:	18c5      	adds	r5, r0, r3
 80024d8:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80024dc:	2100      	movs	r1, #0
 80024de:	6169      	str	r1, [r5, #20]
    stages[stage_id].order = 0;
 80024e0:	60a9      	str	r1, [r5, #8]
    stages[stage_id].regime_lighting_id = 0;
 80024e2:	6129      	str	r1, [r5, #16]
    stages[stage_id].regime_ph_id = 0;
 80024e4:	60e9      	str	r1, [r5, #12]
    stages[stage_id].length = 0;
 80024e6:	6069      	str	r1, [r5, #4]

    USART_rtos_sputs(&packet, "Succesfully deleted stage id: %d\r\n", stage_id+1);
 80024e8:	4668      	mov	r0, sp
 80024ea:	f248 21b8 	movw	r1, #33464	; 0x82b8
 80024ee:	f6c0 0100 	movt	r1, #2048	; 0x800
 80024f2:	f7ff fd6d 	bl	8001fd0 <USART_rtos_sputs>
}
 80024f6:	b005      	add	sp, #20
 80024f8:	bd30      	pop	{r4, r5, pc}
 80024fa:	bf00      	nop

080024fc <command_del>:

void command_del(char *pos, char term) {
 80024fc:	b530      	push	{r4, r5, lr}
 80024fe:	b085      	sub	sp, #20
 8002500:	460d      	mov	r5, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002502:	f640 53f8 	movw	r3, #3576	; 0xdf8
 8002506:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	9300      	str	r3, [sp, #0]
    pos+=4;
 800250e:	1d04      	adds	r4, r0, #4
    USART_puts(USARTOutput_rtos->id, "COOL\r\n");
 8002510:	6898      	ldr	r0, [r3, #8]
 8002512:	f248 21dc 	movw	r1, #33500	; 0x82dc
 8002516:	f6c0 0100 	movt	r1, #2048	; 0x800
 800251a:	f7ff fcdf 	bl	8001edc <USART_puts>

    if (str_compare(pos, "REGIME_PH\003", term)) {
 800251e:	4620      	mov	r0, r4
 8002520:	f248 11f0 	movw	r1, #33264	; 0x81f0
 8002524:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002528:	462a      	mov	r2, r5
 800252a:	f7ff fd7b 	bl	8002024 <str_compare>
 800252e:	b120      	cbz	r0, 800253a <command_del+0x3e>
        command_del_regime_ph(pos, term);
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7ff ff7a 	bl	800242c <command_del_regime_ph>
 8002538:	e021      	b.n	800257e <command_del+0x82>
    }

    else if (str_compare(pos, "STAGE\003", term)) {
 800253a:	4620      	mov	r0, r4
 800253c:	f248 11fc 	movw	r1, #33276	; 0x81fc
 8002540:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002544:	462a      	mov	r2, r5
 8002546:	f7ff fd6d 	bl	8002024 <str_compare>
 800254a:	b120      	cbz	r0, 8002556 <command_del+0x5a>
        command_del_stage(pos, term);
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7ff ff9e 	bl	8002490 <command_del_stage>
 8002554:	e013      	b.n	800257e <command_del+0x82>
    }

    else if (str_compare(pos, "REGIME_LIGHTING\003", term)) {
 8002556:	4620      	mov	r0, r4
 8002558:	f248 2104 	movw	r1, #33284	; 0x8204
 800255c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002560:	462a      	mov	r2, r5
 8002562:	f7ff fd5f 	bl	8002024 <str_compare>
 8002566:	b950      	cbnz	r0, 800257e <command_del+0x82>
//        printf("OK LIGHTING SHIT\n");
    }

    else {
        USART_rtos_sputs(&packet, "Error: Unknown Object '%s'\r\n", pos);
 8002568:	4668      	mov	r0, sp
 800256a:	f248 21e4 	movw	r1, #33508	; 0x82e4
 800256e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002572:	4622      	mov	r2, r4
 8002574:	f7ff fd2c 	bl	8001fd0 <USART_rtos_sputs>
        USART_rtos_wait_send(&packet);
 8002578:	4668      	mov	r0, sp
 800257a:	f7ff fc7b 	bl	8001e74 <USART_rtos_wait_send>
    }
}
 800257e:	b005      	add	sp, #20
 8002580:	bd30      	pop	{r4, r5, pc}
 8002582:	bf00      	nop

08002584 <stage_print>:

void stage_print(Stage *stage) {
 8002584:	b500      	push	{lr}
 8002586:	b0a3      	sub	sp, #140	; 0x8c
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002588:	f640 53f8 	movw	r3, #3576	; 0xdf8
 800258c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	931e      	str	r3, [sp, #120]	; 0x78
    char buffer[100];
    packet.msg = buffer;
 8002594:	ab05      	add	r3, sp, #20
 8002596:	931f      	str	r3, [sp, #124]	; 0x7c

    USART_rtos_sputs(
 8002598:	6802      	ldr	r2, [r0, #0]
 800259a:	6843      	ldr	r3, [r0, #4]
 800259c:	6881      	ldr	r1, [r0, #8]
 800259e:	9100      	str	r1, [sp, #0]
 80025a0:	68c1      	ldr	r1, [r0, #12]
 80025a2:	9101      	str	r1, [sp, #4]
 80025a4:	6901      	ldr	r1, [r0, #16]
 80025a6:	9102      	str	r1, [sp, #8]
 80025a8:	6941      	ldr	r1, [r0, #20]
 80025aa:	9103      	str	r1, [sp, #12]
 80025ac:	a81e      	add	r0, sp, #120	; 0x78
 80025ae:	f248 3104 	movw	r1, #33540	; 0x8304
 80025b2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80025b6:	f7ff fd0b 	bl	8001fd0 <USART_rtos_sputs>
            stage->order,
            stage->regime_ph_id,
            stage->regime_lighting_id,
            stage->using
    );
    USART_rtos_wait_send(&packet);
 80025ba:	a81e      	add	r0, sp, #120	; 0x78
 80025bc:	f7ff fc5a 	bl	8001e74 <USART_rtos_wait_send>

}
 80025c0:	b023      	add	sp, #140	; 0x8c
 80025c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80025c6:	bf00      	nop

080025c8 <regime_ph_print>:

void regime_ph_print(int *regime_ph, int regime_id) {
 80025c8:	b500      	push	{lr}
 80025ca:	b095      	sub	sp, #84	; 0x54
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 80025cc:	f640 53f8 	movw	r3, #3576	; 0xdf8
 80025d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	9310      	str	r3, [sp, #64]	; 0x40
    char buffer[50];
    packet.msg = buffer;
 80025d8:	ab03      	add	r3, sp, #12
 80025da:	9311      	str	r3, [sp, #68]	; 0x44

    USART_rtos_sputs(&packet, "{'id': %d, 'ph': %d, 'delay': %d}\r\n", regime_id+1, regime_ph[0], regime_ph[1]);
 80025dc:	1c4a      	adds	r2, r1, #1
 80025de:	6803      	ldr	r3, [r0, #0]
 80025e0:	6840      	ldr	r0, [r0, #4]
 80025e2:	9000      	str	r0, [sp, #0]
 80025e4:	a810      	add	r0, sp, #64	; 0x40
 80025e6:	f248 3158 	movw	r1, #33624	; 0x8358
 80025ea:	f6c0 0100 	movt	r1, #2048	; 0x800
 80025ee:	f7ff fcef 	bl	8001fd0 <USART_rtos_sputs>
    USART_rtos_wait_send(&packet);
 80025f2:	a810      	add	r0, sp, #64	; 0x40
 80025f4:	f7ff fc3e 	bl	8001e74 <USART_rtos_wait_send>

}
 80025f8:	b015      	add	sp, #84	; 0x54
 80025fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80025fe:	bf00      	nop

08002600 <command_get>:

void command_get(char *pos, char term) {
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b085      	sub	sp, #20
 8002604:	460e      	mov	r6, r1

    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002606:	f640 53f8 	movw	r3, #3576	; 0xdf8
 800260a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	9300      	str	r3, [sp, #0]

    pos+=4; //moves cursor 4 chars to right to access next word. ex( |get ...  --> get |...) 
 8002612:	1d05      	adds	r5, r0, #4

    if (str_compare(pos, "REGIME_PH\003", term)) {
 8002614:	4628      	mov	r0, r5
 8002616:	f248 11f0 	movw	r1, #33264	; 0x81f0
 800261a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800261e:	4632      	mov	r2, r6
 8002620:	f7ff fd00 	bl	8002024 <str_compare>
 8002624:	b3a0      	cbz	r0, 8002690 <command_get+0x90>

        int idx = find_next_char(pos, 0, term);
 8002626:	4628      	mov	r0, r5
 8002628:	2100      	movs	r1, #0
 800262a:	4632      	mov	r2, r6
 800262c:	f7ff fd0a 	bl	8002044 <find_next_char>
        pos+=idx+1;
 8002630:	3001      	adds	r0, #1
 8002632:	4405      	add	r5, r0
        int regime_id = str_to_int(pos, '\003')-1;
 8002634:	4628      	mov	r0, r5
 8002636:	2103      	movs	r1, #3
 8002638:	f7ff fd10 	bl	800205c <str_to_int>
 800263c:	1e41      	subs	r1, r0, #1

        if (regime_id >= 0 && regime_id <MAX_REGIME_PH) {
 800263e:	2909      	cmp	r1, #9
 8002640:	d808      	bhi.n	8002654 <command_get+0x54>
            regime_ph_print(REGIME_PH[regime_id], regime_id);
 8002642:	f240 000c 	movw	r0, #12
 8002646:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800264a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800264e:	f7ff ffbb 	bl	80025c8 <regime_ph_print>
 8002652:	e01d      	b.n	8002690 <command_get+0x90>

        }
        else if(regime_id == -1) {
 8002654:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8002658:	d10f      	bne.n	800267a <command_get+0x7a>
 800265a:	e006      	b.n	800266a <command_get+0x6a>
            int i;
            for(i=0; i<MAX_REGIME_PH; i++) {
                regime_ph_print(REGIME_PH[i], i);
 800265c:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
 8002660:	4621      	mov	r1, r4
 8002662:	f7ff ffb1 	bl	80025c8 <regime_ph_print>
            regime_ph_print(REGIME_PH[regime_id], regime_id);

        }
        else if(regime_id == -1) {
            int i;
            for(i=0; i<MAX_REGIME_PH; i++) {
 8002666:	3401      	adds	r4, #1
 8002668:	e004      	b.n	8002674 <command_get+0x74>
 800266a:	2400      	movs	r4, #0
                regime_ph_print(REGIME_PH[i], i);
 800266c:	f240 070c 	movw	r7, #12
 8002670:	f2c2 0700 	movt	r7, #8192	; 0x2000
            regime_ph_print(REGIME_PH[regime_id], regime_id);

        }
        else if(regime_id == -1) {
            int i;
            for(i=0; i<MAX_REGIME_PH; i++) {
 8002674:	2c09      	cmp	r4, #9
 8002676:	ddf1      	ble.n	800265c <command_get+0x5c>
 8002678:	e00a      	b.n	8002690 <command_get+0x90>
            }
        }

        else {

            USART_rtos_puts(&packet, "Error: Invalid regime_ph_id\r\n");
 800267a:	4668      	mov	r0, sp
 800267c:	f248 317c 	movw	r1, #33660	; 0x837c
 8002680:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002684:	f7ff fc6a 	bl	8001f5c <USART_rtos_puts>
            USART_rtos_wait_send(&packet);
 8002688:	4668      	mov	r0, sp
 800268a:	f7ff fbf3 	bl	8001e74 <USART_rtos_wait_send>
            return;
 800268e:	e03c      	b.n	800270a <command_get+0x10a>
        }

    }

    if (str_compare(pos, "STAGE\003", term)) {
 8002690:	4628      	mov	r0, r5
 8002692:	f248 11fc 	movw	r1, #33276	; 0x81fc
 8002696:	f6c0 0100 	movt	r1, #2048	; 0x800
 800269a:	4632      	mov	r2, r6
 800269c:	f7ff fcc2 	bl	8002024 <str_compare>
 80026a0:	b398      	cbz	r0, 800270a <command_get+0x10a>

        int idx = find_next_char(pos, 0, term);
 80026a2:	4628      	mov	r0, r5
 80026a4:	2100      	movs	r1, #0
 80026a6:	4632      	mov	r2, r6
 80026a8:	f7ff fccc 	bl	8002044 <find_next_char>
        pos+=idx+1;
 80026ac:	3001      	adds	r0, #1
        int stage_id = str_to_int(pos, '\003')-1;
 80026ae:	4428      	add	r0, r5
 80026b0:	2103      	movs	r1, #3
 80026b2:	f7ff fcd3 	bl	800205c <str_to_int>
        if (stage_id == -1) {
 80026b6:	1e43      	subs	r3, r0, #1
 80026b8:	b980      	cbnz	r0, 80026dc <command_get+0xdc>
 80026ba:	e007      	b.n	80026cc <command_get+0xcc>
            int i;
            for(i=0; i<MAX_STAGES; i++) {
                stage_print(&stages[i]);
 80026bc:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80026c0:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80026c4:	f7ff ff5e 	bl	8002584 <stage_print>
        int idx = find_next_char(pos, 0, term);
        pos+=idx+1;
        int stage_id = str_to_int(pos, '\003')-1;
        if (stage_id == -1) {
            int i;
            for(i=0; i<MAX_STAGES; i++) {
 80026c8:	3401      	adds	r4, #1
 80026ca:	e004      	b.n	80026d6 <command_get+0xd6>
 80026cc:	2400      	movs	r4, #0
                stage_print(&stages[i]);
 80026ce:	f640 55fc 	movw	r5, #3580	; 0xdfc
 80026d2:	f2c2 0500 	movt	r5, #8192	; 0x2000
        int idx = find_next_char(pos, 0, term);
        pos+=idx+1;
        int stage_id = str_to_int(pos, '\003')-1;
        if (stage_id == -1) {
            int i;
            for(i=0; i<MAX_STAGES; i++) {
 80026d6:	2c09      	cmp	r4, #9
 80026d8:	ddf0      	ble.n	80026bc <command_get+0xbc>
 80026da:	e016      	b.n	800270a <command_get+0x10a>
                stage_print(&stages[i]);
            }
        }
        else if (stage_id >= 0 && stage_id <MAX_STAGES) {
 80026dc:	2b09      	cmp	r3, #9
 80026de:	d80a      	bhi.n	80026f6 <command_get+0xf6>
            stage_print(stages+stage_id);
 80026e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80026e4:	f640 50fc 	movw	r0, #3580	; 0xdfc
 80026e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80026ec:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80026f0:	f7ff ff48 	bl	8002584 <stage_print>
 80026f4:	e009      	b.n	800270a <command_get+0x10a>

        }
        else {
            USART_rtos_puts(&packet, "Error: Invalid stage_id\r\n");
 80026f6:	4668      	mov	r0, sp
 80026f8:	f248 319c 	movw	r1, #33692	; 0x839c
 80026fc:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002700:	f7ff fc2c 	bl	8001f5c <USART_rtos_puts>
            USART_rtos_wait_send(&packet);
 8002704:	4668      	mov	r0, sp
 8002706:	f7ff fbb5 	bl	8001e74 <USART_rtos_wait_send>
    else {
        //USART_rtos_sputs(&packet, "Error: Unknown Object '%s'\r\n", pos);
        //USART_rtos_wait_send(&packet);

    }
}
 800270a:	b005      	add	sp, #20
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270e:	bf00      	nop

08002710 <command_config_clock>:

void command_config_clock(char *pos, char term) {
 8002710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002714:	b0b3      	sub	sp, #204	; 0xcc
 8002716:	4604      	mov	r4, r0
 8002718:	4688      	mov	r8, r1
    unsigned error_code = 99; //unknown error
    USART_rtos_packet packet;
    char buffer[80];
    char msg[] = "{'object_type': 'CLOCK', 'method': 'config', 'error':%u, h=%d, m=%d, s=%d}\r\n";
 800271a:	a806      	add	r0, sp, #24
 800271c:	f248 31b8 	movw	r1, #33720	; 0x83b8
 8002720:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002724:	224d      	movs	r2, #77	; 0x4d
 8002726:	f7fd fd93 	bl	8000250 <memcpy>
    packet.msg = buffer;
 800272a:	ab1a      	add	r3, sp, #104	; 0x68
 800272c:	932f      	str	r3, [sp, #188]	; 0xbc
    packet.USARTx_rtos = USARTOutput_rtos;
 800272e:	f640 53f8 	movw	r3, #3576	; 0xdf8
 8002732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	932e      	str	r3, [sp, #184]	; 0xb8

    int NEW_ITEM = 0;

    int idx = find_next_char(pos, 0, term);
 800273a:	4620      	mov	r0, r4
 800273c:	2100      	movs	r1, #0
 800273e:	4642      	mov	r2, r8
 8002740:	f7ff fc80 	bl	8002044 <find_next_char>
    pos+=idx+1;
 8002744:	1c43      	adds	r3, r0, #1
 8002746:	441c      	add	r4, r3
   
    int i;

    int hours = 0, minutes = 0, seconds = 0;
 8002748:	f04f 0900 	mov.w	r9, #0
 800274c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002750:	46ca      	mov	sl, r9
    for(i=0; i<4 && idx!=0; i++) {
 8002752:	464d      	mov	r5, r9

    }
}

void command_config_clock(char *pos, char term) {
    unsigned error_code = 99; //unknown error
 8002754:	2663      	movs	r6, #99	; 0x63
               }
               break;

            case 'm': //minutes 
               pos++;
               minutes = str_to_int(pos, '\003'); 
 8002756:	f04f 0b03 	mov.w	fp, #3
               if (!(minutes >= 0 && minutes <=59)) {
                   minutes = 0;
 800275a:	464f      	mov	r7, r9
    pos+=idx+1;
   
    int i;

    int hours = 0, minutes = 0, seconds = 0;
    for(i=0; i<4 && idx!=0; i++) {
 800275c:	e03b      	b.n	80027d6 <command_config_clock+0xc6>
        //pos++;
        switch (*pos) {
 800275e:	7823      	ldrb	r3, [r4, #0]
 8002760:	2b6d      	cmp	r3, #109	; 0x6d
 8002762:	d013      	beq.n	800278c <command_config_clock+0x7c>
 8002764:	2b73      	cmp	r3, #115	; 0x73
 8002766:	d01e      	beq.n	80027a6 <command_config_clock+0x96>
 8002768:	2b68      	cmp	r3, #104	; 0x68
                   error_code = 400;
               }
               break;

            default:
               error_code = 401;
 800276a:	bf18      	it	ne
 800276c:	f240 1691 	movwne	r6, #401	; 0x191
    int i;

    int hours = 0, minutes = 0, seconds = 0;
    for(i=0; i<4 && idx!=0; i++) {
        //pos++;
        switch (*pos) {
 8002770:	d124      	bne.n	80027bc <command_config_clock+0xac>
            case 'h': //hours
               pos++;
 8002772:	3401      	adds	r4, #1
               hours = str_to_int(pos, '\003'); 
 8002774:	4620      	mov	r0, r4
 8002776:	4659      	mov	r1, fp
 8002778:	f7ff fc70 	bl	800205c <str_to_int>
 800277c:	4682      	mov	sl, r0
               if (!(hours >= 0 && hours <=23)) {
 800277e:	2817      	cmp	r0, #23
                   hours = 0;
 8002780:	bf84      	itt	hi
 8002782:	46ba      	movhi	sl, r7
                   error_code = 400;
 8002784:	f44f 76c8 	movhi.w	r6, #400	; 0x190
        //pos++;
        switch (*pos) {
            case 'h': //hours
               pos++;
               hours = str_to_int(pos, '\003'); 
               if (!(hours >= 0 && hours <=23)) {
 8002788:	d818      	bhi.n	80027bc <command_config_clock+0xac>
 800278a:	e017      	b.n	80027bc <command_config_clock+0xac>
                   error_code = 400;
               }
               break;

            case 'm': //minutes 
               pos++;
 800278c:	3401      	adds	r4, #1
               minutes = str_to_int(pos, '\003'); 
 800278e:	4620      	mov	r0, r4
 8002790:	4659      	mov	r1, fp
 8002792:	f7ff fc63 	bl	800205c <str_to_int>
 8002796:	9003      	str	r0, [sp, #12]
               if (!(minutes >= 0 && minutes <=59)) {
 8002798:	283b      	cmp	r0, #59	; 0x3b
                   minutes = 0;
 800279a:	bf84      	itt	hi
 800279c:	9703      	strhi	r7, [sp, #12]
                   error_code = 400;
 800279e:	f44f 76c8 	movhi.w	r6, #400	; 0x190
               break;

            case 'm': //minutes 
               pos++;
               minutes = str_to_int(pos, '\003'); 
               if (!(minutes >= 0 && minutes <=59)) {
 80027a2:	d80b      	bhi.n	80027bc <command_config_clock+0xac>
 80027a4:	e00a      	b.n	80027bc <command_config_clock+0xac>
                   error_code = 400;
               }
               break;

            case 's': //seconds 
               pos++;
 80027a6:	3401      	adds	r4, #1
               seconds = str_to_int(pos, '\003'); 
 80027a8:	4620      	mov	r0, r4
 80027aa:	4659      	mov	r1, fp
 80027ac:	f7ff fc56 	bl	800205c <str_to_int>
 80027b0:	4681      	mov	r9, r0
               if (!(seconds >= 0 && seconds <=59)) {
 80027b2:	283b      	cmp	r0, #59	; 0x3b
                   seconds = 0;
 80027b4:	bf84      	itt	hi
 80027b6:	46b9      	movhi	r9, r7
                   error_code = 400;
 80027b8:	f44f 76c8 	movhi.w	r6, #400	; 0x190
            default:
               error_code = 401;
               break;
        }

        if (error_code != 99) break;
 80027bc:	2e63      	cmp	r6, #99	; 0x63
 80027be:	d113      	bne.n	80027e8 <command_config_clock+0xd8>

        idx = find_next_char(pos, 0, term);
 80027c0:	4620      	mov	r0, r4
 80027c2:	4639      	mov	r1, r7
 80027c4:	4642      	mov	r2, r8
 80027c6:	f7ff fc3d 	bl	8002044 <find_next_char>
        if (idx == -1) break;
 80027ca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80027ce:	d00b      	beq.n	80027e8 <command_config_clock+0xd8>
        pos+=idx+1;
 80027d0:	1c43      	adds	r3, r0, #1
 80027d2:	441c      	add	r4, r3
    pos+=idx+1;
   
    int i;

    int hours = 0, minutes = 0, seconds = 0;
    for(i=0; i<4 && idx!=0; i++) {
 80027d4:	3501      	adds	r5, #1
 80027d6:	2d03      	cmp	r5, #3
 80027d8:	bfcc      	ite	gt
 80027da:	2300      	movgt	r3, #0
 80027dc:	2301      	movle	r3, #1
 80027de:	2800      	cmp	r0, #0
 80027e0:	bf08      	it	eq
 80027e2:	2300      	moveq	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ba      	bne.n	800275e <command_config_clock+0x4e>
        if (idx == -1) break;
        pos+=idx+1;
    }

    RTC_TimeTypeDef t;
    if (error_code == 99) {
 80027e8:	2e63      	cmp	r6, #99	; 0x63
 80027ea:	d10f      	bne.n	800280c <command_config_clock+0xfc>
        getTime(&t);
 80027ec:	a805      	add	r0, sp, #20
 80027ee:	f000 f945 	bl	8002a7c <getTime>
        unsigned int c = getEpoch(&t, getSystemDay());
 80027f2:	f000 f889 	bl	8002908 <getSystemDay>
 80027f6:	4601      	mov	r1, r0
 80027f8:	a805      	add	r0, sp, #20
 80027fa:	f000 f945 	bl	8002a88 <getEpoch>
 80027fe:	4603      	mov	r3, r0
        setTimeSafely(hours, minutes, seconds, c);
 8002800:	4650      	mov	r0, sl
 8002802:	9903      	ldr	r1, [sp, #12]
 8002804:	464a      	mov	r2, r9
 8002806:	f000 f955 	bl	8002ab4 <setTimeSafely>
        //RTC_GetTime(RTC_Format_BIN, &t);

        error_code = 0;
 800280a:	2600      	movs	r6, #0
    }
        getTime(&t);
 800280c:	a805      	add	r0, sp, #20
 800280e:	f000 f935 	bl	8002a7c <getTime>


    */


    USART_rtos_sputs(&packet, msg, error_code, hours, minutes, seconds);
 8002812:	9b03      	ldr	r3, [sp, #12]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f8cd 9004 	str.w	r9, [sp, #4]
 800281a:	a82e      	add	r0, sp, #184	; 0xb8
 800281c:	a906      	add	r1, sp, #24
 800281e:	4632      	mov	r2, r6
 8002820:	4653      	mov	r3, sl
 8002822:	f7ff fbd5 	bl	8001fd0 <USART_rtos_sputs>
    USART_rtos_wait_send(&packet);
 8002826:	a82e      	add	r0, sp, #184	; 0xb8
 8002828:	f7ff fb24 	bl	8001e74 <USART_rtos_wait_send>
}
 800282c:	b033      	add	sp, #204	; 0xcc
 800282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002832:	bf00      	nop

08002834 <command_config>:

void command_config(char *pos, char term) {
 8002834:	b538      	push	{r3, r4, r5, lr}
 8002836:	460c      	mov	r4, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;

    pos+=7; //move cursor to next word
 8002838:	1dc5      	adds	r5, r0, #7
    if (str_compare(pos, "CLOCK\003", term)) {
 800283a:	4628      	mov	r0, r5
 800283c:	f248 4108 	movw	r1, #33800	; 0x8408
 8002840:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002844:	4622      	mov	r2, r4
 8002846:	f7ff fbed 	bl	8002024 <str_compare>
 800284a:	b118      	cbz	r0, 8002854 <command_config+0x20>
        command_config_clock(pos, term);
 800284c:	4628      	mov	r0, r5
 800284e:	4621      	mov	r1, r4
 8002850:	f7ff ff5e 	bl	8002710 <command_config_clock>
 8002854:	bd38      	pop	{r3, r4, r5, pc}
 8002856:	bf00      	nop

08002858 <command_routing>:
    }
}



int command_routing(char *pos, char term) {
 8002858:	b530      	push	{r4, r5, lr}
 800285a:	b085      	sub	sp, #20
 800285c:	4605      	mov	r5, r0
 800285e:	460c      	mov	r4, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002860:	f640 53f8 	movw	r3, #3576	; 0xdf8
 8002864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	9300      	str	r3, [sp, #0]
    int r = 0;
    
    if (str_compare(pos, "get\003", term)) {
 800286c:	f248 4110 	movw	r1, #33808	; 0x8410
 8002870:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002874:	4622      	mov	r2, r4
 8002876:	f7ff fbd5 	bl	8002024 <str_compare>
 800287a:	b128      	cbz	r0, 8002888 <command_routing+0x30>
        command_get(pos, term);
 800287c:	4628      	mov	r0, r5
 800287e:	4621      	mov	r1, r4
 8002880:	f7ff febe 	bl	8002600 <command_get>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 8002884:	2000      	movs	r0, #0
 8002886:	e03d      	b.n	8002904 <command_routing+0xac>
    
    if (str_compare(pos, "get\003", term)) {
        command_get(pos, term);
    }

    else if (str_compare(pos, "set\003", term)) {
 8002888:	4628      	mov	r0, r5
 800288a:	f248 4118 	movw	r1, #33816	; 0x8418
 800288e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002892:	4622      	mov	r2, r4
 8002894:	f7ff fbc6 	bl	8002024 <str_compare>
 8002898:	b128      	cbz	r0, 80028a6 <command_routing+0x4e>
        command_set(pos, term);
 800289a:	4628      	mov	r0, r5
 800289c:	4621      	mov	r1, r4
 800289e:	f7ff fd89 	bl	80023b4 <command_set>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 80028a2:	2000      	movs	r0, #0
 80028a4:	e02e      	b.n	8002904 <command_routing+0xac>

    else if (str_compare(pos, "set\003", term)) {
        command_set(pos, term);
    }

    else if (str_compare(pos, "del\003", term)) {
 80028a6:	4628      	mov	r0, r5
 80028a8:	f248 4120 	movw	r1, #33824	; 0x8420
 80028ac:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028b0:	4622      	mov	r2, r4
 80028b2:	f7ff fbb7 	bl	8002024 <str_compare>
 80028b6:	b128      	cbz	r0, 80028c4 <command_routing+0x6c>
        command_del(pos, term);
 80028b8:	4628      	mov	r0, r5
 80028ba:	4621      	mov	r1, r4
 80028bc:	f7ff fe1e 	bl	80024fc <command_del>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 80028c0:	2000      	movs	r0, #0
 80028c2:	e01f      	b.n	8002904 <command_routing+0xac>

    else if (str_compare(pos, "del\003", term)) {
        command_del(pos, term);
    }

    else if(str_compare(pos, "config\003", term)) {
 80028c4:	4628      	mov	r0, r5
 80028c6:	f248 4128 	movw	r1, #33832	; 0x8428
 80028ca:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028ce:	4622      	mov	r2, r4
 80028d0:	f7ff fba8 	bl	8002024 <str_compare>
 80028d4:	b128      	cbz	r0, 80028e2 <command_routing+0x8a>
        command_config(pos, term);
 80028d6:	4628      	mov	r0, r5
 80028d8:	4621      	mov	r1, r4
 80028da:	f7ff ffab 	bl	8002834 <command_config>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 80028de:	2000      	movs	r0, #0
 80028e0:	e010      	b.n	8002904 <command_routing+0xac>

    else if(str_compare(pos, "config\003", term)) {
        command_config(pos, term);
    }

    else if (*pos != term){
 80028e2:	782b      	ldrb	r3, [r5, #0]
 80028e4:	42a3      	cmp	r3, r4


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 80028e6:	bf08      	it	eq
 80028e8:	2000      	moveq	r0, #0

    else if(str_compare(pos, "config\003", term)) {
        command_config(pos, term);
    }

    else if (*pos != term){
 80028ea:	d00b      	beq.n	8002904 <command_routing+0xac>
        USART_rtos_puts(&packet, "{'method': '', 'error': 9}\r\n"); //error 9: Unknown start command
 80028ec:	4668      	mov	r0, sp
 80028ee:	f248 4130 	movw	r1, #33840	; 0x8430
 80028f2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80028f6:	f7ff fb31 	bl	8001f5c <USART_rtos_puts>
        USART_rtos_wait_send(&packet);
 80028fa:	4668      	mov	r0, sp
 80028fc:	f7ff faba 	bl	8001e74 <USART_rtos_wait_send>
        r = 1;
 8002900:	2001      	movs	r0, #1
 8002902:	e7ff      	b.n	8002904 <command_routing+0xac>
    }
    return r; //1 = Error
}
 8002904:	b005      	add	sp, #20
 8002906:	bd30      	pop	{r4, r5, pc}

08002908 <getSystemDay>:
*/

static unsigned int SYSTEM_DAY_COUNT; //private file var

unsigned getSystemDay() {
    return SYSTEM_DAY_COUNT;
 8002908:	f640 131c 	movw	r3, #2332	; 0x91c
 800290c:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	4770      	bx	lr

08002914 <setSystemDay>:

void setSystemDay(unsigned int day) {
    SYSTEM_DAY_COUNT = day;
 8002914:	f640 131c 	movw	r3, #2332	; 0x91c
 8002918:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291c:	6018      	str	r0, [r3, #0]
 800291e:	4770      	bx	lr

08002920 <correctTimeChangeOffset>:
}

void correctTimeChangeOffset(unsigned int prev_epoch, Timer_node* timer_list_head) {
 8002920:	b570      	push	{r4, r5, r6, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	4605      	mov	r5, r0
 8002926:	460c      	mov	r4, r1
    RTC_TimeTypeDef t;


    Timer_node* cursor = timer_list_head;
    while(cursor) {
        RTC_GetTime(RTC_Format_BIN, &t);
 8002928:	2600      	movs	r6, #0
void correctTimeChangeOffset(unsigned int prev_epoch, Timer_node* timer_list_head) {
    RTC_TimeTypeDef t;


    Timer_node* cursor = timer_list_head;
    while(cursor) {
 800292a:	e010      	b.n	800294e <correctTimeChangeOffset+0x2e>
        RTC_GetTime(RTC_Format_BIN, &t);
 800292c:	4630      	mov	r0, r6
 800292e:	a901      	add	r1, sp, #4
 8002930:	f001 fb3a 	bl	8003fa8 <RTC_GetTime>
        unsigned int current_epoch = getEpoch(&t, getSystemDay());
 8002934:	f7ff ffe8 	bl	8002908 <getSystemDay>
 8002938:	4601      	mov	r1, r0
 800293a:	a801      	add	r0, sp, #4
 800293c:	f000 f8a4 	bl	8002a88 <getEpoch>
        unsigned int offset = 0;

        //gets the absolute offset
        int missed = 0;
        offset = cursor->epoch - prev_epoch; 
 8002940:	68a3      	ldr	r3, [r4, #8]
 8002942:	1b5b      	subs	r3, r3, r5
        
        //cursor->debug2 = cursor->epoch; //prev timer epoch
        cursor->epoch = current_epoch + offset; //current timer epoch
 8002944:	4403      	add	r3, r0
 8002946:	60a3      	str	r3, [r4, #8]
        cursor->debug =  prev_epoch; // prev epoch
 8002948:	6125      	str	r5, [r4, #16]
        cursor->debug1 = current_epoch; //current epoch
 800294a:	61a0      	str	r0, [r4, #24]
        cursor = cursor->next;
 800294c:	6864      	ldr	r4, [r4, #4]
void correctTimeChangeOffset(unsigned int prev_epoch, Timer_node* timer_list_head) {
    RTC_TimeTypeDef t;


    Timer_node* cursor = timer_list_head;
    while(cursor) {
 800294e:	2c00      	cmp	r4, #0
 8002950:	d1ec      	bne.n	800292c <correctTimeChangeOffset+0xc>
        cursor->epoch = current_epoch + offset; //current timer epoch
        cursor->debug =  prev_epoch; // prev epoch
        cursor->debug1 = current_epoch; //current epoch
        cursor = cursor->next;
    }
}
 8002952:	b002      	add	sp, #8
 8002954:	bd70      	pop	{r4, r5, r6, pc}
 8002956:	bf00      	nop

08002958 <addTimerInterrupt>:
        cursor = cursor->next;
    }
    return NULL;
}

int addTimerInterrupt(Timer_node *timer, Timer_node **timer_list_head) {
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	4604      	mov	r4, r0
 800295c:	460d      	mov	r5, r1
    if (!timer->timer_mutex) timer->timer_mutex = xSemaphoreCreateMutex();
 800295e:	6803      	ldr	r3, [r0, #0]
 8002960:	b913      	cbnz	r3, 8002968 <addTimerInterrupt+0x10>
 8002962:	f000 fec3 	bl	80036ec <xQueueCreateMutex>
 8002966:	6020      	str	r0, [r4, #0]
    if (xSemaphoreTake(timer->timer_mutex, portMAX_DELAY) == pdTRUE) {
 8002968:	6820      	ldr	r0, [r4, #0]
 800296a:	2100      	movs	r1, #0
 800296c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002970:	460b      	mov	r3, r1
 8002972:	f000 fedd 	bl	8003730 <xQueueGenericReceive>
 8002976:	2801      	cmp	r0, #1
 8002978:	d11e      	bne.n	80029b8 <addTimerInterrupt+0x60>
        Timer_node* cursor = *timer_list_head;
 800297a:	682a      	ldr	r2, [r5, #0]
        timer->next = NULL;//safety
 800297c:	2300      	movs	r3, #0
 800297e:	6063      	str	r3, [r4, #4]

        if (cursor == NULL) {
 8002980:	b912      	cbnz	r2, 8002988 <addTimerInterrupt+0x30>
            *timer_list_head = timer; 
 8002982:	602c      	str	r4, [r5, #0]
            return 1;
 8002984:	bd38      	pop	{r3, r4, r5, pc}
        }

        while(cursor->next) cursor = cursor->next;
 8002986:	461a      	mov	r2, r3
 8002988:	6853      	ldr	r3, [r2, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1fb      	bne.n	8002986 <addTimerInterrupt+0x2e>
        cursor->next = timer;
 800298e:	6054      	str	r4, [r2, #4]

        int r = (xSemaphoreTake(timer->timer_mutex, portMAX_DELAY) == pdTRUE);
 8002990:	6820      	ldr	r0, [r4, #0]
 8002992:	2100      	movs	r1, #0
 8002994:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002998:	460b      	mov	r3, r1
 800299a:	f000 fec9 	bl	8003730 <xQueueGenericReceive>
 800299e:	2801      	cmp	r0, #1
 80029a0:	bf14      	ite	ne
 80029a2:	2500      	movne	r5, #0
 80029a4:	2501      	moveq	r5, #1
        if (r) xSemaphoreGive(timer->timer_mutex);
 80029a6:	b12d      	cbz	r5, 80029b4 <addTimerInterrupt+0x5c>
 80029a8:	6820      	ldr	r0, [r4, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	460a      	mov	r2, r1
 80029ae:	460b      	mov	r3, r1
 80029b0:	f000 fe32 	bl	8003618 <xQueueGenericSend>
        return r;
 80029b4:	4628      	mov	r0, r5
 80029b6:	bd38      	pop	{r3, r4, r5, pc}

    }

    return 0;
 80029b8:	2000      	movs	r0, #0
}
 80029ba:	bd38      	pop	{r3, r4, r5, pc}

080029bc <setTime>:
#include "task.h"
#include "hb_structs.h"

extern Timer_node* timer_list_head;

void setTime(int hours, int minutes, int seconds) {
 80029bc:	b570      	push	{r4, r5, r6, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	4604      	mov	r4, r0
 80029c2:	460d      	mov	r5, r1
 80029c4:	4616      	mov	r6, r2
    RTC_TimeTypeDef RTC_TimeStructure;

    RTC_EnterInitMode();
 80029c6:	f001 fa09 	bl	8003ddc <RTC_EnterInitMode>

    //debug
    if (timer_list_head)
 80029ca:	f640 53f0 	movw	r3, #3568	; 0xdf0
 80029ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b113      	cbz	r3, 80029dc <setTime+0x20>
        timer_list_head->debug3 = (unsigned) RTC_TimeStructure.RTC_Hours;
 80029d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80029da:	621a      	str	r2, [r3, #32]

    RTC_TimeStructure.RTC_Seconds = DEC_2_HEX(seconds);
 80029dc:	f246 6367 	movw	r3, #26215	; 0x6667
 80029e0:	f2c6 6366 	movt	r3, #26214	; 0x6666
 80029e4:	fb83 2106 	smull	r2, r1, r3, r6
 80029e8:	17f2      	asrs	r2, r6, #31
 80029ea:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80029ee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80029f2:	eba6 0641 	sub.w	r6, r6, r1, lsl #1
 80029f6:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 80029fa:	f88d 2006 	strb.w	r2, [sp, #6]
    RTC_TimeStructure.RTC_Minutes = DEC_2_HEX(minutes);//0x01;
 80029fe:	fb83 2105 	smull	r2, r1, r3, r5
 8002a02:	17ea      	asrs	r2, r5, #31
 8002a04:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8002a08:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002a0c:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
 8002a10:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002a14:	f88d 2005 	strb.w	r2, [sp, #5]
    RTC_TimeStructure.RTC_Hours = DEC_2_HEX(hours);//0x01;
 8002a18:	fb83 2304 	smull	r2, r3, r3, r4
 8002a1c:	17e2      	asrs	r2, r4, #31
 8002a1e:	ebc2 03a3 	rsb	r3, r2, r3, asr #2
 8002a22:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002a26:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
 8002a2a:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8002a2e:	f88d 3004 	strb.w	r3, [sp, #4]
    RTC_TimeStructure.RTC_H12 = RTC_H12_AM;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f88d 3007 	strb.w	r3, [sp, #7]
    RTC_SetTime(RTC_Format_BCD,&RTC_TimeStructure);
 8002a38:	2001      	movs	r0, #1
 8002a3a:	a901      	add	r1, sp, #4
 8002a3c:	f001 fa68 	bl	8003f10 <RTC_SetTime>


    RTC_ExitInitMode();
 8002a40:	f001 f9fe 	bl	8003e40 <RTC_ExitInitMode>
}
 8002a44:	b002      	add	sp, #8
 8002a46:	bd70      	pop	{r4, r5, r6, pc}

08002a48 <setDate>:
    taskEXIT_CRITICAL();

} 


void setDate(int month, int day, int year) {
 8002a48:	b570      	push	{r4, r5, r6, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	4605      	mov	r5, r0
 8002a4e:	460e      	mov	r6, r1
 8002a50:	4614      	mov	r4, r2
    RTC_DateTypeDef RTC_DateStructure;

    RTC_EnterInitMode();
 8002a52:	f001 f9c3 	bl	8003ddc <RTC_EnterInitMode>

    RTC_DateStructure.RTC_Date = day;
 8002a56:	f88d 6006 	strb.w	r6, [sp, #6]
    RTC_DateStructure.RTC_Month = month;
 8002a5a:	f88d 5005 	strb.w	r5, [sp, #5]
    RTC_DateStructure.RTC_WeekDay= RTC_Weekday_Thursday;
 8002a5e:	2304      	movs	r3, #4
 8002a60:	f88d 3004 	strb.w	r3, [sp, #4]
    RTC_DateStructure.RTC_Year = year;
 8002a64:	f88d 4007 	strb.w	r4, [sp, #7]
    RTC_SetDate(RTC_Format_BCD,&RTC_DateStructure);
 8002a68:	2001      	movs	r0, #1
 8002a6a:	eb0d 0103 	add.w	r1, sp, r3
 8002a6e:	f001 fabd 	bl	8003fec <RTC_SetDate>

    RTC_ExitInitMode();
 8002a72:	f001 f9e5 	bl	8003e40 <RTC_ExitInitMode>

}
 8002a76:	b002      	add	sp, #8
 8002a78:	bd70      	pop	{r4, r5, r6, pc}
 8002a7a:	bf00      	nop

08002a7c <getTime>:

void getTime(RTC_TimeTypeDef *time) {
 8002a7c:	b508      	push	{r3, lr}
 8002a7e:	4601      	mov	r1, r0
    RTC_GetTime(RTC_Format_BIN, time);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f001 fa91 	bl	8003fa8 <RTC_GetTime>
 8002a86:	bd08      	pop	{r3, pc}

08002a88 <getEpoch>:
    time->RTC_Seconds = time->RTC_Seconds;
    */
}


unsigned getEpoch(RTC_TimeTypeDef *time, int days) {
 8002a88:	b410      	push	{r4}

    unsigned int epoch = days * 86400;
 8002a8a:	f44f 43a3 	mov.w	r3, #20864	; 0x5180
 8002a8e:	f2c0 0301 	movt	r3, #1
    epoch += time->RTC_Hours * 3600;
 8002a92:	7802      	ldrb	r2, [r0, #0]
 8002a94:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8002a98:	fb04 f202 	mul.w	r2, r4, r2
 8002a9c:	fb03 2101 	mla	r1, r3, r1, r2
    epoch += time->RTC_Minutes * 60;
 8002aa0:	7842      	ldrb	r2, [r0, #1]
 8002aa2:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8002aa6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    epoch += time->RTC_Seconds;
 8002aaa:	7880      	ldrb	r0, [r0, #2]
    return epoch;
}
 8002aac:	4410      	add	r0, r2
 8002aae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <setTimeSafely>:
    RTC_ExitInitMode();
}

//for future: dont pass the previous epoch  but rather create it within function
//Also prevent other tasks interrupting
void setTimeSafely(int hours, int minutes, int seconds, unsigned prev_epoch) { //sets time safely for timers and other tasks
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	4606      	mov	r6, r0
 8002aba:	460d      	mov	r5, r1
 8002abc:	4614      	mov	r4, r2
    RTC_TimeTypeDef t;
    taskENTER_CRITICAL();
 8002abe:	f000 ff83 	bl	80039c8 <vPortEnterCritical>

    getTime(&t);
 8002ac2:	a801      	add	r0, sp, #4
 8002ac4:	f7ff ffda 	bl	8002a7c <getTime>
    unsigned int c = getEpoch(&t, getSystemDay());
 8002ac8:	f7ff ff1e 	bl	8002908 <getSystemDay>
 8002acc:	4601      	mov	r1, r0
 8002ace:	a801      	add	r0, sp, #4
 8002ad0:	f7ff ffda 	bl	8002a88 <getEpoch>
 8002ad4:	4607      	mov	r7, r0

    setTime(hours, minutes, seconds);
 8002ad6:	4630      	mov	r0, r6
 8002ad8:	4629      	mov	r1, r5
 8002ada:	4622      	mov	r2, r4
 8002adc:	f7ff ff6e 	bl	80029bc <setTime>
    if (timer_list_head) correctTimeChangeOffset(c, timer_list_head);
 8002ae0:	f640 53f0 	movw	r3, #3568	; 0xdf0
 8002ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	b111      	cbz	r1, 8002af2 <setTimeSafely+0x3e>
 8002aec:	4638      	mov	r0, r7
 8002aee:	f7ff ff17 	bl	8002920 <correctTimeChangeOffset>
    taskEXIT_CRITICAL();
 8002af2:	f000 ff75 	bl	80039e0 <vPortExitCritical>

} 
 8002af6:	b003      	add	sp, #12
 8002af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afa:	bf00      	nop

08002afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
 8002afc:	b510      	push	{r4, lr}
 8002afe:	4604      	mov	r4, r0
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
 8002b00:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8002b02:	f001 fbe5 	bl	80042d0 <free>
		vPortFree( pxTCB );
 8002b06:	4620      	mov	r0, r4
 8002b08:	f001 fbe2 	bl	80042d0 <free>
 8002b0c:	bd10      	pop	{r4, pc}
 8002b0e:	bf00      	nop

08002b10 <prvAllocateTCBAndStack>:
	}
}
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	4606      	mov	r6, r0
 8002b14:	460d      	mov	r5, r1
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 8002b16:	2050      	movs	r0, #80	; 0x50
 8002b18:	f001 fbd2 	bl	80042c0 <malloc>

	if( pxNewTCB != NULL )
 8002b1c:	4604      	mov	r4, r0
 8002b1e:	b180      	cbz	r0, 8002b42 <prvAllocateTCBAndStack+0x32>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 8002b20:	4628      	mov	r0, r5
 8002b22:	b91d      	cbnz	r5, 8002b2c <prvAllocateTCBAndStack+0x1c>
 8002b24:	00b0      	lsls	r0, r6, #2
 8002b26:	f001 fbcb 	bl	80042c0 <malloc>
 8002b2a:	e7ff      	b.n	8002b2c <prvAllocateTCBAndStack+0x1c>
 8002b2c:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 8002b2e:	b920      	cbnz	r0, 8002b3a <prvAllocateTCBAndStack+0x2a>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 8002b30:	4620      	mov	r0, r4
 8002b32:	f001 fbcd 	bl	80042d0 <free>
			pxNewTCB = NULL;
 8002b36:	2400      	movs	r4, #0
 8002b38:	e003      	b.n	8002b42 <prvAllocateTCBAndStack+0x32>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 8002b3a:	21a5      	movs	r1, #165	; 0xa5
 8002b3c:	00b2      	lsls	r2, r6, #2
 8002b3e:	f001 fe81 	bl	8004844 <memset>
		}
	}

	return pxNewTCB;
}
 8002b42:	4620      	mov	r0, r4
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
 8002b46:	bf00      	nop

08002b48 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 8002b48:	b538      	push	{r3, r4, r5, lr}
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	4615      	mov	r5, r2
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 8002b4e:	3034      	adds	r0, #52	; 0x34
 8002b50:	2210      	movs	r2, #16
 8002b52:	f001 fef1 	bl	8004938 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 8002b56:	2300      	movs	r3, #0
 8002b58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002b5c:	2d04      	cmp	r5, #4
 8002b5e:	bf28      	it	cs
 8002b60:	2504      	movcs	r5, #4
	}

	pxTCB->uxPriority = uxPriority;
 8002b62:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8002b64:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8002b66:	1d20      	adds	r0, r4, #4
 8002b68:	f000 fe74 	bl	8003854 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002b6c:	f104 0018 	add.w	r0, r4, #24
 8002b70:	f000 fe70 	bl	8003854 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8002b74:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 8002b76:	f1c5 0505 	rsb	r5, r5, #5
 8002b7a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002b7c:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 8002b82:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002b84:	bd38      	pop	{r3, r4, r5, pc}
 8002b86:	bf00      	nop

08002b88 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8002b88:	b538      	push	{r3, r4, r5, lr}
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002b8a:	2400      	movs	r4, #0
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8002b8c:	f640 152c 	movw	r5, #2348	; 0x92c
 8002b90:	f2c2 0500 	movt	r5, #8192	; 0x2000

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002b94:	e006      	b.n	8002ba4 <prvInitialiseTaskLists+0x1c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8002b96:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002b9a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002b9e:	f000 fe4d 	bl	800383c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002ba2:	3401      	adds	r4, #1
 8002ba4:	2c04      	cmp	r4, #4
 8002ba6:	d9f6      	bls.n	8002b96 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8002ba8:	f640 15e4 	movw	r5, #2532	; 0x9e4
 8002bac:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 fe43 	bl	800383c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 8002bb6:	f640 14f8 	movw	r4, #2552	; 0x9f8
 8002bba:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f000 fe3c 	bl	800383c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 8002bc4:	f640 10ac 	movw	r0, #2476	; 0x9ac
 8002bc8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bcc:	f000 fe36 	bl	800383c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8002bd0:	f640 1094 	movw	r0, #2452	; 0x994
 8002bd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002bd8:	f000 fe30 	bl	800383c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8002bdc:	f640 10d0 	movw	r0, #2512	; 0x9d0
 8002be0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002be4:	f000 fe2a 	bl	800383c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002be8:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8002bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf0:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002bf2:	f640 1390 	movw	r3, #2448	; 0x990
 8002bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bfa:	601c      	str	r4, [r3, #0]
 8002bfc:	bd38      	pop	{r3, r4, r5, pc}
 8002bfe:	bf00      	nop

08002c00 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 8002c00:	b510      	push	{r4, lr}
 8002c02:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8002c04:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
 8002c10:	f640 2320 	movw	r3, #2592	; 0xa20
 8002c14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4298      	cmp	r0, r3
 8002c1c:	d20d      	bcs.n	8002c3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002c1e:	f640 1390 	movw	r3, #2448	; 0x990
 8002c22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002c2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	3104      	adds	r1, #4
 8002c34:	f000 fe20 	bl	8003878 <vListInsert>
 8002c38:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002c3a:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8002c3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002c48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	3104      	adds	r1, #4
 8002c50:	f000 fe12 	bl	8003878 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8002c54:	f240 035c 	movw	r3, #92	; 0x5c
 8002c58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002c60:	bf3e      	ittt	cc
 8002c62:	f240 035c 	movwcc	r3, #92	; 0x5c
 8002c66:	f2c2 0300 	movtcc	r3, #8192	; 0x2000
 8002c6a:	601c      	strcc	r4, [r3, #0]
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	bf00      	nop

08002c70 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c74:	b083      	sub	sp, #12
 8002c76:	4682      	mov	sl, r0
 8002c78:	468b      	mov	fp, r1
 8002c7a:	4615      	mov	r5, r2
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002c80:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 8002c84:	4610      	mov	r0, r2
 8002c86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002c88:	f7ff ff42 	bl	8002b10 <prvAllocateTCBAndStack>

	if( pxNewTCB != NULL )
 8002c8c:	4604      	mov	r4, r0
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	d077      	beq.n	8002d82 <xTaskGenericCreate+0x112>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 8002c92:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002c94:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8002c98:	3f01      	subs	r7, #1
 8002c9a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002c9e:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 8002ca2:	9500      	str	r5, [sp, #0]
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	4632      	mov	r2, r6
 8002ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002caa:	f7ff ff4d 	bl	8002b48 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cae:	4638      	mov	r0, r7
 8002cb0:	4651      	mov	r1, sl
 8002cb2:	464a      	mov	r2, r9
 8002cb4:	f000 fe3c 	bl	8003930 <pxPortInitialiseStack>
 8002cb8:	6020      	str	r0, [r4, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8002cba:	f1b8 0f00 	cmp.w	r8, #0
 8002cbe:	d001      	beq.n	8002cc4 <xTaskGenericCreate+0x54>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002cc0:	f8c8 4000 	str.w	r4, [r8]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 8002cc4:	f000 fe80 	bl	80039c8 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002cc8:	f640 1328 	movw	r3, #2344	; 0x928
 8002ccc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	3201      	adds	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 8002cd6:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	b973      	cbnz	r3, 8002d00 <xTaskGenericCreate+0x90>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8002ce2:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002ce6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cea:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002cec:	f640 1328 	movw	r3, #2344	; 0x928
 8002cf0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d115      	bne.n	8002d26 <xTaskGenericCreate+0xb6>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 8002cfa:	f7ff ff45 	bl	8002b88 <prvInitialiseTaskLists>
 8002cfe:	e012      	b.n	8002d26 <xTaskGenericCreate+0xb6>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8002d00:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002d04:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	b963      	cbnz	r3, 8002d26 <xTaskGenericCreate+0xb6>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8002d0c:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d18:	42b3      	cmp	r3, r6
					{
						pxCurrentTCB = pxNewTCB;
 8002d1a:	bf9e      	ittt	ls
 8002d1c:	f640 13cc 	movwls	r3, #2508	; 0x9cc
 8002d20:	f2c2 0300 	movtls	r3, #8192	; 0x2000
 8002d24:	601c      	strls	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 8002d26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d28:	f640 2224 	movw	r2, #2596	; 0xa24
 8002d2c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 8002d34:	bf82      	ittt	hi
 8002d36:	f640 2224 	movwhi	r2, #2596	; 0xa24
 8002d3a:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 8002d3e:	6013      	strhi	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 8002d40:	f640 210c 	movw	r1, #2572	; 0xa0c
 8002d44:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002d48:	680a      	ldr	r2, [r1, #0]
 8002d4a:	3201      	adds	r2, #1
 8002d4c:	600a      	str	r2, [r1, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 8002d4e:	f640 1120 	movw	r1, #2336	; 0x920
 8002d52:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002d56:	680a      	ldr	r2, [r1, #0]
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bf82      	ittt	hi
 8002d5c:	f640 1220 	movwhi	r2, #2336	; 0x920
 8002d60:	460a      	movhi	r2, r1
 8002d62:	6013      	strhi	r3, [r2, #0]
 8002d64:	f640 102c 	movw	r0, #2348	; 0x92c
 8002d68:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d6c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002d70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002d74:	1d21      	adds	r1, r4, #4
 8002d76:	f000 fd71 	bl	800385c <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002d7a:	f000 fe31 	bl	80039e0 <vPortExitCritical>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
 8002d7e:	2401      	movs	r4, #1
 8002d80:	e001      	b.n	8002d86 <xTaskGenericCreate+0x116>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d82:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 8002d86:	2c01      	cmp	r4, #1
 8002d88:	d10f      	bne.n	8002daa <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
 8002d8a:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	b14b      	cbz	r3, 8002daa <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8002d96:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002d9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	42b3      	cmp	r3, r6
 8002da4:	d201      	bcs.n	8002daa <xTaskGenericCreate+0x13a>
			{
				portYIELD_WITHIN_API();
 8002da6:	f000 fe07 	bl	80039b8 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
}
 8002daa:	4620      	mov	r0, r4
 8002dac:	b003      	add	sp, #12
 8002dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db2:	bf00      	nop

08002db4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4604      	mov	r4, r0
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002db8:	f000 fe06 	bl	80039c8 <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 8002dbc:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002dc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dc4:	681b      	ldr	r3, [r3, #0]
			{
				pxTaskToDelete = NULL;
 8002dc6:	429c      	cmp	r4, r3
 8002dc8:	bf08      	it	eq
 8002dca:	2400      	moveq	r4, #0
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 8002dcc:	4625      	mov	r5, r4
 8002dce:	b92c      	cbnz	r4, 8002ddc <vTaskDelete+0x28>
 8002dd0:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002dd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dd8:	681d      	ldr	r5, [r3, #0]
 8002dda:	e7ff      	b.n	8002ddc <vTaskDelete+0x28>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8002ddc:	1d2e      	adds	r6, r5, #4
 8002dde:	4630      	mov	r0, r6
 8002de0:	f000 fd66 	bl	80038b0 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 8002de4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002de6:	b11b      	cbz	r3, 8002df0 <vTaskDelete+0x3c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8002de8:	f105 0018 	add.w	r0, r5, #24
 8002dec:	f000 fd60 	bl	80038b0 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8002df0:	f640 1094 	movw	r0, #2452	; 0x994
 8002df4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002df8:	4631      	mov	r1, r6
 8002dfa:	f000 fd2f 	bl	800385c <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 8002dfe:	f640 1324 	movw	r3, #2340	; 0x924
 8002e02:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	3201      	adds	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8002e0c:	f640 230c 	movw	r3, #2572	; 0xa0c
 8002e10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	3201      	adds	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8002e1a:	f000 fde1 	bl	80039e0 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 8002e1e:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002e22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b113      	cbz	r3, 8002e30 <vTaskDelete+0x7c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 8002e2a:	b90c      	cbnz	r4, 8002e30 <vTaskDelete+0x7c>
			{
				portYIELD_WITHIN_API();
 8002e2c:	f000 fdc4 	bl	80039b8 <vPortYieldFromISR>
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	bf00      	nop

08002e34 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
 8002e34:	b510      	push	{r4, lr}
 8002e36:	4604      	mov	r4, r0
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
 8002e38:	f000 fdc6 	bl	80039c8 <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
 8002e3c:	b924      	cbnz	r4, 8002e48 <uxTaskPriorityGet+0x14>
 8002e3e:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8002e42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e46:	681c      	ldr	r4, [r3, #0]
			uxReturn = pxTCB->uxPriority;
 8002e48:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		}
		taskEXIT_CRITICAL();
 8002e4a:	f000 fdc9 	bl	80039e0 <vPortExitCritical>

		return uxReturn;
	}
 8002e4e:	4620      	mov	r0, r4
 8002e50:	bd10      	pop	{r4, pc}
 8002e52:	bf00      	nop

08002e54 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
 8002e54:	b500      	push	{lr}
 8002e56:	b085      	sub	sp, #20
	/* Add the idle task at the lowest priority. */
	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
	{
		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
		be returned by the xTaskGetIdleTaskHandle() function. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f640 2210 	movw	r2, #2576	; 0xa10
 8002e60:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002e64:	9201      	str	r2, [sp, #4]
 8002e66:	9302      	str	r3, [sp, #8]
 8002e68:	9303      	str	r3, [sp, #12]
 8002e6a:	f243 10d9 	movw	r0, #12761	; 0x31d9
 8002e6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e72:	f248 41b8 	movw	r1, #33976	; 0x84b8
 8002e76:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7e:	f7ff fef7 	bl	8002c70 <xTaskGenericCreate>
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
 8002e82:	2801      	cmp	r0, #1
 8002e84:	d113      	bne.n	8002eae <vTaskStartScheduler+0x5a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
 8002e86:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8002e8a:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
 8002e8e:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e96:	2201      	movs	r2, #1
 8002e98:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
 8002e9a:	f640 2320 	movw	r3, #2592	; 0xa20
 8002e9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]

		/* If configGENERATE_RUN_TIME_STATS is defined then the following
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002ea6:	f7fe fa0f 	bl	80012c8 <init_us_timer>
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002eaa:	f000 fd61 	bl	8003970 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
 8002eae:	b005      	add	sp, #20
 8002eb0:	f85d fb04 	ldr.w	pc, [sp], #4

08002eb4 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 8002eb4:	f640 2314 	movw	r3, #2580	; 0xa14
 8002eb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	3201      	adds	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	4770      	bx	lr

08002ec4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
 8002ec4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
 8002ec6:	f000 fd7f 	bl	80039c8 <vPortEnterCritical>
	{
		xTicks = xTickCount;
 8002eca:	f640 2320 	movw	r3, #2592	; 0xa20
 8002ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ed2:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002ed4:	f000 fd84 	bl	80039e0 <vPortExitCritical>

	return xTicks;
}
 8002ed8:	4620      	mov	r0, r4
 8002eda:	bd10      	pop	{r4, pc}

08002edc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 8002edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002ee0:	f640 2314 	movw	r3, #2580	; 0xa14
 8002ee4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f040 8082 	bne.w	8002ff4 <vTaskIncrementTick+0x118>
	{
		++xTickCount;
 8002ef0:	f640 2320 	movw	r3, #2592	; 0xa20
 8002ef4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	3201      	adds	r2, #1
 8002efc:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	bb53      	cbnz	r3, 8002f58 <vTaskIncrementTick+0x7c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8002f02:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8002f06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f0a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 8002f0c:	f640 1290 	movw	r2, #2448	; 0x990
 8002f10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f14:	6810      	ldr	r0, [r2, #0]
 8002f16:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8002f18:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
 8002f1a:	f640 221c 	movw	r2, #2588	; 0xa1c
 8002f1e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002f22:	6811      	ldr	r1, [r2, #0]
 8002f24:	3101      	adds	r1, #1
 8002f26:	6011      	str	r1, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	b93b      	cbnz	r3, 8002f3e <vTaskIncrementTick+0x62>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 8002f2e:	f240 035c 	movw	r3, #92	; 0x5c
 8002f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	e00c      	b.n	8002f58 <vTaskIncrementTick+0x7c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f3e:	f640 13a8 	movw	r3, #2472	; 0x9a8
 8002f42:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	f240 035c 	movw	r3, #92	; 0x5c
 8002f52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f56:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8002f58:	f640 2320 	movw	r3, #2592	; 0xa20
 8002f5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	f240 035c 	movw	r3, #92	; 0x5c
 8002f66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d348      	bcc.n	8003002 <vTaskIncrementTick+0x126>
 8002f70:	f640 16a8 	movw	r6, #2472	; 0x9a8
 8002f74:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002f78:	f640 2820 	movw	r8, #2592	; 0xa20
 8002f7c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002f80:	f640 1720 	movw	r7, #2336	; 0x920
 8002f84:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8002f88:	f640 192c 	movw	r9, #2348	; 0x92c
 8002f8c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8002f90:	6833      	ldr	r3, [r6, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	b943      	cbnz	r3, 8002fa8 <vTaskIncrementTick+0xcc>
 8002f96:	f240 035c 	movw	r3, #92	; 0x5c
 8002f9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fa8:	6833      	ldr	r3, [r6, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	68dc      	ldr	r4, [r3, #12]
 8002fae:	6863      	ldr	r3, [r4, #4]
 8002fb0:	f8d8 2000 	ldr.w	r2, [r8]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d206      	bcs.n	8002fc6 <vTaskIncrementTick+0xea>
 8002fb8:	f240 025c 	movw	r2, #92	; 0x5c
 8002fbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fc6:	1d25      	adds	r5, r4, #4
 8002fc8:	4628      	mov	r0, r5
 8002fca:	f000 fc71 	bl	80038b0 <vListRemove>
 8002fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fd0:	b11b      	cbz	r3, 8002fda <vTaskIncrementTick+0xfe>
 8002fd2:	f104 0018 	add.w	r0, r4, #24
 8002fd6:	f000 fc6b 	bl	80038b0 <vListRemove>
 8002fda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	bf88      	it	hi
 8002fe2:	603b      	strhi	r3, [r7, #0]
 8002fe4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002fe8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002fec:	4629      	mov	r1, r5
 8002fee:	f000 fc35 	bl	800385c <vListInsertEnd>
 8002ff2:	e7cd      	b.n	8002f90 <vTaskIncrementTick+0xb4>
	}
	else
	{
		++uxMissedTicks;
 8002ff4:	f640 2318 	movw	r3, #2584	; 0xa18
 8002ff8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	3201      	adds	r2, #1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003006:	bf00      	nop

08003008 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8003008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800300c:	f000 fcdc 	bl	80039c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003010:	f640 2314 	movw	r3, #2580	; 0xa14
 8003014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	3a01      	subs	r2, #1
 800301c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 800301e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003020:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8003022:	2b00      	cmp	r3, #0
 8003024:	d165      	bne.n	80030f2 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8003026:	f640 1328 	movw	r3, #2344	; 0x928
 800302a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	bb0b      	cbnz	r3, 8003076 <xTaskResumeAll+0x6e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8003032:	2400      	movs	r4, #0
 8003034:	e05d      	b.n	80030f2 <xTaskResumeAll+0xea>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8003036:	68f3      	ldr	r3, [r6, #12]
 8003038:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 800303a:	f104 0018 	add.w	r0, r4, #24
 800303e:	f000 fc37 	bl	80038b0 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8003042:	1d25      	adds	r5, r4, #4
 8003044:	4628      	mov	r0, r5
 8003046:	f000 fc33 	bl	80038b0 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 800304a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800304c:	f8d8 2000 	ldr.w	r2, [r8]
 8003050:	4293      	cmp	r3, r2
 8003052:	bf88      	it	hi
 8003054:	f8c8 3000 	strhi.w	r3, [r8]
 8003058:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800305c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8003060:	4629      	mov	r1, r5
 8003062:	f000 fbfb 	bl	800385c <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003068:	f8d9 3000 	ldr.w	r3, [r9]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
 800306e:	429a      	cmp	r2, r3
 8003070:	bf28      	it	cs
 8003072:	2701      	movcs	r7, #1
 8003074:	e010      	b.n	8003098 <xTaskResumeAll+0x90>
 8003076:	2700      	movs	r7, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8003078:	f640 16ac 	movw	r6, #2476	; 0x9ac
 800307c:	f2c2 0600 	movt	r6, #8192	; 0x2000
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
 8003080:	f640 1820 	movw	r8, #2336	; 0x920
 8003084:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8003088:	f640 1a2c 	movw	sl, #2348	; 0x92c
 800308c:	f2c2 0a00 	movt	sl, #8192	; 0x2000

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003090:	f640 19cc 	movw	r9, #2508	; 0x9cc
 8003094:	f2c2 0900 	movt	r9, #8192	; 0x2000
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8003098:	6833      	ldr	r3, [r6, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1cb      	bne.n	8003036 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 800309e:	f640 2318 	movw	r3, #2584	; 0xa18
 80030a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b933      	cbnz	r3, 80030b8 <xTaskResumeAll+0xb0>
 80030aa:	e00d      	b.n	80030c8 <xTaskResumeAll+0xc0>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
 80030ac:	f7ff ff16 	bl	8002edc <vTaskIncrementTick>
						--uxMissedTicks;
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	6023      	str	r3, [r4, #0]
 80030b6:	e003      	b.n	80030c0 <xTaskResumeAll+0xb8>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 80030b8:	f640 2418 	movw	r4, #2584	; 0xa18
 80030bc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f2      	bne.n	80030ac <xTaskResumeAll+0xa4>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 80030c6:	2701      	movs	r7, #1
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 80030c8:	2f01      	cmp	r7, #1
 80030ca:	d008      	beq.n	80030de <xTaskResumeAll+0xd6>
 80030cc:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80030d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 80030d8:	bf18      	it	ne
 80030da:	2400      	movne	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 80030dc:	d109      	bne.n	80030f2 <xTaskResumeAll+0xea>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
 80030de:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80030e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 80030ea:	f000 fc65 	bl	80039b8 <vPortYieldFromISR>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
 80030ee:	2401      	movs	r4, #1
 80030f0:	e7ff      	b.n	80030f2 <xTaskResumeAll+0xea>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 80030f2:	f000 fc75 	bl	80039e0 <vPortExitCritical>

	return xAlreadyYielded;
}
 80030f6:	4620      	mov	r0, r4
 80030f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080030fc <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
 80030fc:	b538      	push	{r3, r4, r5, lr}
 80030fe:	4605      	mov	r5, r0
 8003100:	460c      	mov	r4, r1
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
 8003102:	f7ff fed7 	bl	8002eb4 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
 800310a:	f640 2220 	movw	r2, #2592	; 0xa20
 800310e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	4293      	cmp	r3, r2
 8003116:	d90d      	bls.n	8003134 <vTaskDelayUntil+0x38>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 8003118:	42a3      	cmp	r3, r4
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 800311a:	bf98      	it	ls
 800311c:	2300      	movls	r3, #0
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 800311e:	d917      	bls.n	8003150 <vTaskDelayUntil+0x54>
 8003120:	f640 2320 	movw	r3, #2592	; 0xa20
 8003124:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003128:	681b      	ldr	r3, [r3, #0]
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 800312a:	429c      	cmp	r4, r3
 800312c:	bf94      	ite	ls
 800312e:	2300      	movls	r3, #0
 8003130:	2301      	movhi	r3, #1
 8003132:	e00d      	b.n	8003150 <vTaskDelayUntil+0x54>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 8003134:	42a3      	cmp	r3, r4
				{
					xShouldDelay = pdTRUE;
 8003136:	bf88      	it	hi
 8003138:	2301      	movhi	r3, #1
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 800313a:	d809      	bhi.n	8003150 <vTaskDelayUntil+0x54>
 800313c:	f640 2320 	movw	r3, #2592	; 0xa20
 8003140:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003144:	681b      	ldr	r3, [r3, #0]
#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 8003146:	429c      	cmp	r4, r3
 8003148:	bf94      	ite	ls
 800314a:	2300      	movls	r3, #0
 800314c:	2301      	movhi	r3, #1
 800314e:	e7ff      	b.n	8003150 <vTaskDelayUntil+0x54>
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003150:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
 8003152:	b153      	cbz	r3, 800316a <vTaskDelayUntil+0x6e>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8003154:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8003158:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	3004      	adds	r0, #4
 8003160:	f000 fba6 	bl	80038b0 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8003164:	4620      	mov	r0, r4
 8003166:	f7ff fd4b 	bl	8002c00 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800316a:	f7ff ff4d 	bl	8003008 <xTaskResumeAll>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800316e:	b908      	cbnz	r0, 8003174 <vTaskDelayUntil+0x78>
		{
			portYIELD_WITHIN_API();
 8003170:	f000 fc22 	bl	80039b8 <vPortYieldFromISR>
 8003174:	bd38      	pop	{r3, r4, r5, pc}
 8003176:	bf00      	nop

08003178 <prvCheckTasksWaitingTermination>:
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
}
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003178:	b510      	push	{r4, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 800317a:	f640 1324 	movw	r3, #2340	; 0x924
 800317e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b33b      	cbz	r3, 80031d6 <prvCheckTasksWaitingTermination+0x5e>
		{
			vTaskSuspendAll();
 8003186:	f7ff fe95 	bl	8002eb4 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800318a:	f640 1394 	movw	r3, #2452	; 0x994
 800318e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003192:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
 8003194:	f7ff ff38 	bl	8003008 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003198:	b1ec      	cbz	r4, 80031d6 <prvCheckTasksWaitingTermination+0x5e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
 800319a:	f000 fc15 	bl	80039c8 <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 800319e:	f640 1394 	movw	r3, #2452	; 0x994
 80031a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xGenericListItem ) );
 80031aa:	1d20      	adds	r0, r4, #4
 80031ac:	f000 fb80 	bl	80038b0 <vListRemove>
					--uxCurrentNumberOfTasks;
 80031b0:	f640 1328 	movw	r3, #2344	; 0x928
 80031b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	3a01      	subs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
 80031be:	f640 1324 	movw	r3, #2340	; 0x924
 80031c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	3a01      	subs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
 80031cc:	f000 fc08 	bl	80039e0 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7ff fc93 	bl	8002afc <prvDeleteTCB>
 80031d6:	bd10      	pop	{r4, pc}

080031d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031d8:	b508      	push	{r3, lr}

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80031da:	f640 142c 	movw	r4, #2348	; 0x92c
 80031de:	f2c2 0400 	movt	r4, #8192	; 0x2000
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
 80031e2:	f7ff ffc9 	bl	8003178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
 80031e6:	6823      	ldr	r3, [r4, #0]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d9fa      	bls.n	80031e2 <prvIdleTask+0xa>
			{
				taskYIELD();
 80031ec:	f000 fbe4 	bl	80039b8 <vPortYieldFromISR>
 80031f0:	e7f7      	b.n	80031e2 <prvIdleTask+0xa>
 80031f2:	bf00      	nop

080031f4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031f4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 80031f6:	f640 2314 	movw	r3, #2580	; 0xa14
 80031fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	b133      	cbz	r3, 8003210 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8003202:	f640 13c8 	movw	r3, #2504	; 0x9c8
 8003206:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	bd10      	pop	{r4, pc}
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8003210:	f7fe f80e 	bl	8001230 <get_us_time>
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8003214:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8003218:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003222:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	1a44      	subs	r4, r0, r1
 800322a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800322c:	4421      	add	r1, r4
 800322e:	64d1      	str	r1, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8003230:	6018      	str	r0, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8003232:	f640 1320 	movw	r3, #2336	; 0x920
 8003236:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800323a:	f640 112c 	movw	r1, #2348	; 0x92c
 800323e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003242:	e002      	b.n	800324a <vTaskSwitchContext+0x56>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	3a01      	subs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003250:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003254:	2a00      	cmp	r2, #0
 8003256:	d0f5      	beq.n	8003244 <vTaskSwitchContext+0x50>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8003258:	f640 1320 	movw	r3, #2336	; 0x920
 800325c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f640 122c 	movw	r2, #2348	; 0x92c
 8003266:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800326a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800326e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	6852      	ldr	r2, [r2, #4]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	f103 0108 	add.w	r1, r3, #8
 800327c:	428a      	cmp	r2, r1
 800327e:	bf04      	itt	eq
 8003280:	6852      	ldreq	r2, [r2, #4]
 8003282:	605a      	streq	r2, [r3, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800328c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003290:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003296:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800329a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800329e:	60da      	str	r2, [r3, #12]
 80032a0:	bd10      	pop	{r4, pc}
 80032a2:	bf00      	nop

080032a4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 80032a4:	b538      	push	{r3, r4, r5, lr}
 80032a6:	460d      	mov	r5, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 80032a8:	f640 14cc 	movw	r4, #2508	; 0x9cc
 80032ac:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80032b0:	6821      	ldr	r1, [r4, #0]
 80032b2:	3118      	adds	r1, #24
 80032b4:	f000 fae0 	bl	8003878 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	3004      	adds	r0, #4
 80032bc:	f000 faf8 	bl	80038b0 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 80032c0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80032c4:	d108      	bne.n	80032d8 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80032c6:	6821      	ldr	r1, [r4, #0]
 80032c8:	f640 10d0 	movw	r0, #2512	; 0x9d0
 80032cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80032d0:	3104      	adds	r1, #4
 80032d2:	f000 fac3 	bl	800385c <vListInsertEnd>
 80032d6:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 80032d8:	f640 2320 	movw	r3, #2592	; 0xa20
 80032dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032e0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 80032e2:	4428      	add	r0, r5
 80032e4:	f7ff fc8c 	bl	8002c00 <prvAddCurrentTaskToDelayedList>
 80032e8:	bd38      	pop	{r3, r4, r5, pc}
 80032ea:	bf00      	nop

080032ec <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 80032ec:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80032ee:	68c3      	ldr	r3, [r0, #12]
 80032f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80032f2:	f104 0518 	add.w	r5, r4, #24
 80032f6:	4628      	mov	r0, r5
 80032f8:	f000 fada 	bl	80038b0 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80032fc:	f640 2314 	movw	r3, #2580	; 0xa14
 8003300:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	b9e3      	cbnz	r3, 8003342 <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8003308:	1d25      	adds	r5, r4, #4
 800330a:	4628      	mov	r0, r5
 800330c:	f000 fad0 	bl	80038b0 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8003310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003312:	f640 1220 	movw	r2, #2336	; 0x920
 8003316:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	4293      	cmp	r3, r2
 800331e:	bf82      	ittt	hi
 8003320:	f640 1220 	movwhi	r2, #2336	; 0x920
 8003324:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 8003328:	6013      	strhi	r3, [r2, #0]
 800332a:	f640 102c 	movw	r0, #2348	; 0x92c
 800332e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003332:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003336:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800333a:	4629      	mov	r1, r5
 800333c:	f000 fa8e 	bl	800385c <vListInsertEnd>
 8003340:	e006      	b.n	8003350 <xTaskRemoveFromEventList+0x64>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003342:	f640 10ac 	movw	r0, #2476	; 0x9ac
 8003346:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800334a:	4629      	mov	r1, r5
 800334c:	f000 fa86 	bl	800385c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003350:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003352:	f640 13cc 	movw	r3, #2508	; 0x9cc
 8003356:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800335e:	4298      	cmp	r0, r3
 8003360:	bf34      	ite	cc
 8003362:	2000      	movcc	r0, #0
 8003364:	2001      	movcs	r0, #1
 8003366:	bd38      	pop	{r3, r4, r5, pc}

08003368 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003368:	f640 231c 	movw	r3, #2588	; 0xa1c
 800336c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003374:	f640 2320 	movw	r3, #2592	; 0xa20
 8003378:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6043      	str	r3, [r0, #4]
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop

08003384 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8003384:	b538      	push	{r3, r4, r5, lr}
 8003386:	4604      	mov	r4, r0
 8003388:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 800338a:	f000 fb1d 	bl	80039c8 <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 800338e:	682a      	ldr	r2, [r5, #0]
 8003390:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
			{
				xReturn = pdFALSE;
 8003394:	bf08      	it	eq
 8003396:	2400      	moveq	r4, #0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8003398:	d029      	beq.n	80033ee <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 800339a:	6821      	ldr	r1, [r4, #0]
 800339c:	f640 231c 	movw	r3, #2588	; 0xa1c
 80033a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4299      	cmp	r1, r3
 80033a8:	d009      	beq.n	80033be <xTaskCheckForTimeOut+0x3a>
 80033aa:	6861      	ldr	r1, [r4, #4]
 80033ac:	f640 2320 	movw	r3, #2592	; 0xa20
 80033b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4299      	cmp	r1, r3
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 80033b8:	bf98      	it	ls
 80033ba:	2401      	movls	r4, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 80033bc:	d917      	bls.n	80033ee <xTaskCheckForTimeOut+0x6a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80033be:	f640 2320 	movw	r3, #2592	; 0xa20
 80033c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	6863      	ldr	r3, [r4, #4]
 80033ca:	1ac9      	subs	r1, r1, r3
 80033cc:	428a      	cmp	r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
 80033ce:	bf98      	it	ls
 80033d0:	2401      	movls	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 80033d2:	d90c      	bls.n	80033ee <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 80033d4:	f640 2120 	movw	r1, #2592	; 0xa20
 80033d8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80033dc:	6809      	ldr	r1, [r1, #0]
 80033de:	1a5b      	subs	r3, r3, r1
 80033e0:	441a      	add	r2, r3
 80033e2:	602a      	str	r2, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff ffbf 	bl	8003368 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 80033ea:	2400      	movs	r4, #0
 80033ec:	e7ff      	b.n	80033ee <xTaskCheckForTimeOut+0x6a>
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 80033ee:	f000 faf7 	bl	80039e0 <vPortExitCritical>

	return xReturn;
}
 80033f2:	4620      	mov	r0, r4
 80033f4:	bd38      	pop	{r3, r4, r5, pc}
 80033f6:	bf00      	nop

080033f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
 80033f8:	f640 13c8 	movw	r3, #2504	; 0x9c8
 80033fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003408:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800340c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003410:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8003412:	4770      	bx	lr

08003414 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8003414:	b538      	push	{r3, r4, r5, lr}
 8003416:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003418:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800341a:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800341e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	429a      	cmp	r2, r3
 8003428:	d23d      	bcs.n	80034a6 <vTaskPriorityInherit+0x92>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 800342a:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800342e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f1c3 0305 	rsb	r3, r3, #5
 800343a:	6183      	str	r3, [r0, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800343c:	6941      	ldr	r1, [r0, #20]
 800343e:	f640 132c 	movw	r3, #2348	; 0x92c
 8003442:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003446:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800344a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800344e:	4299      	cmp	r1, r3
 8003450:	d122      	bne.n	8003498 <vTaskPriorityInherit+0x84>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8003452:	1d05      	adds	r5, r0, #4
 8003454:	4628      	mov	r0, r5
 8003456:	f000 fa2b 	bl	80038b0 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800345a:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800345e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8003468:	f640 1220 	movw	r2, #2336	; 0x920
 800346c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003470:	6812      	ldr	r2, [r2, #0]
 8003472:	4293      	cmp	r3, r2
 8003474:	bf82      	ittt	hi
 8003476:	f640 1220 	movwhi	r2, #2336	; 0x920
 800347a:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 800347e:	6013      	strhi	r3, [r2, #0]
 8003480:	f640 102c 	movw	r0, #2348	; 0x92c
 8003484:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003488:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800348c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003490:	4629      	mov	r1, r5
 8003492:	f000 f9e3 	bl	800385c <vListInsertEnd>
 8003496:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003498:	f640 13cc 	movw	r3, #2508	; 0x9cc
 800349c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	62c3      	str	r3, [r0, #44]	; 0x2c
 80034a6:	bd38      	pop	{r3, r4, r5, pc}

080034a8 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 80034a8:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 80034aa:	4604      	mov	r4, r0
 80034ac:	b318      	cbz	r0, 80034f6 <vTaskPriorityDisinherit+0x4e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80034ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80034b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d01f      	beq.n	80034f6 <vTaskPriorityDisinherit+0x4e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 80034b6:	1d05      	adds	r5, r0, #4
 80034b8:	4628      	mov	r0, r5
 80034ba:	f000 f9f9 	bl	80038b0 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 80034be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034c0:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 80034c2:	f1c3 0205 	rsb	r2, r3, #5
 80034c6:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
 80034c8:	f640 1220 	movw	r2, #2336	; 0x920
 80034cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	bf82      	ittt	hi
 80034d6:	f640 1220 	movwhi	r2, #2336	; 0x920
 80034da:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 80034de:	6013      	strhi	r3, [r2, #0]
 80034e0:	f640 102c 	movw	r0, #2348	; 0x92c
 80034e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80034e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80034ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80034f0:	4629      	mov	r1, r5
 80034f2:	f000 f9b3 	bl	800385c <vListInsertEnd>
 80034f6:	bd38      	pop	{r3, r4, r5, pc}

080034f8 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 80034f8:	b510      	push	{r4, lr}
 80034fa:	4604      	mov	r4, r0
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 80034fc:	f000 fa64 	bl	80039c8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8003500:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003502:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003504:	429a      	cmp	r2, r3
 8003506:	bf14      	ite	ne
 8003508:	2400      	movne	r4, #0
 800350a:	2401      	moveq	r4, #1
	taskEXIT_CRITICAL();
 800350c:	f000 fa68 	bl	80039e0 <vPortExitCritical>

	return xReturn;
}
 8003510:	4620      	mov	r0, r4
 8003512:	bd10      	pop	{r4, pc}

08003514 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8003514:	b510      	push	{r4, lr}
 8003516:	4604      	mov	r4, r0
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8003518:	f000 fa56 	bl	80039c8 <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 800351c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800351e:	f1d4 0401 	rsbs	r4, r4, #1
 8003522:	bf38      	it	cc
 8003524:	2400      	movcc	r4, #0
	taskEXIT_CRITICAL();
 8003526:	f000 fa5b 	bl	80039e0 <vPortExitCritical>

	return xReturn;
}
 800352a:	4620      	mov	r0, r4
 800352c:	bd10      	pop	{r4, pc}
 800352e:	bf00      	nop

08003530 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8003530:	b510      	push	{r4, lr}
 8003532:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8003534:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003536:	b93b      	cbnz	r3, 8003548 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	bb1b      	cbnz	r3, 8003584 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800353c:	6840      	ldr	r0, [r0, #4]
 800353e:	f7ff ffb3 	bl	80034a8 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	6063      	str	r3, [r4, #4]
 8003546:	e01d      	b.n	8003584 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003548:	b96a      	cbnz	r2, 8003566 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 800354a:	6880      	ldr	r0, [r0, #8]
 800354c:	461a      	mov	r2, r3
 800354e:	f7fc fe7f 	bl	8000250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003552:	68a2      	ldr	r2, [r4, #8]
 8003554:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003556:	4413      	add	r3, r2
 8003558:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 800355a:	6862      	ldr	r2, [r4, #4]
 800355c:	4293      	cmp	r3, r2
 800355e:	d311      	bcc.n	8003584 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	60a3      	str	r3, [r4, #8]
 8003564:	e00e      	b.n	8003584 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8003566:	68c0      	ldr	r0, [r0, #12]
 8003568:	461a      	mov	r2, r3
 800356a:	f7fc fe71 	bl	8000250 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 800356e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003570:	4252      	negs	r2, r2
 8003572:	68e3      	ldr	r3, [r4, #12]
 8003574:	4413      	add	r3, r2
 8003576:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8003578:	6821      	ldr	r1, [r4, #0]
 800357a:	428b      	cmp	r3, r1
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800357c:	bf3e      	ittt	cc
 800357e:	6863      	ldrcc	r3, [r4, #4]
 8003580:	18d2      	addcc	r2, r2, r3
 8003582:	60e2      	strcc	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8003584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003586:	3301      	adds	r3, #1
 8003588:	63a3      	str	r3, [r4, #56]	; 0x38
 800358a:	bd10      	pop	{r4, pc}

0800358c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8003590:	6805      	ldr	r5, [r0, #0]
 8003592:	b15d      	cbz	r5, 80035ac <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8003594:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003596:	68c4      	ldr	r4, [r0, #12]
 8003598:	4414      	add	r4, r2
 800359a:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 800359c:	6840      	ldr	r0, [r0, #4]
 800359e:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 80035a0:	bf28      	it	cs
 80035a2:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 80035a4:	4608      	mov	r0, r1
 80035a6:	68d9      	ldr	r1, [r3, #12]
 80035a8:	f7fc fe52 	bl	8000250 <memcpy>
 80035ac:	bd38      	pop	{r3, r4, r5, pc}
 80035ae:	bf00      	nop

080035b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 80035b0:	b538      	push	{r3, r4, r5, lr}
 80035b2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035b4:	f000 fa08 	bl	80039c8 <vPortEnterCritical>
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b8:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80035bc:	e00a      	b.n	80035d4 <prvUnlockQueue+0x24>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035c0:	b15b      	cbz	r3, 80035da <prvUnlockQueue+0x2a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035c2:	4628      	mov	r0, r5
 80035c4:	f7ff fe92 	bl	80032ec <xTaskRemoveFromEventList>
 80035c8:	b108      	cbz	r0, 80035ce <prvUnlockQueue+0x1e>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 80035ca:	f7ff ff15 	bl	80033f8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 80035ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80035d0:	3b01      	subs	r3, #1
 80035d2:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 80035d4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	dcf1      	bgt.n	80035be <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035de:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80035e0:	f000 f9fe 	bl	80039e0 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035e4:	f000 f9f0 	bl	80039c8 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035e8:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80035ec:	e00a      	b.n	8003604 <prvUnlockQueue+0x54>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035ee:	6923      	ldr	r3, [r4, #16]
 80035f0:	b15b      	cbz	r3, 800360a <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035f2:	4628      	mov	r0, r5
 80035f4:	f7ff fe7a 	bl	80032ec <xTaskRemoveFromEventList>
 80035f8:	b108      	cbz	r0, 80035fe <prvUnlockQueue+0x4e>
				{
					vTaskMissedYield();
 80035fa:	f7ff fefd 	bl	80033f8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 80035fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003600:	3b01      	subs	r3, #1
 8003602:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8003604:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003606:	2b00      	cmp	r3, #0
 8003608:	dcf1      	bgt.n	80035ee <prvUnlockQueue+0x3e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800360e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003610:	f000 f9e6 	bl	80039e0 <vPortExitCritical>
 8003614:	bd38      	pop	{r3, r4, r5, pc}
 8003616:	bf00      	nop

08003618 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8003618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	b085      	sub	sp, #20
 800361e:	4604      	mov	r4, r0
 8003620:	468b      	mov	fp, r1
 8003622:	9201      	str	r2, [sp, #4]
 8003624:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003626:	2600      	movs	r6, #0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
 8003628:	f04f 0901 	mov.w	r9, #1

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800362c:	4637      	mov	r7, r6
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800362e:	f100 0810 	add.w	r8, r0, #16
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003632:	f000 f9c9 	bl	80039c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8003636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003638:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800363a:	42ab      	cmp	r3, r5
 800363c:	d212      	bcs.n	8003664 <xQueueGenericSend+0x4c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800363e:	4620      	mov	r0, r4
 8003640:	4659      	mov	r1, fp
 8003642:	4652      	mov	r2, sl
 8003644:	f7ff ff74 	bl	8003530 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800364a:	b13b      	cbz	r3, 800365c <xQueueGenericSend+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800364c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003650:	f7ff fe4c 	bl	80032ec <xTaskRemoveFromEventList>
 8003654:	2801      	cmp	r0, #1
 8003656:	d101      	bne.n	800365c <xQueueGenericSend+0x44>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8003658:	f000 f9ae 	bl	80039b8 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 800365c:	f000 f9c0 	bl	80039e0 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8003660:	2001      	movs	r0, #1
 8003662:	e03f      	b.n	80036e4 <xQueueGenericSend+0xcc>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8003664:	9b01      	ldr	r3, [sp, #4]
 8003666:	b91b      	cbnz	r3, 8003670 <xQueueGenericSend+0x58>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003668:	f000 f9ba 	bl	80039e0 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800366c:	2000      	movs	r0, #0
 800366e:	e039      	b.n	80036e4 <xQueueGenericSend+0xcc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003670:	b91e      	cbnz	r6, 800367a <xQueueGenericSend+0x62>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003672:	a802      	add	r0, sp, #8
 8003674:	f7ff fe78 	bl	8003368 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003678:	464e      	mov	r6, r9
				}
			}
		}
		taskEXIT_CRITICAL();
 800367a:	f000 f9b1 	bl	80039e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800367e:	f7ff fc19 	bl	8002eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003682:	f000 f9a1 	bl	80039c8 <vPortEnterCritical>
 8003686:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800368c:	bf08      	it	eq
 800368e:	6467      	streq	r7, [r4, #68]	; 0x44
 8003690:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003696:	bf08      	it	eq
 8003698:	64a7      	streq	r7, [r4, #72]	; 0x48
 800369a:	f000 f9a1 	bl	80039e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800369e:	a802      	add	r0, sp, #8
 80036a0:	a901      	add	r1, sp, #4
 80036a2:	f7ff fe6f 	bl	8003384 <xTaskCheckForTimeOut>
 80036a6:	b9b8      	cbnz	r0, 80036d8 <xQueueGenericSend+0xc0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80036a8:	4620      	mov	r0, r4
 80036aa:	f7ff ff25 	bl	80034f8 <prvIsQueueFull>
 80036ae:	b168      	cbz	r0, 80036cc <xQueueGenericSend+0xb4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80036b0:	4640      	mov	r0, r8
 80036b2:	9901      	ldr	r1, [sp, #4]
 80036b4:	f7ff fdf6 	bl	80032a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80036b8:	4620      	mov	r0, r4
 80036ba:	f7ff ff79 	bl	80035b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80036be:	f7ff fca3 	bl	8003008 <xTaskResumeAll>
 80036c2:	2800      	cmp	r0, #0
 80036c4:	d1b5      	bne.n	8003632 <xQueueGenericSend+0x1a>
				{
					portYIELD_WITHIN_API();
 80036c6:	f000 f977 	bl	80039b8 <vPortYieldFromISR>
 80036ca:	e7b2      	b.n	8003632 <xQueueGenericSend+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff ff6f 	bl	80035b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036d2:	f7ff fc99 	bl	8003008 <xTaskResumeAll>
 80036d6:	e7ac      	b.n	8003632 <xQueueGenericSend+0x1a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80036d8:	4620      	mov	r0, r4
 80036da:	f7ff ff69 	bl	80035b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036de:	f7ff fc93 	bl	8003008 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80036e2:	2000      	movs	r0, #0
		}
	}
}
 80036e4:	b005      	add	sp, #20
 80036e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ea:	bf00      	nop

080036ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
 80036ec:	b538      	push	{r3, r4, r5, lr}
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 80036ee:	204c      	movs	r0, #76	; 0x4c
 80036f0:	f000 fde6 	bl	80042c0 <malloc>
		if( pxNewQueue != NULL )
 80036f4:	4604      	mov	r4, r0
 80036f6:	b1c8      	cbz	r0, 800372c <xQueueCreateMutex+0x40>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80036f8:	2500      	movs	r5, #0
 80036fa:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80036fc:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 80036fe:	6085      	str	r5, [r0, #8]
			pxNewQueue->pcReadFrom = NULL;
 8003700:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 8003702:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 8003704:	2301      	movs	r3, #1
 8003706:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 8003708:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800370e:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8003710:	6483      	str	r3, [r0, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 8003712:	3010      	adds	r0, #16
 8003714:	f000 f892 	bl	800383c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8003718:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800371c:	f000 f88e 	bl	800383c <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	462a      	mov	r2, r5
 8003726:	462b      	mov	r3, r5
 8003728:	f7ff ff76 	bl	8003618 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
 800372c:	4620      	mov	r0, r4
 800372e:	bd38      	pop	{r3, r4, r5, pc}

08003730 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8003730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	4604      	mov	r4, r0
 8003738:	468a      	mov	sl, r1
 800373a:	9201      	str	r2, [sp, #4]
 800373c:	4699      	mov	r9, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 800373e:	2500      	movs	r5, #0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
 8003740:	f04f 0801 	mov.w	r8, #1

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8003744:	462f      	mov	r7, r5
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003746:	f100 0624 	add.w	r6, r0, #36	; 0x24
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800374a:	f000 f93d 	bl	80039c8 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 800374e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003750:	b342      	cbz	r2, 80037a4 <xQueueGenericReceive+0x74>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 8003752:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003754:	4620      	mov	r0, r4
 8003756:	4651      	mov	r1, sl
 8003758:	f7ff ff18 	bl	800358c <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800375c:	f1b9 0f00 	cmp.w	r9, #0
 8003760:	d112      	bne.n	8003788 <xQueueGenericReceive+0x58>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 8003762:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003764:	3b01      	subs	r3, #1
 8003766:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	b913      	cbnz	r3, 8003772 <xQueueGenericReceive+0x42>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 800376c:	f7ff fe4c 	bl	8003408 <xTaskGetCurrentTaskHandle>
 8003770:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003772:	6923      	ldr	r3, [r4, #16]
 8003774:	b193      	cbz	r3, 800379c <xQueueGenericReceive+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8003776:	f104 0010 	add.w	r0, r4, #16
 800377a:	f7ff fdb7 	bl	80032ec <xTaskRemoveFromEventList>
 800377e:	2801      	cmp	r0, #1
 8003780:	d10c      	bne.n	800379c <xQueueGenericReceive+0x6c>
						{
							portYIELD_WITHIN_API();
 8003782:	f000 f919 	bl	80039b8 <vPortYieldFromISR>
 8003786:	e009      	b.n	800379c <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 8003788:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800378c:	b133      	cbz	r3, 800379c <xQueueGenericReceive+0x6c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800378e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003792:	f7ff fdab 	bl	80032ec <xTaskRemoveFromEventList>
 8003796:	b108      	cbz	r0, 800379c <xQueueGenericReceive+0x6c>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 8003798:	f000 f90e 	bl	80039b8 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 800379c:	f000 f920 	bl	80039e0 <vPortExitCritical>
				return pdPASS;
 80037a0:	2001      	movs	r0, #1
 80037a2:	e048      	b.n	8003836 <xQueueGenericReceive+0x106>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80037a4:	9b01      	ldr	r3, [sp, #4]
 80037a6:	b91b      	cbnz	r3, 80037b0 <xQueueGenericReceive+0x80>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037a8:	f000 f91a 	bl	80039e0 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e042      	b.n	8003836 <xQueueGenericReceive+0x106>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037b0:	b91d      	cbnz	r5, 80037ba <xQueueGenericReceive+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80037b2:	a802      	add	r0, sp, #8
 80037b4:	f7ff fdd8 	bl	8003368 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037b8:	4645      	mov	r5, r8
				}
			}
		}
		taskEXIT_CRITICAL();
 80037ba:	f000 f911 	bl	80039e0 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037be:	f7ff fb79 	bl	8002eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037c2:	f000 f901 	bl	80039c8 <vPortEnterCritical>
 80037c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	bf08      	it	eq
 80037ce:	6467      	streq	r7, [r4, #68]	; 0x44
 80037d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80037d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d6:	bf08      	it	eq
 80037d8:	64a7      	streq	r7, [r4, #72]	; 0x48
 80037da:	f000 f901 	bl	80039e0 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037de:	a802      	add	r0, sp, #8
 80037e0:	a901      	add	r1, sp, #4
 80037e2:	f7ff fdcf 	bl	8003384 <xTaskCheckForTimeOut>
 80037e6:	bb00      	cbnz	r0, 800382a <xQueueGenericReceive+0xfa>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff fe93 	bl	8003514 <prvIsQueueEmpty>
 80037ee:	b1b0      	cbz	r0, 800381e <xQueueGenericReceive+0xee>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f0:	6823      	ldr	r3, [r4, #0]
 80037f2:	b933      	cbnz	r3, 8003802 <xQueueGenericReceive+0xd2>
					{
						portENTER_CRITICAL();
 80037f4:	f000 f8e8 	bl	80039c8 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80037f8:	6860      	ldr	r0, [r4, #4]
 80037fa:	f7ff fe0b 	bl	8003414 <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 80037fe:	f000 f8ef 	bl	80039e0 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003802:	4630      	mov	r0, r6
 8003804:	9901      	ldr	r1, [sp, #4]
 8003806:	f7ff fd4d 	bl	80032a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800380a:	4620      	mov	r0, r4
 800380c:	f7ff fed0 	bl	80035b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003810:	f7ff fbfa 	bl	8003008 <xTaskResumeAll>
 8003814:	2800      	cmp	r0, #0
 8003816:	d198      	bne.n	800374a <xQueueGenericReceive+0x1a>
				{
					portYIELD_WITHIN_API();
 8003818:	f000 f8ce 	bl	80039b8 <vPortYieldFromISR>
 800381c:	e795      	b.n	800374a <xQueueGenericReceive+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800381e:	4620      	mov	r0, r4
 8003820:	f7ff fec6 	bl	80035b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003824:	f7ff fbf0 	bl	8003008 <xTaskResumeAll>
 8003828:	e78f      	b.n	800374a <xQueueGenericReceive+0x1a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fec0 	bl	80035b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003830:	f7ff fbea 	bl	8003008 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8003834:	2000      	movs	r0, #0
		}
	}
}
 8003836:	b004      	add	sp, #16
 8003838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800383c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 800383c:	f100 0308 	add.w	r3, r0, #8
 8003840:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003846:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8003848:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 800384a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	6003      	str	r3, [r0, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop

08003854 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003854:	2300      	movs	r3, #0
 8003856:	6103      	str	r3, [r0, #16]
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop

0800385c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 800385c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 8003862:	6842      	ldr	r2, [r0, #4]
 8003864:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 800386a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 800386c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800386e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003870:	6803      	ldr	r3, [r0, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	6003      	str	r3, [r0, #0]
 8003876:	4770      	bx	lr

08003878 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8003878:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 800387a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800387c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003880:	bf0c      	ite	eq
 8003882:	6903      	ldreq	r3, [r0, #16]
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003884:	f100 0308 	addne.w	r3, r0, #8
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003888:	d101      	bne.n	800388e <vListInsert+0x16>
 800388a:	e004      	b.n	8003896 <vListInsert+0x1e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	42a2      	cmp	r2, r4
 8003894:	d9fa      	bls.n	800388c <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800389a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800389c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 800389e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038a0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80038a2:	6803      	ldr	r3, [r0, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	6003      	str	r3, [r0, #0]
}
 80038a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038b0:	6843      	ldr	r3, [r0, #4]
 80038b2:	6882      	ldr	r2, [r0, #8]
 80038b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038b6:	6883      	ldr	r3, [r0, #8]
 80038b8:	6842      	ldr	r2, [r0, #4]
 80038ba:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80038bc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038c2:	bf04      	itt	eq
 80038c4:	6882      	ldreq	r2, [r0, #8]
 80038c6:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80038c8:	2200      	movs	r2, #0
 80038ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	3a01      	subs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	4770      	bx	lr

080038d4 <vPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void vPortStartFirstTask( void )
{
	__asm volatile(
 80038d4:	4803      	ldr	r0, [pc, #12]	; (80038e4 <vPortStartFirstTask+0x10>)
 80038d6:	6800      	ldr	r0, [r0, #0]
 80038d8:	6800      	ldr	r0, [r0, #0]
 80038da:	f380 8808 	msr	MSP, r0
 80038de:	b662      	cpsie	i
 80038e0:	df00      	svc	0
 80038e2:	bf00      	nop
 80038e4:	e000ed08 	.word	0xe000ed08

080038e8 <prvSetupTimerInterrupt>:
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038e8:	f240 0304 	movw	r3, #4
 80038ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80038f6:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80038fa:	fba3 1202 	umull	r1, r2, r3, r2
 80038fe:	0992      	lsrs	r2, r2, #6
 8003900:	3a01      	subs	r2, #1
 8003902:	f24e 0314 	movw	r3, #57364	; 0xe014
 8003906:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800390a:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800390c:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003910:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003914:	2207      	movs	r2, #7
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop

0800391c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800391c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800392c <vPortEnableVFP+0x10>
 8003920:	6801      	ldr	r1, [r0, #0]
 8003922:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003926:	6001      	str	r1, [r0, #0]
 8003928:	4770      	bx	lr
 800392a:	0000      	.short	0x0000
 800392c:	e000ed88 	.word	0xe000ed88

08003930 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 8003938:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
 800393c:	2300      	movs	r3, #0
 800393e:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 8003942:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003946:	f06f 0302 	mvn.w	r3, #2
 800394a:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800394e:	3844      	subs	r0, #68	; 0x44
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop

08003954 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <pxCurrentTCBConst2>)
 8003956:	6819      	ldr	r1, [r3, #0]
 8003958:	6808      	ldr	r0, [r1, #0]
 800395a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395e:	f380 8809 	msr	PSP, r0
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	4770      	bx	lr

0800396c <pxCurrentTCBConst2>:
 800396c:	200009cc 	.word	0x200009cc

08003970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
 8003970:	b510      	push	{r4, lr}
	/* Make PendSV and SysTick the lowest priority interrupts. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003972:	f64e 5320 	movw	r3, #60704	; 0xed20
 8003976:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
 8003980:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8003988:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 800398a:	f7ff ffad 	bl	80038e8 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800398e:	f240 0360 	movw	r3, #96	; 0x60
 8003992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003996:	2400      	movs	r4, #0
 8003998:	601c      	str	r4, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800399a:	f7ff ffbf 	bl	800391c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800399e:	f64e 7334 	movw	r3, #61236	; 0xef34
 80039a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80039ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80039ae:	f7ff ff91 	bl	80038d4 <vPortStartFirstTask>

	/* Should not get here! */
	return 0;
}
 80039b2:	4620      	mov	r0, r4
 80039b4:	bd10      	pop	{r4, pc}
 80039b6:	bf00      	nop

080039b8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80039b8:	f64e 5304 	movw	r3, #60676	; 0xed04
 80039bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80039c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	4770      	bx	lr

080039c8 <vPortEnterCritical>:
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 80039c8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80039cc:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80039d0:	f240 0360 	movw	r3, #96	; 0x60
 80039d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	3201      	adds	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	4770      	bx	lr

080039e0 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 80039e0:	f240 0360 	movw	r3, #96	; 0x60
 80039e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	3a01      	subs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80039ee:	b91a      	cbnz	r2, 80039f8 <vPortExitCritical+0x18>
	{
		portENABLE_INTERRUPTS();
 80039f0:	f04f 0000 	mov.w	r0, #0
 80039f4:	f380 8811 	msr	BASEPRI, r0
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop

080039fc <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039fc:	f3ef 8009 	mrs	r0, PSP
 8003a00:	4b11      	ldr	r3, [pc, #68]	; (8003a48 <pxCurrentTCBConst>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	f01e 0f10 	tst.w	lr, #16
 8003a08:	bf08      	it	eq
 8003a0a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a0e:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a12:	6010      	str	r0, [r2, #0]
 8003a14:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003a18:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003a1c:	f380 8811 	msr	BASEPRI, r0
 8003a20:	f7ff fbe8 	bl	80031f4 <vTaskSwitchContext>
 8003a24:	f04f 0000 	mov.w	r0, #0
 8003a28:	f380 8811 	msr	BASEPRI, r0
 8003a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	6808      	ldr	r0, [r1, #0]
 8003a34:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	f01e 0f10 	tst.w	lr, #16
 8003a3c:	bf08      	it	eq
 8003a3e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a42:	f380 8809 	msr	PSP, r0
 8003a46:	4770      	bx	lr

08003a48 <pxCurrentTCBConst>:
 8003a48:	200009cc 	.word	0x200009cc

08003a4c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a4c:	b508      	push	{r3, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003a4e:	f64e 5304 	movw	r3, #60676	; 0xed04
 8003a52:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a5a:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a5c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003a60:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 8003a64:	f7ff fa3a 	bl	8002edc <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8003a68:	f04f 0000 	mov.w	r0, #0
 8003a6c:	f380 8811 	msr	BASEPRI, r0
 8003a70:	bd08      	pop	{r3, pc}
 8003a72:	bf00      	nop

08003a74 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003a74:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003a76:	78c3      	ldrb	r3, [r0, #3]
 8003a78:	b34b      	cbz	r3, 8003ace <NVIC_Init+0x5a>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003a7a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003a7e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	43db      	mvns	r3, r3
 8003a86:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8003a8a:	f1c3 0204 	rsb	r2, r3, #4
 8003a8e:	b2d2      	uxtb	r2, r2
    tmpsub = tmpsub >> tmppriority;
 8003a90:	210f      	movs	r1, #15
 8003a92:	fa41 f303 	asr.w	r3, r1, r3

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003a96:	7841      	ldrb	r1, [r0, #1]
 8003a98:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9c:	b2d2      	uxtb	r2, r2
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003a9e:	7884      	ldrb	r4, [r0, #2]
 8003aa0:	ea03 0104 	and.w	r1, r3, r4
 8003aa4:	4311      	orrs	r1, r2
        
    tmppriority = tmppriority << 0x04;
 8003aa6:	0109      	lsls	r1, r1, #4
 8003aa8:	b2c9      	uxtb	r1, r1
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003aaa:	7802      	ldrb	r2, [r0, #0]
 8003aac:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003ab0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003ab4:	441a      	add	r2, r3
 8003ab6:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003aba:	7802      	ldrb	r2, [r0, #0]
 8003abc:	0951      	lsrs	r1, r2, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003abe:	f002 021f 	and.w	r2, r2, #31
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	fa00 f202 	lsl.w	r2, r0, r2
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003ac8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8003acc:	e00c      	b.n	8003ae8 <NVIC_Init+0x74>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003ace:	7803      	ldrb	r3, [r0, #0]
 8003ad0:	095a      	lsrs	r2, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003ad2:	f003 031f 	and.w	r3, r3, #31
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	4099      	lsls	r1, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003ada:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003ade:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003ae2:	3220      	adds	r2, #32
 8003ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop

08003af0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003af0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003af2:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003af4:	2501      	movs	r5, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003af6:	2603      	movs	r6, #3
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003af8:	e03e      	b.n	8003b78 <GPIO_Init+0x88>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003afa:	fa05 f203 	lsl.w	r2, r5, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8003afe:	680c      	ldr	r4, [r1, #0]
 8003b00:	4014      	ands	r4, r2

    if (currentpin == pos)
 8003b02:	4294      	cmp	r4, r2
 8003b04:	d137      	bne.n	8003b76 <GPIO_Init+0x86>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8003b06:	6807      	ldr	r7, [r0, #0]
 8003b08:	005a      	lsls	r2, r3, #1
 8003b0a:	fa06 f402 	lsl.w	r4, r6, r2
 8003b0e:	43e4      	mvns	r4, r4
 8003b10:	4027      	ands	r7, r4
 8003b12:	6007      	str	r7, [r0, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003b14:	f8d0 c000 	ldr.w	ip, [r0]
 8003b18:	790f      	ldrb	r7, [r1, #4]
 8003b1a:	4097      	lsls	r7, r2
 8003b1c:	ea4c 0707 	orr.w	r7, ip, r7
 8003b20:	6007      	str	r7, [r0, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8003b22:	790f      	ldrb	r7, [r1, #4]
 8003b24:	3f01      	subs	r7, #1
 8003b26:	b2ff      	uxtb	r7, r7
 8003b28:	2f01      	cmp	r7, #1
 8003b2a:	d816      	bhi.n	8003b5a <GPIO_Init+0x6a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8003b2c:	6887      	ldr	r7, [r0, #8]
 8003b2e:	403c      	ands	r4, r7
 8003b30:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003b32:	6887      	ldr	r7, [r0, #8]
 8003b34:	794c      	ldrb	r4, [r1, #5]
 8003b36:	4094      	lsls	r4, r2
 8003b38:	433c      	orrs	r4, r7
 8003b3a:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003b3c:	6847      	ldr	r7, [r0, #4]
 8003b3e:	b29c      	uxth	r4, r3
 8003b40:	fa05 fc04 	lsl.w	ip, r5, r4
 8003b44:	ea27 070c 	bic.w	r7, r7, ip
 8003b48:	6047      	str	r7, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003b4a:	6847      	ldr	r7, [r0, #4]
 8003b4c:	f891 c006 	ldrb.w	ip, [r1, #6]
 8003b50:	fa0c f404 	lsl.w	r4, ip, r4
 8003b54:	b2a4      	uxth	r4, r4
 8003b56:	433c      	orrs	r4, r7
 8003b58:	6044      	str	r4, [r0, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003b5a:	68c7      	ldr	r7, [r0, #12]
 8003b5c:	b29c      	uxth	r4, r3
 8003b5e:	0064      	lsls	r4, r4, #1
 8003b60:	fa06 f404 	lsl.w	r4, r6, r4
 8003b64:	ea27 0404 	bic.w	r4, r7, r4
 8003b68:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003b6a:	68c4      	ldr	r4, [r0, #12]
 8003b6c:	79cf      	ldrb	r7, [r1, #7]
 8003b6e:	fa07 f202 	lsl.w	r2, r7, r2
 8003b72:	4322      	orrs	r2, r4
 8003b74:	60c2      	str	r2, [r0, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003b76:	3301      	adds	r3, #1
 8003b78:	2b0f      	cmp	r3, #15
 8003b7a:	d9be      	bls.n	8003afa <GPIO_Init+0xa>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8003b7c:	bcf0      	pop	{r4, r5, r6, r7}
 8003b7e:	4770      	bx	lr

08003b80 <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8003b80:	8301      	strh	r1, [r0, #24]
 8003b82:	4770      	bx	lr

08003b84 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8003b84:	8341      	strh	r1, [r0, #26]
 8003b86:	4770      	bx	lr

08003b88 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003b88:	b430      	push	{r4, r5}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003b8a:	f001 0307 	and.w	r3, r1, #7
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	409a      	lsls	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003b92:	08c9      	lsrs	r1, r1, #3
 8003b94:	3108      	adds	r1, #8
 8003b96:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8003b9a:	250f      	movs	r5, #15
 8003b9c:	fa05 f303 	lsl.w	r3, r5, r3
 8003ba0:	ea24 0303 	bic.w	r3, r4, r3
 8003ba4:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8003ba8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8003bac:	431a      	orrs	r2, r3
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003bae:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
}
 8003bb2:	bc30      	pop	{r4, r5}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <PWR_BackupAccessCmd>:
void PWR_BackupAccessCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8003bb8:	2320      	movs	r3, #32
 8003bba:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8003bbe:	6018      	str	r0, [r3, #0]
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <RCC_LSICmd>:
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8003bc4:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 8003bc8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003bcc:	6018      	str	r0, [r3, #0]
 8003bce:	4770      	bx	lr

08003bd0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003bd0:	b410      	push	{r4}
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003bd2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003bd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d009      	beq.n	8003bf8 <RCC_GetClocksFreq+0x28>
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d00d      	beq.n	8003c04 <RCC_GetClocksFreq+0x34>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d136      	bne.n	8003c5a <RCC_GetClocksFreq+0x8a>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003bec:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003bf0:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003bf4:	6003      	str	r3, [r0, #0]
      break;
 8003bf6:	e035      	b.n	8003c64 <RCC_GetClocksFreq+0x94>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003bf8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8003bfc:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003c00:	6003      	str	r3, [r0, #0]
      break;
 8003c02:	e02f      	b.n	8003c64 <RCC_GetClocksFreq+0x94>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003c04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c0c:	685a      	ldr	r2, [r3, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      
      if (pllsource != 0)
 8003c14:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003c18:	bf19      	ittee	ne
 8003c1a:	f44f 5190 	movne.w	r1, #4608	; 0x1200
 8003c1e:	f2c0 017a 	movtne	r1, #122	; 0x7a
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003c22:	f44f 5110 	moveq.w	r1, #9216	; 0x2400
 8003c26:	f2c0 01f4 	movteq	r1, #244	; 0xf4
 8003c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c2e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c36:	6851      	ldr	r1, [r2, #4]
 8003c38:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003c3c:	fb01 f103 	mul.w	r1, r1, r3
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003c40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003c44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	f3c2 4201 	ubfx	r2, r2, #16, #2
 8003c4e:	3201      	adds	r2, #1
 8003c50:	0052      	lsls	r2, r2, #1
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8003c52:	fbb1 f3f2 	udiv	r3, r1, r2
 8003c56:	6003      	str	r3, [r0, #0]
      break;
 8003c58:	e004      	b.n	8003c64 <RCC_GetClocksFreq+0x94>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003c5a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003c5e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003c62:	6003      	str	r3, [r0, #0]
      break;
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8003c64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003c68:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003c6c:	6891      	ldr	r1, [r2, #8]
  tmp = tmp >> 4;
 8003c6e:	f3c1 1103 	ubfx	r1, r1, #4, #4
  presc = APBAHBPrescTable[tmp];
 8003c72:	f240 0364 	movw	r3, #100	; 0x64
 8003c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003c7a:	5c59      	ldrb	r1, [r3, r1]
 8003c7c:	b2c9      	uxtb	r1, r1
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003c7e:	6804      	ldr	r4, [r0, #0]
 8003c80:	fa24 f101 	lsr.w	r1, r4, r1
 8003c84:	6041      	str	r1, [r0, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8003c86:	6894      	ldr	r4, [r2, #8]
  tmp = tmp >> 10;
 8003c88:	f3c4 2482 	ubfx	r4, r4, #10, #3
  presc = APBAHBPrescTable[tmp];
 8003c8c:	5d1c      	ldrb	r4, [r3, r4]
 8003c8e:	b2e4      	uxtb	r4, r4
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003c90:	fa21 f404 	lsr.w	r4, r1, r4
 8003c94:	6084      	str	r4, [r0, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003c96:	6892      	ldr	r2, [r2, #8]
  tmp = tmp >> 13;
 8003c98:	f3c2 3242 	ubfx	r2, r2, #13, #3
  presc = APBAHBPrescTable[tmp];
 8003c9c:	5c9b      	ldrb	r3, [r3, r2]
 8003c9e:	b2db      	uxtb	r3, r3
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003ca0:	40d9      	lsrs	r1, r3
 8003ca2:	60c1      	str	r1, [r0, #12]
}
 8003ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop

08003cac <RCC_RTCCLKConfig>:
  uint32_t tmpreg = 0;

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 8003cac:	f400 7340 	and.w	r3, r0, #768	; 0x300
 8003cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb4:	d10c      	bne.n	8003cd0 <RCC_RTCCLKConfig+0x24>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 8003cb6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003cba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cbe:	6899      	ldr	r1, [r3, #8]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 8003cc0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8003cc4:	f020 4270 	bic.w	r2, r0, #4026531840	; 0xf0000000
 8003cc8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003ccc:	430a      	orrs	r2, r1

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8003cce:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 8003cd0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cda:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003cde:	4310      	orrs	r0, r2
 8003ce0:	6718      	str	r0, [r3, #112]	; 0x70
 8003ce2:	4770      	bx	lr

08003ce4 <RCC_RTCCLKCmd>:
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8003ce4:	f640 633c 	movw	r3, #3644	; 0xe3c
 8003ce8:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003cec:	6018      	str	r0, [r3, #0]
 8003cee:	4770      	bx	lr

08003cf0 <RCC_AHB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003cf0:	b139      	cbz	r1, 8003d02 <RCC_AHB1PeriphClockCmd+0x12>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003cf2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003cf6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003cfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfc:	4310      	orrs	r0, r2
 8003cfe:	6318      	str	r0, [r3, #48]	; 0x30
 8003d00:	4770      	bx	lr
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003d02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0c:	ea22 0000 	bic.w	r0, r2, r0
 8003d10:	6318      	str	r0, [r3, #48]	; 0x30
 8003d12:	4770      	bx	lr

08003d14 <RCC_APB1PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003d14:	b139      	cbz	r1, 8003d26 <RCC_APB1PeriphClockCmd+0x12>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003d16:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d20:	4310      	orrs	r0, r2
 8003d22:	6418      	str	r0, [r3, #64]	; 0x40
 8003d24:	4770      	bx	lr
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8003d26:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d30:	ea22 0000 	bic.w	r0, r2, r0
 8003d34:	6418      	str	r0, [r3, #64]	; 0x40
 8003d36:	4770      	bx	lr

08003d38 <RCC_APB2PeriphClockCmd>:
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003d38:	b139      	cbz	r1, 8003d4a <RCC_APB2PeriphClockCmd+0x12>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003d3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d44:	4310      	orrs	r0, r2
 8003d46:	6458      	str	r0, [r3, #68]	; 0x44
 8003d48:	4770      	bx	lr
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003d4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d54:	ea22 0000 	bic.w	r0, r2, r0
 8003d58:	6458      	str	r0, [r3, #68]	; 0x44
 8003d5a:	4770      	bx	lr

08003d5c <RCC_GetFlagStatus>:

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8003d5c:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d105      	bne.n	8003d6e <RCC_GetFlagStatus+0x12>
  {
    statusreg = RCC->CR;
 8003d62:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <RCC_GetFlagStatus+0x22>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8003d6e:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8003d70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003d78:	bf0c      	ite	eq
 8003d7a:	6f1b      	ldreq	r3, [r3, #112]	; 0x70
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8003d7c:	6f5b      	ldrne	r3, [r3, #116]	; 0x74
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8003d7e:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8003d82:	fa23 f000 	lsr.w	r0, r3, r0
 8003d86:	f000 0001 	and.w	r0, r0, #1
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
}
 8003d8a:	4770      	bx	lr

08003d8c <RTC_ByteToBcd2>:
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
 8003d8c:	2300      	movs	r3, #0
  
  while (Value >= 10)
 8003d8e:	e003      	b.n	8003d98 <RTC_ByteToBcd2+0xc>
  {
    bcdhigh++;
 8003d90:	3301      	adds	r3, #1
 8003d92:	b2db      	uxtb	r3, r3
    Value -= 10;
 8003d94:	380a      	subs	r0, #10
 8003d96:	b2c0      	uxtb	r0, r0
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 8003d98:	2809      	cmp	r0, #9
 8003d9a:	d8f9      	bhi.n	8003d90 <RTC_ByteToBcd2+0x4>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	b2db      	uxtb	r3, r3
}
 8003da0:	4318      	orrs	r0, r3
 8003da2:	4770      	bx	lr

08003da4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint8_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003da4:	0903      	lsrs	r3, r0, #4
 8003da6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	b2db      	uxtb	r3, r3
  return (tmp + (Value & (uint8_t)0x0F));
 8003dae:	f000 000f 	and.w	r0, r0, #15
 8003db2:	4418      	add	r0, r3
}
 8003db4:	b2c0      	uxtb	r0, r0
 8003db6:	4770      	bx	lr

08003db8 <RTC_WriteProtectionCmd>:
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8003db8:	b130      	cbz	r0, 8003dc8 <RTC_WriteProtectionCmd+0x10>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 8003dba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003dbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dc2:	22ff      	movs	r2, #255	; 0xff
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24
 8003dc6:	4770      	bx	lr
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 8003dc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003dcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dd0:	22ca      	movs	r2, #202	; 0xca
 8003dd2:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 8003dd4:	2253      	movs	r2, #83	; 0x53
 8003dd6:	625a      	str	r2, [r3, #36]	; 0x24
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop

08003ddc <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 8003ddc:	b082      	sub	sp, #8
  __IO uint32_t initcounter = 0x00;
 8003dde:	2300      	movs	r3, #0
 8003de0:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003de2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003de6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f013 0f40 	tst.w	r3, #64	; 0x40
      status = ERROR;
    }        
  }
  else
  {
    status = SUCCESS;  
 8003df0:	bf18      	it	ne
 8003df2:	2001      	movne	r0, #1
  __IO uint32_t initcounter = 0x00;
  ErrorStatus status = ERROR;
  uint32_t initstatus = 0x00;
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003df4:	d121      	bne.n	8003e3a <RTC_EnterInitMode+0x5e>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 8003df6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003dfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e02:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 8003e04:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8003e08:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003e0c:	68cb      	ldr	r3, [r1, #12]
 8003e0e:	f003 0240 	and.w	r2, r3, #64	; 0x40
      initcounter++;  
 8003e12:	9b01      	ldr	r3, [sp, #4]
 8003e14:	3301      	adds	r3, #1
 8003e16:	9301      	str	r3, [sp, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 8003e18:	9b01      	ldr	r3, [sp, #4]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d001      	beq.n	8003e24 <RTC_EnterInitMode+0x48>
 8003e20:	2a00      	cmp	r2, #0
 8003e22:	d0f3      	beq.n	8003e0c <RTC_EnterInitMode+0x30>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 8003e24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e2c:	68d8      	ldr	r0, [r3, #12]
 8003e2e:	f000 0040 	and.w	r0, r0, #64	; 0x40
    {
      status = SUCCESS;
 8003e32:	3000      	adds	r0, #0
 8003e34:	bf18      	it	ne
 8003e36:	2001      	movne	r0, #1
 8003e38:	e7ff      	b.n	8003e3a <RTC_EnterInitMode+0x5e>
  {
    status = SUCCESS;  
  } 
    
  return (status);  
}
 8003e3a:	b002      	add	sp, #8
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop

08003e40 <RTC_ExitInitMode>:
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 8003e40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e48:	68da      	ldr	r2, [r3, #12]
 8003e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e4e:	60da      	str	r2, [r3, #12]
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop

08003e54 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 8003e54:	b510      	push	{r4, lr}
 8003e56:	4604      	mov	r4, r0
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003e58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e60:	22ca      	movs	r2, #202	; 0xca
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003e64:	2253      	movs	r2, #83	; 0x53
 8003e66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003e68:	f7ff ffb8 	bl	8003ddc <RTC_EnterInitMode>
 8003e6c:	b1b0      	cbz	r0, 8003e9c <RTC_Init+0x48>
    status = ERROR;
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 8003e6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 8003e7e:	6899      	ldr	r1, [r3, #8]
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 8003e86:	68a2      	ldr	r2, [r4, #8]
 8003e88:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	6861      	ldr	r1, [r4, #4]
 8003e8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e92:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 8003e94:	f7ff ffd4 	bl	8003e40 <RTC_ExitInitMode>

    status = SUCCESS;    
 8003e98:	2001      	movs	r0, #1
 8003e9a:	e000      	b.n	8003e9e <RTC_Init+0x4a>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8003e9c:	2000      	movs	r0, #0
    RTC_ExitInitMode();

    status = SUCCESS;    
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003e9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ea2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8003eaa:	bd10      	pop	{r4, pc}

08003eac <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 8003eac:	b082      	sub	sp, #8
  __IO uint32_t synchrocounter = 0;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9301      	str	r3, [sp, #4]
  ErrorStatus status = ERROR;
  uint32_t synchrostatus = 0x00;

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003eb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003eb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003eba:	22ca      	movs	r2, #202	; 0xca
 8003ebc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003ebe:	2253      	movs	r2, #83	; 0x53
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 8003ec2:	68da      	ldr	r2, [r3, #12]
 8003ec4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ec8:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 8003eca:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8003ece:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8003ed2:	68cb      	ldr	r3, [r1, #12]
 8003ed4:	f003 0220 	and.w	r2, r3, #32
    synchrocounter++;  
 8003ed8:	9b01      	ldr	r3, [sp, #4]
 8003eda:	3301      	adds	r3, #1
 8003edc:	9301      	str	r3, [sp, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 8003ede:	9b01      	ldr	r3, [sp, #4]
 8003ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ee4:	d001      	beq.n	8003eea <RTC_WaitForSynchro+0x3e>
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d0f3      	beq.n	8003ed2 <RTC_WaitForSynchro+0x26>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 8003eea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003eee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ef2:	68d8      	ldr	r0, [r3, #12]
 8003ef4:	f000 0020 	and.w	r0, r0, #32
  {
    status = ERROR;
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003ef8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003efc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f00:	22ff      	movs	r2, #255	; 0xff
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
}
 8003f04:	3000      	adds	r0, #0
 8003f06:	bf18      	it	ne
 8003f08:	2001      	movne	r0, #1
 8003f0a:	b002      	add	sp, #8
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	460c      	mov	r4, r1
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003f14:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003f18:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003f1c:	6892      	ldr	r2, [r2, #8]
 8003f1e:	f012 0f40 	tst.w	r2, #64	; 0x40
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 8003f22:	bf04      	itt	eq
 8003f24:	2200      	moveq	r2, #0
 8003f26:	70ca      	strbeq	r2, [r1, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8003f28:	b150      	cbz	r0, 8003f40 <RTC_SetTime+0x30>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f2a:	780a      	ldrb	r2, [r1, #0]
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003f2c:	784b      	ldrb	r3, [r1, #1]
 8003f2e:	021b      	lsls	r3, r3, #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 8003f34:	788a      	ldrb	r2, [r1, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003f36:	4313      	orrs	r3, r2
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 8003f38:	78cc      	ldrb	r4, [r1, #3]
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f3a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003f3e:	e00f      	b.n	8003f60 <RTC_SetTime+0x50>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f40:	7808      	ldrb	r0, [r1, #0]
 8003f42:	f7ff ff23 	bl	8003d8c <RTC_ByteToBcd2>
 8003f46:	0405      	lsls	r5, r0, #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003f48:	7860      	ldrb	r0, [r4, #1]
 8003f4a:	f7ff ff1f 	bl	8003d8c <RTC_ByteToBcd2>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f4e:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 8003f52:	78a0      	ldrb	r0, [r4, #2]
 8003f54:	f7ff ff1a 	bl	8003d8c <RTC_ByteToBcd2>
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 8003f58:	4328      	orrs	r0, r5
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 8003f5a:	78e4      	ldrb	r4, [r4, #3]
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 8003f5c:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 8003f60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f68:	22ca      	movs	r2, #202	; 0xca
 8003f6a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8003f6c:	2253      	movs	r2, #83	; 0x53
 8003f6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 8003f70:	f7ff ff34 	bl	8003ddc <RTC_EnterInitMode>
 8003f74:	b180      	cbz	r0, 8003f98 <RTC_SetTime+0x88>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f76:	f004 347f 	and.w	r4, r4, #2139062143	; 0x7f7f7f7f
 8003f7a:	f024 44fe 	bic.w	r4, r4, #2130706432	; 0x7f000000
 8003f7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003f86:	601c      	str	r4, [r3, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8003f88:	f7ff ff5a 	bl	8003e40 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8003f8c:	f7ff ff8e 	bl	8003eac <RTC_WaitForSynchro>
    {
      status = ERROR;
 8003f90:	3000      	adds	r0, #0
 8003f92:	bf18      	it	ne
 8003f94:	2001      	movne	r0, #1
 8003f96:	e000      	b.n	8003f9a <RTC_SetTime+0x8a>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8003f98:	2000      	movs	r0, #0
      status = SUCCESS;
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 8003f9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003f9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fa2:	22ff      	movs	r2, #255	; 0xff
 8003fa4:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
}
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}

08003fa8 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 8003fa8:	b570      	push	{r4, r5, r6, lr}
 8003faa:	460c      	mov	r4, r1

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 8003fac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003fb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003fb4:	681b      	ldr	r3, [r3, #0]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8003fb6:	f3c3 4205 	ubfx	r2, r3, #16, #6
 8003fba:	700a      	strb	r2, [r1, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8003fbc:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8003fc0:	704e      	strb	r6, [r1, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003fc2:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8003fc6:	708d      	strb	r5, [r1, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 8003fc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	70cb      	strb	r3, [r1, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 8003fd0:	b958      	cbnz	r0, 8003fea <RTC_GetTime+0x42>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	f7ff fee6 	bl	8003da4 <RTC_Bcd2ToByte>
 8003fd8:	7020      	strb	r0, [r4, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 8003fda:	4630      	mov	r0, r6
 8003fdc:	f7ff fee2 	bl	8003da4 <RTC_Bcd2ToByte>
 8003fe0:	7060      	strb	r0, [r4, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7ff fede 	bl	8003da4 <RTC_Bcd2ToByte>
 8003fe8:	70a0      	strb	r0, [r4, #2]
 8003fea:	bd70      	pop	{r4, r5, r6, pc}

08003fec <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 8003fec:	b538      	push	{r3, r4, r5, lr}
 8003fee:	460c      	mov	r4, r1
  ErrorStatus status = ERROR;
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	b938      	cbnz	r0, 8004004 <RTC_SetDate+0x18>
 8003ff4:	784a      	ldrb	r2, [r1, #1]
 8003ff6:	f012 0f10 	tst.w	r2, #16
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 8003ffa:	bf1e      	ittt	ne
 8003ffc:	f022 0210 	bicne.w	r2, r2, #16
 8004000:	320a      	addne	r2, #10
 8004002:	704a      	strbne	r2, [r1, #1]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 8004004:	b153      	cbz	r3, 800401c <RTC_SetDate+0x30>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8004006:	78e2      	ldrb	r2, [r4, #3]
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8004008:	7863      	ldrb	r3, [r4, #1]
 800400a:	021b      	lsls	r3, r3, #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800400c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 8004010:	78a2      	ldrb	r2, [r4, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 8004012:	4313      	orrs	r3, r2
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 8004014:	7824      	ldrb	r4, [r4, #0]
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 8004016:	ea43 3444 	orr.w	r4, r3, r4, lsl #13
 800401a:	e00f      	b.n	800403c <RTC_SetDate+0x50>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800401c:	78e0      	ldrb	r0, [r4, #3]
 800401e:	f7ff feb5 	bl	8003d8c <RTC_ByteToBcd2>
 8004022:	0405      	lsls	r5, r0, #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8004024:	7860      	ldrb	r0, [r4, #1]
 8004026:	f7ff feb1 	bl	8003d8c <RTC_ByteToBcd2>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800402a:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800402e:	78a0      	ldrb	r0, [r4, #2]
 8004030:	f7ff feac 	bl	8003d8c <RTC_ByteToBcd2>
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 8004034:	4328      	orrs	r0, r5
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 8004036:	7824      	ldrb	r4, [r4, #0]
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 8004038:	ea40 3444 	orr.w	r4, r0, r4, lsl #13
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800403c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004040:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004044:	22ca      	movs	r2, #202	; 0xca
 8004046:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 8004048:	2253      	movs	r2, #83	; 0x53
 800404a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800404c:	f7ff fec6 	bl	8003ddc <RTC_EnterInitMode>
 8004050:	b180      	cbz	r0, 8004074 <RTC_SetDate+0x88>
    status = ERROR;
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 8004052:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8004056:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 800405a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800405e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004062:	605c      	str	r4, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 8004064:	f7ff feec 	bl	8003e40 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 8004068:	f7ff ff20 	bl	8003eac <RTC_WaitForSynchro>
    {
      status = ERROR;
 800406c:	3000      	adds	r0, #0
 800406e:	bf18      	it	ne
 8004070:	2001      	movne	r0, #1
 8004072:	e000      	b.n	8004076 <RTC_SetDate+0x8a>
  RTC->WPR = 0x53;

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
  {
    status = ERROR;
 8004074:	2000      	movs	r0, #0
    {
      status = SUCCESS;
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 8004076:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800407a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800407e:	22ff      	movs	r2, #255	; 0xff
 8004080:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
}
 8004082:	bd38      	pop	{r3, r4, r5, pc}

08004084 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004084:	b129      	cbz	r1, 8004092 <TIM_Cmd+0xe>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8004086:	8803      	ldrh	r3, [r0, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	8003      	strh	r3, [r0, #0]
 8004090:	4770      	bx	lr
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8004092:	8803      	ldrh	r3, [r0, #0]
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	8003      	strh	r3, [r0, #0]
 800409e:	4770      	bx	lr

080040a0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80040a0:	b530      	push	{r4, r5, lr}
 80040a2:	b085      	sub	sp, #20
 80040a4:	4604      	mov	r4, r0
 80040a6:	460d      	mov	r5, r1
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80040a8:	8a03      	ldrh	r3, [r0, #16]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80040aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80040b2:	88ca      	ldrh	r2, [r1, #6]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80040b4:	4313      	orrs	r3, r2
 80040b6:	8203      	strh	r3, [r0, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80040b8:	8983      	ldrh	r3, [r0, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80040ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040be:	f023 030c 	bic.w	r3, r3, #12
 80040c2:	041b      	lsls	r3, r3, #16
 80040c4:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80040c6:	8888      	ldrh	r0, [r1, #4]
 80040c8:	890a      	ldrh	r2, [r1, #8]
            USART_InitStruct->USART_Mode;
 80040ca:	8949      	ldrh	r1, [r1, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80040cc:	4302      	orrs	r2, r0
 80040ce:	430a      	orrs	r2, r1
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80040d0:	4313      	orrs	r3, r2
 80040d2:	81a3      	strh	r3, [r4, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80040d4:	8aa3      	ldrh	r3, [r4, #20]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	041b      	lsls	r3, r3, #16
 80040dc:	0c1b      	lsrs	r3, r3, #16

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80040de:	89aa      	ldrh	r2, [r5, #12]

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80040e0:	4313      	orrs	r3, r2
 80040e2:	82a3      	strh	r3, [r4, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80040e4:	4668      	mov	r0, sp
 80040e6:	f7ff fd73 	bl	8003bd0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80040ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040ee:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80040f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040f6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80040fa:	429c      	cmp	r4, r3
 80040fc:	bf18      	it	ne
 80040fe:	4294      	cmpne	r4, r2
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8004100:	bf0c      	ite	eq
 8004102:	9a03      	ldreq	r2, [sp, #12]
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8004104:	9a02      	ldrne	r2, [sp, #8]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	b21b      	sxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800410c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004110:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004114:	bfbd      	ittte	lt
 8004116:	682b      	ldrlt	r3, [r5, #0]
 8004118:	005b      	lsllt	r3, r3, #1
 800411a:	fbb2 f2f3 	udivlt	r2, r2, r3
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800411e:	6829      	ldrge	r1, [r5, #0]
 8004120:	bfa4      	itt	ge
 8004122:	0089      	lslge	r1, r1, #2
 8004124:	fbb2 f2f1 	udivge	r2, r2, r1
  }
  tmpreg = (integerdivider / 100) << 4;
 8004128:	f248 531f 	movw	r3, #34079	; 0x851f
 800412c:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004130:	fba3 1302 	umull	r1, r3, r3, r2
 8004134:	095b      	lsrs	r3, r3, #5

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8004136:	011d      	lsls	r5, r3, #4
 8004138:	2064      	movs	r0, #100	; 0x64
 800413a:	fb03 2310 	mls	r3, r3, r0, r2

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800413e:	89a0      	ldrh	r0, [r4, #12]
 8004140:	b200      	sxth	r0, r0
 8004142:	2800      	cmp	r0, #0
 8004144:	da0b      	bge.n	800415e <USART_Init+0xbe>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	3332      	adds	r3, #50	; 0x32
 800414a:	f248 511f 	movw	r1, #34079	; 0x851f
 800414e:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 8004152:	fba1 2103 	umull	r2, r1, r1, r3
 8004156:	f3c1 1142 	ubfx	r1, r1, #5, #3
 800415a:	4329      	orrs	r1, r5
 800415c:	e00a      	b.n	8004174 <USART_Init+0xd4>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	3332      	adds	r3, #50	; 0x32
 8004162:	f248 511f 	movw	r1, #34079	; 0x851f
 8004166:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 800416a:	fba1 2103 	umull	r2, r1, r1, r3
 800416e:	f3c1 1143 	ubfx	r1, r1, #5, #4
 8004172:	4329      	orrs	r1, r5
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8004174:	b289      	uxth	r1, r1
 8004176:	8121      	strh	r1, [r4, #8]
}
 8004178:	b005      	add	sp, #20
 800417a:	bd30      	pop	{r4, r5, pc}

0800417c <USART_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800417c:	b129      	cbz	r1, 800418a <USART_Cmd+0xe>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800417e:	8983      	ldrh	r3, [r0, #12]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004186:	8183      	strh	r3, [r0, #12]
 8004188:	4770      	bx	lr
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800418a:	8983      	ldrh	r3, [r0, #12]
 800418c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004190:	041b      	lsls	r3, r3, #16
 8004192:	0c1b      	lsrs	r3, r3, #16
 8004194:	8183      	strh	r3, [r0, #12]
 8004196:	4770      	bx	lr

08004198 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8004198:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800419c:	8081      	strh	r1, [r0, #4]
 800419e:	4770      	bx	lr

080041a0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80041a0:	b410      	push	{r4}
  } 
    
  usartxbase = (uint32_t)USARTx;

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80041a2:	f3c1 1342 	ubfx	r3, r1, #5, #3

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80041a6:	f001 011f 	and.w	r1, r1, #31
  itmask = (((uint32_t)0x01) << itpos);
 80041aa:	2401      	movs	r4, #1
 80041ac:	fa04 f101 	lsl.w	r1, r4, r1
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80041b0:	42a3      	cmp	r3, r4
  {
    usartxbase += 0x0C;
 80041b2:	bf08      	it	eq
 80041b4:	300c      	addeq	r0, #12

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80041b6:	d003      	beq.n	80041c0 <USART_ITConfig+0x20>
  {
    usartxbase += 0x0C;
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80041b8:	2b02      	cmp	r3, #2
  {
    usartxbase += 0x10;
 80041ba:	bf0c      	ite	eq
 80041bc:	3010      	addeq	r0, #16
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80041be:	3014      	addne	r0, #20
  }
  if (NewState != DISABLE)
 80041c0:	b11a      	cbz	r2, 80041ca <USART_ITConfig+0x2a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80041c2:	6803      	ldr	r3, [r0, #0]
 80041c4:	4319      	orrs	r1, r3
 80041c6:	6001      	str	r1, [r0, #0]
 80041c8:	e003      	b.n	80041d2 <USART_ITConfig+0x32>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80041ca:	6803      	ldr	r3, [r0, #0]
 80041cc:	ea23 0101 	bic.w	r1, r3, r1
 80041d0:	6001      	str	r1, [r0, #0]
  }
}
 80041d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80041d8:	b410      	push	{r4}
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80041da:	f3c1 1342 	ubfx	r3, r1, #5, #3
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80041de:	f001 021f 	and.w	r2, r1, #31
  itmask = (uint32_t)0x01 << itmask;
 80041e2:	2401      	movs	r4, #1
 80041e4:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d103      	bne.n	80041f2 <USART_GetITStatus+0x1a>
  {
    itmask &= USARTx->CR1;
 80041ea:	8982      	ldrh	r2, [r0, #12]
 80041ec:	b292      	uxth	r2, r2
 80041ee:	4022      	ands	r2, r4
 80041f0:	e005      	b.n	80041fe <USART_GetITStatus+0x26>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80041f2:	2b02      	cmp	r3, #2
  {
    itmask &= USARTx->CR2;
 80041f4:	bf0c      	ite	eq
 80041f6:	8a02      	ldrheq	r2, [r0, #16]
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80041f8:	8a82      	ldrhne	r2, [r0, #20]
 80041fa:	b292      	uxth	r2, r2
 80041fc:	4022      	ands	r2, r4
  }
  
  bitpos = USART_IT >> 0x08;
 80041fe:	0a09      	lsrs	r1, r1, #8
  bitpos = (uint32_t)0x01 << bitpos;
 8004200:	2301      	movs	r3, #1
 8004202:	fa03 f101 	lsl.w	r1, r3, r1
  bitpos &= USARTx->SR;
 8004206:	8803      	ldrh	r3, [r0, #0]
 8004208:	b29b      	uxth	r3, r3
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800420a:	420b      	tst	r3, r1
 800420c:	bf0c      	ite	eq
 800420e:	2300      	moveq	r3, #0
 8004210:	2301      	movne	r3, #1
 8004212:	2a00      	cmp	r2, #0
 8004214:	bf0c      	ite	eq
 8004216:	2000      	moveq	r0, #0
 8004218:	f003 0001 	andne.w	r0, r3, #1
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
}
 800421c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop

08004224 <atexit>:
 8004224:	4601      	mov	r1, r0
 8004226:	2000      	movs	r0, #0
 8004228:	4602      	mov	r2, r0
 800422a:	4603      	mov	r3, r0
 800422c:	f001 be4c 	b.w	8005ec8 <__register_exitproc>

08004230 <__libc_fini_array>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	f248 6470 	movw	r4, #34416	; 0x8670
 8004236:	f248 656c 	movw	r5, #34412	; 0x866c
 800423a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800423e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8004242:	1b64      	subs	r4, r4, r5
 8004244:	10a4      	asrs	r4, r4, #2
 8004246:	bf18      	it	ne
 8004248:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 800424c:	d005      	beq.n	800425a <__libc_fini_array+0x2a>
 800424e:	3c01      	subs	r4, #1
 8004250:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004254:	4798      	blx	r3
 8004256:	2c00      	cmp	r4, #0
 8004258:	d1f9      	bne.n	800424e <__libc_fini_array+0x1e>
 800425a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425e:	f004 b9f7 	b.w	8008650 <_fini>
 8004262:	bf00      	nop

08004264 <__libc_init_array>:
 8004264:	b570      	push	{r4, r5, r6, lr}
 8004266:	f248 6664 	movw	r6, #34404	; 0x8664
 800426a:	f248 6564 	movw	r5, #34404	; 0x8664
 800426e:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004272:	f6c0 0600 	movt	r6, #2048	; 0x800
 8004276:	1b76      	subs	r6, r6, r5
 8004278:	10b6      	asrs	r6, r6, #2
 800427a:	bf1c      	itt	ne
 800427c:	3d04      	subne	r5, #4
 800427e:	2400      	movne	r4, #0
 8004280:	d005      	beq.n	800428e <__libc_init_array+0x2a>
 8004282:	3401      	adds	r4, #1
 8004284:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8004288:	4798      	blx	r3
 800428a:	42a6      	cmp	r6, r4
 800428c:	d1f9      	bne.n	8004282 <__libc_init_array+0x1e>
 800428e:	f248 666c 	movw	r6, #34412	; 0x866c
 8004292:	f248 6564 	movw	r5, #34404	; 0x8664
 8004296:	f6c0 0500 	movt	r5, #2048	; 0x800
 800429a:	f6c0 0600 	movt	r6, #2048	; 0x800
 800429e:	1b76      	subs	r6, r6, r5
 80042a0:	f004 f9d0 	bl	8008644 <_init>
 80042a4:	10b6      	asrs	r6, r6, #2
 80042a6:	bf1c      	itt	ne
 80042a8:	3d04      	subne	r5, #4
 80042aa:	2400      	movne	r4, #0
 80042ac:	d006      	beq.n	80042bc <__libc_init_array+0x58>
 80042ae:	3401      	adds	r4, #1
 80042b0:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80042b4:	4798      	blx	r3
 80042b6:	42a6      	cmp	r6, r4
 80042b8:	d1f9      	bne.n	80042ae <__libc_init_array+0x4a>
 80042ba:	bd70      	pop	{r4, r5, r6, pc}
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	bf00      	nop

080042c0 <malloc>:
 80042c0:	f240 43a0 	movw	r3, #1184	; 0x4a0
 80042c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042c8:	4601      	mov	r1, r0
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	f000 b808 	b.w	80042e0 <_malloc_r>

080042d0 <free>:
 80042d0:	f240 43a0 	movw	r3, #1184	; 0x4a0
 80042d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80042d8:	4601      	mov	r1, r0
 80042da:	6818      	ldr	r0, [r3, #0]
 80042dc:	f002 beea 	b.w	80070b4 <_free_r>

080042e0 <_malloc_r>:
 80042e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e4:	f101 050b 	add.w	r5, r1, #11
 80042e8:	2d16      	cmp	r5, #22
 80042ea:	bf87      	ittee	hi
 80042ec:	f025 0507 	bichi.w	r5, r5, #7
 80042f0:	0feb      	lsrhi	r3, r5, #31
 80042f2:	2300      	movls	r3, #0
 80042f4:	2510      	movls	r5, #16
 80042f6:	428d      	cmp	r5, r1
 80042f8:	bf2c      	ite	cs
 80042fa:	4619      	movcs	r1, r3
 80042fc:	f043 0101 	orrcc.w	r1, r3, #1
 8004300:	b083      	sub	sp, #12
 8004302:	4607      	mov	r7, r0
 8004304:	2900      	cmp	r1, #0
 8004306:	f040 80b5 	bne.w	8004474 <_malloc_r+0x194>
 800430a:	f7fd fd8d 	bl	8001e28 <__malloc_lock>
 800430e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004312:	d21f      	bcs.n	8004354 <_malloc_r+0x74>
 8004314:	f240 46a4 	movw	r6, #1188	; 0x4a4
 8004318:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800431c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8004320:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 8004324:	68dc      	ldr	r4, [r3, #12]
 8004326:	429c      	cmp	r4, r3
 8004328:	f000 81f4 	beq.w	8004714 <_malloc_r+0x434>
 800432c:	6863      	ldr	r3, [r4, #4]
 800432e:	68e2      	ldr	r2, [r4, #12]
 8004330:	68a1      	ldr	r1, [r4, #8]
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	4423      	add	r3, r4
 8004338:	4638      	mov	r0, r7
 800433a:	685d      	ldr	r5, [r3, #4]
 800433c:	60ca      	str	r2, [r1, #12]
 800433e:	f045 0501 	orr.w	r5, r5, #1
 8004342:	6091      	str	r1, [r2, #8]
 8004344:	605d      	str	r5, [r3, #4]
 8004346:	f7fd fd73 	bl	8001e30 <__malloc_unlock>
 800434a:	3408      	adds	r4, #8
 800434c:	4620      	mov	r0, r4
 800434e:	b003      	add	sp, #12
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004354:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 8004358:	bf04      	itt	eq
 800435a:	217e      	moveq	r1, #126	; 0x7e
 800435c:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 8004360:	f040 808f 	bne.w	8004482 <_malloc_r+0x1a2>
 8004364:	f240 46a4 	movw	r6, #1188	; 0x4a4
 8004368:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800436c:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8004370:	68cc      	ldr	r4, [r1, #12]
 8004372:	42a1      	cmp	r1, r4
 8004374:	d106      	bne.n	8004384 <_malloc_r+0xa4>
 8004376:	e00d      	b.n	8004394 <_malloc_r+0xb4>
 8004378:	2b00      	cmp	r3, #0
 800437a:	f280 8163 	bge.w	8004644 <_malloc_r+0x364>
 800437e:	68e4      	ldr	r4, [r4, #12]
 8004380:	42a1      	cmp	r1, r4
 8004382:	d007      	beq.n	8004394 <_malloc_r+0xb4>
 8004384:	6862      	ldr	r2, [r4, #4]
 8004386:	f022 0203 	bic.w	r2, r2, #3
 800438a:	1b53      	subs	r3, r2, r5
 800438c:	2b0f      	cmp	r3, #15
 800438e:	ddf3      	ble.n	8004378 <_malloc_r+0x98>
 8004390:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004394:	f10c 0c01 	add.w	ip, ip, #1
 8004398:	f240 43a4 	movw	r3, #1188	; 0x4a4
 800439c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043a0:	6934      	ldr	r4, [r6, #16]
 80043a2:	f103 0e08 	add.w	lr, r3, #8
 80043a6:	4574      	cmp	r4, lr
 80043a8:	bf08      	it	eq
 80043aa:	685a      	ldreq	r2, [r3, #4]
 80043ac:	d022      	beq.n	80043f4 <_malloc_r+0x114>
 80043ae:	6861      	ldr	r1, [r4, #4]
 80043b0:	f021 0103 	bic.w	r1, r1, #3
 80043b4:	1b4a      	subs	r2, r1, r5
 80043b6:	2a0f      	cmp	r2, #15
 80043b8:	f300 8190 	bgt.w	80046dc <_malloc_r+0x3fc>
 80043bc:	2a00      	cmp	r2, #0
 80043be:	f8c3 e014 	str.w	lr, [r3, #20]
 80043c2:	f8c3 e010 	str.w	lr, [r3, #16]
 80043c6:	da67      	bge.n	8004498 <_malloc_r+0x1b8>
 80043c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043cc:	f080 815f 	bcs.w	800468e <_malloc_r+0x3ae>
 80043d0:	08c9      	lsrs	r1, r1, #3
 80043d2:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 80043d6:	ea4f 08a1 	mov.w	r8, r1, asr #2
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	6881      	ldr	r1, [r0, #8]
 80043de:	60e0      	str	r0, [r4, #12]
 80043e0:	f04f 0901 	mov.w	r9, #1
 80043e4:	fa09 f808 	lsl.w	r8, r9, r8
 80043e8:	ea48 0202 	orr.w	r2, r8, r2
 80043ec:	60a1      	str	r1, [r4, #8]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	6084      	str	r4, [r0, #8]
 80043f2:	60cc      	str	r4, [r1, #12]
 80043f4:	ea4f 03ac 	mov.w	r3, ip, asr #2
 80043f8:	2001      	movs	r0, #1
 80043fa:	4098      	lsls	r0, r3
 80043fc:	4290      	cmp	r0, r2
 80043fe:	d858      	bhi.n	80044b2 <_malloc_r+0x1d2>
 8004400:	4202      	tst	r2, r0
 8004402:	d106      	bne.n	8004412 <_malloc_r+0x132>
 8004404:	f02c 0c03 	bic.w	ip, ip, #3
 8004408:	0040      	lsls	r0, r0, #1
 800440a:	4202      	tst	r2, r0
 800440c:	f10c 0c04 	add.w	ip, ip, #4
 8004410:	d0fa      	beq.n	8004408 <_malloc_r+0x128>
 8004412:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 8004416:	4644      	mov	r4, r8
 8004418:	46e1      	mov	r9, ip
 800441a:	68e3      	ldr	r3, [r4, #12]
 800441c:	429c      	cmp	r4, r3
 800441e:	d107      	bne.n	8004430 <_malloc_r+0x150>
 8004420:	e16f      	b.n	8004702 <_malloc_r+0x422>
 8004422:	2a00      	cmp	r2, #0
 8004424:	f280 8180 	bge.w	8004728 <_malloc_r+0x448>
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	429c      	cmp	r4, r3
 800442c:	f000 8169 	beq.w	8004702 <_malloc_r+0x422>
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	f021 0103 	bic.w	r1, r1, #3
 8004436:	1b4a      	subs	r2, r1, r5
 8004438:	2a0f      	cmp	r2, #15
 800443a:	ddf2      	ble.n	8004422 <_malloc_r+0x142>
 800443c:	461c      	mov	r4, r3
 800443e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004442:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004446:	1959      	adds	r1, r3, r5
 8004448:	f045 0901 	orr.w	r9, r5, #1
 800444c:	f042 0501 	orr.w	r5, r2, #1
 8004450:	f8c3 9004 	str.w	r9, [r3, #4]
 8004454:	4638      	mov	r0, r7
 8004456:	f8c8 c00c 	str.w	ip, [r8, #12]
 800445a:	f8cc 8008 	str.w	r8, [ip, #8]
 800445e:	6171      	str	r1, [r6, #20]
 8004460:	6131      	str	r1, [r6, #16]
 8004462:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004466:	f8c1 e008 	str.w	lr, [r1, #8]
 800446a:	604d      	str	r5, [r1, #4]
 800446c:	508a      	str	r2, [r1, r2]
 800446e:	f7fd fcdf 	bl	8001e30 <__malloc_unlock>
 8004472:	e76b      	b.n	800434c <_malloc_r+0x6c>
 8004474:	230c      	movs	r3, #12
 8004476:	2400      	movs	r4, #0
 8004478:	6003      	str	r3, [r0, #0]
 800447a:	4620      	mov	r0, r4
 800447c:	b003      	add	sp, #12
 800447e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004482:	f1bc 0f04 	cmp.w	ip, #4
 8004486:	f200 80ee 	bhi.w	8004666 <_malloc_r+0x386>
 800448a:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 800448e:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8004492:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8004496:	e765      	b.n	8004364 <_malloc_r+0x84>
 8004498:	4421      	add	r1, r4
 800449a:	4638      	mov	r0, r7
 800449c:	684b      	ldr	r3, [r1, #4]
 800449e:	f043 0301 	orr.w	r3, r3, #1
 80044a2:	604b      	str	r3, [r1, #4]
 80044a4:	f7fd fcc4 	bl	8001e30 <__malloc_unlock>
 80044a8:	3408      	adds	r4, #8
 80044aa:	4620      	mov	r0, r4
 80044ac:	b003      	add	sp, #12
 80044ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b2:	68b4      	ldr	r4, [r6, #8]
 80044b4:	6863      	ldr	r3, [r4, #4]
 80044b6:	f023 0903 	bic.w	r9, r3, #3
 80044ba:	454d      	cmp	r5, r9
 80044bc:	d804      	bhi.n	80044c8 <_malloc_r+0x1e8>
 80044be:	ebc5 0309 	rsb	r3, r5, r9
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	f300 80ae 	bgt.w	8004624 <_malloc_r+0x344>
 80044c8:	f640 2330 	movw	r3, #2608	; 0xa30
 80044cc:	f640 0ab0 	movw	sl, #2224	; 0x8b0
 80044d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80044d4:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f8da 1000 	ldr.w	r1, [sl]
 80044de:	442b      	add	r3, r5
 80044e0:	3101      	adds	r1, #1
 80044e2:	bf1d      	ittte	ne
 80044e4:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 80044e8:	330f      	addne	r3, #15
 80044ea:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 80044ee:	f103 0c10 	addeq.w	ip, r3, #16
 80044f2:	bf18      	it	ne
 80044f4:	f023 0c0f 	bicne.w	ip, r3, #15
 80044f8:	eb04 0209 	add.w	r2, r4, r9
 80044fc:	4661      	mov	r1, ip
 80044fe:	4638      	mov	r0, r7
 8004500:	9201      	str	r2, [sp, #4]
 8004502:	f8cd c000 	str.w	ip, [sp]
 8004506:	f7fd fc61 	bl	8001dcc <_sbrk_r>
 800450a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800450e:	4680      	mov	r8, r0
 8004510:	9a01      	ldr	r2, [sp, #4]
 8004512:	f8dd c000 	ldr.w	ip, [sp]
 8004516:	f000 811d 	beq.w	8004754 <_malloc_r+0x474>
 800451a:	4282      	cmp	r2, r0
 800451c:	f200 8117 	bhi.w	800474e <_malloc_r+0x46e>
 8004520:	f640 2b34 	movw	fp, #2612	; 0xa34
 8004524:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8004528:	4542      	cmp	r2, r8
 800452a:	f8db 3000 	ldr.w	r3, [fp]
 800452e:	4463      	add	r3, ip
 8004530:	f8cb 3000 	str.w	r3, [fp]
 8004534:	f000 815d 	beq.w	80047f2 <_malloc_r+0x512>
 8004538:	f8da 0000 	ldr.w	r0, [sl]
 800453c:	f640 01b0 	movw	r1, #2224	; 0x8b0
 8004540:	3001      	adds	r0, #1
 8004542:	bf18      	it	ne
 8004544:	ebc2 0208 	rsbne	r2, r2, r8
 8004548:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800454c:	bf16      	itet	ne
 800454e:	189b      	addne	r3, r3, r2
 8004550:	f8c1 8000 	streq.w	r8, [r1]
 8004554:	f8cb 3000 	strne.w	r3, [fp]
 8004558:	f018 0307 	ands.w	r3, r8, #7
 800455c:	bf1f      	itttt	ne
 800455e:	f1c3 0208 	rsbne	r2, r3, #8
 8004562:	4490      	addne	r8, r2
 8004564:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 8004568:	f103 0a08 	addne.w	sl, r3, #8
 800456c:	eb08 030c 	add.w	r3, r8, ip
 8004570:	bf08      	it	eq
 8004572:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 8004576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457a:	ebc3 0a0a 	rsb	sl, r3, sl
 800457e:	4651      	mov	r1, sl
 8004580:	4638      	mov	r0, r7
 8004582:	f7fd fc23 	bl	8001dcc <_sbrk_r>
 8004586:	1c43      	adds	r3, r0, #1
 8004588:	bf18      	it	ne
 800458a:	ebc8 0200 	rsbne	r2, r8, r0
 800458e:	f8db 3000 	ldr.w	r3, [fp]
 8004592:	f8c6 8008 	str.w	r8, [r6, #8]
 8004596:	bf15      	itete	ne
 8004598:	4452      	addne	r2, sl
 800459a:	f04f 0a00 	moveq.w	sl, #0
 800459e:	f042 0201 	orrne.w	r2, r2, #1
 80045a2:	2201      	moveq	r2, #1
 80045a4:	4453      	add	r3, sl
 80045a6:	42b4      	cmp	r4, r6
 80045a8:	f640 2a34 	movw	sl, #2612	; 0xa34
 80045ac:	f8c8 2004 	str.w	r2, [r8, #4]
 80045b0:	f8cb 3000 	str.w	r3, [fp]
 80045b4:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 80045b8:	d015      	beq.n	80045e6 <_malloc_r+0x306>
 80045ba:	f1b9 0f0f 	cmp.w	r9, #15
 80045be:	f240 80f8 	bls.w	80047b2 <_malloc_r+0x4d2>
 80045c2:	6861      	ldr	r1, [r4, #4]
 80045c4:	f1a9 020c 	sub.w	r2, r9, #12
 80045c8:	f022 0207 	bic.w	r2, r2, #7
 80045cc:	f001 0e01 	and.w	lr, r1, #1
 80045d0:	18a1      	adds	r1, r4, r2
 80045d2:	2005      	movs	r0, #5
 80045d4:	ea42 0e0e 	orr.w	lr, r2, lr
 80045d8:	2a0f      	cmp	r2, #15
 80045da:	f8c4 e004 	str.w	lr, [r4, #4]
 80045de:	6048      	str	r0, [r1, #4]
 80045e0:	6088      	str	r0, [r1, #8]
 80045e2:	f200 8112 	bhi.w	800480a <_malloc_r+0x52a>
 80045e6:	f640 222c 	movw	r2, #2604	; 0xa2c
 80045ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80045ee:	68b4      	ldr	r4, [r6, #8]
 80045f0:	6811      	ldr	r1, [r2, #0]
 80045f2:	428b      	cmp	r3, r1
 80045f4:	bf88      	it	hi
 80045f6:	6013      	strhi	r3, [r2, #0]
 80045f8:	f640 2228 	movw	r2, #2600	; 0xa28
 80045fc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004600:	6811      	ldr	r1, [r2, #0]
 8004602:	428b      	cmp	r3, r1
 8004604:	bf88      	it	hi
 8004606:	6013      	strhi	r3, [r2, #0]
 8004608:	6862      	ldr	r2, [r4, #4]
 800460a:	f022 0203 	bic.w	r2, r2, #3
 800460e:	4295      	cmp	r5, r2
 8004610:	ebc5 0302 	rsb	r3, r5, r2
 8004614:	d801      	bhi.n	800461a <_malloc_r+0x33a>
 8004616:	2b0f      	cmp	r3, #15
 8004618:	dc04      	bgt.n	8004624 <_malloc_r+0x344>
 800461a:	4638      	mov	r0, r7
 800461c:	f7fd fc08 	bl	8001e30 <__malloc_unlock>
 8004620:	2400      	movs	r4, #0
 8004622:	e693      	b.n	800434c <_malloc_r+0x6c>
 8004624:	1962      	adds	r2, r4, r5
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	f045 0501 	orr.w	r5, r5, #1
 800462e:	6065      	str	r5, [r4, #4]
 8004630:	4638      	mov	r0, r7
 8004632:	60b2      	str	r2, [r6, #8]
 8004634:	6053      	str	r3, [r2, #4]
 8004636:	f7fd fbfb 	bl	8001e30 <__malloc_unlock>
 800463a:	3408      	adds	r4, #8
 800463c:	4620      	mov	r0, r4
 800463e:	b003      	add	sp, #12
 8004640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004644:	4422      	add	r2, r4
 8004646:	68e3      	ldr	r3, [r4, #12]
 8004648:	6850      	ldr	r0, [r2, #4]
 800464a:	68a1      	ldr	r1, [r4, #8]
 800464c:	f040 0501 	orr.w	r5, r0, #1
 8004650:	60cb      	str	r3, [r1, #12]
 8004652:	4638      	mov	r0, r7
 8004654:	6099      	str	r1, [r3, #8]
 8004656:	6055      	str	r5, [r2, #4]
 8004658:	f7fd fbea 	bl	8001e30 <__malloc_unlock>
 800465c:	3408      	adds	r4, #8
 800465e:	4620      	mov	r0, r4
 8004660:	b003      	add	sp, #12
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004666:	f1bc 0f14 	cmp.w	ip, #20
 800466a:	bf9c      	itt	ls
 800466c:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 8004670:	ea4f 014c 	movls.w	r1, ip, lsl #1
 8004674:	f67f ae76 	bls.w	8004364 <_malloc_r+0x84>
 8004678:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 800467c:	f200 808f 	bhi.w	800479e <_malloc_r+0x4be>
 8004680:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 8004684:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8004688:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800468c:	e66a      	b.n	8004364 <_malloc_r+0x84>
 800468e:	0a4b      	lsrs	r3, r1, #9
 8004690:	2b04      	cmp	r3, #4
 8004692:	d958      	bls.n	8004746 <_malloc_r+0x466>
 8004694:	2b14      	cmp	r3, #20
 8004696:	bf9c      	itt	ls
 8004698:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 800469c:	0050      	lslls	r0, r2, #1
 800469e:	d905      	bls.n	80046ac <_malloc_r+0x3cc>
 80046a0:	2b54      	cmp	r3, #84	; 0x54
 80046a2:	f200 80ba 	bhi.w	800481a <_malloc_r+0x53a>
 80046a6:	0b0a      	lsrs	r2, r1, #12
 80046a8:	326e      	adds	r2, #110	; 0x6e
 80046aa:	0050      	lsls	r0, r2, #1
 80046ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80046b0:	f240 48a4 	movw	r8, #1188	; 0x4a4
 80046b4:	6883      	ldr	r3, [r0, #8]
 80046b6:	4283      	cmp	r3, r0
 80046b8:	f2c2 0800 	movt	r8, #8192	; 0x2000
 80046bc:	d07f      	beq.n	80047be <_malloc_r+0x4de>
 80046be:	685a      	ldr	r2, [r3, #4]
 80046c0:	f022 0203 	bic.w	r2, r2, #3
 80046c4:	4291      	cmp	r1, r2
 80046c6:	d202      	bcs.n	80046ce <_malloc_r+0x3ee>
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	4298      	cmp	r0, r3
 80046cc:	d1f7      	bne.n	80046be <_malloc_r+0x3de>
 80046ce:	68d9      	ldr	r1, [r3, #12]
 80046d0:	6872      	ldr	r2, [r6, #4]
 80046d2:	60e1      	str	r1, [r4, #12]
 80046d4:	60a3      	str	r3, [r4, #8]
 80046d6:	608c      	str	r4, [r1, #8]
 80046d8:	60dc      	str	r4, [r3, #12]
 80046da:	e68b      	b.n	80043f4 <_malloc_r+0x114>
 80046dc:	1961      	adds	r1, r4, r5
 80046de:	f042 0601 	orr.w	r6, r2, #1
 80046e2:	f045 0501 	orr.w	r5, r5, #1
 80046e6:	6065      	str	r5, [r4, #4]
 80046e8:	4638      	mov	r0, r7
 80046ea:	6159      	str	r1, [r3, #20]
 80046ec:	6119      	str	r1, [r3, #16]
 80046ee:	f8c1 e00c 	str.w	lr, [r1, #12]
 80046f2:	f8c1 e008 	str.w	lr, [r1, #8]
 80046f6:	604e      	str	r6, [r1, #4]
 80046f8:	508a      	str	r2, [r1, r2]
 80046fa:	3408      	adds	r4, #8
 80046fc:	f7fd fb98 	bl	8001e30 <__malloc_unlock>
 8004700:	e624      	b.n	800434c <_malloc_r+0x6c>
 8004702:	f109 0901 	add.w	r9, r9, #1
 8004706:	f019 0f03 	tst.w	r9, #3
 800470a:	f104 0408 	add.w	r4, r4, #8
 800470e:	f47f ae84 	bne.w	800441a <_malloc_r+0x13a>
 8004712:	e028      	b.n	8004766 <_malloc_r+0x486>
 8004714:	f104 0308 	add.w	r3, r4, #8
 8004718:	6964      	ldr	r4, [r4, #20]
 800471a:	42a3      	cmp	r3, r4
 800471c:	bf08      	it	eq
 800471e:	f10c 0c02 	addeq.w	ip, ip, #2
 8004722:	f43f ae39 	beq.w	8004398 <_malloc_r+0xb8>
 8004726:	e601      	b.n	800432c <_malloc_r+0x4c>
 8004728:	4419      	add	r1, r3
 800472a:	461c      	mov	r4, r3
 800472c:	6848      	ldr	r0, [r1, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8004734:	f040 0501 	orr.w	r5, r0, #1
 8004738:	604d      	str	r5, [r1, #4]
 800473a:	4638      	mov	r0, r7
 800473c:	60d3      	str	r3, [r2, #12]
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	f7fd fb76 	bl	8001e30 <__malloc_unlock>
 8004744:	e602      	b.n	800434c <_malloc_r+0x6c>
 8004746:	098a      	lsrs	r2, r1, #6
 8004748:	3238      	adds	r2, #56	; 0x38
 800474a:	0050      	lsls	r0, r2, #1
 800474c:	e7ae      	b.n	80046ac <_malloc_r+0x3cc>
 800474e:	42b4      	cmp	r4, r6
 8004750:	f43f aee6 	beq.w	8004520 <_malloc_r+0x240>
 8004754:	68b4      	ldr	r4, [r6, #8]
 8004756:	6862      	ldr	r2, [r4, #4]
 8004758:	f022 0203 	bic.w	r2, r2, #3
 800475c:	e757      	b.n	800460e <_malloc_r+0x32e>
 800475e:	f8d8 8000 	ldr.w	r8, [r8]
 8004762:	4598      	cmp	r8, r3
 8004764:	d16b      	bne.n	800483e <_malloc_r+0x55e>
 8004766:	f01c 0f03 	tst.w	ip, #3
 800476a:	f1a8 0308 	sub.w	r3, r8, #8
 800476e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004772:	d1f4      	bne.n	800475e <_malloc_r+0x47e>
 8004774:	6873      	ldr	r3, [r6, #4]
 8004776:	ea23 0300 	bic.w	r3, r3, r0
 800477a:	6073      	str	r3, [r6, #4]
 800477c:	0040      	lsls	r0, r0, #1
 800477e:	4298      	cmp	r0, r3
 8004780:	f63f ae97 	bhi.w	80044b2 <_malloc_r+0x1d2>
 8004784:	2800      	cmp	r0, #0
 8004786:	f43f ae94 	beq.w	80044b2 <_malloc_r+0x1d2>
 800478a:	4203      	tst	r3, r0
 800478c:	46cc      	mov	ip, r9
 800478e:	f47f ae40 	bne.w	8004412 <_malloc_r+0x132>
 8004792:	0040      	lsls	r0, r0, #1
 8004794:	4203      	tst	r3, r0
 8004796:	f10c 0c04 	add.w	ip, ip, #4
 800479a:	d0fa      	beq.n	8004792 <_malloc_r+0x4b2>
 800479c:	e639      	b.n	8004412 <_malloc_r+0x132>
 800479e:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80047a2:	d817      	bhi.n	80047d4 <_malloc_r+0x4f4>
 80047a4:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 80047a8:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80047ac:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80047b0:	e5d8      	b.n	8004364 <_malloc_r+0x84>
 80047b2:	2301      	movs	r3, #1
 80047b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80047b8:	4644      	mov	r4, r8
 80047ba:	2200      	movs	r2, #0
 80047bc:	e727      	b.n	800460e <_malloc_r+0x32e>
 80047be:	1091      	asrs	r1, r2, #2
 80047c0:	2001      	movs	r0, #1
 80047c2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80047c6:	fa00 f101 	lsl.w	r1, r0, r1
 80047ca:	430a      	orrs	r2, r1
 80047cc:	f8c8 2004 	str.w	r2, [r8, #4]
 80047d0:	4619      	mov	r1, r3
 80047d2:	e77e      	b.n	80046d2 <_malloc_r+0x3f2>
 80047d4:	f240 5354 	movw	r3, #1364	; 0x554
 80047d8:	459c      	cmp	ip, r3
 80047da:	bf9d      	ittte	ls
 80047dc:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 80047e0:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 80047e4:	ea4f 014c 	movls.w	r1, ip, lsl #1
 80047e8:	21fc      	movhi	r1, #252	; 0xfc
 80047ea:	bf88      	it	hi
 80047ec:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 80047f0:	e5b8      	b.n	8004364 <_malloc_r+0x84>
 80047f2:	f3c2 010b 	ubfx	r1, r2, #0, #12
 80047f6:	2900      	cmp	r1, #0
 80047f8:	f47f ae9e 	bne.w	8004538 <_malloc_r+0x258>
 80047fc:	eb0c 0109 	add.w	r1, ip, r9
 8004800:	68b2      	ldr	r2, [r6, #8]
 8004802:	f041 0101 	orr.w	r1, r1, #1
 8004806:	6051      	str	r1, [r2, #4]
 8004808:	e6ed      	b.n	80045e6 <_malloc_r+0x306>
 800480a:	f104 0108 	add.w	r1, r4, #8
 800480e:	4638      	mov	r0, r7
 8004810:	f002 fc50 	bl	80070b4 <_free_r>
 8004814:	f8da 3000 	ldr.w	r3, [sl]
 8004818:	e6e5      	b.n	80045e6 <_malloc_r+0x306>
 800481a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800481e:	d803      	bhi.n	8004828 <_malloc_r+0x548>
 8004820:	0bca      	lsrs	r2, r1, #15
 8004822:	3277      	adds	r2, #119	; 0x77
 8004824:	0050      	lsls	r0, r2, #1
 8004826:	e741      	b.n	80046ac <_malloc_r+0x3cc>
 8004828:	f240 5254 	movw	r2, #1364	; 0x554
 800482c:	4293      	cmp	r3, r2
 800482e:	bf9d      	ittte	ls
 8004830:	0c8a      	lsrls	r2, r1, #18
 8004832:	327c      	addls	r2, #124	; 0x7c
 8004834:	0050      	lslls	r0, r2, #1
 8004836:	20fc      	movhi	r0, #252	; 0xfc
 8004838:	bf88      	it	hi
 800483a:	227e      	movhi	r2, #126	; 0x7e
 800483c:	e736      	b.n	80046ac <_malloc_r+0x3cc>
 800483e:	6873      	ldr	r3, [r6, #4]
 8004840:	e79c      	b.n	800477c <_malloc_r+0x49c>
 8004842:	bf00      	nop

08004844 <memset>:
 8004844:	b4f0      	push	{r4, r5, r6, r7}
 8004846:	0784      	lsls	r4, r0, #30
 8004848:	d043      	beq.n	80048d2 <memset+0x8e>
 800484a:	1e54      	subs	r4, r2, #1
 800484c:	2a00      	cmp	r2, #0
 800484e:	d03e      	beq.n	80048ce <memset+0x8a>
 8004850:	b2cd      	uxtb	r5, r1
 8004852:	4603      	mov	r3, r0
 8004854:	e003      	b.n	800485e <memset+0x1a>
 8004856:	1e62      	subs	r2, r4, #1
 8004858:	2c00      	cmp	r4, #0
 800485a:	d038      	beq.n	80048ce <memset+0x8a>
 800485c:	4614      	mov	r4, r2
 800485e:	f803 5b01 	strb.w	r5, [r3], #1
 8004862:	079a      	lsls	r2, r3, #30
 8004864:	d1f7      	bne.n	8004856 <memset+0x12>
 8004866:	2c03      	cmp	r4, #3
 8004868:	d92a      	bls.n	80048c0 <memset+0x7c>
 800486a:	b2cd      	uxtb	r5, r1
 800486c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004870:	2c0f      	cmp	r4, #15
 8004872:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004876:	d915      	bls.n	80048a4 <memset+0x60>
 8004878:	f1a4 0710 	sub.w	r7, r4, #16
 800487c:	093f      	lsrs	r7, r7, #4
 800487e:	f103 0610 	add.w	r6, r3, #16
 8004882:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8004886:	461a      	mov	r2, r3
 8004888:	6015      	str	r5, [r2, #0]
 800488a:	6055      	str	r5, [r2, #4]
 800488c:	6095      	str	r5, [r2, #8]
 800488e:	60d5      	str	r5, [r2, #12]
 8004890:	3210      	adds	r2, #16
 8004892:	42b2      	cmp	r2, r6
 8004894:	d1f8      	bne.n	8004888 <memset+0x44>
 8004896:	f004 040f 	and.w	r4, r4, #15
 800489a:	3701      	adds	r7, #1
 800489c:	2c03      	cmp	r4, #3
 800489e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80048a2:	d90d      	bls.n	80048c0 <memset+0x7c>
 80048a4:	461e      	mov	r6, r3
 80048a6:	4622      	mov	r2, r4
 80048a8:	3a04      	subs	r2, #4
 80048aa:	2a03      	cmp	r2, #3
 80048ac:	f846 5b04 	str.w	r5, [r6], #4
 80048b0:	d8fa      	bhi.n	80048a8 <memset+0x64>
 80048b2:	1f22      	subs	r2, r4, #4
 80048b4:	f022 0203 	bic.w	r2, r2, #3
 80048b8:	3204      	adds	r2, #4
 80048ba:	4413      	add	r3, r2
 80048bc:	f004 0403 	and.w	r4, r4, #3
 80048c0:	b12c      	cbz	r4, 80048ce <memset+0x8a>
 80048c2:	b2c9      	uxtb	r1, r1
 80048c4:	441c      	add	r4, r3
 80048c6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ca:	42a3      	cmp	r3, r4
 80048cc:	d1fb      	bne.n	80048c6 <memset+0x82>
 80048ce:	bcf0      	pop	{r4, r5, r6, r7}
 80048d0:	4770      	bx	lr
 80048d2:	4614      	mov	r4, r2
 80048d4:	4603      	mov	r3, r0
 80048d6:	e7c6      	b.n	8004866 <memset+0x22>

080048d8 <strlen>:
 80048d8:	f020 0103 	bic.w	r1, r0, #3
 80048dc:	f010 0003 	ands.w	r0, r0, #3
 80048e0:	f1c0 0000 	rsb	r0, r0, #0
 80048e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80048e8:	f100 0c04 	add.w	ip, r0, #4
 80048ec:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80048f0:	f06f 0200 	mvn.w	r2, #0
 80048f4:	bf1c      	itt	ne
 80048f6:	fa22 f20c 	lsrne.w	r2, r2, ip
 80048fa:	4313      	orrne	r3, r2
 80048fc:	f04f 0c01 	mov.w	ip, #1
 8004900:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004904:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004908:	eba3 020c 	sub.w	r2, r3, ip
 800490c:	ea22 0203 	bic.w	r2, r2, r3
 8004910:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004914:	bf04      	itt	eq
 8004916:	f851 3b04 	ldreq.w	r3, [r1], #4
 800491a:	3004      	addeq	r0, #4
 800491c:	d0f4      	beq.n	8004908 <strlen+0x30>
 800491e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004922:	bf1f      	itttt	ne
 8004924:	3001      	addne	r0, #1
 8004926:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800492a:	3001      	addne	r0, #1
 800492c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8004930:	bf18      	it	ne
 8004932:	3001      	addne	r0, #1
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop

08004938 <strncpy>:
 8004938:	ea40 0301 	orr.w	r3, r0, r1
 800493c:	079b      	lsls	r3, r3, #30
 800493e:	b470      	push	{r4, r5, r6}
 8004940:	d12b      	bne.n	800499a <strncpy+0x62>
 8004942:	2a03      	cmp	r2, #3
 8004944:	bf84      	itt	hi
 8004946:	460c      	movhi	r4, r1
 8004948:	4603      	movhi	r3, r0
 800494a:	d926      	bls.n	800499a <strncpy+0x62>
 800494c:	4621      	mov	r1, r4
 800494e:	f854 5b04 	ldr.w	r5, [r4], #4
 8004952:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 8004956:	ea26 0605 	bic.w	r6, r6, r5
 800495a:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 800495e:	d105      	bne.n	800496c <strncpy+0x34>
 8004960:	3a04      	subs	r2, #4
 8004962:	2a03      	cmp	r2, #3
 8004964:	f843 5b04 	str.w	r5, [r3], #4
 8004968:	4621      	mov	r1, r4
 800496a:	d8ef      	bhi.n	800494c <strncpy+0x14>
 800496c:	b19a      	cbz	r2, 8004996 <strncpy+0x5e>
 800496e:	780c      	ldrb	r4, [r1, #0]
 8004970:	3a01      	subs	r2, #1
 8004972:	701c      	strb	r4, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	b13c      	cbz	r4, 8004988 <strncpy+0x50>
 8004978:	b16a      	cbz	r2, 8004996 <strncpy+0x5e>
 800497a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800497e:	3a01      	subs	r2, #1
 8004980:	f803 4b01 	strb.w	r4, [r3], #1
 8004984:	2c00      	cmp	r4, #0
 8004986:	d1f7      	bne.n	8004978 <strncpy+0x40>
 8004988:	b12a      	cbz	r2, 8004996 <strncpy+0x5e>
 800498a:	441a      	add	r2, r3
 800498c:	2100      	movs	r1, #0
 800498e:	f803 1b01 	strb.w	r1, [r3], #1
 8004992:	4293      	cmp	r3, r2
 8004994:	d1fb      	bne.n	800498e <strncpy+0x56>
 8004996:	bc70      	pop	{r4, r5, r6}
 8004998:	4770      	bx	lr
 800499a:	4603      	mov	r3, r0
 800499c:	e7e6      	b.n	800496c <strncpy+0x34>
 800499e:	bf00      	nop

080049a0 <_svfprintf_r>:
 80049a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a4:	b0c7      	sub	sp, #284	; 0x11c
 80049a6:	4693      	mov	fp, r2
 80049a8:	910a      	str	r1, [sp, #40]	; 0x28
 80049aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80049ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80049ae:	f002 fc4f 	bl	8007250 <_localeconv_r>
 80049b2:	6800      	ldr	r0, [r0, #0]
 80049b4:	9019      	str	r0, [sp, #100]	; 0x64
 80049b6:	f7ff ff8f 	bl	80048d8 <strlen>
 80049ba:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80049bc:	901c      	str	r0, [sp, #112]	; 0x70
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	0619      	lsls	r1, r3, #24
 80049c2:	d503      	bpl.n	80049cc <_svfprintf_r+0x2c>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f001 807f 	beq.w	8005aca <_svfprintf_r+0x112a>
 80049cc:	f10d 04d7 	add.w	r4, sp, #215	; 0xd7
 80049d0:	ad36      	add	r5, sp, #216	; 0xd8
 80049d2:	9407      	str	r4, [sp, #28]
 80049d4:	9508      	str	r5, [sp, #32]
 80049d6:	9d07      	ldr	r5, [sp, #28]
 80049d8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80049dc:	a836      	add	r0, sp, #216	; 0xd8
 80049de:	1b44      	subs	r4, r0, r5
 80049e0:	f248 49c8 	movw	r9, #33992	; 0x84c8
 80049e4:	941f      	str	r4, [sp, #124]	; 0x7c
 80049e6:	f248 5518 	movw	r5, #34072	; 0x8518
 80049ea:	f248 541c 	movw	r4, #34076	; 0x851c
 80049ee:	2300      	movs	r3, #0
 80049f0:	f6c0 0400 	movt	r4, #2048	; 0x800
 80049f4:	f6c0 0900 	movt	r9, #2048	; 0x800
 80049f8:	f6c0 0500 	movt	r5, #2048	; 0x800
 80049fc:	9310      	str	r3, [sp, #64]	; 0x40
 80049fe:	932b      	str	r3, [sp, #172]	; 0xac
 8004a00:	932a      	str	r3, [sp, #168]	; 0xa8
 8004a02:	931a      	str	r3, [sp, #104]	; 0x68
 8004a04:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a06:	9318      	str	r3, [sp, #96]	; 0x60
 8004a08:	931d      	str	r3, [sp, #116]	; 0x74
 8004a0a:	9311      	str	r3, [sp, #68]	; 0x44
 8004a0c:	9029      	str	r0, [sp, #164]	; 0xa4
 8004a0e:	9415      	str	r4, [sp, #84]	; 0x54
 8004a10:	9516      	str	r5, [sp, #88]	; 0x58
 8004a12:	4606      	mov	r6, r0
 8004a14:	464f      	mov	r7, r9
 8004a16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004a18:	7823      	ldrb	r3, [r4, #0]
 8004a1a:	2b25      	cmp	r3, #37	; 0x25
 8004a1c:	bf18      	it	ne
 8004a1e:	2b00      	cmpne	r3, #0
 8004a20:	f000 80b3 	beq.w	8004b8a <_svfprintf_r+0x1ea>
 8004a24:	1c62      	adds	r2, r4, #1
 8004a26:	4614      	mov	r4, r2
 8004a28:	3201      	adds	r2, #1
 8004a2a:	7823      	ldrb	r3, [r4, #0]
 8004a2c:	2b25      	cmp	r3, #37	; 0x25
 8004a2e:	bf18      	it	ne
 8004a30:	2b00      	cmpne	r3, #0
 8004a32:	d1f8      	bne.n	8004a26 <_svfprintf_r+0x86>
 8004a34:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004a36:	1a25      	subs	r5, r4, r0
 8004a38:	d00f      	beq.n	8004a5a <_svfprintf_r+0xba>
 8004a3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004a3c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8004a3e:	6030      	str	r0, [r6, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	442a      	add	r2, r5
 8004a44:	2b07      	cmp	r3, #7
 8004a46:	6075      	str	r5, [r6, #4]
 8004a48:	922b      	str	r2, [sp, #172]	; 0xac
 8004a4a:	932a      	str	r3, [sp, #168]	; 0xa8
 8004a4c:	bfd8      	it	le
 8004a4e:	3608      	addle	r6, #8
 8004a50:	f300 8081 	bgt.w	8004b56 <_svfprintf_r+0x1b6>
 8004a54:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004a56:	4429      	add	r1, r5
 8004a58:	9111      	str	r1, [sp, #68]	; 0x44
 8004a5a:	7823      	ldrb	r3, [r4, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8082 	beq.w	8004b66 <_svfprintf_r+0x1c6>
 8004a62:	2300      	movs	r3, #0
 8004a64:	1c65      	adds	r5, r4, #1
 8004a66:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004a6a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8004a6e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004a72:	461a      	mov	r2, r3
 8004a74:	9312      	str	r3, [sp, #72]	; 0x48
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	950b      	str	r5, [sp, #44]	; 0x2c
 8004a7a:	940c      	str	r4, [sp, #48]	; 0x30
 8004a7c:	462b      	mov	r3, r5
 8004a7e:	3301      	adds	r3, #1
 8004a80:	f1a9 0120 	sub.w	r1, r9, #32
 8004a84:	2958      	cmp	r1, #88	; 0x58
 8004a86:	f200 8402 	bhi.w	800528e <_svfprintf_r+0x8ee>
 8004a8a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004a8e:	03e4      	.short	0x03e4
 8004a90:	04000400 	.word	0x04000400
 8004a94:	040003eb 	.word	0x040003eb
 8004a98:	04000400 	.word	0x04000400
 8004a9c:	04000400 	.word	0x04000400
 8004aa0:	03f20400 	.word	0x03f20400
 8004aa4:	04000399 	.word	0x04000399
 8004aa8:	022d005d 	.word	0x022d005d
 8004aac:	026c0400 	.word	0x026c0400
 8004ab0:	02730273 	.word	0x02730273
 8004ab4:	02730273 	.word	0x02730273
 8004ab8:	02730273 	.word	0x02730273
 8004abc:	02730273 	.word	0x02730273
 8004ac0:	04000273 	.word	0x04000273
 8004ac4:	04000400 	.word	0x04000400
 8004ac8:	04000400 	.word	0x04000400
 8004acc:	04000400 	.word	0x04000400
 8004ad0:	04000400 	.word	0x04000400
 8004ad4:	024e0400 	.word	0x024e0400
 8004ad8:	0400028b 	.word	0x0400028b
 8004adc:	0400028b 	.word	0x0400028b
 8004ae0:	04000400 	.word	0x04000400
 8004ae4:	02840400 	.word	0x02840400
 8004ae8:	04000400 	.word	0x04000400
 8004aec:	040002c8 	.word	0x040002c8
 8004af0:	04000400 	.word	0x04000400
 8004af4:	04000400 	.word	0x04000400
 8004af8:	040002e3 	.word	0x040002e3
 8004afc:	02fb0400 	.word	0x02fb0400
 8004b00:	04000400 	.word	0x04000400
 8004b04:	04000400 	.word	0x04000400
 8004b08:	04000400 	.word	0x04000400
 8004b0c:	04000400 	.word	0x04000400
 8004b10:	04000400 	.word	0x04000400
 8004b14:	03380322 	.word	0x03380322
 8004b18:	028b028b 	.word	0x028b028b
 8004b1c:	03dd028b 	.word	0x03dd028b
 8004b20:	04000338 	.word	0x04000338
 8004b24:	039d0400 	.word	0x039d0400
 8004b28:	03b10400 	.word	0x03b10400
 8004b2c:	03c5021c 	.word	0x03c5021c
 8004b30:	04000350 	.word	0x04000350
 8004b34:	04000357 	.word	0x04000357
 8004b38:	04000080 	.word	0x04000080
 8004b3c:	037f0400 	.word	0x037f0400
 8004b40:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004b42:	9113      	str	r1, [sp, #76]	; 0x4c
 8004b44:	4264      	negs	r4, r4
 8004b46:	9412      	str	r4, [sp, #72]	; 0x48
 8004b48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b4a:	f045 0504 	orr.w	r5, r5, #4
 8004b4e:	9509      	str	r5, [sp, #36]	; 0x24
 8004b50:	f893 9000 	ldrb.w	r9, [r3]
 8004b54:	e793      	b.n	8004a7e <_svfprintf_r+0xde>
 8004b56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004b58:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b5a:	aa29      	add	r2, sp, #164	; 0xa4
 8004b5c:	f002 ff02 	bl	8007964 <__ssprint_r>
 8004b60:	b940      	cbnz	r0, 8004b74 <_svfprintf_r+0x1d4>
 8004b62:	ae36      	add	r6, sp, #216	; 0xd8
 8004b64:	e776      	b.n	8004a54 <_svfprintf_r+0xb4>
 8004b66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8004b68:	b123      	cbz	r3, 8004b74 <_svfprintf_r+0x1d4>
 8004b6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004b6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b6e:	aa29      	add	r2, sp, #164	; 0xa4
 8004b70:	f002 fef8 	bl	8007964 <__ssprint_r>
 8004b74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004b76:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b7e:	bf18      	it	ne
 8004b80:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004b84:	b047      	add	sp, #284	; 0x11c
 8004b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004b8c:	e765      	b.n	8004a5a <_svfprintf_r+0xba>
 8004b8e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b92:	06a3      	lsls	r3, r4, #26
 8004b94:	f140 8267 	bpl.w	8005066 <_svfprintf_r+0x6c6>
 8004b98:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004b9a:	1deb      	adds	r3, r5, #7
 8004b9c:	f023 0307 	bic.w	r3, r3, #7
 8004ba0:	f103 0408 	add.w	r4, r3, #8
 8004ba4:	9413      	str	r4, [sp, #76]	; 0x4c
 8004ba6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004baa:	2301      	movs	r3, #1
 8004bac:	f04f 0a00 	mov.w	sl, #0
 8004bb0:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8004bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	bfa2      	ittt	ge
 8004bba:	9809      	ldrge	r0, [sp, #36]	; 0x24
 8004bbc:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8004bc0:	9009      	strge	r0, [sp, #36]	; 0x24
 8004bc2:	ea54 0105 	orrs.w	r1, r4, r5
 8004bc6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004bc8:	bf0c      	ite	eq
 8004bca:	2200      	moveq	r2, #0
 8004bcc:	2201      	movne	r2, #1
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	bf18      	it	ne
 8004bd2:	f042 0201 	orrne.w	r2, r2, #1
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	f000 83df 	beq.w	800539a <_svfprintf_r+0x9fa>
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f000 850c 	beq.w	80055fa <_svfprintf_r+0xc5a>
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	f10d 02d7 	add.w	r2, sp, #215	; 0xd7
 8004be8:	f040 8151 	bne.w	8004e8e <_svfprintf_r+0x4ee>
 8004bec:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004bee:	f004 010f 	and.w	r1, r4, #15
 8004bf2:	0923      	lsrs	r3, r4, #4
 8004bf4:	4690      	mov	r8, r2
 8004bf6:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004bfa:	5c42      	ldrb	r2, [r0, r1]
 8004bfc:	0929      	lsrs	r1, r5, #4
 8004bfe:	461c      	mov	r4, r3
 8004c00:	460d      	mov	r5, r1
 8004c02:	ea54 0105 	orrs.w	r1, r4, r5
 8004c06:	f888 2000 	strb.w	r2, [r8]
 8004c0a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004c0e:	d1ee      	bne.n	8004bee <_svfprintf_r+0x24e>
 8004c10:	9b08      	ldr	r3, [sp, #32]
 8004c12:	ebc8 0303 	rsb	r3, r8, r3
 8004c16:	930e      	str	r3, [sp, #56]	; 0x38
 8004c18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004c1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004c1c:	42a5      	cmp	r5, r4
 8004c1e:	bfb8      	it	lt
 8004c20:	4625      	movlt	r5, r4
 8004c22:	2400      	movs	r4, #0
 8004c24:	950d      	str	r5, [sp, #52]	; 0x34
 8004c26:	9417      	str	r4, [sp, #92]	; 0x5c
 8004c28:	f1ba 0f00 	cmp.w	sl, #0
 8004c2c:	d002      	beq.n	8004c34 <_svfprintf_r+0x294>
 8004c2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004c30:	3401      	adds	r4, #1
 8004c32:	940d      	str	r4, [sp, #52]	; 0x34
 8004c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c36:	f015 0b02 	ands.w	fp, r5, #2
 8004c3a:	bf18      	it	ne
 8004c3c:	9c0d      	ldrne	r4, [sp, #52]	; 0x34
 8004c3e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c40:	bf1c      	itt	ne
 8004c42:	3402      	addne	r4, #2
 8004c44:	940d      	strne	r4, [sp, #52]	; 0x34
 8004c46:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 8004c4a:	9514      	str	r5, [sp, #80]	; 0x50
 8004c4c:	f040 8334 	bne.w	80052b8 <_svfprintf_r+0x918>
 8004c50:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004c52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c54:	1a2c      	subs	r4, r5, r0
 8004c56:	2c00      	cmp	r4, #0
 8004c58:	f340 832e 	ble.w	80052b8 <_svfprintf_r+0x918>
 8004c5c:	2c10      	cmp	r4, #16
 8004c5e:	f248 5a1c 	movw	sl, #34076	; 0x851c
 8004c62:	f340 87d6 	ble.w	8005c12 <_svfprintf_r+0x1272>
 8004c66:	4630      	mov	r0, r6
 8004c68:	971e      	str	r7, [sp, #120]	; 0x78
 8004c6a:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004c6c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004c6e:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004c70:	4627      	mov	r7, r4
 8004c72:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004c76:	2510      	movs	r5, #16
 8004c78:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004c7a:	e002      	b.n	8004c82 <_svfprintf_r+0x2e2>
 8004c7c:	3f10      	subs	r7, #16
 8004c7e:	2f10      	cmp	r7, #16
 8004c80:	dd17      	ble.n	8004cb2 <_svfprintf_r+0x312>
 8004c82:	3201      	adds	r2, #1
 8004c84:	3110      	adds	r1, #16
 8004c86:	2a07      	cmp	r2, #7
 8004c88:	6006      	str	r6, [r0, #0]
 8004c8a:	6045      	str	r5, [r0, #4]
 8004c8c:	912b      	str	r1, [sp, #172]	; 0xac
 8004c8e:	922a      	str	r2, [sp, #168]	; 0xa8
 8004c90:	bfd8      	it	le
 8004c92:	3008      	addle	r0, #8
 8004c94:	ddf2      	ble.n	8004c7c <_svfprintf_r+0x2dc>
 8004c96:	4620      	mov	r0, r4
 8004c98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c9a:	aa29      	add	r2, sp, #164	; 0xa4
 8004c9c:	f002 fe62 	bl	8007964 <__ssprint_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	f47f af67 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8004ca6:	3f10      	subs	r7, #16
 8004ca8:	2f10      	cmp	r7, #16
 8004caa:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004cac:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004cae:	a836      	add	r0, sp, #216	; 0xd8
 8004cb0:	dce7      	bgt.n	8004c82 <_svfprintf_r+0x2e2>
 8004cb2:	463c      	mov	r4, r7
 8004cb4:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	3201      	adds	r2, #1
 8004cba:	4421      	add	r1, r4
 8004cbc:	2a07      	cmp	r2, #7
 8004cbe:	912b      	str	r1, [sp, #172]	; 0xac
 8004cc0:	922a      	str	r2, [sp, #168]	; 0xa8
 8004cc2:	f8c6 a000 	str.w	sl, [r6]
 8004cc6:	6074      	str	r4, [r6, #4]
 8004cc8:	f300 84a5 	bgt.w	8005616 <_svfprintf_r+0xc76>
 8004ccc:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8004cd0:	3608      	adds	r6, #8
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	f1ba 0f00 	cmp.w	sl, #0
 8004cd8:	d00e      	beq.n	8004cf8 <_svfprintf_r+0x358>
 8004cda:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004cdc:	3301      	adds	r3, #1
 8004cde:	3401      	adds	r4, #1
 8004ce0:	f10d 0187 	add.w	r1, sp, #135	; 0x87
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2b07      	cmp	r3, #7
 8004ce8:	e886 0006 	stmia.w	r6, {r1, r2}
 8004cec:	942b      	str	r4, [sp, #172]	; 0xac
 8004cee:	932a      	str	r3, [sp, #168]	; 0xa8
 8004cf0:	bfd8      	it	le
 8004cf2:	3608      	addle	r6, #8
 8004cf4:	f300 82e2 	bgt.w	80052bc <_svfprintf_r+0x91c>
 8004cf8:	f1bb 0f00 	cmp.w	fp, #0
 8004cfc:	d00d      	beq.n	8004d1a <_svfprintf_r+0x37a>
 8004cfe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d00:	3301      	adds	r3, #1
 8004d02:	3402      	adds	r4, #2
 8004d04:	a922      	add	r1, sp, #136	; 0x88
 8004d06:	2202      	movs	r2, #2
 8004d08:	2b07      	cmp	r3, #7
 8004d0a:	e886 0006 	stmia.w	r6, {r1, r2}
 8004d0e:	942b      	str	r4, [sp, #172]	; 0xac
 8004d10:	932a      	str	r3, [sp, #168]	; 0xa8
 8004d12:	bfd8      	it	le
 8004d14:	3608      	addle	r6, #8
 8004d16:	f300 840d 	bgt.w	8005534 <_svfprintf_r+0xb94>
 8004d1a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	f000 834f 	beq.w	80053c0 <_svfprintf_r+0xa20>
 8004d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d26:	ebc3 0a05 	rsb	sl, r3, r5
 8004d2a:	f1ba 0f00 	cmp.w	sl, #0
 8004d2e:	dd44      	ble.n	8004dba <_svfprintf_r+0x41a>
 8004d30:	f1ba 0f10 	cmp.w	sl, #16
 8004d34:	f248 45c8 	movw	r5, #33992	; 0x84c8
 8004d38:	bfdc      	itt	le
 8004d3a:	f6c0 0500 	movtle	r5, #2048	; 0x800
 8004d3e:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 8004d40:	dd27      	ble.n	8004d92 <_svfprintf_r+0x3f2>
 8004d42:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004d46:	4622      	mov	r2, r4
 8004d48:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d4a:	4654      	mov	r4, sl
 8004d4c:	f04f 0b10 	mov.w	fp, #16
 8004d50:	46aa      	mov	sl, r5
 8004d52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004d54:	e002      	b.n	8004d5c <_svfprintf_r+0x3bc>
 8004d56:	3c10      	subs	r4, #16
 8004d58:	2c10      	cmp	r4, #16
 8004d5a:	dd17      	ble.n	8004d8c <_svfprintf_r+0x3ec>
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	3210      	adds	r2, #16
 8004d60:	2b07      	cmp	r3, #7
 8004d62:	e886 0880 	stmia.w	r6, {r7, fp}
 8004d66:	922b      	str	r2, [sp, #172]	; 0xac
 8004d68:	932a      	str	r3, [sp, #168]	; 0xa8
 8004d6a:	bfd8      	it	le
 8004d6c:	3608      	addle	r6, #8
 8004d6e:	ddf2      	ble.n	8004d56 <_svfprintf_r+0x3b6>
 8004d70:	4628      	mov	r0, r5
 8004d72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004d74:	aa29      	add	r2, sp, #164	; 0xa4
 8004d76:	f002 fdf5 	bl	8007964 <__ssprint_r>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	f47f aefa 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8004d80:	3c10      	subs	r4, #16
 8004d82:	2c10      	cmp	r4, #16
 8004d84:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8004d86:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d88:	ae36      	add	r6, sp, #216	; 0xd8
 8004d8a:	dce7      	bgt.n	8004d5c <_svfprintf_r+0x3bc>
 8004d8c:	4655      	mov	r5, sl
 8004d8e:	46a2      	mov	sl, r4
 8004d90:	4614      	mov	r4, r2
 8004d92:	3301      	adds	r3, #1
 8004d94:	4454      	add	r4, sl
 8004d96:	2b07      	cmp	r3, #7
 8004d98:	e886 0420 	stmia.w	r6, {r5, sl}
 8004d9c:	942b      	str	r4, [sp, #172]	; 0xac
 8004d9e:	932a      	str	r3, [sp, #168]	; 0xa8
 8004da0:	bfd8      	it	le
 8004da2:	3608      	addle	r6, #8
 8004da4:	dd09      	ble.n	8004dba <_svfprintf_r+0x41a>
 8004da6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004da8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004daa:	aa29      	add	r2, sp, #164	; 0xa4
 8004dac:	f002 fdda 	bl	8007964 <__ssprint_r>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	f47f aedf 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8004db6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004db8:	ae36      	add	r6, sp, #216	; 0xd8
 8004dba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dbc:	05ea      	lsls	r2, r5, #23
 8004dbe:	f100 8288 	bmi.w	80052d2 <_svfprintf_r+0x932>
 8004dc2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004dc4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004dc6:	f8c6 8000 	str.w	r8, [r6]
 8004dca:	3301      	adds	r3, #1
 8004dcc:	442c      	add	r4, r5
 8004dce:	2b07      	cmp	r3, #7
 8004dd0:	942b      	str	r4, [sp, #172]	; 0xac
 8004dd2:	6075      	str	r5, [r6, #4]
 8004dd4:	932a      	str	r3, [sp, #168]	; 0xa8
 8004dd6:	f300 8393 	bgt.w	8005500 <_svfprintf_r+0xb60>
 8004dda:	3608      	adds	r6, #8
 8004ddc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004dde:	076b      	lsls	r3, r5, #29
 8004de0:	d546      	bpl.n	8004e70 <_svfprintf_r+0x4d0>
 8004de2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004de4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004de6:	1a45      	subs	r5, r0, r1
 8004de8:	2d00      	cmp	r5, #0
 8004dea:	dd41      	ble.n	8004e70 <_svfprintf_r+0x4d0>
 8004dec:	2d10      	cmp	r5, #16
 8004dee:	f248 5a1c 	movw	sl, #34076	; 0x851c
 8004df2:	bfdc      	itt	le
 8004df4:	f6c0 0a00 	movtle	sl, #2048	; 0x800
 8004df8:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 8004dfa:	dd27      	ble.n	8004e4c <_svfprintf_r+0x4ac>
 8004dfc:	9709      	str	r7, [sp, #36]	; 0x24
 8004dfe:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e00:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004e04:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004e08:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004e0a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004e0e:	f04f 0810 	mov.w	r8, #16
 8004e12:	e002      	b.n	8004e1a <_svfprintf_r+0x47a>
 8004e14:	3d10      	subs	r5, #16
 8004e16:	2d10      	cmp	r5, #16
 8004e18:	dd17      	ble.n	8004e4a <_svfprintf_r+0x4aa>
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	3410      	adds	r4, #16
 8004e1e:	2b07      	cmp	r3, #7
 8004e20:	e886 0180 	stmia.w	r6, {r7, r8}
 8004e24:	942b      	str	r4, [sp, #172]	; 0xac
 8004e26:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e28:	bfd8      	it	le
 8004e2a:	3608      	addle	r6, #8
 8004e2c:	ddf2      	ble.n	8004e14 <_svfprintf_r+0x474>
 8004e2e:	4648      	mov	r0, r9
 8004e30:	4659      	mov	r1, fp
 8004e32:	aa29      	add	r2, sp, #164	; 0xa4
 8004e34:	f002 fd96 	bl	8007964 <__ssprint_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	f47f ae9b 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8004e3e:	3d10      	subs	r5, #16
 8004e40:	2d10      	cmp	r5, #16
 8004e42:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004e44:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e46:	ae36      	add	r6, sp, #216	; 0xd8
 8004e48:	dce7      	bgt.n	8004e1a <_svfprintf_r+0x47a>
 8004e4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	442c      	add	r4, r5
 8004e50:	2b07      	cmp	r3, #7
 8004e52:	942b      	str	r4, [sp, #172]	; 0xac
 8004e54:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e56:	f8c6 a000 	str.w	sl, [r6]
 8004e5a:	6075      	str	r5, [r6, #4]
 8004e5c:	dd08      	ble.n	8004e70 <_svfprintf_r+0x4d0>
 8004e5e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004e60:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e62:	aa29      	add	r2, sp, #164	; 0xa4
 8004e64:	f002 fd7e 	bl	8007964 <__ssprint_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	f47f ae83 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8004e6e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004e70:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004e72:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e74:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004e76:	4281      	cmp	r1, r0
 8004e78:	bfac      	ite	ge
 8004e7a:	186d      	addge	r5, r5, r1
 8004e7c:	182d      	addlt	r5, r5, r0
 8004e7e:	9511      	str	r5, [sp, #68]	; 0x44
 8004e80:	2c00      	cmp	r4, #0
 8004e82:	f040 8348 	bne.w	8005516 <_svfprintf_r+0xb76>
 8004e86:	2300      	movs	r3, #0
 8004e88:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e8a:	ae36      	add	r6, sp, #216	; 0xd8
 8004e8c:	e5c3      	b.n	8004a16 <_svfprintf_r+0x76>
 8004e8e:	08e3      	lsrs	r3, r4, #3
 8004e90:	4690      	mov	r8, r2
 8004e92:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 8004e96:	08ea      	lsrs	r2, r5, #3
 8004e98:	f004 0107 	and.w	r1, r4, #7
 8004e9c:	4615      	mov	r5, r2
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8004ea4:	ea54 0105 	orrs.w	r1, r4, r5
 8004ea8:	f888 3000 	strb.w	r3, [r8]
 8004eac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004eb0:	d1ed      	bne.n	8004e8e <_svfprintf_r+0x4ee>
 8004eb2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004eb4:	07e0      	lsls	r0, r4, #31
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	f100 84ff 	bmi.w	80058ba <_svfprintf_r+0xf1a>
 8004ebc:	9d08      	ldr	r5, [sp, #32]
 8004ebe:	ebc8 0505 	rsb	r5, r8, r5
 8004ec2:	950e      	str	r5, [sp, #56]	; 0x38
 8004ec4:	e6a8      	b.n	8004c18 <_svfprintf_r+0x278>
 8004ec6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eca:	f015 0320 	ands.w	r3, r5, #32
 8004ece:	f000 80b0 	beq.w	8005032 <_svfprintf_r+0x692>
 8004ed2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004ed4:	1de3      	adds	r3, r4, #7
 8004ed6:	f023 0307 	bic.w	r3, r3, #7
 8004eda:	f103 0508 	add.w	r5, r3, #8
 8004ede:	9513      	str	r5, [sp, #76]	; 0x4c
 8004ee0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	e661      	b.n	8004bac <_svfprintf_r+0x20c>
 8004ee8:	f893 9000 	ldrb.w	r9, [r3]
 8004eec:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8004ef0:	f103 0001 	add.w	r0, r3, #1
 8004ef4:	f000 87a2 	beq.w	8005e3c <_svfprintf_r+0x149c>
 8004ef8:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004efc:	2909      	cmp	r1, #9
 8004efe:	bf82      	ittt	hi
 8004f00:	2400      	movhi	r4, #0
 8004f02:	4603      	movhi	r3, r0
 8004f04:	940c      	strhi	r4, [sp, #48]	; 0x30
 8004f06:	f63f adbb 	bhi.w	8004a80 <_svfprintf_r+0xe0>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f810 9b01 	ldrb.w	r9, [r0], #1
 8004f10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f14:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004f18:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004f1c:	2909      	cmp	r1, #9
 8004f1e:	d9f5      	bls.n	8004f0c <_svfprintf_r+0x56c>
 8004f20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f24:	930c      	str	r3, [sp, #48]	; 0x30
 8004f26:	4603      	mov	r3, r0
 8004f28:	e5aa      	b.n	8004a80 <_svfprintf_r+0xe0>
 8004f2a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f2c:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8004f30:	f045 0510 	orr.w	r5, r5, #16
 8004f34:	9509      	str	r5, [sp, #36]	; 0x24
 8004f36:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f3a:	06a2      	lsls	r2, r4, #26
 8004f3c:	f140 80e6 	bpl.w	800510c <_svfprintf_r+0x76c>
 8004f40:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004f42:	1de9      	adds	r1, r5, #7
 8004f44:	f021 0107 	bic.w	r1, r1, #7
 8004f48:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004f4c:	3108      	adds	r1, #8
 8004f4e:	9113      	str	r1, [sp, #76]	; 0x4c
 8004f50:	4614      	mov	r4, r2
 8004f52:	461d      	mov	r5, r3
 8004f54:	2a00      	cmp	r2, #0
 8004f56:	f173 0100 	sbcs.w	r1, r3, #0
 8004f5a:	f2c0 83cf 	blt.w	80056fc <_svfprintf_r+0xd5c>
 8004f5e:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8004f62:	2301      	movs	r3, #1
 8004f64:	e626      	b.n	8004bb4 <_svfprintf_r+0x214>
 8004f66:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f68:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004f6c:	9409      	str	r4, [sp, #36]	; 0x24
 8004f6e:	f893 9000 	ldrb.w	r9, [r3]
 8004f72:	e584      	b.n	8004a7e <_svfprintf_r+0xde>
 8004f74:	2500      	movs	r5, #0
 8004f76:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004f7a:	9512      	str	r5, [sp, #72]	; 0x48
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f813 9b01 	ldrb.w	r9, [r3], #1
 8004f82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8004f8a:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004f8e:	2909      	cmp	r1, #9
 8004f90:	d9f5      	bls.n	8004f7e <_svfprintf_r+0x5de>
 8004f92:	9012      	str	r0, [sp, #72]	; 0x48
 8004f94:	e574      	b.n	8004a80 <_svfprintf_r+0xe0>
 8004f96:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f98:	f044 0408 	orr.w	r4, r4, #8
 8004f9c:	9409      	str	r4, [sp, #36]	; 0x24
 8004f9e:	f893 9000 	ldrb.w	r9, [r3]
 8004fa2:	e56c      	b.n	8004a7e <_svfprintf_r+0xde>
 8004fa4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fa8:	0724      	lsls	r4, r4, #28
 8004faa:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8004fae:	f140 84ae 	bpl.w	800590e <_svfprintf_r+0xf6e>
 8004fb2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004fb4:	1deb      	adds	r3, r5, #7
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	f103 0408 	add.w	r4, r3, #8
 8004fbe:	681d      	ldr	r5, [r3, #0]
 8004fc0:	9413      	str	r4, [sp, #76]	; 0x4c
 8004fc2:	951a      	str	r5, [sp, #104]	; 0x68
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8004fc8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004fca:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004fcc:	f002 fca2 	bl	8007914 <__fpclassifyd>
 8004fd0:	2801      	cmp	r0, #1
 8004fd2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8004fd4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004fd6:	f040 847c 	bne.w	80058d2 <_svfprintf_r+0xf32>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f7fb fdfb 	bl	8000bd8 <__aeabi_dcmplt>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f040 8654 	bne.w	8005c90 <_svfprintf_r+0x12f0>
 8004fe8:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8004fec:	2503      	movs	r5, #3
 8004fee:	950d      	str	r5, [sp, #52]	; 0x34
 8004ff0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004ff2:	2400      	movs	r4, #0
 8004ff4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8004ff8:	f248 48dc 	movw	r8, #34012	; 0x84dc
 8004ffc:	f248 43d8 	movw	r3, #34008	; 0x84d8
 8005000:	f6c0 0800 	movt	r8, #2048	; 0x800
 8005004:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005008:	940c      	str	r4, [sp, #48]	; 0x30
 800500a:	9509      	str	r5, [sp, #36]	; 0x24
 800500c:	2403      	movs	r4, #3
 800500e:	2500      	movs	r5, #0
 8005010:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005014:	bfd8      	it	le
 8005016:	4698      	movle	r8, r3
 8005018:	940e      	str	r4, [sp, #56]	; 0x38
 800501a:	9517      	str	r5, [sp, #92]	; 0x5c
 800501c:	e604      	b.n	8004c28 <_svfprintf_r+0x288>
 800501e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005020:	930b      	str	r3, [sp, #44]	; 0x2c
 8005022:	f044 0410 	orr.w	r4, r4, #16
 8005026:	9409      	str	r4, [sp, #36]	; 0x24
 8005028:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800502a:	f015 0320 	ands.w	r3, r5, #32
 800502e:	f47f af50 	bne.w	8004ed2 <_svfprintf_r+0x532>
 8005032:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005034:	f014 0210 	ands.w	r2, r4, #16
 8005038:	f040 834c 	bne.w	80056d4 <_svfprintf_r+0xd34>
 800503c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800503e:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 8005042:	f000 8347 	beq.w	80056d4 <_svfprintf_r+0xd34>
 8005046:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005048:	8804      	ldrh	r4, [r0, #0]
 800504a:	3004      	adds	r0, #4
 800504c:	4613      	mov	r3, r2
 800504e:	2500      	movs	r5, #0
 8005050:	9013      	str	r0, [sp, #76]	; 0x4c
 8005052:	e5ab      	b.n	8004bac <_svfprintf_r+0x20c>
 8005054:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005056:	930b      	str	r3, [sp, #44]	; 0x2c
 8005058:	f045 0510 	orr.w	r5, r5, #16
 800505c:	9509      	str	r5, [sp, #36]	; 0x24
 800505e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005060:	06a3      	lsls	r3, r4, #26
 8005062:	f53f ad99 	bmi.w	8004b98 <_svfprintf_r+0x1f8>
 8005066:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005068:	06ed      	lsls	r5, r5, #27
 800506a:	f100 8325 	bmi.w	80056b8 <_svfprintf_r+0xd18>
 800506e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005070:	0664      	lsls	r4, r4, #25
 8005072:	f140 8321 	bpl.w	80056b8 <_svfprintf_r+0xd18>
 8005076:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005078:	8804      	ldrh	r4, [r0, #0]
 800507a:	3004      	adds	r0, #4
 800507c:	2500      	movs	r5, #0
 800507e:	2301      	movs	r3, #1
 8005080:	9013      	str	r0, [sp, #76]	; 0x4c
 8005082:	e593      	b.n	8004bac <_svfprintf_r+0x20c>
 8005084:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005086:	930b      	str	r3, [sp, #44]	; 0x2c
 8005088:	f248 44e8 	movw	r4, #34024	; 0x84e8
 800508c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005090:	06a8      	lsls	r0, r5, #26
 8005092:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8005096:	9418      	str	r4, [sp, #96]	; 0x60
 8005098:	f140 8084 	bpl.w	80051a4 <_svfprintf_r+0x804>
 800509c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800509e:	1de3      	adds	r3, r4, #7
 80050a0:	f023 0307 	bic.w	r3, r3, #7
 80050a4:	f103 0508 	add.w	r5, r3, #8
 80050a8:	9513      	str	r5, [sp, #76]	; 0x4c
 80050aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050b0:	07c3      	lsls	r3, r0, #31
 80050b2:	f140 824b 	bpl.w	800554c <_svfprintf_r+0xbac>
 80050b6:	ea54 0105 	orrs.w	r1, r4, r5
 80050ba:	f000 8247 	beq.w	800554c <_svfprintf_r+0xbac>
 80050be:	2330      	movs	r3, #48	; 0x30
 80050c0:	f040 0002 	orr.w	r0, r0, #2
 80050c4:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80050c8:	f88d 9089 	strb.w	r9, [sp, #137]	; 0x89
 80050cc:	9009      	str	r0, [sp, #36]	; 0x24
 80050ce:	2302      	movs	r3, #2
 80050d0:	e56c      	b.n	8004bac <_svfprintf_r+0x20c>
 80050d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050d6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f04f 0a00 	mov.w	sl, #0
 80050de:	2501      	movs	r5, #1
 80050e0:	3404      	adds	r4, #4
 80050e2:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 80050e6:	950d      	str	r5, [sp, #52]	; 0x34
 80050e8:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 80050ec:	9413      	str	r4, [sp, #76]	; 0x4c
 80050ee:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80050f2:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80050f6:	950e      	str	r5, [sp, #56]	; 0x38
 80050f8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80050fc:	e59a      	b.n	8004c34 <_svfprintf_r+0x294>
 80050fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005100:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8005104:	06a2      	lsls	r2, r4, #26
 8005106:	930b      	str	r3, [sp, #44]	; 0x2c
 8005108:	f53f af1a 	bmi.w	8004f40 <_svfprintf_r+0x5a0>
 800510c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800510e:	06e3      	lsls	r3, r4, #27
 8005110:	f100 82e7 	bmi.w	80056e2 <_svfprintf_r+0xd42>
 8005114:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005116:	0665      	lsls	r5, r4, #25
 8005118:	f140 82e3 	bpl.w	80056e2 <_svfprintf_r+0xd42>
 800511c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800511e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8005122:	3004      	adds	r0, #4
 8005124:	17e5      	asrs	r5, r4, #31
 8005126:	4622      	mov	r2, r4
 8005128:	462b      	mov	r3, r5
 800512a:	9013      	str	r0, [sp, #76]	; 0x4c
 800512c:	e712      	b.n	8004f54 <_svfprintf_r+0x5b4>
 800512e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005130:	f044 0420 	orr.w	r4, r4, #32
 8005134:	9409      	str	r4, [sp, #36]	; 0x24
 8005136:	f893 9000 	ldrb.w	r9, [r3]
 800513a:	e4a0      	b.n	8004a7e <_svfprintf_r+0xde>
 800513c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800513e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005140:	f8d4 8000 	ldr.w	r8, [r4]
 8005144:	2500      	movs	r5, #0
 8005146:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
 800514a:	3404      	adds	r4, #4
 800514c:	f1b8 0f00 	cmp.w	r8, #0
 8005150:	f000 857e 	beq.w	8005c50 <_svfprintf_r+0x12b0>
 8005154:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005156:	2800      	cmp	r0, #0
 8005158:	4640      	mov	r0, r8
 800515a:	f2c0 854c 	blt.w	8005bf6 <_svfprintf_r+0x1256>
 800515e:	4629      	mov	r1, r5
 8005160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005162:	f002 f87b 	bl	800725c <memchr>
 8005166:	2800      	cmp	r0, #0
 8005168:	f000 85a3 	beq.w	8005cb2 <_svfprintf_r+0x1312>
 800516c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800516e:	9413      	str	r4, [sp, #76]	; 0x4c
 8005170:	ebc8 0000 	rsb	r0, r8, r0
 8005174:	4288      	cmp	r0, r1
 8005176:	bfb8      	it	lt
 8005178:	4601      	movlt	r1, r0
 800517a:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 800517e:	910e      	str	r1, [sp, #56]	; 0x38
 8005180:	950c      	str	r5, [sp, #48]	; 0x30
 8005182:	940d      	str	r4, [sp, #52]	; 0x34
 8005184:	9517      	str	r5, [sp, #92]	; 0x5c
 8005186:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 800518a:	e54d      	b.n	8004c28 <_svfprintf_r+0x288>
 800518c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800518e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005190:	f248 44fc 	movw	r4, #34044	; 0x84fc
 8005194:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005198:	06a8      	lsls	r0, r5, #26
 800519a:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 800519e:	9418      	str	r4, [sp, #96]	; 0x60
 80051a0:	f53f af7c 	bmi.w	800509c <_svfprintf_r+0x6fc>
 80051a4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051a6:	06e1      	lsls	r1, r4, #27
 80051a8:	f100 828e 	bmi.w	80056c8 <_svfprintf_r+0xd28>
 80051ac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051ae:	0662      	lsls	r2, r4, #25
 80051b0:	f140 828a 	bpl.w	80056c8 <_svfprintf_r+0xd28>
 80051b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80051b6:	8804      	ldrh	r4, [r0, #0]
 80051b8:	3004      	adds	r0, #4
 80051ba:	2500      	movs	r5, #0
 80051bc:	9013      	str	r0, [sp, #76]	; 0x4c
 80051be:	e776      	b.n	80050ae <_svfprintf_r+0x70e>
 80051c0:	f893 9000 	ldrb.w	r9, [r3]
 80051c4:	222b      	movs	r2, #43	; 0x2b
 80051c6:	e45a      	b.n	8004a7e <_svfprintf_r+0xde>
 80051c8:	f893 9000 	ldrb.w	r9, [r3]
 80051cc:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
 80051d0:	bf0c      	ite	eq
 80051d2:	9c09      	ldreq	r4, [sp, #36]	; 0x24
 80051d4:	9d09      	ldrne	r5, [sp, #36]	; 0x24
 80051d6:	4619      	mov	r1, r3
 80051d8:	bf09      	itett	eq
 80051da:	f044 0420 	orreq.w	r4, r4, #32
 80051de:	f045 0510 	orrne.w	r5, r5, #16
 80051e2:	3301      	addeq	r3, #1
 80051e4:	9409      	streq	r4, [sp, #36]	; 0x24
 80051e6:	bf0c      	ite	eq
 80051e8:	f891 9001 	ldrbeq.w	r9, [r1, #1]
 80051ec:	9509      	strne	r5, [sp, #36]	; 0x24
 80051ee:	e446      	b.n	8004a7e <_svfprintf_r+0xde>
 80051f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f4:	06a9      	lsls	r1, r5, #26
 80051f6:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 80051fa:	f140 8395 	bpl.w	8005928 <_svfprintf_r+0xf88>
 80051fe:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005200:	6821      	ldr	r1, [r4, #0]
 8005202:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005204:	17e5      	asrs	r5, r4, #31
 8005206:	462b      	mov	r3, r5
 8005208:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800520a:	4622      	mov	r2, r4
 800520c:	3504      	adds	r5, #4
 800520e:	9513      	str	r5, [sp, #76]	; 0x4c
 8005210:	e9c1 2300 	strd	r2, r3, [r1]
 8005214:	f7ff bbff 	b.w	8004a16 <_svfprintf_r+0x76>
 8005218:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800521a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800521c:	930b      	str	r3, [sp, #44]	; 0x2c
 800521e:	f045 0502 	orr.w	r5, r5, #2
 8005222:	f248 40fc 	movw	r0, #34044	; 0x84fc
 8005226:	2330      	movs	r3, #48	; 0x30
 8005228:	f04f 0978 	mov.w	r9, #120	; 0x78
 800522c:	9509      	str	r5, [sp, #36]	; 0x24
 800522e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005232:	1d15      	adds	r5, r2, #4
 8005234:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005238:	9513      	str	r5, [sp, #76]	; 0x4c
 800523a:	6814      	ldr	r4, [r2, #0]
 800523c:	f88d 9089 	strb.w	r9, [sp, #137]	; 0x89
 8005240:	2500      	movs	r5, #0
 8005242:	9018      	str	r0, [sp, #96]	; 0x60
 8005244:	2302      	movs	r3, #2
 8005246:	e4b1      	b.n	8004bac <_svfprintf_r+0x20c>
 8005248:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800524a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800524e:	9509      	str	r5, [sp, #36]	; 0x24
 8005250:	f893 9000 	ldrb.w	r9, [r3]
 8005254:	e413      	b.n	8004a7e <_svfprintf_r+0xde>
 8005256:	f893 9000 	ldrb.w	r9, [r3]
 800525a:	2a00      	cmp	r2, #0
 800525c:	f47f ac0f 	bne.w	8004a7e <_svfprintf_r+0xde>
 8005260:	2220      	movs	r2, #32
 8005262:	e40c      	b.n	8004a7e <_svfprintf_r+0xde>
 8005264:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005266:	f045 0501 	orr.w	r5, r5, #1
 800526a:	9509      	str	r5, [sp, #36]	; 0x24
 800526c:	f893 9000 	ldrb.w	r9, [r3]
 8005270:	e405      	b.n	8004a7e <_svfprintf_r+0xde>
 8005272:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005274:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005276:	6824      	ldr	r4, [r4, #0]
 8005278:	2c00      	cmp	r4, #0
 800527a:	9412      	str	r4, [sp, #72]	; 0x48
 800527c:	f105 0104 	add.w	r1, r5, #4
 8005280:	f6ff ac5e 	blt.w	8004b40 <_svfprintf_r+0x1a0>
 8005284:	9113      	str	r1, [sp, #76]	; 0x4c
 8005286:	f893 9000 	ldrb.w	r9, [r3]
 800528a:	f7ff bbf8 	b.w	8004a7e <_svfprintf_r+0xde>
 800528e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005290:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8005294:	f1b9 0f00 	cmp.w	r9, #0
 8005298:	f43f ac65 	beq.w	8004b66 <_svfprintf_r+0x1c6>
 800529c:	2300      	movs	r3, #0
 800529e:	2501      	movs	r5, #1
 80052a0:	469a      	mov	sl, r3
 80052a2:	950d      	str	r5, [sp, #52]	; 0x34
 80052a4:	f88d 90b0 	strb.w	r9, [sp, #176]	; 0xb0
 80052a8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80052ac:	930c      	str	r3, [sp, #48]	; 0x30
 80052ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80052b0:	950e      	str	r5, [sp, #56]	; 0x38
 80052b2:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80052b6:	e4bd      	b.n	8004c34 <_svfprintf_r+0x294>
 80052b8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80052ba:	e50b      	b.n	8004cd4 <_svfprintf_r+0x334>
 80052bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80052be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80052c0:	aa29      	add	r2, sp, #164	; 0xa4
 80052c2:	f002 fb4f 	bl	8007964 <__ssprint_r>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	f47f ac54 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 80052cc:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80052ce:	ae36      	add	r6, sp, #216	; 0xd8
 80052d0:	e512      	b.n	8004cf8 <_svfprintf_r+0x358>
 80052d2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80052d6:	f340 80c2 	ble.w	800545e <_svfprintf_r+0xabe>
 80052da:	981a      	ldr	r0, [sp, #104]	; 0x68
 80052dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80052de:	2200      	movs	r2, #0
 80052e0:	2300      	movs	r3, #0
 80052e2:	f7fb fc6f 	bl	8000bc4 <__aeabi_dcmpeq>
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f000 8133 	beq.w	8005552 <_svfprintf_r+0xbb2>
 80052ec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80052ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80052f0:	3301      	adds	r3, #1
 80052f2:	3401      	adds	r4, #1
 80052f4:	2201      	movs	r2, #1
 80052f6:	2b07      	cmp	r3, #7
 80052f8:	6035      	str	r5, [r6, #0]
 80052fa:	6072      	str	r2, [r6, #4]
 80052fc:	942b      	str	r4, [sp, #172]	; 0xac
 80052fe:	932a      	str	r3, [sp, #168]	; 0xa8
 8005300:	bfd8      	it	le
 8005302:	3608      	addle	r6, #8
 8005304:	f300 831c 	bgt.w	8005940 <_svfprintf_r+0xfa0>
 8005308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800530a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800530c:	42ab      	cmp	r3, r5
 800530e:	db03      	blt.n	8005318 <_svfprintf_r+0x978>
 8005310:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005312:	07eb      	lsls	r3, r5, #31
 8005314:	f57f ad62 	bpl.w	8004ddc <_svfprintf_r+0x43c>
 8005318:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800531a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800531c:	6035      	str	r5, [r6, #0]
 800531e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005320:	3301      	adds	r3, #1
 8005322:	442c      	add	r4, r5
 8005324:	2b07      	cmp	r3, #7
 8005326:	6075      	str	r5, [r6, #4]
 8005328:	942b      	str	r4, [sp, #172]	; 0xac
 800532a:	932a      	str	r3, [sp, #168]	; 0xa8
 800532c:	bfd8      	it	le
 800532e:	3608      	addle	r6, #8
 8005330:	f300 83c0 	bgt.w	8005ab4 <_svfprintf_r+0x1114>
 8005334:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005336:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800533a:	f1b8 0f00 	cmp.w	r8, #0
 800533e:	f77f ad4d 	ble.w	8004ddc <_svfprintf_r+0x43c>
 8005342:	f1b8 0f10 	cmp.w	r8, #16
 8005346:	f248 45c8 	movw	r5, #33992	; 0x84c8
 800534a:	f340 8503 	ble.w	8005d54 <_svfprintf_r+0x13b4>
 800534e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005350:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 8005354:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8005358:	f6c0 0500 	movt	r5, #2048	; 0x800
 800535c:	f04f 0910 	mov.w	r9, #16
 8005360:	e005      	b.n	800536e <_svfprintf_r+0x9ce>
 8005362:	f1a8 0810 	sub.w	r8, r8, #16
 8005366:	f1b8 0f10 	cmp.w	r8, #16
 800536a:	f340 80c0 	ble.w	80054ee <_svfprintf_r+0xb4e>
 800536e:	3301      	adds	r3, #1
 8005370:	3410      	adds	r4, #16
 8005372:	2b07      	cmp	r3, #7
 8005374:	e886 0280 	stmia.w	r6, {r7, r9}
 8005378:	942b      	str	r4, [sp, #172]	; 0xac
 800537a:	932a      	str	r3, [sp, #168]	; 0xa8
 800537c:	bfd8      	it	le
 800537e:	3608      	addle	r6, #8
 8005380:	ddef      	ble.n	8005362 <_svfprintf_r+0x9c2>
 8005382:	4650      	mov	r0, sl
 8005384:	4659      	mov	r1, fp
 8005386:	aa29      	add	r2, sp, #164	; 0xa4
 8005388:	f002 faec 	bl	8007964 <__ssprint_r>
 800538c:	2800      	cmp	r0, #0
 800538e:	f47f abf1 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005392:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005394:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005396:	ae36      	add	r6, sp, #216	; 0xd8
 8005398:	e7e3      	b.n	8005362 <_svfprintf_r+0x9c2>
 800539a:	2b00      	cmp	r3, #0
 800539c:	f040 80c5 	bne.w	800552a <_svfprintf_r+0xb8a>
 80053a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80053a2:	07e1      	lsls	r1, r4, #31
 80053a4:	bf5c      	itt	pl
 80053a6:	930e      	strpl	r3, [sp, #56]	; 0x38
 80053a8:	f10d 08d8 	addpl.w	r8, sp, #216	; 0xd8
 80053ac:	f57f ac34 	bpl.w	8004c18 <_svfprintf_r+0x278>
 80053b0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80053b2:	2330      	movs	r3, #48	; 0x30
 80053b4:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
 80053b8:	950e      	str	r5, [sp, #56]	; 0x38
 80053ba:	f10d 08d7 	add.w	r8, sp, #215	; 0xd7
 80053be:	e42b      	b.n	8004c18 <_svfprintf_r+0x278>
 80053c0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80053c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80053c4:	ebc0 0a05 	rsb	sl, r0, r5
 80053c8:	f1ba 0f00 	cmp.w	sl, #0
 80053cc:	f77f aca9 	ble.w	8004d22 <_svfprintf_r+0x382>
 80053d0:	f1ba 0f10 	cmp.w	sl, #16
 80053d4:	f248 45c8 	movw	r5, #33992	; 0x84c8
 80053d8:	bfdc      	itt	le
 80053da:	f6c0 0500 	movtle	r5, #2048	; 0x800
 80053de:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 80053e0:	dd27      	ble.n	8005432 <_svfprintf_r+0xa92>
 80053e2:	f6c0 0500 	movt	r5, #2048	; 0x800
 80053e6:	4622      	mov	r2, r4
 80053e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80053ea:	4654      	mov	r4, sl
 80053ec:	f04f 0b10 	mov.w	fp, #16
 80053f0:	46aa      	mov	sl, r5
 80053f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80053f4:	e002      	b.n	80053fc <_svfprintf_r+0xa5c>
 80053f6:	3c10      	subs	r4, #16
 80053f8:	2c10      	cmp	r4, #16
 80053fa:	dd17      	ble.n	800542c <_svfprintf_r+0xa8c>
 80053fc:	3301      	adds	r3, #1
 80053fe:	3210      	adds	r2, #16
 8005400:	2b07      	cmp	r3, #7
 8005402:	e886 0880 	stmia.w	r6, {r7, fp}
 8005406:	922b      	str	r2, [sp, #172]	; 0xac
 8005408:	932a      	str	r3, [sp, #168]	; 0xa8
 800540a:	bfd8      	it	le
 800540c:	3608      	addle	r6, #8
 800540e:	ddf2      	ble.n	80053f6 <_svfprintf_r+0xa56>
 8005410:	4628      	mov	r0, r5
 8005412:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005414:	aa29      	add	r2, sp, #164	; 0xa4
 8005416:	f002 faa5 	bl	8007964 <__ssprint_r>
 800541a:	2800      	cmp	r0, #0
 800541c:	f47f abaa 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005420:	3c10      	subs	r4, #16
 8005422:	2c10      	cmp	r4, #16
 8005424:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005426:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005428:	ae36      	add	r6, sp, #216	; 0xd8
 800542a:	dce7      	bgt.n	80053fc <_svfprintf_r+0xa5c>
 800542c:	4655      	mov	r5, sl
 800542e:	46a2      	mov	sl, r4
 8005430:	4614      	mov	r4, r2
 8005432:	3301      	adds	r3, #1
 8005434:	4454      	add	r4, sl
 8005436:	2b07      	cmp	r3, #7
 8005438:	e886 0420 	stmia.w	r6, {r5, sl}
 800543c:	942b      	str	r4, [sp, #172]	; 0xac
 800543e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005440:	bfd8      	it	le
 8005442:	3608      	addle	r6, #8
 8005444:	f77f ac6d 	ble.w	8004d22 <_svfprintf_r+0x382>
 8005448:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800544a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800544c:	aa29      	add	r2, sp, #164	; 0xa4
 800544e:	f002 fa89 	bl	8007964 <__ssprint_r>
 8005452:	2800      	cmp	r0, #0
 8005454:	f47f ab8e 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005458:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800545a:	ae36      	add	r6, sp, #216	; 0xd8
 800545c:	e461      	b.n	8004d22 <_svfprintf_r+0x382>
 800545e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005460:	2d01      	cmp	r5, #1
 8005462:	f340 81d8 	ble.w	8005816 <_svfprintf_r+0xe76>
 8005466:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005468:	f8c6 8000 	str.w	r8, [r6]
 800546c:	3301      	adds	r3, #1
 800546e:	1c62      	adds	r2, r4, #1
 8005470:	2101      	movs	r1, #1
 8005472:	2b07      	cmp	r3, #7
 8005474:	6071      	str	r1, [r6, #4]
 8005476:	922b      	str	r2, [sp, #172]	; 0xac
 8005478:	932a      	str	r3, [sp, #168]	; 0xa8
 800547a:	bfd8      	it	le
 800547c:	3608      	addle	r6, #8
 800547e:	f300 81f5 	bgt.w	800586c <_svfprintf_r+0xecc>
 8005482:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005484:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005486:	4422      	add	r2, r4
 8005488:	6035      	str	r5, [r6, #0]
 800548a:	1c5c      	adds	r4, r3, #1
 800548c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800548e:	922b      	str	r2, [sp, #172]	; 0xac
 8005490:	2c07      	cmp	r4, #7
 8005492:	942a      	str	r4, [sp, #168]	; 0xa8
 8005494:	6075      	str	r5, [r6, #4]
 8005496:	f300 81dc 	bgt.w	8005852 <_svfprintf_r+0xeb2>
 800549a:	3608      	adds	r6, #8
 800549c:	4691      	mov	r9, r2
 800549e:	981a      	ldr	r0, [sp, #104]	; 0x68
 80054a0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80054a2:	2200      	movs	r2, #0
 80054a4:	2300      	movs	r3, #0
 80054a6:	f7fb fb8d 	bl	8000bc4 <__aeabi_dcmpeq>
 80054aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f040 80c0 	bne.w	8005632 <_svfprintf_r+0xc92>
 80054b2:	1e6b      	subs	r3, r5, #1
 80054b4:	3401      	adds	r4, #1
 80054b6:	f108 0101 	add.w	r1, r8, #1
 80054ba:	eb03 0209 	add.w	r2, r3, r9
 80054be:	2c07      	cmp	r4, #7
 80054c0:	6031      	str	r1, [r6, #0]
 80054c2:	942a      	str	r4, [sp, #168]	; 0xa8
 80054c4:	922b      	str	r2, [sp, #172]	; 0xac
 80054c6:	6073      	str	r3, [r6, #4]
 80054c8:	f300 81b6 	bgt.w	8005838 <_svfprintf_r+0xe98>
 80054cc:	3608      	adds	r6, #8
 80054ce:	4691      	mov	r9, r2
 80054d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80054d2:	1c63      	adds	r3, r4, #1
 80054d4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 80054d6:	932a      	str	r3, [sp, #168]	; 0xa8
 80054d8:	444a      	add	r2, r9
 80054da:	a925      	add	r1, sp, #148	; 0x94
 80054dc:	2b07      	cmp	r3, #7
 80054de:	922b      	str	r2, [sp, #172]	; 0xac
 80054e0:	e886 0012 	stmia.w	r6, {r1, r4}
 80054e4:	dc0c      	bgt.n	8005500 <_svfprintf_r+0xb60>
 80054e6:	3608      	adds	r6, #8
 80054e8:	4614      	mov	r4, r2
 80054ea:	e477      	b.n	8004ddc <_svfprintf_r+0x43c>
 80054ec:	4614      	mov	r4, r2
 80054ee:	3301      	adds	r3, #1
 80054f0:	4444      	add	r4, r8
 80054f2:	2b07      	cmp	r3, #7
 80054f4:	942b      	str	r4, [sp, #172]	; 0xac
 80054f6:	932a      	str	r3, [sp, #168]	; 0xa8
 80054f8:	e886 0120 	stmia.w	r6, {r5, r8}
 80054fc:	f77f ac6d 	ble.w	8004dda <_svfprintf_r+0x43a>
 8005500:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005502:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005504:	aa29      	add	r2, sp, #164	; 0xa4
 8005506:	f002 fa2d 	bl	8007964 <__ssprint_r>
 800550a:	2800      	cmp	r0, #0
 800550c:	f47f ab32 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005510:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005512:	ae36      	add	r6, sp, #216	; 0xd8
 8005514:	e462      	b.n	8004ddc <_svfprintf_r+0x43c>
 8005516:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005518:	990a      	ldr	r1, [sp, #40]	; 0x28
 800551a:	aa29      	add	r2, sp, #164	; 0xa4
 800551c:	f002 fa22 	bl	8007964 <__ssprint_r>
 8005520:	2800      	cmp	r0, #0
 8005522:	f43f acb0 	beq.w	8004e86 <_svfprintf_r+0x4e6>
 8005526:	f7ff bb25 	b.w	8004b74 <_svfprintf_r+0x1d4>
 800552a:	920e      	str	r2, [sp, #56]	; 0x38
 800552c:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 8005530:	f7ff bb72 	b.w	8004c18 <_svfprintf_r+0x278>
 8005534:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005536:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005538:	aa29      	add	r2, sp, #164	; 0xa4
 800553a:	f002 fa13 	bl	8007964 <__ssprint_r>
 800553e:	2800      	cmp	r0, #0
 8005540:	f47f ab18 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005544:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005546:	ae36      	add	r6, sp, #216	; 0xd8
 8005548:	f7ff bbe7 	b.w	8004d1a <_svfprintf_r+0x37a>
 800554c:	2302      	movs	r3, #2
 800554e:	f7ff bb2d 	b.w	8004bac <_svfprintf_r+0x20c>
 8005552:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005554:	2b00      	cmp	r3, #0
 8005556:	f340 81fe 	ble.w	8005956 <_svfprintf_r+0xfb6>
 800555a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800555c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800555e:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8005562:	4285      	cmp	r5, r0
 8005564:	bfa8      	it	ge
 8005566:	4605      	movge	r5, r0
 8005568:	2d00      	cmp	r5, #0
 800556a:	44c3      	add	fp, r8
 800556c:	dd0c      	ble.n	8005588 <_svfprintf_r+0xbe8>
 800556e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005570:	f8c6 8000 	str.w	r8, [r6]
 8005574:	3301      	adds	r3, #1
 8005576:	442c      	add	r4, r5
 8005578:	2b07      	cmp	r3, #7
 800557a:	6075      	str	r5, [r6, #4]
 800557c:	942b      	str	r4, [sp, #172]	; 0xac
 800557e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005580:	bfd8      	it	le
 8005582:	3608      	addle	r6, #8
 8005584:	f300 834b 	bgt.w	8005c1e <_svfprintf_r+0x127e>
 8005588:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800558a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800558e:	ebc5 0901 	rsb	r9, r5, r1
 8005592:	f1b9 0f00 	cmp.w	r9, #0
 8005596:	f340 80d1 	ble.w	800573c <_svfprintf_r+0xd9c>
 800559a:	f1b9 0f10 	cmp.w	r9, #16
 800559e:	f248 45c8 	movw	r5, #33992	; 0x84c8
 80055a2:	bfdc      	itt	le
 80055a4:	f6c0 0500 	movtle	r5, #2048	; 0x800
 80055a8:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 80055aa:	f340 80b3 	ble.w	8005714 <_svfprintf_r+0xd74>
 80055ae:	f6c0 0500 	movt	r5, #2048	; 0x800
 80055b2:	4622      	mov	r2, r4
 80055b4:	950c      	str	r5, [sp, #48]	; 0x30
 80055b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80055b8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80055ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80055bc:	f04f 0a10 	mov.w	sl, #16
 80055c0:	e005      	b.n	80055ce <_svfprintf_r+0xc2e>
 80055c2:	f1a9 0910 	sub.w	r9, r9, #16
 80055c6:	f1b9 0f10 	cmp.w	r9, #16
 80055ca:	f340 80a1 	ble.w	8005710 <_svfprintf_r+0xd70>
 80055ce:	3301      	adds	r3, #1
 80055d0:	3210      	adds	r2, #16
 80055d2:	2b07      	cmp	r3, #7
 80055d4:	e886 0480 	stmia.w	r6, {r7, sl}
 80055d8:	922b      	str	r2, [sp, #172]	; 0xac
 80055da:	932a      	str	r3, [sp, #168]	; 0xa8
 80055dc:	bfd8      	it	le
 80055de:	3608      	addle	r6, #8
 80055e0:	ddef      	ble.n	80055c2 <_svfprintf_r+0xc22>
 80055e2:	4620      	mov	r0, r4
 80055e4:	4629      	mov	r1, r5
 80055e6:	aa29      	add	r2, sp, #164	; 0xa4
 80055e8:	f002 f9bc 	bl	8007964 <__ssprint_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	f47f aac1 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 80055f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80055f4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80055f6:	ae36      	add	r6, sp, #216	; 0xd8
 80055f8:	e7e3      	b.n	80055c2 <_svfprintf_r+0xc22>
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	bf08      	it	eq
 80055fe:	2c0a      	cmpeq	r4, #10
 8005600:	f080 8140 	bcs.w	8005884 <_svfprintf_r+0xee4>
 8005604:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8005606:	3430      	adds	r4, #48	; 0x30
 8005608:	f88d 40d7 	strb.w	r4, [sp, #215]	; 0xd7
 800560c:	950e      	str	r5, [sp, #56]	; 0x38
 800560e:	f10d 08d7 	add.w	r8, sp, #215	; 0xd7
 8005612:	f7ff bb01 	b.w	8004c18 <_svfprintf_r+0x278>
 8005616:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005618:	990a      	ldr	r1, [sp, #40]	; 0x28
 800561a:	aa29      	add	r2, sp, #164	; 0xa4
 800561c:	f002 f9a2 	bl	8007964 <__ssprint_r>
 8005620:	2800      	cmp	r0, #0
 8005622:	f47f aaa7 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005626:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 800562a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800562c:	ae36      	add	r6, sp, #216	; 0xd8
 800562e:	f7ff bb51 	b.w	8004cd4 <_svfprintf_r+0x334>
 8005632:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8005636:	f1b8 0f00 	cmp.w	r8, #0
 800563a:	f77f af49 	ble.w	80054d0 <_svfprintf_r+0xb30>
 800563e:	f248 45c8 	movw	r5, #33992	; 0x84c8
 8005642:	f1b8 0f10 	cmp.w	r8, #16
 8005646:	f6c0 0500 	movt	r5, #2048	; 0x800
 800564a:	dd28      	ble.n	800569e <_svfprintf_r+0xcfe>
 800564c:	464b      	mov	r3, r9
 800564e:	f04f 0a10 	mov.w	sl, #16
 8005652:	46a9      	mov	r9, r5
 8005654:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 8005658:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800565a:	e004      	b.n	8005666 <_svfprintf_r+0xcc6>
 800565c:	f1a8 0810 	sub.w	r8, r8, #16
 8005660:	f1b8 0f10 	cmp.w	r8, #16
 8005664:	dd19      	ble.n	800569a <_svfprintf_r+0xcfa>
 8005666:	3401      	adds	r4, #1
 8005668:	3310      	adds	r3, #16
 800566a:	2c07      	cmp	r4, #7
 800566c:	e886 0480 	stmia.w	r6, {r7, sl}
 8005670:	932b      	str	r3, [sp, #172]	; 0xac
 8005672:	942a      	str	r4, [sp, #168]	; 0xa8
 8005674:	bfd8      	it	le
 8005676:	3608      	addle	r6, #8
 8005678:	ddf0      	ble.n	800565c <_svfprintf_r+0xcbc>
 800567a:	4658      	mov	r0, fp
 800567c:	4629      	mov	r1, r5
 800567e:	aa29      	add	r2, sp, #164	; 0xa4
 8005680:	f002 f970 	bl	8007964 <__ssprint_r>
 8005684:	2800      	cmp	r0, #0
 8005686:	f47f aa75 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 800568a:	f1a8 0810 	sub.w	r8, r8, #16
 800568e:	f1b8 0f10 	cmp.w	r8, #16
 8005692:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8005694:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005696:	ae36      	add	r6, sp, #216	; 0xd8
 8005698:	dce5      	bgt.n	8005666 <_svfprintf_r+0xcc6>
 800569a:	464d      	mov	r5, r9
 800569c:	4699      	mov	r9, r3
 800569e:	3401      	adds	r4, #1
 80056a0:	eb08 0309 	add.w	r3, r8, r9
 80056a4:	2c07      	cmp	r4, #7
 80056a6:	932b      	str	r3, [sp, #172]	; 0xac
 80056a8:	942a      	str	r4, [sp, #168]	; 0xa8
 80056aa:	e886 0120 	stmia.w	r6, {r5, r8}
 80056ae:	f300 80c3 	bgt.w	8005838 <_svfprintf_r+0xe98>
 80056b2:	3608      	adds	r6, #8
 80056b4:	4699      	mov	r9, r3
 80056b6:	e70b      	b.n	80054d0 <_svfprintf_r+0xb30>
 80056b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80056ba:	682c      	ldr	r4, [r5, #0]
 80056bc:	3504      	adds	r5, #4
 80056be:	9513      	str	r5, [sp, #76]	; 0x4c
 80056c0:	2301      	movs	r3, #1
 80056c2:	2500      	movs	r5, #0
 80056c4:	f7ff ba72 	b.w	8004bac <_svfprintf_r+0x20c>
 80056c8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80056ca:	682c      	ldr	r4, [r5, #0]
 80056cc:	3504      	adds	r5, #4
 80056ce:	9513      	str	r5, [sp, #76]	; 0x4c
 80056d0:	2500      	movs	r5, #0
 80056d2:	e4ec      	b.n	80050ae <_svfprintf_r+0x70e>
 80056d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80056d6:	682c      	ldr	r4, [r5, #0]
 80056d8:	3504      	adds	r5, #4
 80056da:	9513      	str	r5, [sp, #76]	; 0x4c
 80056dc:	2500      	movs	r5, #0
 80056de:	f7ff ba65 	b.w	8004bac <_svfprintf_r+0x20c>
 80056e2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80056e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80056e6:	682c      	ldr	r4, [r5, #0]
 80056e8:	17e5      	asrs	r5, r4, #31
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	3004      	adds	r0, #4
 80056f0:	2a00      	cmp	r2, #0
 80056f2:	f173 0100 	sbcs.w	r1, r3, #0
 80056f6:	9013      	str	r0, [sp, #76]	; 0x4c
 80056f8:	f6bf ac31 	bge.w	8004f5e <_svfprintf_r+0x5be>
 80056fc:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005700:	4264      	negs	r4, r4
 8005702:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005706:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 800570a:	2301      	movs	r3, #1
 800570c:	f7ff ba52 	b.w	8004bb4 <_svfprintf_r+0x214>
 8005710:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005712:	4614      	mov	r4, r2
 8005714:	3301      	adds	r3, #1
 8005716:	444c      	add	r4, r9
 8005718:	2b07      	cmp	r3, #7
 800571a:	e886 0220 	stmia.w	r6, {r5, r9}
 800571e:	942b      	str	r4, [sp, #172]	; 0xac
 8005720:	932a      	str	r3, [sp, #168]	; 0xa8
 8005722:	bfd8      	it	le
 8005724:	3608      	addle	r6, #8
 8005726:	dd09      	ble.n	800573c <_svfprintf_r+0xd9c>
 8005728:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800572a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800572c:	aa29      	add	r2, sp, #164	; 0xa4
 800572e:	f002 f919 	bl	8007964 <__ssprint_r>
 8005732:	2800      	cmp	r0, #0
 8005734:	f47f aa1e 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005738:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800573a:	ae36      	add	r6, sp, #216	; 0xd8
 800573c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800573e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005740:	44a8      	add	r8, r5
 8005742:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005744:	42ab      	cmp	r3, r5
 8005746:	db4d      	blt.n	80057e4 <_svfprintf_r+0xe44>
 8005748:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800574a:	07e9      	lsls	r1, r5, #31
 800574c:	d44a      	bmi.n	80057e4 <_svfprintf_r+0xe44>
 800574e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8005750:	ebc8 050b 	rsb	r5, r8, fp
 8005754:	1ac3      	subs	r3, r0, r3
 8005756:	42ab      	cmp	r3, r5
 8005758:	bfb8      	it	lt
 800575a:	461d      	movlt	r5, r3
 800575c:	2d00      	cmp	r5, #0
 800575e:	dd0c      	ble.n	800577a <_svfprintf_r+0xdda>
 8005760:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005762:	f8c6 8000 	str.w	r8, [r6]
 8005766:	3201      	adds	r2, #1
 8005768:	442c      	add	r4, r5
 800576a:	2a07      	cmp	r2, #7
 800576c:	6075      	str	r5, [r6, #4]
 800576e:	942b      	str	r4, [sp, #172]	; 0xac
 8005770:	922a      	str	r2, [sp, #168]	; 0xa8
 8005772:	bfd8      	it	le
 8005774:	3608      	addle	r6, #8
 8005776:	f300 825d 	bgt.w	8005c34 <_svfprintf_r+0x1294>
 800577a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800577e:	ebc5 0803 	rsb	r8, r5, r3
 8005782:	f1b8 0f00 	cmp.w	r8, #0
 8005786:	f77f ab29 	ble.w	8004ddc <_svfprintf_r+0x43c>
 800578a:	f1b8 0f10 	cmp.w	r8, #16
 800578e:	f248 45c8 	movw	r5, #33992	; 0x84c8
 8005792:	f340 82df 	ble.w	8005d54 <_svfprintf_r+0x13b4>
 8005796:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005798:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800579c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80057a0:	f6c0 0500 	movt	r5, #2048	; 0x800
 80057a4:	f04f 0910 	mov.w	r9, #16
 80057a8:	4622      	mov	r2, r4
 80057aa:	e005      	b.n	80057b8 <_svfprintf_r+0xe18>
 80057ac:	f1a8 0810 	sub.w	r8, r8, #16
 80057b0:	f1b8 0f10 	cmp.w	r8, #16
 80057b4:	f77f ae9a 	ble.w	80054ec <_svfprintf_r+0xb4c>
 80057b8:	3301      	adds	r3, #1
 80057ba:	3210      	adds	r2, #16
 80057bc:	2b07      	cmp	r3, #7
 80057be:	e886 0280 	stmia.w	r6, {r7, r9}
 80057c2:	922b      	str	r2, [sp, #172]	; 0xac
 80057c4:	932a      	str	r3, [sp, #168]	; 0xa8
 80057c6:	bfd8      	it	le
 80057c8:	3608      	addle	r6, #8
 80057ca:	ddef      	ble.n	80057ac <_svfprintf_r+0xe0c>
 80057cc:	4650      	mov	r0, sl
 80057ce:	4659      	mov	r1, fp
 80057d0:	aa29      	add	r2, sp, #164	; 0xa4
 80057d2:	f002 f8c7 	bl	8007964 <__ssprint_r>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f47f a9cc 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 80057dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80057de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80057e0:	ae36      	add	r6, sp, #216	; 0xd8
 80057e2:	e7e3      	b.n	80057ac <_svfprintf_r+0xe0c>
 80057e4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80057e6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80057e8:	6035      	str	r5, [r6, #0]
 80057ea:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80057ec:	3201      	adds	r2, #1
 80057ee:	442c      	add	r4, r5
 80057f0:	2a07      	cmp	r2, #7
 80057f2:	6075      	str	r5, [r6, #4]
 80057f4:	942b      	str	r4, [sp, #172]	; 0xac
 80057f6:	922a      	str	r2, [sp, #168]	; 0xa8
 80057f8:	bfd8      	it	le
 80057fa:	3608      	addle	r6, #8
 80057fc:	dda7      	ble.n	800574e <_svfprintf_r+0xdae>
 80057fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005800:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005802:	aa29      	add	r2, sp, #164	; 0xa4
 8005804:	f002 f8ae 	bl	8007964 <__ssprint_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	f47f a9b3 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 800580e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005810:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005812:	ae36      	add	r6, sp, #216	; 0xd8
 8005814:	e79b      	b.n	800574e <_svfprintf_r+0xdae>
 8005816:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005818:	07ea      	lsls	r2, r5, #31
 800581a:	f53f ae24 	bmi.w	8005466 <_svfprintf_r+0xac6>
 800581e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005820:	f8c6 8000 	str.w	r8, [r6]
 8005824:	1c63      	adds	r3, r4, #1
 8005826:	1c54      	adds	r4, r2, #1
 8005828:	2c07      	cmp	r4, #7
 800582a:	f04f 0201 	mov.w	r2, #1
 800582e:	932b      	str	r3, [sp, #172]	; 0xac
 8005830:	942a      	str	r4, [sp, #168]	; 0xa8
 8005832:	6072      	str	r2, [r6, #4]
 8005834:	f77f af3d 	ble.w	80056b2 <_svfprintf_r+0xd12>
 8005838:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800583a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800583c:	aa29      	add	r2, sp, #164	; 0xa4
 800583e:	f002 f891 	bl	8007964 <__ssprint_r>
 8005842:	2800      	cmp	r0, #0
 8005844:	f47f a996 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005848:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 800584c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800584e:	ae36      	add	r6, sp, #216	; 0xd8
 8005850:	e63e      	b.n	80054d0 <_svfprintf_r+0xb30>
 8005852:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005854:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005856:	aa29      	add	r2, sp, #164	; 0xa4
 8005858:	f002 f884 	bl	8007964 <__ssprint_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	f47f a989 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005862:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 8005866:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8005868:	ae36      	add	r6, sp, #216	; 0xd8
 800586a:	e618      	b.n	800549e <_svfprintf_r+0xafe>
 800586c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800586e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005870:	aa29      	add	r2, sp, #164	; 0xa4
 8005872:	f002 f877 	bl	8007964 <__ssprint_r>
 8005876:	2800      	cmp	r0, #0
 8005878:	f47f a97c 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 800587c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800587e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005880:	ae36      	add	r6, sp, #216	; 0xd8
 8005882:	e5fe      	b.n	8005482 <_svfprintf_r+0xae2>
 8005884:	f10d 0bd7 	add.w	fp, sp, #215	; 0xd7
 8005888:	4620      	mov	r0, r4
 800588a:	4629      	mov	r1, r5
 800588c:	220a      	movs	r2, #10
 800588e:	2300      	movs	r3, #0
 8005890:	f7fb f9f2 	bl	8000c78 <__aeabi_uldivmod>
 8005894:	3230      	adds	r2, #48	; 0x30
 8005896:	f88b 2000 	strb.w	r2, [fp]
 800589a:	4620      	mov	r0, r4
 800589c:	4629      	mov	r1, r5
 800589e:	220a      	movs	r2, #10
 80058a0:	2300      	movs	r3, #0
 80058a2:	f7fb f9e9 	bl	8000c78 <__aeabi_uldivmod>
 80058a6:	4604      	mov	r4, r0
 80058a8:	460d      	mov	r5, r1
 80058aa:	ea54 0005 	orrs.w	r0, r4, r5
 80058ae:	46d8      	mov	r8, fp
 80058b0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80058b4:	d1e8      	bne.n	8005888 <_svfprintf_r+0xee8>
 80058b6:	f7ff b9ab 	b.w	8004c10 <_svfprintf_r+0x270>
 80058ba:	2b30      	cmp	r3, #48	; 0x30
 80058bc:	f43f a9a8 	beq.w	8004c10 <_svfprintf_r+0x270>
 80058c0:	9c08      	ldr	r4, [sp, #32]
 80058c2:	2330      	movs	r3, #48	; 0x30
 80058c4:	1aa4      	subs	r4, r4, r2
 80058c6:	4690      	mov	r8, r2
 80058c8:	940e      	str	r4, [sp, #56]	; 0x38
 80058ca:	f801 3c01 	strb.w	r3, [r1, #-1]
 80058ce:	f7ff b9a3 	b.w	8004c18 <_svfprintf_r+0x278>
 80058d2:	f002 f81f 	bl	8007914 <__fpclassifyd>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f040 808d 	bne.w	80059f6 <_svfprintf_r+0x1056>
 80058dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80058de:	900c      	str	r0, [sp, #48]	; 0x30
 80058e0:	f248 48e4 	movw	r8, #34020	; 0x84e4
 80058e4:	f248 43e0 	movw	r3, #34016	; 0x84e0
 80058e8:	2403      	movs	r4, #3
 80058ea:	f6c0 0800 	movt	r8, #2048	; 0x800
 80058ee:	f6c0 0300 	movt	r3, #2048	; 0x800
 80058f2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80058f6:	940d      	str	r4, [sp, #52]	; 0x34
 80058f8:	9509      	str	r5, [sp, #36]	; 0x24
 80058fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058fe:	bfd8      	it	le
 8005900:	4698      	movle	r8, r3
 8005902:	9017      	str	r0, [sp, #92]	; 0x5c
 8005904:	940e      	str	r4, [sp, #56]	; 0x38
 8005906:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 800590a:	f7ff b98d 	b.w	8004c28 <_svfprintf_r+0x288>
 800590e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005910:	1de3      	adds	r3, r4, #7
 8005912:	f023 0307 	bic.w	r3, r3, #7
 8005916:	f103 0508 	add.w	r5, r3, #8
 800591a:	681c      	ldr	r4, [r3, #0]
 800591c:	9513      	str	r5, [sp, #76]	; 0x4c
 800591e:	941a      	str	r4, [sp, #104]	; 0x68
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	931b      	str	r3, [sp, #108]	; 0x6c
 8005924:	f7ff bb50 	b.w	8004fc8 <_svfprintf_r+0x628>
 8005928:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800592a:	06e2      	lsls	r2, r4, #27
 800592c:	f140 80b4 	bpl.w	8005a98 <_svfprintf_r+0x10f8>
 8005930:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005932:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	3504      	adds	r5, #4
 8005938:	9513      	str	r5, [sp, #76]	; 0x4c
 800593a:	601c      	str	r4, [r3, #0]
 800593c:	f7ff b86b 	b.w	8004a16 <_svfprintf_r+0x76>
 8005940:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005942:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005944:	aa29      	add	r2, sp, #164	; 0xa4
 8005946:	f002 f80d 	bl	8007964 <__ssprint_r>
 800594a:	2800      	cmp	r0, #0
 800594c:	f47f a912 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005950:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005952:	ae36      	add	r6, sp, #216	; 0xd8
 8005954:	e4d8      	b.n	8005308 <_svfprintf_r+0x968>
 8005956:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005958:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800595a:	3201      	adds	r2, #1
 800595c:	3401      	adds	r4, #1
 800595e:	2101      	movs	r1, #1
 8005960:	2a07      	cmp	r2, #7
 8005962:	6035      	str	r5, [r6, #0]
 8005964:	942b      	str	r4, [sp, #172]	; 0xac
 8005966:	922a      	str	r2, [sp, #168]	; 0xa8
 8005968:	6071      	str	r1, [r6, #4]
 800596a:	f300 8113 	bgt.w	8005b94 <_svfprintf_r+0x11f4>
 800596e:	3608      	adds	r6, #8
 8005970:	4618      	mov	r0, r3
 8005972:	b928      	cbnz	r0, 8005980 <_svfprintf_r+0xfe0>
 8005974:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005976:	b91d      	cbnz	r5, 8005980 <_svfprintf_r+0xfe0>
 8005978:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800597a:	07ed      	lsls	r5, r5, #31
 800597c:	f57f aa2e 	bpl.w	8004ddc <_svfprintf_r+0x43c>
 8005980:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005982:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005984:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005986:	4421      	add	r1, r4
 8005988:	3301      	adds	r3, #1
 800598a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800598c:	6035      	str	r5, [r6, #0]
 800598e:	2b07      	cmp	r3, #7
 8005990:	912b      	str	r1, [sp, #172]	; 0xac
 8005992:	6074      	str	r4, [r6, #4]
 8005994:	932a      	str	r3, [sp, #168]	; 0xa8
 8005996:	bfd8      	it	le
 8005998:	f106 0208 	addle.w	r2, r6, #8
 800599c:	f300 81bd 	bgt.w	8005d1a <_svfprintf_r+0x137a>
 80059a0:	4244      	negs	r4, r0
 80059a2:	2c00      	cmp	r4, #0
 80059a4:	f340 8117 	ble.w	8005bd6 <_svfprintf_r+0x1236>
 80059a8:	f248 45c8 	movw	r5, #33992	; 0x84c8
 80059ac:	2c10      	cmp	r4, #16
 80059ae:	f6c0 0500 	movt	r5, #2048	; 0x800
 80059b2:	f340 80fb 	ble.w	8005bac <_svfprintf_r+0x120c>
 80059b6:	2610      	movs	r6, #16
 80059b8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80059bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80059c0:	e003      	b.n	80059ca <_svfprintf_r+0x102a>
 80059c2:	3c10      	subs	r4, #16
 80059c4:	2c10      	cmp	r4, #16
 80059c6:	f340 80f1 	ble.w	8005bac <_svfprintf_r+0x120c>
 80059ca:	3301      	adds	r3, #1
 80059cc:	3110      	adds	r1, #16
 80059ce:	2b07      	cmp	r3, #7
 80059d0:	6017      	str	r7, [r2, #0]
 80059d2:	6056      	str	r6, [r2, #4]
 80059d4:	912b      	str	r1, [sp, #172]	; 0xac
 80059d6:	932a      	str	r3, [sp, #168]	; 0xa8
 80059d8:	bfd8      	it	le
 80059da:	3208      	addle	r2, #8
 80059dc:	ddf1      	ble.n	80059c2 <_svfprintf_r+0x1022>
 80059de:	4648      	mov	r0, r9
 80059e0:	4651      	mov	r1, sl
 80059e2:	aa29      	add	r2, sp, #164	; 0xa4
 80059e4:	f001 ffbe 	bl	8007964 <__ssprint_r>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f47f a8c3 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 80059ee:	992b      	ldr	r1, [sp, #172]	; 0xac
 80059f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80059f2:	aa36      	add	r2, sp, #216	; 0xd8
 80059f4:	e7e5      	b.n	80059c2 <_svfprintf_r+0x1022>
 80059f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80059f8:	3401      	adds	r4, #1
 80059fa:	bf08      	it	eq
 80059fc:	2406      	moveq	r4, #6
 80059fe:	f029 0520 	bic.w	r5, r9, #32
 8005a02:	bf08      	it	eq
 8005a04:	940c      	streq	r4, [sp, #48]	; 0x30
 8005a06:	d006      	beq.n	8005a16 <_svfprintf_r+0x1076>
 8005a08:	2d47      	cmp	r5, #71	; 0x47
 8005a0a:	d104      	bne.n	8005a16 <_svfprintf_r+0x1076>
 8005a0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	bf08      	it	eq
 8005a12:	2401      	moveq	r4, #1
 8005a14:	940c      	str	r4, [sp, #48]	; 0x30
 8005a16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a18:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005a20:	9414      	str	r4, [sp, #80]	; 0x50
 8005a22:	bfbd      	ittte	lt
 8005a24:	461c      	movlt	r4, r3
 8005a26:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 8005a2a:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 8005a2e:	f8dd a06c 	ldrge.w	sl, [sp, #108]	; 0x6c
 8005a32:	bfa8      	it	ge
 8005a34:	f04f 0b00 	movge.w	fp, #0
 8005a38:	f1b5 0046 	subs.w	r0, r5, #70	; 0x46
 8005a3c:	f1d0 0c00 	rsbs	ip, r0, #0
 8005a40:	eb5c 0c00 	adcs.w	ip, ip, r0
 8005a44:	f1bc 0f00 	cmp.w	ip, #0
 8005a48:	d04d      	beq.n	8005ae6 <_svfprintf_r+0x1146>
 8005a4a:	2103      	movs	r1, #3
 8005a4c:	a823      	add	r0, sp, #140	; 0x8c
 8005a4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a50:	9100      	str	r1, [sp, #0]
 8005a52:	9002      	str	r0, [sp, #8]
 8005a54:	a924      	add	r1, sp, #144	; 0x90
 8005a56:	a827      	add	r0, sp, #156	; 0x9c
 8005a58:	9004      	str	r0, [sp, #16]
 8005a5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005a5c:	9401      	str	r4, [sp, #4]
 8005a5e:	4653      	mov	r3, sl
 8005a60:	9103      	str	r1, [sp, #12]
 8005a62:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005a64:	f8cd c018 	str.w	ip, [sp, #24]
 8005a68:	f000 fb26 	bl	80060b8 <_dtoa_r>
 8005a6c:	2d47      	cmp	r5, #71	; 0x47
 8005a6e:	4680      	mov	r8, r0
 8005a70:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005a74:	d103      	bne.n	8005a7e <_svfprintf_r+0x10de>
 8005a76:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a78:	07e1      	lsls	r1, r4, #31
 8005a7a:	f140 810f 	bpl.w	8005c9c <_svfprintf_r+0x12fc>
 8005a7e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a80:	4444      	add	r4, r8
 8005a82:	f1bc 0f00 	cmp.w	ip, #0
 8005a86:	d043      	beq.n	8005b10 <_svfprintf_r+0x1170>
 8005a88:	f898 3000 	ldrb.w	r3, [r8]
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	f000 81a5 	beq.w	8005ddc <_svfprintf_r+0x143c>
 8005a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a94:	441c      	add	r4, r3
 8005a96:	e03b      	b.n	8005b10 <_svfprintf_r+0x1170>
 8005a98:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005a9a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005aa2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005aa4:	f104 0404 	add.w	r4, r4, #4
 8005aa8:	9413      	str	r4, [sp, #76]	; 0x4c
 8005aaa:	bf14      	ite	ne
 8005aac:	801d      	strhne	r5, [r3, #0]
 8005aae:	601d      	streq	r5, [r3, #0]
 8005ab0:	f7fe bfb1 	b.w	8004a16 <_svfprintf_r+0x76>
 8005ab4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005ab6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ab8:	aa29      	add	r2, sp, #164	; 0xa4
 8005aba:	f001 ff53 	bl	8007964 <__ssprint_r>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	f47f a858 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005ac4:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005ac6:	ae36      	add	r6, sp, #216	; 0xd8
 8005ac8:	e434      	b.n	8005334 <_svfprintf_r+0x994>
 8005aca:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005acc:	2140      	movs	r1, #64	; 0x40
 8005ace:	f7fe fc07 	bl	80042e0 <_malloc_r>
 8005ad2:	6020      	str	r0, [r4, #0]
 8005ad4:	6120      	str	r0, [r4, #16]
 8005ad6:	2800      	cmp	r0, #0
 8005ad8:	f000 81c7 	beq.w	8005e6a <_svfprintf_r+0x14ca>
 8005adc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ade:	2340      	movs	r3, #64	; 0x40
 8005ae0:	6163      	str	r3, [r4, #20]
 8005ae2:	f7fe bf73 	b.w	80049cc <_svfprintf_r+0x2c>
 8005ae6:	2d45      	cmp	r5, #69	; 0x45
 8005ae8:	f040 8132 	bne.w	8005d50 <_svfprintf_r+0x13b0>
 8005aec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005aee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005af0:	1c44      	adds	r4, r0, #1
 8005af2:	a923      	add	r1, sp, #140	; 0x8c
 8005af4:	2002      	movs	r0, #2
 8005af6:	e88d 0011 	stmia.w	sp, {r0, r4}
 8005afa:	9102      	str	r1, [sp, #8]
 8005afc:	a824      	add	r0, sp, #144	; 0x90
 8005afe:	a927      	add	r1, sp, #156	; 0x9c
 8005b00:	9003      	str	r0, [sp, #12]
 8005b02:	4653      	mov	r3, sl
 8005b04:	9104      	str	r1, [sp, #16]
 8005b06:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b08:	f000 fad6 	bl	80060b8 <_dtoa_r>
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	4404      	add	r4, r0
 8005b10:	2300      	movs	r3, #0
 8005b12:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005b14:	4651      	mov	r1, sl
 8005b16:	2200      	movs	r2, #0
 8005b18:	f7fb f854 	bl	8000bc4 <__aeabi_dcmpeq>
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	b948      	cbnz	r0, 8005b34 <_svfprintf_r+0x1194>
 8005b20:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d906      	bls.n	8005b34 <_svfprintf_r+0x1194>
 8005b26:	2130      	movs	r1, #48	; 0x30
 8005b28:	1c5a      	adds	r2, r3, #1
 8005b2a:	9227      	str	r2, [sp, #156]	; 0x9c
 8005b2c:	7019      	strb	r1, [r3, #0]
 8005b2e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b30:	429c      	cmp	r4, r3
 8005b32:	d8f9      	bhi.n	8005b28 <_svfprintf_r+0x1188>
 8005b34:	ebc8 0303 	rsb	r3, r8, r3
 8005b38:	2d47      	cmp	r5, #71	; 0x47
 8005b3a:	9310      	str	r3, [sp, #64]	; 0x40
 8005b3c:	f000 80b1 	beq.w	8005ca2 <_svfprintf_r+0x1302>
 8005b40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b44:	f340 818c 	ble.w	8005e60 <_svfprintf_r+0x14c0>
 8005b48:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b4c:	f000 8107 	beq.w	8005d5e <_svfprintf_r+0x13be>
 8005b50:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8005b52:	9517      	str	r5, [sp, #92]	; 0x5c
 8005b54:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005b56:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b58:	42ac      	cmp	r4, r5
 8005b5a:	f2c0 80eb 	blt.w	8005d34 <_svfprintf_r+0x1394>
 8005b5e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005b60:	07e0      	lsls	r0, r4, #31
 8005b62:	bf49      	itett	mi
 8005b64:	9b17      	ldrmi	r3, [sp, #92]	; 0x5c
 8005b66:	9d17      	ldrpl	r5, [sp, #92]	; 0x5c
 8005b68:	3301      	addmi	r3, #1
 8005b6a:	930e      	strmi	r3, [sp, #56]	; 0x38
 8005b6c:	bf5a      	itte	pl
 8005b6e:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 8005b72:	950e      	strpl	r5, [sp, #56]	; 0x38
 8005b74:	ea23 73e3 	bicmi.w	r3, r3, r3, asr #31
 8005b78:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005b7c:	f1bb 0f00 	cmp.w	fp, #0
 8005b80:	d17b      	bne.n	8005c7a <_svfprintf_r+0x12da>
 8005b82:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005b84:	930d      	str	r3, [sp, #52]	; 0x34
 8005b86:	9409      	str	r4, [sp, #36]	; 0x24
 8005b88:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005b8c:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8005b90:	f7ff b84a 	b.w	8004c28 <_svfprintf_r+0x288>
 8005b94:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b98:	aa29      	add	r2, sp, #164	; 0xa4
 8005b9a:	f001 fee3 	bl	8007964 <__ssprint_r>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	f47e afe8 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005ba4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005ba6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005ba8:	ae36      	add	r6, sp, #216	; 0xd8
 8005baa:	e6e2      	b.n	8005972 <_svfprintf_r+0xfd2>
 8005bac:	3301      	adds	r3, #1
 8005bae:	4421      	add	r1, r4
 8005bb0:	2b07      	cmp	r3, #7
 8005bb2:	6015      	str	r5, [r2, #0]
 8005bb4:	6054      	str	r4, [r2, #4]
 8005bb6:	912b      	str	r1, [sp, #172]	; 0xac
 8005bb8:	932a      	str	r3, [sp, #168]	; 0xa8
 8005bba:	bfd8      	it	le
 8005bbc:	3208      	addle	r2, #8
 8005bbe:	dd0a      	ble.n	8005bd6 <_svfprintf_r+0x1236>
 8005bc0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005bc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005bc4:	aa29      	add	r2, sp, #164	; 0xa4
 8005bc6:	f001 fecd 	bl	8007964 <__ssprint_r>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f47e afd2 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005bd0:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005bd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005bd4:	aa36      	add	r2, sp, #216	; 0xd8
 8005bd6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005bd8:	f8c2 8000 	str.w	r8, [r2]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	4429      	add	r1, r5
 8005be0:	2b07      	cmp	r3, #7
 8005be2:	912b      	str	r1, [sp, #172]	; 0xac
 8005be4:	932a      	str	r3, [sp, #168]	; 0xa8
 8005be6:	6055      	str	r5, [r2, #4]
 8005be8:	f73f ac8a 	bgt.w	8005500 <_svfprintf_r+0xb60>
 8005bec:	f102 0608 	add.w	r6, r2, #8
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	f7ff b8f3 	b.w	8004ddc <_svfprintf_r+0x43c>
 8005bf6:	950c      	str	r5, [sp, #48]	; 0x30
 8005bf8:	f7fe fe6e 	bl	80048d8 <strlen>
 8005bfc:	9413      	str	r4, [sp, #76]	; 0x4c
 8005bfe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005c00:	900e      	str	r0, [sp, #56]	; 0x38
 8005c02:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8005c06:	950d      	str	r5, [sp, #52]	; 0x34
 8005c08:	9417      	str	r4, [sp, #92]	; 0x5c
 8005c0a:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8005c0e:	f7ff b80b 	b.w	8004c28 <_svfprintf_r+0x288>
 8005c12:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8005c16:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005c18:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005c1a:	f7ff b84d 	b.w	8004cb8 <_svfprintf_r+0x318>
 8005c1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c20:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c22:	aa29      	add	r2, sp, #164	; 0xa4
 8005c24:	f001 fe9e 	bl	8007964 <__ssprint_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f47e afa3 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005c2e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005c30:	ae36      	add	r6, sp, #216	; 0xd8
 8005c32:	e4a9      	b.n	8005588 <_svfprintf_r+0xbe8>
 8005c34:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c38:	aa29      	add	r2, sp, #164	; 0xa4
 8005c3a:	f001 fe93 	bl	8007964 <__ssprint_r>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	f47e af98 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005c44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c46:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c48:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005c4a:	1acb      	subs	r3, r1, r3
 8005c4c:	ae36      	add	r6, sp, #216	; 0xd8
 8005c4e:	e594      	b.n	800577a <_svfprintf_r+0xdda>
 8005c50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c52:	9413      	str	r4, [sp, #76]	; 0x4c
 8005c54:	2d06      	cmp	r5, #6
 8005c56:	bf28      	it	cs
 8005c58:	2506      	movcs	r5, #6
 8005c5a:	46c2      	mov	sl, r8
 8005c5c:	950e      	str	r5, [sp, #56]	; 0x38
 8005c5e:	f248 5810 	movw	r8, #34064	; 0x8510
 8005c62:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8005c66:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005c6a:	4654      	mov	r4, sl
 8005c6c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005c70:	950d      	str	r5, [sp, #52]	; 0x34
 8005c72:	f6c0 0800 	movt	r8, #2048	; 0x800
 8005c76:	f7fe bfd7 	b.w	8004c28 <_svfprintf_r+0x288>
 8005c7a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005c7c:	930d      	str	r3, [sp, #52]	; 0x34
 8005c7e:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005c82:	2400      	movs	r4, #0
 8005c84:	9509      	str	r5, [sp, #36]	; 0x24
 8005c86:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8005c8a:	940c      	str	r4, [sp, #48]	; 0x30
 8005c8c:	f7fe bfcf 	b.w	8004c2e <_svfprintf_r+0x28e>
 8005c90:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005c94:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8005c98:	f7ff b9a8 	b.w	8004fec <_svfprintf_r+0x64c>
 8005c9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c9e:	1a1b      	subs	r3, r3, r0
 8005ca0:	9310      	str	r3, [sp, #64]	; 0x40
 8005ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ca4:	1cda      	adds	r2, r3, #3
 8005ca6:	db11      	blt.n	8005ccc <_svfprintf_r+0x132c>
 8005ca8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005caa:	429c      	cmp	r4, r3
 8005cac:	db0e      	blt.n	8005ccc <_svfprintf_r+0x132c>
 8005cae:	9317      	str	r3, [sp, #92]	; 0x5c
 8005cb0:	e750      	b.n	8005b54 <_svfprintf_r+0x11b4>
 8005cb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cb4:	9413      	str	r4, [sp, #76]	; 0x4c
 8005cb6:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8005cba:	950d      	str	r5, [sp, #52]	; 0x34
 8005cbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cbe:	9017      	str	r0, [sp, #92]	; 0x5c
 8005cc0:	950e      	str	r5, [sp, #56]	; 0x38
 8005cc2:	900c      	str	r0, [sp, #48]	; 0x30
 8005cc4:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8005cc8:	f7fe bfae 	b.w	8004c28 <_svfprintf_r+0x288>
 8005ccc:	f1a9 0902 	sub.w	r9, r9, #2
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	9323      	str	r3, [sp, #140]	; 0x8c
 8005cd6:	bfba      	itte	lt
 8005cd8:	425b      	neglt	r3, r3
 8005cda:	222d      	movlt	r2, #45	; 0x2d
 8005cdc:	222b      	movge	r2, #43	; 0x2b
 8005cde:	2b09      	cmp	r3, #9
 8005ce0:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
 8005ce4:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
 8005ce8:	dc48      	bgt.n	8005d7c <_svfprintf_r+0x13dc>
 8005cea:	3330      	adds	r3, #48	; 0x30
 8005cec:	2230      	movs	r2, #48	; 0x30
 8005cee:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
 8005cf2:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
 8005cf6:	ab26      	add	r3, sp, #152	; 0x98
 8005cf8:	aa25      	add	r2, sp, #148	; 0x94
 8005cfa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005cfc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005cfe:	1a9a      	subs	r2, r3, r2
 8005d00:	4414      	add	r4, r2
 8005d02:	2d01      	cmp	r5, #1
 8005d04:	921d      	str	r2, [sp, #116]	; 0x74
 8005d06:	940e      	str	r4, [sp, #56]	; 0x38
 8005d08:	dd7f      	ble.n	8005e0a <_svfprintf_r+0x146a>
 8005d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d0c:	2400      	movs	r4, #0
 8005d0e:	3301      	adds	r3, #1
 8005d10:	930e      	str	r3, [sp, #56]	; 0x38
 8005d12:	9417      	str	r4, [sp, #92]	; 0x5c
 8005d14:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d18:	e730      	b.n	8005b7c <_svfprintf_r+0x11dc>
 8005d1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d1e:	aa29      	add	r2, sp, #164	; 0xa4
 8005d20:	f001 fe20 	bl	8007964 <__ssprint_r>
 8005d24:	2800      	cmp	r0, #0
 8005d26:	f47e af25 	bne.w	8004b74 <_svfprintf_r+0x1d4>
 8005d2a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005d2c:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005d2e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005d30:	aa36      	add	r2, sp, #216	; 0xd8
 8005d32:	e635      	b.n	80059a0 <_svfprintf_r+0x1000>
 8005d34:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d36:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d38:	2c00      	cmp	r4, #0
 8005d3a:	bfd4      	ite	le
 8005d3c:	f1c4 0302 	rsble	r3, r4, #2
 8005d40:	2301      	movgt	r3, #1
 8005d42:	441d      	add	r5, r3
 8005d44:	950e      	str	r5, [sp, #56]	; 0x38
 8005d46:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005d4a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d4e:	e715      	b.n	8005b7c <_svfprintf_r+0x11dc>
 8005d50:	2102      	movs	r1, #2
 8005d52:	e67b      	b.n	8005a4c <_svfprintf_r+0x10ac>
 8005d54:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005d58:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005d5a:	f7ff bbc8 	b.w	80054ee <_svfprintf_r+0xb4e>
 8005d5e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8005d60:	2c00      	cmp	r4, #0
 8005d62:	9417      	str	r4, [sp, #92]	; 0x5c
 8005d64:	dd5b      	ble.n	8005e1e <_svfprintf_r+0x147e>
 8005d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d68:	2d00      	cmp	r5, #0
 8005d6a:	d146      	bne.n	8005dfa <_svfprintf_r+0x145a>
 8005d6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005d6e:	07e5      	lsls	r5, r4, #31
 8005d70:	d443      	bmi.n	8005dfa <_svfprintf_r+0x145a>
 8005d72:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005d74:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005d78:	950e      	str	r5, [sp, #56]	; 0x38
 8005d7a:	e6ff      	b.n	8005b7c <_svfprintf_r+0x11dc>
 8005d7c:	f246 6067 	movw	r0, #26215	; 0x6667
 8005d80:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8005d84:	f10d 01a2 	add.w	r1, sp, #162	; 0xa2
 8005d88:	fb80 5403 	smull	r5, r4, r0, r3
 8005d8c:	17da      	asrs	r2, r3, #31
 8005d8e:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8005d92:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8005d96:	460d      	mov	r5, r1
 8005d98:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8005d9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005da0:	2a09      	cmp	r2, #9
 8005da2:	7029      	strb	r1, [r5, #0]
 8005da4:	4613      	mov	r3, r2
 8005da6:	f105 31ff 	add.w	r1, r5, #4294967295	; 0xffffffff
 8005daa:	dced      	bgt.n	8005d88 <_svfprintf_r+0x13e8>
 8005dac:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005db0:	f10d 00a3 	add.w	r0, sp, #163	; 0xa3
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	4288      	cmp	r0, r1
 8005db8:	f805 2c01 	strb.w	r2, [r5, #-1]
 8005dbc:	d952      	bls.n	8005e64 <_svfprintf_r+0x14c4>
 8005dbe:	f10d 0195 	add.w	r1, sp, #149	; 0x95
 8005dc2:	462b      	mov	r3, r5
 8005dc4:	e001      	b.n	8005dca <_svfprintf_r+0x142a>
 8005dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dca:	4283      	cmp	r3, r0
 8005dcc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005dd0:	d1f9      	bne.n	8005dc6 <_svfprintf_r+0x1426>
 8005dd2:	a846      	add	r0, sp, #280	; 0x118
 8005dd4:	ebc5 0340 	rsb	r3, r5, r0, lsl #1
 8005dd8:	3bf6      	subs	r3, #246	; 0xf6
 8005dda:	e78d      	b.n	8005cf8 <_svfprintf_r+0x1358>
 8005ddc:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005dde:	4651      	mov	r1, sl
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	f7fa feee 	bl	8000bc4 <__aeabi_dcmpeq>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	f47f ae52 	bne.w	8005a92 <_svfprintf_r+0x10f2>
 8005dee:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005df0:	f1c0 0301 	rsb	r3, r0, #1
 8005df4:	9323      	str	r3, [sp, #140]	; 0x8c
 8005df6:	441c      	add	r4, r3
 8005df8:	e68a      	b.n	8005b10 <_svfprintf_r+0x1170>
 8005dfa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005dfc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005dfe:	1c63      	adds	r3, r4, #1
 8005e00:	441d      	add	r5, r3
 8005e02:	950e      	str	r5, [sp, #56]	; 0x38
 8005e04:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005e08:	e6b8      	b.n	8005b7c <_svfprintf_r+0x11dc>
 8005e0a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005e0c:	f014 0301 	ands.w	r3, r4, #1
 8005e10:	f47f af7b 	bne.w	8005d0a <_svfprintf_r+0x136a>
 8005e14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005e16:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e18:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005e1c:	e6ae      	b.n	8005b7c <_svfprintf_r+0x11dc>
 8005e1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e20:	b934      	cbnz	r4, 8005e30 <_svfprintf_r+0x1490>
 8005e22:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e24:	07ec      	lsls	r4, r5, #31
 8005e26:	bf5c      	itt	pl
 8005e28:	2301      	movpl	r3, #1
 8005e2a:	930e      	strpl	r3, [sp, #56]	; 0x38
 8005e2c:	f57f aea6 	bpl.w	8005b7c <_svfprintf_r+0x11dc>
 8005e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e32:	3302      	adds	r3, #2
 8005e34:	930e      	str	r3, [sp, #56]	; 0x38
 8005e36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e3a:	e69f      	b.n	8005b7c <_svfprintf_r+0x11dc>
 8005e3c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005e3e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005e40:	682d      	ldr	r5, [r5, #0]
 8005e42:	f893 9001 	ldrb.w	r9, [r3, #1]
 8005e46:	950c      	str	r5, [sp, #48]	; 0x30
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	f104 0104 	add.w	r1, r4, #4
 8005e4e:	bfb8      	it	lt
 8005e50:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8005e54:	9113      	str	r1, [sp, #76]	; 0x4c
 8005e56:	4603      	mov	r3, r0
 8005e58:	bfb8      	it	lt
 8005e5a:	950c      	strlt	r5, [sp, #48]	; 0x30
 8005e5c:	f7fe be0f 	b.w	8004a7e <_svfprintf_r+0xde>
 8005e60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e62:	e735      	b.n	8005cd0 <_svfprintf_r+0x1330>
 8005e64:	f10d 0396 	add.w	r3, sp, #150	; 0x96
 8005e68:	e746      	b.n	8005cf8 <_svfprintf_r+0x1358>
 8005e6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	602b      	str	r3, [r5, #0]
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e74:	f7fe be86 	b.w	8004b84 <_svfprintf_r+0x1e4>

08005e78 <_vsprintf_r>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	b09b      	sub	sp, #108	; 0x6c
 8005e7c:	460d      	mov	r5, r1
 8005e7e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005e82:	f44f 7702 	mov.w	r7, #520	; 0x208
 8005e86:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005e8a:	4669      	mov	r1, sp
 8005e8c:	9500      	str	r5, [sp, #0]
 8005e8e:	9504      	str	r5, [sp, #16]
 8005e90:	f8ad 700c 	strh.w	r7, [sp, #12]
 8005e94:	9402      	str	r4, [sp, #8]
 8005e96:	9405      	str	r4, [sp, #20]
 8005e98:	f8ad 600e 	strh.w	r6, [sp, #14]
 8005e9c:	f7fe fd80 	bl	80049a0 <_svfprintf_r>
 8005ea0:	9b00      	ldr	r3, [sp, #0]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
 8005ea6:	b01b      	add	sp, #108	; 0x6c
 8005ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005eaa:	bf00      	nop

08005eac <vsprintf>:
 8005eac:	b430      	push	{r4, r5}
 8005eae:	f240 44a0 	movw	r4, #1184	; 0x4a0
 8005eb2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005eb6:	460d      	mov	r5, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	4601      	mov	r1, r0
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	6820      	ldr	r0, [r4, #0]
 8005ec0:	bc30      	pop	{r4, r5}
 8005ec2:	f7ff bfd9 	b.w	8005e78 <_vsprintf_r>
 8005ec6:	bf00      	nop

08005ec8 <__register_exitproc>:
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	f248 44c4 	movw	r4, #33988	; 0x84c4
 8005ece:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	6826      	ldr	r6, [r4, #0]
 8005ed6:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8005eda:	4607      	mov	r7, r0
 8005edc:	2c00      	cmp	r4, #0
 8005ede:	d044      	beq.n	8005f6a <__register_exitproc+0xa2>
 8005ee0:	6865      	ldr	r5, [r4, #4]
 8005ee2:	2d1f      	cmp	r5, #31
 8005ee4:	dd21      	ble.n	8005f2a <__register_exitproc+0x62>
 8005ee6:	f244 24c1 	movw	r4, #17089	; 0x42c1
 8005eea:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005eee:	b91c      	cbnz	r4, 8005ef8 <__register_exitproc+0x30>
 8005ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ef4:	b005      	add	sp, #20
 8005ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005efc:	9103      	str	r1, [sp, #12]
 8005efe:	9202      	str	r2, [sp, #8]
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	f7fe f9dd 	bl	80042c0 <malloc>
 8005f06:	9903      	ldr	r1, [sp, #12]
 8005f08:	9a02      	ldr	r2, [sp, #8]
 8005f0a:	9b01      	ldr	r3, [sp, #4]
 8005f0c:	4604      	mov	r4, r0
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d0ee      	beq.n	8005ef0 <__register_exitproc+0x28>
 8005f12:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8005f16:	2000      	movs	r0, #0
 8005f18:	6025      	str	r5, [r4, #0]
 8005f1a:	6060      	str	r0, [r4, #4]
 8005f1c:	4605      	mov	r5, r0
 8005f1e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005f22:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8005f26:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8005f2a:	b93f      	cbnz	r7, 8005f3c <__register_exitproc+0x74>
 8005f2c:	1cab      	adds	r3, r5, #2
 8005f2e:	2000      	movs	r0, #0
 8005f30:	3501      	adds	r5, #1
 8005f32:	6065      	str	r5, [r4, #4]
 8005f34:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8005f38:	b005      	add	sp, #20
 8005f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f3c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8005f40:	f04f 0c01 	mov.w	ip, #1
 8005f44:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005f48:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8005f4c:	fa0c f205 	lsl.w	r2, ip, r5
 8005f50:	4316      	orrs	r6, r2
 8005f52:	2f02      	cmp	r7, #2
 8005f54:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8005f58:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005f5c:	bf02      	ittt	eq
 8005f5e:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8005f62:	431a      	orreq	r2, r3
 8005f64:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8005f68:	e7e0      	b.n	8005f2c <__register_exitproc+0x64>
 8005f6a:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8005f6e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005f72:	e7b5      	b.n	8005ee0 <__register_exitproc+0x18>

08005f74 <register_fini>:
 8005f74:	f240 0300 	movw	r3, #0
 8005f78:	f2c0 0300 	movt	r3, #0
 8005f7c:	b12b      	cbz	r3, 8005f8a <register_fini+0x16>
 8005f7e:	f244 2031 	movw	r0, #16945	; 0x4231
 8005f82:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005f86:	f7fe b94d 	b.w	8004224 <atexit>
 8005f8a:	4770      	bx	lr

08005f8c <quorem>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	6903      	ldr	r3, [r0, #16]
 8005f92:	690d      	ldr	r5, [r1, #16]
 8005f94:	429d      	cmp	r5, r3
 8005f96:	4683      	mov	fp, r0
 8005f98:	b083      	sub	sp, #12
 8005f9a:	bfc8      	it	gt
 8005f9c:	2000      	movgt	r0, #0
 8005f9e:	f300 8088 	bgt.w	80060b2 <quorem+0x126>
 8005fa2:	3d01      	subs	r5, #1
 8005fa4:	f101 0414 	add.w	r4, r1, #20
 8005fa8:	f10b 0a14 	add.w	sl, fp, #20
 8005fac:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8005fb0:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8005fb4:	3201      	adds	r2, #1
 8005fb6:	fbb3 f8f2 	udiv	r8, r3, r2
 8005fba:	00aa      	lsls	r2, r5, #2
 8005fbc:	4691      	mov	r9, r2
 8005fbe:	9200      	str	r2, [sp, #0]
 8005fc0:	4452      	add	r2, sl
 8005fc2:	44a1      	add	r9, r4
 8005fc4:	9201      	str	r2, [sp, #4]
 8005fc6:	f1b8 0f00 	cmp.w	r8, #0
 8005fca:	d03d      	beq.n	8006048 <quorem+0xbc>
 8005fcc:	f04f 0e00 	mov.w	lr, #0
 8005fd0:	4670      	mov	r0, lr
 8005fd2:	4622      	mov	r2, r4
 8005fd4:	4653      	mov	r3, sl
 8005fd6:	468c      	mov	ip, r1
 8005fd8:	f852 6b04 	ldr.w	r6, [r2], #4
 8005fdc:	6819      	ldr	r1, [r3, #0]
 8005fde:	b2b7      	uxth	r7, r6
 8005fe0:	0c36      	lsrs	r6, r6, #16
 8005fe2:	fb07 ee08 	mla	lr, r7, r8, lr
 8005fe6:	fb06 f608 	mul.w	r6, r6, r8
 8005fea:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 8005fee:	fa1f f78e 	uxth.w	r7, lr
 8005ff2:	1bc7      	subs	r7, r0, r7
 8005ff4:	b2b0      	uxth	r0, r6
 8005ff6:	fa17 f781 	uxtah	r7, r7, r1
 8005ffa:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 8005ffe:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8006002:	b2bf      	uxth	r7, r7
 8006004:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8006008:	4591      	cmp	r9, r2
 800600a:	f843 7b04 	str.w	r7, [r3], #4
 800600e:	ea4f 4020 	mov.w	r0, r0, asr #16
 8006012:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006016:	d2df      	bcs.n	8005fd8 <quorem+0x4c>
 8006018:	9a00      	ldr	r2, [sp, #0]
 800601a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800601e:	4661      	mov	r1, ip
 8006020:	b993      	cbnz	r3, 8006048 <quorem+0xbc>
 8006022:	9a01      	ldr	r2, [sp, #4]
 8006024:	1f13      	subs	r3, r2, #4
 8006026:	459a      	cmp	sl, r3
 8006028:	d20c      	bcs.n	8006044 <quorem+0xb8>
 800602a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800602e:	b94b      	cbnz	r3, 8006044 <quorem+0xb8>
 8006030:	f1a2 0308 	sub.w	r3, r2, #8
 8006034:	e002      	b.n	800603c <quorem+0xb0>
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	3b04      	subs	r3, #4
 800603a:	b91a      	cbnz	r2, 8006044 <quorem+0xb8>
 800603c:	459a      	cmp	sl, r3
 800603e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006042:	d3f8      	bcc.n	8006036 <quorem+0xaa>
 8006044:	f8cb 5010 	str.w	r5, [fp, #16]
 8006048:	4658      	mov	r0, fp
 800604a:	f001 fb79 	bl	8007740 <__mcmp>
 800604e:	2800      	cmp	r0, #0
 8006050:	db2e      	blt.n	80060b0 <quorem+0x124>
 8006052:	f108 0801 	add.w	r8, r8, #1
 8006056:	4653      	mov	r3, sl
 8006058:	2200      	movs	r2, #0
 800605a:	f854 6b04 	ldr.w	r6, [r4], #4
 800605e:	6818      	ldr	r0, [r3, #0]
 8006060:	b2b1      	uxth	r1, r6
 8006062:	1a52      	subs	r2, r2, r1
 8006064:	0c36      	lsrs	r6, r6, #16
 8006066:	fa12 f180 	uxtah	r1, r2, r0
 800606a:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 800606e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8006072:	b289      	uxth	r1, r1
 8006074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006078:	45a1      	cmp	r9, r4
 800607a:	f843 1b04 	str.w	r1, [r3], #4
 800607e:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006082:	d2ea      	bcs.n	800605a <quorem+0xce>
 8006084:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 8006088:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 800608c:	b982      	cbnz	r2, 80060b0 <quorem+0x124>
 800608e:	1f1a      	subs	r2, r3, #4
 8006090:	4592      	cmp	sl, r2
 8006092:	d20b      	bcs.n	80060ac <quorem+0x120>
 8006094:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8006098:	b942      	cbnz	r2, 80060ac <quorem+0x120>
 800609a:	3b08      	subs	r3, #8
 800609c:	e002      	b.n	80060a4 <quorem+0x118>
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	3b04      	subs	r3, #4
 80060a2:	b91a      	cbnz	r2, 80060ac <quorem+0x120>
 80060a4:	459a      	cmp	sl, r3
 80060a6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80060aa:	d3f8      	bcc.n	800609e <quorem+0x112>
 80060ac:	f8cb 5010 	str.w	r5, [fp, #16]
 80060b0:	4640      	mov	r0, r8
 80060b2:	b003      	add	sp, #12
 80060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080060b8 <_dtoa_r>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80060be:	b09d      	sub	sp, #116	; 0x74
 80060c0:	4604      	mov	r4, r0
 80060c2:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80060c4:	4692      	mov	sl, r2
 80060c6:	469b      	mov	fp, r3
 80060c8:	b141      	cbz	r1, 80060dc <_dtoa_r+0x24>
 80060ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80060cc:	2201      	movs	r2, #1
 80060ce:	409a      	lsls	r2, r3
 80060d0:	604b      	str	r3, [r1, #4]
 80060d2:	608a      	str	r2, [r1, #8]
 80060d4:	f001 f930 	bl	8007338 <_Bfree>
 80060d8:	2300      	movs	r3, #0
 80060da:	6423      	str	r3, [r4, #64]	; 0x40
 80060dc:	f1bb 0f00 	cmp.w	fp, #0
 80060e0:	bfb5      	itete	lt
 80060e2:	2301      	movlt	r3, #1
 80060e4:	2300      	movge	r3, #0
 80060e6:	602b      	strlt	r3, [r5, #0]
 80060e8:	602b      	strge	r3, [r5, #0]
 80060ea:	f04f 0300 	mov.w	r3, #0
 80060ee:	bfb4      	ite	lt
 80060f0:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 80060f4:	46d9      	movge	r9, fp
 80060f6:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	ea09 0303 	and.w	r3, r9, r3
 8006102:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006106:	bfb8      	it	lt
 8006108:	46cb      	movlt	fp, r9
 800610a:	4293      	cmp	r3, r2
 800610c:	d014      	beq.n	8006138 <_dtoa_r+0x80>
 800610e:	2200      	movs	r2, #0
 8006110:	2300      	movs	r3, #0
 8006112:	4650      	mov	r0, sl
 8006114:	4659      	mov	r1, fp
 8006116:	f7fa fd55 	bl	8000bc4 <__aeabi_dcmpeq>
 800611a:	4680      	mov	r8, r0
 800611c:	b328      	cbz	r0, 800616a <_dtoa_r+0xb2>
 800611e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8006120:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8006122:	2301      	movs	r3, #1
 8006124:	6033      	str	r3, [r6, #0]
 8006126:	2d00      	cmp	r5, #0
 8006128:	f000 80dd 	beq.w	80062e6 <_dtoa_r+0x22e>
 800612c:	48aa      	ldr	r0, [pc, #680]	; (80063d8 <_dtoa_r+0x320>)
 800612e:	6028      	str	r0, [r5, #0]
 8006130:	3801      	subs	r0, #1
 8006132:	b01d      	add	sp, #116	; 0x74
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800613a:	f242 730f 	movw	r3, #9999	; 0x270f
 800613e:	f248 5038 	movw	r0, #34104	; 0x8538
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006148:	f1ba 0f00 	cmp.w	sl, #0
 800614c:	f000 80ab 	beq.w	80062a6 <_dtoa_r+0x1ee>
 8006150:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8006152:	2e00      	cmp	r6, #0
 8006154:	d0ed      	beq.n	8006132 <_dtoa_r+0x7a>
 8006156:	78c3      	ldrb	r3, [r0, #3]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f040 80b3 	bne.w	80062c4 <_dtoa_r+0x20c>
 800615e:	1cc3      	adds	r3, r0, #3
 8006160:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	b01d      	add	sp, #116	; 0x74
 8006166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616a:	aa1b      	add	r2, sp, #108	; 0x6c
 800616c:	ab1a      	add	r3, sp, #104	; 0x68
 800616e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006172:	4620      	mov	r0, r4
 8006174:	4652      	mov	r2, sl
 8006176:	465b      	mov	r3, fp
 8006178:	f001 fb6e 	bl	8007858 <__d2b>
 800617c:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8006180:	900d      	str	r0, [sp, #52]	; 0x34
 8006182:	f040 80a2 	bne.w	80062ca <_dtoa_r+0x212>
 8006186:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006188:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800618a:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 800618e:	443d      	add	r5, r7
 8006190:	429d      	cmp	r5, r3
 8006192:	f2c0 825f 	blt.w	8006654 <_dtoa_r+0x59c>
 8006196:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 800619a:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 800619e:	1b5b      	subs	r3, r3, r5
 80061a0:	f205 4212 	addw	r2, r5, #1042	; 0x412
 80061a4:	fa09 f303 	lsl.w	r3, r9, r3
 80061a8:	fa2a f202 	lsr.w	r2, sl, r2
 80061ac:	ea43 0002 	orr.w	r0, r3, r2
 80061b0:	f7fa fa2a 	bl	8000608 <__aeabi_ui2d>
 80061b4:	2601      	movs	r6, #1
 80061b6:	3d01      	subs	r5, #1
 80061b8:	46b8      	mov	r8, r7
 80061ba:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80061be:	9617      	str	r6, [sp, #92]	; 0x5c
 80061c0:	2300      	movs	r3, #0
 80061c2:	2200      	movs	r2, #0
 80061c4:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 80061c8:	f7fa f8e0 	bl	800038c <__aeabi_dsub>
 80061cc:	a37c      	add	r3, pc, #496	; (adr r3, 80063c0 <_dtoa_r+0x308>)
 80061ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d2:	f7fa fa8f 	bl	80006f4 <__aeabi_dmul>
 80061d6:	a37c      	add	r3, pc, #496	; (adr r3, 80063c8 <_dtoa_r+0x310>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa f8d8 	bl	8000390 <__adddf3>
 80061e0:	4606      	mov	r6, r0
 80061e2:	4628      	mov	r0, r5
 80061e4:	460f      	mov	r7, r1
 80061e6:	f7fa fa1f 	bl	8000628 <__aeabi_i2d>
 80061ea:	a379      	add	r3, pc, #484	; (adr r3, 80063d0 <_dtoa_r+0x318>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa fa80 	bl	80006f4 <__aeabi_dmul>
 80061f4:	4602      	mov	r2, r0
 80061f6:	460b      	mov	r3, r1
 80061f8:	4630      	mov	r0, r6
 80061fa:	4639      	mov	r1, r7
 80061fc:	f7fa f8c8 	bl	8000390 <__adddf3>
 8006200:	4606      	mov	r6, r0
 8006202:	460f      	mov	r7, r1
 8006204:	f7fa fd10 	bl	8000c28 <__aeabi_d2iz>
 8006208:	4639      	mov	r1, r7
 800620a:	9007      	str	r0, [sp, #28]
 800620c:	2200      	movs	r2, #0
 800620e:	4630      	mov	r0, r6
 8006210:	2300      	movs	r3, #0
 8006212:	f7fa fce1 	bl	8000bd8 <__aeabi_dcmplt>
 8006216:	2800      	cmp	r0, #0
 8006218:	f040 8205 	bne.w	8006626 <_dtoa_r+0x56e>
 800621c:	9e07      	ldr	r6, [sp, #28]
 800621e:	2e16      	cmp	r6, #22
 8006220:	bf84      	itt	hi
 8006222:	2601      	movhi	r6, #1
 8006224:	9616      	strhi	r6, [sp, #88]	; 0x58
 8006226:	d812      	bhi.n	800624e <_dtoa_r+0x196>
 8006228:	f248 5348 	movw	r3, #34120	; 0x8548
 800622c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006230:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006238:	4652      	mov	r2, sl
 800623a:	465b      	mov	r3, fp
 800623c:	f7fa fcea 	bl	8000c14 <__aeabi_dcmpgt>
 8006240:	2800      	cmp	r0, #0
 8006242:	f000 820f 	beq.w	8006664 <_dtoa_r+0x5ac>
 8006246:	3e01      	subs	r6, #1
 8006248:	9607      	str	r6, [sp, #28]
 800624a:	2600      	movs	r6, #0
 800624c:	9616      	str	r6, [sp, #88]	; 0x58
 800624e:	ebc5 0508 	rsb	r5, r5, r8
 8006252:	3d01      	subs	r5, #1
 8006254:	bf48      	it	mi
 8006256:	2600      	movmi	r6, #0
 8006258:	950a      	str	r5, [sp, #40]	; 0x28
 800625a:	bf48      	it	mi
 800625c:	960a      	strmi	r6, [sp, #40]	; 0x28
 800625e:	9e07      	ldr	r6, [sp, #28]
 8006260:	bf4b      	itete	mi
 8006262:	426d      	negmi	r5, r5
 8006264:	2500      	movpl	r5, #0
 8006266:	950c      	strmi	r5, [sp, #48]	; 0x30
 8006268:	950c      	strpl	r5, [sp, #48]	; 0x30
 800626a:	2e00      	cmp	r6, #0
 800626c:	f2c0 81e9 	blt.w	8006642 <_dtoa_r+0x58a>
 8006270:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006272:	9611      	str	r6, [sp, #68]	; 0x44
 8006274:	4435      	add	r5, r6
 8006276:	2600      	movs	r6, #0
 8006278:	950a      	str	r5, [sp, #40]	; 0x28
 800627a:	960e      	str	r6, [sp, #56]	; 0x38
 800627c:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800627e:	2d09      	cmp	r5, #9
 8006280:	d836      	bhi.n	80062f0 <_dtoa_r+0x238>
 8006282:	2d05      	cmp	r5, #5
 8006284:	bfc4      	itt	gt
 8006286:	3d04      	subgt	r5, #4
 8006288:	9526      	strgt	r5, [sp, #152]	; 0x98
 800628a:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800628c:	f1a6 0302 	sub.w	r3, r6, #2
 8006290:	bfcc      	ite	gt
 8006292:	2500      	movgt	r5, #0
 8006294:	2501      	movle	r5, #1
 8006296:	2b03      	cmp	r3, #3
 8006298:	d82c      	bhi.n	80062f4 <_dtoa_r+0x23c>
 800629a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800629e:	0347      	.short	0x0347
 80062a0:	03560213 	.word	0x03560213
 80062a4:	0573      	.short	0x0573
 80062a6:	f248 522c 	movw	r2, #34092	; 0x852c
 80062aa:	f248 5338 	movw	r3, #34104	; 0x8538
 80062ae:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80062b2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80062b6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80062ba:	2800      	cmp	r0, #0
 80062bc:	bf0c      	ite	eq
 80062be:	4610      	moveq	r0, r2
 80062c0:	4618      	movne	r0, r3
 80062c2:	e745      	b.n	8006150 <_dtoa_r+0x98>
 80062c4:	f100 0308 	add.w	r3, r0, #8
 80062c8:	e74a      	b.n	8006160 <_dtoa_r+0xa8>
 80062ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062ce:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80062d2:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80062d6:	4650      	mov	r0, sl
 80062d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80062dc:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 80062e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80062e4:	e76c      	b.n	80061c0 <_dtoa_r+0x108>
 80062e6:	f248 5018 	movw	r0, #34072	; 0x8518
 80062ea:	f6c0 0000 	movt	r0, #2048	; 0x800
 80062ee:	e720      	b.n	8006132 <_dtoa_r+0x7a>
 80062f0:	2600      	movs	r6, #0
 80062f2:	9626      	str	r6, [sp, #152]	; 0x98
 80062f4:	2500      	movs	r5, #0
 80062f6:	6465      	str	r5, [r4, #68]	; 0x44
 80062f8:	4629      	mov	r1, r5
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 fff6 	bl	80072ec <_Balloc>
 8006300:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006304:	9527      	str	r5, [sp, #156]	; 0x9c
 8006306:	2501      	movs	r5, #1
 8006308:	9009      	str	r0, [sp, #36]	; 0x24
 800630a:	9610      	str	r6, [sp, #64]	; 0x40
 800630c:	6420      	str	r0, [r4, #64]	; 0x40
 800630e:	960b      	str	r6, [sp, #44]	; 0x2c
 8006310:	950f      	str	r5, [sp, #60]	; 0x3c
 8006312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f2c0 80be 	blt.w	8006496 <_dtoa_r+0x3de>
 800631a:	9e07      	ldr	r6, [sp, #28]
 800631c:	2e0e      	cmp	r6, #14
 800631e:	f300 80ba 	bgt.w	8006496 <_dtoa_r+0x3de>
 8006322:	f248 5348 	movw	r3, #34120	; 0x8548
 8006326:	f6c0 0300 	movt	r3, #2048	; 0x800
 800632a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800632e:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
 8006332:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006334:	ed93 7b00 	vldr	d7, [r3]
 8006338:	ea4f 72de 	mov.w	r2, lr, lsr #31
 800633c:	2d00      	cmp	r5, #0
 800633e:	bfcc      	ite	gt
 8006340:	2200      	movgt	r2, #0
 8006342:	f002 0201 	andle.w	r2, r2, #1
 8006346:	ed8d 7b04 	vstr	d7, [sp, #16]
 800634a:	2a00      	cmp	r2, #0
 800634c:	f040 8450 	bne.w	8006bf0 <_dtoa_r+0xb38>
 8006350:	ec53 2b17 	vmov	r2, r3, d7
 8006354:	4650      	mov	r0, sl
 8006356:	4659      	mov	r1, fp
 8006358:	f7fa faf6 	bl	8000948 <__aeabi_ddiv>
 800635c:	f7fa fc64 	bl	8000c28 <__aeabi_d2iz>
 8006360:	4680      	mov	r8, r0
 8006362:	f7fa f961 	bl	8000628 <__aeabi_i2d>
 8006366:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800636a:	f7fa f9c3 	bl	80006f4 <__aeabi_dmul>
 800636e:	460b      	mov	r3, r1
 8006370:	4602      	mov	r2, r0
 8006372:	4659      	mov	r1, fp
 8006374:	4650      	mov	r0, sl
 8006376:	f7fa f809 	bl	800038c <__aeabi_dsub>
 800637a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800637c:	f108 0330 	add.w	r3, r8, #48	; 0x30
 8006380:	702b      	strb	r3, [r5, #0]
 8006382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006384:	2b01      	cmp	r3, #1
 8006386:	4606      	mov	r6, r0
 8006388:	460f      	mov	r7, r1
 800638a:	f105 0501 	add.w	r5, r5, #1
 800638e:	d055      	beq.n	800643c <_dtoa_r+0x384>
 8006390:	2300      	movs	r3, #0
 8006392:	2200      	movs	r2, #0
 8006394:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006398:	f7fa f9ac 	bl	80006f4 <__aeabi_dmul>
 800639c:	2200      	movs	r2, #0
 800639e:	2300      	movs	r3, #0
 80063a0:	4606      	mov	r6, r0
 80063a2:	460f      	mov	r7, r1
 80063a4:	f7fa fc0e 	bl	8000bc4 <__aeabi_dcmpeq>
 80063a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80063ac:	2800      	cmp	r0, #0
 80063ae:	f040 8503 	bne.w	8006db8 <_dtoa_r+0xd00>
 80063b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80063b4:	44a9      	add	r9, r5
 80063b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063b8:	f105 0a02 	add.w	sl, r5, #2
 80063bc:	e019      	b.n	80063f2 <_dtoa_r+0x33a>
 80063be:	bf00      	nop
 80063c0:	636f4361 	.word	0x636f4361
 80063c4:	3fd287a7 	.word	0x3fd287a7
 80063c8:	8b60c8b3 	.word	0x8b60c8b3
 80063cc:	3fc68a28 	.word	0x3fc68a28
 80063d0:	509f79fb 	.word	0x509f79fb
 80063d4:	3fd34413 	.word	0x3fd34413
 80063d8:	08008519 	.word	0x08008519
 80063dc:	f7fa f98a 	bl	80006f4 <__aeabi_dmul>
 80063e0:	2200      	movs	r2, #0
 80063e2:	2300      	movs	r3, #0
 80063e4:	4606      	mov	r6, r0
 80063e6:	460f      	mov	r7, r1
 80063e8:	f7fa fbec 	bl	8000bc4 <__aeabi_dcmpeq>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	f040 84e1 	bne.w	8006db4 <_dtoa_r+0xcfc>
 80063f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063f6:	4630      	mov	r0, r6
 80063f8:	4639      	mov	r1, r7
 80063fa:	f7fa faa5 	bl	8000948 <__aeabi_ddiv>
 80063fe:	f7fa fc13 	bl	8000c28 <__aeabi_d2iz>
 8006402:	4680      	mov	r8, r0
 8006404:	f7fa f910 	bl	8000628 <__aeabi_i2d>
 8006408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800640c:	f7fa f972 	bl	80006f4 <__aeabi_dmul>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
 8006414:	4630      	mov	r0, r6
 8006416:	4639      	mov	r1, r7
 8006418:	f7f9 ffb8 	bl	800038c <__aeabi_dsub>
 800641c:	f108 0530 	add.w	r5, r8, #48	; 0x30
 8006420:	2300      	movs	r3, #0
 8006422:	45ca      	cmp	sl, r9
 8006424:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8006428:	4606      	mov	r6, r0
 800642a:	4655      	mov	r5, sl
 800642c:	460f      	mov	r7, r1
 800642e:	f04f 0200 	mov.w	r2, #0
 8006432:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006436:	f10a 0a01 	add.w	sl, sl, #1
 800643a:	d1cf      	bne.n	80063dc <_dtoa_r+0x324>
 800643c:	4632      	mov	r2, r6
 800643e:	463b      	mov	r3, r7
 8006440:	4630      	mov	r0, r6
 8006442:	4639      	mov	r1, r7
 8006444:	f7f9 ffa4 	bl	8000390 <__adddf3>
 8006448:	4606      	mov	r6, r0
 800644a:	460f      	mov	r7, r1
 800644c:	4632      	mov	r2, r6
 800644e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006452:	463b      	mov	r3, r7
 8006454:	f7fa fbc0 	bl	8000bd8 <__aeabi_dcmplt>
 8006458:	2800      	cmp	r0, #0
 800645a:	f000 8564 	beq.w	8006f26 <_dtoa_r+0xe6e>
 800645e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006462:	9e07      	ldr	r6, [sp, #28]
 8006464:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8006468:	9618      	str	r6, [sp, #96]	; 0x60
 800646a:	9509      	str	r5, [sp, #36]	; 0x24
 800646c:	462a      	mov	r2, r5
 800646e:	e005      	b.n	800647c <_dtoa_r+0x3c4>
 8006470:	4599      	cmp	r9, r3
 8006472:	f000 84d3 	beq.w	8006e1c <_dtoa_r+0xd64>
 8006476:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 800647a:	461a      	mov	r2, r3
 800647c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006480:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8006484:	d0f4      	beq.n	8006470 <_dtoa_r+0x3b8>
 8006486:	9209      	str	r2, [sp, #36]	; 0x24
 8006488:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800648a:	f108 0201 	add.w	r2, r8, #1
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	9607      	str	r6, [sp, #28]
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e0b1      	b.n	80065fa <_dtoa_r+0x542>
 8006496:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006498:	2d00      	cmp	r5, #0
 800649a:	f040 80e5 	bne.w	8006668 <_dtoa_r+0x5b0>
 800649e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80064a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064a2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80064a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064a8:	2900      	cmp	r1, #0
 80064aa:	bfc8      	it	gt
 80064ac:	2d00      	cmpgt	r5, #0
 80064ae:	dd09      	ble.n	80064c4 <_dtoa_r+0x40c>
 80064b0:	460b      	mov	r3, r1
 80064b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	bfa8      	it	ge
 80064b8:	462b      	movge	r3, r5
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	1ac9      	subs	r1, r1, r3
 80064be:	920c      	str	r2, [sp, #48]	; 0x30
 80064c0:	1aed      	subs	r5, r5, r3
 80064c2:	910a      	str	r1, [sp, #40]	; 0x28
 80064c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dd1a      	ble.n	8006500 <_dtoa_r+0x448>
 80064ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064cc:	2900      	cmp	r1, #0
 80064ce:	f000 8469 	beq.w	8006da4 <_dtoa_r+0xcec>
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	dd10      	ble.n	80064f8 <_dtoa_r+0x440>
 80064d6:	4641      	mov	r1, r8
 80064d8:	4632      	mov	r2, r6
 80064da:	4620      	mov	r0, r4
 80064dc:	f001 f882 	bl	80075e4 <__pow5mult>
 80064e0:	4680      	mov	r8, r0
 80064e2:	4641      	mov	r1, r8
 80064e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 ffd2 	bl	8007490 <__multiply>
 80064ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80064ee:	4607      	mov	r7, r0
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 ff21 	bl	8007338 <_Bfree>
 80064f6:	970d      	str	r7, [sp, #52]	; 0x34
 80064f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064fa:	1b9a      	subs	r2, r3, r6
 80064fc:	f040 8499 	bne.w	8006e32 <_dtoa_r+0xd7a>
 8006500:	2101      	movs	r1, #1
 8006502:	4620      	mov	r0, r4
 8006504:	f000 ffba 	bl	800747c <__i2b>
 8006508:	9911      	ldr	r1, [sp, #68]	; 0x44
 800650a:	2900      	cmp	r1, #0
 800650c:	4606      	mov	r6, r0
 800650e:	dd05      	ble.n	800651c <_dtoa_r+0x464>
 8006510:	4601      	mov	r1, r0
 8006512:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006514:	4620      	mov	r0, r4
 8006516:	f001 f865 	bl	80075e4 <__pow5mult>
 800651a:	4606      	mov	r6, r0
 800651c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800651e:	2a01      	cmp	r2, #1
 8006520:	f340 837c 	ble.w	8006c1c <_dtoa_r+0xb64>
 8006524:	2700      	movs	r7, #0
 8006526:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006528:	2001      	movs	r0, #1
 800652a:	2900      	cmp	r1, #0
 800652c:	f040 8336 	bne.w	8006b9c <_dtoa_r+0xae4>
 8006530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006532:	4403      	add	r3, r0
 8006534:	f013 031f 	ands.w	r3, r3, #31
 8006538:	f000 8289 	beq.w	8006a4e <_dtoa_r+0x996>
 800653c:	f1c3 0220 	rsb	r2, r3, #32
 8006540:	2a04      	cmp	r2, #4
 8006542:	f340 855f 	ble.w	8007004 <_dtoa_r+0xf4c>
 8006546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006548:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800654c:	f1c3 031c 	rsb	r3, r3, #28
 8006550:	441a      	add	r2, r3
 8006552:	449e      	add	lr, r3
 8006554:	920c      	str	r2, [sp, #48]	; 0x30
 8006556:	441d      	add	r5, r3
 8006558:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800655c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800655e:	2b00      	cmp	r3, #0
 8006560:	dd05      	ble.n	800656e <_dtoa_r+0x4b6>
 8006562:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006564:	461a      	mov	r2, r3
 8006566:	4620      	mov	r0, r4
 8006568:	f001 f88c 	bl	8007684 <__lshift>
 800656c:	900d      	str	r0, [sp, #52]	; 0x34
 800656e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006570:	2900      	cmp	r1, #0
 8006572:	dd05      	ble.n	8006580 <_dtoa_r+0x4c8>
 8006574:	4631      	mov	r1, r6
 8006576:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006578:	4620      	mov	r0, r4
 800657a:	f001 f883 	bl	8007684 <__lshift>
 800657e:	4606      	mov	r6, r0
 8006580:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006582:	2a00      	cmp	r2, #0
 8006584:	f040 8313 	bne.w	8006bae <_dtoa_r+0xaf6>
 8006588:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800658a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800658c:	2a02      	cmp	r2, #2
 800658e:	bfd4      	ite	le
 8006590:	2300      	movle	r3, #0
 8006592:	2301      	movgt	r3, #1
 8006594:	2900      	cmp	r1, #0
 8006596:	bfc8      	it	gt
 8006598:	2300      	movgt	r3, #0
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 820d 	beq.w	80069ba <_dtoa_r+0x902>
 80065a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	f040 8202 	bne.w	80069ac <_dtoa_r+0x8f4>
 80065a8:	4631      	mov	r1, r6
 80065aa:	462b      	mov	r3, r5
 80065ac:	2205      	movs	r2, #5
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 fecc 	bl	800734c <__multadd>
 80065b4:	4606      	mov	r6, r0
 80065b6:	4631      	mov	r1, r6
 80065b8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80065ba:	f001 f8c1 	bl	8007740 <__mcmp>
 80065be:	2800      	cmp	r0, #0
 80065c0:	f340 81f4 	ble.w	80069ac <_dtoa_r+0x8f4>
 80065c4:	9d07      	ldr	r5, [sp, #28]
 80065c6:	3501      	adds	r5, #1
 80065c8:	9507      	str	r5, [sp, #28]
 80065ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065cc:	46a9      	mov	r9, r5
 80065ce:	2331      	movs	r3, #49	; 0x31
 80065d0:	f109 0101 	add.w	r1, r9, #1
 80065d4:	702b      	strb	r3, [r5, #0]
 80065d6:	9109      	str	r1, [sp, #36]	; 0x24
 80065d8:	2500      	movs	r5, #0
 80065da:	4631      	mov	r1, r6
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 feab 	bl	8007338 <_Bfree>
 80065e2:	f1b8 0f00 	cmp.w	r8, #0
 80065e6:	d008      	beq.n	80065fa <_dtoa_r+0x542>
 80065e8:	4545      	cmp	r5, r8
 80065ea:	bf18      	it	ne
 80065ec:	2d00      	cmpne	r5, #0
 80065ee:	f040 823c 	bne.w	8006a6a <_dtoa_r+0x9b2>
 80065f2:	4641      	mov	r1, r8
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fe9f 	bl	8007338 <_Bfree>
 80065fa:	4620      	mov	r0, r4
 80065fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065fe:	f000 fe9b 	bl	8007338 <_Bfree>
 8006602:	9e07      	ldr	r6, [sp, #28]
 8006604:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006606:	2200      	movs	r2, #0
 8006608:	1c73      	adds	r3, r6, #1
 800660a:	702a      	strb	r2, [r5, #0]
 800660c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800660e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8006610:	6033      	str	r3, [r6, #0]
 8006612:	4648      	mov	r0, r9
 8006614:	2d00      	cmp	r5, #0
 8006616:	f43f ad8c 	beq.w	8006132 <_dtoa_r+0x7a>
 800661a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800661c:	4648      	mov	r0, r9
 800661e:	602e      	str	r6, [r5, #0]
 8006620:	b01d      	add	sp, #116	; 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	9807      	ldr	r0, [sp, #28]
 8006628:	f7f9 fffe 	bl	8000628 <__aeabi_i2d>
 800662c:	4632      	mov	r2, r6
 800662e:	463b      	mov	r3, r7
 8006630:	f7fa fac8 	bl	8000bc4 <__aeabi_dcmpeq>
 8006634:	2800      	cmp	r0, #0
 8006636:	f47f adf1 	bne.w	800621c <_dtoa_r+0x164>
 800663a:	9e07      	ldr	r6, [sp, #28]
 800663c:	3e01      	subs	r6, #1
 800663e:	9607      	str	r6, [sp, #28]
 8006640:	e5ec      	b.n	800621c <_dtoa_r+0x164>
 8006642:	9e07      	ldr	r6, [sp, #28]
 8006644:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006646:	1bad      	subs	r5, r5, r6
 8006648:	950c      	str	r5, [sp, #48]	; 0x30
 800664a:	4275      	negs	r5, r6
 800664c:	2600      	movs	r6, #0
 800664e:	950e      	str	r5, [sp, #56]	; 0x38
 8006650:	9611      	str	r6, [sp, #68]	; 0x44
 8006652:	e613      	b.n	800627c <_dtoa_r+0x1c4>
 8006654:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 8006658:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 800665c:	1b40      	subs	r0, r0, r5
 800665e:	fa0a f000 	lsl.w	r0, sl, r0
 8006662:	e5a5      	b.n	80061b0 <_dtoa_r+0xf8>
 8006664:	9016      	str	r0, [sp, #88]	; 0x58
 8006666:	e5f2      	b.n	800624e <_dtoa_r+0x196>
 8006668:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800666a:	2e01      	cmp	r6, #1
 800666c:	f340 8413 	ble.w	8006e96 <_dtoa_r+0xdde>
 8006670:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006672:	1e6e      	subs	r6, r5, #1
 8006674:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006676:	42b5      	cmp	r5, r6
 8006678:	bfbf      	itttt	lt
 800667a:	9d0e      	ldrlt	r5, [sp, #56]	; 0x38
 800667c:	960e      	strlt	r6, [sp, #56]	; 0x38
 800667e:	ebc5 0306 	rsblt	r3, r5, r6
 8006682:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 8006684:	bfb6      	itet	lt
 8006686:	18ed      	addlt	r5, r5, r3
 8006688:	ebc6 0605 	rsbge	r6, r6, r5
 800668c:	9511      	strlt	r5, [sp, #68]	; 0x44
 800668e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006690:	bfb8      	it	lt
 8006692:	2600      	movlt	r6, #0
 8006694:	2d00      	cmp	r5, #0
 8006696:	bfb3      	iteet	lt
 8006698:	f8dd e030 	ldrlt.w	lr, [sp, #48]	; 0x30
 800669c:	9d0c      	ldrge	r5, [sp, #48]	; 0x30
 800669e:	9b0b      	ldrge	r3, [sp, #44]	; 0x2c
 80066a0:	ebc5 050e 	rsblt	r5, r5, lr
 80066a4:	bfb8      	it	lt
 80066a6:	2300      	movlt	r3, #0
 80066a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066aa:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80066ae:	441a      	add	r2, r3
 80066b0:	449e      	add	lr, r3
 80066b2:	4620      	mov	r0, r4
 80066b4:	2101      	movs	r1, #1
 80066b6:	920c      	str	r2, [sp, #48]	; 0x30
 80066b8:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80066bc:	f000 fede 	bl	800747c <__i2b>
 80066c0:	4680      	mov	r8, r0
 80066c2:	e6f0      	b.n	80064a6 <_dtoa_r+0x3ee>
 80066c4:	2600      	movs	r6, #0
 80066c6:	960f      	str	r6, [sp, #60]	; 0x3c
 80066c8:	9e07      	ldr	r6, [sp, #28]
 80066ca:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
 80066ce:	44b6      	add	lr, r6
 80066d0:	f10e 0601 	add.w	r6, lr, #1
 80066d4:	2e00      	cmp	r6, #0
 80066d6:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 80066da:	960b      	str	r6, [sp, #44]	; 0x2c
 80066dc:	f340 8355 	ble.w	8006d8a <_dtoa_r+0xcd2>
 80066e0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80066e2:	2e0e      	cmp	r6, #14
 80066e4:	bf8c      	ite	hi
 80066e6:	2500      	movhi	r5, #0
 80066e8:	f005 0501 	andls.w	r5, r5, #1
 80066ec:	2100      	movs	r1, #0
 80066ee:	2e17      	cmp	r6, #23
 80066f0:	6461      	str	r1, [r4, #68]	; 0x44
 80066f2:	d90a      	bls.n	800670a <_dtoa_r+0x652>
 80066f4:	2201      	movs	r2, #1
 80066f6:	2304      	movs	r3, #4
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	f103 0014 	add.w	r0, r3, #20
 80066fe:	42b0      	cmp	r0, r6
 8006700:	4611      	mov	r1, r2
 8006702:	f102 0201 	add.w	r2, r2, #1
 8006706:	d9f7      	bls.n	80066f8 <_dtoa_r+0x640>
 8006708:	6461      	str	r1, [r4, #68]	; 0x44
 800670a:	4620      	mov	r0, r4
 800670c:	f000 fdee 	bl	80072ec <_Balloc>
 8006710:	9009      	str	r0, [sp, #36]	; 0x24
 8006712:	6420      	str	r0, [r4, #64]	; 0x40
 8006714:	2d00      	cmp	r5, #0
 8006716:	f43f adfc 	beq.w	8006312 <_dtoa_r+0x25a>
 800671a:	9d07      	ldr	r5, [sp, #28]
 800671c:	2d00      	cmp	r5, #0
 800671e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8006722:	f340 81ab 	ble.w	8006a7c <_dtoa_r+0x9c4>
 8006726:	f248 5348 	movw	r3, #34120	; 0x8548
 800672a:	f005 020f 	and.w	r2, r5, #15
 800672e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006732:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006736:	112d      	asrs	r5, r5, #4
 8006738:	e9d3 6700 	ldrd	r6, r7, [r3]
 800673c:	06eb      	lsls	r3, r5, #27
 800673e:	f140 818f 	bpl.w	8006a60 <_dtoa_r+0x9a8>
 8006742:	f248 6310 	movw	r3, #34320	; 0x8610
 8006746:	f6c0 0300 	movt	r3, #2048	; 0x800
 800674a:	4650      	mov	r0, sl
 800674c:	4659      	mov	r1, fp
 800674e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006752:	f7fa f8f9 	bl	8000948 <__aeabi_ddiv>
 8006756:	f005 050f 	and.w	r5, r5, #15
 800675a:	4682      	mov	sl, r0
 800675c:	468b      	mov	fp, r1
 800675e:	f04f 0803 	mov.w	r8, #3
 8006762:	b19d      	cbz	r5, 800678c <_dtoa_r+0x6d4>
 8006764:	f248 6910 	movw	r9, #34320	; 0x8610
 8006768:	f6c0 0900 	movt	r9, #2048	; 0x800
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	07ef      	lsls	r7, r5, #31
 8006772:	d505      	bpl.n	8006780 <_dtoa_r+0x6c8>
 8006774:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006778:	f7f9 ffbc 	bl	80006f4 <__aeabi_dmul>
 800677c:	f108 0801 	add.w	r8, r8, #1
 8006780:	106d      	asrs	r5, r5, #1
 8006782:	f109 0908 	add.w	r9, r9, #8
 8006786:	d1f3      	bne.n	8006770 <_dtoa_r+0x6b8>
 8006788:	4606      	mov	r6, r0
 800678a:	460f      	mov	r7, r1
 800678c:	4632      	mov	r2, r6
 800678e:	463b      	mov	r3, r7
 8006790:	4650      	mov	r0, sl
 8006792:	4659      	mov	r1, fp
 8006794:	f7fa f8d8 	bl	8000948 <__aeabi_ddiv>
 8006798:	4606      	mov	r6, r0
 800679a:	460f      	mov	r7, r1
 800679c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800679e:	b155      	cbz	r5, 80067b6 <_dtoa_r+0x6fe>
 80067a0:	2300      	movs	r3, #0
 80067a2:	4630      	mov	r0, r6
 80067a4:	4639      	mov	r1, r7
 80067a6:	2200      	movs	r2, #0
 80067a8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80067ac:	f7fa fa14 	bl	8000bd8 <__aeabi_dcmplt>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	f040 8308 	bne.w	8006dc6 <_dtoa_r+0xd0e>
 80067b6:	4640      	mov	r0, r8
 80067b8:	f7f9 ff36 	bl	8000628 <__aeabi_i2d>
 80067bc:	4632      	mov	r2, r6
 80067be:	463b      	mov	r3, r7
 80067c0:	f7f9 ff98 	bl	80006f4 <__aeabi_dmul>
 80067c4:	2300      	movs	r3, #0
 80067c6:	2200      	movs	r2, #0
 80067c8:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80067cc:	f7f9 fde0 	bl	8000390 <__adddf3>
 80067d0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80067d2:	4680      	mov	r8, r0
 80067d4:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80067d8:	2d00      	cmp	r5, #0
 80067da:	f000 80cb 	beq.w	8006974 <_dtoa_r+0x8bc>
 80067de:	9d07      	ldr	r5, [sp, #28]
 80067e0:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 80067e4:	9518      	str	r5, [sp, #96]	; 0x60
 80067e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80067e8:	f248 5348 	movw	r3, #34120	; 0x8548
 80067ec:	f6c0 0300 	movt	r3, #2048	; 0x800
 80067f0:	2d00      	cmp	r5, #0
 80067f2:	f000 8170 	beq.w	8006ad6 <_dtoa_r+0xa1e>
 80067f6:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 80067fa:	2100      	movs	r1, #0
 80067fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006800:	2000      	movs	r0, #0
 8006802:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8006806:	f8cd c00c 	str.w	ip, [sp, #12]
 800680a:	f7fa f89d 	bl	8000948 <__aeabi_ddiv>
 800680e:	4642      	mov	r2, r8
 8006810:	464b      	mov	r3, r9
 8006812:	f7f9 fdbb 	bl	800038c <__aeabi_dsub>
 8006816:	4682      	mov	sl, r0
 8006818:	468b      	mov	fp, r1
 800681a:	4630      	mov	r0, r6
 800681c:	4639      	mov	r1, r7
 800681e:	f7fa fa03 	bl	8000c28 <__aeabi_d2iz>
 8006822:	4605      	mov	r5, r0
 8006824:	f7f9 ff00 	bl	8000628 <__aeabi_i2d>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	4630      	mov	r0, r6
 800682e:	4639      	mov	r1, r7
 8006830:	f7f9 fdac 	bl	800038c <__aeabi_dsub>
 8006834:	3530      	adds	r5, #48	; 0x30
 8006836:	fa5f f885 	uxtb.w	r8, r5
 800683a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800683c:	4606      	mov	r6, r0
 800683e:	460f      	mov	r7, r1
 8006840:	f885 8000 	strb.w	r8, [r5]
 8006844:	4650      	mov	r0, sl
 8006846:	3501      	adds	r5, #1
 8006848:	4659      	mov	r1, fp
 800684a:	4632      	mov	r2, r6
 800684c:	463b      	mov	r3, r7
 800684e:	9504      	str	r5, [sp, #16]
 8006850:	f7fa f9e0 	bl	8000c14 <__aeabi_dcmpgt>
 8006854:	2800      	cmp	r0, #0
 8006856:	d162      	bne.n	800691e <_dtoa_r+0x866>
 8006858:	2100      	movs	r1, #0
 800685a:	4632      	mov	r2, r6
 800685c:	463b      	mov	r3, r7
 800685e:	2000      	movs	r0, #0
 8006860:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 8006864:	f7f9 fd92 	bl	800038c <__aeabi_dsub>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4650      	mov	r0, sl
 800686e:	4659      	mov	r1, fp
 8006870:	f7fa f9d0 	bl	8000c14 <__aeabi_dcmpgt>
 8006874:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006878:	2800      	cmp	r0, #0
 800687a:	f040 83b8 	bne.w	8006fee <_dtoa_r+0xf36>
 800687e:	f1bc 0f01 	cmp.w	ip, #1
 8006882:	f340 80f8 	ble.w	8006a76 <_dtoa_r+0x9be>
 8006886:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800688a:	9419      	str	r4, [sp, #100]	; 0x64
 800688c:	44e1      	add	r9, ip
 800688e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8006892:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006896:	e010      	b.n	80068ba <_dtoa_r+0x802>
 8006898:	2100      	movs	r1, #0
 800689a:	2000      	movs	r0, #0
 800689c:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80068a0:	f7f9 fd74 	bl	800038c <__aeabi_dsub>
 80068a4:	4652      	mov	r2, sl
 80068a6:	465b      	mov	r3, fp
 80068a8:	f7fa f996 	bl	8000bd8 <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	f040 831e 	bne.w	8006eee <_dtoa_r+0xe36>
 80068b2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80068b4:	45a9      	cmp	r9, r5
 80068b6:	f000 80dd 	beq.w	8006a74 <_dtoa_r+0x9bc>
 80068ba:	2300      	movs	r3, #0
 80068bc:	4650      	mov	r0, sl
 80068be:	4659      	mov	r1, fp
 80068c0:	2200      	movs	r2, #0
 80068c2:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80068c6:	f7f9 ff15 	bl	80006f4 <__aeabi_dmul>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2200      	movs	r2, #0
 80068ce:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80068d2:	4682      	mov	sl, r0
 80068d4:	468b      	mov	fp, r1
 80068d6:	4630      	mov	r0, r6
 80068d8:	4639      	mov	r1, r7
 80068da:	f7f9 ff0b 	bl	80006f4 <__aeabi_dmul>
 80068de:	460d      	mov	r5, r1
 80068e0:	4604      	mov	r4, r0
 80068e2:	f7fa f9a1 	bl	8000c28 <__aeabi_d2iz>
 80068e6:	4680      	mov	r8, r0
 80068e8:	f7f9 fe9e 	bl	8000628 <__aeabi_i2d>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4620      	mov	r0, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	f7f9 fd4a 	bl	800038c <__aeabi_dsub>
 80068f8:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80068fc:	fa5f f888 	uxtb.w	r8, r8
 8006900:	4652      	mov	r2, sl
 8006902:	465b      	mov	r3, fp
 8006904:	f809 8b01 	strb.w	r8, [r9], #1
 8006908:	4606      	mov	r6, r0
 800690a:	460f      	mov	r7, r1
 800690c:	f7fa f964 	bl	8000bd8 <__aeabi_dcmplt>
 8006910:	4632      	mov	r2, r6
 8006912:	463b      	mov	r3, r7
 8006914:	2800      	cmp	r0, #0
 8006916:	d0bf      	beq.n	8006898 <_dtoa_r+0x7e0>
 8006918:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800691a:	f8cd 9010 	str.w	r9, [sp, #16]
 800691e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006920:	9e04      	ldr	r6, [sp, #16]
 8006922:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006926:	9507      	str	r5, [sp, #28]
 8006928:	9609      	str	r6, [sp, #36]	; 0x24
 800692a:	e666      	b.n	80065fa <_dtoa_r+0x542>
 800692c:	2600      	movs	r6, #0
 800692e:	960f      	str	r6, [sp, #60]	; 0x3c
 8006930:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006932:	2900      	cmp	r1, #0
 8006934:	f340 8231 	ble.w	8006d9a <_dtoa_r+0xce2>
 8006938:	290e      	cmp	r1, #14
 800693a:	bf8c      	ite	hi
 800693c:	2500      	movhi	r5, #0
 800693e:	f005 0501 	andls.w	r5, r5, #1
 8006942:	460e      	mov	r6, r1
 8006944:	9110      	str	r1, [sp, #64]	; 0x40
 8006946:	910b      	str	r1, [sp, #44]	; 0x2c
 8006948:	e6d0      	b.n	80066ec <_dtoa_r+0x634>
 800694a:	2601      	movs	r6, #1
 800694c:	960f      	str	r6, [sp, #60]	; 0x3c
 800694e:	e7ef      	b.n	8006930 <_dtoa_r+0x878>
 8006950:	4640      	mov	r0, r8
 8006952:	f7f9 fe69 	bl	8000628 <__aeabi_i2d>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4630      	mov	r0, r6
 800695c:	4639      	mov	r1, r7
 800695e:	f7f9 fec9 	bl	80006f4 <__aeabi_dmul>
 8006962:	2300      	movs	r3, #0
 8006964:	2200      	movs	r2, #0
 8006966:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800696a:	f7f9 fd11 	bl	8000390 <__adddf3>
 800696e:	4680      	mov	r8, r0
 8006970:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006974:	2300      	movs	r3, #0
 8006976:	4630      	mov	r0, r6
 8006978:	2200      	movs	r2, #0
 800697a:	f2c4 0314 	movt	r3, #16404	; 0x4014
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fd04 	bl	800038c <__aeabi_dsub>
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	4682      	mov	sl, r0
 800698a:	468b      	mov	fp, r1
 800698c:	f7fa f942 	bl	8000c14 <__aeabi_dcmpgt>
 8006990:	4606      	mov	r6, r0
 8006992:	2800      	cmp	r0, #0
 8006994:	f040 80ff 	bne.w	8006b96 <_dtoa_r+0xade>
 8006998:	4642      	mov	r2, r8
 800699a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800699e:	4650      	mov	r0, sl
 80069a0:	4659      	mov	r1, fp
 80069a2:	f7fa f919 	bl	8000bd8 <__aeabi_dcmplt>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d065      	beq.n	8006a76 <_dtoa_r+0x9be>
 80069aa:	46b0      	mov	r8, r6
 80069ac:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80069ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80069b2:	43ed      	mvns	r5, r5
 80069b4:	9507      	str	r5, [sp, #28]
 80069b6:	2500      	movs	r5, #0
 80069b8:	e60f      	b.n	80065da <_dtoa_r+0x522>
 80069ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069bc:	2a00      	cmp	r2, #0
 80069be:	f040 8160 	bne.w	8006c82 <_dtoa_r+0xbca>
 80069c2:	2500      	movs	r5, #0
 80069c4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80069c8:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80069cc:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80069d0:	e006      	b.n	80069e0 <_dtoa_r+0x928>
 80069d2:	4649      	mov	r1, r9
 80069d4:	4620      	mov	r0, r4
 80069d6:	220a      	movs	r2, #10
 80069d8:	2300      	movs	r3, #0
 80069da:	f000 fcb7 	bl	800734c <__multadd>
 80069de:	4681      	mov	r9, r0
 80069e0:	4648      	mov	r0, r9
 80069e2:	4631      	mov	r1, r6
 80069e4:	f7ff fad2 	bl	8005f8c <quorem>
 80069e8:	3030      	adds	r0, #48	; 0x30
 80069ea:	f80b 0005 	strb.w	r0, [fp, r5]
 80069ee:	3501      	adds	r5, #1
 80069f0:	4555      	cmp	r5, sl
 80069f2:	dbee      	blt.n	80069d2 <_dtoa_r+0x91a>
 80069f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80069f6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80069fa:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80069fe:	2d01      	cmp	r5, #1
 8006a00:	bfac      	ite	ge
 8006a02:	44ab      	addge	fp, r5
 8006a04:	f10b 0b01 	addlt.w	fp, fp, #1
 8006a08:	4607      	mov	r7, r0
 8006a0a:	2500      	movs	r5, #0
 8006a0c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a0e:	2201      	movs	r2, #1
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fe37 	bl	8007684 <__lshift>
 8006a16:	4631      	mov	r1, r6
 8006a18:	900d      	str	r0, [sp, #52]	; 0x34
 8006a1a:	f000 fe91 	bl	8007740 <__mcmp>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	f340 826f 	ble.w	8006f02 <_dtoa_r+0xe4a>
 8006a24:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8006a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a2a:	e005      	b.n	8006a38 <_dtoa_r+0x980>
 8006a2c:	4299      	cmp	r1, r3
 8006a2e:	f000 8224 	beq.w	8006e7a <_dtoa_r+0xdc2>
 8006a32:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006a36:	469b      	mov	fp, r3
 8006a38:	2a39      	cmp	r2, #57	; 0x39
 8006a3a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006a3e:	d0f5      	beq.n	8006a2c <_dtoa_r+0x974>
 8006a40:	3201      	adds	r2, #1
 8006a42:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006a4c:	e5c5      	b.n	80065da <_dtoa_r+0x522>
 8006a4e:	231c      	movs	r3, #28
 8006a50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a54:	4419      	add	r1, r3
 8006a56:	441a      	add	r2, r3
 8006a58:	910c      	str	r1, [sp, #48]	; 0x30
 8006a5a:	441d      	add	r5, r3
 8006a5c:	920a      	str	r2, [sp, #40]	; 0x28
 8006a5e:	e57d      	b.n	800655c <_dtoa_r+0x4a4>
 8006a60:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8006a64:	f04f 0802 	mov.w	r8, #2
 8006a68:	e67b      	b.n	8006762 <_dtoa_r+0x6aa>
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f000 fc63 	bl	8007338 <_Bfree>
 8006a72:	e5be      	b.n	80065f2 <_dtoa_r+0x53a>
 8006a74:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006a76:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8006a7a:	e44a      	b.n	8006312 <_dtoa_r+0x25a>
 8006a7c:	9e07      	ldr	r6, [sp, #28]
 8006a7e:	4275      	negs	r5, r6
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	f000 819b 	beq.w	8006dbc <_dtoa_r+0xd04>
 8006a86:	f248 5348 	movw	r3, #34120	; 0x8548
 8006a8a:	f005 020f 	and.w	r2, r5, #15
 8006a8e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006a92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006a9e:	f7f9 fe29 	bl	80006f4 <__aeabi_dmul>
 8006aa2:	112d      	asrs	r5, r5, #4
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	460f      	mov	r7, r1
 8006aa8:	f000 829d 	beq.w	8006fe6 <_dtoa_r+0xf2e>
 8006aac:	f248 6910 	movw	r9, #34320	; 0x8610
 8006ab0:	f6c0 0900 	movt	r9, #2048	; 0x800
 8006ab4:	f04f 0802 	mov.w	r8, #2
 8006ab8:	07ee      	lsls	r6, r5, #31
 8006aba:	d505      	bpl.n	8006ac8 <_dtoa_r+0xa10>
 8006abc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ac0:	f7f9 fe18 	bl	80006f4 <__aeabi_dmul>
 8006ac4:	f108 0801 	add.w	r8, r8, #1
 8006ac8:	106d      	asrs	r5, r5, #1
 8006aca:	f109 0908 	add.w	r9, r9, #8
 8006ace:	d1f3      	bne.n	8006ab8 <_dtoa_r+0xa00>
 8006ad0:	4606      	mov	r6, r0
 8006ad2:	460f      	mov	r7, r1
 8006ad4:	e662      	b.n	800679c <_dtoa_r+0x6e4>
 8006ad6:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8006ada:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8006ade:	4642      	mov	r2, r8
 8006ae0:	464b      	mov	r3, r9
 8006ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae6:	f8cd c00c 	str.w	ip, [sp, #12]
 8006aea:	f7f9 fe03 	bl	80006f4 <__aeabi_dmul>
 8006aee:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006af2:	4639      	mov	r1, r7
 8006af4:	4630      	mov	r0, r6
 8006af6:	f7fa f897 	bl	8000c28 <__aeabi_d2iz>
 8006afa:	4605      	mov	r5, r0
 8006afc:	f7f9 fd94 	bl	8000628 <__aeabi_i2d>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4630      	mov	r0, r6
 8006b06:	4639      	mov	r1, r7
 8006b08:	f7f9 fc40 	bl	800038c <__aeabi_dsub>
 8006b0c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006b10:	3530      	adds	r5, #48	; 0x30
 8006b12:	f88e 5000 	strb.w	r5, [lr]
 8006b16:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006b1a:	f1bc 0f01 	cmp.w	ip, #1
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460f      	mov	r7, r1
 8006b22:	f10e 0a01 	add.w	sl, lr, #1
 8006b26:	d01f      	beq.n	8006b68 <_dtoa_r+0xab0>
 8006b28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b2a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006b2e:	44e1      	add	r9, ip
 8006b30:	2300      	movs	r3, #0
 8006b32:	2200      	movs	r2, #0
 8006b34:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006b38:	f7f9 fddc 	bl	80006f4 <__aeabi_dmul>
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	4606      	mov	r6, r0
 8006b40:	f7fa f872 	bl	8000c28 <__aeabi_d2iz>
 8006b44:	4680      	mov	r8, r0
 8006b46:	f7f9 fd6f 	bl	8000628 <__aeabi_i2d>
 8006b4a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4630      	mov	r0, r6
 8006b54:	4639      	mov	r1, r7
 8006b56:	f7f9 fc19 	bl	800038c <__aeabi_dsub>
 8006b5a:	f805 8f01 	strb.w	r8, [r5, #1]!
 8006b5e:	454d      	cmp	r5, r9
 8006b60:	d1e6      	bne.n	8006b30 <_dtoa_r+0xa78>
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	44da      	add	sl, fp
 8006b68:	2300      	movs	r3, #0
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8006b70:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006b74:	f7f9 fc0c 	bl	8000390 <__adddf3>
 8006b78:	4632      	mov	r2, r6
 8006b7a:	463b      	mov	r3, r7
 8006b7c:	f7fa f82c 	bl	8000bd8 <__aeabi_dcmplt>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	f000 815d 	beq.w	8006e40 <_dtoa_r+0xd88>
 8006b86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006b8a:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 8006b8e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006b92:	4652      	mov	r2, sl
 8006b94:	e472      	b.n	800647c <_dtoa_r+0x3c4>
 8006b96:	2600      	movs	r6, #0
 8006b98:	46b0      	mov	r8, r6
 8006b9a:	e513      	b.n	80065c4 <_dtoa_r+0x50c>
 8006b9c:	6933      	ldr	r3, [r6, #16]
 8006b9e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006ba2:	6918      	ldr	r0, [r3, #16]
 8006ba4:	f000 fc1e 	bl	80073e4 <__hi0bits>
 8006ba8:	f1c0 0020 	rsb	r0, r0, #32
 8006bac:	e4c0      	b.n	8006530 <_dtoa_r+0x478>
 8006bae:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	f000 fdc5 	bl	8007740 <__mcmp>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	f6bf ace6 	bge.w	8006588 <_dtoa_r+0x4d0>
 8006bbc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006bc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bc2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	220a      	movs	r2, #10
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f8cd e01c 	str.w	lr, [sp, #28]
 8006bd0:	f000 fbbc 	bl	800734c <__multadd>
 8006bd4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006bd6:	900d      	str	r0, [sp, #52]	; 0x34
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	d13b      	bne.n	8006c54 <_dtoa_r+0xb9c>
 8006bdc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006bde:	2d00      	cmp	r5, #0
 8006be0:	dc03      	bgt.n	8006bea <_dtoa_r+0xb32>
 8006be2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006be4:	2d02      	cmp	r5, #2
 8006be6:	f300 8209 	bgt.w	8006ffc <_dtoa_r+0xf44>
 8006bea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006bec:	950b      	str	r5, [sp, #44]	; 0x2c
 8006bee:	e6e8      	b.n	80069c2 <_dtoa_r+0x90a>
 8006bf0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	f040 8195 	bne.w	8006f22 <_dtoa_r+0xe6a>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8006c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c04:	f7f9 fd76 	bl	80006f4 <__aeabi_dmul>
 8006c08:	4652      	mov	r2, sl
 8006c0a:	465b      	mov	r3, fp
 8006c0c:	f7f9 fff8 	bl	8000c00 <__aeabi_dcmpge>
 8006c10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c12:	46b0      	mov	r8, r6
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f47f aec9 	bne.w	80069ac <_dtoa_r+0x8f4>
 8006c1a:	e4d3      	b.n	80065c4 <_dtoa_r+0x50c>
 8006c1c:	f1ba 0f00 	cmp.w	sl, #0
 8006c20:	f47f ac80 	bne.w	8006524 <_dtoa_r+0x46c>
 8006c24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c28:	4657      	mov	r7, sl
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f47f ac7b 	bne.w	8006526 <_dtoa_r+0x46e>
 8006c30:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006c34:	0d3f      	lsrs	r7, r7, #20
 8006c36:	053f      	lsls	r7, r7, #20
 8006c38:	2f00      	cmp	r7, #0
 8006c3a:	f43f ac74 	beq.w	8006526 <_dtoa_r+0x46e>
 8006c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c40:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006c44:	3301      	adds	r3, #1
 8006c46:	f10e 0e01 	add.w	lr, lr, #1
 8006c4a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c4c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8006c50:	2701      	movs	r7, #1
 8006c52:	e468      	b.n	8006526 <_dtoa_r+0x46e>
 8006c54:	2300      	movs	r3, #0
 8006c56:	4641      	mov	r1, r8
 8006c58:	220a      	movs	r2, #10
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 fb76 	bl	800734c <__multadd>
 8006c60:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006c64:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c66:	f1be 0f00 	cmp.w	lr, #0
 8006c6a:	bfcc      	ite	gt
 8006c6c:	2300      	movgt	r3, #0
 8006c6e:	2301      	movle	r3, #1
 8006c70:	2a02      	cmp	r2, #2
 8006c72:	bfd8      	it	le
 8006c74:	2300      	movle	r3, #0
 8006c76:	4680      	mov	r8, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f040 81bf 	bne.w	8006ffc <_dtoa_r+0xf44>
 8006c7e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8006c82:	2d00      	cmp	r5, #0
 8006c84:	dd05      	ble.n	8006c92 <_dtoa_r+0xbda>
 8006c86:	4641      	mov	r1, r8
 8006c88:	462a      	mov	r2, r5
 8006c8a:	4620      	mov	r0, r4
 8006c8c:	f000 fcfa 	bl	8007684 <__lshift>
 8006c90:	4680      	mov	r8, r0
 8006c92:	46c4      	mov	ip, r8
 8006c94:	2f00      	cmp	r7, #0
 8006c96:	f040 8157 	bne.w	8006f48 <_dtoa_r+0xe90>
 8006c9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006c9c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ca2:	44ae      	add	lr, r5
 8006ca4:	f00a 0501 	and.w	r5, sl, #1
 8006ca8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006caa:	4637      	mov	r7, r6
 8006cac:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8006cb0:	1c4d      	adds	r5, r1, #1
 8006cb2:	46e1      	mov	r9, ip
 8006cb4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006cb6:	e00a      	b.n	8006cce <_dtoa_r+0xc16>
 8006cb8:	f000 fb48 	bl	800734c <__multadd>
 8006cbc:	4649      	mov	r1, r9
 8006cbe:	4680      	mov	r8, r0
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f000 fb41 	bl	800734c <__multadd>
 8006cca:	4681      	mov	r9, r0
 8006ccc:	3501      	adds	r5, #1
 8006cce:	4639      	mov	r1, r7
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff f95b 	bl	8005f8c <quorem>
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	4682      	mov	sl, r0
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f000 fd30 	bl	8007740 <__mcmp>
 8006ce0:	464a      	mov	r2, r9
 8006ce2:	4683      	mov	fp, r0
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 fd4c 	bl	8007784 <__mdiff>
 8006cec:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8006cf0:	9208      	str	r2, [sp, #32]
 8006cf2:	68c2      	ldr	r2, [r0, #12]
 8006cf4:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d13e      	bne.n	8006d80 <_dtoa_r+0xcc8>
 8006d02:	4619      	mov	r1, r3
 8006d04:	4630      	mov	r0, r6
 8006d06:	9303      	str	r3, [sp, #12]
 8006d08:	f000 fd1a 	bl	8007740 <__mcmp>
 8006d0c:	9b03      	ldr	r3, [sp, #12]
 8006d0e:	4602      	mov	r2, r0
 8006d10:	4619      	mov	r1, r3
 8006d12:	4620      	mov	r0, r4
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	f000 fb0f 	bl	8007338 <_Bfree>
 8006d1a:	9a03      	ldr	r2, [sp, #12]
 8006d1c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006d1e:	4311      	orrs	r1, r2
 8006d20:	d103      	bne.n	8006d2a <_dtoa_r+0xc72>
 8006d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 814d 	beq.w	8006fc4 <_dtoa_r+0xf0c>
 8006d2a:	f1bb 0f00 	cmp.w	fp, #0
 8006d2e:	f2c0 80ba 	blt.w	8006ea6 <_dtoa_r+0xdee>
 8006d32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d34:	ea5b 0303 	orrs.w	r3, fp, r3
 8006d38:	d103      	bne.n	8006d42 <_dtoa_r+0xc8a>
 8006d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	f000 80b2 	beq.w	8006ea6 <_dtoa_r+0xdee>
 8006d42:	2a00      	cmp	r2, #0
 8006d44:	f300 811d 	bgt.w	8006f82 <_dtoa_r+0xeca>
 8006d48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d4a:	9a08      	ldr	r2, [sp, #32]
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006d52:	46ab      	mov	fp, r5
 8006d54:	f000 8127 	beq.w	8006fa6 <_dtoa_r+0xeee>
 8006d58:	4631      	mov	r1, r6
 8006d5a:	220a      	movs	r2, #10
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f000 faf4 	bl	800734c <__multadd>
 8006d64:	45c8      	cmp	r8, r9
 8006d66:	4606      	mov	r6, r0
 8006d68:	4641      	mov	r1, r8
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	f04f 020a 	mov.w	r2, #10
 8006d70:	f04f 0300 	mov.w	r3, #0
 8006d74:	d1a0      	bne.n	8006cb8 <_dtoa_r+0xc00>
 8006d76:	f000 fae9 	bl	800734c <__multadd>
 8006d7a:	4680      	mov	r8, r0
 8006d7c:	4681      	mov	r9, r0
 8006d7e:	e7a5      	b.n	8006ccc <_dtoa_r+0xc14>
 8006d80:	2201      	movs	r2, #1
 8006d82:	e7c5      	b.n	8006d10 <_dtoa_r+0xc58>
 8006d84:	2601      	movs	r6, #1
 8006d86:	960f      	str	r6, [sp, #60]	; 0x3c
 8006d88:	e49e      	b.n	80066c8 <_dtoa_r+0x610>
 8006d8a:	2e0e      	cmp	r6, #14
 8006d8c:	bf8c      	ite	hi
 8006d8e:	2300      	movhi	r3, #0
 8006d90:	2301      	movls	r3, #1
 8006d92:	2100      	movs	r1, #0
 8006d94:	401d      	ands	r5, r3
 8006d96:	6461      	str	r1, [r4, #68]	; 0x44
 8006d98:	e4b7      	b.n	800670a <_dtoa_r+0x652>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8006d9e:	9310      	str	r3, [sp, #64]	; 0x40
 8006da0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006da2:	e7f6      	b.n	8006d92 <_dtoa_r+0xcda>
 8006da4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006da6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 fc1b 	bl	80075e4 <__pow5mult>
 8006dae:	900d      	str	r0, [sp, #52]	; 0x34
 8006db0:	f7ff bba6 	b.w	8006500 <_dtoa_r+0x448>
 8006db4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006db8:	9509      	str	r5, [sp, #36]	; 0x24
 8006dba:	e41e      	b.n	80065fa <_dtoa_r+0x542>
 8006dbc:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8006dc0:	f04f 0802 	mov.w	r8, #2
 8006dc4:	e4ea      	b.n	800679c <_dtoa_r+0x6e4>
 8006dc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006dc8:	2d00      	cmp	r5, #0
 8006dca:	f43f adc1 	beq.w	8006950 <_dtoa_r+0x898>
 8006dce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006dd0:	2d00      	cmp	r5, #0
 8006dd2:	f77f ae50 	ble.w	8006a76 <_dtoa_r+0x9be>
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006dde:	4630      	mov	r0, r6
 8006de0:	4639      	mov	r1, r7
 8006de2:	f7f9 fc87 	bl	80006f4 <__aeabi_dmul>
 8006de6:	4606      	mov	r6, r0
 8006de8:	f108 0001 	add.w	r0, r8, #1
 8006dec:	460f      	mov	r7, r1
 8006dee:	f7f9 fc1b 	bl	8000628 <__aeabi_i2d>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4630      	mov	r0, r6
 8006df8:	4639      	mov	r1, r7
 8006dfa:	f7f9 fc7b 	bl	80006f4 <__aeabi_dmul>
 8006dfe:	2300      	movs	r3, #0
 8006e00:	2200      	movs	r2, #0
 8006e02:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8006e06:	f7f9 fac3 	bl	8000390 <__adddf3>
 8006e0a:	9d07      	ldr	r5, [sp, #28]
 8006e0c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8006e10:	3d01      	subs	r5, #1
 8006e12:	4680      	mov	r8, r0
 8006e14:	9518      	str	r5, [sp, #96]	; 0x60
 8006e16:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006e1a:	e4e4      	b.n	80067e6 <_dtoa_r+0x72e>
 8006e1c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e20:	2230      	movs	r2, #48	; 0x30
 8006e22:	f889 2000 	strb.w	r2, [r9]
 8006e26:	3501      	adds	r5, #1
 8006e28:	2231      	movs	r2, #49	; 0x31
 8006e2a:	9507      	str	r5, [sp, #28]
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	f7ff bbe4 	b.w	80065fa <_dtoa_r+0x542>
 8006e32:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 fbd5 	bl	80075e4 <__pow5mult>
 8006e3a:	900d      	str	r0, [sp, #52]	; 0x34
 8006e3c:	f7ff bb60 	b.w	8006500 <_dtoa_r+0x448>
 8006e40:	2100      	movs	r1, #0
 8006e42:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006e46:	2000      	movs	r0, #0
 8006e48:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8006e4c:	f7f9 fa9e 	bl	800038c <__aeabi_dsub>
 8006e50:	4632      	mov	r2, r6
 8006e52:	463b      	mov	r3, r7
 8006e54:	f7f9 fede 	bl	8000c14 <__aeabi_dcmpgt>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	f43f ae0c 	beq.w	8006a76 <_dtoa_r+0x9be>
 8006e5e:	4653      	mov	r3, sl
 8006e60:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006e64:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006e68:	2a30      	cmp	r2, #48	; 0x30
 8006e6a:	d0f8      	beq.n	8006e5e <_dtoa_r+0xda6>
 8006e6c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006e6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e72:	9507      	str	r5, [sp, #28]
 8006e74:	9309      	str	r3, [sp, #36]	; 0x24
 8006e76:	f7ff bbc0 	b.w	80065fa <_dtoa_r+0x542>
 8006e7a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e80:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006e84:	2331      	movs	r3, #49	; 0x31
 8006e86:	f10e 0e01 	add.w	lr, lr, #1
 8006e8a:	f8cd e01c 	str.w	lr, [sp, #28]
 8006e8e:	700b      	strb	r3, [r1, #0]
 8006e90:	4689      	mov	r9, r1
 8006e92:	f7ff bba2 	b.w	80065da <_dtoa_r+0x522>
 8006e96:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	d06b      	beq.n	8006f74 <_dtoa_r+0xebc>
 8006e9c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ea0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006ea2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ea4:	e400      	b.n	80066a8 <_dtoa_r+0x5f0>
 8006ea6:	2a00      	cmp	r2, #0
 8006ea8:	960d      	str	r6, [sp, #52]	; 0x34
 8006eaa:	46cc      	mov	ip, r9
 8006eac:	463e      	mov	r6, r7
 8006eae:	9f08      	ldr	r7, [sp, #32]
 8006eb0:	dd13      	ble.n	8006eda <_dtoa_r+0xe22>
 8006eb2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006eb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 fbe2 	bl	8007684 <__lshift>
 8006ec0:	4631      	mov	r1, r6
 8006ec2:	900d      	str	r0, [sp, #52]	; 0x34
 8006ec4:	f000 fc3c 	bl	8007740 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006ece:	f340 8084 	ble.w	8006fda <_dtoa_r+0xf22>
 8006ed2:	2f39      	cmp	r7, #57	; 0x39
 8006ed4:	d06d      	beq.n	8006fb2 <_dtoa_r+0xefa>
 8006ed6:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 8006eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006edc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ee0:	701f      	strb	r7, [r3, #0]
 8006ee2:	1c59      	adds	r1, r3, #1
 8006ee4:	4645      	mov	r5, r8
 8006ee6:	9109      	str	r1, [sp, #36]	; 0x24
 8006ee8:	46e0      	mov	r8, ip
 8006eea:	f7ff bb76 	b.w	80065da <_dtoa_r+0x522>
 8006eee:	f8cd 9010 	str.w	r9, [sp, #16]
 8006ef2:	9d04      	ldr	r5, [sp, #16]
 8006ef4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ef8:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006efa:	9509      	str	r5, [sp, #36]	; 0x24
 8006efc:	462a      	mov	r2, r5
 8006efe:	f7ff babd 	b.w	800647c <_dtoa_r+0x3c4>
 8006f02:	d102      	bne.n	8006f0a <_dtoa_r+0xe52>
 8006f04:	07fb      	lsls	r3, r7, #31
 8006f06:	f53f ad8d 	bmi.w	8006a24 <_dtoa_r+0x96c>
 8006f0a:	465b      	mov	r3, fp
 8006f0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f10:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006f14:	2a30      	cmp	r2, #48	; 0x30
 8006f16:	d0f8      	beq.n	8006f0a <_dtoa_r+0xe52>
 8006f18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1e:	f7ff bb5c 	b.w	80065da <_dtoa_r+0x522>
 8006f22:	2600      	movs	r6, #0
 8006f24:	e541      	b.n	80069aa <_dtoa_r+0x8f2>
 8006f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f2a:	4632      	mov	r2, r6
 8006f2c:	463b      	mov	r3, r7
 8006f2e:	f7f9 fe49 	bl	8000bc4 <__aeabi_dcmpeq>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f43f af3e 	beq.w	8006db4 <_dtoa_r+0xcfc>
 8006f38:	f018 0f01 	tst.w	r8, #1
 8006f3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f40:	f43f af3a 	beq.w	8006db8 <_dtoa_r+0xd00>
 8006f44:	f7ff ba8d 	b.w	8006462 <_dtoa_r+0x3aa>
 8006f48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 f9cd 	bl	80072ec <_Balloc>
 8006f52:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006f56:	1c9a      	adds	r2, r3, #2
 8006f58:	4605      	mov	r5, r0
 8006f5a:	0092      	lsls	r2, r2, #2
 8006f5c:	f108 010c 	add.w	r1, r8, #12
 8006f60:	300c      	adds	r0, #12
 8006f62:	f7f9 f975 	bl	8000250 <memcpy>
 8006f66:	4620      	mov	r0, r4
 8006f68:	4629      	mov	r1, r5
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f000 fb8a 	bl	8007684 <__lshift>
 8006f70:	4684      	mov	ip, r0
 8006f72:	e692      	b.n	8006c9a <_dtoa_r+0xbe2>
 8006f74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006f76:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006f78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f7e:	f7ff bb93 	b.w	80066a8 <_dtoa_r+0x5f0>
 8006f82:	960d      	str	r6, [sp, #52]	; 0x34
 8006f84:	463e      	mov	r6, r7
 8006f86:	9f08      	ldr	r7, [sp, #32]
 8006f88:	2f39      	cmp	r7, #57	; 0x39
 8006f8a:	46cc      	mov	ip, r9
 8006f8c:	d011      	beq.n	8006fb2 <_dtoa_r+0xefa>
 8006f8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f90:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006f92:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f96:	3701      	adds	r7, #1
 8006f98:	3101      	adds	r1, #1
 8006f9a:	702f      	strb	r7, [r5, #0]
 8006f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8006f9e:	4645      	mov	r5, r8
 8006fa0:	46e0      	mov	r8, ip
 8006fa2:	f7ff bb1a 	b.w	80065da <_dtoa_r+0x522>
 8006fa6:	960d      	str	r6, [sp, #52]	; 0x34
 8006fa8:	4645      	mov	r5, r8
 8006faa:	463e      	mov	r6, r7
 8006fac:	46c8      	mov	r8, r9
 8006fae:	9f08      	ldr	r7, [sp, #32]
 8006fb0:	e52c      	b.n	8006a0c <_dtoa_r+0x954>
 8006fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006fb6:	2239      	movs	r2, #57	; 0x39
 8006fb8:	4645      	mov	r5, r8
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	46e0      	mov	r8, ip
 8006fbe:	f103 0b01 	add.w	fp, r3, #1
 8006fc2:	e539      	b.n	8006a38 <_dtoa_r+0x980>
 8006fc4:	960d      	str	r6, [sp, #52]	; 0x34
 8006fc6:	463e      	mov	r6, r7
 8006fc8:	9f08      	ldr	r7, [sp, #32]
 8006fca:	2f39      	cmp	r7, #57	; 0x39
 8006fcc:	46cc      	mov	ip, r9
 8006fce:	d0f0      	beq.n	8006fb2 <_dtoa_r+0xefa>
 8006fd0:	f1bb 0f00 	cmp.w	fp, #0
 8006fd4:	f73f af7f 	bgt.w	8006ed6 <_dtoa_r+0xe1e>
 8006fd8:	e77f      	b.n	8006eda <_dtoa_r+0xe22>
 8006fda:	f47f af7e 	bne.w	8006eda <_dtoa_r+0xe22>
 8006fde:	07fa      	lsls	r2, r7, #31
 8006fe0:	f57f af7b 	bpl.w	8006eda <_dtoa_r+0xe22>
 8006fe4:	e775      	b.n	8006ed2 <_dtoa_r+0xe1a>
 8006fe6:	f04f 0802 	mov.w	r8, #2
 8006fea:	f7ff bbd7 	b.w	800679c <_dtoa_r+0x6e4>
 8006fee:	9e04      	ldr	r6, [sp, #16]
 8006ff0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ff4:	9609      	str	r6, [sp, #36]	; 0x24
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	f7ff ba40 	b.w	800647c <_dtoa_r+0x3c4>
 8006ffc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ffe:	950b      	str	r5, [sp, #44]	; 0x2c
 8007000:	f7ff bace 	b.w	80065a0 <_dtoa_r+0x4e8>
 8007004:	f43f aaaa 	beq.w	800655c <_dtoa_r+0x4a4>
 8007008:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800700c:	e520      	b.n	8006a50 <_dtoa_r+0x998>
 800700e:	bf00      	nop

08007010 <_malloc_trim_r>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	f240 44a4 	movw	r4, #1188	; 0x4a4
 8007016:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800701a:	460f      	mov	r7, r1
 800701c:	4605      	mov	r5, r0
 800701e:	f7fa ff03 	bl	8001e28 <__malloc_lock>
 8007022:	68a3      	ldr	r3, [r4, #8]
 8007024:	685e      	ldr	r6, [r3, #4]
 8007026:	f026 0603 	bic.w	r6, r6, #3
 800702a:	1bf7      	subs	r7, r6, r7
 800702c:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 8007030:	0b3f      	lsrs	r7, r7, #12
 8007032:	3f01      	subs	r7, #1
 8007034:	033f      	lsls	r7, r7, #12
 8007036:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800703a:	db07      	blt.n	800704c <_malloc_trim_r+0x3c>
 800703c:	4628      	mov	r0, r5
 800703e:	2100      	movs	r1, #0
 8007040:	f7fa fec4 	bl	8001dcc <_sbrk_r>
 8007044:	68a3      	ldr	r3, [r4, #8]
 8007046:	4433      	add	r3, r6
 8007048:	4298      	cmp	r0, r3
 800704a:	d004      	beq.n	8007056 <_malloc_trim_r+0x46>
 800704c:	4628      	mov	r0, r5
 800704e:	f7fa feef 	bl	8001e30 <__malloc_unlock>
 8007052:	2000      	movs	r0, #0
 8007054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007056:	4628      	mov	r0, r5
 8007058:	4279      	negs	r1, r7
 800705a:	f7fa feb7 	bl	8001dcc <_sbrk_r>
 800705e:	3001      	adds	r0, #1
 8007060:	d010      	beq.n	8007084 <_malloc_trim_r+0x74>
 8007062:	f640 2334 	movw	r3, #2612	; 0xa34
 8007066:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800706a:	68a1      	ldr	r1, [r4, #8]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	1bf6      	subs	r6, r6, r7
 8007070:	f046 0601 	orr.w	r6, r6, #1
 8007074:	4628      	mov	r0, r5
 8007076:	1bd7      	subs	r7, r2, r7
 8007078:	604e      	str	r6, [r1, #4]
 800707a:	601f      	str	r7, [r3, #0]
 800707c:	f7fa fed8 	bl	8001e30 <__malloc_unlock>
 8007080:	2001      	movs	r0, #1
 8007082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007084:	4628      	mov	r0, r5
 8007086:	2100      	movs	r1, #0
 8007088:	f7fa fea0 	bl	8001dcc <_sbrk_r>
 800708c:	68a3      	ldr	r3, [r4, #8]
 800708e:	1ac2      	subs	r2, r0, r3
 8007090:	2a0f      	cmp	r2, #15
 8007092:	dddb      	ble.n	800704c <_malloc_trim_r+0x3c>
 8007094:	f640 04b0 	movw	r4, #2224	; 0x8b0
 8007098:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800709c:	f640 2134 	movw	r1, #2612	; 0xa34
 80070a0:	6824      	ldr	r4, [r4, #0]
 80070a2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	1b00      	subs	r0, r0, r4
 80070ac:	605a      	str	r2, [r3, #4]
 80070ae:	6008      	str	r0, [r1, #0]
 80070b0:	e7cc      	b.n	800704c <_malloc_trim_r+0x3c>
 80070b2:	bf00      	nop

080070b4 <_free_r>:
 80070b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070b8:	460e      	mov	r6, r1
 80070ba:	4681      	mov	r9, r0
 80070bc:	2900      	cmp	r1, #0
 80070be:	d060      	beq.n	8007182 <_free_r+0xce>
 80070c0:	f7fa feb2 	bl	8001e28 <__malloc_lock>
 80070c4:	f856 1c04 	ldr.w	r1, [r6, #-4]
 80070c8:	f1a6 0408 	sub.w	r4, r6, #8
 80070cc:	f021 0301 	bic.w	r3, r1, #1
 80070d0:	18e2      	adds	r2, r4, r3
 80070d2:	f240 45a4 	movw	r5, #1188	; 0x4a4
 80070d6:	6857      	ldr	r7, [r2, #4]
 80070d8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80070dc:	f027 0003 	bic.w	r0, r7, #3
 80070e0:	68af      	ldr	r7, [r5, #8]
 80070e2:	4297      	cmp	r7, r2
 80070e4:	d063      	beq.n	80071ae <_free_r+0xfa>
 80070e6:	f011 0c01 	ands.w	ip, r1, #1
 80070ea:	6050      	str	r0, [r2, #4]
 80070ec:	bf18      	it	ne
 80070ee:	2100      	movne	r1, #0
 80070f0:	d111      	bne.n	8007116 <_free_r+0x62>
 80070f2:	f856 1c08 	ldr.w	r1, [r6, #-8]
 80070f6:	1a64      	subs	r4, r4, r1
 80070f8:	f105 0808 	add.w	r8, r5, #8
 80070fc:	68a6      	ldr	r6, [r4, #8]
 80070fe:	4546      	cmp	r6, r8
 8007100:	bf18      	it	ne
 8007102:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 8007106:	440b      	add	r3, r1
 8007108:	bf1d      	ittte	ne
 800710a:	f8c6 800c 	strne.w	r8, [r6, #12]
 800710e:	4661      	movne	r1, ip
 8007110:	f8c8 6008 	strne.w	r6, [r8, #8]
 8007114:	2101      	moveq	r1, #1
 8007116:	1816      	adds	r6, r2, r0
 8007118:	6876      	ldr	r6, [r6, #4]
 800711a:	07f6      	lsls	r6, r6, #31
 800711c:	d408      	bmi.n	8007130 <_free_r+0x7c>
 800711e:	4403      	add	r3, r0
 8007120:	6890      	ldr	r0, [r2, #8]
 8007122:	b911      	cbnz	r1, 800712a <_free_r+0x76>
 8007124:	4e49      	ldr	r6, [pc, #292]	; (800724c <_free_r+0x198>)
 8007126:	42b0      	cmp	r0, r6
 8007128:	d060      	beq.n	80071ec <_free_r+0x138>
 800712a:	68d2      	ldr	r2, [r2, #12]
 800712c:	60c2      	str	r2, [r0, #12]
 800712e:	6090      	str	r0, [r2, #8]
 8007130:	f043 0201 	orr.w	r2, r3, #1
 8007134:	6062      	str	r2, [r4, #4]
 8007136:	50e3      	str	r3, [r4, r3]
 8007138:	b9f1      	cbnz	r1, 8007178 <_free_r+0xc4>
 800713a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800713e:	d322      	bcc.n	8007186 <_free_r+0xd2>
 8007140:	0a5a      	lsrs	r2, r3, #9
 8007142:	2a04      	cmp	r2, #4
 8007144:	d85b      	bhi.n	80071fe <_free_r+0x14a>
 8007146:	0998      	lsrs	r0, r3, #6
 8007148:	3038      	adds	r0, #56	; 0x38
 800714a:	0041      	lsls	r1, r0, #1
 800714c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8007150:	f240 41a4 	movw	r1, #1188	; 0x4a4
 8007154:	68aa      	ldr	r2, [r5, #8]
 8007156:	42aa      	cmp	r2, r5
 8007158:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800715c:	d05b      	beq.n	8007216 <_free_r+0x162>
 800715e:	6851      	ldr	r1, [r2, #4]
 8007160:	f021 0103 	bic.w	r1, r1, #3
 8007164:	428b      	cmp	r3, r1
 8007166:	d202      	bcs.n	800716e <_free_r+0xba>
 8007168:	6892      	ldr	r2, [r2, #8]
 800716a:	4295      	cmp	r5, r2
 800716c:	d1f7      	bne.n	800715e <_free_r+0xaa>
 800716e:	68d3      	ldr	r3, [r2, #12]
 8007170:	60e3      	str	r3, [r4, #12]
 8007172:	60a2      	str	r2, [r4, #8]
 8007174:	609c      	str	r4, [r3, #8]
 8007176:	60d4      	str	r4, [r2, #12]
 8007178:	4648      	mov	r0, r9
 800717a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800717e:	f7fa be57 	b.w	8001e30 <__malloc_unlock>
 8007182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007186:	08db      	lsrs	r3, r3, #3
 8007188:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800718c:	6868      	ldr	r0, [r5, #4]
 800718e:	6891      	ldr	r1, [r2, #8]
 8007190:	60e2      	str	r2, [r4, #12]
 8007192:	2601      	movs	r6, #1
 8007194:	109b      	asrs	r3, r3, #2
 8007196:	fa06 f303 	lsl.w	r3, r6, r3
 800719a:	4318      	orrs	r0, r3
 800719c:	60a1      	str	r1, [r4, #8]
 800719e:	6068      	str	r0, [r5, #4]
 80071a0:	6094      	str	r4, [r2, #8]
 80071a2:	4648      	mov	r0, r9
 80071a4:	60cc      	str	r4, [r1, #12]
 80071a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071aa:	f7fa be41 	b.w	8001e30 <__malloc_unlock>
 80071ae:	07cf      	lsls	r7, r1, #31
 80071b0:	4418      	add	r0, r3
 80071b2:	d407      	bmi.n	80071c4 <_free_r+0x110>
 80071b4:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80071b8:	1ae4      	subs	r4, r4, r3
 80071ba:	4418      	add	r0, r3
 80071bc:	68a2      	ldr	r2, [r4, #8]
 80071be:	68e3      	ldr	r3, [r4, #12]
 80071c0:	60d3      	str	r3, [r2, #12]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	f640 02ac 	movw	r2, #2220	; 0x8ac
 80071c8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80071cc:	f040 0101 	orr.w	r1, r0, #1
 80071d0:	6813      	ldr	r3, [r2, #0]
 80071d2:	6061      	str	r1, [r4, #4]
 80071d4:	4298      	cmp	r0, r3
 80071d6:	60ac      	str	r4, [r5, #8]
 80071d8:	d3ce      	bcc.n	8007178 <_free_r+0xc4>
 80071da:	f640 2330 	movw	r3, #2608	; 0xa30
 80071de:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80071e2:	4648      	mov	r0, r9
 80071e4:	6819      	ldr	r1, [r3, #0]
 80071e6:	f7ff ff13 	bl	8007010 <_malloc_trim_r>
 80071ea:	e7c5      	b.n	8007178 <_free_r+0xc4>
 80071ec:	f043 0201 	orr.w	r2, r3, #1
 80071f0:	616c      	str	r4, [r5, #20]
 80071f2:	612c      	str	r4, [r5, #16]
 80071f4:	60e0      	str	r0, [r4, #12]
 80071f6:	60a0      	str	r0, [r4, #8]
 80071f8:	6062      	str	r2, [r4, #4]
 80071fa:	50e3      	str	r3, [r4, r3]
 80071fc:	e7bc      	b.n	8007178 <_free_r+0xc4>
 80071fe:	2a14      	cmp	r2, #20
 8007200:	bf9c      	itt	ls
 8007202:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 8007206:	0041      	lslls	r1, r0, #1
 8007208:	d9a0      	bls.n	800714c <_free_r+0x98>
 800720a:	2a54      	cmp	r2, #84	; 0x54
 800720c:	d80c      	bhi.n	8007228 <_free_r+0x174>
 800720e:	0b18      	lsrs	r0, r3, #12
 8007210:	306e      	adds	r0, #110	; 0x6e
 8007212:	0041      	lsls	r1, r0, #1
 8007214:	e79a      	b.n	800714c <_free_r+0x98>
 8007216:	684b      	ldr	r3, [r1, #4]
 8007218:	1080      	asrs	r0, r0, #2
 800721a:	2501      	movs	r5, #1
 800721c:	fa05 f000 	lsl.w	r0, r5, r0
 8007220:	4303      	orrs	r3, r0
 8007222:	604b      	str	r3, [r1, #4]
 8007224:	4613      	mov	r3, r2
 8007226:	e7a3      	b.n	8007170 <_free_r+0xbc>
 8007228:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800722c:	d803      	bhi.n	8007236 <_free_r+0x182>
 800722e:	0bd8      	lsrs	r0, r3, #15
 8007230:	3077      	adds	r0, #119	; 0x77
 8007232:	0041      	lsls	r1, r0, #1
 8007234:	e78a      	b.n	800714c <_free_r+0x98>
 8007236:	f240 5154 	movw	r1, #1364	; 0x554
 800723a:	428a      	cmp	r2, r1
 800723c:	bf9d      	ittte	ls
 800723e:	0c98      	lsrls	r0, r3, #18
 8007240:	307c      	addls	r0, #124	; 0x7c
 8007242:	0041      	lslls	r1, r0, #1
 8007244:	21fc      	movhi	r1, #252	; 0xfc
 8007246:	bf88      	it	hi
 8007248:	207e      	movhi	r0, #126	; 0x7e
 800724a:	e77f      	b.n	800714c <_free_r+0x98>
 800724c:	200004ac 	.word	0x200004ac

08007250 <_localeconv_r>:
 8007250:	f640 00b4 	movw	r0, #2228	; 0x8b4
 8007254:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <memchr>:
 800725c:	0783      	lsls	r3, r0, #30
 800725e:	b470      	push	{r4, r5, r6}
 8007260:	b2c9      	uxtb	r1, r1
 8007262:	d03f      	beq.n	80072e4 <memchr+0x88>
 8007264:	1e54      	subs	r4, r2, #1
 8007266:	b32a      	cbz	r2, 80072b4 <memchr+0x58>
 8007268:	7803      	ldrb	r3, [r0, #0]
 800726a:	428b      	cmp	r3, r1
 800726c:	d023      	beq.n	80072b6 <memchr+0x5a>
 800726e:	1c43      	adds	r3, r0, #1
 8007270:	e004      	b.n	800727c <memchr+0x20>
 8007272:	b1fc      	cbz	r4, 80072b4 <memchr+0x58>
 8007274:	7804      	ldrb	r4, [r0, #0]
 8007276:	428c      	cmp	r4, r1
 8007278:	d01d      	beq.n	80072b6 <memchr+0x5a>
 800727a:	4614      	mov	r4, r2
 800727c:	f013 0f03 	tst.w	r3, #3
 8007280:	4618      	mov	r0, r3
 8007282:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8007286:	f103 0301 	add.w	r3, r3, #1
 800728a:	d1f2      	bne.n	8007272 <memchr+0x16>
 800728c:	2c03      	cmp	r4, #3
 800728e:	d814      	bhi.n	80072ba <memchr+0x5e>
 8007290:	1e65      	subs	r5, r4, #1
 8007292:	b34c      	cbz	r4, 80072e8 <memchr+0x8c>
 8007294:	7803      	ldrb	r3, [r0, #0]
 8007296:	428b      	cmp	r3, r1
 8007298:	d00d      	beq.n	80072b6 <memchr+0x5a>
 800729a:	1c42      	adds	r2, r0, #1
 800729c:	2300      	movs	r3, #0
 800729e:	e002      	b.n	80072a6 <memchr+0x4a>
 80072a0:	7804      	ldrb	r4, [r0, #0]
 80072a2:	428c      	cmp	r4, r1
 80072a4:	d007      	beq.n	80072b6 <memchr+0x5a>
 80072a6:	42ab      	cmp	r3, r5
 80072a8:	4610      	mov	r0, r2
 80072aa:	f103 0301 	add.w	r3, r3, #1
 80072ae:	f102 0201 	add.w	r2, r2, #1
 80072b2:	d1f5      	bne.n	80072a0 <memchr+0x44>
 80072b4:	2000      	movs	r0, #0
 80072b6:	bc70      	pop	{r4, r5, r6}
 80072b8:	4770      	bx	lr
 80072ba:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 80072be:	4603      	mov	r3, r0
 80072c0:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 80072c4:	4618      	mov	r0, r3
 80072c6:	3304      	adds	r3, #4
 80072c8:	6802      	ldr	r2, [r0, #0]
 80072ca:	4072      	eors	r2, r6
 80072cc:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 80072d0:	ea25 0202 	bic.w	r2, r5, r2
 80072d4:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80072d8:	d1da      	bne.n	8007290 <memchr+0x34>
 80072da:	3c04      	subs	r4, #4
 80072dc:	2c03      	cmp	r4, #3
 80072de:	4618      	mov	r0, r3
 80072e0:	d8f0      	bhi.n	80072c4 <memchr+0x68>
 80072e2:	e7d5      	b.n	8007290 <memchr+0x34>
 80072e4:	4614      	mov	r4, r2
 80072e6:	e7d1      	b.n	800728c <memchr+0x30>
 80072e8:	4620      	mov	r0, r4
 80072ea:	e7e4      	b.n	80072b6 <memchr+0x5a>

080072ec <_Balloc>:
 80072ec:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80072ee:	b570      	push	{r4, r5, r6, lr}
 80072f0:	4605      	mov	r5, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	b14a      	cbz	r2, 800730a <_Balloc+0x1e>
 80072f6:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 80072fa:	b180      	cbz	r0, 800731e <_Balloc+0x32>
 80072fc:	6801      	ldr	r1, [r0, #0]
 80072fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007302:	2200      	movs	r2, #0
 8007304:	6102      	str	r2, [r0, #16]
 8007306:	60c2      	str	r2, [r0, #12]
 8007308:	bd70      	pop	{r4, r5, r6, pc}
 800730a:	2221      	movs	r2, #33	; 0x21
 800730c:	2104      	movs	r1, #4
 800730e:	f000 fba9 	bl	8007a64 <_calloc_r>
 8007312:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007314:	4602      	mov	r2, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d1ed      	bne.n	80072f6 <_Balloc+0xa>
 800731a:	2000      	movs	r0, #0
 800731c:	bd70      	pop	{r4, r5, r6, pc}
 800731e:	2101      	movs	r1, #1
 8007320:	fa01 f604 	lsl.w	r6, r1, r4
 8007324:	1d72      	adds	r2, r6, #5
 8007326:	4628      	mov	r0, r5
 8007328:	0092      	lsls	r2, r2, #2
 800732a:	f000 fb9b 	bl	8007a64 <_calloc_r>
 800732e:	2800      	cmp	r0, #0
 8007330:	d0f3      	beq.n	800731a <_Balloc+0x2e>
 8007332:	6044      	str	r4, [r0, #4]
 8007334:	6086      	str	r6, [r0, #8]
 8007336:	e7e4      	b.n	8007302 <_Balloc+0x16>

08007338 <_Bfree>:
 8007338:	b131      	cbz	r1, 8007348 <_Bfree+0x10>
 800733a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800733c:	684a      	ldr	r2, [r1, #4]
 800733e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007342:	6008      	str	r0, [r1, #0]
 8007344:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop

0800734c <__multadd>:
 800734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007350:	f8d1 8010 	ldr.w	r8, [r1, #16]
 8007354:	b082      	sub	sp, #8
 8007356:	4689      	mov	r9, r1
 8007358:	4682      	mov	sl, r0
 800735a:	f101 0514 	add.w	r5, r1, #20
 800735e:	2400      	movs	r4, #0
 8007360:	682f      	ldr	r7, [r5, #0]
 8007362:	b2be      	uxth	r6, r7
 8007364:	0c3f      	lsrs	r7, r7, #16
 8007366:	fb02 3606 	mla	r6, r2, r6, r3
 800736a:	fb02 f307 	mul.w	r3, r2, r7
 800736e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 8007372:	3401      	adds	r4, #1
 8007374:	b2b6      	uxth	r6, r6
 8007376:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 800737a:	45a0      	cmp	r8, r4
 800737c:	f845 6b04 	str.w	r6, [r5], #4
 8007380:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8007384:	dcec      	bgt.n	8007360 <__multadd+0x14>
 8007386:	b153      	cbz	r3, 800739e <__multadd+0x52>
 8007388:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800738c:	4590      	cmp	r8, r2
 800738e:	da0a      	bge.n	80073a6 <__multadd+0x5a>
 8007390:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 8007394:	f108 0201 	add.w	r2, r8, #1
 8007398:	614b      	str	r3, [r1, #20]
 800739a:	f8c9 2010 	str.w	r2, [r9, #16]
 800739e:	4648      	mov	r0, r9
 80073a0:	b002      	add	sp, #8
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073aa:	9301      	str	r3, [sp, #4]
 80073ac:	3101      	adds	r1, #1
 80073ae:	4650      	mov	r0, sl
 80073b0:	f7ff ff9c 	bl	80072ec <_Balloc>
 80073b4:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80073b8:	3202      	adds	r2, #2
 80073ba:	f109 010c 	add.w	r1, r9, #12
 80073be:	4604      	mov	r4, r0
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	300c      	adds	r0, #12
 80073c4:	f7f8 ff44 	bl	8000250 <memcpy>
 80073c8:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 80073cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073d0:	9b01      	ldr	r3, [sp, #4]
 80073d2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80073d6:	f8c9 0000 	str.w	r0, [r9]
 80073da:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 80073de:	46a1      	mov	r9, r4
 80073e0:	e7d6      	b.n	8007390 <__multadd+0x44>
 80073e2:	bf00      	nop

080073e4 <__hi0bits>:
 80073e4:	0c03      	lsrs	r3, r0, #16
 80073e6:	bf06      	itte	eq
 80073e8:	0400      	lsleq	r0, r0, #16
 80073ea:	2310      	moveq	r3, #16
 80073ec:	2300      	movne	r3, #0
 80073ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80073f2:	bf04      	itt	eq
 80073f4:	0200      	lsleq	r0, r0, #8
 80073f6:	3308      	addeq	r3, #8
 80073f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073fc:	bf04      	itt	eq
 80073fe:	0100      	lsleq	r0, r0, #4
 8007400:	3304      	addeq	r3, #4
 8007402:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007406:	bf04      	itt	eq
 8007408:	0080      	lsleq	r0, r0, #2
 800740a:	3302      	addeq	r3, #2
 800740c:	2800      	cmp	r0, #0
 800740e:	db05      	blt.n	800741c <__hi0bits+0x38>
 8007410:	0042      	lsls	r2, r0, #1
 8007412:	d401      	bmi.n	8007418 <__hi0bits+0x34>
 8007414:	2020      	movs	r0, #32
 8007416:	4770      	bx	lr
 8007418:	1c58      	adds	r0, r3, #1
 800741a:	4770      	bx	lr
 800741c:	4618      	mov	r0, r3
 800741e:	4770      	bx	lr

08007420 <__lo0bits>:
 8007420:	6803      	ldr	r3, [r0, #0]
 8007422:	f013 0207 	ands.w	r2, r3, #7
 8007426:	d00b      	beq.n	8007440 <__lo0bits+0x20>
 8007428:	07d9      	lsls	r1, r3, #31
 800742a:	d424      	bmi.n	8007476 <__lo0bits+0x56>
 800742c:	079a      	lsls	r2, r3, #30
 800742e:	bf4b      	itete	mi
 8007430:	085b      	lsrmi	r3, r3, #1
 8007432:	089b      	lsrpl	r3, r3, #2
 8007434:	6003      	strmi	r3, [r0, #0]
 8007436:	6003      	strpl	r3, [r0, #0]
 8007438:	bf4c      	ite	mi
 800743a:	2001      	movmi	r0, #1
 800743c:	2002      	movpl	r0, #2
 800743e:	4770      	bx	lr
 8007440:	b299      	uxth	r1, r3
 8007442:	b909      	cbnz	r1, 8007448 <__lo0bits+0x28>
 8007444:	0c1b      	lsrs	r3, r3, #16
 8007446:	2210      	movs	r2, #16
 8007448:	f013 0fff 	tst.w	r3, #255	; 0xff
 800744c:	bf04      	itt	eq
 800744e:	0a1b      	lsreq	r3, r3, #8
 8007450:	3208      	addeq	r2, #8
 8007452:	0719      	lsls	r1, r3, #28
 8007454:	bf04      	itt	eq
 8007456:	091b      	lsreq	r3, r3, #4
 8007458:	3204      	addeq	r2, #4
 800745a:	0799      	lsls	r1, r3, #30
 800745c:	bf04      	itt	eq
 800745e:	089b      	lsreq	r3, r3, #2
 8007460:	3202      	addeq	r2, #2
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d404      	bmi.n	8007470 <__lo0bits+0x50>
 8007466:	085b      	lsrs	r3, r3, #1
 8007468:	d101      	bne.n	800746e <__lo0bits+0x4e>
 800746a:	2020      	movs	r0, #32
 800746c:	4770      	bx	lr
 800746e:	3201      	adds	r2, #1
 8007470:	6003      	str	r3, [r0, #0]
 8007472:	4610      	mov	r0, r2
 8007474:	4770      	bx	lr
 8007476:	2000      	movs	r0, #0
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <__i2b>:
 800747c:	b510      	push	{r4, lr}
 800747e:	460c      	mov	r4, r1
 8007480:	2101      	movs	r1, #1
 8007482:	f7ff ff33 	bl	80072ec <_Balloc>
 8007486:	2201      	movs	r2, #1
 8007488:	6144      	str	r4, [r0, #20]
 800748a:	6102      	str	r2, [r0, #16]
 800748c:	bd10      	pop	{r4, pc}
 800748e:	bf00      	nop

08007490 <__multiply>:
 8007490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007494:	690c      	ldr	r4, [r1, #16]
 8007496:	6917      	ldr	r7, [r2, #16]
 8007498:	42bc      	cmp	r4, r7
 800749a:	b085      	sub	sp, #20
 800749c:	4688      	mov	r8, r1
 800749e:	4691      	mov	r9, r2
 80074a0:	da04      	bge.n	80074ac <__multiply+0x1c>
 80074a2:	4622      	mov	r2, r4
 80074a4:	46c8      	mov	r8, r9
 80074a6:	463c      	mov	r4, r7
 80074a8:	4689      	mov	r9, r1
 80074aa:	4617      	mov	r7, r2
 80074ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80074b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074b4:	19e6      	adds	r6, r4, r7
 80074b6:	429e      	cmp	r6, r3
 80074b8:	bfc8      	it	gt
 80074ba:	3101      	addgt	r1, #1
 80074bc:	f7ff ff16 	bl	80072ec <_Balloc>
 80074c0:	f100 0514 	add.w	r5, r0, #20
 80074c4:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80074c8:	4565      	cmp	r5, ip
 80074ca:	9001      	str	r0, [sp, #4]
 80074cc:	bf3c      	itt	cc
 80074ce:	462b      	movcc	r3, r5
 80074d0:	2000      	movcc	r0, #0
 80074d2:	d203      	bcs.n	80074dc <__multiply+0x4c>
 80074d4:	f843 0b04 	str.w	r0, [r3], #4
 80074d8:	459c      	cmp	ip, r3
 80074da:	d8fb      	bhi.n	80074d4 <__multiply+0x44>
 80074dc:	f109 0914 	add.w	r9, r9, #20
 80074e0:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 80074e4:	4599      	cmp	r9, r3
 80074e6:	f108 0814 	add.w	r8, r8, #20
 80074ea:	bf38      	it	cc
 80074ec:	f8cd c008 	strcc.w	ip, [sp, #8]
 80074f0:	f8cd 8000 	str.w	r8, [sp]
 80074f4:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 80074f8:	bf3e      	ittt	cc
 80074fa:	464f      	movcc	r7, r9
 80074fc:	469c      	movcc	ip, r3
 80074fe:	9603      	strcc	r6, [sp, #12]
 8007500:	d25c      	bcs.n	80075bc <__multiply+0x12c>
 8007502:	f857 3b04 	ldr.w	r3, [r7], #4
 8007506:	fa1f f883 	uxth.w	r8, r3
 800750a:	f1b8 0f00 	cmp.w	r8, #0
 800750e:	d024      	beq.n	800755a <__multiply+0xca>
 8007510:	9a00      	ldr	r2, [sp, #0]
 8007512:	462b      	mov	r3, r5
 8007514:	f04f 0900 	mov.w	r9, #0
 8007518:	e000      	b.n	800751c <__multiply+0x8c>
 800751a:	460b      	mov	r3, r1
 800751c:	f852 6b04 	ldr.w	r6, [r2], #4
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	fa1f fb86 	uxth.w	fp, r6
 8007526:	fa1f fa81 	uxth.w	sl, r1
 800752a:	0c30      	lsrs	r0, r6, #16
 800752c:	0c09      	lsrs	r1, r1, #16
 800752e:	fb08 a60b 	mla	r6, r8, fp, sl
 8007532:	44b1      	add	r9, r6
 8007534:	fb08 1000 	mla	r0, r8, r0, r1
 8007538:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 800753c:	4619      	mov	r1, r3
 800753e:	fa1f f989 	uxth.w	r9, r9
 8007542:	ea49 4600 	orr.w	r6, r9, r0, lsl #16
 8007546:	4294      	cmp	r4, r2
 8007548:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800754c:	f841 6b04 	str.w	r6, [r1], #4
 8007550:	d8e3      	bhi.n	800751a <__multiply+0x8a>
 8007552:	f8c3 9004 	str.w	r9, [r3, #4]
 8007556:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800755a:	ea5f 4913 	movs.w	r9, r3, lsr #16
 800755e:	d026      	beq.n	80075ae <__multiply+0x11e>
 8007560:	f8d5 a000 	ldr.w	sl, [r5]
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	f04f 0b00 	mov.w	fp, #0
 800756a:	4629      	mov	r1, r5
 800756c:	465e      	mov	r6, fp
 800756e:	4650      	mov	r0, sl
 8007570:	e000      	b.n	8007574 <__multiply+0xe4>
 8007572:	4611      	mov	r1, r2
 8007574:	f8b3 b000 	ldrh.w	fp, [r3]
 8007578:	0c00      	lsrs	r0, r0, #16
 800757a:	fb09 0b0b 	mla	fp, r9, fp, r0
 800757e:	44b3      	add	fp, r6
 8007580:	fa1f f08a 	uxth.w	r0, sl
 8007584:	460a      	mov	r2, r1
 8007586:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 800758a:	f842 0b04 	str.w	r0, [r2], #4
 800758e:	f853 ab04 	ldr.w	sl, [r3], #4
 8007592:	6848      	ldr	r0, [r1, #4]
 8007594:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8007598:	b286      	uxth	r6, r0
 800759a:	fb09 6a0a 	mla	sl, r9, sl, r6
 800759e:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 80075a2:	429c      	cmp	r4, r3
 80075a4:	ea4f 461a 	mov.w	r6, sl, lsr #16
 80075a8:	d8e3      	bhi.n	8007572 <__multiply+0xe2>
 80075aa:	f8c1 a004 	str.w	sl, [r1, #4]
 80075ae:	45bc      	cmp	ip, r7
 80075b0:	f105 0504 	add.w	r5, r5, #4
 80075b4:	d8a5      	bhi.n	8007502 <__multiply+0x72>
 80075b6:	f8dd c008 	ldr.w	ip, [sp, #8]
 80075ba:	9e03      	ldr	r6, [sp, #12]
 80075bc:	2e00      	cmp	r6, #0
 80075be:	dd0a      	ble.n	80075d6 <__multiply+0x146>
 80075c0:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80075c4:	f1ac 0c04 	sub.w	ip, ip, #4
 80075c8:	b11b      	cbz	r3, 80075d2 <__multiply+0x142>
 80075ca:	e004      	b.n	80075d6 <__multiply+0x146>
 80075cc:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80075d0:	b90b      	cbnz	r3, 80075d6 <__multiply+0x146>
 80075d2:	3e01      	subs	r6, #1
 80075d4:	d1fa      	bne.n	80075cc <__multiply+0x13c>
 80075d6:	9a01      	ldr	r2, [sp, #4]
 80075d8:	4610      	mov	r0, r2
 80075da:	6116      	str	r6, [r2, #16]
 80075dc:	b005      	add	sp, #20
 80075de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e2:	bf00      	nop

080075e4 <__pow5mult>:
 80075e4:	f012 0303 	ands.w	r3, r2, #3
 80075e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ec:	4614      	mov	r4, r2
 80075ee:	4607      	mov	r7, r0
 80075f0:	460e      	mov	r6, r1
 80075f2:	d12c      	bne.n	800764e <__pow5mult+0x6a>
 80075f4:	10a4      	asrs	r4, r4, #2
 80075f6:	d01c      	beq.n	8007632 <__pow5mult+0x4e>
 80075f8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	d033      	beq.n	8007666 <__pow5mult+0x82>
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	e004      	b.n	800760e <__pow5mult+0x2a>
 8007604:	1064      	asrs	r4, r4, #1
 8007606:	d014      	beq.n	8007632 <__pow5mult+0x4e>
 8007608:	6828      	ldr	r0, [r5, #0]
 800760a:	b1a8      	cbz	r0, 8007638 <__pow5mult+0x54>
 800760c:	4605      	mov	r5, r0
 800760e:	07e0      	lsls	r0, r4, #31
 8007610:	d5f8      	bpl.n	8007604 <__pow5mult+0x20>
 8007612:	4638      	mov	r0, r7
 8007614:	4631      	mov	r1, r6
 8007616:	462a      	mov	r2, r5
 8007618:	f7ff ff3a 	bl	8007490 <__multiply>
 800761c:	b1ae      	cbz	r6, 800764a <__pow5mult+0x66>
 800761e:	6872      	ldr	r2, [r6, #4]
 8007620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007626:	1064      	asrs	r4, r4, #1
 8007628:	6031      	str	r1, [r6, #0]
 800762a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800762e:	4606      	mov	r6, r0
 8007630:	d1ea      	bne.n	8007608 <__pow5mult+0x24>
 8007632:	4630      	mov	r0, r6
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	4638      	mov	r0, r7
 800763a:	4629      	mov	r1, r5
 800763c:	462a      	mov	r2, r5
 800763e:	f7ff ff27 	bl	8007490 <__multiply>
 8007642:	6028      	str	r0, [r5, #0]
 8007644:	f8c0 8000 	str.w	r8, [r0]
 8007648:	e7e0      	b.n	800760c <__pow5mult+0x28>
 800764a:	4606      	mov	r6, r0
 800764c:	e7da      	b.n	8007604 <__pow5mult+0x20>
 800764e:	f248 6238 	movw	r2, #34360	; 0x8638
 8007652:	1e5d      	subs	r5, r3, #1
 8007654:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007658:	2300      	movs	r3, #0
 800765a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 800765e:	f7ff fe75 	bl	800734c <__multadd>
 8007662:	4606      	mov	r6, r0
 8007664:	e7c6      	b.n	80075f4 <__pow5mult+0x10>
 8007666:	2101      	movs	r1, #1
 8007668:	4638      	mov	r0, r7
 800766a:	f7ff fe3f 	bl	80072ec <_Balloc>
 800766e:	f240 2171 	movw	r1, #625	; 0x271
 8007672:	2201      	movs	r2, #1
 8007674:	2300      	movs	r3, #0
 8007676:	6141      	str	r1, [r0, #20]
 8007678:	6102      	str	r2, [r0, #16]
 800767a:	4605      	mov	r5, r0
 800767c:	64b8      	str	r0, [r7, #72]	; 0x48
 800767e:	6003      	str	r3, [r0, #0]
 8007680:	e7bd      	b.n	80075fe <__pow5mult+0x1a>
 8007682:	bf00      	nop

08007684 <__lshift>:
 8007684:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	4693      	mov	fp, r2
 800768a:	690a      	ldr	r2, [r1, #16]
 800768c:	688b      	ldr	r3, [r1, #8]
 800768e:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 8007692:	eb0a 0902 	add.w	r9, sl, r2
 8007696:	f109 0601 	add.w	r6, r9, #1
 800769a:	429e      	cmp	r6, r3
 800769c:	460f      	mov	r7, r1
 800769e:	4680      	mov	r8, r0
 80076a0:	6849      	ldr	r1, [r1, #4]
 80076a2:	dd04      	ble.n	80076ae <__lshift+0x2a>
 80076a4:	005b      	lsls	r3, r3, #1
 80076a6:	429e      	cmp	r6, r3
 80076a8:	f101 0101 	add.w	r1, r1, #1
 80076ac:	dcfa      	bgt.n	80076a4 <__lshift+0x20>
 80076ae:	4640      	mov	r0, r8
 80076b0:	f7ff fe1c 	bl	80072ec <_Balloc>
 80076b4:	f1ba 0f00 	cmp.w	sl, #0
 80076b8:	f100 0414 	add.w	r4, r0, #20
 80076bc:	dd09      	ble.n	80076d2 <__lshift+0x4e>
 80076be:	2300      	movs	r3, #0
 80076c0:	461a      	mov	r2, r3
 80076c2:	4625      	mov	r5, r4
 80076c4:	3301      	adds	r3, #1
 80076c6:	4553      	cmp	r3, sl
 80076c8:	f845 2b04 	str.w	r2, [r5], #4
 80076cc:	d1fa      	bne.n	80076c4 <__lshift+0x40>
 80076ce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	f01b 0b1f 	ands.w	fp, fp, #31
 80076dc:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 80076e0:	d021      	beq.n	8007726 <__lshift+0xa2>
 80076e2:	f1cb 0a20 	rsb	sl, fp, #32
 80076e6:	2200      	movs	r2, #0
 80076e8:	e000      	b.n	80076ec <__lshift+0x68>
 80076ea:	462c      	mov	r4, r5
 80076ec:	6819      	ldr	r1, [r3, #0]
 80076ee:	4625      	mov	r5, r4
 80076f0:	fa01 f10b 	lsl.w	r1, r1, fp
 80076f4:	430a      	orrs	r2, r1
 80076f6:	f845 2b04 	str.w	r2, [r5], #4
 80076fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80076fe:	4563      	cmp	r3, ip
 8007700:	fa22 f20a 	lsr.w	r2, r2, sl
 8007704:	d3f1      	bcc.n	80076ea <__lshift+0x66>
 8007706:	6062      	str	r2, [r4, #4]
 8007708:	b10a      	cbz	r2, 800770e <__lshift+0x8a>
 800770a:	f109 0602 	add.w	r6, r9, #2
 800770e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007718:	3e01      	subs	r6, #1
 800771a:	6106      	str	r6, [r0, #16]
 800771c:	6039      	str	r1, [r7, #0]
 800771e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8007722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007726:	f853 2b04 	ldr.w	r2, [r3], #4
 800772a:	459c      	cmp	ip, r3
 800772c:	f844 2b04 	str.w	r2, [r4], #4
 8007730:	d9ed      	bls.n	800770e <__lshift+0x8a>
 8007732:	f853 2b04 	ldr.w	r2, [r3], #4
 8007736:	459c      	cmp	ip, r3
 8007738:	f844 2b04 	str.w	r2, [r4], #4
 800773c:	d8f3      	bhi.n	8007726 <__lshift+0xa2>
 800773e:	e7e6      	b.n	800770e <__lshift+0x8a>

08007740 <__mcmp>:
 8007740:	6902      	ldr	r2, [r0, #16]
 8007742:	690b      	ldr	r3, [r1, #16]
 8007744:	1ad2      	subs	r2, r2, r3
 8007746:	b410      	push	{r4}
 8007748:	bf18      	it	ne
 800774a:	4610      	movne	r0, r2
 800774c:	d112      	bne.n	8007774 <__mcmp+0x34>
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	3014      	adds	r0, #20
 8007752:	3114      	adds	r1, #20
 8007754:	4419      	add	r1, r3
 8007756:	4403      	add	r3, r0
 8007758:	e001      	b.n	800775e <__mcmp+0x1e>
 800775a:	4298      	cmp	r0, r3
 800775c:	d20d      	bcs.n	800777a <__mcmp+0x3a>
 800775e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007762:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007766:	42a2      	cmp	r2, r4
 8007768:	d0f7      	beq.n	800775a <__mcmp+0x1a>
 800776a:	4294      	cmp	r4, r2
 800776c:	bf94      	ite	ls
 800776e:	2001      	movls	r0, #1
 8007770:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	2000      	movs	r0, #0
 800777c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <__mdiff>:
 8007784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007788:	460c      	mov	r4, r1
 800778a:	4606      	mov	r6, r0
 800778c:	4611      	mov	r1, r2
 800778e:	4620      	mov	r0, r4
 8007790:	4615      	mov	r5, r2
 8007792:	f7ff ffd5 	bl	8007740 <__mcmp>
 8007796:	1e07      	subs	r7, r0, #0
 8007798:	d054      	beq.n	8007844 <__mdiff+0xc0>
 800779a:	bfbc      	itt	lt
 800779c:	4623      	movlt	r3, r4
 800779e:	462c      	movlt	r4, r5
 80077a0:	4630      	mov	r0, r6
 80077a2:	bfb8      	it	lt
 80077a4:	461d      	movlt	r5, r3
 80077a6:	6861      	ldr	r1, [r4, #4]
 80077a8:	bfac      	ite	ge
 80077aa:	2700      	movge	r7, #0
 80077ac:	2701      	movlt	r7, #1
 80077ae:	f7ff fd9d 	bl	80072ec <_Balloc>
 80077b2:	692a      	ldr	r2, [r5, #16]
 80077b4:	f8d4 c010 	ldr.w	ip, [r4, #16]
 80077b8:	60c7      	str	r7, [r0, #12]
 80077ba:	3414      	adds	r4, #20
 80077bc:	3514      	adds	r5, #20
 80077be:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 80077c2:	f100 0314 	add.w	r3, r0, #20
 80077c6:	eb04 088c 	add.w	r8, r4, ip, lsl #2
 80077ca:	2200      	movs	r2, #0
 80077cc:	f854 6b04 	ldr.w	r6, [r4], #4
 80077d0:	f855 7b04 	ldr.w	r7, [r5], #4
 80077d4:	fa12 f286 	uxtah	r2, r2, r6
 80077d8:	b2b9      	uxth	r1, r7
 80077da:	0c3f      	lsrs	r7, r7, #16
 80077dc:	1a51      	subs	r1, r2, r1
 80077de:	ebc7 4216 	rsb	r2, r7, r6, lsr #16
 80077e2:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80077e6:	b289      	uxth	r1, r1
 80077e8:	ea41 4602 	orr.w	r6, r1, r2, lsl #16
 80077ec:	45a9      	cmp	r9, r5
 80077ee:	f843 6b04 	str.w	r6, [r3], #4
 80077f2:	ea4f 4222 	mov.w	r2, r2, asr #16
 80077f6:	4621      	mov	r1, r4
 80077f8:	d8e8      	bhi.n	80077cc <__mdiff+0x48>
 80077fa:	45a0      	cmp	r8, r4
 80077fc:	461f      	mov	r7, r3
 80077fe:	d915      	bls.n	800782c <__mdiff+0xa8>
 8007800:	f851 5b04 	ldr.w	r5, [r1], #4
 8007804:	fa12 f285 	uxtah	r2, r2, r5
 8007808:	0c2d      	lsrs	r5, r5, #16
 800780a:	eb05 4522 	add.w	r5, r5, r2, asr #16
 800780e:	b292      	uxth	r2, r2
 8007810:	ea42 4605 	orr.w	r6, r2, r5, lsl #16
 8007814:	4588      	cmp	r8, r1
 8007816:	f843 6b04 	str.w	r6, [r3], #4
 800781a:	ea4f 4225 	mov.w	r2, r5, asr #16
 800781e:	d8ef      	bhi.n	8007800 <__mdiff+0x7c>
 8007820:	43e3      	mvns	r3, r4
 8007822:	4443      	add	r3, r8
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	3304      	adds	r3, #4
 800782a:	443b      	add	r3, r7
 800782c:	3b04      	subs	r3, #4
 800782e:	b92e      	cbnz	r6, 800783c <__mdiff+0xb8>
 8007830:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007834:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007838:	2a00      	cmp	r2, #0
 800783a:	d0f9      	beq.n	8007830 <__mdiff+0xac>
 800783c:	f8c0 c010 	str.w	ip, [r0, #16]
 8007840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007844:	4630      	mov	r0, r6
 8007846:	4639      	mov	r1, r7
 8007848:	f7ff fd50 	bl	80072ec <_Balloc>
 800784c:	2301      	movs	r3, #1
 800784e:	6147      	str	r7, [r0, #20]
 8007850:	6103      	str	r3, [r0, #16]
 8007852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007856:	bf00      	nop

08007858 <__d2b>:
 8007858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800785c:	b083      	sub	sp, #12
 800785e:	2101      	movs	r1, #1
 8007860:	461d      	mov	r5, r3
 8007862:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8007866:	4614      	mov	r4, r2
 8007868:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800786a:	f7ff fd3f 	bl	80072ec <_Balloc>
 800786e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007872:	4680      	mov	r8, r0
 8007874:	b10e      	cbz	r6, 800787a <__d2b+0x22>
 8007876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800787a:	9301      	str	r3, [sp, #4]
 800787c:	b324      	cbz	r4, 80078c8 <__d2b+0x70>
 800787e:	a802      	add	r0, sp, #8
 8007880:	f840 4d08 	str.w	r4, [r0, #-8]!
 8007884:	4668      	mov	r0, sp
 8007886:	f7ff fdcb 	bl	8007420 <__lo0bits>
 800788a:	2800      	cmp	r0, #0
 800788c:	d135      	bne.n	80078fa <__d2b+0xa2>
 800788e:	e89d 000c 	ldmia.w	sp, {r2, r3}
 8007892:	f8c8 2014 	str.w	r2, [r8, #20]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf0c      	ite	eq
 800789a:	2401      	moveq	r4, #1
 800789c:	2402      	movne	r4, #2
 800789e:	f8c8 3018 	str.w	r3, [r8, #24]
 80078a2:	f8c8 4010 	str.w	r4, [r8, #16]
 80078a6:	b9de      	cbnz	r6, 80078e0 <__d2b+0x88>
 80078a8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80078ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078b0:	6038      	str	r0, [r7, #0]
 80078b2:	6918      	ldr	r0, [r3, #16]
 80078b4:	f7ff fd96 	bl	80073e4 <__hi0bits>
 80078b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ba:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 80078be:	6018      	str	r0, [r3, #0]
 80078c0:	4640      	mov	r0, r8
 80078c2:	b003      	add	sp, #12
 80078c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078c8:	a801      	add	r0, sp, #4
 80078ca:	f7ff fda9 	bl	8007420 <__lo0bits>
 80078ce:	9b01      	ldr	r3, [sp, #4]
 80078d0:	2401      	movs	r4, #1
 80078d2:	3020      	adds	r0, #32
 80078d4:	f8c8 3014 	str.w	r3, [r8, #20]
 80078d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80078dc:	2e00      	cmp	r6, #0
 80078de:	d0e3      	beq.n	80078a8 <__d2b+0x50>
 80078e0:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 80078e4:	eb09 0300 	add.w	r3, r9, r0
 80078e8:	603b      	str	r3, [r7, #0]
 80078ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078f0:	6018      	str	r0, [r3, #0]
 80078f2:	4640      	mov	r0, r8
 80078f4:	b003      	add	sp, #12
 80078f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078fa:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80078fe:	f1c0 0120 	rsb	r1, r0, #32
 8007902:	fa03 f101 	lsl.w	r1, r3, r1
 8007906:	430a      	orrs	r2, r1
 8007908:	40c3      	lsrs	r3, r0
 800790a:	9301      	str	r3, [sp, #4]
 800790c:	f8c8 2014 	str.w	r2, [r8, #20]
 8007910:	e7c1      	b.n	8007896 <__d2b+0x3e>
 8007912:	bf00      	nop

08007914 <__fpclassifyd>:
 8007914:	ea50 0301 	orrs.w	r3, r0, r1
 8007918:	d101      	bne.n	800791e <__fpclassifyd+0xa>
 800791a:	2002      	movs	r0, #2
 800791c:	4770      	bx	lr
 800791e:	f1d0 0301 	rsbs	r3, r0, #1
 8007922:	bf38      	it	cc
 8007924:	2300      	movcc	r3, #0
 8007926:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800792a:	bf08      	it	eq
 800792c:	2800      	cmpeq	r0, #0
 800792e:	d0f4      	beq.n	800791a <__fpclassifyd+0x6>
 8007930:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007938:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 800793c:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8007940:	4290      	cmp	r0, r2
 8007942:	d801      	bhi.n	8007948 <__fpclassifyd+0x34>
 8007944:	2004      	movs	r0, #4
 8007946:	4770      	bx	lr
 8007948:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800794c:	d201      	bcs.n	8007952 <__fpclassifyd+0x3e>
 800794e:	2003      	movs	r0, #3
 8007950:	4770      	bx	lr
 8007952:	2000      	movs	r0, #0
 8007954:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 8007958:	4281      	cmp	r1, r0
 800795a:	bf14      	ite	ne
 800795c:	2000      	movne	r0, #0
 800795e:	f003 0001 	andeq.w	r0, r3, #1
 8007962:	4770      	bx	lr

08007964 <__ssprint_r>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	6894      	ldr	r4, [r2, #8]
 800796a:	6816      	ldr	r6, [r2, #0]
 800796c:	b083      	sub	sp, #12
 800796e:	4692      	mov	sl, r2
 8007970:	4680      	mov	r8, r0
 8007972:	460d      	mov	r5, r1
 8007974:	2c00      	cmp	r4, #0
 8007976:	d06f      	beq.n	8007a58 <__ssprint_r+0xf4>
 8007978:	f04f 0b00 	mov.w	fp, #0
 800797c:	6808      	ldr	r0, [r1, #0]
 800797e:	688b      	ldr	r3, [r1, #8]
 8007980:	465c      	mov	r4, fp
 8007982:	2c00      	cmp	r4, #0
 8007984:	d043      	beq.n	8007a0e <__ssprint_r+0xaa>
 8007986:	429c      	cmp	r4, r3
 8007988:	461f      	mov	r7, r3
 800798a:	d345      	bcc.n	8007a18 <__ssprint_r+0xb4>
 800798c:	89ab      	ldrh	r3, [r5, #12]
 800798e:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8007992:	d044      	beq.n	8007a1e <__ssprint_r+0xba>
 8007994:	696f      	ldr	r7, [r5, #20]
 8007996:	6929      	ldr	r1, [r5, #16]
 8007998:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800799c:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80079a0:	ebc1 0900 	rsb	r9, r1, r0
 80079a4:	1c62      	adds	r2, r4, #1
 80079a6:	107f      	asrs	r7, r7, #1
 80079a8:	444a      	add	r2, r9
 80079aa:	4297      	cmp	r7, r2
 80079ac:	bf34      	ite	cc
 80079ae:	4617      	movcc	r7, r2
 80079b0:	463a      	movcs	r2, r7
 80079b2:	055b      	lsls	r3, r3, #21
 80079b4:	d535      	bpl.n	8007a22 <__ssprint_r+0xbe>
 80079b6:	4611      	mov	r1, r2
 80079b8:	4640      	mov	r0, r8
 80079ba:	f7fc fc91 	bl	80042e0 <_malloc_r>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d039      	beq.n	8007a36 <__ssprint_r+0xd2>
 80079c2:	6929      	ldr	r1, [r5, #16]
 80079c4:	9001      	str	r0, [sp, #4]
 80079c6:	464a      	mov	r2, r9
 80079c8:	f7f8 fc42 	bl	8000250 <memcpy>
 80079cc:	89aa      	ldrh	r2, [r5, #12]
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80079d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079d8:	81aa      	strh	r2, [r5, #12]
 80079da:	ebc9 0207 	rsb	r2, r9, r7
 80079de:	eb03 0009 	add.w	r0, r3, r9
 80079e2:	616f      	str	r7, [r5, #20]
 80079e4:	612b      	str	r3, [r5, #16]
 80079e6:	6028      	str	r0, [r5, #0]
 80079e8:	60aa      	str	r2, [r5, #8]
 80079ea:	4627      	mov	r7, r4
 80079ec:	46a1      	mov	r9, r4
 80079ee:	464a      	mov	r2, r9
 80079f0:	4659      	mov	r1, fp
 80079f2:	f000 f867 	bl	8007ac4 <memmove>
 80079f6:	f8da 2008 	ldr.w	r2, [sl, #8]
 80079fa:	68ab      	ldr	r3, [r5, #8]
 80079fc:	6828      	ldr	r0, [r5, #0]
 80079fe:	1bdb      	subs	r3, r3, r7
 8007a00:	4448      	add	r0, r9
 8007a02:	1b14      	subs	r4, r2, r4
 8007a04:	60ab      	str	r3, [r5, #8]
 8007a06:	6028      	str	r0, [r5, #0]
 8007a08:	f8ca 4008 	str.w	r4, [sl, #8]
 8007a0c:	b324      	cbz	r4, 8007a58 <__ssprint_r+0xf4>
 8007a0e:	f8d6 b000 	ldr.w	fp, [r6]
 8007a12:	6874      	ldr	r4, [r6, #4]
 8007a14:	3608      	adds	r6, #8
 8007a16:	e7b4      	b.n	8007982 <__ssprint_r+0x1e>
 8007a18:	4627      	mov	r7, r4
 8007a1a:	46a1      	mov	r9, r4
 8007a1c:	e7e7      	b.n	80079ee <__ssprint_r+0x8a>
 8007a1e:	46b9      	mov	r9, r7
 8007a20:	e7e5      	b.n	80079ee <__ssprint_r+0x8a>
 8007a22:	4640      	mov	r0, r8
 8007a24:	f000 f8b0 	bl	8007b88 <_realloc_r>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	d1d5      	bne.n	80079da <__ssprint_r+0x76>
 8007a2e:	4640      	mov	r0, r8
 8007a30:	6929      	ldr	r1, [r5, #16]
 8007a32:	f7ff fb3f 	bl	80070b4 <_free_r>
 8007a36:	89aa      	ldrh	r2, [r5, #12]
 8007a38:	230c      	movs	r3, #12
 8007a3a:	f8c8 3000 	str.w	r3, [r8]
 8007a3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a42:	2300      	movs	r3, #0
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a48:	81aa      	strh	r2, [r5, #12]
 8007a4a:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a4e:	f8ca 3004 	str.w	r3, [sl, #4]
 8007a52:	b003      	add	sp, #12
 8007a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f8ca 4004 	str.w	r4, [sl, #4]
 8007a5e:	b003      	add	sp, #12
 8007a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a64 <_calloc_r>:
 8007a64:	b510      	push	{r4, lr}
 8007a66:	fb02 f101 	mul.w	r1, r2, r1
 8007a6a:	f7fc fc39 	bl	80042e0 <_malloc_r>
 8007a6e:	4604      	mov	r4, r0
 8007a70:	b170      	cbz	r0, 8007a90 <_calloc_r+0x2c>
 8007a72:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007a76:	f022 0203 	bic.w	r2, r2, #3
 8007a7a:	3a04      	subs	r2, #4
 8007a7c:	2a24      	cmp	r2, #36	; 0x24
 8007a7e:	d81c      	bhi.n	8007aba <_calloc_r+0x56>
 8007a80:	2a13      	cmp	r2, #19
 8007a82:	bf98      	it	ls
 8007a84:	4603      	movls	r3, r0
 8007a86:	d805      	bhi.n	8007a94 <_calloc_r+0x30>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	609a      	str	r2, [r3, #8]
 8007a90:	4620      	mov	r0, r4
 8007a92:	bd10      	pop	{r4, pc}
 8007a94:	2300      	movs	r3, #0
 8007a96:	2a1b      	cmp	r2, #27
 8007a98:	6003      	str	r3, [r0, #0]
 8007a9a:	6043      	str	r3, [r0, #4]
 8007a9c:	bf98      	it	ls
 8007a9e:	f100 0308 	addls.w	r3, r0, #8
 8007aa2:	d9f1      	bls.n	8007a88 <_calloc_r+0x24>
 8007aa4:	2a24      	cmp	r2, #36	; 0x24
 8007aa6:	6083      	str	r3, [r0, #8]
 8007aa8:	60c3      	str	r3, [r0, #12]
 8007aaa:	bf05      	ittet	eq
 8007aac:	6103      	streq	r3, [r0, #16]
 8007aae:	6143      	streq	r3, [r0, #20]
 8007ab0:	f100 0310 	addne.w	r3, r0, #16
 8007ab4:	f100 0318 	addeq.w	r3, r0, #24
 8007ab8:	e7e6      	b.n	8007a88 <_calloc_r+0x24>
 8007aba:	2100      	movs	r1, #0
 8007abc:	f7fc fec2 	bl	8004844 <memset>
 8007ac0:	4620      	mov	r0, r4
 8007ac2:	bd10      	pop	{r4, pc}

08007ac4 <memmove>:
 8007ac4:	4288      	cmp	r0, r1
 8007ac6:	b4f0      	push	{r4, r5, r6, r7}
 8007ac8:	d910      	bls.n	8007aec <memmove+0x28>
 8007aca:	188c      	adds	r4, r1, r2
 8007acc:	42a0      	cmp	r0, r4
 8007ace:	d20d      	bcs.n	8007aec <memmove+0x28>
 8007ad0:	1885      	adds	r5, r0, r2
 8007ad2:	1e53      	subs	r3, r2, #1
 8007ad4:	b142      	cbz	r2, 8007ae8 <memmove+0x24>
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	462a      	mov	r2, r5
 8007ada:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ae4:	1c5c      	adds	r4, r3, #1
 8007ae6:	d1f8      	bne.n	8007ada <memmove+0x16>
 8007ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8007aea:	4770      	bx	lr
 8007aec:	2a0f      	cmp	r2, #15
 8007aee:	d940      	bls.n	8007b72 <memmove+0xae>
 8007af0:	ea40 0301 	orr.w	r3, r0, r1
 8007af4:	079b      	lsls	r3, r3, #30
 8007af6:	d140      	bne.n	8007b7a <memmove+0xb6>
 8007af8:	f1a2 0710 	sub.w	r7, r2, #16
 8007afc:	093f      	lsrs	r7, r7, #4
 8007afe:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8007b02:	3610      	adds	r6, #16
 8007b04:	460c      	mov	r4, r1
 8007b06:	4603      	mov	r3, r0
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	601d      	str	r5, [r3, #0]
 8007b0c:	6865      	ldr	r5, [r4, #4]
 8007b0e:	605d      	str	r5, [r3, #4]
 8007b10:	68a5      	ldr	r5, [r4, #8]
 8007b12:	609d      	str	r5, [r3, #8]
 8007b14:	68e5      	ldr	r5, [r4, #12]
 8007b16:	3310      	adds	r3, #16
 8007b18:	f843 5c04 	str.w	r5, [r3, #-4]
 8007b1c:	42b3      	cmp	r3, r6
 8007b1e:	f104 0410 	add.w	r4, r4, #16
 8007b22:	d1f1      	bne.n	8007b08 <memmove+0x44>
 8007b24:	1c7b      	adds	r3, r7, #1
 8007b26:	f002 0c0f 	and.w	ip, r2, #15
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	f1bc 0f03 	cmp.w	ip, #3
 8007b30:	4419      	add	r1, r3
 8007b32:	4403      	add	r3, r0
 8007b34:	d923      	bls.n	8007b7e <memmove+0xba>
 8007b36:	460e      	mov	r6, r1
 8007b38:	461d      	mov	r5, r3
 8007b3a:	4664      	mov	r4, ip
 8007b3c:	f856 7b04 	ldr.w	r7, [r6], #4
 8007b40:	3c04      	subs	r4, #4
 8007b42:	2c03      	cmp	r4, #3
 8007b44:	f845 7b04 	str.w	r7, [r5], #4
 8007b48:	d8f8      	bhi.n	8007b3c <memmove+0x78>
 8007b4a:	f1ac 0404 	sub.w	r4, ip, #4
 8007b4e:	f024 0403 	bic.w	r4, r4, #3
 8007b52:	3404      	adds	r4, #4
 8007b54:	f002 0203 	and.w	r2, r2, #3
 8007b58:	4423      	add	r3, r4
 8007b5a:	4421      	add	r1, r4
 8007b5c:	2a00      	cmp	r2, #0
 8007b5e:	d0c3      	beq.n	8007ae8 <memmove+0x24>
 8007b60:	441a      	add	r2, r3
 8007b62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b66:	f803 4b01 	strb.w	r4, [r3], #1
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d1f9      	bne.n	8007b62 <memmove+0x9e>
 8007b6e:	bcf0      	pop	{r4, r5, r6, r7}
 8007b70:	4770      	bx	lr
 8007b72:	4603      	mov	r3, r0
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	d1f3      	bne.n	8007b60 <memmove+0x9c>
 8007b78:	e7b6      	b.n	8007ae8 <memmove+0x24>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	e7f0      	b.n	8007b60 <memmove+0x9c>
 8007b7e:	4662      	mov	r2, ip
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d1ed      	bne.n	8007b60 <memmove+0x9c>
 8007b84:	e7b0      	b.n	8007ae8 <memmove+0x24>
 8007b86:	bf00      	nop

08007b88 <_realloc_r>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	460c      	mov	r4, r1
 8007b8e:	b083      	sub	sp, #12
 8007b90:	4690      	mov	r8, r2
 8007b92:	4681      	mov	r9, r0
 8007b94:	2900      	cmp	r1, #0
 8007b96:	f000 8124 	beq.w	8007de2 <_realloc_r+0x25a>
 8007b9a:	f7fa f945 	bl	8001e28 <__malloc_lock>
 8007b9e:	f108 060b 	add.w	r6, r8, #11
 8007ba2:	2e16      	cmp	r6, #22
 8007ba4:	bf8c      	ite	hi
 8007ba6:	f026 0607 	bichi.w	r6, r6, #7
 8007baa:	2210      	movls	r2, #16
 8007bac:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8007bb0:	bf8d      	iteet	hi
 8007bb2:	0ff3      	lsrhi	r3, r6, #31
 8007bb4:	4616      	movls	r6, r2
 8007bb6:	2300      	movls	r3, #0
 8007bb8:	4632      	movhi	r2, r6
 8007bba:	4546      	cmp	r6, r8
 8007bbc:	bf38      	it	cc
 8007bbe:	f043 0301 	orrcc.w	r3, r3, #1
 8007bc2:	f02c 0503 	bic.w	r5, ip, #3
 8007bc6:	f1a4 0708 	sub.w	r7, r4, #8
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f040 810f 	bne.w	8007dee <_realloc_r+0x266>
 8007bd0:	4295      	cmp	r5, r2
 8007bd2:	db15      	blt.n	8007c00 <_realloc_r+0x78>
 8007bd4:	4660      	mov	r0, ip
 8007bd6:	1bab      	subs	r3, r5, r6
 8007bd8:	2b0f      	cmp	r3, #15
 8007bda:	f000 0c01 	and.w	ip, r0, #1
 8007bde:	f200 80c6 	bhi.w	8007d6e <_realloc_r+0x1e6>
 8007be2:	ea4c 0305 	orr.w	r3, ip, r5
 8007be6:	443d      	add	r5, r7
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	686b      	ldr	r3, [r5, #4]
 8007bec:	f043 0301 	orr.w	r3, r3, #1
 8007bf0:	606b      	str	r3, [r5, #4]
 8007bf2:	4648      	mov	r0, r9
 8007bf4:	f7fa f91c 	bl	8001e30 <__malloc_unlock>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	b003      	add	sp, #12
 8007bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c00:	f240 4aa4 	movw	sl, #1188	; 0x4a4
 8007c04:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8007c08:	1979      	adds	r1, r7, r5
 8007c0a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8007c0e:	4288      	cmp	r0, r1
 8007c10:	f000 80f2 	beq.w	8007df8 <_realloc_r+0x270>
 8007c14:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8007c18:	f02e 0b01 	bic.w	fp, lr, #1
 8007c1c:	448b      	add	fp, r1
 8007c1e:	f8db b004 	ldr.w	fp, [fp, #4]
 8007c22:	f01b 0f01 	tst.w	fp, #1
 8007c26:	bf1c      	itt	ne
 8007c28:	469e      	movne	lr, r3
 8007c2a:	4671      	movne	r1, lr
 8007c2c:	d054      	beq.n	8007cd8 <_realloc_r+0x150>
 8007c2e:	f01c 0f01 	tst.w	ip, #1
 8007c32:	f040 80ad 	bne.w	8007d90 <_realloc_r+0x208>
 8007c36:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007c3a:	ebc3 0b07 	rsb	fp, r3, r7
 8007c3e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007c42:	f023 0303 	bic.w	r3, r3, #3
 8007c46:	442b      	add	r3, r5
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d052      	beq.n	8007cf2 <_realloc_r+0x16a>
 8007c4c:	4281      	cmp	r1, r0
 8007c4e:	f000 811f 	beq.w	8007e90 <_realloc_r+0x308>
 8007c52:	449e      	add	lr, r3
 8007c54:	4596      	cmp	lr, r2
 8007c56:	db4c      	blt.n	8007cf2 <_realloc_r+0x16a>
 8007c58:	68cb      	ldr	r3, [r1, #12]
 8007c5a:	688a      	ldr	r2, [r1, #8]
 8007c5c:	465f      	mov	r7, fp
 8007c5e:	60d3      	str	r3, [r2, #12]
 8007c60:	609a      	str	r2, [r3, #8]
 8007c62:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007c66:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007c6a:	1f2a      	subs	r2, r5, #4
 8007c6c:	2a24      	cmp	r2, #36	; 0x24
 8007c6e:	60cb      	str	r3, [r1, #12]
 8007c70:	6099      	str	r1, [r3, #8]
 8007c72:	f200 8165 	bhi.w	8007f40 <_realloc_r+0x3b8>
 8007c76:	2a13      	cmp	r2, #19
 8007c78:	bf98      	it	ls
 8007c7a:	463b      	movls	r3, r7
 8007c7c:	d920      	bls.n	8007cc0 <_realloc_r+0x138>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	f8cb 3008 	str.w	r3, [fp, #8]
 8007c84:	6863      	ldr	r3, [r4, #4]
 8007c86:	2a1b      	cmp	r2, #27
 8007c88:	f8cb 300c 	str.w	r3, [fp, #12]
 8007c8c:	bf9c      	itt	ls
 8007c8e:	3408      	addls	r4, #8
 8007c90:	f10b 0310 	addls.w	r3, fp, #16
 8007c94:	d914      	bls.n	8007cc0 <_realloc_r+0x138>
 8007c96:	68a3      	ldr	r3, [r4, #8]
 8007c98:	f8cb 3010 	str.w	r3, [fp, #16]
 8007c9c:	68e3      	ldr	r3, [r4, #12]
 8007c9e:	2a24      	cmp	r2, #36	; 0x24
 8007ca0:	f8cb 3014 	str.w	r3, [fp, #20]
 8007ca4:	bf03      	ittte	eq
 8007ca6:	6923      	ldreq	r3, [r4, #16]
 8007ca8:	f8cb 3018 	streq.w	r3, [fp, #24]
 8007cac:	6962      	ldreq	r2, [r4, #20]
 8007cae:	3410      	addne	r4, #16
 8007cb0:	bf11      	iteee	ne
 8007cb2:	f10b 0318 	addne.w	r3, fp, #24
 8007cb6:	f10b 0320 	addeq.w	r3, fp, #32
 8007cba:	f8cb 201c 	streq.w	r2, [fp, #28]
 8007cbe:	3418      	addeq	r4, #24
 8007cc0:	6822      	ldr	r2, [r4, #0]
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	6862      	ldr	r2, [r4, #4]
 8007cc6:	605a      	str	r2, [r3, #4]
 8007cc8:	68a2      	ldr	r2, [r4, #8]
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	463c      	mov	r4, r7
 8007cce:	4675      	mov	r5, lr
 8007cd0:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007cd4:	465f      	mov	r7, fp
 8007cd6:	e77e      	b.n	8007bd6 <_realloc_r+0x4e>
 8007cd8:	f02e 0e03 	bic.w	lr, lr, #3
 8007cdc:	eb0e 0305 	add.w	r3, lr, r5
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	dba4      	blt.n	8007c2e <_realloc_r+0xa6>
 8007ce4:	68ca      	ldr	r2, [r1, #12]
 8007ce6:	6889      	ldr	r1, [r1, #8]
 8007ce8:	4660      	mov	r0, ip
 8007cea:	60ca      	str	r2, [r1, #12]
 8007cec:	461d      	mov	r5, r3
 8007cee:	6091      	str	r1, [r2, #8]
 8007cf0:	e771      	b.n	8007bd6 <_realloc_r+0x4e>
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	db4c      	blt.n	8007d90 <_realloc_r+0x208>
 8007cf6:	465f      	mov	r7, fp
 8007cf8:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007cfc:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007d00:	1f2a      	subs	r2, r5, #4
 8007d02:	2a24      	cmp	r2, #36	; 0x24
 8007d04:	60c1      	str	r1, [r0, #12]
 8007d06:	6088      	str	r0, [r1, #8]
 8007d08:	f200 80b4 	bhi.w	8007e74 <_realloc_r+0x2ec>
 8007d0c:	2a13      	cmp	r2, #19
 8007d0e:	bf98      	it	ls
 8007d10:	463a      	movls	r2, r7
 8007d12:	d920      	bls.n	8007d56 <_realloc_r+0x1ce>
 8007d14:	6821      	ldr	r1, [r4, #0]
 8007d16:	f8cb 1008 	str.w	r1, [fp, #8]
 8007d1a:	6861      	ldr	r1, [r4, #4]
 8007d1c:	2a1b      	cmp	r2, #27
 8007d1e:	f8cb 100c 	str.w	r1, [fp, #12]
 8007d22:	bf9c      	itt	ls
 8007d24:	3408      	addls	r4, #8
 8007d26:	f10b 0210 	addls.w	r2, fp, #16
 8007d2a:	d914      	bls.n	8007d56 <_realloc_r+0x1ce>
 8007d2c:	68a1      	ldr	r1, [r4, #8]
 8007d2e:	f8cb 1010 	str.w	r1, [fp, #16]
 8007d32:	68e1      	ldr	r1, [r4, #12]
 8007d34:	2a24      	cmp	r2, #36	; 0x24
 8007d36:	f8cb 1014 	str.w	r1, [fp, #20]
 8007d3a:	bf03      	ittte	eq
 8007d3c:	6922      	ldreq	r2, [r4, #16]
 8007d3e:	f8cb 2018 	streq.w	r2, [fp, #24]
 8007d42:	6961      	ldreq	r1, [r4, #20]
 8007d44:	3410      	addne	r4, #16
 8007d46:	bf11      	iteee	ne
 8007d48:	f10b 0218 	addne.w	r2, fp, #24
 8007d4c:	f10b 0220 	addeq.w	r2, fp, #32
 8007d50:	f8cb 101c 	streq.w	r1, [fp, #28]
 8007d54:	3418      	addeq	r4, #24
 8007d56:	6821      	ldr	r1, [r4, #0]
 8007d58:	6011      	str	r1, [r2, #0]
 8007d5a:	6861      	ldr	r1, [r4, #4]
 8007d5c:	6051      	str	r1, [r2, #4]
 8007d5e:	68a1      	ldr	r1, [r4, #8]
 8007d60:	6091      	str	r1, [r2, #8]
 8007d62:	463c      	mov	r4, r7
 8007d64:	461d      	mov	r5, r3
 8007d66:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007d6a:	465f      	mov	r7, fp
 8007d6c:	e733      	b.n	8007bd6 <_realloc_r+0x4e>
 8007d6e:	19b9      	adds	r1, r7, r6
 8007d70:	f043 0201 	orr.w	r2, r3, #1
 8007d74:	ea4c 0606 	orr.w	r6, ip, r6
 8007d78:	440b      	add	r3, r1
 8007d7a:	607e      	str	r6, [r7, #4]
 8007d7c:	604a      	str	r2, [r1, #4]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	f042 0201 	orr.w	r2, r2, #1
 8007d84:	3108      	adds	r1, #8
 8007d86:	605a      	str	r2, [r3, #4]
 8007d88:	4648      	mov	r0, r9
 8007d8a:	f7ff f993 	bl	80070b4 <_free_r>
 8007d8e:	e730      	b.n	8007bf2 <_realloc_r+0x6a>
 8007d90:	4641      	mov	r1, r8
 8007d92:	4648      	mov	r0, r9
 8007d94:	f7fc faa4 	bl	80042e0 <_malloc_r>
 8007d98:	4680      	mov	r8, r0
 8007d9a:	b1d8      	cbz	r0, 8007dd4 <_realloc_r+0x24c>
 8007d9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007da0:	f023 0201 	bic.w	r2, r3, #1
 8007da4:	443a      	add	r2, r7
 8007da6:	f1a0 0108 	sub.w	r1, r0, #8
 8007daa:	4291      	cmp	r1, r2
 8007dac:	f000 80c1 	beq.w	8007f32 <_realloc_r+0x3aa>
 8007db0:	1f2a      	subs	r2, r5, #4
 8007db2:	2a24      	cmp	r2, #36	; 0x24
 8007db4:	d868      	bhi.n	8007e88 <_realloc_r+0x300>
 8007db6:	2a13      	cmp	r2, #19
 8007db8:	bf9c      	itt	ls
 8007dba:	4603      	movls	r3, r0
 8007dbc:	4622      	movls	r2, r4
 8007dbe:	d83a      	bhi.n	8007e36 <_realloc_r+0x2ae>
 8007dc0:	6811      	ldr	r1, [r2, #0]
 8007dc2:	6019      	str	r1, [r3, #0]
 8007dc4:	6851      	ldr	r1, [r2, #4]
 8007dc6:	6059      	str	r1, [r3, #4]
 8007dc8:	6892      	ldr	r2, [r2, #8]
 8007dca:	609a      	str	r2, [r3, #8]
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4648      	mov	r0, r9
 8007dd0:	f7ff f970 	bl	80070b4 <_free_r>
 8007dd4:	4648      	mov	r0, r9
 8007dd6:	f7fa f82b 	bl	8001e30 <__malloc_unlock>
 8007dda:	4640      	mov	r0, r8
 8007ddc:	b003      	add	sp, #12
 8007dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de2:	4611      	mov	r1, r2
 8007de4:	b003      	add	sp, #12
 8007de6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dea:	f7fc ba79 	b.w	80042e0 <_malloc_r>
 8007dee:	230c      	movs	r3, #12
 8007df0:	f8c9 3000 	str.w	r3, [r9]
 8007df4:	2000      	movs	r0, #0
 8007df6:	e700      	b.n	8007bfa <_realloc_r+0x72>
 8007df8:	6843      	ldr	r3, [r0, #4]
 8007dfa:	f023 0e03 	bic.w	lr, r3, #3
 8007dfe:	f106 0110 	add.w	r1, r6, #16
 8007e02:	eb0e 0305 	add.w	r3, lr, r5
 8007e06:	428b      	cmp	r3, r1
 8007e08:	bfb8      	it	lt
 8007e0a:	4601      	movlt	r1, r0
 8007e0c:	f6ff af0f 	blt.w	8007c2e <_realloc_r+0xa6>
 8007e10:	4437      	add	r7, r6
 8007e12:	1b9b      	subs	r3, r3, r6
 8007e14:	f043 0301 	orr.w	r3, r3, #1
 8007e18:	f8ca 7008 	str.w	r7, [sl, #8]
 8007e1c:	607b      	str	r3, [r7, #4]
 8007e1e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	431e      	orrs	r6, r3
 8007e28:	4648      	mov	r0, r9
 8007e2a:	f844 6c04 	str.w	r6, [r4, #-4]
 8007e2e:	f7f9 ffff 	bl	8001e30 <__malloc_unlock>
 8007e32:	4620      	mov	r0, r4
 8007e34:	e6e1      	b.n	8007bfa <_realloc_r+0x72>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6003      	str	r3, [r0, #0]
 8007e3a:	6863      	ldr	r3, [r4, #4]
 8007e3c:	2a1b      	cmp	r2, #27
 8007e3e:	6043      	str	r3, [r0, #4]
 8007e40:	bf9c      	itt	ls
 8007e42:	f104 0208 	addls.w	r2, r4, #8
 8007e46:	f100 0308 	addls.w	r3, r0, #8
 8007e4a:	d9b9      	bls.n	8007dc0 <_realloc_r+0x238>
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	6083      	str	r3, [r0, #8]
 8007e50:	68e3      	ldr	r3, [r4, #12]
 8007e52:	2a24      	cmp	r2, #36	; 0x24
 8007e54:	60c3      	str	r3, [r0, #12]
 8007e56:	bf03      	ittte	eq
 8007e58:	6923      	ldreq	r3, [r4, #16]
 8007e5a:	6103      	streq	r3, [r0, #16]
 8007e5c:	6962      	ldreq	r2, [r4, #20]
 8007e5e:	f100 0310 	addne.w	r3, r0, #16
 8007e62:	bf09      	itett	eq
 8007e64:	6142      	streq	r2, [r0, #20]
 8007e66:	f104 0210 	addne.w	r2, r4, #16
 8007e6a:	f100 0318 	addeq.w	r3, r0, #24
 8007e6e:	f104 0218 	addeq.w	r2, r4, #24
 8007e72:	e7a5      	b.n	8007dc0 <_realloc_r+0x238>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4638      	mov	r0, r7
 8007e78:	461d      	mov	r5, r3
 8007e7a:	463c      	mov	r4, r7
 8007e7c:	f7ff fe22 	bl	8007ac4 <memmove>
 8007e80:	465f      	mov	r7, fp
 8007e82:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007e86:	e6a6      	b.n	8007bd6 <_realloc_r+0x4e>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	f7ff fe1b 	bl	8007ac4 <memmove>
 8007e8e:	e79d      	b.n	8007dcc <_realloc_r+0x244>
 8007e90:	eb0e 0c03 	add.w	ip, lr, r3
 8007e94:	f106 0110 	add.w	r1, r6, #16
 8007e98:	458c      	cmp	ip, r1
 8007e9a:	f6ff af2a 	blt.w	8007cf2 <_realloc_r+0x16a>
 8007e9e:	465f      	mov	r7, fp
 8007ea0:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007ea4:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007ea8:	1f2a      	subs	r2, r5, #4
 8007eaa:	2a24      	cmp	r2, #36	; 0x24
 8007eac:	60cb      	str	r3, [r1, #12]
 8007eae:	6099      	str	r1, [r3, #8]
 8007eb0:	d850      	bhi.n	8007f54 <_realloc_r+0x3cc>
 8007eb2:	2a13      	cmp	r2, #19
 8007eb4:	bf98      	it	ls
 8007eb6:	463b      	movls	r3, r7
 8007eb8:	d920      	bls.n	8007efc <_realloc_r+0x374>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f8cb 3008 	str.w	r3, [fp, #8]
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	2a1b      	cmp	r2, #27
 8007ec4:	f8cb 300c 	str.w	r3, [fp, #12]
 8007ec8:	bf9c      	itt	ls
 8007eca:	3408      	addls	r4, #8
 8007ecc:	f10b 0310 	addls.w	r3, fp, #16
 8007ed0:	d914      	bls.n	8007efc <_realloc_r+0x374>
 8007ed2:	68a3      	ldr	r3, [r4, #8]
 8007ed4:	f8cb 3010 	str.w	r3, [fp, #16]
 8007ed8:	68e3      	ldr	r3, [r4, #12]
 8007eda:	2a24      	cmp	r2, #36	; 0x24
 8007edc:	f8cb 3014 	str.w	r3, [fp, #20]
 8007ee0:	bf03      	ittte	eq
 8007ee2:	6923      	ldreq	r3, [r4, #16]
 8007ee4:	f8cb 3018 	streq.w	r3, [fp, #24]
 8007ee8:	6962      	ldreq	r2, [r4, #20]
 8007eea:	3410      	addne	r4, #16
 8007eec:	bf11      	iteee	ne
 8007eee:	f10b 0318 	addne.w	r3, fp, #24
 8007ef2:	f10b 0320 	addeq.w	r3, fp, #32
 8007ef6:	f8cb 201c 	streq.w	r2, [fp, #28]
 8007efa:	3418      	addeq	r4, #24
 8007efc:	6822      	ldr	r2, [r4, #0]
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	6862      	ldr	r2, [r4, #4]
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	68a2      	ldr	r2, [r4, #8]
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	eb0b 0306 	add.w	r3, fp, r6
 8007f0c:	ebc6 020c 	rsb	r2, r6, ip
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	f8ca 3008 	str.w	r3, [sl, #8]
 8007f18:	605a      	str	r2, [r3, #4]
 8007f1a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	431e      	orrs	r6, r3
 8007f24:	4648      	mov	r0, r9
 8007f26:	f8cb 6004 	str.w	r6, [fp, #4]
 8007f2a:	f7f9 ff81 	bl	8001e30 <__malloc_unlock>
 8007f2e:	4638      	mov	r0, r7
 8007f30:	e663      	b.n	8007bfa <_realloc_r+0x72>
 8007f32:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007f36:	f022 0203 	bic.w	r2, r2, #3
 8007f3a:	4415      	add	r5, r2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	e64a      	b.n	8007bd6 <_realloc_r+0x4e>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4638      	mov	r0, r7
 8007f44:	4675      	mov	r5, lr
 8007f46:	463c      	mov	r4, r7
 8007f48:	f7ff fdbc 	bl	8007ac4 <memmove>
 8007f4c:	465f      	mov	r7, fp
 8007f4e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007f52:	e640      	b.n	8007bd6 <_realloc_r+0x4e>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4638      	mov	r0, r7
 8007f58:	f8cd c004 	str.w	ip, [sp, #4]
 8007f5c:	f7ff fdb2 	bl	8007ac4 <memmove>
 8007f60:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007f64:	e7d0      	b.n	8007f08 <_realloc_r+0x380>
 8007f66:	bf00      	nop
 8007f68:	54204850 	.word	0x54204850
 8007f6c:	206b7361 	.word	0x206b7361
 8007f70:	6e75614c 	.word	0x6e75614c
 8007f74:	64656863 	.word	0x64656863
 8007f78:	0d2e2e2e 	.word	0x0d2e2e2e
 8007f7c:	0000000a 	.word	0x0000000a
 8007f80:	75716341 	.word	0x75716341
 8007f84:	64657269 	.word	0x64657269
 8007f88:	74756d20 	.word	0x74756d20
 8007f8c:	66207865 	.word	0x66207865
 8007f90:	5020726f 	.word	0x5020726f
 8007f94:	74654d48 	.word	0x74654d48
 8007f98:	2e2e7265 	.word	0x2e2e7265
 8007f9c:	000a0d2e 	.word	0x000a0d2e
 8007fa0:	52204850 	.word	0x52204850
 8007fa4:	00646165 	.word	0x00646165
 8007fa8:	56204850 	.word	0x56204850
 8007fac:	45554c41 	.word	0x45554c41
 8007fb0:	6425203a 	.word	0x6425203a
 8007fb4:	00000a0d 	.word	0x00000a0d
 8007fb8:	69646441 	.word	0x69646441
 8007fbc:	5020676e 	.word	0x5020676e
 8007fc0:	70552048 	.word	0x70552048
 8007fc4:	0d2e2e2e 	.word	0x0d2e2e2e
 8007fc8:	0000000a 	.word	0x0000000a
 8007fcc:	69646441 	.word	0x69646441
 8007fd0:	5020676e 	.word	0x5020676e
 8007fd4:	4f442048 	.word	0x4f442048
 8007fd8:	2e2e6e77 	.word	0x2e2e6e77
 8007fdc:	000a0d2e 	.word	0x000a0d2e
 8007fe0:	62617453 	.word	0x62617453
 8007fe4:	7a696c69 	.word	0x7a696c69
 8007fe8:	50206465 	.word	0x50206465
 8007fec:	2e2e2e48 	.word	0x2e2e2e48
 8007ff0:	00000a0d 	.word	0x00000a0d
 8007ff4:	4f430a0d 	.word	0x4f430a0d
 8007ff8:	253a4c4f 	.word	0x253a4c4f
 8007ffc:	000a0d64 	.word	0x000a0d64
 8008000:	41535576 	.word	0x41535576
 8008004:	635f5452 	.word	0x635f5452
 8008008:	616d6d6f 	.word	0x616d6d6f
 800800c:	685f646e 	.word	0x685f646e
 8008010:	6c646e61 	.word	0x6c646e61
 8008014:	00007265 	.word	0x00007265
 8008018:	74696e49 	.word	0x74696e49
 800801c:	20434120 	.word	0x20434120
 8008020:	74737953 	.word	0x74737953
 8008024:	2e2e6d65 	.word	0x2e2e6d65
 8008028:	0000002e 	.word	0x0000002e
 800802c:	0d4b4f20 	.word	0x0d4b4f20
 8008030:	0000000a 	.word	0x0000000a
 8008034:	696e4920 	.word	0x696e4920
 8008038:	79482074 	.word	0x79482074
 800803c:	706f7264 	.word	0x706f7264
 8008040:	63696e6f 	.word	0x63696e6f
 8008044:	73795320 	.word	0x73795320
 8008048:	2e6d6574 	.word	0x2e6d6574
 800804c:	00002e2e 	.word	0x00002e2e
 8008050:	0d6b4f20 	.word	0x0d6b4f20
 8008054:	0000000a 	.word	0x0000000a
 8008058:	64616552 	.word	0x64616552
 800805c:	20676e69 	.word	0x20676e69
 8008060:	72746c55 	.word	0x72746c55
 8008064:	6e6f7361 	.word	0x6e6f7361
 8008068:	44206369 	.word	0x44206369
 800806c:	61747369 	.word	0x61747369
 8008070:	2065636e 	.word	0x2065636e
 8008074:	736e6553 	.word	0x736e6553
 8008078:	2e2e726f 	.word	0x2e2e726f
 800807c:	000a0d2e 	.word	0x000a0d2e
 8008080:	69440a0d 	.word	0x69440a0d
 8008084:	6e617473 	.word	0x6e617473
 8008088:	203a6563 	.word	0x203a6563
 800808c:	00000000 	.word	0x00000000
 8008090:	4b435546 	.word	0x4b435546
 8008094:	00000000 	.word	0x00000000
 8008098:	6f6f420a 	.word	0x6f6f420a
 800809c:	676e6974 	.word	0x676e6974
 80080a0:	2e707520 	.word	0x2e707520
 80080a4:	0a0d2e2e 	.word	0x0a0d2e2e
 80080a8:	00000000 	.word	0x00000000
 80080ac:	656c6469 	.word	0x656c6469
 80080b0:	696c625f 	.word	0x696c625f
 80080b4:	00796b6e 	.word	0x00796b6e
 80080b8:	746e4976 	.word	0x746e4976
 80080bc:	75727265 	.word	0x75727265
 80080c0:	69547470 	.word	0x69547470
 80080c4:	0072656d 	.word	0x0072656d
 80080c8:	636e4976 	.word	0x636e4976
 80080cc:	656d6572 	.word	0x656d6572
 80080d0:	6144746e 	.word	0x6144746e
 80080d4:	00000079 	.word	0x00000079
 80080d8:	4b4f4f4c 	.word	0x4b4f4f4c
 80080dc:	20544120 	.word	0x20544120
 80080e0:	454e494c 	.word	0x454e494c
 80080e4:	20383120 	.word	0x20383120
 80080e8:	20524f46 	.word	0x20524f46
 80080ec:	4f444f54 	.word	0x4f444f54
 80080f0:	2d0a0d21 	.word	0x2d0a0d21
 80080f4:	2d2d2d2d 	.word	0x2d2d2d2d
 80080f8:	2d2d2d2d 	.word	0x2d2d2d2d
 80080fc:	2d2d2d2d 	.word	0x2d2d2d2d
 8008100:	2d2d2d2d 	.word	0x2d2d2d2d
 8008104:	2d2d2d2d 	.word	0x2d2d2d2d
 8008108:	0d2d2d2d 	.word	0x0d2d2d2d
 800810c:	000a0d0a 	.word	0x000a0d0a
 8008110:	00485076 	.word	0x00485076
 8008114:	41535576 	.word	0x41535576
 8008118:	705f5452 	.word	0x705f5452
 800811c:	00737475 	.word	0x00737475
 8008120:	4f525245 	.word	0x4f525245
 8008124:	33383452 	.word	0x33383452
 8008128:	00000a0d 	.word	0x00000a0d
 800812c:	4e495250 	.word	0x4e495250
 8008130:	474e4954 	.word	0x474e4954
 8008134:	58454e20 	.word	0x58454e20
 8008138:	494c2054 	.word	0x494c2054
 800813c:	203a454e 	.word	0x203a454e
 8008140:	00000000 	.word	0x00000000
 8008144:	6d6d6f43 	.word	0x6d6d6f43
 8008148:	3a646e61 	.word	0x3a646e61
 800814c:	00000020 	.word	0x00000020
 8008150:	7265766f 	.word	0x7265766f
 8008154:	77656976 	.word	0x77656976
 8008158:	0000000d 	.word	0x0000000d
 800815c:	626f277b 	.word	0x626f277b
 8008160:	7463656a 	.word	0x7463656a
 8008164:	7079745f 	.word	0x7079745f
 8008168:	203a2765 	.word	0x203a2765
 800816c:	47455227 	.word	0x47455227
 8008170:	5f454d49 	.word	0x5f454d49
 8008174:	2c274850 	.word	0x2c274850
 8008178:	656d2720 	.word	0x656d2720
 800817c:	646f6874 	.word	0x646f6874
 8008180:	27203a27 	.word	0x27203a27
 8008184:	27746573 	.word	0x27746573
 8008188:	6527202c 	.word	0x6527202c
 800818c:	726f7272 	.word	0x726f7272
 8008190:	64253a27 	.word	0x64253a27
 8008194:	6f27202c 	.word	0x6f27202c
 8008198:	63656a62 	.word	0x63656a62
 800819c:	64695f74 	.word	0x64695f74
 80081a0:	64253a27 	.word	0x64253a27
 80081a4:	000a0d7d 	.word	0x000a0d7d
 80081a8:	626f277b 	.word	0x626f277b
 80081ac:	7463656a 	.word	0x7463656a
 80081b0:	7079745f 	.word	0x7079745f
 80081b4:	203a2765 	.word	0x203a2765
 80081b8:	41545327 	.word	0x41545327
 80081bc:	2c274547 	.word	0x2c274547
 80081c0:	656d2720 	.word	0x656d2720
 80081c4:	646f6874 	.word	0x646f6874
 80081c8:	27203a27 	.word	0x27203a27
 80081cc:	27746573 	.word	0x27746573
 80081d0:	6527202c 	.word	0x6527202c
 80081d4:	726f7272 	.word	0x726f7272
 80081d8:	64253a27 	.word	0x64253a27
 80081dc:	6f27202c 	.word	0x6f27202c
 80081e0:	63656a62 	.word	0x63656a62
 80081e4:	64695f74 	.word	0x64695f74
 80081e8:	64253a27 	.word	0x64253a27
 80081ec:	000a0d7d 	.word	0x000a0d7d
 80081f0:	49474552 	.word	0x49474552
 80081f4:	505f454d 	.word	0x505f454d
 80081f8:	00000348 	.word	0x00000348
 80081fc:	47415453 	.word	0x47415453
 8008200:	00000345 	.word	0x00000345
 8008204:	49474552 	.word	0x49474552
 8008208:	4c5f454d 	.word	0x4c5f454d
 800820c:	54484749 	.word	0x54484749
 8008210:	03474e49 	.word	0x03474e49
 8008214:	00000000 	.word	0x00000000
 8008218:	626f277b 	.word	0x626f277b
 800821c:	7463656a 	.word	0x7463656a
 8008220:	7079745f 	.word	0x7079745f
 8008224:	203a2765 	.word	0x203a2765
 8008228:	202c2727 	.word	0x202c2727
 800822c:	6874656d 	.word	0x6874656d
 8008230:	203a646f 	.word	0x203a646f
 8008234:	74657327 	.word	0x74657327
 8008238:	65202c27 	.word	0x65202c27
 800823c:	726f7272 	.word	0x726f7272
 8008240:	3031203a 	.word	0x3031203a
 8008244:	6f27202c 	.word	0x6f27202c
 8008248:	63656a62 	.word	0x63656a62
 800824c:	64695f74 	.word	0x64695f74
 8008250:	2d203a27 	.word	0x2d203a27
 8008254:	0a0d7d31 	.word	0x0a0d7d31
 8008258:	00000000 	.word	0x00000000
 800825c:	6f727245 	.word	0x6f727245
 8008260:	49203a72 	.word	0x49203a72
 8008264:	726f636e 	.word	0x726f636e
 8008268:	74636572 	.word	0x74636572
 800826c:	47455220 	.word	0x47455220
 8008270:	5f454d49 	.word	0x5f454d49
 8008274:	69204850 	.word	0x69204850
 8008278:	000a0d64 	.word	0x000a0d64
 800827c:	55424544 	.word	0x55424544
 8008280:	44203a47 	.word	0x44203a47
 8008284:	54454c45 	.word	0x54454c45
 8008288:	20474e49 	.word	0x20474e49
 800828c:	49474552 	.word	0x49474552
 8008290:	495f454d 	.word	0x495f454d
 8008294:	64252044 	.word	0x64252044
 8008298:	00000a0d 	.word	0x00000a0d
 800829c:	6f727245 	.word	0x6f727245
 80082a0:	49203a72 	.word	0x49203a72
 80082a4:	726f636e 	.word	0x726f636e
 80082a8:	74636572 	.word	0x74636572
 80082ac:	61747320 	.word	0x61747320
 80082b0:	69206567 	.word	0x69206567
 80082b4:	000a0d64 	.word	0x000a0d64
 80082b8:	63637553 	.word	0x63637553
 80082bc:	75667365 	.word	0x75667365
 80082c0:	20796c6c 	.word	0x20796c6c
 80082c4:	656c6564 	.word	0x656c6564
 80082c8:	20646574 	.word	0x20646574
 80082cc:	67617473 	.word	0x67617473
 80082d0:	64692065 	.word	0x64692065
 80082d4:	6425203a 	.word	0x6425203a
 80082d8:	00000a0d 	.word	0x00000a0d
 80082dc:	4c4f4f43 	.word	0x4c4f4f43
 80082e0:	00000a0d 	.word	0x00000a0d
 80082e4:	6f727245 	.word	0x6f727245
 80082e8:	55203a72 	.word	0x55203a72
 80082ec:	6f6e6b6e 	.word	0x6f6e6b6e
 80082f0:	4f206e77 	.word	0x4f206e77
 80082f4:	63656a62 	.word	0x63656a62
 80082f8:	25272074 	.word	0x25272074
 80082fc:	0a0d2773 	.word	0x0a0d2773
 8008300:	00000000 	.word	0x00000000
 8008304:	6469277b 	.word	0x6469277b
 8008308:	25203a27 	.word	0x25203a27
 800830c:	27202c64 	.word	0x27202c64
 8008310:	676e656c 	.word	0x676e656c
 8008314:	3a276874 	.word	0x3a276874
 8008318:	2c642520 	.word	0x2c642520
 800831c:	726f2720 	.word	0x726f2720
 8008320:	27726564 	.word	0x27726564
 8008324:	2c64253a 	.word	0x2c64253a
 8008328:	68702720 	.word	0x68702720
 800832c:	2764695f 	.word	0x2764695f
 8008330:	6425203a 	.word	0x6425203a
 8008334:	6c27202c 	.word	0x6c27202c
 8008338:	74686769 	.word	0x74686769
 800833c:	5f676e69 	.word	0x5f676e69
 8008340:	3a276469 	.word	0x3a276469
 8008344:	202c6425 	.word	0x202c6425
 8008348:	69737527 	.word	0x69737527
 800834c:	3a27676e 	.word	0x3a27676e
 8008350:	0d7d6425 	.word	0x0d7d6425
 8008354:	0000000a 	.word	0x0000000a
 8008358:	6469277b 	.word	0x6469277b
 800835c:	25203a27 	.word	0x25203a27
 8008360:	27202c64 	.word	0x27202c64
 8008364:	3a276870 	.word	0x3a276870
 8008368:	2c642520 	.word	0x2c642520
 800836c:	65642720 	.word	0x65642720
 8008370:	2779616c 	.word	0x2779616c
 8008374:	6425203a 	.word	0x6425203a
 8008378:	000a0d7d 	.word	0x000a0d7d
 800837c:	6f727245 	.word	0x6f727245
 8008380:	49203a72 	.word	0x49203a72
 8008384:	6c61766e 	.word	0x6c61766e
 8008388:	72206469 	.word	0x72206469
 800838c:	6d696765 	.word	0x6d696765
 8008390:	68705f65 	.word	0x68705f65
 8008394:	0d64695f 	.word	0x0d64695f
 8008398:	0000000a 	.word	0x0000000a
 800839c:	6f727245 	.word	0x6f727245
 80083a0:	49203a72 	.word	0x49203a72
 80083a4:	6c61766e 	.word	0x6c61766e
 80083a8:	73206469 	.word	0x73206469
 80083ac:	65676174 	.word	0x65676174
 80083b0:	0d64695f 	.word	0x0d64695f
 80083b4:	0000000a 	.word	0x0000000a
 80083b8:	626f277b 	.word	0x626f277b
 80083bc:	7463656a 	.word	0x7463656a
 80083c0:	7079745f 	.word	0x7079745f
 80083c4:	203a2765 	.word	0x203a2765
 80083c8:	4f4c4327 	.word	0x4f4c4327
 80083cc:	2c274b43 	.word	0x2c274b43
 80083d0:	656d2720 	.word	0x656d2720
 80083d4:	646f6874 	.word	0x646f6874
 80083d8:	27203a27 	.word	0x27203a27
 80083dc:	666e6f63 	.word	0x666e6f63
 80083e0:	2c276769 	.word	0x2c276769
 80083e4:	72652720 	.word	0x72652720
 80083e8:	27726f72 	.word	0x27726f72
 80083ec:	2c75253a 	.word	0x2c75253a
 80083f0:	253d6820 	.word	0x253d6820
 80083f4:	6d202c64 	.word	0x6d202c64
 80083f8:	2c64253d 	.word	0x2c64253d
 80083fc:	253d7320 	.word	0x253d7320
 8008400:	0a0d7d64 	.word	0x0a0d7d64
 8008404:	00000000 	.word	0x00000000
 8008408:	434f4c43 	.word	0x434f4c43
 800840c:	0000034b 	.word	0x0000034b
 8008410:	03746567 	.word	0x03746567
 8008414:	00000000 	.word	0x00000000
 8008418:	03746573 	.word	0x03746573
 800841c:	00000000 	.word	0x00000000
 8008420:	036c6564 	.word	0x036c6564
 8008424:	00000000 	.word	0x00000000
 8008428:	666e6f63 	.word	0x666e6f63
 800842c:	00036769 	.word	0x00036769
 8008430:	656d277b 	.word	0x656d277b
 8008434:	646f6874 	.word	0x646f6874
 8008438:	27203a27 	.word	0x27203a27
 800843c:	27202c27 	.word	0x27202c27
 8008440:	6f727265 	.word	0x6f727265
 8008444:	203a2772 	.word	0x203a2772
 8008448:	0a0d7d39 	.word	0x0a0d7d39
 800844c:	00000000 	.word	0x00000000
 8008450:	20207525 	.word	0x20207525
 8008454:	20206325 	.word	0x20206325
 8008458:	36312d25 	.word	0x36312d25
 800845c:	20202073 	.word	0x20202073
 8008460:	20202020 	.word	0x20202020
 8008464:	30202020 	.word	0x30202020
 8008468:	30202020 	.word	0x30202020
 800846c:	20202525 	.word	0x20202525
 8008470:	0d753525 	.word	0x0d753525
 8008474:	0000000a 	.word	0x0000000a
 8008478:	20207525 	.word	0x20207525
 800847c:	20206325 	.word	0x20206325
 8008480:	36312d25 	.word	0x36312d25
 8008484:	31252073 	.word	0x31252073
 8008488:	25207530 	.word	0x25207530
 800848c:	25257533 	.word	0x25257533
 8008490:	35252020 	.word	0x35252020
 8008494:	000a0d75 	.word	0x000a0d75
 8008498:	20207525 	.word	0x20207525
 800849c:	20206325 	.word	0x20206325
 80084a0:	36312d25 	.word	0x36312d25
 80084a4:	31252073 	.word	0x31252073
 80084a8:	20207530 	.word	0x20207530
 80084ac:	2525313c 	.word	0x2525313c
 80084b0:	35252020 	.word	0x35252020
 80084b4:	000a0d75 	.word	0x000a0d75
 80084b8:	454c4449 	.word	0x454c4449
 80084bc:	00000000 	.word	0x00000000
 80084c0:	00000043 	.word	0x00000043

080084c4 <_global_impure_ptr>:
 80084c4:	20000078                                x.. 

080084c8 <zeroes.6760>:
 80084c8:	30303030 30303030 30303030 30303030     0000000000000000
 80084d8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 80084e8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 80084f8:	00000000 33323130 37363534 62613938     ....0123456789ab
 8008508:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8008518:	00000030                                0...

0800851c <blanks.6759>:
 800851c:	20202020 20202020 20202020 20202020                     
 800852c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800853c:	49534f50 00000058 00000000              POSIX.......

08008548 <__mprec_tens>:
 8008548:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008558:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8008568:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8008578:	00000000 412e8480 00000000 416312d0     .......A......cA
 8008588:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8008598:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80085a8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80085b8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 80085c8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 80085d8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 80085e8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 80085f8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008608:	79d99db4 44ea7843                       ...yCx.D

08008610 <__mprec_bigtens>:
 8008610:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008620:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008630:	7f73bf3c 75154fdd                       <.s..O.u

08008638 <p05.5266>:
 8008638:	00000005 00000019 0000007d              ........}...

08008644 <_init>:
 8008644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008646:	bf00      	nop
 8008648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800864a:	bc08      	pop	{r3}
 800864c:	469e      	mov	lr, r3
 800864e:	4770      	bx	lr

08008650 <_fini>:
 8008650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008652:	bf00      	nop
 8008654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008656:	bc08      	pop	{r3}
 8008658:	469e      	mov	lr, r3
 800865a:	4770      	bx	lr
