
obj/app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008414  08000188  08000188  00008188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  0800859c  0800859c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080085a4  080085a4  000105a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080085ac  080085ac  000105ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000008e4  20000000  080085b0  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005f0  200008e8  08008e94  000188e8  2**3
                  ALLOC
  7 ._user_heap_stack 00000400  20000ed8  08008e94  00018ed8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000188e4  2**0
                  CONTENTS, READONLY
  9 .comment      0000001f  00000000  00000000  00018912  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d30d  00000000  00000000  00018931  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005165  00000000  00000000  00035c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000136a0  00000000  00000000  0003ada3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001348  00000000  00000000  0004e448  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000014e0  00000000  00000000  0004f790  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  00010b4c  00000000  00000000  00050c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000a4f3  00000000  00000000  000617bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0006381e  00000000  00000000  0006bcaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_frame  00003580  00000000  00000000  000cf4d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f640 00e4 	movw	r0, #2276	; 0x8e4
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	200008e7 	.word	0x200008e7

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80001b6:	f640 03e4 	movw	r3, #2276	; 0x8e4
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f640 04e8 	movw	r4, #2280	; 0x8e8
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f248 5084 	movw	r0, #34180	; 0x8584
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f248 5084 	movw	r0, #34180	; 0x8584
 8000220:	f640 01ec 	movw	r1, #2284	; 0x8ec
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <memcpy>:
 8000250:	4684      	mov	ip, r0
 8000252:	ea41 0300 	orr.w	r3, r1, r0
 8000256:	f013 0303 	ands.w	r3, r3, #3
 800025a:	d16d      	bne.n	8000338 <memcpy+0xe8>
 800025c:	3a40      	subs	r2, #64	; 0x40
 800025e:	d341      	bcc.n	80002e4 <memcpy+0x94>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	f851 3b04 	ldr.w	r3, [r1], #4
 8000294:	f840 3b04 	str.w	r3, [r0], #4
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002bc:	f840 3b04 	str.w	r3, [r0], #4
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002cc:	f840 3b04 	str.w	r3, [r0], #4
 80002d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d4:	f840 3b04 	str.w	r3, [r0], #4
 80002d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002dc:	f840 3b04 	str.w	r3, [r0], #4
 80002e0:	3a40      	subs	r2, #64	; 0x40
 80002e2:	d2bd      	bcs.n	8000260 <memcpy+0x10>
 80002e4:	3230      	adds	r2, #48	; 0x30
 80002e6:	d311      	bcc.n	800030c <memcpy+0xbc>
 80002e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ec:	f840 3b04 	str.w	r3, [r0], #4
 80002f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f4:	f840 3b04 	str.w	r3, [r0], #4
 80002f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002fc:	f840 3b04 	str.w	r3, [r0], #4
 8000300:	f851 3b04 	ldr.w	r3, [r1], #4
 8000304:	f840 3b04 	str.w	r3, [r0], #4
 8000308:	3a10      	subs	r2, #16
 800030a:	d2ed      	bcs.n	80002e8 <memcpy+0x98>
 800030c:	320c      	adds	r2, #12
 800030e:	d305      	bcc.n	800031c <memcpy+0xcc>
 8000310:	f851 3b04 	ldr.w	r3, [r1], #4
 8000314:	f840 3b04 	str.w	r3, [r0], #4
 8000318:	3a04      	subs	r2, #4
 800031a:	d2f9      	bcs.n	8000310 <memcpy+0xc0>
 800031c:	3204      	adds	r2, #4
 800031e:	d008      	beq.n	8000332 <memcpy+0xe2>
 8000320:	07d2      	lsls	r2, r2, #31
 8000322:	bf1c      	itt	ne
 8000324:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000328:	f800 3b01 	strbne.w	r3, [r0], #1
 800032c:	d301      	bcc.n	8000332 <memcpy+0xe2>
 800032e:	880b      	ldrh	r3, [r1, #0]
 8000330:	8003      	strh	r3, [r0, #0]
 8000332:	4660      	mov	r0, ip
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	2a08      	cmp	r2, #8
 800033a:	d313      	bcc.n	8000364 <memcpy+0x114>
 800033c:	078b      	lsls	r3, r1, #30
 800033e:	d08d      	beq.n	800025c <memcpy+0xc>
 8000340:	f010 0303 	ands.w	r3, r0, #3
 8000344:	d08a      	beq.n	800025c <memcpy+0xc>
 8000346:	f1c3 0304 	rsb	r3, r3, #4
 800034a:	1ad2      	subs	r2, r2, r3
 800034c:	07db      	lsls	r3, r3, #31
 800034e:	bf1c      	itt	ne
 8000350:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000354:	f800 3b01 	strbne.w	r3, [r0], #1
 8000358:	d380      	bcc.n	800025c <memcpy+0xc>
 800035a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800035e:	f820 3b02 	strh.w	r3, [r0], #2
 8000362:	e77b      	b.n	800025c <memcpy+0xc>
 8000364:	3a04      	subs	r2, #4
 8000366:	d3d9      	bcc.n	800031c <memcpy+0xcc>
 8000368:	3a01      	subs	r2, #1
 800036a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800036e:	f800 3b01 	strb.w	r3, [r0], #1
 8000372:	d2f9      	bcs.n	8000368 <memcpy+0x118>
 8000374:	780b      	ldrb	r3, [r1, #0]
 8000376:	7003      	strb	r3, [r0, #0]
 8000378:	784b      	ldrb	r3, [r1, #1]
 800037a:	7043      	strb	r3, [r0, #1]
 800037c:	788b      	ldrb	r3, [r1, #2]
 800037e:	7083      	strb	r3, [r0, #2]
 8000380:	4660      	mov	r0, ip
 8000382:	4770      	bx	lr

08000384 <__aeabi_drsub>:
 8000384:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000388:	e002      	b.n	8000390 <__adddf3>
 800038a:	bf00      	nop

0800038c <__aeabi_dsub>:
 800038c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000390 <__adddf3>:
 8000390:	b530      	push	{r4, r5, lr}
 8000392:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000396:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	bf1f      	itttt	ne
 80003a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b6:	f000 80e2 	beq.w	800057e <__adddf3+0x1ee>
 80003ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003c2:	bfb8      	it	lt
 80003c4:	426d      	neglt	r5, r5
 80003c6:	dd0c      	ble.n	80003e2 <__adddf3+0x52>
 80003c8:	442c      	add	r4, r5
 80003ca:	ea80 0202 	eor.w	r2, r0, r2
 80003ce:	ea81 0303 	eor.w	r3, r1, r3
 80003d2:	ea82 0000 	eor.w	r0, r2, r0
 80003d6:	ea83 0101 	eor.w	r1, r3, r1
 80003da:	ea80 0202 	eor.w	r2, r0, r2
 80003de:	ea81 0303 	eor.w	r3, r1, r3
 80003e2:	2d36      	cmp	r5, #54	; 0x36
 80003e4:	bf88      	it	hi
 80003e6:	bd30      	pophi	{r4, r5, pc}
 80003e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x70>
 80003fa:	4240      	negs	r0, r0
 80003fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000400:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000404:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000408:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800040c:	d002      	beq.n	8000414 <__adddf3+0x84>
 800040e:	4252      	negs	r2, r2
 8000410:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000414:	ea94 0f05 	teq	r4, r5
 8000418:	f000 80a7 	beq.w	800056a <__adddf3+0x1da>
 800041c:	f1a4 0401 	sub.w	r4, r4, #1
 8000420:	f1d5 0e20 	rsbs	lr, r5, #32
 8000424:	db0d      	blt.n	8000442 <__adddf3+0xb2>
 8000426:	fa02 fc0e 	lsl.w	ip, r2, lr
 800042a:	fa22 f205 	lsr.w	r2, r2, r5
 800042e:	1880      	adds	r0, r0, r2
 8000430:	f141 0100 	adc.w	r1, r1, #0
 8000434:	fa03 f20e 	lsl.w	r2, r3, lr
 8000438:	1880      	adds	r0, r0, r2
 800043a:	fa43 f305 	asr.w	r3, r3, r5
 800043e:	4159      	adcs	r1, r3
 8000440:	e00e      	b.n	8000460 <__adddf3+0xd0>
 8000442:	f1a5 0520 	sub.w	r5, r5, #32
 8000446:	f10e 0e20 	add.w	lr, lr, #32
 800044a:	2a01      	cmp	r2, #1
 800044c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000450:	bf28      	it	cs
 8000452:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	18c0      	adds	r0, r0, r3
 800045c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	d507      	bpl.n	8000476 <__adddf3+0xe6>
 8000466:	f04f 0e00 	mov.w	lr, #0
 800046a:	f1dc 0c00 	rsbs	ip, ip, #0
 800046e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000472:	eb6e 0101 	sbc.w	r1, lr, r1
 8000476:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800047a:	d31b      	bcc.n	80004b4 <__adddf3+0x124>
 800047c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000480:	d30c      	bcc.n	800049c <__adddf3+0x10c>
 8000482:	0849      	lsrs	r1, r1, #1
 8000484:	ea5f 0030 	movs.w	r0, r0, rrx
 8000488:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800048c:	f104 0401 	add.w	r4, r4, #1
 8000490:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000494:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000498:	f080 809a 	bcs.w	80005d0 <__adddf3+0x240>
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	bf08      	it	eq
 80004a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a6:	f150 0000 	adcs.w	r0, r0, #0
 80004aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ae:	ea41 0105 	orr.w	r1, r1, r5
 80004b2:	bd30      	pop	{r4, r5, pc}
 80004b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b8:	4140      	adcs	r0, r0
 80004ba:	eb41 0101 	adc.w	r1, r1, r1
 80004be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004c2:	f1a4 0401 	sub.w	r4, r4, #1
 80004c6:	d1e9      	bne.n	800049c <__adddf3+0x10c>
 80004c8:	f091 0f00 	teq	r1, #0
 80004cc:	bf04      	itt	eq
 80004ce:	4601      	moveq	r1, r0
 80004d0:	2000      	moveq	r0, #0
 80004d2:	fab1 f381 	clz	r3, r1
 80004d6:	bf08      	it	eq
 80004d8:	3320      	addeq	r3, #32
 80004da:	f1a3 030b 	sub.w	r3, r3, #11
 80004de:	f1b3 0220 	subs.w	r2, r3, #32
 80004e2:	da0c      	bge.n	80004fe <__adddf3+0x16e>
 80004e4:	320c      	adds	r2, #12
 80004e6:	dd08      	ble.n	80004fa <__adddf3+0x16a>
 80004e8:	f102 0c14 	add.w	ip, r2, #20
 80004ec:	f1c2 020c 	rsb	r2, r2, #12
 80004f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f4:	fa21 f102 	lsr.w	r1, r1, r2
 80004f8:	e00c      	b.n	8000514 <__adddf3+0x184>
 80004fa:	f102 0214 	add.w	r2, r2, #20
 80004fe:	bfd8      	it	le
 8000500:	f1c2 0c20 	rsble	ip, r2, #32
 8000504:	fa01 f102 	lsl.w	r1, r1, r2
 8000508:	fa20 fc0c 	lsr.w	ip, r0, ip
 800050c:	bfdc      	itt	le
 800050e:	ea41 010c 	orrle.w	r1, r1, ip
 8000512:	4090      	lslle	r0, r2
 8000514:	1ae4      	subs	r4, r4, r3
 8000516:	bfa2      	ittt	ge
 8000518:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800051c:	4329      	orrge	r1, r5
 800051e:	bd30      	popge	{r4, r5, pc}
 8000520:	ea6f 0404 	mvn.w	r4, r4
 8000524:	3c1f      	subs	r4, #31
 8000526:	da1c      	bge.n	8000562 <__adddf3+0x1d2>
 8000528:	340c      	adds	r4, #12
 800052a:	dc0e      	bgt.n	800054a <__adddf3+0x1ba>
 800052c:	f104 0414 	add.w	r4, r4, #20
 8000530:	f1c4 0220 	rsb	r2, r4, #32
 8000534:	fa20 f004 	lsr.w	r0, r0, r4
 8000538:	fa01 f302 	lsl.w	r3, r1, r2
 800053c:	ea40 0003 	orr.w	r0, r0, r3
 8000540:	fa21 f304 	lsr.w	r3, r1, r4
 8000544:	ea45 0103 	orr.w	r1, r5, r3
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	f1c4 040c 	rsb	r4, r4, #12
 800054e:	f1c4 0220 	rsb	r2, r4, #32
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 f304 	lsl.w	r3, r1, r4
 800055a:	ea40 0003 	orr.w	r0, r0, r3
 800055e:	4629      	mov	r1, r5
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	fa21 f004 	lsr.w	r0, r1, r4
 8000566:	4629      	mov	r1, r5
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f094 0f00 	teq	r4, #0
 800056e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000572:	bf06      	itte	eq
 8000574:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000578:	3401      	addeq	r4, #1
 800057a:	3d01      	subne	r5, #1
 800057c:	e74e      	b.n	800041c <__adddf3+0x8c>
 800057e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000582:	bf18      	it	ne
 8000584:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000588:	d029      	beq.n	80005de <__adddf3+0x24e>
 800058a:	ea94 0f05 	teq	r4, r5
 800058e:	bf08      	it	eq
 8000590:	ea90 0f02 	teqeq	r0, r2
 8000594:	d005      	beq.n	80005a2 <__adddf3+0x212>
 8000596:	ea54 0c00 	orrs.w	ip, r4, r0
 800059a:	bf04      	itt	eq
 800059c:	4619      	moveq	r1, r3
 800059e:	4610      	moveq	r0, r2
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	ea91 0f03 	teq	r1, r3
 80005a6:	bf1e      	ittt	ne
 80005a8:	2100      	movne	r1, #0
 80005aa:	2000      	movne	r0, #0
 80005ac:	bd30      	popne	{r4, r5, pc}
 80005ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005b2:	d105      	bne.n	80005c0 <__adddf3+0x230>
 80005b4:	0040      	lsls	r0, r0, #1
 80005b6:	4149      	adcs	r1, r1
 80005b8:	bf28      	it	cs
 80005ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd30      	pop	{r4, r5, pc}
 80005c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c4:	bf3c      	itt	cc
 80005c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ca:	bd30      	popcc	{r4, r5, pc}
 80005cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d8:	f04f 0000 	mov.w	r0, #0
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e2:	bf1a      	itte	ne
 80005e4:	4619      	movne	r1, r3
 80005e6:	4610      	movne	r0, r2
 80005e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005ec:	bf1c      	itt	ne
 80005ee:	460b      	movne	r3, r1
 80005f0:	4602      	movne	r2, r0
 80005f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f6:	bf06      	itte	eq
 80005f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005fc:	ea91 0f03 	teqeq	r1, r3
 8000600:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop

08000608 <__aeabi_ui2d>:
 8000608:	f090 0f00 	teq	r0, #0
 800060c:	bf04      	itt	eq
 800060e:	2100      	moveq	r1, #0
 8000610:	4770      	bxeq	lr
 8000612:	b530      	push	{r4, r5, lr}
 8000614:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000618:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061c:	f04f 0500 	mov.w	r5, #0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e750      	b.n	80004c8 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_i2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000640:	bf48      	it	mi
 8000642:	4240      	negmi	r0, r0
 8000644:	f04f 0100 	mov.w	r1, #0
 8000648:	e73e      	b.n	80004c8 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_f2d>:
 800064c:	0042      	lsls	r2, r0, #1
 800064e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000652:	ea4f 0131 	mov.w	r1, r1, rrx
 8000656:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800065a:	bf1f      	itttt	ne
 800065c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000660:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000664:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000668:	4770      	bxne	lr
 800066a:	f092 0f00 	teq	r2, #0
 800066e:	bf14      	ite	ne
 8000670:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000674:	4770      	bxeq	lr
 8000676:	b530      	push	{r4, r5, lr}
 8000678:	f44f 7460 	mov.w	r4, #896	; 0x380
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	e720      	b.n	80004c8 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_ul2d>:
 8000688:	ea50 0201 	orrs.w	r2, r0, r1
 800068c:	bf08      	it	eq
 800068e:	4770      	bxeq	lr
 8000690:	b530      	push	{r4, r5, lr}
 8000692:	f04f 0500 	mov.w	r5, #0
 8000696:	e00a      	b.n	80006ae <__aeabi_l2d+0x16>

08000698 <__aeabi_l2d>:
 8000698:	ea50 0201 	orrs.w	r2, r0, r1
 800069c:	bf08      	it	eq
 800069e:	4770      	bxeq	lr
 80006a0:	b530      	push	{r4, r5, lr}
 80006a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006a6:	d502      	bpl.n	80006ae <__aeabi_l2d+0x16>
 80006a8:	4240      	negs	r0, r0
 80006aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ba:	f43f aedc 	beq.w	8000476 <__adddf3+0xe6>
 80006be:	f04f 0203 	mov.w	r2, #3
 80006c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c6:	bf18      	it	ne
 80006c8:	3203      	addne	r2, #3
 80006ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ce:	bf18      	it	ne
 80006d0:	3203      	addne	r2, #3
 80006d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006d6:	f1c2 0320 	rsb	r3, r2, #32
 80006da:	fa00 fc03 	lsl.w	ip, r0, r3
 80006de:	fa20 f002 	lsr.w	r0, r0, r2
 80006e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80006e6:	ea40 000e 	orr.w	r0, r0, lr
 80006ea:	fa21 f102 	lsr.w	r1, r1, r2
 80006ee:	4414      	add	r4, r2
 80006f0:	e6c1      	b.n	8000476 <__adddf3+0xe6>
 80006f2:	bf00      	nop

080006f4 <__aeabi_dmul>:
 80006f4:	b570      	push	{r4, r5, r6, lr}
 80006f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000702:	bf1d      	ittte	ne
 8000704:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000708:	ea94 0f0c 	teqne	r4, ip
 800070c:	ea95 0f0c 	teqne	r5, ip
 8000710:	f000 f8de 	bleq	80008d0 <__aeabi_dmul+0x1dc>
 8000714:	442c      	add	r4, r5
 8000716:	ea81 0603 	eor.w	r6, r1, r3
 800071a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800071e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000722:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000726:	bf18      	it	ne
 8000728:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000734:	d038      	beq.n	80007a8 <__aeabi_dmul+0xb4>
 8000736:	fba0 ce02 	umull	ip, lr, r0, r2
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000742:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000746:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074a:	f04f 0600 	mov.w	r6, #0
 800074e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000752:	f09c 0f00 	teq	ip, #0
 8000756:	bf18      	it	ne
 8000758:	f04e 0e01 	orrne.w	lr, lr, #1
 800075c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000760:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000764:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000768:	d204      	bcs.n	8000774 <__aeabi_dmul+0x80>
 800076a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800076e:	416d      	adcs	r5, r5
 8000770:	eb46 0606 	adc.w	r6, r6, r6
 8000774:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000778:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800077c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000780:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000784:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000788:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800078c:	bf88      	it	hi
 800078e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000792:	d81e      	bhi.n	80007d2 <__aeabi_dmul+0xde>
 8000794:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000798:	bf08      	it	eq
 800079a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800079e:	f150 0000 	adcs.w	r0, r0, #0
 80007a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007ac:	ea46 0101 	orr.w	r1, r6, r1
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007bc:	bfc2      	ittt	gt
 80007be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007c6:	bd70      	popgt	{r4, r5, r6, pc}
 80007c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007cc:	f04f 0e00 	mov.w	lr, #0
 80007d0:	3c01      	subs	r4, #1
 80007d2:	f300 80ab 	bgt.w	800092c <__aeabi_dmul+0x238>
 80007d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007da:	bfde      	ittt	le
 80007dc:	2000      	movle	r0, #0
 80007de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e2:	bd70      	pople	{r4, r5, r6, pc}
 80007e4:	f1c4 0400 	rsb	r4, r4, #0
 80007e8:	3c20      	subs	r4, #32
 80007ea:	da35      	bge.n	8000858 <__aeabi_dmul+0x164>
 80007ec:	340c      	adds	r4, #12
 80007ee:	dc1b      	bgt.n	8000828 <__aeabi_dmul+0x134>
 80007f0:	f104 0414 	add.w	r4, r4, #20
 80007f4:	f1c4 0520 	rsb	r5, r4, #32
 80007f8:	fa00 f305 	lsl.w	r3, r0, r5
 80007fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000800:	fa01 f205 	lsl.w	r2, r1, r5
 8000804:	ea40 0002 	orr.w	r0, r0, r2
 8000808:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800080c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000810:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000814:	fa21 f604 	lsr.w	r6, r1, r4
 8000818:	eb42 0106 	adc.w	r1, r2, r6
 800081c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000820:	bf08      	it	eq
 8000822:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	f1c4 040c 	rsb	r4, r4, #12
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f304 	lsl.w	r3, r0, r4
 8000834:	fa20 f005 	lsr.w	r0, r0, r5
 8000838:	fa01 f204 	lsl.w	r2, r1, r4
 800083c:	ea40 0002 	orr.w	r0, r0, r2
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000848:	f141 0100 	adc.w	r1, r1, #0
 800084c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000850:	bf08      	it	eq
 8000852:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f1c4 0520 	rsb	r5, r4, #32
 800085c:	fa00 f205 	lsl.w	r2, r0, r5
 8000860:	ea4e 0e02 	orr.w	lr, lr, r2
 8000864:	fa20 f304 	lsr.w	r3, r0, r4
 8000868:	fa01 f205 	lsl.w	r2, r1, r5
 800086c:	ea43 0302 	orr.w	r3, r3, r2
 8000870:	fa21 f004 	lsr.w	r0, r1, r4
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	fa21 f204 	lsr.w	r2, r1, r4
 800087c:	ea20 0002 	bic.w	r0, r0, r2
 8000880:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000884:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000888:	bf08      	it	eq
 800088a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f094 0f00 	teq	r4, #0
 8000894:	d10f      	bne.n	80008b6 <__aeabi_dmul+0x1c2>
 8000896:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089a:	0040      	lsls	r0, r0, #1
 800089c:	eb41 0101 	adc.w	r1, r1, r1
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf08      	it	eq
 80008a6:	3c01      	subeq	r4, #1
 80008a8:	d0f7      	beq.n	800089a <__aeabi_dmul+0x1a6>
 80008aa:	ea41 0106 	orr.w	r1, r1, r6
 80008ae:	f095 0f00 	teq	r5, #0
 80008b2:	bf18      	it	ne
 80008b4:	4770      	bxne	lr
 80008b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ba:	0052      	lsls	r2, r2, #1
 80008bc:	eb43 0303 	adc.w	r3, r3, r3
 80008c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c4:	bf08      	it	eq
 80008c6:	3d01      	subeq	r5, #1
 80008c8:	d0f7      	beq.n	80008ba <__aeabi_dmul+0x1c6>
 80008ca:	ea43 0306 	orr.w	r3, r3, r6
 80008ce:	4770      	bx	lr
 80008d0:	ea94 0f0c 	teq	r4, ip
 80008d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d8:	bf18      	it	ne
 80008da:	ea95 0f0c 	teqne	r5, ip
 80008de:	d00c      	beq.n	80008fa <__aeabi_dmul+0x206>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	d1d1      	bne.n	8000890 <__aeabi_dmul+0x19c>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	bd70      	pop	{r4, r5, r6, pc}
 80008fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fe:	bf06      	itte	eq
 8000900:	4610      	moveq	r0, r2
 8000902:	4619      	moveq	r1, r3
 8000904:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000908:	d019      	beq.n	800093e <__aeabi_dmul+0x24a>
 800090a:	ea94 0f0c 	teq	r4, ip
 800090e:	d102      	bne.n	8000916 <__aeabi_dmul+0x222>
 8000910:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000914:	d113      	bne.n	800093e <__aeabi_dmul+0x24a>
 8000916:	ea95 0f0c 	teq	r5, ip
 800091a:	d105      	bne.n	8000928 <__aeabi_dmul+0x234>
 800091c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000920:	bf1c      	itt	ne
 8000922:	4610      	movne	r0, r2
 8000924:	4619      	movne	r1, r3
 8000926:	d10a      	bne.n	800093e <__aeabi_dmul+0x24a>
 8000928:	ea81 0103 	eor.w	r1, r1, r3
 800092c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000930:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000934:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	bd70      	pop	{r4, r5, r6, pc}
 800093e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000942:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000946:	bd70      	pop	{r4, r5, r6, pc}

08000948 <__aeabi_ddiv>:
 8000948:	b570      	push	{r4, r5, r6, lr}
 800094a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800094e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000952:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000956:	bf1d      	ittte	ne
 8000958:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800095c:	ea94 0f0c 	teqne	r4, ip
 8000960:	ea95 0f0c 	teqne	r5, ip
 8000964:	f000 f8a7 	bleq	8000ab6 <__aeabi_ddiv+0x16e>
 8000968:	eba4 0405 	sub.w	r4, r4, r5
 800096c:	ea81 0e03 	eor.w	lr, r1, r3
 8000970:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000974:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000978:	f000 8088 	beq.w	8000a8c <__aeabi_ddiv+0x144>
 800097c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000980:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000984:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000988:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800098c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000990:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000994:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000998:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800099c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a0:	429d      	cmp	r5, r3
 80009a2:	bf08      	it	eq
 80009a4:	4296      	cmpeq	r6, r2
 80009a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009ae:	d202      	bcs.n	80009b6 <__aeabi_ddiv+0x6e>
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	1ab6      	subs	r6, r6, r2
 80009b8:	eb65 0503 	sbc.w	r5, r5, r3
 80009bc:	085b      	lsrs	r3, r3, #1
 80009be:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d2:	bf22      	ittt	cs
 80009d4:	1ab6      	subcs	r6, r6, r2
 80009d6:	4675      	movcs	r5, lr
 80009d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009dc:	085b      	lsrs	r3, r3, #1
 80009de:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ea:	bf22      	ittt	cs
 80009ec:	1ab6      	subcs	r6, r6, r2
 80009ee:	4675      	movcs	r5, lr
 80009f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a02:	bf22      	ittt	cs
 8000a04:	1ab6      	subcs	r6, r6, r2
 8000a06:	4675      	movcs	r5, lr
 8000a08:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a0c:	085b      	lsrs	r3, r3, #1
 8000a0e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a12:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a16:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1a:	bf22      	ittt	cs
 8000a1c:	1ab6      	subcs	r6, r6, r2
 8000a1e:	4675      	movcs	r5, lr
 8000a20:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a24:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a28:	d018      	beq.n	8000a5c <__aeabi_ddiv+0x114>
 8000a2a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a2e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a32:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a36:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a3e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a42:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a46:	d1c0      	bne.n	80009ca <__aeabi_ddiv+0x82>
 8000a48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a4c:	d10b      	bne.n	8000a66 <__aeabi_ddiv+0x11e>
 8000a4e:	ea41 0100 	orr.w	r1, r1, r0
 8000a52:	f04f 0000 	mov.w	r0, #0
 8000a56:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5a:	e7b6      	b.n	80009ca <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a60:	bf04      	itt	eq
 8000a62:	4301      	orreq	r1, r0
 8000a64:	2000      	moveq	r0, #0
 8000a66:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6a:	bf88      	it	hi
 8000a6c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a70:	f63f aeaf 	bhi.w	80007d2 <__aeabi_dmul+0xde>
 8000a74:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a78:	bf04      	itt	eq
 8000a7a:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a7e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a82:	f150 0000 	adcs.w	r0, r0, #0
 8000a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a90:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a94:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a98:	bfc2      	ittt	gt
 8000a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa2:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa8:	f04f 0e00 	mov.w	lr, #0
 8000aac:	3c01      	subs	r4, #1
 8000aae:	e690      	b.n	80007d2 <__aeabi_dmul+0xde>
 8000ab0:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab4:	e68d      	b.n	80007d2 <__aeabi_dmul+0xde>
 8000ab6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aba:	ea94 0f0c 	teq	r4, ip
 8000abe:	bf08      	it	eq
 8000ac0:	ea95 0f0c 	teqeq	r5, ip
 8000ac4:	f43f af3b 	beq.w	800093e <__aeabi_dmul+0x24a>
 8000ac8:	ea94 0f0c 	teq	r4, ip
 8000acc:	d10a      	bne.n	8000ae4 <__aeabi_ddiv+0x19c>
 8000ace:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad2:	f47f af34 	bne.w	800093e <__aeabi_dmul+0x24a>
 8000ad6:	ea95 0f0c 	teq	r5, ip
 8000ada:	f47f af25 	bne.w	8000928 <__aeabi_dmul+0x234>
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	e72c      	b.n	800093e <__aeabi_dmul+0x24a>
 8000ae4:	ea95 0f0c 	teq	r5, ip
 8000ae8:	d106      	bne.n	8000af8 <__aeabi_ddiv+0x1b0>
 8000aea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aee:	f43f aefd 	beq.w	80008ec <__aeabi_dmul+0x1f8>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e722      	b.n	800093e <__aeabi_dmul+0x24a>
 8000af8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000afc:	bf18      	it	ne
 8000afe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b02:	f47f aec5 	bne.w	8000890 <__aeabi_dmul+0x19c>
 8000b06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0a:	f47f af0d 	bne.w	8000928 <__aeabi_dmul+0x234>
 8000b0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b12:	f47f aeeb 	bne.w	80008ec <__aeabi_dmul+0x1f8>
 8000b16:	e712      	b.n	800093e <__aeabi_dmul+0x24a>

08000b18 <__gedf2>:
 8000b18:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b1c:	e006      	b.n	8000b2c <__cmpdf2+0x4>
 8000b1e:	bf00      	nop

08000b20 <__ledf2>:
 8000b20:	f04f 0c01 	mov.w	ip, #1
 8000b24:	e002      	b.n	8000b2c <__cmpdf2+0x4>
 8000b26:	bf00      	nop

08000b28 <__cmpdf2>:
 8000b28:	f04f 0c01 	mov.w	ip, #1
 8000b2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b3c:	bf18      	it	ne
 8000b3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b42:	d01b      	beq.n	8000b7c <__cmpdf2+0x54>
 8000b44:	b001      	add	sp, #4
 8000b46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4a:	bf0c      	ite	eq
 8000b4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b50:	ea91 0f03 	teqne	r1, r3
 8000b54:	bf02      	ittt	eq
 8000b56:	ea90 0f02 	teqeq	r0, r2
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	4770      	bxeq	lr
 8000b5e:	f110 0f00 	cmn.w	r0, #0
 8000b62:	ea91 0f03 	teq	r1, r3
 8000b66:	bf58      	it	pl
 8000b68:	4299      	cmppl	r1, r3
 8000b6a:	bf08      	it	eq
 8000b6c:	4290      	cmpeq	r0, r2
 8000b6e:	bf2c      	ite	cs
 8000b70:	17d8      	asrcs	r0, r3, #31
 8000b72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b76:	f040 0001 	orr.w	r0, r0, #1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__cmpdf2+0x64>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d107      	bne.n	8000b9c <__cmpdf2+0x74>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d1d6      	bne.n	8000b44 <__cmpdf2+0x1c>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d0d3      	beq.n	8000b44 <__cmpdf2+0x1c>
 8000b9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_cdrcmple>:
 8000ba4:	4684      	mov	ip, r0
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4662      	mov	r2, ip
 8000baa:	468c      	mov	ip, r1
 8000bac:	4619      	mov	r1, r3
 8000bae:	4663      	mov	r3, ip
 8000bb0:	e000      	b.n	8000bb4 <__aeabi_cdcmpeq>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_cdcmpeq>:
 8000bb4:	b501      	push	{r0, lr}
 8000bb6:	f7ff ffb7 	bl	8000b28 <__cmpdf2>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	bf48      	it	mi
 8000bbe:	f110 0f00 	cmnmi.w	r0, #0
 8000bc2:	bd01      	pop	{r0, pc}

08000bc4 <__aeabi_dcmpeq>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff fff4 	bl	8000bb4 <__aeabi_cdcmpeq>
 8000bcc:	bf0c      	ite	eq
 8000bce:	2001      	moveq	r0, #1
 8000bd0:	2000      	movne	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmplt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffea 	bl	8000bb4 <__aeabi_cdcmpeq>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmple>:
 8000bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf0:	f7ff ffe0 	bl	8000bb4 <__aeabi_cdcmpeq>
 8000bf4:	bf94      	ite	ls
 8000bf6:	2001      	movls	r0, #1
 8000bf8:	2000      	movhi	r0, #0
 8000bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfe:	bf00      	nop

08000c00 <__aeabi_dcmpge>:
 8000c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c04:	f7ff ffce 	bl	8000ba4 <__aeabi_cdrcmple>
 8000c08:	bf94      	ite	ls
 8000c0a:	2001      	movls	r0, #1
 8000c0c:	2000      	movhi	r0, #0
 8000c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c12:	bf00      	nop

08000c14 <__aeabi_dcmpgt>:
 8000c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c18:	f7ff ffc4 	bl	8000ba4 <__aeabi_cdrcmple>
 8000c1c:	bf34      	ite	cc
 8000c1e:	2001      	movcc	r0, #1
 8000c20:	2000      	movcs	r0, #0
 8000c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b94b      	cbnz	r3, 8000c8e <__aeabi_uldivmod+0x16>
 8000c7a:	b942      	cbnz	r2, 8000c8e <__aeabi_uldivmod+0x16>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	d002      	beq.n	8000c8a <__aeabi_uldivmod+0x12>
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	4608      	mov	r0, r1
 8000c8a:	f000 b83b 	b.w	8000d04 <__aeabi_idiv0>
 8000c8e:	b082      	sub	sp, #8
 8000c90:	46ec      	mov	ip, sp
 8000c92:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c96:	f000 f81d 	bl	8000cd4 <__gnu_uldivmod_helper>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	b002      	add	sp, #8
 8000ca0:	bc0c      	pop	{r2, r3}
 8000ca2:	4770      	bx	lr

08000ca4 <__gnu_ldivmod_helper>:
 8000ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ca8:	9c06      	ldr	r4, [sp, #24]
 8000caa:	4615      	mov	r5, r2
 8000cac:	4606      	mov	r6, r0
 8000cae:	460f      	mov	r7, r1
 8000cb0:	4698      	mov	r8, r3
 8000cb2:	f000 f829 	bl	8000d08 <__divdi3>
 8000cb6:	fb05 f301 	mul.w	r3, r5, r1
 8000cba:	fb00 3808 	mla	r8, r0, r8, r3
 8000cbe:	fba5 2300 	umull	r2, r3, r5, r0
 8000cc2:	4443      	add	r3, r8
 8000cc4:	1ab2      	subs	r2, r6, r2
 8000cc6:	eb67 0303 	sbc.w	r3, r7, r3
 8000cca:	e9c4 2300 	strd	r2, r3, [r4]
 8000cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cd2:	bf00      	nop

08000cd4 <__gnu_uldivmod_helper>:
 8000cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cd8:	9c06      	ldr	r4, [sp, #24]
 8000cda:	4615      	mov	r5, r2
 8000cdc:	4606      	mov	r6, r0
 8000cde:	460f      	mov	r7, r1
 8000ce0:	4698      	mov	r8, r3
 8000ce2:	f000 f967 	bl	8000fb4 <__udivdi3>
 8000ce6:	fb00 f808 	mul.w	r8, r0, r8
 8000cea:	fba0 2305 	umull	r2, r3, r0, r5
 8000cee:	fb05 8801 	mla	r8, r5, r1, r8
 8000cf2:	4443      	add	r3, r8
 8000cf4:	1ab2      	subs	r2, r6, r2
 8000cf6:	eb67 0303 	sbc.w	r3, r7, r3
 8000cfa:	e9c4 2300 	strd	r2, r3, [r4]
 8000cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d02:	bf00      	nop

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <__divdi3>:
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d0e:	bfa8      	it	ge
 8000d10:	2600      	movge	r6, #0
 8000d12:	f2c0 80a9 	blt.w	8000e68 <__divdi3+0x160>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	f2c0 80a1 	blt.w	8000e5e <__divdi3+0x156>
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	4690      	mov	r8, r2
 8000d20:	469c      	mov	ip, r3
 8000d22:	4614      	mov	r4, r2
 8000d24:	4605      	mov	r5, r0
 8000d26:	460f      	mov	r7, r1
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d147      	bne.n	8000dbc <__divdi3+0xb4>
 8000d2c:	428a      	cmp	r2, r1
 8000d2e:	d95b      	bls.n	8000de8 <__divdi3+0xe0>
 8000d30:	fab2 f382 	clz	r3, r2
 8000d34:	b153      	cbz	r3, 8000d4c <__divdi3+0x44>
 8000d36:	f1c3 0220 	rsb	r2, r3, #32
 8000d3a:	fa01 f703 	lsl.w	r7, r1, r3
 8000d3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d42:	fa08 f403 	lsl.w	r4, r8, r3
 8000d46:	4317      	orrs	r7, r2
 8000d48:	fa00 f503 	lsl.w	r5, r0, r3
 8000d4c:	0c21      	lsrs	r1, r4, #16
 8000d4e:	fbb7 f2f1 	udiv	r2, r7, r1
 8000d52:	0c2b      	lsrs	r3, r5, #16
 8000d54:	fb01 7c12 	mls	ip, r1, r2, r7
 8000d58:	b2a0      	uxth	r0, r4
 8000d5a:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000d5e:	fb00 f302 	mul.w	r3, r0, r2
 8000d62:	42bb      	cmp	r3, r7
 8000d64:	d909      	bls.n	8000d7a <__divdi3+0x72>
 8000d66:	193f      	adds	r7, r7, r4
 8000d68:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8000d6c:	d204      	bcs.n	8000d78 <__divdi3+0x70>
 8000d6e:	42bb      	cmp	r3, r7
 8000d70:	bf84      	itt	hi
 8000d72:	3a02      	subhi	r2, #2
 8000d74:	193f      	addhi	r7, r7, r4
 8000d76:	d800      	bhi.n	8000d7a <__divdi3+0x72>
 8000d78:	4662      	mov	r2, ip
 8000d7a:	1aff      	subs	r7, r7, r3
 8000d7c:	fbb7 f3f1 	udiv	r3, r7, r1
 8000d80:	b2ad      	uxth	r5, r5
 8000d82:	fb01 7113 	mls	r1, r1, r3, r7
 8000d86:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000d8a:	fb00 f003 	mul.w	r0, r0, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__divdi3+0x9c>
 8000d92:	1909      	adds	r1, r1, r4
 8000d94:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 8000d98:	d203      	bcs.n	8000da2 <__divdi3+0x9a>
 8000d9a:	4288      	cmp	r0, r1
 8000d9c:	bf88      	it	hi
 8000d9e:	3b02      	subhi	r3, #2
 8000da0:	d800      	bhi.n	8000da4 <__divdi3+0x9c>
 8000da2:	463b      	mov	r3, r7
 8000da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da8:	2200      	movs	r2, #0
 8000daa:	4618      	mov	r0, r3
 8000dac:	4611      	mov	r1, r2
 8000dae:	b116      	cbz	r6, 8000db6 <__divdi3+0xae>
 8000db0:	4240      	negs	r0, r0
 8000db2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000dba:	4770      	bx	lr
 8000dbc:	428b      	cmp	r3, r1
 8000dbe:	bf84      	itt	hi
 8000dc0:	2200      	movhi	r2, #0
 8000dc2:	4613      	movhi	r3, r2
 8000dc4:	d8f1      	bhi.n	8000daa <__divdi3+0xa2>
 8000dc6:	fabc f18c 	clz	r1, ip
 8000dca:	2900      	cmp	r1, #0
 8000dcc:	f040 8090 	bne.w	8000ef0 <__divdi3+0x1e8>
 8000dd0:	45cc      	cmp	ip, r9
 8000dd2:	bf28      	it	cs
 8000dd4:	4580      	cmpcs	r8, r0
 8000dd6:	bf8c      	ite	hi
 8000dd8:	2200      	movhi	r2, #0
 8000dda:	2201      	movls	r2, #1
 8000ddc:	bf9c      	itt	ls
 8000dde:	2301      	movls	r3, #1
 8000de0:	460a      	movls	r2, r1
 8000de2:	d9e2      	bls.n	8000daa <__divdi3+0xa2>
 8000de4:	4613      	mov	r3, r2
 8000de6:	e7e0      	b.n	8000daa <__divdi3+0xa2>
 8000de8:	b912      	cbnz	r2, 8000df0 <__divdi3+0xe8>
 8000dea:	2301      	movs	r3, #1
 8000dec:	fbb3 f4f2 	udiv	r4, r3, r2
 8000df0:	fab4 f384 	clz	r3, r4
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d13d      	bne.n	8000e74 <__divdi3+0x16c>
 8000df8:	1b3f      	subs	r7, r7, r4
 8000dfa:	0c20      	lsrs	r0, r4, #16
 8000dfc:	fa1f fc84 	uxth.w	ip, r4
 8000e00:	2201      	movs	r2, #1
 8000e02:	fbb7 f1f0 	udiv	r1, r7, r0
 8000e06:	0c2b      	lsrs	r3, r5, #16
 8000e08:	fb00 7711 	mls	r7, r0, r1, r7
 8000e0c:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8000e10:	fb0c f301 	mul.w	r3, ip, r1
 8000e14:	42bb      	cmp	r3, r7
 8000e16:	d90a      	bls.n	8000e2e <__divdi3+0x126>
 8000e18:	193f      	adds	r7, r7, r4
 8000e1a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000e1e:	f080 80c1 	bcs.w	8000fa4 <__divdi3+0x29c>
 8000e22:	42bb      	cmp	r3, r7
 8000e24:	bf84      	itt	hi
 8000e26:	3902      	subhi	r1, #2
 8000e28:	193f      	addhi	r7, r7, r4
 8000e2a:	f240 80bb 	bls.w	8000fa4 <__divdi3+0x29c>
 8000e2e:	1aff      	subs	r7, r7, r3
 8000e30:	fbb7 f3f0 	udiv	r3, r7, r0
 8000e34:	b2ad      	uxth	r5, r5
 8000e36:	fb00 7013 	mls	r0, r0, r3, r7
 8000e3a:	ea45 4000 	orr.w	r0, r5, r0, lsl #16
 8000e3e:	fb0c fc03 	mul.w	ip, ip, r3
 8000e42:	4584      	cmp	ip, r0
 8000e44:	d908      	bls.n	8000e58 <__divdi3+0x150>
 8000e46:	1900      	adds	r0, r0, r4
 8000e48:	f103 37ff 	add.w	r7, r3, #4294967295	; 0xffffffff
 8000e4c:	d203      	bcs.n	8000e56 <__divdi3+0x14e>
 8000e4e:	4584      	cmp	ip, r0
 8000e50:	bf88      	it	hi
 8000e52:	3b02      	subhi	r3, #2
 8000e54:	d800      	bhi.n	8000e58 <__divdi3+0x150>
 8000e56:	463b      	mov	r3, r7
 8000e58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5c:	e7a5      	b.n	8000daa <__divdi3+0xa2>
 8000e5e:	43f6      	mvns	r6, r6
 8000e60:	4252      	negs	r2, r2
 8000e62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e66:	e759      	b.n	8000d1c <__divdi3+0x14>
 8000e68:	4240      	negs	r0, r0
 8000e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000e72:	e750      	b.n	8000d16 <__divdi3+0xe>
 8000e74:	409c      	lsls	r4, r3
 8000e76:	f1c3 0220 	rsb	r2, r3, #32
 8000e7a:	fa27 f102 	lsr.w	r1, r7, r2
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa25 f202 	lsr.w	r2, r5, r2
 8000e84:	409f      	lsls	r7, r3
 8000e86:	4317      	orrs	r7, r2
 8000e88:	fbb1 f2f0 	udiv	r2, r1, r0
 8000e8c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e90:	fb00 1112 	mls	r1, r0, r2, r1
 8000e94:	fa1f fc84 	uxth.w	ip, r4
 8000e98:	ea48 4101 	orr.w	r1, r8, r1, lsl #16
 8000e9c:	fb0c f802 	mul.w	r8, ip, r2
 8000ea0:	4588      	cmp	r8, r1
 8000ea2:	fa05 f503 	lsl.w	r5, r5, r3
 8000ea6:	d908      	bls.n	8000eba <__divdi3+0x1b2>
 8000ea8:	1909      	adds	r1, r1, r4
 8000eaa:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8000eae:	d27f      	bcs.n	8000fb0 <__divdi3+0x2a8>
 8000eb0:	4588      	cmp	r8, r1
 8000eb2:	bf84      	itt	hi
 8000eb4:	3a02      	subhi	r2, #2
 8000eb6:	1909      	addhi	r1, r1, r4
 8000eb8:	d97a      	bls.n	8000fb0 <__divdi3+0x2a8>
 8000eba:	ebc8 0101 	rsb	r1, r8, r1
 8000ebe:	fbb1 f3f0 	udiv	r3, r1, r0
 8000ec2:	fb00 1113 	mls	r1, r0, r3, r1
 8000ec6:	b2bf      	uxth	r7, r7
 8000ec8:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ecc:	fb0c f103 	mul.w	r1, ip, r3
 8000ed0:	42b9      	cmp	r1, r7
 8000ed2:	d909      	bls.n	8000ee8 <__divdi3+0x1e0>
 8000ed4:	193f      	adds	r7, r7, r4
 8000ed6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000eda:	d204      	bcs.n	8000ee6 <__divdi3+0x1de>
 8000edc:	42b9      	cmp	r1, r7
 8000ede:	bf84      	itt	hi
 8000ee0:	3b02      	subhi	r3, #2
 8000ee2:	193f      	addhi	r7, r7, r4
 8000ee4:	d800      	bhi.n	8000ee8 <__divdi3+0x1e0>
 8000ee6:	4643      	mov	r3, r8
 8000ee8:	1a7f      	subs	r7, r7, r1
 8000eea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000eee:	e788      	b.n	8000e02 <__divdi3+0xfa>
 8000ef0:	f1c1 0320 	rsb	r3, r1, #32
 8000ef4:	fa28 f203 	lsr.w	r2, r8, r3
 8000ef8:	fa0c fc01 	lsl.w	ip, ip, r1
 8000efc:	ea42 0c0c 	orr.w	ip, r2, ip
 8000f00:	fa29 f403 	lsr.w	r4, r9, r3
 8000f04:	ea4f 4a1c 	mov.w	sl, ip, lsr #16
 8000f08:	fa20 f303 	lsr.w	r3, r0, r3
 8000f0c:	fa09 f901 	lsl.w	r9, r9, r1
 8000f10:	ea43 0009 	orr.w	r0, r3, r9
 8000f14:	fbb4 f7fa 	udiv	r7, r4, sl
 8000f18:	fb0a 4417 	mls	r4, sl, r7, r4
 8000f1c:	0c03      	lsrs	r3, r0, #16
 8000f1e:	fa1f f98c 	uxth.w	r9, ip
 8000f22:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000f26:	fb09 fb07 	mul.w	fp, r9, r7
 8000f2a:	45a3      	cmp	fp, r4
 8000f2c:	fa08 f201 	lsl.w	r2, r8, r1
 8000f30:	d909      	bls.n	8000f46 <__divdi3+0x23e>
 8000f32:	eb14 040c 	adds.w	r4, r4, ip
 8000f36:	f107 33ff 	add.w	r3, r7, #4294967295	; 0xffffffff
 8000f3a:	d237      	bcs.n	8000fac <__divdi3+0x2a4>
 8000f3c:	45a3      	cmp	fp, r4
 8000f3e:	bf84      	itt	hi
 8000f40:	3f02      	subhi	r7, #2
 8000f42:	4464      	addhi	r4, ip
 8000f44:	d932      	bls.n	8000fac <__divdi3+0x2a4>
 8000f46:	ebcb 0404 	rsb	r4, fp, r4
 8000f4a:	fbb4 f3fa 	udiv	r3, r4, sl
 8000f4e:	fb0a 4413 	mls	r4, sl, r3, r4
 8000f52:	b280      	uxth	r0, r0
 8000f54:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f58:	fb09 f403 	mul.w	r4, r9, r3
 8000f5c:	4284      	cmp	r4, r0
 8000f5e:	d909      	bls.n	8000f74 <__divdi3+0x26c>
 8000f60:	eb10 000c 	adds.w	r0, r0, ip
 8000f64:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f68:	d21e      	bcs.n	8000fa8 <__divdi3+0x2a0>
 8000f6a:	4284      	cmp	r4, r0
 8000f6c:	bf84      	itt	hi
 8000f6e:	3b02      	subhi	r3, #2
 8000f70:	4460      	addhi	r0, ip
 8000f72:	d919      	bls.n	8000fa8 <__divdi3+0x2a0>
 8000f74:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8000f78:	1b00      	subs	r0, r0, r4
 8000f7a:	fba7 2302 	umull	r2, r3, r7, r2
 8000f7e:	4298      	cmp	r0, r3
 8000f80:	d30d      	bcc.n	8000f9e <__divdi3+0x296>
 8000f82:	bf14      	ite	ne
 8000f84:	2300      	movne	r3, #0
 8000f86:	2301      	moveq	r3, #1
 8000f88:	fa05 f101 	lsl.w	r1, r5, r1
 8000f8c:	4291      	cmp	r1, r2
 8000f8e:	bf2c      	ite	cs
 8000f90:	2200      	movcs	r2, #0
 8000f92:	f003 0201 	andcc.w	r2, r3, #1
 8000f96:	463b      	mov	r3, r7
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	f43f af06 	beq.w	8000daa <__divdi3+0xa2>
 8000f9e:	1e7b      	subs	r3, r7, #1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	e702      	b.n	8000daa <__divdi3+0xa2>
 8000fa4:	4641      	mov	r1, r8
 8000fa6:	e742      	b.n	8000e2e <__divdi3+0x126>
 8000fa8:	4643      	mov	r3, r8
 8000faa:	e7e3      	b.n	8000f74 <__divdi3+0x26c>
 8000fac:	461f      	mov	r7, r3
 8000fae:	e7ca      	b.n	8000f46 <__divdi3+0x23e>
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	e782      	b.n	8000eba <__divdi3+0x1b2>

08000fb4 <__udivdi3>:
 8000fb4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000fb8:	4614      	mov	r4, r2
 8000fba:	4605      	mov	r5, r0
 8000fbc:	460e      	mov	r6, r1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d141      	bne.n	8001046 <__udivdi3+0x92>
 8000fc2:	428a      	cmp	r2, r1
 8000fc4:	d954      	bls.n	8001070 <__udivdi3+0xbc>
 8000fc6:	fab2 f382 	clz	r3, r2
 8000fca:	b14b      	cbz	r3, 8000fe0 <__udivdi3+0x2c>
 8000fcc:	f1c3 0620 	rsb	r6, r3, #32
 8000fd0:	4099      	lsls	r1, r3
 8000fd2:	fa20 f606 	lsr.w	r6, r0, r6
 8000fd6:	fa02 f403 	lsl.w	r4, r2, r3
 8000fda:	430e      	orrs	r6, r1
 8000fdc:	fa00 f503 	lsl.w	r5, r0, r3
 8000fe0:	0c22      	lsrs	r2, r4, #16
 8000fe2:	fbb6 f0f2 	udiv	r0, r6, r2
 8000fe6:	0c2b      	lsrs	r3, r5, #16
 8000fe8:	fb02 6110 	mls	r1, r2, r0, r6
 8000fec:	b2a7      	uxth	r7, r4
 8000fee:	ea43 4601 	orr.w	r6, r3, r1, lsl #16
 8000ff2:	fb07 f300 	mul.w	r3, r7, r0
 8000ff6:	42b3      	cmp	r3, r6
 8000ff8:	d909      	bls.n	800100e <__udivdi3+0x5a>
 8000ffa:	1936      	adds	r6, r6, r4
 8000ffc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001000:	d204      	bcs.n	800100c <__udivdi3+0x58>
 8001002:	42b3      	cmp	r3, r6
 8001004:	bf84      	itt	hi
 8001006:	3802      	subhi	r0, #2
 8001008:	1936      	addhi	r6, r6, r4
 800100a:	d800      	bhi.n	800100e <__udivdi3+0x5a>
 800100c:	4608      	mov	r0, r1
 800100e:	1af6      	subs	r6, r6, r3
 8001010:	fbb6 f3f2 	udiv	r3, r6, r2
 8001014:	b2ad      	uxth	r5, r5
 8001016:	fb02 6213 	mls	r2, r2, r3, r6
 800101a:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
 800101e:	fb07 f703 	mul.w	r7, r7, r3
 8001022:	4297      	cmp	r7, r2
 8001024:	d909      	bls.n	800103a <__udivdi3+0x86>
 8001026:	1912      	adds	r2, r2, r4
 8001028:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800102c:	f080 80ea 	bcs.w	8001204 <__udivdi3+0x250>
 8001030:	4297      	cmp	r7, r2
 8001032:	bf88      	it	hi
 8001034:	3b02      	subhi	r3, #2
 8001036:	f240 80e5 	bls.w	8001204 <__udivdi3+0x250>
 800103a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800103e:	2100      	movs	r1, #0
 8001040:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001044:	4770      	bx	lr
 8001046:	428b      	cmp	r3, r1
 8001048:	bf84      	itt	hi
 800104a:	2100      	movhi	r1, #0
 800104c:	4608      	movhi	r0, r1
 800104e:	d8f7      	bhi.n	8001040 <__udivdi3+0x8c>
 8001050:	fab3 f483 	clz	r4, r3
 8001054:	2c00      	cmp	r4, #0
 8001056:	d149      	bne.n	80010ec <__udivdi3+0x138>
 8001058:	428b      	cmp	r3, r1
 800105a:	bf28      	it	cs
 800105c:	4282      	cmpcs	r2, r0
 800105e:	bf8c      	ite	hi
 8001060:	2100      	movhi	r1, #0
 8001062:	2101      	movls	r1, #1
 8001064:	bf9c      	itt	ls
 8001066:	2001      	movls	r0, #1
 8001068:	4621      	movls	r1, r4
 800106a:	d9e9      	bls.n	8001040 <__udivdi3+0x8c>
 800106c:	4608      	mov	r0, r1
 800106e:	e7e7      	b.n	8001040 <__udivdi3+0x8c>
 8001070:	b912      	cbnz	r2, 8001078 <__udivdi3+0xc4>
 8001072:	2401      	movs	r4, #1
 8001074:	fbb4 f4f2 	udiv	r4, r4, r2
 8001078:	fab4 f784 	clz	r7, r4
 800107c:	2f00      	cmp	r7, #0
 800107e:	f040 8082 	bne.w	8001186 <__udivdi3+0x1d2>
 8001082:	1b0b      	subs	r3, r1, r4
 8001084:	0c26      	lsrs	r6, r4, #16
 8001086:	b2a7      	uxth	r7, r4
 8001088:	2101      	movs	r1, #1
 800108a:	fbb3 f0f6 	udiv	r0, r3, r6
 800108e:	0c2a      	lsrs	r2, r5, #16
 8001090:	fb06 3310 	mls	r3, r6, r0, r3
 8001094:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8001098:	fb07 f200 	mul.w	r2, r7, r0
 800109c:	429a      	cmp	r2, r3
 800109e:	d90a      	bls.n	80010b6 <__udivdi3+0x102>
 80010a0:	191b      	adds	r3, r3, r4
 80010a2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80010a6:	f080 80af 	bcs.w	8001208 <__udivdi3+0x254>
 80010aa:	429a      	cmp	r2, r3
 80010ac:	bf84      	itt	hi
 80010ae:	3802      	subhi	r0, #2
 80010b0:	191b      	addhi	r3, r3, r4
 80010b2:	f240 80a9 	bls.w	8001208 <__udivdi3+0x254>
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	fbb3 f2f6 	udiv	r2, r3, r6
 80010bc:	b2ad      	uxth	r5, r5
 80010be:	fb06 3312 	mls	r3, r6, r2, r3
 80010c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80010c6:	fb07 f702 	mul.w	r7, r7, r2
 80010ca:	42af      	cmp	r7, r5
 80010cc:	d909      	bls.n	80010e2 <__udivdi3+0x12e>
 80010ce:	192c      	adds	r4, r5, r4
 80010d0:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80010d4:	f080 809a 	bcs.w	800120c <__udivdi3+0x258>
 80010d8:	42a7      	cmp	r7, r4
 80010da:	bf88      	it	hi
 80010dc:	3a02      	subhi	r2, #2
 80010de:	f240 8095 	bls.w	800120c <__udivdi3+0x258>
 80010e2:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80010e6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80010ea:	4770      	bx	lr
 80010ec:	f1c4 0520 	rsb	r5, r4, #32
 80010f0:	fa22 f605 	lsr.w	r6, r2, r5
 80010f4:	40a3      	lsls	r3, r4
 80010f6:	4333      	orrs	r3, r6
 80010f8:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80010fc:	fa21 f605 	lsr.w	r6, r1, r5
 8001100:	40a1      	lsls	r1, r4
 8001102:	fa20 f505 	lsr.w	r5, r0, r5
 8001106:	fbb6 fcf8 	udiv	ip, r6, r8
 800110a:	430d      	orrs	r5, r1
 800110c:	fb08 661c 	mls	r6, r8, ip, r6
 8001110:	0c29      	lsrs	r1, r5, #16
 8001112:	fa1f f983 	uxth.w	r9, r3
 8001116:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 800111a:	fb09 f70c 	mul.w	r7, r9, ip
 800111e:	42b7      	cmp	r7, r6
 8001120:	fa02 f204 	lsl.w	r2, r2, r4
 8001124:	d904      	bls.n	8001130 <__udivdi3+0x17c>
 8001126:	18f6      	adds	r6, r6, r3
 8001128:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 800112c:	d376      	bcc.n	800121c <__udivdi3+0x268>
 800112e:	468c      	mov	ip, r1
 8001130:	1bf6      	subs	r6, r6, r7
 8001132:	fbb6 f7f8 	udiv	r7, r6, r8
 8001136:	fb08 6617 	mls	r6, r8, r7, r6
 800113a:	b2ad      	uxth	r5, r5
 800113c:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 8001140:	fb09 f607 	mul.w	r6, r9, r7
 8001144:	42ae      	cmp	r6, r5
 8001146:	d904      	bls.n	8001152 <__udivdi3+0x19e>
 8001148:	18ed      	adds	r5, r5, r3
 800114a:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 800114e:	d35f      	bcc.n	8001210 <__udivdi3+0x25c>
 8001150:	460f      	mov	r7, r1
 8001152:	ea47 470c 	orr.w	r7, r7, ip, lsl #16
 8001156:	1bad      	subs	r5, r5, r6
 8001158:	fba7 2302 	umull	r2, r3, r7, r2
 800115c:	429d      	cmp	r5, r3
 800115e:	d30d      	bcc.n	800117c <__udivdi3+0x1c8>
 8001160:	fa00 f104 	lsl.w	r1, r0, r4
 8001164:	bf14      	ite	ne
 8001166:	2500      	movne	r5, #0
 8001168:	2501      	moveq	r5, #1
 800116a:	4291      	cmp	r1, r2
 800116c:	bf2c      	ite	cs
 800116e:	2100      	movcs	r1, #0
 8001170:	f005 0101 	andcc.w	r1, r5, #1
 8001174:	4638      	mov	r0, r7
 8001176:	2900      	cmp	r1, #0
 8001178:	f43f af62 	beq.w	8001040 <__udivdi3+0x8c>
 800117c:	1e78      	subs	r0, r7, #1
 800117e:	2100      	movs	r1, #0
 8001180:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8001184:	4770      	bx	lr
 8001186:	40bc      	lsls	r4, r7
 8001188:	f1c7 0320 	rsb	r3, r7, #32
 800118c:	fa21 fc03 	lsr.w	ip, r1, r3
 8001190:	0c26      	lsrs	r6, r4, #16
 8001192:	40b9      	lsls	r1, r7
 8001194:	fa20 f303 	lsr.w	r3, r0, r3
 8001198:	430b      	orrs	r3, r1
 800119a:	fbbc f1f6 	udiv	r1, ip, r6
 800119e:	0c1a      	lsrs	r2, r3, #16
 80011a0:	fb06 cc11 	mls	ip, r6, r1, ip
 80011a4:	fa1f f884 	uxth.w	r8, r4
 80011a8:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 80011ac:	fb08 f201 	mul.w	r2, r8, r1
 80011b0:	4562      	cmp	r2, ip
 80011b2:	fa00 f507 	lsl.w	r5, r0, r7
 80011b6:	d909      	bls.n	80011cc <__udivdi3+0x218>
 80011b8:	eb1c 0c04 	adds.w	ip, ip, r4
 80011bc:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80011c0:	d233      	bcs.n	800122a <__udivdi3+0x276>
 80011c2:	4562      	cmp	r2, ip
 80011c4:	bf84      	itt	hi
 80011c6:	3902      	subhi	r1, #2
 80011c8:	44a4      	addhi	ip, r4
 80011ca:	d92e      	bls.n	800122a <__udivdi3+0x276>
 80011cc:	ebc2 0c0c 	rsb	ip, r2, ip
 80011d0:	fbbc f2f6 	udiv	r2, ip, r6
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	fb06 cc12 	mls	ip, r6, r2, ip
 80011da:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80011de:	fb08 f002 	mul.w	r0, r8, r2
 80011e2:	4298      	cmp	r0, r3
 80011e4:	d909      	bls.n	80011fa <__udivdi3+0x246>
 80011e6:	191b      	adds	r3, r3, r4
 80011e8:	f102 37ff 	add.w	r7, r2, #4294967295	; 0xffffffff
 80011ec:	d204      	bcs.n	80011f8 <__udivdi3+0x244>
 80011ee:	4298      	cmp	r0, r3
 80011f0:	bf84      	itt	hi
 80011f2:	3a02      	subhi	r2, #2
 80011f4:	191b      	addhi	r3, r3, r4
 80011f6:	d800      	bhi.n	80011fa <__udivdi3+0x246>
 80011f8:	463a      	mov	r2, r7
 80011fa:	1a1b      	subs	r3, r3, r0
 80011fc:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8001200:	4647      	mov	r7, r8
 8001202:	e742      	b.n	800108a <__udivdi3+0xd6>
 8001204:	460b      	mov	r3, r1
 8001206:	e718      	b.n	800103a <__udivdi3+0x86>
 8001208:	4660      	mov	r0, ip
 800120a:	e754      	b.n	80010b6 <__udivdi3+0x102>
 800120c:	461a      	mov	r2, r3
 800120e:	e768      	b.n	80010e2 <__udivdi3+0x12e>
 8001210:	42ae      	cmp	r6, r5
 8001212:	bf84      	itt	hi
 8001214:	3f02      	subhi	r7, #2
 8001216:	18ed      	addhi	r5, r5, r3
 8001218:	d89b      	bhi.n	8001152 <__udivdi3+0x19e>
 800121a:	e799      	b.n	8001150 <__udivdi3+0x19c>
 800121c:	42b7      	cmp	r7, r6
 800121e:	bf84      	itt	hi
 8001220:	f1ac 0c02 	subhi.w	ip, ip, #2
 8001224:	18f6      	addhi	r6, r6, r3
 8001226:	d883      	bhi.n	8001130 <__udivdi3+0x17c>
 8001228:	e781      	b.n	800112e <__udivdi3+0x17a>
 800122a:	4601      	mov	r1, r0
 800122c:	e7ce      	b.n	80011cc <__udivdi3+0x218>
 800122e:	bf00      	nop

08001230 <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 8001230:	b510      	push	{r4, lr}
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 8001232:	f002 f803 	bl	800323c <vPortEnterCritical>

    int t = TIM7->CNT;
 8001236:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800123a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800123e:	6a59      	ldr	r1, [r3, #36]	; 0x24
    if (t < t0)
 8001240:	f640 1304 	movw	r3, #2308	; 0x904
 8001244:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001248:	881b      	ldrh	r3, [r3, #0]
 800124a:	428b      	cmp	r3, r1
        t += 0x10000;
 800124c:	bfc8      	it	gt
 800124e:	f501 3180 	addgt.w	r1, r1, #65536	; 0x10000

    tickcount += t - t0;
 8001252:	1ac8      	subs	r0, r1, r3
 8001254:	f640 1408 	movw	r4, #2312	; 0x908
 8001258:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800125c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8001260:	1812      	adds	r2, r2, r0
 8001262:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
 8001266:	e9c4 2300 	strd	r2, r3, [r4]
    t0 = t;
 800126a:	f640 1304 	movw	r3, #2308	; 0x904
 800126e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001272:	8019      	strh	r1, [r3, #0]

    vPortExitCritical();
 8001274:	f001 ffee 	bl	8003254 <vPortExitCritical>

    return tickcount;
}
 8001278:	e9d4 0100 	ldrd	r0, r1, [r4]
 800127c:	bd10      	pop	{r4, pc}
 800127e:	bf00      	nop

08001280 <delay_us>:
 * \param  us  number of microseconds to wait.
 * \note   The actual delay will last between us and (us-1) microseconds.
 *         To wait _at_least_ 1 us, you should use delay_us(2).
 */
void delay_us(unsigned long us)
{
 8001280:	b410      	push	{r4}
    uint16_t  t0 = TIM7->CNT;
 8001282:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001286:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800128a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800128c:	b292      	uxth	r2, r2
    for (;;) {
        int  t = TIM7->CNT;
 800128e:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 8001292:	f2c4 0400 	movt	r4, #16384	; 0x4000
 8001296:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (t < t0)
 8001298:	4611      	mov	r1, r2
 800129a:	429a      	cmp	r2, r3
            t += 0x10000;
 800129c:	bfc8      	it	gt
 800129e:	f503 3380 	addgt.w	r3, r3, #65536	; 0x10000

        if (us < t - t0)
 80012a2:	1a9a      	subs	r2, r3, r2
 80012a4:	4282      	cmp	r2, r0
 80012a6:	d803      	bhi.n	80012b0 <delay_us+0x30>
            return;

        us -= t - t0;
 80012a8:	1ac9      	subs	r1, r1, r3
 80012aa:	4408      	add	r0, r1
        t0  = t;
 80012ac:	b29a      	uxth	r2, r3
    }
 80012ae:	e7f2      	b.n	8001296 <delay_us+0x16>
}
 80012b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop

080012b8 <delay_ms>:
 * Perform a millisecond delay
 *
 * \param  ms  number of milliseconds to wait.
 */
void delay_ms(unsigned long ms)
{
 80012b8:	b508      	push	{r3, lr}
    delay_us(ms * 1000);
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	fb03 f000 	mul.w	r0, r3, r0
 80012c2:	f7ff ffdd 	bl	8001280 <delay_us>
 80012c6:	bd08      	pop	{r3, pc}

080012c8 <init_us_timer>:
/**
 * Set up TIM7 as a 16bit, microsecond-timer.
 *
 */
void init_us_timer()
{
 80012c8:	b500      	push	{lr}
 80012ca:	b085      	sub	sp, #20
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq(&RCC_Clocks);
 80012cc:	4668      	mov	r0, sp
 80012ce:	f002 f99b 	bl	8003608 <RCC_GetClocksFreq>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);
 80012d2:	2020      	movs	r0, #32
 80012d4:	2101      	movs	r1, #1
 80012d6:	f002 fadb 	bl	8003890 <RCC_APB1PeriphClockCmd>

    RCC->APB1ENR |= RCC_APB1Periph_TIM7;
 80012da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012e4:	f042 0220 	orr.w	r2, r2, #32
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
    TIM7->PSC = (RCC_Clocks.PCLK2_Frequency / 1000000) - 1;
 80012ea:	f64d 6383 	movw	r3, #56963	; 0xde83
 80012ee:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80012f2:	9a03      	ldr	r2, [sp, #12]
 80012f4:	fba3 1302 	umull	r1, r3, r3, r2
 80012f8:	0c9b      	lsrs	r3, r3, #18
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001302:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001306:	8503      	strh	r3, [r0, #40]	; 0x28
    TIM7->ARR = 0xFFFF;
 8001308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130c:	62c3      	str	r3, [r0, #44]	; 0x2c
    TIM7->CR1 = TIM_CR1_CEN;
 800130e:	2101      	movs	r1, #1
 8001310:	8001      	strh	r1, [r0, #0]

    TIM_Cmd(TIM7, ENABLE);
 8001312:	f002 fdf9 	bl	8003f08 <TIM_Cmd>
}
 8001316:	b005      	add	sp, #20
 8001318:	f85d fb04 	ldr.w	pc, [sp], #4

0800131c <vUSART_command_handler>:
// USART_IRQ():
//  create task copy_buffer() with high priority and pass pointer to buffer 
//  copy_buffer() will then have a callback function which will be command_handler which will pass newly copied pointer
//USE sent_mutex to check if usart has sent message

void vUSART_command_handler (char *pos) {
 800131c:	b510      	push	{r4, lr}
 800131e:	4604      	mov	r4, r0
    char term = '\003';
    replace_char(pos, ' ', term);
 8001320:	2120      	movs	r1, #32
 8001322:	2203      	movs	r2, #3
 8001324:	f000 fd86 	bl	8001e34 <replace_char>
    command_routing(pos, term);
 8001328:	4620      	mov	r0, r4
 800132a:	2103      	movs	r1, #3
 800132c:	f001 f8fa 	bl	8002524 <command_routing>
    vTaskDelete(NULL);
 8001330:	2000      	movs	r0, #0
 8001332:	f001 fa93 	bl	800285c <vTaskDelete>
 8001336:	bd10      	pop	{r4, pc}

08001338 <USART1_IRQHandler>:
    }

}


void USART1_IRQHandler(void){
 8001338:	b570      	push	{r4, r5, r6, lr}
 800133a:	b084      	sub	sp, #16
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART1, USART_IT_RXNE)){
 800133c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001340:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001344:	f240 5125 	movw	r1, #1317	; 0x525
 8001348:	f002 ff3c 	bl	80041c4 <USART_GetITStatus>
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 8097 	beq.w	8001480 <USART1_IRQHandler+0x148>
        static unsigned int count=0;

		
		//static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART2 data register is saved in t
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800135a:	8899      	ldrh	r1, [r3, #4]
 800135c:	b2c9      	uxtb	r1, r1


        if (t == 8 || t== 127) {
 800135e:	297f      	cmp	r1, #127	; 0x7f
 8001360:	bf18      	it	ne
 8001362:	2908      	cmpne	r1, #8
 8001364:	d11a      	bne.n	800139c <USART1_IRQHandler+0x64>
            USART1_rtos.write_pos--;
 8001366:	f640 4398 	movw	r3, #3224	; 0xc98
 800136a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	3a01      	subs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
            USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 8001374:	4413      	add	r3, r2
 8001376:	220d      	movs	r2, #13
 8001378:	771a      	strb	r2, [r3, #28]
            USART_put(USART1, '\b');
 800137a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800137e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001382:	4620      	mov	r0, r4
 8001384:	2108      	movs	r1, #8
 8001386:	f000 fc75 	bl	8001c74 <USART_put>
            USART_put(USART1, ' ');
 800138a:	4620      	mov	r0, r4
 800138c:	2120      	movs	r1, #32
 800138e:	f000 fc71 	bl	8001c74 <USART_put>
            USART_put(USART1, '\b');
 8001392:	4620      	mov	r0, r4
 8001394:	2108      	movs	r1, #8
 8001396:	f000 fc6d 	bl	8001c74 <USART_put>
            return;
 800139a:	e071      	b.n	8001480 <USART1_IRQHandler+0x148>

        }

		// check if the received character is not the LF character (used to determine end of string) 
		// or the if the maximum string length has been been reached 
		else if/*(*/ (t != '\r')/* && (cnt< MAX_STRLEN-1) )*/{ 
 800139c:	290d      	cmp	r1, #13
 800139e:	d026      	beq.n	80013ee <USART1_IRQHandler+0xb6>
            count++;
 80013a0:	f640 1310 	movw	r3, #2320	; 0x910
 80013a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	3201      	adds	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
        if (USART1_rtos.write_pos == USART_BUFFER_LEN-1) USART1_rtos.write_pos=0;
 80013ae:	f640 4398 	movw	r3, #3224	; 0xc98
 80013b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	f240 132b 	movw	r3, #299	; 0x12b
 80013bc:	429a      	cmp	r2, r3
 80013be:	bf01      	itttt	eq
 80013c0:	f640 4398 	movweq	r3, #3224	; 0xc98
 80013c4:	f2c2 0300 	movteq	r3, #8192	; 0x2000
 80013c8:	2200      	moveq	r2, #0
 80013ca:	601a      	streq	r2, [r3, #0]

			USART1_rtos.buffer[USART1_rtos.write_pos] = t;
 80013cc:	f640 4498 	movw	r4, #3224	; 0xc98
 80013d0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	4423      	add	r3, r4
 80013d8:	7719      	strb	r1, [r3, #28]
            USART_put(USART1, t);
 80013da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80013de:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80013e2:	f000 fc47 	bl	8001c74 <USART_put>
            USART1_rtos.write_pos++;
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	e048      	b.n	8001480 <USART1_IRQHandler+0x148>

		}

		else{ // otherwise reset the character counter and print newline 
            if (count != 0) {
 80013ee:	f640 1310 	movw	r3, #2320	; 0x910
 80013f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d037      	beq.n	800146c <USART1_IRQHandler+0x134>
                
                USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 80013fc:	f640 4498 	movw	r4, #3224	; 0xc98
 8001400:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8001404:	6823      	ldr	r3, [r4, #0]
 8001406:	4423      	add	r3, r4
 8001408:	220d      	movs	r2, #13
 800140a:	771a      	strb	r2, [r3, #28]

                USART_puts(USART1, "\r\n");
 800140c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001410:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001414:	f248 01d8 	movw	r1, #32984	; 0x80d8
 8001418:	f6c0 0100 	movt	r1, #2048	; 0x800
 800141c:	f000 fc3c 	bl	8001c98 <USART_puts>

                //char *pos = &USART1_received_string[USART1_write_pos-count];
                //char command[len];
//                USART_readline(USART1, &command, len);
                char *pos = &USART1_rtos.buffer[USART1_rtos.write_pos-count];
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	f640 1610 	movw	r6, #2320	; 0x910
 8001426:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800142a:	6833      	ldr	r3, [r6, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	4423      	add	r3, r4


                xTaskCreate(vUSART_command_handler, (signed char*)"vUSART_command_handler", 468, pos, tskIDLE_PRIORITY+9, NULL);
 8001430:	2209      	movs	r2, #9
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	2500      	movs	r5, #0
 8001436:	9501      	str	r5, [sp, #4]
 8001438:	9502      	str	r5, [sp, #8]
 800143a:	9503      	str	r5, [sp, #12]
 800143c:	f241 301d 	movw	r0, #4893	; 0x131d
 8001440:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001444:	f647 71b8 	movw	r1, #32696	; 0x7fb8
 8001448:	f6c0 0100 	movt	r1, #2048	; 0x800
 800144c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8001450:	331c      	adds	r3, #28
 8001452:	f001 f961 	bl	8002718 <xTaskGenericCreate>
//                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY, NULL);


                xSemaphoreGive(USART1_rtos.transmit_event_mutex);
 8001456:	69a0      	ldr	r0, [r4, #24]
 8001458:	4629      	mov	r1, r5
 800145a:	462a      	mov	r2, r5
 800145c:	462b      	mov	r3, r5
 800145e:	f001 fd67 	bl	8002f30 <xQueueGenericSend>

                count = 0;
 8001462:	6035      	str	r5, [r6, #0]
                USART1_rtos.write_pos++;
 8001464:	6823      	ldr	r3, [r4, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	6023      	str	r3, [r4, #0]
 800146a:	e009      	b.n	8001480 <USART1_IRQHandler+0x148>

            }
            else USART_puts(USART1, "\r\n");
 800146c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001470:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001474:	f248 01d8 	movw	r1, #32984	; 0x80d8
 8001478:	f6c0 0100 	movt	r1, #2048	; 0x800
 800147c:	f000 fc0c 	bl	8001c98 <USART_puts>
		}
	}
}
 8001480:	b004      	add	sp, #16
 8001482:	bd70      	pop	{r4, r5, r6, pc}

08001484 <USART1_Init>:
*/

//Initialize GPIO and USART2
//

void USART1_Init(void) {
 8001484:	b530      	push	{r4, r5, lr}
 8001486:	b089      	sub	sp, #36	; 0x24

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001488:	2002      	movs	r0, #2
 800148a:	2101      	movs	r1, #1
 800148c:	f002 f9d8 	bl	8003840 <RCC_AHB1PeriphClockCmd>

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);	
 8001490:	2010      	movs	r0, #16
 8001492:	2101      	movs	r1, #1
 8001494:	f002 fa24 	bl	80038e0 <RCC_APB2PeriphClockCmd>
	USART_InitTypeDef USART_InitStructure;

    NVIC_InitTypeDef NVIC_InitStructure;

	//GPIO Configuration
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6;
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	9306      	str	r3, [sp, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800149c:	2302      	movs	r3, #2
 800149e:	f88d 301c 	strb.w	r3, [sp, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80014a2:	2400      	movs	r4, #0
 80014a4:	f88d 401e 	strb.w	r4, [sp, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80014a8:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80014ac:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80014b0:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80014b4:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80014b8:	4628      	mov	r0, r5
 80014ba:	a906      	add	r1, sp, #24
 80014bc:	f001 ff7a 	bl	80033b4 <GPIO_Init>


	//Connect USART pins to AF
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 80014c0:	4628      	mov	r0, r5
 80014c2:	2106      	movs	r1, #6
 80014c4:	2207      	movs	r2, #7
 80014c6:	f002 f839 	bl	800353c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 80014ca:	4628      	mov	r0, r5
 80014cc:	2107      	movs	r1, #7
 80014ce:	460a      	mov	r2, r1
 80014d0:	f002 f834 	bl	800353c <GPIO_PinAFConfig>


	//USART Parameters
	USART_InitStructure.USART_BaudRate = 38400;
 80014d4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014d8:	9302      	str	r3, [sp, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80014da:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80014de:	f8ad 400e 	strh.w	r4, [sp, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 80014e2:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80014e6:	f8ad 4014 	strh.w	r4, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 80014ea:	230c      	movs	r3, #12
 80014ec:	f8ad 3012 	strh.w	r3, [sp, #18]

	//Configuring And Enabling USART2
	USART_Init(USART1, &USART_InitStructure);
 80014f0:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80014f4:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80014f8:	4628      	mov	r0, r5
 80014fa:	a902      	add	r1, sp, #8
 80014fc:	f002 fd24 	bl	8003f48 <USART_Init>


    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //allow usart interrupt
 8001500:	4628      	mov	r0, r5
 8001502:	f240 5125 	movw	r1, #1317	; 0x525
 8001506:	2201      	movs	r2, #1
 8001508:	f002 fe14 	bl	8004134 <USART_ITConfig>

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800150c:	2325      	movs	r3, #37	; 0x25
 800150e:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001512:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001516:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800151a:	2401      	movs	r4, #1
 800151c:	f88d 4007 	strb.w	r4, [sp, #7]

    NVIC_Init(&NVIC_InitStructure);
 8001520:	a801      	add	r0, sp, #4
 8001522:	f001 fee1 	bl	80032e8 <NVIC_Init>

	USART_Cmd(USART1, ENABLE);
 8001526:	4628      	mov	r0, r5
 8001528:	4621      	mov	r1, r4
 800152a:	f002 fdd1 	bl	80040d0 <USART_Cmd>


}
 800152e:	b009      	add	sp, #36	; 0x24
 8001530:	bd30      	pop	{r4, r5, pc}
 8001532:	bf00      	nop

08001534 <initx>:
void initx(void){
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	b089      	sub	sp, #36	; 0x24
	//Enable GPIO Clocks For USART2
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001538:	2001      	movs	r0, #1
 800153a:	4601      	mov	r1, r0
 800153c:	f002 f980 	bl	8003840 <RCC_AHB1PeriphClockCmd>

	//Enable Clocks for USART2
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
 8001540:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001544:	2101      	movs	r1, #1
 8001546:	f002 f9a3 	bl	8003890 <RCC_APB1PeriphClockCmd>
	USART_InitTypeDef USART_InitStructure;

    NVIC_InitTypeDef NVIC_InitStructure;

	//GPIO Configuration
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800154a:	270c      	movs	r7, #12
 800154c:	9706      	str	r7, [sp, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800154e:	2602      	movs	r6, #2
 8001550:	f88d 601c 	strb.w	r6, [sp, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001554:	2400      	movs	r4, #0
 8001556:	f88d 401e 	strb.w	r4, [sp, #30]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800155a:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800155e:	f88d 601d 	strb.w	r6, [sp, #29]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001562:	4625      	mov	r5, r4
 8001564:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001568:	4628      	mov	r0, r5
 800156a:	a906      	add	r1, sp, #24
 800156c:	f001 ff22 	bl	80033b4 <GPIO_Init>


	//Connect USART pins to AF
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8001570:	4628      	mov	r0, r5
 8001572:	4631      	mov	r1, r6
 8001574:	2207      	movs	r2, #7
 8001576:	f001 ffe1 	bl	800353c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 800157a:	4628      	mov	r0, r5
 800157c:	2103      	movs	r1, #3
 800157e:	2207      	movs	r2, #7
 8001580:	f001 ffdc 	bl	800353c <GPIO_PinAFConfig>

	//Initialize LED
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001584:	2008      	movs	r0, #8
 8001586:	2101      	movs	r1, #1
 8001588:	f002 f95a 	bl	8003840 <RCC_AHB1PeriphClockCmd>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 800158c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001590:	9306      	str	r3, [sp, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001592:	2501      	movs	r5, #1
 8001594:	f88d 501c 	strb.w	r5, [sp, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001598:	f88d 401e 	strb.w	r4, [sp, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800159c:	2303      	movs	r3, #3
 800159e:	f88d 301d 	strb.w	r3, [sp, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80015a2:	f88d 401f 	strb.w	r4, [sp, #31]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 80015a6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80015aa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015ae:	a906      	add	r1, sp, #24
 80015b0:	f001 ff00 	bl	80033b4 <GPIO_Init>

	//USART Parameters
	USART_InitStructure.USART_BaudRate = 38400;
 80015b4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80015b8:	9302      	str	r3, [sp, #8]
	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80015ba:	f8ad 400c 	strh.w	r4, [sp, #12]
	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80015be:	f8ad 400e 	strh.w	r4, [sp, #14]
	USART_InitStructure.USART_Parity = USART_Parity_No ;
 80015c2:	f8ad 4010 	strh.w	r4, [sp, #16]
	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80015c6:	f8ad 4014 	strh.w	r4, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 80015ca:	f8ad 7012 	strh.w	r7, [sp, #18]

	//Configuring And Enabling USART2
	USART_Init(USART2, &USART_InitStructure);
 80015ce:	f44f 4688 	mov.w	r6, #17408	; 0x4400
 80015d2:	f2c4 0600 	movt	r6, #16384	; 0x4000
 80015d6:	4630      	mov	r0, r6
 80015d8:	a902      	add	r1, sp, #8
 80015da:	f002 fcb5 	bl	8003f48 <USART_Init>


    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80015de:	4630      	mov	r0, r6
 80015e0:	f240 5125 	movw	r1, #1317	; 0x525
 80015e4:	462a      	mov	r2, r5
 80015e6:	f002 fda5 	bl	8004134 <USART_ITConfig>

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 80015ea:	2326      	movs	r3, #38	; 0x26
 80015ec:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80015f0:	f88d 4005 	strb.w	r4, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80015f4:	f88d 4006 	strb.w	r4, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80015f8:	f88d 5007 	strb.w	r5, [sp, #7]

    NVIC_Init(&NVIC_InitStructure);
 80015fc:	a801      	add	r0, sp, #4
 80015fe:	f001 fe73 	bl	80032e8 <NVIC_Init>

	USART_Cmd(USART2, ENABLE);
 8001602:	4630      	mov	r0, r6
 8001604:	4629      	mov	r1, r5
 8001606:	f002 fd63 	bl	80040d0 <USART_Cmd>

}
 800160a:	b009      	add	sp, #36	; 0x24
 800160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800160e:	bf00      	nop

08001610 <vRTC_Init>:

} command_data;

#define HEX_2_DEC(val) (((val)/16)*10+((val)%16))

void vRTC_Init(void) {
 8001610:	b530      	push	{r4, r5, lr}
 8001612:	b087      	sub	sp, #28
    RTC_InitTypeDef RTC_InitStructure;
    RTC_TimeTypeDef RTC_TimeStructure;
    RTC_DateTypeDef RTC_DateStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 8001614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001618:	2101      	movs	r1, #1
 800161a:	f002 f939 	bl	8003890 <RCC_APB1PeriphClockCmd>
    PWR_BackupAccessCmd(ENABLE);
 800161e:	2001      	movs	r0, #1
 8001620:	f001 ffd2 	bl	80035c8 <PWR_BackupAccessCmd>

    RCC_LSICmd(ENABLE);
 8001624:	2001      	movs	r0, #1
 8001626:	f001 ffdf 	bl	80035e8 <RCC_LSICmd>
    while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 800162a:	2461      	movs	r4, #97	; 0x61
 800162c:	4620      	mov	r0, r4
 800162e:	f002 f97f 	bl	8003930 <RCC_GetFlagStatus>
 8001632:	2800      	cmp	r0, #0
 8001634:	d0fa      	beq.n	800162c <vRTC_Init+0x1c>
    RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 8001636:	f44f 7000 	mov.w	r0, #512	; 0x200
 800163a:	f002 f8b9 	bl	80037b0 <RCC_RTCCLKConfig>
    RCC_RTCCLKCmd(ENABLE);
 800163e:	2001      	movs	r0, #1
 8001640:	f002 f8ee 	bl	8003820 <RCC_RTCCLKCmd>
    RTC_WaitForSynchro();
 8001644:	f002 fa84 	bl	8003b50 <RTC_WaitForSynchro>

    if (RTC_ReadBackupRegister(RTC_BKP_DR0)!=0x9527) {
 8001648:	2000      	movs	r0, #0
 800164a:	f002 fc0b 	bl	8003e64 <RTC_ReadBackupRegister>
 800164e:	f249 5327 	movw	r3, #38183	; 0x9527
 8001652:	4298      	cmp	r0, r3
 8001654:	d039      	beq.n	80016ca <vRTC_Init+0xba>
        RTC_WriteProtectionCmd(DISABLE); 
 8001656:	2000      	movs	r0, #0
 8001658:	f002 fa04 	bl	8003a64 <RTC_WriteProtectionCmd>
        RTC_EnterInitMode();
 800165c:	f002 fa22 	bl	8003aa4 <RTC_EnterInitMode>

        RTC_InitStructure.RTC_HourFormat = RTC_HourFormat_24;
 8001660:	2400      	movs	r4, #0
 8001662:	9403      	str	r4, [sp, #12]
        RTC_InitStructure.RTC_AsynchPrediv = 0x7D-1;
 8001664:	237c      	movs	r3, #124	; 0x7c
 8001666:	9304      	str	r3, [sp, #16]
        RTC_InitStructure.RTC_SynchPrediv = 0xFF-1;
 8001668:	23fe      	movs	r3, #254	; 0xfe
 800166a:	9305      	str	r3, [sp, #20]
        RTC_Init(&RTC_InitStructure);
 800166c:	a803      	add	r0, sp, #12
 800166e:	f002 f9a1 	bl	80039b4 <RTC_Init>

        RTC_TimeStructure.RTC_Seconds = 0x00;
 8001672:	f88d 400a 	strb.w	r4, [sp, #10]
        RTC_TimeStructure.RTC_Minutes = 0x01;
 8001676:	2501      	movs	r5, #1
 8001678:	f88d 5009 	strb.w	r5, [sp, #9]
        RTC_TimeStructure.RTC_Hours = 0x01;
 800167c:	f88d 5008 	strb.w	r5, [sp, #8]
        RTC_TimeStructure.RTC_H12 = RTC_H12_AM;
 8001680:	f88d 400b 	strb.w	r4, [sp, #11]
        RTC_SetTime(RTC_Format_BCD,&RTC_TimeStructure);
 8001684:	4628      	mov	r0, r5
 8001686:	a902      	add	r1, sp, #8
 8001688:	f002 fab0 	bl	8003bec <RTC_SetTime>

        RTC_DateStructure.RTC_Date = 30;
 800168c:	231e      	movs	r3, #30
 800168e:	f88d 3006 	strb.w	r3, [sp, #6]
        RTC_DateStructure.RTC_Month = 5;
 8001692:	2305      	movs	r3, #5
 8001694:	f88d 3005 	strb.w	r3, [sp, #5]
        RTC_DateStructure.RTC_WeekDay= RTC_Weekday_Thursday;
 8001698:	2304      	movs	r3, #4
 800169a:	f88d 3004 	strb.w	r3, [sp, #4]
        RTC_DateStructure.RTC_Year = 12;
 800169e:	230c      	movs	r3, #12
 80016a0:	f88d 3007 	strb.w	r3, [sp, #7]
        RTC_SetDate(RTC_Format_BCD,&RTC_DateStructure);
 80016a4:	4628      	mov	r0, r5
 80016a6:	a901      	add	r1, sp, #4
 80016a8:	f002 fb32 	bl	8003d10 <RTC_SetDate>

        RTC_ExitInitMode();
 80016ac:	f002 fa3e 	bl	8003b2c <RTC_ExitInitMode>
        RTC_WriteBackupRegister(RTC_BKP_DR0,0X9527);
 80016b0:	4620      	mov	r0, r4
 80016b2:	f249 5127 	movw	r1, #38183	; 0x9527
 80016b6:	f002 fbbb 	bl	8003e30 <RTC_WriteBackupRegister>
        RTC_WriteProtectionCmd(ENABLE);
 80016ba:	4628      	mov	r0, r5
 80016bc:	f002 f9d2 	bl	8003a64 <RTC_WriteProtectionCmd>
        RTC_WriteBackupRegister(RTC_BKP_DR0,0x9527);  //Initialization is complete, set the flag
 80016c0:	4620      	mov	r0, r4
 80016c2:	f249 5127 	movw	r1, #38183	; 0x9527
 80016c6:	f002 fbb3 	bl	8003e30 <RTC_WriteBackupRegister>
    }

      PWR_BackupAccessCmd(DISABLE);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f001 ff7c 	bl	80035c8 <PWR_BackupAccessCmd>
}
 80016d0:	b007      	add	sp, #28
 80016d2:	bd30      	pop	{r4, r5, pc}

080016d4 <main>:
        }
        USART_puts(USART1, "=----DONE----=\r\n");
    }
}

int main(void){
 80016d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80016d8:	b08c      	sub	sp, #48	; 0x30
	//Call initx(); To Initialize USART & GPIO

	initx();
 80016da:	f7ff ff2b 	bl	8001534 <initx>
    USART1_Init();
 80016de:	f7ff fed1 	bl	8001484 <USART1_Init>
    init_us_timer();
 80016e2:	f7ff fdf1 	bl	80012c8 <init_us_timer>
    vRTC_Init();
 80016e6:	f7ff ff93 	bl	8001610 <vRTC_Init>


    USART_rtos_init(&USART1_rtos, USART1);
 80016ea:	f640 4498 	movw	r4, #3224	; 0xc98
 80016ee:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80016f2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80016f6:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80016fa:	4620      	mov	r0, r4
 80016fc:	4629      	mov	r1, r5
 80016fe:	f000 faa5 	bl	8001c4c <USART_rtos_init>
    setup_output(&USART1_rtos);
 8001702:	4620      	mov	r0, r4
 8001704:	f000 fb90 	bl	8001e28 <setup_output>
    //CLOCK_SetClockTo168MHz();
   // setSysTick();

    int i;

    USART_puts(USART1, "\nBooting up...\r\n");
 8001708:	4628      	mov	r0, r5
 800170a:	f248 01f8 	movw	r1, #33016	; 0x80f8
 800170e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001712:	f000 fac1 	bl	8001c98 <USART_puts>
    for(i=0; i<2; i++) { 
 8001716:	2500      	movs	r5, #0
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8001718:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 800171c:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001720:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
        GPIO_SetBits(GPIOD, GPIO_Pin_13);
 8001724:	f44f 5900 	mov.w	r9, #8192	; 0x2000
        GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8001728:	f44f 4880 	mov.w	r8, #16384	; 0x4000
        GPIO_SetBits(GPIOD, GPIO_Pin_15);
 800172c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
        delay_ms(500);
 8001730:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   // setSysTick();

    int i;

    USART_puts(USART1, "\nBooting up...\r\n");
    for(i=0; i<2; i++) { 
 8001734:	e01b      	b.n	800176e <main+0x9a>
        GPIO_SetBits(GPIOD, GPIO_Pin_12);
 8001736:	4620      	mov	r0, r4
 8001738:	4651      	mov	r1, sl
 800173a:	f001 fee3 	bl	8003504 <GPIO_SetBits>
        GPIO_SetBits(GPIOD, GPIO_Pin_13);
 800173e:	4620      	mov	r0, r4
 8001740:	4649      	mov	r1, r9
 8001742:	f001 fedf 	bl	8003504 <GPIO_SetBits>
        GPIO_SetBits(GPIOD, GPIO_Pin_14);
 8001746:	4620      	mov	r0, r4
 8001748:	4641      	mov	r1, r8
 800174a:	f001 fedb 	bl	8003504 <GPIO_SetBits>
        GPIO_SetBits(GPIOD, GPIO_Pin_15);
 800174e:	4620      	mov	r0, r4
 8001750:	4639      	mov	r1, r7
 8001752:	f001 fed7 	bl	8003504 <GPIO_SetBits>
        delay_ms(500);
 8001756:	4630      	mov	r0, r6
 8001758:	f7ff fdae 	bl	80012b8 <delay_ms>

        GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 800175c:	4620      	mov	r0, r4
 800175e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001762:	f001 fedd 	bl	8003520 <GPIO_ResetBits>
        delay_ms(500);
 8001766:	4630      	mov	r0, r6
 8001768:	f7ff fda6 	bl	80012b8 <delay_ms>
   // setSysTick();

    int i;

    USART_puts(USART1, "\nBooting up...\r\n");
    for(i=0; i<2; i++) { 
 800176c:	3501      	adds	r5, #1
 800176e:	2d01      	cmp	r5, #1
 8001770:	dde1      	ble.n	8001736 <main+0x62>

        GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
        delay_ms(500);
    }

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001772:	2010      	movs	r0, #16
 8001774:	2101      	movs	r1, #1
 8001776:	f002 f863 	bl	8003840 <RCC_AHB1PeriphClockCmd>


    GPIO_InitTypeDef gpio_ppump;

    gpio_ppump.GPIO_Pin = GPIO_Pin_5; 
 800177a:	2720      	movs	r7, #32
 800177c:	970a      	str	r7, [sp, #40]	; 0x28
    gpio_ppump.GPIO_OType = GPIO_OType_PP; 
 800177e:	2600      	movs	r6, #0
 8001780:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
    gpio_ppump.GPIO_Mode = GPIO_Mode_OUT; 
 8001784:	2501      	movs	r5, #1
 8001786:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 800178a:	2302      	movs	r3, #2
 800178c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    GPIO_Init(GPIOE, &gpio_ppump);
 8001790:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001794:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8001798:	4620      	mov	r0, r4
 800179a:	a90a      	add	r1, sp, #40	; 0x28
 800179c:	f001 fe0a 	bl	80033b4 <GPIO_Init>

    GPIO_ResetBits(GPIOE, GPIO_Pin_5);
 80017a0:	4620      	mov	r0, r4
 80017a2:	4639      	mov	r1, r7
 80017a4:	f001 febc 	bl	8003520 <GPIO_ResetBits>
        GPIO_SetBits(GPIOE, GPIO_Pin_6);

*/


	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80017a8:	2004      	movs	r0, #4
 80017aa:	4629      	mov	r1, r5
 80017ac:	f002 f848 	bl	8003840 <RCC_AHB1PeriphClockCmd>

    GPIO_InitTypeDef gpio_ultrasonic;

    gpio_ultrasonic.GPIO_Pin = GPIO_Pin_7; //echo
 80017b0:	2780      	movs	r7, #128	; 0x80
 80017b2:	9708      	str	r7, [sp, #32]
    gpio_ultrasonic.GPIO_OType = GPIO_OType_PP;
 80017b4:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
    //gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_DOWN;
    gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 80017b8:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 80017bc:	2303      	movs	r3, #3
 80017be:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
    GPIO_Init(GPIOE, &gpio_ultrasonic);
 80017c2:	4620      	mov	r0, r4
 80017c4:	a908      	add	r1, sp, #32
 80017c6:	f001 fdf5 	bl	80033b4 <GPIO_Init>

    gpio_ultrasonic.GPIO_Pin = GPIO_Pin_8; //trigger
 80017ca:	f44f 7680 	mov.w	r6, #256	; 0x100
 80017ce:	9608      	str	r6, [sp, #32]
    gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 80017d0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    GPIO_Init(GPIOE, &gpio_ultrasonic);
 80017d4:	4620      	mov	r0, r4
 80017d6:	a908      	add	r1, sp, #32
 80017d8:	f001 fdec 	bl	80033b4 <GPIO_Init>



    UDS_Module uds;

    uds.port_in = GPIOE;
 80017dc:	9401      	str	r4, [sp, #4]
    uds.pin_in = GPIO_Pin_7;
 80017de:	f8ad 700c 	strh.w	r7, [sp, #12]
    uds.port_out = GPIOE;
 80017e2:	9402      	str	r4, [sp, #8]
    uds.pin_out = GPIO_Pin_8;
 80017e4:	f8ad 600e 	strh.w	r6, [sp, #14]
    uds.timeout = 500;
 80017e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017ec:	f8ad 3010 	strh.w	r3, [sp, #16]

    UDS_Module_Init(&uds);
 80017f0:	a801      	add	r0, sp, #4
 80017f2:	f000 f9c3 	bl	8001b7c <UDS_Module_Init>


    USART_puts(USART1, "Starting UDS...\r\n");
 80017f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017fa:	f2c4 0001 	movt	r0, #16385	; 0x4001
 80017fe:	f248 110c 	movw	r1, #33036	; 0x810c
 8001802:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001806:	f000 fa47 	bl	8001c98 <USART_puts>
    while(1) {
        int d = UDS_Module_distance(&uds);
        USART_puts(USART1, "Distance: ");
 800180a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800180e:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001812:	f248 1720 	movw	r7, #33056	; 0x8120
 8001816:	f6c0 0700 	movt	r7, #2048	; 0x800
        USART_put_int(USART1, d);
        USART_puts(USART1, "\r\n");
 800181a:	f248 06d8 	movw	r6, #32984	; 0x80d8
 800181e:	f6c0 0600 	movt	r6, #2048	; 0x800
        delay_ms(1000);
 8001822:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    UDS_Module_Init(&uds);


    USART_puts(USART1, "Starting UDS...\r\n");
    while(1) {
        int d = UDS_Module_distance(&uds);
 8001826:	a801      	add	r0, sp, #4
 8001828:	f000 f9b2 	bl	8001b90 <UDS_Module_distance>
 800182c:	4605      	mov	r5, r0
        USART_puts(USART1, "Distance: ");
 800182e:	4620      	mov	r0, r4
 8001830:	4639      	mov	r1, r7
 8001832:	f000 fa31 	bl	8001c98 <USART_puts>
        USART_put_int(USART1, d);
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f000 fac1 	bl	8001dc0 <USART_put_int>
        USART_puts(USART1, "\r\n");
 800183e:	4620      	mov	r0, r4
 8001840:	4631      	mov	r1, r6
 8001842:	f000 fa29 	bl	8001c98 <USART_puts>
        delay_ms(1000);
 8001846:	4640      	mov	r0, r8
 8001848:	f7ff fd36 	bl	80012b8 <delay_ms>
 800184c:	e7eb      	b.n	8001826 <main+0x152>
 800184e:	bf00      	nop

08001850 <Reset_Handler>:
 8001850:	2100      	movs	r1, #0
 8001852:	e003      	b.n	800185c <LoopCopyDataInit>

08001854 <CopyDataInit>:
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <LoopFillZerobss+0x20>)
 8001856:	585b      	ldr	r3, [r3, r1]
 8001858:	5043      	str	r3, [r0, r1]
 800185a:	3104      	adds	r1, #4

0800185c <LoopCopyDataInit>:
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <LoopFillZerobss+0x24>)
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <LoopFillZerobss+0x28>)
 8001860:	1842      	adds	r2, r0, r1
 8001862:	429a      	cmp	r2, r3
 8001864:	d3f6      	bcc.n	8001854 <CopyDataInit>
 8001866:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopFillZerobss+0x2c>)
 8001868:	e002      	b.n	8001870 <LoopFillZerobss>

0800186a <FillZerobss>:
 800186a:	2300      	movs	r3, #0
 800186c:	f842 3b04 	str.w	r3, [r2], #4

08001870 <LoopFillZerobss>:
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LoopFillZerobss+0x30>)
 8001872:	429a      	cmp	r2, r3
 8001874:	d3f9      	bcc.n	800186a <FillZerobss>
 8001876:	480b      	ldr	r0, [pc, #44]	; (80018a4 <LoopFillZerobss+0x34>)
 8001878:	6801      	ldr	r1, [r0, #0]
 800187a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800187e:	6001      	str	r1, [r0, #0]
 8001880:	f000 f814 	bl	80018ac <SystemInit>
 8001884:	f002 fd16 	bl	80042b4 <__libc_init_array>
 8001888:	f7ff ff24 	bl	80016d4 <main>
 800188c:	4770      	bx	lr
 800188e:	0000      	.short	0x0000
 8001890:	080085b0 	.word	0x080085b0
 8001894:	20000000 	.word	0x20000000
 8001898:	200008e4 	.word	0x200008e4
 800189c:	200008e8 	.word	0x200008e8
 80018a0:	20000ed8 	.word	0x20000ed8
 80018a4:	e000ed88 	.word	0xe000ed88

080018a8 <ADC_IRQHandler>:
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>
 80018aa:	0000      	movs	r0, r0

080018ac <SystemInit>:
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	f042 0201 	orr.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80018ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80018f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018f8:	f243 0210 	movw	r2, #12304	; 0x3010
 80018fc:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001906:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800190a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800190e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001912:	6812      	ldr	r2, [r2, #0]
 8001914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800191e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	f000 f809 	bl	800193c <SetSysClock>
 800192a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800192e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop

0800193c <SetSysClock>:
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	2300      	movs	r3, #0
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800194e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001952:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001956:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3301      	adds	r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <SetSysClock+0x4a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001984:	d1ed      	bne.n	8001962 <SetSysClock+0x26>
 8001986:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800198a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <SetSysClock+0x62>
 8001998:	2301      	movs	r3, #1
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	e001      	b.n	80019a2 <SetSysClock+0x66>
 800199e:	2300      	movs	r3, #0
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	f040 8082 	bne.w	8001aae <SetSysClock+0x172>
 80019aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019b2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80019b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
 80019c2:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80019c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019ca:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80019ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80019e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019ea:	6892      	ldr	r2, [r2, #8]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80019f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019f6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80019fa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80019fe:	6892      	ldr	r2, [r2, #8]
 8001a00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a0e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a16:	6892      	ldr	r2, [r2, #8]
 8001a18:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a26:	f245 4208 	movw	r2, #21512	; 0x5408
 8001a2a:	f2c0 7240 	movt	r2, #1856	; 0x740
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a40:	6812      	ldr	r2, [r2, #0]
 8001a42:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	bf00      	nop
 8001a4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f6      	beq.n	8001a4a <SetSysClock+0x10e>
 8001a5c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a64:	f240 6205 	movw	r2, #1541	; 0x605
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a72:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a7a:	6892      	ldr	r2, [r2, #8]
 8001a7c:	f022 0203 	bic.w	r2, r2, #3
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a8a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001a8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a92:	6892      	ldr	r2, [r2, #8]
 8001a94:	f042 0202 	orr.w	r2, r2, #2
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	bf00      	nop
 8001a9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001aa0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d1f6      	bne.n	8001a9c <SetSysClock+0x160>
 8001aae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ab2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ab6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001aba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001abe:	6892      	ldr	r2, [r2, #8]
 8001ac0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001aca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ace:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001ad2:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8001ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ada:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001ade:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ae2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ae6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	bf00      	nop
 8001af4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001af8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f6      	beq.n	8001af4 <SetSysClock+0x1b8>
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 8001b10:	b430      	push	{r4, r5}
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 8001b12:	f640 53e0 	movw	r3, #3552	; 0xde0
 8001b16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b943      	cbnz	r3, 8001b30 <_sbrk_r+0x20>
        __brkval = &end;
 8001b1e:	f640 53e0 	movw	r3, #3552	; 0xde0
 8001b22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b26:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001b2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001b2e:	601a      	str	r2, [r3, #0]

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 8001b30:	f640 53e0 	movw	r3, #3552	; 0xde0
 8001b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	4411      	add	r1, r2
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 8001b3c:	f3ef 8508 	mrs	r5, MSP
 8001b40:	f240 0300 	movw	r3, #0
 8001b44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b48:	681c      	ldr	r4, [r3, #0]
 8001b4a:	1b2b      	subs	r3, r5, r4
 8001b4c:	4299      	cmp	r1, r3
        r->_errno = ENOMEM;
 8001b4e:	bf83      	ittte	hi
 8001b50:	230c      	movhi	r3, #12
 8001b52:	6003      	strhi	r3, [r0, #0]
        return (void*)-1;
 8001b54:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
    }

    void *ret = __brkval;
    __brkval += incr;
 8001b58:	f640 53e0 	movwls	r3, #3552	; 0xde0
 8001b5c:	bf9e      	ittt	ls
 8001b5e:	f2c2 0300 	movtls	r3, #8192	; 0x2000
 8001b62:	6019      	strls	r1, [r3, #0]

    return ret;
 8001b64:	4610      	movls	r0, r2
}
 8001b66:	bc30      	pop	{r4, r5}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop

08001b6c <__malloc_lock>:
    return -1;
}


void __malloc_lock(struct _reent *r)
{
 8001b6c:	b508      	push	{r3, lr}
    vPortEnterCritical();
 8001b6e:	f001 fb65 	bl	800323c <vPortEnterCritical>
 8001b72:	bd08      	pop	{r3, pc}

08001b74 <__malloc_unlock>:
}


void __malloc_unlock(struct _reent *r)
{
 8001b74:	b508      	push	{r3, lr}
    vPortExitCritical();
 8001b76:	f001 fb6d 	bl	8003254 <vPortExitCritical>
 8001b7a:	bd08      	pop	{r3, pc}

08001b7c <UDS_Module_Init>:
        module->state = MODULE_STANDBY;
        module->mutex = xSemaphoreCreateMutex();
    }
}

void UDS_Module_Init( UDS_Module *module) { 
 8001b7c:	b510      	push	{r4, lr}
    if (module) {
 8001b7e:	4604      	mov	r4, r0
 8001b80:	b120      	cbz	r0, 8001b8c <UDS_Module_Init+0x10>
        module->state = MODULE_STANDBY;
 8001b82:	2301      	movs	r3, #1
 8001b84:	7503      	strb	r3, [r0, #20]
        module->mutex = xSemaphoreCreateMutex();
 8001b86:	f001 fa3d 	bl	8003004 <xQueueCreateMutex>
 8001b8a:	6120      	str	r0, [r4, #16]
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	bf00      	nop

08001b90 <UDS_Module_distance>:
    }
}

int UDS_Module_distance(UDS_Module *module) {
 8001b90:	b570      	push	{r4, r5, r6, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	4604      	mov	r4, r0

  __IO uint8_t flag=0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f88d 3007 	strb.w	r3, [sp, #7]
  __IO uint32_t disTime=0;
 8001b9c:	9300      	str	r3, [sp, #0]

    GPIO_ResetBits(module->port_in, module->pin_in);
 8001b9e:	6800      	ldr	r0, [r0, #0]
 8001ba0:	8921      	ldrh	r1, [r4, #8]
 8001ba2:	f001 fcbd 	bl	8003520 <GPIO_ResetBits>

    GPIO_ResetBits(module->port_out, module->pin_out);
 8001ba6:	6860      	ldr	r0, [r4, #4]
 8001ba8:	8961      	ldrh	r1, [r4, #10]
 8001baa:	f001 fcb9 	bl	8003520 <GPIO_ResetBits>
    delay_us(2);
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f7ff fb66 	bl	8001280 <delay_us>
    GPIO_SetBits(module->port_out, module->pin_out);
 8001bb4:	6860      	ldr	r0, [r4, #4]
 8001bb6:	8961      	ldrh	r1, [r4, #10]
 8001bb8:	f001 fca4 	bl	8003504 <GPIO_SetBits>
    delay_us(11);
 8001bbc:	200b      	movs	r0, #11
 8001bbe:	f7ff fb5f 	bl	8001280 <delay_us>
    GPIO_ResetBits(module->port_out, module->pin_out);
 8001bc2:	6860      	ldr	r0, [r4, #4]
 8001bc4:	8961      	ldrh	r1, [r4, #10]
 8001bc6:	f001 fcab 	bl	8003520 <GPIO_ResetBits>

  while(flag == 0) {

    while(GPIO_ReadInputDataBit(module->port_in, module->pin_in) == SET) {
        disTime++;
        flag = 1;
 8001bca:	2501      	movs	r5, #1
        delay_us(1);
        if (disTime == module->timeout*1000) {
 8001bcc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    GPIO_SetBits(module->port_out, module->pin_out);
    delay_us(11);
    GPIO_ResetBits(module->port_out, module->pin_out);


  while(flag == 0) {
 8001bd0:	e013      	b.n	8001bfa <UDS_Module_distance+0x6a>

    while(GPIO_ReadInputDataBit(module->port_in, module->pin_in) == SET) {
        disTime++;
 8001bd2:	9b00      	ldr	r3, [sp, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	9300      	str	r3, [sp, #0]
        flag = 1;
 8001bd8:	f88d 5007 	strb.w	r5, [sp, #7]
        delay_us(1);
 8001bdc:	4628      	mov	r0, r5
 8001bde:	f7ff fb4f 	bl	8001280 <delay_us>
        if (disTime == module->timeout*1000) {
 8001be2:	89a2      	ldrh	r2, [r4, #12]
 8001be4:	fb06 f202 	mul.w	r2, r6, r2
 8001be8:	9b00      	ldr	r3, [sp, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d019      	beq.n	8001c22 <UDS_Module_distance+0x92>
    GPIO_ResetBits(module->port_out, module->pin_out);


  while(flag == 0) {

    while(GPIO_ReadInputDataBit(module->port_in, module->pin_in) == SET) {
 8001bee:	6820      	ldr	r0, [r4, #0]
 8001bf0:	8921      	ldrh	r1, [r4, #8]
 8001bf2:	f001 fc6d 	bl	80034d0 <GPIO_ReadInputDataBit>
 8001bf6:	2801      	cmp	r0, #1
 8001bf8:	d0eb      	beq.n	8001bd2 <UDS_Module_distance+0x42>
    GPIO_SetBits(module->port_out, module->pin_out);
    delay_us(11);
    GPIO_ResetBits(module->port_out, module->pin_out);


  while(flag == 0) {
 8001bfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001bfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001c02:	d0f4      	beq.n	8001bee <UDS_Module_distance+0x5e>
            return -1;
        }
    }
  }

    return disTime/CM_CONVERSION*2; //converts to centimeters
 8001c04:	ed9d 7a00 	vldr	s14, [sp]
 8001c08:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001c0c:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001c2c <UDS_Module_distance+0x9c>
 8001c10:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8001c14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1c:	ee17 0a90 	vmov	r0, s15
 8001c20:	e001      	b.n	8001c26 <UDS_Module_distance+0x96>
    while(GPIO_ReadInputDataBit(module->port_in, module->pin_in) == SET) {
        disTime++;
        flag = 1;
        delay_us(1);
        if (disTime == module->timeout*1000) {
            return -1;
 8001c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }
  }

    return disTime/CM_CONVERSION*2; //converts to centimeters
}
 8001c26:	b002      	add	sp, #8
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
 8001c2a:	bf00      	nop
 8001c2c:	4268cccd 	.word	0x4268cccd

08001c30 <USART_rtos_wait_send>:
#include "usart_rtos.h"
#include <stdlib.h>
#include <stdarg.h>


int USART_rtos_wait_send(USART_rtos_packet *packet) {
 8001c30:	b508      	push	{r3, lr}
 8001c32:	4603      	mov	r3, r0
    
    return (xSemaphoreTake(packet->sent_mutex, packet->max_block) == pdTRUE);
 8001c34:	6880      	ldr	r0, [r0, #8]
 8001c36:	2100      	movs	r1, #0
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	f001 fa04 	bl	8003048 <xQueueGenericReceive>
}
 8001c40:	2801      	cmp	r0, #1
 8001c42:	bf14      	ite	ne
 8001c44:	2000      	movne	r0, #0
 8001c46:	2001      	moveq	r0, #1
 8001c48:	bd08      	pop	{r3, pc}
 8001c4a:	bf00      	nop

08001c4c <USART_rtos_init>:
    }
    return -1;
}


void USART_rtos_init(USART_rtos *USARTx_rtos,USART_TypeDef *USARTx) { //pass usart_Rtos and usartx
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	4604      	mov	r4, r0
    USARTx_rtos->id = USARTx;
 8001c50:	6081      	str	r1, [r0, #8]
    USARTx_rtos->write_pos = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	6003      	str	r3, [r0, #0]
    USARTx_rtos->read_pos = 0;
 8001c56:	6043      	str	r3, [r0, #4]

    USARTx_rtos->transmit_mutex = xSemaphoreCreateMutex(); 
 8001c58:	f001 f9d4 	bl	8003004 <xQueueCreateMutex>
 8001c5c:	60e0      	str	r0, [r4, #12]
    USARTx_rtos->receive_mutex = xSemaphoreCreateMutex(); 
 8001c5e:	f001 f9d1 	bl	8003004 <xQueueCreateMutex>
 8001c62:	6120      	str	r0, [r4, #16]

    USARTx_rtos->transmit_event_mutex = xSemaphoreCreateMutex(); 
 8001c64:	f001 f9ce 	bl	8003004 <xQueueCreateMutex>
 8001c68:	61a0      	str	r0, [r4, #24]
    USARTx_rtos->receive_event_mutex = xSemaphoreCreateMutex(); 
 8001c6a:	f001 f9cb 	bl	8003004 <xQueueCreateMutex>
 8001c6e:	6160      	str	r0, [r4, #20]
 8001c70:	bd10      	pop	{r4, pc}
 8001c72:	bf00      	nop

08001c74 <USART_put>:
} 

void USART_put(USART_TypeDef* USARTx, volatile char c) {
 8001c74:	b500      	push	{lr}
 8001c76:	b083      	sub	sp, #12
 8001c78:	f88d 1007 	strb.w	r1, [sp, #7]
    // wait until data register is empty
    while(!(USARTx->SR & 0x00000040) );
 8001c7c:	8803      	ldrh	r3, [r0, #0]
 8001c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f9      	beq.n	8001c7c <USART_put+0x8>
    USART_SendData(USARTx, c);
 8001c88:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8001c8c:	f002 fa40 	bl	8004110 <USART_SendData>
}
 8001c90:	b003      	add	sp, #12
 8001c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c96:	bf00      	nop

08001c98 <USART_puts>:

void USART_puts(USART_TypeDef* USARTx, volatile char *s){
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4606      	mov	r6, r0
 8001c9c:	460c      	mov	r4, r1
	while(*s){
 8001c9e:	e007      	b.n	8001cb0 <USART_puts+0x18>
        USART_put(USARTx, *s);
 8001ca0:	4625      	mov	r5, r4
 8001ca2:	f815 1b01 	ldrb.w	r1, [r5], #1
 8001ca6:	4630      	mov	r0, r6
 8001ca8:	f7ff ffe4 	bl	8001c74 <USART_put>
		*s++;
 8001cac:	7823      	ldrb	r3, [r4, #0]
 8001cae:	462c      	mov	r4, r5
    while(!(USARTx->SR & 0x00000040) );
    USART_SendData(USARTx, c);
}

void USART_puts(USART_TypeDef* USARTx, volatile char *s){
	while(*s){
 8001cb0:	7823      	ldrb	r3, [r4, #0]
 8001cb2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001cb6:	d1f3      	bne.n	8001ca0 <USART_puts+0x8>
        USART_put(USARTx, *s);
		*s++;
	}
}
 8001cb8:	bd70      	pop	{r4, r5, r6, pc}
 8001cba:	bf00      	nop

08001cbc <vUSART_puts>:
int USART_rtos_wait_send(USART_rtos_packet *packet) {
    
    return (xSemaphoreTake(packet->sent_mutex, packet->max_block) == pdTRUE);
}

void vUSART_puts(USART_rtos_packet *packet) {
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	4604      	mov	r4, r0

    if (xSemaphoreTake(packet->USARTx_rtos->transmit_mutex, portMAX_DELAY) == pdTRUE) {
 8001cc0:	6803      	ldr	r3, [r0, #0]
 8001cc2:	68d8      	ldr	r0, [r3, #12]
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001cca:	460b      	mov	r3, r1
 8001ccc:	f001 f9bc 	bl	8003048 <xQueueGenericReceive>
 8001cd0:	2801      	cmp	r0, #1
 8001cd2:	d11c      	bne.n	8001d0e <vUSART_puts+0x52>
        taskENTER_CRITICAL();
 8001cd4:	f001 fab2 	bl	800323c <vPortEnterCritical>
        USART_puts(packet->USARTx_rtos->id, packet->msg);
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	6898      	ldr	r0, [r3, #8]
 8001cdc:	6861      	ldr	r1, [r4, #4]
 8001cde:	f7ff ffdb 	bl	8001c98 <USART_puts>

        xSemaphoreGive(packet->USARTx_rtos->transmit_event_mutex);
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	6998      	ldr	r0, [r3, #24]
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	460b      	mov	r3, r1
 8001cec:	f001 f920 	bl	8002f30 <xQueueGenericSend>
        xSemaphoreGive(packet->USARTx_rtos->transmit_mutex);
 8001cf0:	6823      	ldr	r3, [r4, #0]
 8001cf2:	68d8      	ldr	r0, [r3, #12]
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	f001 f919 	bl	8002f30 <xQueueGenericSend>

        xSemaphoreGive(packet->sent_mutex); 
 8001cfe:	68a0      	ldr	r0, [r4, #8]
 8001d00:	2100      	movs	r1, #0
 8001d02:	460a      	mov	r2, r1
 8001d04:	460b      	mov	r3, r1
 8001d06:	f001 f913 	bl	8002f30 <xQueueGenericSend>
        taskEXIT_CRITICAL();
 8001d0a:	f001 faa3 	bl	8003254 <vPortExitCritical>

    }
    vTaskDelete(NULL);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 fda4 	bl	800285c <vTaskDelete>
 8001d14:	bd10      	pop	{r4, pc}
 8001d16:	bf00      	nop

08001d18 <USART_rtos_puts>:
}

void USART_rtos_puts(USART_rtos_packet *packet, char *msg) {
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	4604      	mov	r4, r0

    packet->msg = msg;
 8001d1e:	6041      	str	r1, [r0, #4]
    packet->sent_mutex = xSemaphoreCreateMutex();
 8001d20:	f001 f970 	bl	8003004 <xQueueCreateMutex>
 8001d24:	60a0      	str	r0, [r4, #8]


    if (xSemaphoreTake(packet->sent_mutex, portMAX_DELAY) == pdTRUE) { //change this from max_delay
 8001d26:	2100      	movs	r1, #0
 8001d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	f001 f98b 	bl	8003048 <xQueueGenericReceive>
 8001d32:	2801      	cmp	r0, #1
 8001d34:	d115      	bne.n	8001d62 <USART_rtos_puts+0x4a>

        //if (packet->task_handle == NULL) //allow to assign different tasks wont work now tho
        //if (packet->max_block == NULL) packet->max_block = 
        packet->max_block = portMAX_DELAY;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d3a:	60e3      	str	r3, [r4, #12]

        xTaskCreate(vUSART_puts, (signed char*)"vUSART_puts", 128, packet, tskIDLE_PRIORITY+8, NULL);
 8001d3c:	2308      	movs	r3, #8
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	9302      	str	r3, [sp, #8]
 8001d46:	9303      	str	r3, [sp, #12]
 8001d48:	f641 40bd 	movw	r0, #7357	; 0x1cbd
 8001d4c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001d50:	f248 112c 	movw	r1, #33068	; 0x812c
 8001d54:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	f000 fcdc 	bl	8002718 <xTaskGenericCreate>
 8001d60:	e011      	b.n	8001d86 <USART_rtos_puts+0x6e>

    }
    else {
        USART_puts(USART1, "ERROR483\r\n");
 8001d62:	f248 1438 	movw	r4, #33080	; 0x8138
 8001d66:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001d6a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d6e:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001d72:	4621      	mov	r1, r4
 8001d74:	f7ff ff90 	bl	8001c98 <USART_puts>
        USART_puts(USART2, "ERROR483\r\n");
 8001d78:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8001d7c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8001d80:	4621      	mov	r1, r4
 8001d82:	f7ff ff89 	bl	8001c98 <USART_puts>

    }

};
 8001d86:	b004      	add	sp, #16
 8001d88:	bd10      	pop	{r4, pc}
 8001d8a:	bf00      	nop

08001d8c <USART_rtos_sputs>:

int USART_rtos_sputs(USART_rtos_packet *packet, const char *format, ...) {
 8001d8c:	b40e      	push	{r1, r2, r3}
 8001d8e:	b530      	push	{r4, r5, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	4604      	mov	r4, r0
    if (packet->msg){
 8001d94:	6843      	ldr	r3, [r0, #4]
 8001d96:	b163      	cbz	r3, 8001db2 <USART_rtos_sputs+0x26>

        va_list ap;
        int rv;

        va_start(ap, format);
 8001d98:	aa06      	add	r2, sp, #24
 8001d9a:	9201      	str	r2, [sp, #4]

        rv = vsprintf(packet->msg, format, ap);
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	9905      	ldr	r1, [sp, #20]
 8001da0:	f004 f8ac 	bl	8005efc <vsprintf>
 8001da4:	4605      	mov	r5, r0

        va_end(ap);


        USART_rtos_puts(packet, packet->msg);
 8001da6:	4620      	mov	r0, r4
 8001da8:	6861      	ldr	r1, [r4, #4]
 8001daa:	f7ff ffb5 	bl	8001d18 <USART_rtos_puts>


        return rv;
 8001dae:	4628      	mov	r0, r5
 8001db0:	e001      	b.n	8001db6 <USART_rtos_sputs+0x2a>
    }
    return -1;
 8001db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001db6:	b002      	add	sp, #8
 8001db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001dbc:	b003      	add	sp, #12
 8001dbe:	4770      	bx	lr

08001dc0 <USART_put_int>:
        USART_put(USARTx, *s);
		*s++;
	}
}

void USART_put_int(USART_TypeDef* USARTx, int number) {
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	4606      	mov	r6, r0
    uint8_t neg = 0;

    if (number < 0) {
 8001dc6:	2900      	cmp	r1, #0
        number*=-1;
 8001dc8:	bfba      	itte	lt
 8001dca:	4249      	neglt	r1, r1
        neg = 1;
 8001dcc:	2701      	movlt	r7, #1
		*s++;
	}
}

void USART_put_int(USART_TypeDef* USARTx, int number) {
    uint8_t neg = 0;
 8001dce:	2700      	movge	r7, #0
    if (number < 0) {
        number*=-1;
        neg = 1;
    }
    char value[10];
    int i=0;
 8001dd0:	2200      	movs	r2, #0
    do {
        value[i++] = (char)(number % 10) + '0';
 8001dd2:	f246 6067 	movw	r0, #26215	; 0x6667
 8001dd6:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8001dda:	1c54      	adds	r4, r2, #1
 8001ddc:	fb80 3501 	smull	r3, r5, r0, r1
 8001de0:	17cb      	asrs	r3, r1, #31
 8001de2:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8001de6:	461d      	mov	r5, r3
 8001de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001dec:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	a904      	add	r1, sp, #16
 8001df4:	440a      	add	r2, r1
 8001df6:	3330      	adds	r3, #48	; 0x30
 8001df8:	f802 3c0c 	strb.w	r3, [r2, #-12]
        number /= 10;
 8001dfc:	4629      	mov	r1, r5
        neg = 1;
    }
    char value[10];
    int i=0;
    do {
        value[i++] = (char)(number % 10) + '0';
 8001dfe:	4622      	mov	r2, r4
        number /= 10;
    } while (number);
 8001e00:	2d00      	cmp	r5, #0
 8001e02:	d1ea      	bne.n	8001dda <USART_put_int+0x1a>

    if (neg) USART_put(USARTx, '-');    
 8001e04:	b167      	cbz	r7, 8001e20 <USART_put_int+0x60>
 8001e06:	4630      	mov	r0, r6
 8001e08:	212d      	movs	r1, #45	; 0x2d
 8001e0a:	f7ff ff33 	bl	8001c74 <USART_put>
 8001e0e:	e007      	b.n	8001e20 <USART_put_int+0x60>
    while(i) {
        USART_put(USARTx, value[--i]);
 8001e10:	3c01      	subs	r4, #1
 8001e12:	ab04      	add	r3, sp, #16
 8001e14:	4423      	add	r3, r4
 8001e16:	4630      	mov	r0, r6
 8001e18:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8001e1c:	f7ff ff2a 	bl	8001c74 <USART_put>
        value[i++] = (char)(number % 10) + '0';
        number /= 10;
    } while (number);

    if (neg) USART_put(USARTx, '-');    
    while(i) {
 8001e20:	2c00      	cmp	r4, #0
 8001e22:	d1f5      	bne.n	8001e10 <USART_put_int+0x50>
        USART_put(USARTx, value[--i]);
    }
}
 8001e24:	b005      	add	sp, #20
 8001e26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e28 <setup_output>:
#include "command_parser.h"

USART_rtos *USARTOutput_rtos; 

void setup_output(USART_rtos *USARTx_rtos) {
    USARTOutput_rtos = USARTx_rtos;
 8001e28:	f640 53e4 	movw	r3, #3556	; 0xde4
 8001e2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e30:	6018      	str	r0, [r3, #0]
 8001e32:	4770      	bx	lr

08001e34 <replace_char>:
}

void replace_char(char *msg, char find, char replace) {
    while(*msg!='\r') {
 8001e34:	e003      	b.n	8001e3e <replace_char+0xa>
        if (*msg == find) *msg = replace;
 8001e36:	428b      	cmp	r3, r1
 8001e38:	bf08      	it	eq
 8001e3a:	7002      	strbeq	r2, [r0, #0]
        msg++;
 8001e3c:	3001      	adds	r0, #1
void setup_output(USART_rtos *USARTx_rtos) {
    USARTOutput_rtos = USARTx_rtos;
}

void replace_char(char *msg, char find, char replace) {
    while(*msg!='\r') {
 8001e3e:	7803      	ldrb	r3, [r0, #0]
 8001e40:	2b0d      	cmp	r3, #13
 8001e42:	d1f8      	bne.n	8001e36 <replace_char+0x2>
        if (*msg == find) *msg = replace;
        msg++;
    }
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <str_compare>:

int str_compare(char *str1, char *str2, const char terminator) {
 8001e48:	b430      	push	{r4, r5}
    int i;
    for(i=0;; i++) {
 8001e4a:	2300      	movs	r3, #0

        if (str1[i] == str2[i]) {
 8001e4c:	5cc4      	ldrb	r4, [r0, r3]
 8001e4e:	5ccd      	ldrb	r5, [r1, r3]
 8001e50:	42ac      	cmp	r4, r5
 8001e52:	d103      	bne.n	8001e5c <str_compare+0x14>
            if (str1[i] == terminator) return 1; // strs match
 8001e54:	4294      	cmp	r4, r2
 8001e56:	d003      	beq.n	8001e60 <str_compare+0x18>
    }
}

int str_compare(char *str1, char *str2, const char terminator) {
    int i;
    for(i=0;; i++) {
 8001e58:	3301      	adds	r3, #1
        }

        else {
            return 0;
        }
    }
 8001e5a:	e7f7      	b.n	8001e4c <str_compare+0x4>
        if (str1[i] == str2[i]) {
            if (str1[i] == terminator) return 1; // strs match
        }

        else {
            return 0;
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	e000      	b.n	8001e62 <str_compare+0x1a>
int str_compare(char *str1, char *str2, const char terminator) {
    int i;
    for(i=0;; i++) {

        if (str1[i] == str2[i]) {
            if (str1[i] == terminator) return 1; // strs match
 8001e60:	2001      	movs	r0, #1

        else {
            return 0;
        }
    }
}
 8001e62:	bc30      	pop	{r4, r5}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop

08001e68 <find_next_char>:


int find_next_char(char *msg, int offset, char find) {
    int i=0;
 8001e68:	2300      	movs	r3, #0
    while (1) {
        if (msg[i] == find) break;
 8001e6a:	5cc1      	ldrb	r1, [r0, r3]
 8001e6c:	4291      	cmp	r1, r2
 8001e6e:	d002      	beq.n	8001e76 <find_next_char+0xe>
        else if (msg[i] == '\0') {
 8001e70:	b119      	cbz	r1, 8001e7a <find_next_char+0x12>
            return -1;
            break;
        }
        i++;
 8001e72:	3301      	adds	r3, #1
    }
 8001e74:	e7f9      	b.n	8001e6a <find_next_char+0x2>

    return i;
 8001e76:	4618      	mov	r0, r3
 8001e78:	4770      	bx	lr
int find_next_char(char *msg, int offset, char find) {
    int i=0;
    while (1) {
        if (msg[i] == find) break;
        else if (msg[i] == '\0') {
            return -1;
 8001e7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
        i++;
    }

    return i;
}
 8001e7e:	4770      	bx	lr

08001e80 <str_to_int>:


int str_to_int(char *buffer, char terminator) {
 8001e80:	b470      	push	{r4, r5, r6}
 8001e82:	4605      	mov	r5, r0
    int num = 0;
    int i=0;
    int neg=0;

    if (buffer[i] == '-') {
 8001e84:	7803      	ldrb	r3, [r0, #0]
 8001e86:	2b2d      	cmp	r3, #45	; 0x2d


int str_to_int(char *buffer, char terminator) {
    int num = 0;
    int i=0;
    int neg=0;
 8001e88:	bf14      	ite	ne
 8001e8a:	2600      	movne	r6, #0

    if (buffer[i] == '-') {
        i++;
        neg = 1;
 8001e8c:	2601      	moveq	r6, #1
    int num = 0;
    int i=0;
    int neg=0;

    if (buffer[i] == '-') {
        i++;
 8001e8e:	4632      	mov	r2, r6
}


int str_to_int(char *buffer, char terminator) {
    int num = 0;
    int i=0;
 8001e90:	2000      	movs	r0, #0
 8001e92:	e00a      	b.n	8001eaa <str_to_int+0x2a>
        i++;
        neg = 1;
    }

    for(i; buffer[i]!=terminator; i++) {
        if (buffer[i] >= '0' && buffer[i]<='9'){
 8001e94:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8001e98:	b2e4      	uxtb	r4, r4
 8001e9a:	2c09      	cmp	r4, #9
 8001e9c:	d808      	bhi.n	8001eb0 <str_to_int+0x30>
            num *= 10; 
 8001e9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
            num += buffer[i]-'0';
 8001ea2:	3b30      	subs	r3, #48	; 0x30
 8001ea4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    if (buffer[i] == '-') {
        i++;
        neg = 1;
    }

    for(i; buffer[i]!=terminator; i++) {
 8001ea8:	3201      	adds	r2, #1
 8001eaa:	5cab      	ldrb	r3, [r5, r2]
 8001eac:	428b      	cmp	r3, r1
 8001eae:	d1f1      	bne.n	8001e94 <str_to_int+0x14>
        else {
            break;
        }    
    }

    if (neg) {
 8001eb0:	b106      	cbz	r6, 8001eb4 <str_to_int+0x34>
        num *= -1;
 8001eb2:	4240      	negs	r0, r0
    }
    return num;

}
 8001eb4:	bc70      	pop	{r4, r5, r6}
 8001eb6:	4770      	bx	lr

08001eb8 <command_set_regime_ph>:
                                    {-1, -1},
                                    {-1, -1}
                                  }; //ph, delay
int REGIME_LIGHTING[MAX_REGIME_LIGHTING][2] ={{-1, -1}}; //distance, hours_on

void command_set_regime_ph(char *pos, char term) {
 8001eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ebc:	b0ad      	sub	sp, #180	; 0xb4
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	460f      	mov	r7, r1
    USART_rtos_packet packet;
    char buffer[80];
    char msg[] = "{'object_type': 'REGIME_PH', 'method': 'set', 'error':%d, 'object_id':%d}\r\n";
 8001ec2:	a801      	add	r0, sp, #4
 8001ec4:	f248 1174 	movw	r1, #33140	; 0x8174
 8001ec8:	f6c0 0100 	movt	r1, #2048	; 0x800
 8001ecc:	224c      	movs	r2, #76	; 0x4c
 8001ece:	f7fe f9bf 	bl	8000250 <memcpy>
    packet.msg = buffer;
 8001ed2:	ab14      	add	r3, sp, #80	; 0x50
 8001ed4:	9329      	str	r3, [sp, #164]	; 0xa4

    packet.USARTx_rtos = USARTOutput_rtos; 
 8001ed6:	f640 53e4 	movw	r3, #3556	; 0xde4
 8001eda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	9328      	str	r3, [sp, #160]	; 0xa0


    int NEW_ITEM = 0;

    int idx = find_next_char(pos, 0, term);
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	463a      	mov	r2, r7
 8001ee8:	f7ff ffbe 	bl	8001e68 <find_next_char>
    pos+=idx+1;
 8001eec:	3001      	adds	r0, #1
 8001eee:	4404      	add	r4, r0

    int regime_id = str_to_int(pos, '\003')-1;
 8001ef0:	4620      	mov	r0, r4
 8001ef2:	2103      	movs	r1, #3
 8001ef4:	f7ff ffc4 	bl	8001e80 <str_to_int>
 8001ef8:	1e46      	subs	r6, r0, #1
    if (!(regime_id >= -1 && regime_id <MAX_REGIME_PH)){
 8001efa:	280a      	cmp	r0, #10
 8001efc:	d90a      	bls.n	8001f14 <command_set_regime_ph+0x5c>
        USART_rtos_sputs(&packet, msg, 100, -1); // error 100: incorrect id
 8001efe:	a828      	add	r0, sp, #160	; 0xa0
 8001f00:	a901      	add	r1, sp, #4
 8001f02:	2264      	movs	r2, #100	; 0x64
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f08:	f7ff ff40 	bl	8001d8c <USART_rtos_sputs>
        USART_rtos_wait_send(&packet);
 8001f0c:	a828      	add	r0, sp, #160	; 0xa0
 8001f0e:	f7ff fe8f 	bl	8001c30 <USART_rtos_wait_send>
        return;
 8001f12:	e082      	b.n	800201a <command_set_regime_ph+0x162>
    }

    else if (regime_id == -1) {
 8001f14:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    packet.msg = buffer;

    packet.USARTx_rtos = USARTOutput_rtos; 


    int NEW_ITEM = 0;
 8001f18:	bf18      	it	ne
 8001f1a:	f04f 0b00 	movne.w	fp, #0
        USART_rtos_sputs(&packet, msg, 100, -1); // error 100: incorrect id
        USART_rtos_wait_send(&packet);
        return;
    }

    else if (regime_id == -1) {
 8001f1e:	d123      	bne.n	8001f68 <command_set_regime_ph+0xb0>
 8001f20:	e00c      	b.n	8001f3c <command_set_regime_ph+0x84>
        int i;
        for(i=0; i<MAX_REGIME_PH; i++) if (REGIME_PH[i][1]  == -1 && REGIME_PH[i][0] == -1) break;
 8001f22:	eb02 03c6 	add.w	r3, r2, r6, lsl #3
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f2c:	d104      	bne.n	8001f38 <command_set_regime_ph+0x80>
 8001f2e:	f852 3036 	ldr.w	r3, [r2, r6, lsl #3]
 8001f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f36:	d008      	beq.n	8001f4a <command_set_regime_ph+0x92>
 8001f38:	3601      	adds	r6, #1
 8001f3a:	e004      	b.n	8001f46 <command_set_regime_ph+0x8e>
 8001f3c:	2600      	movs	r6, #0
 8001f3e:	f240 0204 	movw	r2, #4
 8001f42:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001f46:	2e09      	cmp	r6, #9
 8001f48:	ddeb      	ble.n	8001f22 <command_set_regime_ph+0x6a>

        if (i == MAX_REGIME_PH) {
 8001f4a:	2e0a      	cmp	r6, #10
 8001f4c:	d10a      	bne.n	8001f64 <command_set_regime_ph+0xac>

            USART_rtos_sputs(&packet, msg, 101, -1); //error 101: need to overwrite existing rows
 8001f4e:	a828      	add	r0, sp, #160	; 0xa0
 8001f50:	a901      	add	r1, sp, #4
 8001f52:	2265      	movs	r2, #101	; 0x65
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f58:	f7ff ff18 	bl	8001d8c <USART_rtos_sputs>
            USART_rtos_wait_send(&packet);
 8001f5c:	a828      	add	r0, sp, #160	; 0xa0
 8001f5e:	f7ff fe67 	bl	8001c30 <USART_rtos_wait_send>
            return;
 8001f62:	e05a      	b.n	800201a <command_set_regime_ph+0x162>
        }

        regime_id = i;
        NEW_ITEM = 1;
 8001f64:	f04f 0b01 	mov.w	fp, #1
    }


    idx = find_next_char(pos, 0, term);
 8001f68:	4620      	mov	r0, r4
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	463a      	mov	r2, r7
 8001f6e:	f7ff ff7b 	bl	8001e68 <find_next_char>
    pos+=idx+1;
 8001f72:	1c43      	adds	r3, r0, #1
 8001f74:	441c      	add	r4, r3

    //break this up into smaller functions for each task

    int i;
    for(i=0; i<2 && idx!=0; i++) {
 8001f76:	2500      	movs	r5, #0
                REGIME_PH[regime_id][0] = v;
                break;

            case 'd': 
               pos++;
               v = str_to_int(pos, '\003'); 
 8001f78:	f04f 0803 	mov.w	r8, #3
               //printf("d=%d\n", v);
               REGIME_PH[regime_id][1] = v;
 8001f7c:	f240 0904 	movw	r9, #4
 8001f80:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8001f84:	eb09 0ac6 	add.w	sl, r9, r6, lsl #3
    pos+=idx+1;

    //break this up into smaller functions for each task

    int i;
    for(i=0; i<2 && idx!=0; i++) {
 8001f88:	e038      	b.n	8001ffc <command_set_regime_ph+0x144>
        switch (*pos) {
 8001f8a:	7823      	ldrb	r3, [r4, #0]
 8001f8c:	2b64      	cmp	r3, #100	; 0x64
 8001f8e:	d009      	beq.n	8001fa4 <command_set_regime_ph+0xec>
 8001f90:	2b70      	cmp	r3, #112	; 0x70
 8001f92:	d10f      	bne.n	8001fb4 <command_set_regime_ph+0xfc>
            int v;
            char buffer[30];

            case 'p':
                pos++;
 8001f94:	3401      	adds	r4, #1
                v = str_to_int(pos, '\003');
 8001f96:	4620      	mov	r0, r4
 8001f98:	4641      	mov	r1, r8
 8001f9a:	f7ff ff71 	bl	8001e80 <str_to_int>
                //printf("p=%d\n", v);
                REGIME_PH[regime_id][0] = v;
 8001f9e:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
                break;
 8001fa2:	e020      	b.n	8001fe6 <command_set_regime_ph+0x12e>

            case 'd': 
               pos++;
 8001fa4:	3401      	adds	r4, #1
               v = str_to_int(pos, '\003'); 
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4641      	mov	r1, r8
 8001faa:	f7ff ff69 	bl	8001e80 <str_to_int>
               //printf("d=%d\n", v);
               REGIME_PH[regime_id][1] = v;
 8001fae:	f8ca 0004 	str.w	r0, [sl, #4]
               break;
 8001fb2:	e018      	b.n	8001fe6 <command_set_regime_ph+0x12e>

            default:
               USART_rtos_sputs(&packet, msg, 102, -1); //error 102: incorrect variable
 8001fb4:	a828      	add	r0, sp, #160	; 0xa0
 8001fb6:	a901      	add	r1, sp, #4
 8001fb8:	2266      	movs	r2, #102	; 0x66
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fbe:	f7ff fee5 	bl	8001d8c <USART_rtos_sputs>
               USART_rtos_wait_send(&packet);
 8001fc2:	a828      	add	r0, sp, #160	; 0xa0
 8001fc4:	f7ff fe34 	bl	8001c30 <USART_rtos_wait_send>
               if (NEW_ITEM) {
 8001fc8:	f1bb 0f00 	cmp.w	fp, #0
 8001fcc:	d00b      	beq.n	8001fe6 <command_set_regime_ph+0x12e>
                   REGIME_PH[regime_id][0] = -1; //PH setting
 8001fce:	f240 0304 	movw	r3, #4
 8001fd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fda:	f843 2036 	str.w	r2, [r3, r6, lsl #3]
                   REGIME_PH[regime_id][1] = -1; // delay
 8001fde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	e019      	b.n	800201a <command_set_regime_ph+0x162>
                   return;
               }

        }
        idx = find_next_char(pos, 0, term);
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	2100      	movs	r1, #0
 8001fea:	463a      	mov	r2, r7
 8001fec:	f7ff ff3c 	bl	8001e68 <find_next_char>
        if (idx == -1) break;
 8001ff0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001ff4:	d00b      	beq.n	800200e <command_set_regime_ph+0x156>
        pos+=idx+1;
 8001ff6:	1c43      	adds	r3, r0, #1
 8001ff8:	441c      	add	r4, r3
    pos+=idx+1;

    //break this up into smaller functions for each task

    int i;
    for(i=0; i<2 && idx!=0; i++) {
 8001ffa:	3501      	adds	r5, #1
 8001ffc:	2d01      	cmp	r5, #1
 8001ffe:	bfcc      	ite	gt
 8002000:	2300      	movgt	r3, #0
 8002002:	2301      	movle	r3, #1
 8002004:	2800      	cmp	r0, #0
 8002006:	bf08      	it	eq
 8002008:	2300      	moveq	r3, #0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1bd      	bne.n	8001f8a <command_set_regime_ph+0xd2>
        }
        idx = find_next_char(pos, 0, term);
        if (idx == -1) break;
        pos+=idx+1;
    }
    USART_rtos_sputs(&packet, msg, 0, regime_id+1);
 800200e:	a828      	add	r0, sp, #160	; 0xa0
 8002010:	a901      	add	r1, sp, #4
 8002012:	2200      	movs	r2, #0
 8002014:	1c73      	adds	r3, r6, #1
 8002016:	f7ff feb9 	bl	8001d8c <USART_rtos_sputs>


}
 800201a:	b02d      	add	sp, #180	; 0xb4
 800201c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002020 <command_set_stage>:

void command_set_stage(char *pos, char term) {
 8002020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002024:	b0ad      	sub	sp, #180	; 0xb4
 8002026:	4604      	mov	r4, r0
 8002028:	460f      	mov	r7, r1
    USART_rtos_packet packet;
    char buffer[80];
    char msg[] = "{'object_type': 'STAGE', 'method': 'set', 'error':%d, 'object_id':%d}\r\n";
 800202a:	a802      	add	r0, sp, #8
 800202c:	f248 11c0 	movw	r1, #33216	; 0x81c0
 8002030:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002034:	2248      	movs	r2, #72	; 0x48
 8002036:	f7fe f90b 	bl	8000250 <memcpy>
    packet.msg = buffer;
 800203a:	ab14      	add	r3, sp, #80	; 0x50
 800203c:	9329      	str	r3, [sp, #164]	; 0xa4
    packet.USARTx_rtos = USARTOutput_rtos;
 800203e:	f640 53e4 	movw	r3, #3556	; 0xde4
 8002042:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	9328      	str	r3, [sp, #160]	; 0xa0

    int NEW_ITEM = 0;

    int idx = find_next_char(pos, 0, term);
 800204a:	4620      	mov	r0, r4
 800204c:	2100      	movs	r1, #0
 800204e:	463a      	mov	r2, r7
 8002050:	f7ff ff0a 	bl	8001e68 <find_next_char>
    pos+=idx+1;
 8002054:	3001      	adds	r0, #1
 8002056:	1825      	adds	r5, r4, r0

    int stage_id = str_to_int(pos, '\003')-1;
 8002058:	4628      	mov	r0, r5
 800205a:	2103      	movs	r1, #3
 800205c:	f7ff ff10 	bl	8001e80 <str_to_int>
 8002060:	1e44      	subs	r4, r0, #1

    if (!(stage_id >= -1 && stage_id <MAX_STAGES)) {
 8002062:	280a      	cmp	r0, #10
 8002064:	d90a      	bls.n	800207c <command_set_stage+0x5c>
        USART_rtos_sputs(&packet, msg, 100, -1); // error 100: incorrect id
 8002066:	a828      	add	r0, sp, #160	; 0xa0
 8002068:	a902      	add	r1, sp, #8
 800206a:	2264      	movs	r2, #100	; 0x64
 800206c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002070:	f7ff fe8c 	bl	8001d8c <USART_rtos_sputs>
        USART_rtos_wait_send(&packet);
 8002074:	a828      	add	r0, sp, #160	; 0xa0
 8002076:	f7ff fddb 	bl	8001c30 <USART_rtos_wait_send>
        return;
 800207a:	e0a9      	b.n	80021d0 <command_set_stage+0x1b0>
    }

    else if (stage_id == -1) {
 800207c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002080:	d00a      	beq.n	8002098 <command_set_stage+0x78>
    char buffer[80];
    char msg[] = "{'object_type': 'STAGE', 'method': 'set', 'error':%d, 'object_id':%d}\r\n";
    packet.msg = buffer;
    packet.USARTx_rtos = USARTOutput_rtos;

    int NEW_ITEM = 0;
 8002082:	2200      	movs	r2, #0
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	e026      	b.n	80020d6 <command_set_stage+0xb6>
    }

    else if (stage_id == -1) {
        int i;
        for(i=0; i<MAX_STAGES; i++) {
            if (stages[i].using == 0) break;
 8002088:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800208c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	b143      	cbz	r3, 80020a6 <command_set_stage+0x86>
        return;
    }

    else if (stage_id == -1) {
        int i;
        for(i=0; i<MAX_STAGES; i++) {
 8002094:	3401      	adds	r4, #1
 8002096:	e004      	b.n	80020a2 <command_set_stage+0x82>
 8002098:	2400      	movs	r4, #0
            if (stages[i].using == 0) break;
 800209a:	f640 52e8 	movw	r2, #3560	; 0xde8
 800209e:	f2c2 0200 	movt	r2, #8192	; 0x2000
        return;
    }

    else if (stage_id == -1) {
        int i;
        for(i=0; i<MAX_STAGES; i++) {
 80020a2:	2c09      	cmp	r4, #9
 80020a4:	ddf0      	ble.n	8002088 <command_set_stage+0x68>
            if (stages[i].using == 0) break;
        }

        if (i == MAX_STAGES) {
 80020a6:	2c0a      	cmp	r4, #10
 80020a8:	d10a      	bne.n	80020c0 <command_set_stage+0xa0>
            USART_rtos_sputs(&packet, msg, 101, -1); //error 101: need to overwrite existing rows
 80020aa:	a828      	add	r0, sp, #160	; 0xa0
 80020ac:	a902      	add	r1, sp, #8
 80020ae:	2265      	movs	r2, #101	; 0x65
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b4:	f7ff fe6a 	bl	8001d8c <USART_rtos_sputs>
            USART_rtos_wait_send(&packet);
 80020b8:	a828      	add	r0, sp, #160	; 0xa0
 80020ba:	f7ff fdb9 	bl	8001c30 <USART_rtos_wait_send>
            return;
 80020be:	e087      	b.n	80021d0 <command_set_stage+0x1b0>
        }

        stage_id = i;
        stages[stage_id].using = 1;
 80020c0:	f640 53e8 	movw	r3, #3560	; 0xde8
 80020c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80020cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80020d0:	2201      	movs	r2, #1
 80020d2:	615a      	str	r2, [r3, #20]
        NEW_ITEM = 1;
 80020d4:	9201      	str	r2, [sp, #4]
    }

    idx = find_next_char(pos, 0, term);
 80020d6:	4628      	mov	r0, r5
 80020d8:	2100      	movs	r1, #0
 80020da:	463a      	mov	r2, r7
 80020dc:	f7ff fec4 	bl	8001e68 <find_next_char>
    pos+=idx+1;
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	441d      	add	r5, r3

    int i;

    stages[stage_id].id = stage_id+1;
 80020e4:	f104 0b01 	add.w	fp, r4, #1
 80020e8:	f640 53e8 	movw	r3, #3560	; 0xde8
 80020ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80020f0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80020f4:	f843 b032 	str.w	fp, [r3, r2, lsl #3]

    for(i=0; i<5 && idx!=0; i++) {
 80020f8:	2600      	movs	r6, #0
               stages[stage_id].regime_lighting_id = v;
               break;

            case 'o': //order 
               pos++;
               v = str_to_int(pos, '\003'); 
 80020fa:	f04f 0a03 	mov.w	sl, #3
//               printf("g=%d\n", v);
               stages[stage_id].order = v;
 80020fe:	f640 53e8 	movw	r3, #3560	; 0xde8
 8002102:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002106:	eb03 09c2 	add.w	r9, r3, r2, lsl #3

               }
               USART_rtos_wait_send(&packet);
               return;
        }
        idx = find_next_char(pos, 0, term);
 800210a:	46b0      	mov	r8, r6

    int i;

    stages[stage_id].id = stage_id+1;

    for(i=0; i<5 && idx!=0; i++) {
 800210c:	e04e      	b.n	80021ac <command_set_stage+0x18c>
        int v;
        //pos++;
        switch (/**(pos-1)*/*pos) {
 800210e:	782b      	ldrb	r3, [r5, #0]
 8002110:	3b69      	subs	r3, #105	; 0x69
 8002112:	2b07      	cmp	r3, #7
 8002114:	d825      	bhi.n	8002162 <command_set_stage+0x142>
 8002116:	e8df f003 	tbb	[pc, r3]
 800211a:	2414      	.short	0x2414
 800211c:	24240424 	.word	0x24240424
 8002120:	0c1c      	.short	0x0c1c
            case 'l': //length in days
               pos++;
 8002122:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002124:	4628      	mov	r0, r5
 8002126:	4651      	mov	r1, sl
 8002128:	f7ff feaa 	bl	8001e80 <str_to_int>
               stages[stage_id].length = v;
 800212c:	f8c9 0004 	str.w	r0, [r9, #4]
               break;
 8002130:	e031      	b.n	8002196 <command_set_stage+0x176>

            case 'p': //regime_ph_id 
               pos++;
 8002132:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002134:	4628      	mov	r0, r5
 8002136:	4651      	mov	r1, sl
 8002138:	f7ff fea2 	bl	8001e80 <str_to_int>
  //             printf("p=%d\n", v);
               stages[stage_id].regime_ph_id = v;
 800213c:	f8c9 000c 	str.w	r0, [r9, #12]
               break;
 8002140:	e029      	b.n	8002196 <command_set_stage+0x176>

            case 'i': //regime_lighting_id 
               pos++;
 8002142:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002144:	4628      	mov	r0, r5
 8002146:	4651      	mov	r1, sl
 8002148:	f7ff fe9a 	bl	8001e80 <str_to_int>
//               printf("g=%d\n", v);
               stages[stage_id].regime_lighting_id = v;
 800214c:	f8c9 0010 	str.w	r0, [r9, #16]
               break;
 8002150:	e021      	b.n	8002196 <command_set_stage+0x176>

            case 'o': //order 
               pos++;
 8002152:	3501      	adds	r5, #1
               v = str_to_int(pos, '\003'); 
 8002154:	4628      	mov	r0, r5
 8002156:	4651      	mov	r1, sl
 8002158:	f7ff fe92 	bl	8001e80 <str_to_int>
//               printf("g=%d\n", v);
               stages[stage_id].order = v;
 800215c:	f8c9 0008 	str.w	r0, [r9, #8]
               break;
 8002160:	e019      	b.n	8002196 <command_set_stage+0x176>
            

            default:
               USART_rtos_sputs(&packet, msg, 102, stage_id+1); // error 102: incorrect variable
 8002162:	a828      	add	r0, sp, #160	; 0xa0
 8002164:	a902      	add	r1, sp, #8
 8002166:	2266      	movs	r2, #102	; 0x66
 8002168:	465b      	mov	r3, fp
 800216a:	f7ff fe0f 	bl	8001d8c <USART_rtos_sputs>
               if (NEW_ITEM) {
 800216e:	9b01      	ldr	r3, [sp, #4]
 8002170:	b16b      	cbz	r3, 800218e <command_set_stage+0x16e>
                   stages[stage_id].using = 0;
 8002172:	f640 52e8 	movw	r2, #3560	; 0xde8
 8002176:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800217a:	0060      	lsls	r0, r4, #1
 800217c:	1901      	adds	r1, r0, r4
 800217e:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8002182:	2300      	movs	r3, #0
 8002184:	614b      	str	r3, [r1, #20]
                   stages[stage_id].order = 0;
 8002186:	608b      	str	r3, [r1, #8]
                   stages[stage_id].regime_lighting_id = 0;
 8002188:	610b      	str	r3, [r1, #16]
                   stages[stage_id].regime_ph_id = 0;
 800218a:	60cb      	str	r3, [r1, #12]
                   stages[stage_id].length = 0;
 800218c:	604b      	str	r3, [r1, #4]

               }
               USART_rtos_wait_send(&packet);
 800218e:	a828      	add	r0, sp, #160	; 0xa0
 8002190:	f7ff fd4e 	bl	8001c30 <USART_rtos_wait_send>
               return;
 8002194:	e01c      	b.n	80021d0 <command_set_stage+0x1b0>
        }
        idx = find_next_char(pos, 0, term);
 8002196:	4628      	mov	r0, r5
 8002198:	4641      	mov	r1, r8
 800219a:	463a      	mov	r2, r7
 800219c:	f7ff fe64 	bl	8001e68 <find_next_char>
        if (idx == -1) break;
 80021a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80021a4:	d00b      	beq.n	80021be <command_set_stage+0x19e>
        pos+=idx+1;
 80021a6:	1c43      	adds	r3, r0, #1
 80021a8:	441d      	add	r5, r3

    int i;

    stages[stage_id].id = stage_id+1;

    for(i=0; i<5 && idx!=0; i++) {
 80021aa:	3601      	adds	r6, #1
 80021ac:	2e04      	cmp	r6, #4
 80021ae:	bfcc      	ite	gt
 80021b0:	2300      	movgt	r3, #0
 80021b2:	2301      	movle	r3, #1
 80021b4:	2800      	cmp	r0, #0
 80021b6:	bf08      	it	eq
 80021b8:	2300      	moveq	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1a7      	bne.n	800210e <command_set_stage+0xee>
        }
        idx = find_next_char(pos, 0, term);
        if (idx == -1) break;
        pos+=idx+1;
    }
    USART_rtos_sputs(&packet, msg, 0, stage_id+1);
 80021be:	a828      	add	r0, sp, #160	; 0xa0
 80021c0:	a902      	add	r1, sp, #8
 80021c2:	2200      	movs	r2, #0
 80021c4:	465b      	mov	r3, fp
 80021c6:	f7ff fde1 	bl	8001d8c <USART_rtos_sputs>
    USART_rtos_wait_send(&packet);
 80021ca:	a828      	add	r0, sp, #160	; 0xa0
 80021cc:	f7ff fd30 	bl	8001c30 <USART_rtos_wait_send>
}
 80021d0:	b02d      	add	sp, #180	; 0xb4
 80021d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021d6:	bf00      	nop

080021d8 <command_set>:

void command_set(char *pos, char term) {
 80021d8:	b530      	push	{r4, r5, lr}
 80021da:	b085      	sub	sp, #20
 80021dc:	460c      	mov	r4, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 80021de:	f640 53e4 	movw	r3, #3556	; 0xde4
 80021e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	9300      	str	r3, [sp, #0]
    pos+=4;
 80021ea:	1d05      	adds	r5, r0, #4

    if (str_compare(pos, "REGIME_PH\003", term)) {
 80021ec:	4628      	mov	r0, r5
 80021ee:	f248 2108 	movw	r1, #33288	; 0x8208
 80021f2:	f6c0 0100 	movt	r1, #2048	; 0x800
 80021f6:	4622      	mov	r2, r4
 80021f8:	f7ff fe26 	bl	8001e48 <str_compare>
 80021fc:	b120      	cbz	r0, 8002208 <command_set+0x30>
        command_set_regime_ph(pos, term);
 80021fe:	4628      	mov	r0, r5
 8002200:	4621      	mov	r1, r4
 8002202:	f7ff fe59 	bl	8001eb8 <command_set_regime_ph>
 8002206:	e020      	b.n	800224a <command_set+0x72>
    }

    else if (str_compare(pos, "STAGE\003", term)) {
 8002208:	4628      	mov	r0, r5
 800220a:	f248 2114 	movw	r1, #33300	; 0x8214
 800220e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002212:	4622      	mov	r2, r4
 8002214:	f7ff fe18 	bl	8001e48 <str_compare>
 8002218:	b120      	cbz	r0, 8002224 <command_set+0x4c>
        command_set_stage(pos, term);
 800221a:	4628      	mov	r0, r5
 800221c:	4621      	mov	r1, r4
 800221e:	f7ff feff 	bl	8002020 <command_set_stage>
 8002222:	e012      	b.n	800224a <command_set+0x72>
    }

    else if (str_compare(pos, "REGIME_LIGHTING\003", term)) {
 8002224:	4628      	mov	r0, r5
 8002226:	f248 211c 	movw	r1, #33308	; 0x821c
 800222a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800222e:	4622      	mov	r2, r4
 8002230:	f7ff fe0a 	bl	8001e48 <str_compare>
 8002234:	b948      	cbnz	r0, 800224a <command_set+0x72>
    }

    else {
        USART_rtos_puts(&packet, "{'object_type': '', method: 'set', error: 10, 'object_id': -1}\r\n"); // error 10: unknown object
 8002236:	4668      	mov	r0, sp
 8002238:	f248 2130 	movw	r1, #33328	; 0x8230
 800223c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002240:	f7ff fd6a 	bl	8001d18 <USART_rtos_puts>
        USART_rtos_wait_send(&packet);
 8002244:	4668      	mov	r0, sp
 8002246:	f7ff fcf3 	bl	8001c30 <USART_rtos_wait_send>
        return;
    }

}
 800224a:	b005      	add	sp, #20
 800224c:	bd30      	pop	{r4, r5, pc}
 800224e:	bf00      	nop

08002250 <command_del_regime_ph>:

void command_del_regime_ph (char *pos, char term) {
 8002250:	b510      	push	{r4, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	4604      	mov	r4, r0
 8002256:	460a      	mov	r2, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002258:	f640 53e4 	movw	r3, #3556	; 0xde4
 800225c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	9300      	str	r3, [sp, #0]

    int idx = find_next_char(pos, 0, term);
 8002264:	2100      	movs	r1, #0
 8002266:	f7ff fdff 	bl	8001e68 <find_next_char>
    pos+=idx+1;
 800226a:	3001      	adds	r0, #1
    int regime_id = str_to_int(pos, '\003')-1;
 800226c:	4420      	add	r0, r4
 800226e:	2103      	movs	r1, #3
 8002270:	f7ff fe06 	bl	8001e80 <str_to_int>
 8002274:	1e44      	subs	r4, r0, #1
    if (!(regime_id>=0 && regime_id < MAX_REGIME_PH)) {
 8002276:	2c09      	cmp	r4, #9
 8002278:	d907      	bls.n	800228a <command_del_regime_ph+0x3a>
        USART_rtos_puts(&packet, "Error: Incorrect REGIME_PH id\r\n");
 800227a:	4668      	mov	r0, sp
 800227c:	f248 2174 	movw	r1, #33396	; 0x8274
 8002280:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002284:	f7ff fd48 	bl	8001d18 <USART_rtos_puts>
 8002288:	e012      	b.n	80022b0 <command_del_regime_ph+0x60>
        return;
    }

    USART_rtos_sputs(&packet, "DEBUG: DELETING REGIME_ID %d\r\n", regime_id);
 800228a:	4668      	mov	r0, sp
 800228c:	f248 2194 	movw	r1, #33428	; 0x8294
 8002290:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002294:	4622      	mov	r2, r4
 8002296:	f7ff fd79 	bl	8001d8c <USART_rtos_sputs>
    REGIME_PH[regime_id][0] = -1;
 800229a:	f240 0304 	movw	r3, #4
 800229e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022a6:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    REGIME_PH[regime_id][1] = -1;
 80022aa:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80022ae:	6062      	str	r2, [r4, #4]
}
 80022b0:	b004      	add	sp, #16
 80022b2:	bd10      	pop	{r4, pc}

080022b4 <command_del_stage>:

void command_del_stage (char *pos, char term) {
 80022b4:	b530      	push	{r4, r5, lr}
 80022b6:	b085      	sub	sp, #20
 80022b8:	4604      	mov	r4, r0
 80022ba:	460a      	mov	r2, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 80022bc:	f640 53e4 	movw	r3, #3556	; 0xde4
 80022c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	9300      	str	r3, [sp, #0]

    int idx = find_next_char(pos, 0, term);
 80022c8:	2100      	movs	r1, #0
 80022ca:	f7ff fdcd 	bl	8001e68 <find_next_char>
    pos+=idx+1;
 80022ce:	3001      	adds	r0, #1

    int stage_id = str_to_int(pos, '\003')-1;
 80022d0:	4420      	add	r0, r4
 80022d2:	2103      	movs	r1, #3
 80022d4:	f7ff fdd4 	bl	8001e80 <str_to_int>
 80022d8:	4602      	mov	r2, r0
 80022da:	1e43      	subs	r3, r0, #1

    if (!(stage_id >= 0 && stage_id <MAX_STAGES)) {
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d907      	bls.n	80022f0 <command_del_stage+0x3c>

        USART_rtos_puts(&packet, "Error: Incorrect stage id\r\n");
 80022e0:	4668      	mov	r0, sp
 80022e2:	f248 21b4 	movw	r1, #33460	; 0x82b4
 80022e6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80022ea:	f7ff fd15 	bl	8001d18 <USART_rtos_puts>
 80022ee:	e014      	b.n	800231a <command_del_stage+0x66>
        return;
    }

    stages[stage_id].using = 0;
 80022f0:	f640 54e8 	movw	r4, #3560	; 0xde8
 80022f4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80022f8:	0058      	lsls	r0, r3, #1
 80022fa:	18c5      	adds	r5, r0, r3
 80022fc:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8002300:	2100      	movs	r1, #0
 8002302:	6169      	str	r1, [r5, #20]
    stages[stage_id].order = 0;
 8002304:	60a9      	str	r1, [r5, #8]
    stages[stage_id].regime_lighting_id = 0;
 8002306:	6129      	str	r1, [r5, #16]
    stages[stage_id].regime_ph_id = 0;
 8002308:	60e9      	str	r1, [r5, #12]
    stages[stage_id].length = 0;
 800230a:	6069      	str	r1, [r5, #4]

    USART_rtos_sputs(&packet, "Succesfully deleted stage id: %d\r\n", stage_id+1);
 800230c:	4668      	mov	r0, sp
 800230e:	f248 21d0 	movw	r1, #33488	; 0x82d0
 8002312:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002316:	f7ff fd39 	bl	8001d8c <USART_rtos_sputs>
}
 800231a:	b005      	add	sp, #20
 800231c:	bd30      	pop	{r4, r5, pc}
 800231e:	bf00      	nop

08002320 <command_del>:

void command_del(char *pos, char term) {
 8002320:	b530      	push	{r4, r5, lr}
 8002322:	b085      	sub	sp, #20
 8002324:	460d      	mov	r5, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 8002326:	f640 53e4 	movw	r3, #3556	; 0xde4
 800232a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	9300      	str	r3, [sp, #0]
    pos+=4;
 8002332:	1d04      	adds	r4, r0, #4
    if (str_compare(pos, "REGIME_PH\003", term)) {
 8002334:	4620      	mov	r0, r4
 8002336:	f248 2108 	movw	r1, #33288	; 0x8208
 800233a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800233e:	462a      	mov	r2, r5
 8002340:	f7ff fd82 	bl	8001e48 <str_compare>
 8002344:	b120      	cbz	r0, 8002350 <command_del+0x30>
        command_del_regime_ph(pos, term);
 8002346:	4620      	mov	r0, r4
 8002348:	4629      	mov	r1, r5
 800234a:	f7ff ff81 	bl	8002250 <command_del_regime_ph>
 800234e:	e021      	b.n	8002394 <command_del+0x74>
    }

    else if (str_compare(pos, "STAGE\003", term)) {
 8002350:	4620      	mov	r0, r4
 8002352:	f248 2114 	movw	r1, #33300	; 0x8214
 8002356:	f6c0 0100 	movt	r1, #2048	; 0x800
 800235a:	462a      	mov	r2, r5
 800235c:	f7ff fd74 	bl	8001e48 <str_compare>
 8002360:	b120      	cbz	r0, 800236c <command_del+0x4c>
        command_del_stage(pos, term);
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7ff ffa5 	bl	80022b4 <command_del_stage>
 800236a:	e013      	b.n	8002394 <command_del+0x74>
    }

    else if (str_compare(pos, "REGIME_LIGHTING\003", term)) {
 800236c:	4620      	mov	r0, r4
 800236e:	f248 211c 	movw	r1, #33308	; 0x821c
 8002372:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002376:	462a      	mov	r2, r5
 8002378:	f7ff fd66 	bl	8001e48 <str_compare>
 800237c:	b950      	cbnz	r0, 8002394 <command_del+0x74>
//        printf("OK LIGHTING SHIT\n");
    }

    else {
        USART_rtos_sputs(&packet, "Error: Unknown Object '%s'\r\n", pos);
 800237e:	4668      	mov	r0, sp
 8002380:	f248 21f4 	movw	r1, #33524	; 0x82f4
 8002384:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002388:	4622      	mov	r2, r4
 800238a:	f7ff fcff 	bl	8001d8c <USART_rtos_sputs>
        USART_rtos_wait_send(&packet);
 800238e:	4668      	mov	r0, sp
 8002390:	f7ff fc4e 	bl	8001c30 <USART_rtos_wait_send>
    }
}
 8002394:	b005      	add	sp, #20
 8002396:	bd30      	pop	{r4, r5, pc}

08002398 <stage_print>:

void stage_print(Stage *stage) {
 8002398:	b500      	push	{lr}
 800239a:	b0a3      	sub	sp, #140	; 0x8c
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 800239c:	f640 53e4 	movw	r3, #3556	; 0xde4
 80023a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	931e      	str	r3, [sp, #120]	; 0x78
    char buffer[100];
    packet.msg = buffer;
 80023a8:	ab05      	add	r3, sp, #20
 80023aa:	931f      	str	r3, [sp, #124]	; 0x7c

    USART_rtos_sputs(
 80023ac:	6802      	ldr	r2, [r0, #0]
 80023ae:	6843      	ldr	r3, [r0, #4]
 80023b0:	6881      	ldr	r1, [r0, #8]
 80023b2:	9100      	str	r1, [sp, #0]
 80023b4:	68c1      	ldr	r1, [r0, #12]
 80023b6:	9101      	str	r1, [sp, #4]
 80023b8:	6901      	ldr	r1, [r0, #16]
 80023ba:	9102      	str	r1, [sp, #8]
 80023bc:	6941      	ldr	r1, [r0, #20]
 80023be:	9103      	str	r1, [sp, #12]
 80023c0:	a81e      	add	r0, sp, #120	; 0x78
 80023c2:	f248 3114 	movw	r1, #33556	; 0x8314
 80023c6:	f6c0 0100 	movt	r1, #2048	; 0x800
 80023ca:	f7ff fcdf 	bl	8001d8c <USART_rtos_sputs>
            stage->order,
            stage->regime_ph_id,
            stage->regime_lighting_id,
            stage->using
    );
    USART_rtos_wait_send(&packet);
 80023ce:	a81e      	add	r0, sp, #120	; 0x78
 80023d0:	f7ff fc2e 	bl	8001c30 <USART_rtos_wait_send>

}
 80023d4:	b023      	add	sp, #140	; 0x8c
 80023d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80023da:	bf00      	nop

080023dc <regime_ph_print>:

void regime_ph_print(int *regime_ph, int regime_id) {
 80023dc:	b500      	push	{lr}
 80023de:	b095      	sub	sp, #84	; 0x54
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 80023e0:	f640 53e4 	movw	r3, #3556	; 0xde4
 80023e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	9310      	str	r3, [sp, #64]	; 0x40
    char buffer[50];
    packet.msg = buffer;
 80023ec:	ab03      	add	r3, sp, #12
 80023ee:	9311      	str	r3, [sp, #68]	; 0x44

    USART_rtos_sputs(&packet, "{'id': %d, 'ph': %d, 'delay': %d}\r\n", regime_id+1, regime_ph[0], regime_ph[1]);
 80023f0:	1c4a      	adds	r2, r1, #1
 80023f2:	6803      	ldr	r3, [r0, #0]
 80023f4:	6840      	ldr	r0, [r0, #4]
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	a810      	add	r0, sp, #64	; 0x40
 80023fa:	f248 3168 	movw	r1, #33640	; 0x8368
 80023fe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002402:	f7ff fcc3 	bl	8001d8c <USART_rtos_sputs>
    USART_rtos_wait_send(&packet);
 8002406:	a810      	add	r0, sp, #64	; 0x40
 8002408:	f7ff fc12 	bl	8001c30 <USART_rtos_wait_send>

}
 800240c:	b015      	add	sp, #84	; 0x54
 800240e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002412:	bf00      	nop

08002414 <command_get>:

void command_get(char *pos, char term) {
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002416:	b085      	sub	sp, #20
 8002418:	460e      	mov	r6, r1

    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 800241a:	f640 53e4 	movw	r3, #3556	; 0xde4
 800241e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	9300      	str	r3, [sp, #0]

    pos+=4;
 8002426:	1d05      	adds	r5, r0, #4

    if (str_compare(pos, "REGIME_PH\003", term)) {
 8002428:	4628      	mov	r0, r5
 800242a:	f248 2108 	movw	r1, #33288	; 0x8208
 800242e:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002432:	4632      	mov	r2, r6
 8002434:	f7ff fd08 	bl	8001e48 <str_compare>
 8002438:	b3a0      	cbz	r0, 80024a4 <command_get+0x90>

        int idx = find_next_char(pos, 0, term);
 800243a:	4628      	mov	r0, r5
 800243c:	2100      	movs	r1, #0
 800243e:	4632      	mov	r2, r6
 8002440:	f7ff fd12 	bl	8001e68 <find_next_char>
        pos+=idx+1;
 8002444:	3001      	adds	r0, #1
 8002446:	4405      	add	r5, r0
        int regime_id = str_to_int(pos, '\003')-1;
 8002448:	4628      	mov	r0, r5
 800244a:	2103      	movs	r1, #3
 800244c:	f7ff fd18 	bl	8001e80 <str_to_int>
 8002450:	1e41      	subs	r1, r0, #1

        if (regime_id >= 0 && regime_id <MAX_REGIME_PH) {
 8002452:	2909      	cmp	r1, #9
 8002454:	d808      	bhi.n	8002468 <command_get+0x54>
            regime_ph_print(REGIME_PH[regime_id], regime_id);
 8002456:	f240 0004 	movw	r0, #4
 800245a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800245e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 8002462:	f7ff ffbb 	bl	80023dc <regime_ph_print>
 8002466:	e01d      	b.n	80024a4 <command_get+0x90>

        }
        else if(regime_id == -1) {
 8002468:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800246c:	d10f      	bne.n	800248e <command_get+0x7a>
 800246e:	e006      	b.n	800247e <command_get+0x6a>
            int i;
            for(i=0; i<MAX_REGIME_PH; i++) {
                regime_ph_print(REGIME_PH[i], i);
 8002470:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
 8002474:	4621      	mov	r1, r4
 8002476:	f7ff ffb1 	bl	80023dc <regime_ph_print>
            regime_ph_print(REGIME_PH[regime_id], regime_id);

        }
        else if(regime_id == -1) {
            int i;
            for(i=0; i<MAX_REGIME_PH; i++) {
 800247a:	3401      	adds	r4, #1
 800247c:	e004      	b.n	8002488 <command_get+0x74>
 800247e:	2400      	movs	r4, #0
                regime_ph_print(REGIME_PH[i], i);
 8002480:	f240 0704 	movw	r7, #4
 8002484:	f2c2 0700 	movt	r7, #8192	; 0x2000
            regime_ph_print(REGIME_PH[regime_id], regime_id);

        }
        else if(regime_id == -1) {
            int i;
            for(i=0; i<MAX_REGIME_PH; i++) {
 8002488:	2c09      	cmp	r4, #9
 800248a:	ddf1      	ble.n	8002470 <command_get+0x5c>
 800248c:	e00a      	b.n	80024a4 <command_get+0x90>
            }
        }

        else {

            USART_rtos_puts(&packet, "Error: Invalid regime_ph_id\r\n");
 800248e:	4668      	mov	r0, sp
 8002490:	f248 318c 	movw	r1, #33676	; 0x838c
 8002494:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002498:	f7ff fc3e 	bl	8001d18 <USART_rtos_puts>
            USART_rtos_wait_send(&packet);
 800249c:	4668      	mov	r0, sp
 800249e:	f7ff fbc7 	bl	8001c30 <USART_rtos_wait_send>
            return;
 80024a2:	e03c      	b.n	800251e <command_get+0x10a>
        }

    }

    if (str_compare(pos, "STAGE\003", term)) {
 80024a4:	4628      	mov	r0, r5
 80024a6:	f248 2114 	movw	r1, #33300	; 0x8214
 80024aa:	f6c0 0100 	movt	r1, #2048	; 0x800
 80024ae:	4632      	mov	r2, r6
 80024b0:	f7ff fcca 	bl	8001e48 <str_compare>
 80024b4:	b398      	cbz	r0, 800251e <command_get+0x10a>

        int idx = find_next_char(pos, 0, term);
 80024b6:	4628      	mov	r0, r5
 80024b8:	2100      	movs	r1, #0
 80024ba:	4632      	mov	r2, r6
 80024bc:	f7ff fcd4 	bl	8001e68 <find_next_char>
        pos+=idx+1;
 80024c0:	3001      	adds	r0, #1
        int stage_id = str_to_int(pos, '\003')-1;
 80024c2:	4428      	add	r0, r5
 80024c4:	2103      	movs	r1, #3
 80024c6:	f7ff fcdb 	bl	8001e80 <str_to_int>
        if (stage_id == -1) {
 80024ca:	1e43      	subs	r3, r0, #1
 80024cc:	b980      	cbnz	r0, 80024f0 <command_get+0xdc>
 80024ce:	e007      	b.n	80024e0 <command_get+0xcc>
            int i;
            for(i=0; i<MAX_STAGES; i++) {
                stage_print(&stages[i]);
 80024d0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80024d4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 80024d8:	f7ff ff5e 	bl	8002398 <stage_print>
        int idx = find_next_char(pos, 0, term);
        pos+=idx+1;
        int stage_id = str_to_int(pos, '\003')-1;
        if (stage_id == -1) {
            int i;
            for(i=0; i<MAX_STAGES; i++) {
 80024dc:	3401      	adds	r4, #1
 80024de:	e004      	b.n	80024ea <command_get+0xd6>
 80024e0:	2400      	movs	r4, #0
                stage_print(&stages[i]);
 80024e2:	f640 55e8 	movw	r5, #3560	; 0xde8
 80024e6:	f2c2 0500 	movt	r5, #8192	; 0x2000
        int idx = find_next_char(pos, 0, term);
        pos+=idx+1;
        int stage_id = str_to_int(pos, '\003')-1;
        if (stage_id == -1) {
            int i;
            for(i=0; i<MAX_STAGES; i++) {
 80024ea:	2c09      	cmp	r4, #9
 80024ec:	ddf0      	ble.n	80024d0 <command_get+0xbc>
 80024ee:	e016      	b.n	800251e <command_get+0x10a>
                stage_print(&stages[i]);
            }
        }
        else if (stage_id >= 0 && stage_id <MAX_STAGES) {
 80024f0:	2b09      	cmp	r3, #9
 80024f2:	d80a      	bhi.n	800250a <command_get+0xf6>
            stage_print(stages+stage_id);
 80024f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80024f8:	f640 50e8 	movw	r0, #3560	; 0xde8
 80024fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002500:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8002504:	f7ff ff48 	bl	8002398 <stage_print>
 8002508:	e009      	b.n	800251e <command_get+0x10a>

        }
        else {
            USART_rtos_puts(&packet, "Error: Invalid stage_id\r\n");
 800250a:	4668      	mov	r0, sp
 800250c:	f248 31ac 	movw	r1, #33708	; 0x83ac
 8002510:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002514:	f7ff fc00 	bl	8001d18 <USART_rtos_puts>
            USART_rtos_wait_send(&packet);
 8002518:	4668      	mov	r0, sp
 800251a:	f7ff fb89 	bl	8001c30 <USART_rtos_wait_send>
    else {
        //USART_rtos_sputs(&packet, "Error: Unknown Object '%s'\r\n", pos);
        //USART_rtos_wait_send(&packet);

    }
}
 800251e:	b005      	add	sp, #20
 8002520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002522:	bf00      	nop

08002524 <command_routing>:



int command_routing(char *pos, char term) {
 8002524:	b530      	push	{r4, r5, lr}
 8002526:	b085      	sub	sp, #20
 8002528:	4605      	mov	r5, r0
 800252a:	460c      	mov	r4, r1
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
 800252c:	f640 53e4 	movw	r3, #3556	; 0xde4
 8002530:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	9300      	str	r3, [sp, #0]
    int r = 0;
    
    if (str_compare(pos, "get\003", term)) {
 8002538:	f248 31c8 	movw	r1, #33736	; 0x83c8
 800253c:	f6c0 0100 	movt	r1, #2048	; 0x800
 8002540:	4622      	mov	r2, r4
 8002542:	f7ff fc81 	bl	8001e48 <str_compare>
 8002546:	b128      	cbz	r0, 8002554 <command_routing+0x30>
        command_get(pos, term);
 8002548:	4628      	mov	r0, r5
 800254a:	4621      	mov	r1, r4
 800254c:	f7ff ff62 	bl	8002414 <command_get>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 8002550:	2000      	movs	r0, #0
 8002552:	e02e      	b.n	80025b2 <command_routing+0x8e>
    
    if (str_compare(pos, "get\003", term)) {
        command_get(pos, term);
    }

    else if (str_compare(pos, "set\003", term)) {
 8002554:	4628      	mov	r0, r5
 8002556:	f248 31d0 	movw	r1, #33744	; 0x83d0
 800255a:	f6c0 0100 	movt	r1, #2048	; 0x800
 800255e:	4622      	mov	r2, r4
 8002560:	f7ff fc72 	bl	8001e48 <str_compare>
 8002564:	b128      	cbz	r0, 8002572 <command_routing+0x4e>
        command_set(pos, term);
 8002566:	4628      	mov	r0, r5
 8002568:	4621      	mov	r1, r4
 800256a:	f7ff fe35 	bl	80021d8 <command_set>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 800256e:	2000      	movs	r0, #0
 8002570:	e01f      	b.n	80025b2 <command_routing+0x8e>

    else if (str_compare(pos, "set\003", term)) {
        command_set(pos, term);
    }

    else if (str_compare(pos, "del\003", term)) {
 8002572:	4628      	mov	r0, r5
 8002574:	f248 31d8 	movw	r1, #33752	; 0x83d8
 8002578:	f6c0 0100 	movt	r1, #2048	; 0x800
 800257c:	4622      	mov	r2, r4
 800257e:	f7ff fc63 	bl	8001e48 <str_compare>
 8002582:	b128      	cbz	r0, 8002590 <command_routing+0x6c>
        command_del(pos, term);
 8002584:	4628      	mov	r0, r5
 8002586:	4621      	mov	r1, r4
 8002588:	f7ff feca 	bl	8002320 <command_del>


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 800258c:	2000      	movs	r0, #0
 800258e:	e010      	b.n	80025b2 <command_routing+0x8e>

    else if (str_compare(pos, "del\003", term)) {
        command_del(pos, term);
    }

    else if (*pos != term){
 8002590:	782b      	ldrb	r3, [r5, #0]
 8002592:	42a3      	cmp	r3, r4


int command_routing(char *pos, char term) {
    USART_rtos_packet packet;
    packet.USARTx_rtos = USARTOutput_rtos;
    int r = 0;
 8002594:	bf08      	it	eq
 8002596:	2000      	moveq	r0, #0

    else if (str_compare(pos, "del\003", term)) {
        command_del(pos, term);
    }

    else if (*pos != term){
 8002598:	d00b      	beq.n	80025b2 <command_routing+0x8e>
        USART_rtos_puts(&packet, "{'method': '', 'error': 9}\r\n"); //error 9: Unknown start command
 800259a:	4668      	mov	r0, sp
 800259c:	f248 31e0 	movw	r1, #33760	; 0x83e0
 80025a0:	f6c0 0100 	movt	r1, #2048	; 0x800
 80025a4:	f7ff fbb8 	bl	8001d18 <USART_rtos_puts>
        USART_rtos_wait_send(&packet);
 80025a8:	4668      	mov	r0, sp
 80025aa:	f7ff fb41 	bl	8001c30 <USART_rtos_wait_send>
        r = 1;
 80025ae:	2001      	movs	r0, #1
 80025b0:	e7ff      	b.n	80025b2 <command_routing+0x8e>
    }
    return r; //1 = Error
}
 80025b2:	b005      	add	sp, #20
 80025b4:	bd30      	pop	{r4, r5, pc}
 80025b6:	bf00      	nop

080025b8 <prvAllocateTCBAndStack>:
	}
}
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	4606      	mov	r6, r0
 80025bc:	460d      	mov	r5, r1
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 80025be:	2050      	movs	r0, #80	; 0x50
 80025c0:	f001 fea6 	bl	8004310 <malloc>

	if( pxNewTCB != NULL )
 80025c4:	4604      	mov	r4, r0
 80025c6:	b180      	cbz	r0, 80025ea <prvAllocateTCBAndStack+0x32>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
 80025c8:	4628      	mov	r0, r5
 80025ca:	b91d      	cbnz	r5, 80025d4 <prvAllocateTCBAndStack+0x1c>
 80025cc:	00b0      	lsls	r0, r6, #2
 80025ce:	f001 fe9f 	bl	8004310 <malloc>
 80025d2:	e7ff      	b.n	80025d4 <prvAllocateTCBAndStack+0x1c>
 80025d4:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
 80025d6:	b920      	cbnz	r0, 80025e2 <prvAllocateTCBAndStack+0x2a>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
 80025d8:	4620      	mov	r0, r4
 80025da:	f001 fea1 	bl	8004320 <free>
			pxNewTCB = NULL;
 80025de:	2400      	movs	r4, #0
 80025e0:	e003      	b.n	80025ea <prvAllocateTCBAndStack+0x32>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
 80025e2:	21a5      	movs	r1, #165	; 0xa5
 80025e4:	00b2      	lsls	r2, r6, #2
 80025e6:	f002 f955 	bl	8004894 <memset>
		}
	}

	return pxNewTCB;
}
 80025ea:	4620      	mov	r0, r4
 80025ec:	bd70      	pop	{r4, r5, r6, pc}
 80025ee:	bf00      	nop

080025f0 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4604      	mov	r4, r0
 80025f4:	4615      	mov	r5, r2
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
 80025f6:	3034      	adds	r0, #52	; 0x34
 80025f8:	2210      	movs	r2, #16
 80025fa:	f002 f9c5 	bl	8004988 <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
 80025fe:	2300      	movs	r3, #0
 8002600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 8002604:	2d04      	cmp	r5, #4
 8002606:	bf28      	it	cs
 8002608:	2504      	movcs	r5, #4
	}

	pxTCB->uxPriority = uxPriority;
 800260a:	62e5      	str	r5, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800260c:	6465      	str	r5, [r4, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800260e:	1d20      	adds	r0, r4, #4
 8002610:	f000 fdac 	bl	800316c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8002614:	f104 0018 	add.w	r0, r4, #24
 8002618:	f000 fda8 	bl	800316c <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800261c:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
 800261e:	f1c5 0505 	rsb	r5, r5, #5
 8002622:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8002624:	6264      	str	r4, [r4, #36]	; 0x24
	}
	#endif

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxTCB->pxTaskTag = NULL;
 8002626:	2300      	movs	r3, #0
 8002628:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	#endif

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxTCB->ulRunTimeCounter = 0UL;
 800262a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800262c:	bd38      	pop	{r3, r4, r5, pc}
 800262e:	bf00      	nop

08002630 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
 8002630:	b538      	push	{r3, r4, r5, lr}
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 8002632:	2400      	movs	r4, #0
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 8002634:	f640 1520 	movw	r5, #2336	; 0x920
 8002638:	f2c2 0500 	movt	r5, #8192	; 0x2000

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800263c:	e006      	b.n	800264c <prvInitialiseTaskLists+0x1c>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 800263e:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8002642:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8002646:	f000 fd85 	bl	8003154 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 800264a:	3401      	adds	r4, #1
 800264c:	2c04      	cmp	r4, #4
 800264e:	d9f6      	bls.n	800263e <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 8002650:	f640 15d8 	movw	r5, #2520	; 0x9d8
 8002654:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8002658:	4628      	mov	r0, r5
 800265a:	f000 fd7b 	bl	8003154 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 800265e:	f640 14ec 	movw	r4, #2540	; 0x9ec
 8002662:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002666:	4620      	mov	r0, r4
 8002668:	f000 fd74 	bl	8003154 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
 800266c:	f640 10a0 	movw	r0, #2464	; 0x9a0
 8002670:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002674:	f000 fd6e 	bl	8003154 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 8002678:	f640 1088 	movw	r0, #2440	; 0x988
 800267c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002680:	f000 fd68 	bl	8003154 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
 8002684:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002688:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800268c:	f000 fd62 	bl	8003154 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002690:	f640 139c 	movw	r3, #2460	; 0x99c
 8002694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002698:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800269a:	f640 1384 	movw	r3, #2436	; 0x984
 800269e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026a2:	601c      	str	r4, [r3, #0]
 80026a4:	bd38      	pop	{r3, r4, r5, pc}
 80026a6:	bf00      	nop

080026a8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
 80026a8:	b510      	push	{r4, lr}
 80026aa:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80026ac:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80026b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
 80026b8:	f640 2310 	movw	r3, #2576	; 0xa10
 80026bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4298      	cmp	r0, r3
 80026c4:	d20d      	bcs.n	80026e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80026c6:	f640 1384 	movw	r3, #2436	; 0x984
 80026ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80026d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026d8:	6819      	ldr	r1, [r3, #0]
 80026da:	3104      	adds	r1, #4
 80026dc:	f000 fd58 	bl	8003190 <vListInsert>
 80026e0:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 80026e2:	f640 139c 	movw	r3, #2460	; 0x99c
 80026e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80026f0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80026f4:	6819      	ldr	r1, [r3, #0]
 80026f6:	3104      	adds	r1, #4
 80026f8:	f000 fd4a 	bl	8003190 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80026fc:	f240 0354 	movw	r3, #84	; 0x54
 8002700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
 8002708:	bf3e      	ittt	cc
 800270a:	f240 0354 	movwcc	r3, #84	; 0x54
 800270e:	f2c2 0300 	movtcc	r3, #8192	; 0x2000
 8002712:	601c      	strcc	r4, [r3, #0]
 8002714:	bd10      	pop	{r4, pc}
 8002716:	bf00      	nop

08002718 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
 8002718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271c:	b083      	sub	sp, #12
 800271e:	4682      	mov	sl, r0
 8002720:	468b      	mov	fp, r1
 8002722:	4615      	mov	r5, r2
 8002724:	4699      	mov	r9, r3
 8002726:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002728:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 800272c:	4610      	mov	r0, r2
 800272e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002730:	f7ff ff42 	bl	80025b8 <prvAllocateTCBAndStack>

	if( pxNewTCB != NULL )
 8002734:	4604      	mov	r4, r0
 8002736:	2800      	cmp	r0, #0
 8002738:	d077      	beq.n	800282a <xTaskGenericCreate+0x112>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 800273a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800273c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8002740:	3f01      	subs	r7, #1
 8002742:	eb03 0787 	add.w	r7, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
 8002746:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 800274a:	9500      	str	r5, [sp, #0]
 800274c:	4659      	mov	r1, fp
 800274e:	4632      	mov	r2, r6
 8002750:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002752:	f7ff ff4d 	bl	80025f0 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002756:	4638      	mov	r0, r7
 8002758:	4651      	mov	r1, sl
 800275a:	464a      	mov	r2, r9
 800275c:	f000 fd46 	bl	80031ec <pxPortInitialiseStack>
 8002760:	6020      	str	r0, [r4, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
 8002762:	f1b8 0f00 	cmp.w	r8, #0
 8002766:	d001      	beq.n	800276c <xTaskGenericCreate+0x54>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 8002768:	f8c8 4000 	str.w	r4, [r8]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
 800276c:	f000 fd66 	bl	800323c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8002770:	f640 131c 	movw	r3, #2332	; 0x91c
 8002774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	3201      	adds	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
 800277e:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002782:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b973      	cbnz	r3, 80027a8 <xTaskGenericCreate+0x90>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 800278a:	f640 13c0 	movw	r3, #2496	; 0x9c0
 800278e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002792:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 8002794:	f640 131c 	movw	r3, #2332	; 0x91c
 8002798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d115      	bne.n	80027ce <xTaskGenericCreate+0xb6>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
 80027a2:	f7ff ff45 	bl	8002630 <prvInitialiseTaskLists>
 80027a6:	e012      	b.n	80027ce <xTaskGenericCreate+0xb6>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80027a8:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80027ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b963      	cbnz	r3, 80027ce <xTaskGenericCreate+0xb6>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80027b4:	f640 13c0 	movw	r3, #2496	; 0x9c0
 80027b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	42b3      	cmp	r3, r6
					{
						pxCurrentTCB = pxNewTCB;
 80027c2:	bf9e      	ittt	ls
 80027c4:	f640 13c0 	movwls	r3, #2496	; 0x9c0
 80027c8:	f2c2 0300 	movtls	r3, #8192	; 0x2000
 80027cc:	601c      	strls	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 80027ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80027d0:	f640 2214 	movw	r2, #2580	; 0xa14
 80027d4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
 80027dc:	bf82      	ittt	hi
 80027de:	f640 2214 	movwhi	r2, #2580	; 0xa14
 80027e2:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 80027e6:	6013      	strhi	r3, [r2, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
 80027e8:	f640 2100 	movw	r1, #2560	; 0xa00
 80027ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80027f0:	680a      	ldr	r2, [r1, #0]
 80027f2:	3201      	adds	r2, #1
 80027f4:	600a      	str	r2, [r1, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
 80027f6:	f640 1114 	movw	r1, #2324	; 0x914
 80027fa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80027fe:	680a      	ldr	r2, [r1, #0]
 8002800:	4293      	cmp	r3, r2
 8002802:	bf82      	ittt	hi
 8002804:	f640 1214 	movwhi	r2, #2324	; 0x914
 8002808:	460a      	movhi	r2, r1
 800280a:	6013      	strhi	r3, [r2, #0]
 800280c:	f640 1020 	movw	r0, #2336	; 0x920
 8002810:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002814:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002818:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800281c:	1d21      	adds	r1, r4, #4
 800281e:	f000 fca9 	bl	8003174 <vListInsertEnd>

			xReturn = pdPASS;
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8002822:	f000 fd17 	bl	8003254 <vPortExitCritical>
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
 8002826:	2401      	movs	r4, #1
 8002828:	e001      	b.n	800282e <xTaskGenericCreate+0x116>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800282a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
 800282e:	2c01      	cmp	r4, #1
 8002830:	d10f      	bne.n	8002852 <xTaskGenericCreate+0x13a>
	{
		if( xSchedulerRunning != pdFALSE )
 8002832:	f640 13b4 	movw	r3, #2484	; 0x9b4
 8002836:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	b14b      	cbz	r3, 8002852 <xTaskGenericCreate+0x13a>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800283e:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002842:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	42b3      	cmp	r3, r6
 800284c:	d201      	bcs.n	8002852 <xTaskGenericCreate+0x13a>
			{
				portYIELD_WITHIN_API();
 800284e:	f000 fced 	bl	800322c <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
}
 8002852:	4620      	mov	r0, r4
 8002854:	b003      	add	sp, #12
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285a:	bf00      	nop

0800285c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	4604      	mov	r4, r0
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
 8002860:	f000 fcec 	bl	800323c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
 8002864:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800286c:	681b      	ldr	r3, [r3, #0]
			{
				pxTaskToDelete = NULL;
 800286e:	429c      	cmp	r4, r3
 8002870:	bf08      	it	eq
 8002872:	2400      	moveq	r4, #0
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 8002874:	4625      	mov	r5, r4
 8002876:	b92c      	cbnz	r4, 8002884 <vTaskDelete+0x28>
 8002878:	f640 13c0 	movw	r3, #2496	; 0x9c0
 800287c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002880:	681d      	ldr	r5, [r3, #0]
 8002882:	e7ff      	b.n	8002884 <vTaskDelete+0x28>

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
 8002884:	1d2e      	adds	r6, r5, #4
 8002886:	4630      	mov	r0, r6
 8002888:	f000 fc9e 	bl	80031c8 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
 800288c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800288e:	b11b      	cbz	r3, 8002898 <vTaskDelete+0x3c>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
 8002890:	f105 0018 	add.w	r0, r5, #24
 8002894:	f000 fc98 	bl	80031c8 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8002898:	f640 1088 	movw	r0, #2440	; 0x988
 800289c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80028a0:	4631      	mov	r1, r6
 80028a2:	f000 fc67 	bl	8003174 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 80028a6:	f640 1318 	movw	r3, #2328	; 0x918
 80028aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	3201      	adds	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 80028b4:	f640 2300 	movw	r3, #2560	; 0xa00
 80028b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	3201      	adds	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80028c2:	f000 fcc7 	bl	8003254 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
 80028c6:	f640 13b4 	movw	r3, #2484	; 0x9b4
 80028ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b113      	cbz	r3, 80028d8 <vTaskDelete+0x7c>
		{
			if( ( void * ) pxTaskToDelete == NULL )
 80028d2:	b90c      	cbnz	r4, 80028d8 <vTaskDelete+0x7c>
			{
				portYIELD_WITHIN_API();
 80028d4:	f000 fcaa 	bl	800322c <vPortYieldFromISR>
 80028d8:	bd70      	pop	{r4, r5, r6, pc}
 80028da:	bf00      	nop

080028dc <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
 80028dc:	f640 2304 	movw	r3, #2564	; 0xa04
 80028e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	3201      	adds	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	4770      	bx	lr

080028ec <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
 80028ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 80028f0:	f640 2304 	movw	r3, #2564	; 0xa04
 80028f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8082 	bne.w	8002a04 <vTaskIncrementTick+0x118>
	{
		++xTickCount;
 8002900:	f640 2310 	movw	r3, #2576	; 0xa10
 8002904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	3201      	adds	r2, #1
 800290c:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	bb53      	cbnz	r3, 8002968 <vTaskIncrementTick+0x7c>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
 8002912:	f640 139c 	movw	r3, #2460	; 0x99c
 8002916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800291a:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
 800291c:	f640 1284 	movw	r2, #2436	; 0x984
 8002920:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002924:	6810      	ldr	r0, [r2, #0]
 8002926:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
 8002928:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
 800292a:	f640 220c 	movw	r2, #2572	; 0xa0c
 800292e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002932:	6811      	ldr	r1, [r2, #0]
 8002934:	3101      	adds	r1, #1
 8002936:	6011      	str	r1, [r2, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	b93b      	cbnz	r3, 800294e <vTaskIncrementTick+0x62>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
 800293e:	f240 0354 	movw	r3, #84	; 0x54
 8002942:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002946:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e00c      	b.n	8002968 <vTaskIncrementTick+0x7c>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800294e:	f640 139c 	movw	r3, #2460	; 0x99c
 8002952:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	f240 0354 	movw	r3, #84	; 0x54
 8002962:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002966:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
 8002968:	f640 2310 	movw	r3, #2576	; 0xa10
 800296c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f240 0354 	movw	r3, #84	; 0x54
 8002976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d348      	bcc.n	8002a12 <vTaskIncrementTick+0x126>
 8002980:	f640 169c 	movw	r6, #2460	; 0x99c
 8002984:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002988:	f640 2810 	movw	r8, #2576	; 0xa10
 800298c:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002990:	f640 1714 	movw	r7, #2324	; 0x914
 8002994:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8002998:	f640 1920 	movw	r9, #2336	; 0x920
 800299c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 80029a0:	6833      	ldr	r3, [r6, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b943      	cbnz	r3, 80029b8 <vTaskIncrementTick+0xcc>
 80029a6:	f240 0354 	movw	r3, #84	; 0x54
 80029aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029b8:	6833      	ldr	r3, [r6, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	68dc      	ldr	r4, [r3, #12]
 80029be:	6863      	ldr	r3, [r4, #4]
 80029c0:	f8d8 2000 	ldr.w	r2, [r8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d206      	bcs.n	80029d6 <vTaskIncrementTick+0xea>
 80029c8:	f240 0254 	movw	r2, #84	; 0x54
 80029cc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029d6:	1d25      	adds	r5, r4, #4
 80029d8:	4628      	mov	r0, r5
 80029da:	f000 fbf5 	bl	80031c8 <vListRemove>
 80029de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80029e0:	b11b      	cbz	r3, 80029ea <vTaskIncrementTick+0xfe>
 80029e2:	f104 0018 	add.w	r0, r4, #24
 80029e6:	f000 fbef 	bl	80031c8 <vListRemove>
 80029ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	4293      	cmp	r3, r2
 80029f0:	bf88      	it	hi
 80029f2:	603b      	strhi	r3, [r7, #0]
 80029f4:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80029f8:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80029fc:	4629      	mov	r1, r5
 80029fe:	f000 fbb9 	bl	8003174 <vListInsertEnd>
 8002a02:	e7cd      	b.n	80029a0 <vTaskIncrementTick+0xb4>
	}
	else
	{
		++uxMissedTicks;
 8002a04:	f640 2308 	movw	r3, #2568	; 0xa08
 8002a08:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	3201      	adds	r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a16:	bf00      	nop

08002a18 <xTaskResumeAll>:
	++uxSchedulerSuspended;
}
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
 8002a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002a1c:	f000 fc0e 	bl	800323c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002a20:	f640 2304 	movw	r3, #2564	; 0xa04
 8002a24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002a2e:	681b      	ldr	r3, [r3, #0]
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002a30:	2400      	movs	r4, #0
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d165      	bne.n	8002b02 <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 8002a36:	f640 131c 	movw	r3, #2332	; 0x91c
 8002a3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	bb0b      	cbnz	r3, 8002a86 <xTaskResumeAll+0x6e>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002a42:	2400      	movs	r4, #0
 8002a44:	e05d      	b.n	8002b02 <xTaskResumeAll+0xea>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 8002a46:	68f3      	ldr	r3, [r6, #12]
 8002a48:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
 8002a4a:	f104 0018 	add.w	r0, r4, #24
 8002a4e:	f000 fbbb 	bl	80031c8 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
 8002a52:	1d25      	adds	r5, r4, #4
 8002a54:	4628      	mov	r0, r5
 8002a56:	f000 fbb7 	bl	80031c8 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
 8002a5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a5c:	f8d8 2000 	ldr.w	r2, [r8]
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bf88      	it	hi
 8002a64:	f8c8 3000 	strhi.w	r3, [r8]
 8002a68:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002a6c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8002a70:	4629      	mov	r1, r5
 8002a72:	f000 fb7f 	bl	8003174 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a78:	f8d9 3000 	ldr.w	r3, [r9]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	bf28      	it	cs
 8002a82:	2701      	movcs	r7, #1
 8002a84:	e010      	b.n	8002aa8 <xTaskResumeAll+0x90>
 8002a86:	2700      	movs	r7, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002a88:	f640 16a0 	movw	r6, #2464	; 0x9a0
 8002a8c:	f2c2 0600 	movt	r6, #8192	; 0x2000
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					vListRemove( &( pxTCB->xEventListItem ) );
					vListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
 8002a90:	f640 1814 	movw	r8, #2324	; 0x914
 8002a94:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8002a98:	f640 1a20 	movw	sl, #2336	; 0x920
 8002a9c:	f2c2 0a00 	movt	sl, #8192	; 0x2000

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aa0:	f640 19c0 	movw	r9, #2496	; 0x9c0
 8002aa4:	f2c2 0900 	movt	r9, #8192	; 0x2000
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 8002aa8:	6833      	ldr	r3, [r6, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1cb      	bne.n	8002a46 <xTaskResumeAll+0x2e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002aae:	f640 2308 	movw	r3, #2568	; 0xa08
 8002ab2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	b933      	cbnz	r3, 8002ac8 <xTaskResumeAll+0xb0>
 8002aba:	e00d      	b.n	8002ad8 <xTaskResumeAll+0xc0>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
 8002abc:	f7ff ff16 	bl	80028ec <vTaskIncrementTick>
						--uxMissedTicks;
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6023      	str	r3, [r4, #0]
 8002ac6:	e003      	b.n	8002ad0 <xTaskResumeAll+0xb8>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 8002ac8:	f640 2408 	movw	r4, #2568	; 0xa08
 8002acc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f2      	bne.n	8002abc <xTaskResumeAll+0xa4>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
 8002ad6:	2701      	movs	r7, #1
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8002ad8:	2f01      	cmp	r7, #1
 8002ada:	d008      	beq.n	8002aee <xTaskResumeAll+0xd6>
 8002adc:	f640 13bc 	movw	r3, #2492	; 0x9bc
 8002ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 8002ae8:	bf18      	it	ne
 8002aea:	2400      	movne	r4, #0
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 8002aec:	d109      	bne.n	8002b02 <xTaskResumeAll+0xea>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
 8002aee:	f640 13bc 	movw	r3, #2492	; 0x9bc
 8002af2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002af6:	2200      	movs	r2, #0
 8002af8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
 8002afa:	f000 fb97 	bl	800322c <vPortYieldFromISR>
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
 8002afe:	2401      	movs	r4, #1
 8002b00:	e7ff      	b.n	8002b02 <xTaskResumeAll+0xea>
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
 8002b02:	f000 fba7 	bl	8003254 <vPortExitCritical>

	return xAlreadyYielded;
}
 8002b06:	4620      	mov	r0, r4
 8002b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002b0c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b0c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 8002b0e:	f640 2304 	movw	r3, #2564	; 0xa04
 8002b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b133      	cbz	r3, 8002b28 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
 8002b1a:	f640 13bc 	movw	r3, #2492	; 0x9bc
 8002b1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	bd10      	pop	{r4, pc}
			unsigned long ulTempCounter;
			
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
				#else
					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 8002b28:	f7fe fb82 	bl	8001230 <get_us_time>
				/* Add the amount of time the task has been running to the accumulated
				time so far.  The time the task started running was stored in
				ulTaskSwitchedInTime.  Note that there is no overflow protection here
				so count values are only valid until the timer overflows.  Generally
				this will be about 1 hour assuming a 1uS timer increment. */
				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 8002b2c:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f640 13b8 	movw	r3, #2488	; 0x9b8
 8002b3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b3e:	6819      	ldr	r1, [r3, #0]
 8002b40:	1a44      	subs	r4, r0, r1
 8002b42:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002b44:	4421      	add	r1, r4
 8002b46:	64d1      	str	r1, [r2, #76]	; 0x4c
				ulTaskSwitchedInTime = ulTempCounter;
 8002b48:	6018      	str	r0, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8002b4a:	f640 1314 	movw	r3, #2324	; 0x914
 8002b4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b52:	f640 1120 	movw	r1, #2336	; 0x920
 8002b56:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002b5a:	e002      	b.n	8002b62 <vTaskSwitchContext+0x56>
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002b68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b6c:	2a00      	cmp	r2, #0
 8002b6e:	d0f5      	beq.n	8002b5c <vTaskSwitchContext+0x50>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 8002b70:	f640 1314 	movw	r3, #2324	; 0x914
 8002b74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f640 1220 	movw	r2, #2336	; 0x920
 8002b7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002b82:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b86:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	6852      	ldr	r2, [r2, #4]
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	f103 0108 	add.w	r1, r3, #8
 8002b94:	428a      	cmp	r2, r1
 8002b96:	bf04      	itt	eq
 8002b98:	6852      	ldreq	r2, [r2, #4]
 8002b9a:	605a      	streq	r2, [r3, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002ba4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ba8:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bae:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8002bb2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	bd10      	pop	{r4, pc}
 8002bba:	bf00      	nop

08002bbc <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	460d      	mov	r5, r1
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 8002bc0:	f640 14c0 	movw	r4, #2496	; 0x9c0
 8002bc4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8002bc8:	6821      	ldr	r1, [r4, #0]
 8002bca:	3118      	adds	r1, #24
 8002bcc:	f000 fae0 	bl	8003190 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002bd0:	6820      	ldr	r0, [r4, #0]
 8002bd2:	3004      	adds	r0, #4
 8002bd4:	f000 faf8 	bl	80031c8 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8002bd8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8002bdc:	d108      	bne.n	8002bf0 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 8002bde:	6821      	ldr	r1, [r4, #0]
 8002be0:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002be4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002be8:	3104      	adds	r1, #4
 8002bea:	f000 fac3 	bl	8003174 <vListInsertEnd>
 8002bee:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
 8002bf0:	f640 2310 	movw	r3, #2576	; 0xa10
 8002bf4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bf8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8002bfa:	4428      	add	r0, r5
 8002bfc:	f7ff fd54 	bl	80026a8 <prvAddCurrentTaskToDelayedList>
 8002c00:	bd38      	pop	{r3, r4, r5, pc}
 8002c02:	bf00      	nop

08002c04 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
 8002c04:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c06:	68c3      	ldr	r3, [r0, #12]
 8002c08:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c0a:	f104 0518 	add.w	r5, r4, #24
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f000 fada 	bl	80031c8 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 8002c14:	f640 2304 	movw	r3, #2564	; 0xa04
 8002c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b9e3      	cbnz	r3, 8002c5a <xTaskRemoveFromEventList+0x56>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8002c20:	1d25      	adds	r5, r4, #4
 8002c22:	4628      	mov	r0, r5
 8002c24:	f000 fad0 	bl	80031c8 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
 8002c28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c2a:	f640 1214 	movw	r2, #2324	; 0x914
 8002c2e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bf82      	ittt	hi
 8002c38:	f640 1214 	movwhi	r2, #2324	; 0x914
 8002c3c:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 8002c40:	6013      	strhi	r3, [r2, #0]
 8002c42:	f640 1020 	movw	r0, #2336	; 0x920
 8002c46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c4e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002c52:	4629      	mov	r1, r5
 8002c54:	f000 fa8e 	bl	8003174 <vListInsertEnd>
 8002c58:	e006      	b.n	8002c68 <xTaskRemoveFromEventList+0x64>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c5a:	f640 10a0 	movw	r0, #2464	; 0x9a0
 8002c5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c62:	4629      	mov	r1, r5
 8002c64:	f000 fa86 	bl	8003174 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c68:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002c6a:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002c6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
 8002c76:	4298      	cmp	r0, r3
 8002c78:	bf34      	ite	cc
 8002c7a:	2000      	movcc	r0, #0
 8002c7c:	2001      	movcs	r0, #1
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}

08002c80 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c80:	f640 230c 	movw	r3, #2572	; 0xa0c
 8002c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c8c:	f640 2310 	movw	r3, #2576	; 0xa10
 8002c90:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6043      	str	r3, [r0, #4]
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop

08002c9c <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
 8002c9c:	b538      	push	{r3, r4, r5, lr}
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
 8002ca2:	f000 facb 	bl	800323c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002ca6:	682a      	ldr	r2, [r5, #0]
 8002ca8:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
			{
				xReturn = pdFALSE;
 8002cac:	bf08      	it	eq
 8002cae:	2400      	moveq	r4, #0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8002cb0:	d029      	beq.n	8002d06 <xTaskCheckForTimeOut+0x6a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8002cb2:	6821      	ldr	r1, [r4, #0]
 8002cb4:	f640 230c 	movw	r3, #2572	; 0xa0c
 8002cb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4299      	cmp	r1, r3
 8002cc0:	d009      	beq.n	8002cd6 <xTaskCheckForTimeOut+0x3a>
 8002cc2:	6861      	ldr	r1, [r4, #4]
 8002cc4:	f640 2310 	movw	r3, #2576	; 0xa10
 8002cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4299      	cmp	r1, r3
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8002cd0:	bf98      	it	ls
 8002cd2:	2401      	movls	r4, #1
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
 8002cd4:	d917      	bls.n	8002d06 <xTaskCheckForTimeOut+0x6a>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8002cd6:	f640 2310 	movw	r3, #2576	; 0xa10
 8002cda:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cde:	6819      	ldr	r1, [r3, #0]
 8002ce0:	6863      	ldr	r3, [r4, #4]
 8002ce2:	1ac9      	subs	r1, r1, r3
 8002ce4:	428a      	cmp	r2, r1
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
 8002ce6:	bf98      	it	ls
 8002ce8:	2401      	movls	r4, #1
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
 8002cea:	d90c      	bls.n	8002d06 <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 8002cec:	f640 2110 	movw	r1, #2576	; 0xa10
 8002cf0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8002cf4:	6809      	ldr	r1, [r1, #0]
 8002cf6:	1a5b      	subs	r3, r3, r1
 8002cf8:	441a      	add	r2, r3
 8002cfa:	602a      	str	r2, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7ff ffbf 	bl	8002c80 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002d02:	2400      	movs	r4, #0
 8002d04:	e7ff      	b.n	8002d06 <xTaskCheckForTimeOut+0x6a>
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8002d06:	f000 faa5 	bl	8003254 <vPortExitCritical>

	return xReturn;
}
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
 8002d0e:	bf00      	nop

08002d10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
 8002d10:	f640 13bc 	movw	r3, #2492	; 0x9bc
 8002d14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8002d20:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002d24:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d28:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
 8002d2a:	4770      	bx	lr

08002d2c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4604      	mov	r4, r0
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002d30:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002d32:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002d36:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d23d      	bcs.n	8002dbe <vTaskPriorityInherit+0x92>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
 8002d42:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	f1c3 0305 	rsb	r3, r3, #5
 8002d52:	6183      	str	r3, [r0, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8002d54:	6941      	ldr	r1, [r0, #20]
 8002d56:	f640 1320 	movw	r3, #2336	; 0x920
 8002d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d5e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002d62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002d66:	4299      	cmp	r1, r3
 8002d68:	d122      	bne.n	8002db0 <vTaskPriorityInherit+0x84>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
 8002d6a:	1d05      	adds	r5, r0, #4
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 fa2b 	bl	80031c8 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002d72:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7e:	62e3      	str	r3, [r4, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
 8002d80:	f640 1214 	movw	r2, #2324	; 0x914
 8002d84:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	bf82      	ittt	hi
 8002d8e:	f640 1214 	movwhi	r2, #2324	; 0x914
 8002d92:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 8002d96:	6013      	strhi	r3, [r2, #0]
 8002d98:	f640 1020 	movw	r0, #2336	; 0x920
 8002d9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002da0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002da4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002da8:	4629      	mov	r1, r5
 8002daa:	f000 f9e3 	bl	8003174 <vListInsertEnd>
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002db0:	f640 13c0 	movw	r3, #2496	; 0x9c0
 8002db4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002dbe:	bd38      	pop	{r3, r4, r5, pc}

08002dc0 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
 8002dc0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	b318      	cbz	r0, 8002e0e <vTaskPriorityDisinherit+0x4e>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002dc6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002dc8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d01f      	beq.n	8002e0e <vTaskPriorityDisinherit+0x4e>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
 8002dce:	1d05      	adds	r5, r0, #4
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	f000 f9f9 	bl	80031c8 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
 8002dda:	f1c3 0205 	rsb	r2, r3, #5
 8002dde:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
 8002de0:	f640 1214 	movw	r2, #2324	; 0x914
 8002de4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	bf82      	ittt	hi
 8002dee:	f640 1214 	movwhi	r2, #2324	; 0x914
 8002df2:	f2c2 0200 	movthi	r2, #8192	; 0x2000
 8002df6:	6013      	strhi	r3, [r2, #0]
 8002df8:	f640 1020 	movw	r0, #2336	; 0x920
 8002dfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002e00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e04:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002e08:	4629      	mov	r1, r5
 8002e0a:	f000 f9b3 	bl	8003174 <vListInsertEnd>
 8002e0e:	bd38      	pop	{r3, r4, r5, pc}

08002e10 <prvIsQueueFull>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
 8002e10:	b510      	push	{r4, lr}
 8002e12:	4604      	mov	r4, r0
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002e14:	f000 fa12 	bl	800323c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
 8002e18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	bf14      	ite	ne
 8002e20:	2400      	movne	r4, #0
 8002e22:	2401      	moveq	r4, #1
	taskEXIT_CRITICAL();
 8002e24:	f000 fa16 	bl	8003254 <vPortExitCritical>

	return xReturn;
}
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd10      	pop	{r4, pc}

08002e2c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	4604      	mov	r4, r0
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
 8002e30:	f000 fa04 	bl	800323c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
 8002e34:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002e36:	f1d4 0401 	rsbs	r4, r4, #1
 8002e3a:	bf38      	it	cc
 8002e3c:	2400      	movcc	r4, #0
	taskEXIT_CRITICAL();
 8002e3e:	f000 fa09 	bl	8003254 <vPortExitCritical>

	return xReturn;
}
 8002e42:	4620      	mov	r0, r4
 8002e44:	bd10      	pop	{r4, pc}
 8002e46:	bf00      	nop

08002e48 <prvCopyDataToQueue>:
	vPortFree( pxQueue );
}
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
 8002e4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002e4e:	b93b      	cbnz	r3, 8002e60 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e50:	6803      	ldr	r3, [r0, #0]
 8002e52:	bb1b      	cbnz	r3, 8002e9c <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e54:	6840      	ldr	r0, [r0, #4]
 8002e56:	f7ff ffb3 	bl	8002dc0 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6063      	str	r3, [r4, #4]
 8002e5e:	e01d      	b.n	8002e9c <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e60:	b96a      	cbnz	r2, 8002e7e <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8002e62:	6880      	ldr	r0, [r0, #8]
 8002e64:	461a      	mov	r2, r3
 8002e66:	f7fd f9f3 	bl	8000250 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e6a:	68a2      	ldr	r2, [r4, #8]
 8002e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e6e:	4413      	add	r3, r2
 8002e70:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
 8002e72:	6862      	ldr	r2, [r4, #4]
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d311      	bcc.n	8002e9c <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	60a3      	str	r3, [r4, #8]
 8002e7c:	e00e      	b.n	8002e9c <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
 8002e7e:	68c0      	ldr	r0, [r0, #12]
 8002e80:	461a      	mov	r2, r3
 8002e82:	f7fd f9e5 	bl	8000250 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
 8002e86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e88:	4252      	negs	r2, r2
 8002e8a:	68e3      	ldr	r3, [r4, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
 8002e90:	6821      	ldr	r1, [r4, #0]
 8002e92:	428b      	cmp	r3, r1
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e94:	bf3e      	ittt	cc
 8002e96:	6863      	ldrcc	r3, [r4, #4]
 8002e98:	18d2      	addcc	r2, r2, r3
 8002e9a:	60e2      	strcc	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
 8002e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
 8002ea8:	6805      	ldr	r5, [r0, #0]
 8002eaa:	b15d      	cbz	r5, 8002ec4 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
 8002eac:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002eae:	68c4      	ldr	r4, [r0, #12]
 8002eb0:	4414      	add	r4, r2
 8002eb2:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
 8002eb4:	6840      	ldr	r0, [r0, #4]
 8002eb6:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
 8002eb8:	bf28      	it	cs
 8002eba:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	f7fd f9c6 	bl	8000250 <memcpy>
 8002ec4:	bd38      	pop	{r3, r4, r5, pc}
 8002ec6:	bf00      	nop

08002ec8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ecc:	f000 f9b6 	bl	800323c <vPortEnterCritical>
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed0:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002ed4:	e00a      	b.n	8002eec <prvUnlockQueue+0x24>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ed6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ed8:	b15b      	cbz	r3, 8002ef2 <prvUnlockQueue+0x2a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eda:	4628      	mov	r0, r5
 8002edc:	f7ff fe92 	bl	8002c04 <xTaskRemoveFromEventList>
 8002ee0:	b108      	cbz	r0, 8002ee6 <prvUnlockQueue+0x1e>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
 8002ee2:	f7ff ff15 	bl	8002d10 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
 8002ee6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8002eec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	dcf1      	bgt.n	8002ed6 <prvUnlockQueue+0xe>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
 8002ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ef6:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 8002ef8:	f000 f9ac 	bl	8003254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002efc:	f000 f99e 	bl	800323c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f00:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002f04:	e00a      	b.n	8002f1c <prvUnlockQueue+0x54>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f06:	6923      	ldr	r3, [r4, #16]
 8002f08:	b15b      	cbz	r3, 8002f22 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f0a:	4628      	mov	r0, r5
 8002f0c:	f7ff fe7a 	bl	8002c04 <xTaskRemoveFromEventList>
 8002f10:	b108      	cbz	r0, 8002f16 <prvUnlockQueue+0x4e>
				{
					vTaskMissedYield();
 8002f12:	f7ff fefd 	bl	8002d10 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
 8002f16:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 8002f1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	dcf1      	bgt.n	8002f06 <prvUnlockQueue+0x3e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f26:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f28:	f000 f994 	bl	8003254 <vPortExitCritical>
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
 8002f2e:	bf00      	nop

08002f30 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
 8002f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f34:	b085      	sub	sp, #20
 8002f36:	4604      	mov	r4, r0
 8002f38:	468b      	mov	fp, r1
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8002f3e:	2600      	movs	r6, #0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
 8002f40:	f04f 0901 	mov.w	r9, #1

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8002f44:	4637      	mov	r7, r6
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f46:	f100 0810 	add.w	r8, r0, #16
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f4a:	f000 f977 	bl	800323c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8002f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f50:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002f52:	42ab      	cmp	r3, r5
 8002f54:	d212      	bcs.n	8002f7c <xQueueGenericSend+0x4c>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f56:	4620      	mov	r0, r4
 8002f58:	4659      	mov	r1, fp
 8002f5a:	4652      	mov	r2, sl
 8002f5c:	f7ff ff74 	bl	8002e48 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f62:	b13b      	cbz	r3, 8002f74 <xQueueGenericSend+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8002f64:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f68:	f7ff fe4c 	bl	8002c04 <xTaskRemoveFromEventList>
 8002f6c:	2801      	cmp	r0, #1
 8002f6e:	d101      	bne.n	8002f74 <xQueueGenericSend+0x44>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
 8002f70:	f000 f95c 	bl	800322c <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
 8002f74:	f000 f96e 	bl	8003254 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
 8002f78:	2001      	movs	r0, #1
 8002f7a:	e03f      	b.n	8002ffc <xQueueGenericSend+0xcc>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 8002f7c:	9b01      	ldr	r3, [sp, #4]
 8002f7e:	b91b      	cbnz	r3, 8002f88 <xQueueGenericSend+0x58>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f80:	f000 f968 	bl	8003254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f84:	2000      	movs	r0, #0
 8002f86:	e039      	b.n	8002ffc <xQueueGenericSend+0xcc>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f88:	b91e      	cbnz	r6, 8002f92 <xQueueGenericSend+0x62>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002f8a:	a802      	add	r0, sp, #8
 8002f8c:	f7ff fe78 	bl	8002c80 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f90:	464e      	mov	r6, r9
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f92:	f000 f95f 	bl	8003254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f96:	f7ff fca1 	bl	80028dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f9a:	f000 f94f 	bl	800323c <vPortEnterCritical>
 8002f9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa4:	bf08      	it	eq
 8002fa6:	6467      	streq	r7, [r4, #68]	; 0x44
 8002fa8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002faa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fae:	bf08      	it	eq
 8002fb0:	64a7      	streq	r7, [r4, #72]	; 0x48
 8002fb2:	f000 f94f 	bl	8003254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fb6:	a802      	add	r0, sp, #8
 8002fb8:	a901      	add	r1, sp, #4
 8002fba:	f7ff fe6f 	bl	8002c9c <xTaskCheckForTimeOut>
 8002fbe:	b9b8      	cbnz	r0, 8002ff0 <xQueueGenericSend+0xc0>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff ff25 	bl	8002e10 <prvIsQueueFull>
 8002fc6:	b168      	cbz	r0, 8002fe4 <xQueueGenericSend+0xb4>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002fc8:	4640      	mov	r0, r8
 8002fca:	9901      	ldr	r1, [sp, #4]
 8002fcc:	f7ff fdf6 	bl	8002bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002fd0:	4620      	mov	r0, r4
 8002fd2:	f7ff ff79 	bl	8002ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002fd6:	f7ff fd1f 	bl	8002a18 <xTaskResumeAll>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d1b5      	bne.n	8002f4a <xQueueGenericSend+0x1a>
				{
					portYIELD_WITHIN_API();
 8002fde:	f000 f925 	bl	800322c <vPortYieldFromISR>
 8002fe2:	e7b2      	b.n	8002f4a <xQueueGenericSend+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	f7ff ff6f 	bl	8002ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fea:	f7ff fd15 	bl	8002a18 <xTaskResumeAll>
 8002fee:	e7ac      	b.n	8002f4a <xQueueGenericSend+0x1a>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	f7ff ff69 	bl	8002ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ff6:	f7ff fd0f 	bl	8002a18 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ffa:	2000      	movs	r0, #0
		}
	}
}
 8002ffc:	b005      	add	sp, #20
 8002ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop

08003004 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
 8003004:	b538      	push	{r3, r4, r5, lr}
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
 8003006:	204c      	movs	r0, #76	; 0x4c
 8003008:	f001 f982 	bl	8004310 <malloc>
		if( pxNewQueue != NULL )
 800300c:	4604      	mov	r4, r0
 800300e:	b1c8      	cbz	r0, 8003044 <xQueueCreateMutex+0x40>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003010:	2500      	movs	r5, #0
 8003012:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003014:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
 8003016:	6085      	str	r5, [r0, #8]
			pxNewQueue->pcReadFrom = NULL;
 8003018:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
 800301a:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
 800301c:	2301      	movs	r3, #1
 800301e:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
 8003020:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
 8003022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003026:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
 8003028:	6483      	str	r3, [r0, #72]	; 0x48

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
 800302a:	3010      	adds	r0, #16
 800302c:	f000 f892 	bl	8003154 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
 8003030:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003034:	f000 f88e 	bl	8003154 <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
 8003038:	4620      	mov	r0, r4
 800303a:	4629      	mov	r1, r5
 800303c:	462a      	mov	r2, r5
 800303e:	462b      	mov	r3, r5
 8003040:	f7ff ff76 	bl	8002f30 <xQueueGenericSend>
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
 8003044:	4620      	mov	r0, r4
 8003046:	bd38      	pop	{r3, r4, r5, pc}

08003048 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
 8003048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	4604      	mov	r4, r0
 8003050:	468a      	mov	sl, r1
 8003052:	9201      	str	r2, [sp, #4]
 8003054:	4699      	mov	r9, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
 8003056:	2500      	movs	r5, #0
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
 8003058:	f04f 0801 	mov.w	r8, #1

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800305c:	462f      	mov	r7, r5
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800305e:	f100 0624 	add.w	r6, r0, #36	; 0x24
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003062:	f000 f8eb 	bl	800323c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
 8003066:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003068:	b342      	cbz	r2, 80030bc <xQueueGenericReceive+0x74>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
 800306a:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800306c:	4620      	mov	r0, r4
 800306e:	4651      	mov	r1, sl
 8003070:	f7ff ff18 	bl	8002ea4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8003074:	f1b9 0f00 	cmp.w	r9, #0
 8003078:	d112      	bne.n	80030a0 <xQueueGenericReceive+0x58>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
 800307a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800307c:	3b01      	subs	r3, #1
 800307e:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	b913      	cbnz	r3, 800308a <xQueueGenericReceive+0x42>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
 8003084:	f7ff fe4c 	bl	8002d20 <xTaskGetCurrentTaskHandle>
 8003088:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800308a:	6923      	ldr	r3, [r4, #16]
 800308c:	b193      	cbz	r3, 80030b4 <xQueueGenericReceive+0x6c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800308e:	f104 0010 	add.w	r0, r4, #16
 8003092:	f7ff fdb7 	bl	8002c04 <xTaskRemoveFromEventList>
 8003096:	2801      	cmp	r0, #1
 8003098:	d10c      	bne.n	80030b4 <xQueueGenericReceive+0x6c>
						{
							portYIELD_WITHIN_API();
 800309a:	f000 f8c7 	bl	800322c <vPortYieldFromISR>
 800309e:	e009      	b.n	80030b4 <xQueueGenericReceive+0x6c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
 80030a0:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030a4:	b133      	cbz	r3, 80030b4 <xQueueGenericReceive+0x6c>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030aa:	f7ff fdab 	bl	8002c04 <xTaskRemoveFromEventList>
 80030ae:	b108      	cbz	r0, 80030b4 <xQueueGenericReceive+0x6c>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
 80030b0:	f000 f8bc 	bl	800322c <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
 80030b4:	f000 f8ce 	bl	8003254 <vPortExitCritical>
				return pdPASS;
 80030b8:	2001      	movs	r0, #1
 80030ba:	e048      	b.n	800314e <xQueueGenericReceive+0x106>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
 80030bc:	9b01      	ldr	r3, [sp, #4]
 80030be:	b91b      	cbnz	r3, 80030c8 <xQueueGenericReceive+0x80>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030c0:	f000 f8c8 	bl	8003254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030c4:	2000      	movs	r0, #0
 80030c6:	e042      	b.n	800314e <xQueueGenericReceive+0x106>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030c8:	b91d      	cbnz	r5, 80030d2 <xQueueGenericReceive+0x8a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80030ca:	a802      	add	r0, sp, #8
 80030cc:	f7ff fdd8 	bl	8002c80 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030d0:	4645      	mov	r5, r8
				}
			}
		}
		taskEXIT_CRITICAL();
 80030d2:	f000 f8bf 	bl	8003254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030d6:	f7ff fc01 	bl	80028dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030da:	f000 f8af 	bl	800323c <vPortEnterCritical>
 80030de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e4:	bf08      	it	eq
 80030e6:	6467      	streq	r7, [r4, #68]	; 0x44
 80030e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80030ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ee:	bf08      	it	eq
 80030f0:	64a7      	streq	r7, [r4, #72]	; 0x48
 80030f2:	f000 f8af 	bl	8003254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030f6:	a802      	add	r0, sp, #8
 80030f8:	a901      	add	r1, sp, #4
 80030fa:	f7ff fdcf 	bl	8002c9c <xTaskCheckForTimeOut>
 80030fe:	bb00      	cbnz	r0, 8003142 <xQueueGenericReceive+0xfa>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003100:	4620      	mov	r0, r4
 8003102:	f7ff fe93 	bl	8002e2c <prvIsQueueEmpty>
 8003106:	b1b0      	cbz	r0, 8003136 <xQueueGenericReceive+0xee>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	b933      	cbnz	r3, 800311a <xQueueGenericReceive+0xd2>
					{
						portENTER_CRITICAL();
 800310c:	f000 f896 	bl	800323c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8003110:	6860      	ldr	r0, [r4, #4]
 8003112:	f7ff fe0b 	bl	8002d2c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
 8003116:	f000 f89d 	bl	8003254 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800311a:	4630      	mov	r0, r6
 800311c:	9901      	ldr	r1, [sp, #4]
 800311e:	f7ff fd4d 	bl	8002bbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff fed0 	bl	8002ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003128:	f7ff fc76 	bl	8002a18 <xTaskResumeAll>
 800312c:	2800      	cmp	r0, #0
 800312e:	d198      	bne.n	8003062 <xQueueGenericReceive+0x1a>
				{
					portYIELD_WITHIN_API();
 8003130:	f000 f87c 	bl	800322c <vPortYieldFromISR>
 8003134:	e795      	b.n	8003062 <xQueueGenericReceive+0x1a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff fec6 	bl	8002ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800313c:	f7ff fc6c 	bl	8002a18 <xTaskResumeAll>
 8003140:	e78f      	b.n	8003062 <xQueueGenericReceive+0x1a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8003142:	4620      	mov	r0, r4
 8003144:	f7ff fec0 	bl	8002ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003148:	f7ff fc66 	bl	8002a18 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 800314c:	2000      	movs	r0, #0
		}
	}
}
 800314e:	b004      	add	sp, #16
 8003150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003154 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
 8003154:	f100 0308 	add.w	r3, r0, #8
 8003158:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800315a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800315e:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
 8003160:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
 8003162:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	6003      	str	r3, [r0, #0]
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop

0800316c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800316c:	2300      	movs	r3, #0
 800316e:	6103      	str	r3, [r0, #16]
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop

08003174 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
 8003174:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
 800317a:	6842      	ldr	r2, [r0, #4]
 800317c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
 8003182:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
 8003184:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003186:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003188:	6803      	ldr	r3, [r0, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	6003      	str	r3, [r0, #0]
 800318e:	4770      	bx	lr

08003190 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
 8003190:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
 8003192:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003194:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003198:	bf0c      	ite	eq
 800319a:	6903      	ldreq	r3, [r0, #16]
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800319c:	f100 0308 	addne.w	r3, r0, #8
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031a0:	d101      	bne.n	80031a6 <vListInsert+0x16>
 80031a2:	e004      	b.n	80031ae <vListInsert+0x1e>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	42a2      	cmp	r2, r4
 80031ac:	d9fa      	bls.n	80031a4 <vListInsert+0x14>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
 80031b2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031b4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
 80031b6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80031b8:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80031ba:	6803      	ldr	r3, [r0, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	6003      	str	r3, [r0, #0]
}
 80031c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop

080031c8 <vListRemove>:

void vListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031c8:	6843      	ldr	r3, [r0, #4]
 80031ca:	6882      	ldr	r2, [r0, #8]
 80031cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031ce:	6883      	ldr	r3, [r0, #8]
 80031d0:	6842      	ldr	r2, [r0, #4]
 80031d2:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
 80031d4:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031da:	bf04      	itt	eq
 80031dc:	6882      	ldreq	r2, [r0, #8]
 80031de:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
 80031e0:	2200      	movs	r2, #0
 80031e2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	3a01      	subs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	4770      	bx	lr

080031ec <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80031ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031f0:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 80031f4:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
 80031f8:	2300      	movs	r3, #0
 80031fa:	f840 3c0c 	str.w	r3, [r0, #-12]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 80031fe:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8003202:	f06f 0302 	mvn.w	r3, #2
 8003206:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800320a:	3844      	subs	r0, #68	; 0x44
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003210:	4b05      	ldr	r3, [pc, #20]	; (8003228 <pxCurrentTCBConst2>)
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	6808      	ldr	r0, [r1, #0]
 8003216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800321a:	f380 8809 	msr	PSP, r0
 800321e:	f04f 0000 	mov.w	r0, #0
 8003222:	f380 8811 	msr	BASEPRI, r0
 8003226:	4770      	bx	lr

08003228 <pxCurrentTCBConst2>:
 8003228:	200009c0 	.word	0x200009c0

0800322c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800322c:	f64e 5304 	movw	r3, #60676	; 0xed04
 8003230:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	4770      	bx	lr

0800323c <vPortEnterCritical>:
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 800323c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003240:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 8003244:	f240 0358 	movw	r3, #88	; 0x58
 8003248:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	3201      	adds	r2, #1
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	4770      	bx	lr

08003254 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 8003254:	f240 0358 	movw	r3, #88	; 0x58
 8003258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	3a01      	subs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8003262:	b91a      	cbnz	r2, 800326c <vPortExitCritical+0x18>
	{
		portENABLE_INTERRUPTS();
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f380 8811 	msr	BASEPRI, r0
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop

08003270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003270:	f3ef 8009 	mrs	r0, PSP
 8003274:	4b11      	ldr	r3, [pc, #68]	; (80032bc <pxCurrentTCBConst>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	f01e 0f10 	tst.w	lr, #16
 800327c:	bf08      	it	eq
 800327e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003282:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	6010      	str	r0, [r2, #0]
 8003288:	e92d 4008 	stmdb	sp!, {r3, lr}
 800328c:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8003290:	f380 8811 	msr	BASEPRI, r0
 8003294:	f7ff fc3a 	bl	8002b0c <vTaskSwitchContext>
 8003298:	f04f 0000 	mov.w	r0, #0
 800329c:	f380 8811 	msr	BASEPRI, r0
 80032a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80032a4:	6819      	ldr	r1, [r3, #0]
 80032a6:	6808      	ldr	r0, [r1, #0]
 80032a8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ac:	f01e 0f10 	tst.w	lr, #16
 80032b0:	bf08      	it	eq
 80032b2:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032b6:	f380 8809 	msr	PSP, r0
 80032ba:	4770      	bx	lr

080032bc <pxCurrentTCBConst>:
 80032bc:	200009c0 	.word	0x200009c0

080032c0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032c0:	b508      	push	{r3, lr}
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80032c2:	f64e 5304 	movw	r3, #60676	; 0xed04
 80032c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80032ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 80032d0:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80032d4:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
 80032d8:	f7ff fb08 	bl	80028ec <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 80032dc:	f04f 0000 	mov.w	r0, #0
 80032e0:	f380 8811 	msr	BASEPRI, r0
 80032e4:	bd08      	pop	{r3, pc}
 80032e6:	bf00      	nop

080032e8 <NVIC_Init>:
 80032e8:	b480      	push	{r7}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	2300      	movs	r3, #0
 80032f2:	73fb      	strb	r3, [r7, #15]
 80032f4:	2300      	movs	r3, #0
 80032f6:	73bb      	strb	r3, [r7, #14]
 80032f8:	230f      	movs	r3, #15
 80032fa:	737b      	strb	r3, [r7, #13]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	78db      	ldrb	r3, [r3, #3]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d040      	beq.n	8003386 <NVIC_Init+0x9e>
 8003304:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003308:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	43db      	mvns	r3, r3
 8003310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003314:	0a1b      	lsrs	r3, r3, #8
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	f1c3 0304 	rsb	r3, r3, #4
 800331e:	73bb      	strb	r3, [r7, #14]
 8003320:	7b7a      	ldrb	r2, [r7, #13]
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	fa42 f303 	asr.w	r3, r2, r3
 8003328:	737b      	strb	r3, [r7, #13]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	785b      	ldrb	r3, [r3, #1]
 800332e:	461a      	mov	r2, r3
 8003330:	7bbb      	ldrb	r3, [r7, #14]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	789a      	ldrb	r2, [r3, #2]
 800333c:	7b7b      	ldrb	r3, [r7, #13]
 800333e:	4013      	ands	r3, r2
 8003340:	b2da      	uxtb	r2, r3
 8003342:	7bfb      	ldrb	r3, [r7, #15]
 8003344:	4313      	orrs	r3, r2
 8003346:	73fb      	strb	r3, [r7, #15]
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003352:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	7812      	ldrb	r2, [r2, #0]
 800335a:	4413      	add	r3, r2
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003362:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003366:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	7812      	ldrb	r2, [r2, #0]
 800336e:	0952      	lsrs	r2, r2, #5
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	7809      	ldrb	r1, [r1, #0]
 8003376:	f001 011f 	and.w	r1, r1, #31
 800337a:	2001      	movs	r0, #1
 800337c:	fa00 f101 	lsl.w	r1, r0, r1
 8003380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003384:	e011      	b.n	80033aa <NVIC_Init+0xc2>
 8003386:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800338a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	7812      	ldrb	r2, [r2, #0]
 8003392:	0952      	lsrs	r2, r2, #5
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	7809      	ldrb	r1, [r1, #0]
 800339a:	f001 011f 	and.w	r1, r1, #31
 800339e:	2001      	movs	r0, #1
 80033a0:	fa00 f101 	lsl.w	r1, r0, r1
 80033a4:	3220      	adds	r2, #32
 80033a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <GPIO_Init>:
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	e076      	b.n	80034be <GPIO_Init+0x10a>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2201      	movs	r2, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d165      	bne.n	80034b8 <GPIO_Init+0x104>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	2103      	movs	r1, #3
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43db      	mvns	r3, r3
 80033fc:	401a      	ands	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	791b      	ldrb	r3, [r3, #4]
 800340a:	4619      	mov	r1, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	431a      	orrs	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	791b      	ldrb	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d003      	beq.n	800342a <GPIO_Init+0x76>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	791b      	ldrb	r3, [r3, #4]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d12e      	bne.n	8003488 <GPIO_Init+0xd4>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	2103      	movs	r1, #3
 8003434:	fa01 f303 	lsl.w	r3, r1, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	795b      	ldrb	r3, [r3, #5]
 8003448:	4619      	mov	r1, r3
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	005b      	lsls	r3, r3, #1
 800344e:	fa01 f303 	lsl.w	r3, r1, r3
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	b29b      	uxth	r3, r3
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f303 	lsl.w	r3, r1, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	401a      	ands	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	799b      	ldrb	r3, [r3, #6]
 8003476:	4619      	mov	r1, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	b29b      	uxth	r3, r3
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	b29b      	uxth	r3, r3
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	605a      	str	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	b29b      	uxth	r3, r3
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	2103      	movs	r1, #3
 8003494:	fa01 f303 	lsl.w	r3, r1, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68da      	ldr	r2, [r3, #12]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	79db      	ldrb	r3, [r3, #7]
 80034a8:	4619      	mov	r1, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3301      	adds	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2b0f      	cmp	r3, #15
 80034c2:	d985      	bls.n	80033d0 <GPIO_Init+0x1c>
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop

080034d0 <GPIO_ReadInputDataBit>:
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <GPIO_ReadInputDataBit+0x22>
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e001      	b.n	80034f6 <GPIO_ReadInputDataBit+0x26>
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <GPIO_SetBits>:
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	831a      	strh	r2, [r3, #24]
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <GPIO_ResetBits>:
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	835a      	strh	r2, [r3, #26]
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <GPIO_PinAFConfig>:
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	4613      	mov	r3, r2
 8003546:	460a      	mov	r2, r1
 8003548:	807a      	strh	r2, [r7, #2]
 800354a:	707b      	strb	r3, [r7, #1]
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	2300      	movs	r3, #0
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	787a      	ldrb	r2, [r7, #1]
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	887b      	ldrh	r3, [r7, #2]
 8003566:	08db      	lsrs	r3, r3, #3
 8003568:	b29b      	uxth	r3, r3
 800356a:	461a      	mov	r2, r3
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	b29b      	uxth	r3, r3
 8003572:	4619      	mov	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3108      	adds	r1, #8
 8003578:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800357c:	887b      	ldrh	r3, [r7, #2]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	200f      	movs	r0, #15
 8003586:	fa00 f303 	lsl.w	r3, r0, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	4019      	ands	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3208      	adds	r2, #8
 8003592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	08db      	lsrs	r3, r3, #3
 800359a:	b29b      	uxth	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3208      	adds	r2, #8
 80035a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3208      	adds	r2, #8
 80035b8:	68b9      	ldr	r1, [r7, #8]
 80035ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <PWR_BackupAccessCmd>:
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
 80035d2:	2320      	movs	r3, #32
 80035d4:	f2c4 230e 	movt	r3, #16910	; 0x420e
 80035d8:	79fa      	ldrb	r2, [r7, #7]
 80035da:	601a      	str	r2, [r3, #0]
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop

080035e8 <RCC_LSICmd>:
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
 80035f2:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 80035f6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80035fa:	79fa      	ldrb	r2, [r7, #7]
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <RCC_GetClocksFreq>:
 8003608:	b480      	push	{r7}
 800360a:	b089      	sub	sp, #36	; 0x24
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	2300      	movs	r3, #0
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	2300      	movs	r3, #0
 800361a:	61fb      	str	r3, [r7, #28]
 800361c:	2302      	movs	r3, #2
 800361e:	613b      	str	r3, [r7, #16]
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	2302      	movs	r3, #2
 8003626:	60bb      	str	r3, [r7, #8]
 8003628:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800362c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	61bb      	str	r3, [r7, #24]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b04      	cmp	r3, #4
 800363c:	d00a      	beq.n	8003654 <RCC_GetClocksFreq+0x4c>
 800363e:	2b08      	cmp	r3, #8
 8003640:	d00f      	beq.n	8003662 <RCC_GetClocksFreq+0x5a>
 8003642:	2b00      	cmp	r3, #0
 8003644:	d15a      	bne.n	80036fc <RCC_GetClocksFreq+0xf4>
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800364c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e05a      	b.n	800370a <RCC_GetClocksFreq+0x102>
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800365a:	f2c0 037a 	movt	r3, #122	; 0x7a
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	e053      	b.n	800370a <RCC_GetClocksFreq+0x102>
 8003662:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003666:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003670:	0d9b      	lsrs	r3, r3, #22
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003678:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d013      	beq.n	80036b2 <RCC_GetClocksFreq+0xaa>
 800368a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800368e:	f2c0 037a 	movt	r3, #122	; 0x7a
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	fbb3 f2f2 	udiv	r2, r3, r2
 8003698:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800369c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a6:	400b      	ands	r3, r1
 80036a8:	099b      	lsrs	r3, r3, #6
 80036aa:	fb03 f302 	mul.w	r3, r3, r2
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	e012      	b.n	80036d8 <RCC_GetClocksFreq+0xd0>
 80036b2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80036b6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80036c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80036c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036c8:	6859      	ldr	r1, [r3, #4]
 80036ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036ce:	400b      	ands	r3, r1
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	fb03 f302 	mul.w	r3, r3, r2
 80036d6:	61fb      	str	r3, [r7, #28]
 80036d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80036dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	3301      	adds	r3, #1
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	69fa      	ldr	r2, [r7, #28]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	e006      	b.n	800370a <RCC_GetClocksFreq+0x102>
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8003702:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	bf00      	nop
 800370a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800370e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003718:	61bb      	str	r3, [r7, #24]
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	f240 035c 	movw	r3, #92	; 0x5c
 8003724:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	40da      	lsrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003742:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800374c:	61bb      	str	r3, [r7, #24]
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	0a9b      	lsrs	r3, r3, #10
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	f240 035c 	movw	r3, #92	; 0x5c
 8003758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	40da      	lsrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003776:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	0b5b      	lsrs	r3, r3, #13
 8003786:	61bb      	str	r3, [r7, #24]
 8003788:	f240 035c 	movw	r3, #92	; 0x5c
 800378c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4413      	add	r3, r2
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	40da      	lsrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	3724      	adds	r7, #36	; 0x24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <RCC_RTCCLKConfig>:
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c6:	d117      	bne.n	80037f8 <RCC_RTCCLKConfig+0x48>
 80037c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80037cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80037f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	609a      	str	r2, [r3, #8]
 80037f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80037fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003800:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003804:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003808:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003810:	430a      	orrs	r2, r1
 8003812:	671a      	str	r2, [r3, #112]	; 0x70
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop

08003820 <RCC_RTCCLKCmd>:
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	71fb      	strb	r3, [r7, #7]
 800382a:	f640 633c 	movw	r3, #3644	; 0xe3c
 800382e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8003832:	79fa      	ldrb	r2, [r7, #7]
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <RCC_AHB1PeriphClockCmd>:
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <RCC_AHB1PeriphClockCmd+0x2c>
 8003852:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003856:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800385a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800385e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003862:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	430a      	orrs	r2, r1
 8003868:	631a      	str	r2, [r3, #48]	; 0x30
 800386a:	e00c      	b.n	8003886 <RCC_AHB1PeriphClockCmd+0x46>
 800386c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003870:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003874:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003878:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800387c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	43d2      	mvns	r2, r2
 8003882:	400a      	ands	r2, r1
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <RCC_APB1PeriphClockCmd>:
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00c      	beq.n	80038bc <RCC_APB1PeriphClockCmd+0x2c>
 80038a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038b2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
 80038ba:	e00c      	b.n	80038d6 <RCC_APB1PeriphClockCmd+0x46>
 80038bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80038cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	43d2      	mvns	r2, r2
 80038d2:	400a      	ands	r2, r1
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <RCC_APB2PeriphClockCmd>:
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	460b      	mov	r3, r1
 80038ea:	70fb      	strb	r3, [r7, #3]
 80038ec:	78fb      	ldrb	r3, [r7, #3]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <RCC_APB2PeriphClockCmd+0x2c>
 80038f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80038fa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80038fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8003902:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	430a      	orrs	r2, r1
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
 800390a:	e00c      	b.n	8003926 <RCC_APB2PeriphClockCmd+0x46>
 800390c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003910:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003914:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003918:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800391c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	43d2      	mvns	r2, r2
 8003922:	400a      	ands	r2, r1
 8003924:	645a      	str	r2, [r3, #68]	; 0x44
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <RCC_GetFlagStatus>:
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	2300      	movs	r3, #0
 8003944:	74fb      	strb	r3, [r7, #19]
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	b2db      	uxtb	r3, r3
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d106      	bne.n	8003962 <RCC_GetFlagStatus+0x32>
 8003954:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003958:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	e00f      	b.n	8003982 <RCC_GetFlagStatus+0x52>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d106      	bne.n	8003976 <RCC_GetFlagStatus+0x46>
 8003968:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800396c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	e005      	b.n	8003982 <RCC_GetFlagStatus+0x52>
 8003976:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800397a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800397e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	79fb      	ldrb	r3, [r7, #7]
 8003984:	f003 031f 	and.w	r3, r3, #31
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	fa22 f303 	lsr.w	r3, r2, r3
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <RCC_GetFlagStatus+0x70>
 800399a:	2301      	movs	r3, #1
 800399c:	74fb      	strb	r3, [r7, #19]
 800399e:	e001      	b.n	80039a4 <RCC_GetFlagStatus+0x74>
 80039a0:	2300      	movs	r3, #0
 80039a2:	74fb      	strb	r3, [r7, #19]
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	4618      	mov	r0, r3
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop

080039b4 <RTC_Init>:
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	2300      	movs	r3, #0
 80039be:	73fb      	strb	r3, [r7, #15]
 80039c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80039c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80039c8:	22ca      	movs	r2, #202	; 0xca
 80039ca:	625a      	str	r2, [r3, #36]	; 0x24
 80039cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80039d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80039d4:	2253      	movs	r2, #83	; 0x53
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24
 80039d8:	f000 f864 	bl	8003aa4 <RTC_EnterInitMode>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <RTC_Init+0x34>
 80039e2:	2300      	movs	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
 80039e6:	e031      	b.n	8003a4c <RTC_Init+0x98>
 80039e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80039ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80039f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80039f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80039f8:	6892      	ldr	r2, [r2, #8]
 80039fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a08:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003a0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003a10:	6891      	ldr	r1, [r2, #8]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
 8003a1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6892      	ldr	r2, [r2, #8]
 8003a26:	611a      	str	r2, [r3, #16]
 8003a28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003a34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003a38:	6911      	ldr	r1, [r2, #16]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6852      	ldr	r2, [r2, #4]
 8003a3e:	0412      	lsls	r2, r2, #16
 8003a40:	430a      	orrs	r2, r1
 8003a42:	611a      	str	r2, [r3, #16]
 8003a44:	f000 f872 	bl	8003b2c <RTC_ExitInitMode>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	73fb      	strb	r3, [r7, #15]
 8003a4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a54:	22ff      	movs	r2, #255	; 0xff
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop

08003a64 <RTC_WriteProtectionCmd>:
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	71fb      	strb	r3, [r7, #7]
 8003a6e:	79fb      	ldrb	r3, [r7, #7]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <RTC_WriteProtectionCmd+0x1e>
 8003a74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24
 8003a80:	e00b      	b.n	8003a9a <RTC_WriteProtectionCmd+0x36>
 8003a82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a8a:	22ca      	movs	r2, #202	; 0xca
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003a96:	2253      	movs	r2, #83	; 0x53
 8003a98:	625a      	str	r2, [r3, #36]	; 0x24
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <RTC_EnterInitMode>:
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003aba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d127      	bne.n	8003b18 <RTC_EnterInitMode+0x74>
 8003ac8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003acc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ada:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d002      	beq.n	8003afa <RTC_EnterInitMode+0x56>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0ed      	beq.n	8003ad6 <RTC_EnterInitMode+0x32>
 8003afa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003afe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d002      	beq.n	8003b12 <RTC_EnterInitMode+0x6e>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e004      	b.n	8003b1c <RTC_EnterInitMode+0x78>
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e001      	b.n	8003b1c <RTC_EnterInitMode+0x78>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	73fb      	strb	r3, [r7, #15]
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3714      	adds	r7, #20
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop

08003b2c <RTC_ExitInitMode>:
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b38:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003b3c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <RTC_WaitForSynchro>:
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60bb      	str	r3, [r7, #8]
 8003b62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b6a:	22ca      	movs	r2, #202	; 0xca
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b76:	2253      	movs	r2, #83	; 0x53
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24
 8003b7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b82:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8003b86:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003b8a:	68d2      	ldr	r2, [r2, #12]
 8003b8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b90:	60da      	str	r2, [r3, #12]
 8003b92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003b96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	607b      	str	r3, [r7, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bae:	d002      	beq.n	8003bb6 <RTC_WaitForSynchro+0x66>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0ed      	beq.n	8003b92 <RTC_WaitForSynchro+0x42>
 8003bb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003bba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <RTC_WaitForSynchro+0x7e>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
 8003bcc:	e001      	b.n	8003bd2 <RTC_WaitForSynchro+0x82>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003bd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <RTC_SetTime>:
 8003bec:	b590      	push	{r4, r7, lr}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	72fb      	strb	r3, [r7, #11]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10c      	bne.n	8003c1e <RTC_SetTime+0x32>
 8003c04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003c08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d117      	bne.n	8003c46 <RTC_SetTime+0x5a>
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	70da      	strb	r2, [r3, #3]
 8003c1c:	e013      	b.n	8003c46 <RTC_SetTime+0x5a>
 8003c1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003c22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <RTC_SetTime+0x54>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 f94b 	bl	8003ed0 <RTC_Bcd2ToByte>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	60fb      	str	r3, [r7, #12]
 8003c3e:	e002      	b.n	8003c46 <RTC_SetTime+0x5a>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	70da      	strb	r2, [r3, #3]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00f      	beq.n	8003c6c <RTC_SetTime+0x80>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	041a      	lsls	r2, r3, #16
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	789b      	ldrb	r3, [r3, #2]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	78db      	ldrb	r3, [r3, #3]
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e01b      	b.n	8003ca4 <RTC_SetTime+0xb8>
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f90f 	bl	8003e94 <RTC_ByteToBcd2>
 8003c76:	4603      	mov	r3, r0
 8003c78:	041c      	lsls	r4, r3, #16
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	785b      	ldrb	r3, [r3, #1]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f908 	bl	8003e94 <RTC_ByteToBcd2>
 8003c84:	4603      	mov	r3, r0
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	431c      	orrs	r4, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	789b      	ldrb	r3, [r3, #2]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 f900 	bl	8003e94 <RTC_ByteToBcd2>
 8003c94:	4603      	mov	r3, r0
 8003c96:	ea44 0203 	orr.w	r2, r4, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	78db      	ldrb	r3, [r3, #3]
 8003c9e:	041b      	lsls	r3, r3, #16
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003ca8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cac:	22ca      	movs	r2, #202	; 0xca
 8003cae:	625a      	str	r2, [r3, #36]	; 0x24
 8003cb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003cb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cb8:	2253      	movs	r2, #83	; 0x53
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24
 8003cbc:	f7ff fef2 	bl	8003aa4 <RTC_EnterInitMode>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d102      	bne.n	8003ccc <RTC_SetTime+0xe0>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	72fb      	strb	r3, [r7, #11]
 8003cca:	e015      	b.n	8003cf8 <RTC_SetTime+0x10c>
 8003ccc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003cd0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	f002 327f 	and.w	r2, r2, #2139062143	; 0x7f7f7f7f
 8003cda:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f7ff ff24 	bl	8003b2c <RTC_ExitInitMode>
 8003ce4:	f7ff ff34 	bl	8003b50 <RTC_WaitForSynchro>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <RTC_SetTime+0x108>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	72fb      	strb	r3, [r7, #11]
 8003cf2:	e001      	b.n	8003cf8 <RTC_SetTime+0x10c>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	72fb      	strb	r3, [r7, #11]
 8003cf8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003cfc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d00:	22ff      	movs	r2, #255	; 0xff
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
 8003d04:	7afb      	ldrb	r3, [r7, #11]
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}
 8003d0e:	bf00      	nop

08003d10 <RTC_SetDate>:
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	72fb      	strb	r3, [r7, #11]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d10e      	bne.n	8003d46 <RTC_SetDate+0x36>
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <RTC_SetDate+0x36>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	f023 0310 	bic.w	r3, r3, #16
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	330a      	adds	r3, #10
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	705a      	strb	r2, [r3, #1]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d00d      	beq.n	8003d68 <RTC_SetDate+0x58>
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 f8bd 	bl	8003ed0 <RTC_Bcd2ToByte>
 8003d56:	4603      	mov	r3, r0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	789b      	ldrb	r3, [r3, #2]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f8b6 	bl	8003ed0 <RTC_Bcd2ToByte>
 8003d64:	4603      	mov	r3, r0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00f      	beq.n	8003d8e <RTC_SetDate+0x7e>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	78db      	ldrb	r3, [r3, #3]
 8003d72:	041a      	lsls	r2, r3, #16
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	021b      	lsls	r3, r3, #8
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	789b      	ldrb	r3, [r3, #2]
 8003d80:	431a      	orrs	r2, r3
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	035b      	lsls	r3, r3, #13
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	e01b      	b.n	8003dc6 <RTC_SetDate+0xb6>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	78db      	ldrb	r3, [r3, #3]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f87e 	bl	8003e94 <RTC_ByteToBcd2>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	041c      	lsls	r4, r3, #16
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	785b      	ldrb	r3, [r3, #1]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 f877 	bl	8003e94 <RTC_ByteToBcd2>
 8003da6:	4603      	mov	r3, r0
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	431c      	orrs	r4, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	789b      	ldrb	r3, [r3, #2]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f86f 	bl	8003e94 <RTC_ByteToBcd2>
 8003db6:	4603      	mov	r3, r0
 8003db8:	ea44 0203 	orr.w	r2, r4, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	035b      	lsls	r3, r3, #13
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003dca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dce:	22ca      	movs	r2, #202	; 0xca
 8003dd0:	625a      	str	r2, [r3, #36]	; 0x24
 8003dd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003dd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dda:	2253      	movs	r2, #83	; 0x53
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8003dde:	f7ff fe61 	bl	8003aa4 <RTC_EnterInitMode>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d102      	bne.n	8003dee <RTC_SetDate+0xde>
 8003de8:	2300      	movs	r3, #0
 8003dea:	72fb      	strb	r3, [r7, #11]
 8003dec:	e015      	b.n	8003e1a <RTC_SetDate+0x10a>
 8003dee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003df2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003dfc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	f7ff fe93 	bl	8003b2c <RTC_ExitInitMode>
 8003e06:	f7ff fea3 	bl	8003b50 <RTC_WaitForSynchro>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d102      	bne.n	8003e16 <RTC_SetDate+0x106>
 8003e10:	2300      	movs	r3, #0
 8003e12:	72fb      	strb	r3, [r7, #11]
 8003e14:	e001      	b.n	8003e1a <RTC_SetDate+0x10a>
 8003e16:	2301      	movs	r3, #1
 8003e18:	72fb      	strb	r3, [r7, #11]
 8003e1a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	625a      	str	r2, [r3, #36]	; 0x24
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd90      	pop	{r4, r7, pc}

08003e30 <RTC_WriteBackupRegister>:
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	f642 0350 	movw	r3, #10320	; 0x2850
 8003e42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	009a      	lsls	r2, r3, #2
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4413      	add	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop

08003e64 <RTC_ReadBackupRegister>:
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	f642 0350 	movw	r3, #10320	; 0x2850
 8003e74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	009a      	lsls	r2, r3, #2
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4413      	add	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <RTC_ByteToBcd2>:
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e005      	b.n	8003eb0 <RTC_ByteToBcd2+0x1c>
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	73fb      	strb	r3, [r7, #15]
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	3b0a      	subs	r3, #10
 8003eae:	71fb      	strb	r3, [r7, #7]
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d8f6      	bhi.n	8003ea4 <RTC_ByteToBcd2+0x10>
 8003eb6:	7bfb      	ldrb	r3, [r7, #15]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop

08003ed0 <RTC_Bcd2ToByte>:
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	71fb      	strb	r3, [r7, #7]
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	0092      	lsls	r2, r2, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	79fb      	ldrb	r3, [r7, #7]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	4413      	add	r3, r2
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_Cmd>:
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	460b      	mov	r3, r1
 8003f12:	70fb      	strb	r3, [r7, #3]
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <TIM_Cmd+0x24>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	801a      	strh	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <TIM_Cmd+0x34>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop

08003f48 <USART_Init>:
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
 8003f52:	2300      	movs	r3, #0
 8003f54:	627b      	str	r3, [r7, #36]	; 0x24
 8003f56:	2300      	movs	r3, #0
 8003f58:	623b      	str	r3, [r7, #32]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	8a1b      	ldrh	r3, [r3, #16]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	88db      	ldrh	r3, [r3, #6]
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	821a      	strh	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	899b      	ldrh	r3, [r3, #12]
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f92:	f023 030c 	bic.w	r3, r3, #12
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	889a      	ldrh	r2, [r3, #4]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	891b      	ldrh	r3, [r3, #8]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	895b      	ldrh	r3, [r3, #10]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	819a      	strh	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8a9b      	ldrh	r3, [r3, #20]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	899b      	ldrh	r3, [r3, #12]
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	829a      	strh	r2, [r3, #20]
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff fb11 	bl	8003608 <RCC_GetClocksFreq>
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d006      	beq.n	8004002 <USART_Init+0xba>
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003ffa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d102      	bne.n	8004008 <USART_Init+0xc0>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	e001      	b.n	800400c <USART_Init+0xc4>
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	623b      	str	r3, [r7, #32]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	899b      	ldrh	r3, [r3, #12]
 8004010:	b29b      	uxth	r3, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	b21b      	sxth	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	da0c      	bge.n	8004034 <USART_Init+0xec>
 800401a:	6a3a      	ldr	r2, [r7, #32]
 800401c:	4613      	mov	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	009a      	lsls	r2, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	e00b      	b.n	800404c <USART_Init+0x104>
 8004034:	6a3a      	ldr	r2, [r7, #32]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009a      	lsls	r2, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	f248 531f 	movw	r3, #34079	; 0x851f
 8004052:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8004056:	fba3 1302 	umull	r1, r3, r3, r2
 800405a:	095b      	lsrs	r3, r3, #5
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	2264      	movs	r2, #100	; 0x64
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	899b      	ldrh	r3, [r3, #12]
 8004074:	b29b      	uxth	r3, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	b21b      	sxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	da10      	bge.n	80040a0 <USART_Init+0x158>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004086:	f248 531f 	movw	r3, #34079	; 0x851f
 800408a:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800408e:	fba3 1302 	umull	r1, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409a:	4313      	orrs	r3, r2
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
 800409e:	e00f      	b.n	80040c0 <USART_Init+0x178>
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040a8:	f248 531f 	movw	r3, #34079	; 0x851f
 80040ac:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80040b0:	fba3 1302 	umull	r1, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040bc:	4313      	orrs	r3, r2
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	811a      	strh	r2, [r3, #8]
 80040c8:	3728      	adds	r7, #40	; 0x28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop

080040d0 <USART_Cmd>:
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d008      	beq.n	80040f4 <USART_Cmd+0x24>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	899b      	ldrh	r3, [r3, #12]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	819a      	strh	r2, [r3, #12]
 80040f2:	e007      	b.n	8004104 <USART_Cmd+0x34>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	899b      	ldrh	r3, [r3, #12]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	819a      	strh	r2, [r3, #12]
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop

08004110 <USART_SendData>:
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	807b      	strh	r3, [r7, #2]
 800411c:	887b      	ldrh	r3, [r7, #2]
 800411e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	809a      	strh	r2, [r3, #4]
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop

08004134 <USART_ITConfig>:
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	460a      	mov	r2, r1
 8004140:	807a      	strh	r2, [r7, #2]
 8004142:	707b      	strb	r3, [r7, #1]
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	2300      	movs	r3, #0
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	887b      	ldrh	r3, [r7, #2]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	b2db      	uxtb	r3, r3
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	887b      	ldrh	r3, [r7, #2]
 8004164:	f003 031f 	and.w	r3, r3, #31
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d103      	bne.n	8004182 <USART_ITConfig+0x4e>
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	330c      	adds	r3, #12
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	e009      	b.n	8004196 <USART_ITConfig+0x62>
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b02      	cmp	r3, #2
 8004186:	d103      	bne.n	8004190 <USART_ITConfig+0x5c>
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3310      	adds	r3, #16
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	e002      	b.n	8004196 <USART_ITConfig+0x62>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	3314      	adds	r3, #20
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	787b      	ldrb	r3, [r7, #1]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <USART_ITConfig+0x76>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	6811      	ldr	r1, [r2, #0]
 80041a2:	68ba      	ldr	r2, [r7, #8]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	e006      	b.n	80041b8 <USART_ITConfig+0x84>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	6811      	ldr	r1, [r2, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	43d2      	mvns	r2, r2
 80041b4:	400a      	ands	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	371c      	adds	r7, #28
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop

080041c4 <USART_GetITStatus>:
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	807b      	strh	r3, [r7, #2]
 80041d0:	2300      	movs	r3, #0
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	2300      	movs	r3, #0
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	2300      	movs	r3, #0
 80041de:	74fb      	strb	r3, [r7, #19]
 80041e0:	887b      	ldrh	r3, [r7, #2]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	60bb      	str	r3, [r7, #8]
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d106      	bne.n	8004210 <USART_GetITStatus+0x4c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	899b      	ldrh	r3, [r3, #12]
 8004206:	b29b      	uxth	r3, r3
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4013      	ands	r3, r2
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	e00f      	b.n	8004230 <USART_GetITStatus+0x6c>
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d106      	bne.n	8004224 <USART_GetITStatus+0x60>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	8a1b      	ldrh	r3, [r3, #16]
 800421a:	b29b      	uxth	r3, r3
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4013      	ands	r3, r2
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e005      	b.n	8004230 <USART_GetITStatus+0x6c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8a9b      	ldrh	r3, [r3, #20]
 8004228:	b29b      	uxth	r3, r3
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4013      	ands	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
 8004230:	887b      	ldrh	r3, [r7, #2]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	b29b      	uxth	r3, r3
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	881b      	ldrh	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <USART_GetITStatus+0x9c>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <USART_GetITStatus+0x9c>
 800425a:	2301      	movs	r3, #1
 800425c:	74fb      	strb	r3, [r7, #19]
 800425e:	e001      	b.n	8004264 <USART_GetITStatus+0xa0>
 8004260:	2300      	movs	r3, #0
 8004262:	74fb      	strb	r3, [r7, #19]
 8004264:	7cfb      	ldrb	r3, [r7, #19]
 8004266:	4618      	mov	r0, r3
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <atexit>:
 8004274:	4601      	mov	r1, r0
 8004276:	2000      	movs	r0, #0
 8004278:	4602      	mov	r2, r0
 800427a:	4603      	mov	r3, r0
 800427c:	f001 be4c 	b.w	8005f18 <__register_exitproc>

08004280 <__libc_fini_array>:
 8004280:	b538      	push	{r3, r4, r5, lr}
 8004282:	f248 54b0 	movw	r4, #34224	; 0x85b0
 8004286:	f248 55ac 	movw	r5, #34220	; 0x85ac
 800428a:	f6c0 0500 	movt	r5, #2048	; 0x800
 800428e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	bf18      	it	ne
 8004298:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 800429c:	d005      	beq.n	80042aa <__libc_fini_array+0x2a>
 800429e:	3c01      	subs	r4, #1
 80042a0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80042a4:	4798      	blx	r3
 80042a6:	2c00      	cmp	r4, #0
 80042a8:	d1f9      	bne.n	800429e <__libc_fini_array+0x1e>
 80042aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042ae:	f004 b96f 	b.w	8008590 <_fini>
 80042b2:	bf00      	nop

080042b4 <__libc_init_array>:
 80042b4:	b570      	push	{r4, r5, r6, lr}
 80042b6:	f248 56a4 	movw	r6, #34212	; 0x85a4
 80042ba:	f248 55a4 	movw	r5, #34212	; 0x85a4
 80042be:	f6c0 0500 	movt	r5, #2048	; 0x800
 80042c2:	f6c0 0600 	movt	r6, #2048	; 0x800
 80042c6:	1b76      	subs	r6, r6, r5
 80042c8:	10b6      	asrs	r6, r6, #2
 80042ca:	bf1c      	itt	ne
 80042cc:	3d04      	subne	r5, #4
 80042ce:	2400      	movne	r4, #0
 80042d0:	d005      	beq.n	80042de <__libc_init_array+0x2a>
 80042d2:	3401      	adds	r4, #1
 80042d4:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80042d8:	4798      	blx	r3
 80042da:	42a6      	cmp	r6, r4
 80042dc:	d1f9      	bne.n	80042d2 <__libc_init_array+0x1e>
 80042de:	f248 56ac 	movw	r6, #34220	; 0x85ac
 80042e2:	f248 55a4 	movw	r5, #34212	; 0x85a4
 80042e6:	f6c0 0500 	movt	r5, #2048	; 0x800
 80042ea:	f6c0 0600 	movt	r6, #2048	; 0x800
 80042ee:	1b76      	subs	r6, r6, r5
 80042f0:	f004 f948 	bl	8008584 <_init>
 80042f4:	10b6      	asrs	r6, r6, #2
 80042f6:	bf1c      	itt	ne
 80042f8:	3d04      	subne	r5, #4
 80042fa:	2400      	movne	r4, #0
 80042fc:	d006      	beq.n	800430c <__libc_init_array+0x58>
 80042fe:	3401      	adds	r4, #1
 8004300:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8004304:	4798      	blx	r3
 8004306:	42a6      	cmp	r6, r4
 8004308:	d1f9      	bne.n	80042fe <__libc_init_array+0x4a>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	bd70      	pop	{r4, r5, r6, pc}
 800430e:	bf00      	nop

08004310 <malloc>:
 8004310:	f240 4398 	movw	r3, #1176	; 0x498
 8004314:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004318:	4601      	mov	r1, r0
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	f000 b808 	b.w	8004330 <_malloc_r>

08004320 <free>:
 8004320:	f240 4398 	movw	r3, #1176	; 0x498
 8004324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004328:	4601      	mov	r1, r0
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	f002 beea 	b.w	8007104 <_free_r>

08004330 <_malloc_r>:
 8004330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004334:	f101 050b 	add.w	r5, r1, #11
 8004338:	2d16      	cmp	r5, #22
 800433a:	bf87      	ittee	hi
 800433c:	f025 0507 	bichi.w	r5, r5, #7
 8004340:	0feb      	lsrhi	r3, r5, #31
 8004342:	2300      	movls	r3, #0
 8004344:	2510      	movls	r5, #16
 8004346:	428d      	cmp	r5, r1
 8004348:	bf2c      	ite	cs
 800434a:	4619      	movcs	r1, r3
 800434c:	f043 0101 	orrcc.w	r1, r3, #1
 8004350:	b083      	sub	sp, #12
 8004352:	4607      	mov	r7, r0
 8004354:	2900      	cmp	r1, #0
 8004356:	f040 80b5 	bne.w	80044c4 <_malloc_r+0x194>
 800435a:	f7fd fc07 	bl	8001b6c <__malloc_lock>
 800435e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8004362:	d21f      	bcs.n	80043a4 <_malloc_r+0x74>
 8004364:	f240 469c 	movw	r6, #1180	; 0x49c
 8004368:	f2c2 0600 	movt	r6, #8192	; 0x2000
 800436c:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 8004370:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 8004374:	68dc      	ldr	r4, [r3, #12]
 8004376:	429c      	cmp	r4, r3
 8004378:	f000 81f4 	beq.w	8004764 <_malloc_r+0x434>
 800437c:	6863      	ldr	r3, [r4, #4]
 800437e:	68e2      	ldr	r2, [r4, #12]
 8004380:	68a1      	ldr	r1, [r4, #8]
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	4423      	add	r3, r4
 8004388:	4638      	mov	r0, r7
 800438a:	685d      	ldr	r5, [r3, #4]
 800438c:	60ca      	str	r2, [r1, #12]
 800438e:	f045 0501 	orr.w	r5, r5, #1
 8004392:	6091      	str	r1, [r2, #8]
 8004394:	605d      	str	r5, [r3, #4]
 8004396:	f7fd fbed 	bl	8001b74 <__malloc_unlock>
 800439a:	3408      	adds	r4, #8
 800439c:	4620      	mov	r0, r4
 800439e:	b003      	add	sp, #12
 80043a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a4:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 80043a8:	bf04      	itt	eq
 80043aa:	217e      	moveq	r1, #126	; 0x7e
 80043ac:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 80043b0:	f040 808f 	bne.w	80044d2 <_malloc_r+0x1a2>
 80043b4:	f240 469c 	movw	r6, #1180	; 0x49c
 80043b8:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80043bc:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80043c0:	68cc      	ldr	r4, [r1, #12]
 80043c2:	42a1      	cmp	r1, r4
 80043c4:	d106      	bne.n	80043d4 <_malloc_r+0xa4>
 80043c6:	e00d      	b.n	80043e4 <_malloc_r+0xb4>
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f280 8163 	bge.w	8004694 <_malloc_r+0x364>
 80043ce:	68e4      	ldr	r4, [r4, #12]
 80043d0:	42a1      	cmp	r1, r4
 80043d2:	d007      	beq.n	80043e4 <_malloc_r+0xb4>
 80043d4:	6862      	ldr	r2, [r4, #4]
 80043d6:	f022 0203 	bic.w	r2, r2, #3
 80043da:	1b53      	subs	r3, r2, r5
 80043dc:	2b0f      	cmp	r3, #15
 80043de:	ddf3      	ble.n	80043c8 <_malloc_r+0x98>
 80043e0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80043e4:	f10c 0c01 	add.w	ip, ip, #1
 80043e8:	f240 439c 	movw	r3, #1180	; 0x49c
 80043ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80043f0:	6934      	ldr	r4, [r6, #16]
 80043f2:	f103 0e08 	add.w	lr, r3, #8
 80043f6:	4574      	cmp	r4, lr
 80043f8:	bf08      	it	eq
 80043fa:	685a      	ldreq	r2, [r3, #4]
 80043fc:	d022      	beq.n	8004444 <_malloc_r+0x114>
 80043fe:	6861      	ldr	r1, [r4, #4]
 8004400:	f021 0103 	bic.w	r1, r1, #3
 8004404:	1b4a      	subs	r2, r1, r5
 8004406:	2a0f      	cmp	r2, #15
 8004408:	f300 8190 	bgt.w	800472c <_malloc_r+0x3fc>
 800440c:	2a00      	cmp	r2, #0
 800440e:	f8c3 e014 	str.w	lr, [r3, #20]
 8004412:	f8c3 e010 	str.w	lr, [r3, #16]
 8004416:	da67      	bge.n	80044e8 <_malloc_r+0x1b8>
 8004418:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800441c:	f080 815f 	bcs.w	80046de <_malloc_r+0x3ae>
 8004420:	08c9      	lsrs	r1, r1, #3
 8004422:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 8004426:	ea4f 08a1 	mov.w	r8, r1, asr #2
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	6881      	ldr	r1, [r0, #8]
 800442e:	60e0      	str	r0, [r4, #12]
 8004430:	f04f 0901 	mov.w	r9, #1
 8004434:	fa09 f808 	lsl.w	r8, r9, r8
 8004438:	ea48 0202 	orr.w	r2, r8, r2
 800443c:	60a1      	str	r1, [r4, #8]
 800443e:	605a      	str	r2, [r3, #4]
 8004440:	6084      	str	r4, [r0, #8]
 8004442:	60cc      	str	r4, [r1, #12]
 8004444:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8004448:	2001      	movs	r0, #1
 800444a:	4098      	lsls	r0, r3
 800444c:	4290      	cmp	r0, r2
 800444e:	d858      	bhi.n	8004502 <_malloc_r+0x1d2>
 8004450:	4202      	tst	r2, r0
 8004452:	d106      	bne.n	8004462 <_malloc_r+0x132>
 8004454:	f02c 0c03 	bic.w	ip, ip, #3
 8004458:	0040      	lsls	r0, r0, #1
 800445a:	4202      	tst	r2, r0
 800445c:	f10c 0c04 	add.w	ip, ip, #4
 8004460:	d0fa      	beq.n	8004458 <_malloc_r+0x128>
 8004462:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 8004466:	4644      	mov	r4, r8
 8004468:	46e1      	mov	r9, ip
 800446a:	68e3      	ldr	r3, [r4, #12]
 800446c:	429c      	cmp	r4, r3
 800446e:	d107      	bne.n	8004480 <_malloc_r+0x150>
 8004470:	e16f      	b.n	8004752 <_malloc_r+0x422>
 8004472:	2a00      	cmp	r2, #0
 8004474:	f280 8180 	bge.w	8004778 <_malloc_r+0x448>
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	429c      	cmp	r4, r3
 800447c:	f000 8169 	beq.w	8004752 <_malloc_r+0x422>
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	f021 0103 	bic.w	r1, r1, #3
 8004486:	1b4a      	subs	r2, r1, r5
 8004488:	2a0f      	cmp	r2, #15
 800448a:	ddf2      	ble.n	8004472 <_malloc_r+0x142>
 800448c:	461c      	mov	r4, r3
 800448e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8004492:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8004496:	1959      	adds	r1, r3, r5
 8004498:	f045 0901 	orr.w	r9, r5, #1
 800449c:	f042 0501 	orr.w	r5, r2, #1
 80044a0:	f8c3 9004 	str.w	r9, [r3, #4]
 80044a4:	4638      	mov	r0, r7
 80044a6:	f8c8 c00c 	str.w	ip, [r8, #12]
 80044aa:	f8cc 8008 	str.w	r8, [ip, #8]
 80044ae:	6171      	str	r1, [r6, #20]
 80044b0:	6131      	str	r1, [r6, #16]
 80044b2:	f8c1 e00c 	str.w	lr, [r1, #12]
 80044b6:	f8c1 e008 	str.w	lr, [r1, #8]
 80044ba:	604d      	str	r5, [r1, #4]
 80044bc:	508a      	str	r2, [r1, r2]
 80044be:	f7fd fb59 	bl	8001b74 <__malloc_unlock>
 80044c2:	e76b      	b.n	800439c <_malloc_r+0x6c>
 80044c4:	230c      	movs	r3, #12
 80044c6:	2400      	movs	r4, #0
 80044c8:	6003      	str	r3, [r0, #0]
 80044ca:	4620      	mov	r0, r4
 80044cc:	b003      	add	sp, #12
 80044ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044d2:	f1bc 0f04 	cmp.w	ip, #4
 80044d6:	f200 80ee 	bhi.w	80046b6 <_malloc_r+0x386>
 80044da:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 80044de:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 80044e2:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80044e6:	e765      	b.n	80043b4 <_malloc_r+0x84>
 80044e8:	4421      	add	r1, r4
 80044ea:	4638      	mov	r0, r7
 80044ec:	684b      	ldr	r3, [r1, #4]
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	604b      	str	r3, [r1, #4]
 80044f4:	f7fd fb3e 	bl	8001b74 <__malloc_unlock>
 80044f8:	3408      	adds	r4, #8
 80044fa:	4620      	mov	r0, r4
 80044fc:	b003      	add	sp, #12
 80044fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004502:	68b4      	ldr	r4, [r6, #8]
 8004504:	6863      	ldr	r3, [r4, #4]
 8004506:	f023 0903 	bic.w	r9, r3, #3
 800450a:	454d      	cmp	r5, r9
 800450c:	d804      	bhi.n	8004518 <_malloc_r+0x1e8>
 800450e:	ebc5 0309 	rsb	r3, r5, r9
 8004512:	2b0f      	cmp	r3, #15
 8004514:	f300 80ae 	bgt.w	8004674 <_malloc_r+0x344>
 8004518:	f640 2320 	movw	r3, #2592	; 0xa20
 800451c:	f640 0aa8 	movw	sl, #2216	; 0x8a8
 8004520:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004524:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8da 1000 	ldr.w	r1, [sl]
 800452e:	442b      	add	r3, r5
 8004530:	3101      	adds	r1, #1
 8004532:	bf1d      	ittte	ne
 8004534:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 8004538:	330f      	addne	r3, #15
 800453a:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 800453e:	f103 0c10 	addeq.w	ip, r3, #16
 8004542:	bf18      	it	ne
 8004544:	f023 0c0f 	bicne.w	ip, r3, #15
 8004548:	eb04 0209 	add.w	r2, r4, r9
 800454c:	4661      	mov	r1, ip
 800454e:	4638      	mov	r0, r7
 8004550:	9201      	str	r2, [sp, #4]
 8004552:	f8cd c000 	str.w	ip, [sp]
 8004556:	f7fd fadb 	bl	8001b10 <_sbrk_r>
 800455a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800455e:	4680      	mov	r8, r0
 8004560:	9a01      	ldr	r2, [sp, #4]
 8004562:	f8dd c000 	ldr.w	ip, [sp]
 8004566:	f000 811d 	beq.w	80047a4 <_malloc_r+0x474>
 800456a:	4282      	cmp	r2, r0
 800456c:	f200 8117 	bhi.w	800479e <_malloc_r+0x46e>
 8004570:	f640 2b24 	movw	fp, #2596	; 0xa24
 8004574:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 8004578:	4542      	cmp	r2, r8
 800457a:	f8db 3000 	ldr.w	r3, [fp]
 800457e:	4463      	add	r3, ip
 8004580:	f8cb 3000 	str.w	r3, [fp]
 8004584:	f000 815d 	beq.w	8004842 <_malloc_r+0x512>
 8004588:	f8da 0000 	ldr.w	r0, [sl]
 800458c:	f640 01a8 	movw	r1, #2216	; 0x8a8
 8004590:	3001      	adds	r0, #1
 8004592:	bf18      	it	ne
 8004594:	ebc2 0208 	rsbne	r2, r2, r8
 8004598:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800459c:	bf16      	itet	ne
 800459e:	189b      	addne	r3, r3, r2
 80045a0:	f8c1 8000 	streq.w	r8, [r1]
 80045a4:	f8cb 3000 	strne.w	r3, [fp]
 80045a8:	f018 0307 	ands.w	r3, r8, #7
 80045ac:	bf1f      	itttt	ne
 80045ae:	f1c3 0208 	rsbne	r2, r3, #8
 80045b2:	4490      	addne	r8, r2
 80045b4:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80045b8:	f103 0a08 	addne.w	sl, r3, #8
 80045bc:	eb08 030c 	add.w	r3, r8, ip
 80045c0:	bf08      	it	eq
 80045c2:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 80045c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ca:	ebc3 0a0a 	rsb	sl, r3, sl
 80045ce:	4651      	mov	r1, sl
 80045d0:	4638      	mov	r0, r7
 80045d2:	f7fd fa9d 	bl	8001b10 <_sbrk_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	bf18      	it	ne
 80045da:	ebc8 0200 	rsbne	r2, r8, r0
 80045de:	f8db 3000 	ldr.w	r3, [fp]
 80045e2:	f8c6 8008 	str.w	r8, [r6, #8]
 80045e6:	bf15      	itete	ne
 80045e8:	4452      	addne	r2, sl
 80045ea:	f04f 0a00 	moveq.w	sl, #0
 80045ee:	f042 0201 	orrne.w	r2, r2, #1
 80045f2:	2201      	moveq	r2, #1
 80045f4:	4453      	add	r3, sl
 80045f6:	42b4      	cmp	r4, r6
 80045f8:	f640 2a24 	movw	sl, #2596	; 0xa24
 80045fc:	f8c8 2004 	str.w	r2, [r8, #4]
 8004600:	f8cb 3000 	str.w	r3, [fp]
 8004604:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8004608:	d015      	beq.n	8004636 <_malloc_r+0x306>
 800460a:	f1b9 0f0f 	cmp.w	r9, #15
 800460e:	f240 80f8 	bls.w	8004802 <_malloc_r+0x4d2>
 8004612:	6861      	ldr	r1, [r4, #4]
 8004614:	f1a9 020c 	sub.w	r2, r9, #12
 8004618:	f022 0207 	bic.w	r2, r2, #7
 800461c:	f001 0e01 	and.w	lr, r1, #1
 8004620:	18a1      	adds	r1, r4, r2
 8004622:	2005      	movs	r0, #5
 8004624:	ea42 0e0e 	orr.w	lr, r2, lr
 8004628:	2a0f      	cmp	r2, #15
 800462a:	f8c4 e004 	str.w	lr, [r4, #4]
 800462e:	6048      	str	r0, [r1, #4]
 8004630:	6088      	str	r0, [r1, #8]
 8004632:	f200 8112 	bhi.w	800485a <_malloc_r+0x52a>
 8004636:	f640 221c 	movw	r2, #2588	; 0xa1c
 800463a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800463e:	68b4      	ldr	r4, [r6, #8]
 8004640:	6811      	ldr	r1, [r2, #0]
 8004642:	428b      	cmp	r3, r1
 8004644:	bf88      	it	hi
 8004646:	6013      	strhi	r3, [r2, #0]
 8004648:	f640 2218 	movw	r2, #2584	; 0xa18
 800464c:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004650:	6811      	ldr	r1, [r2, #0]
 8004652:	428b      	cmp	r3, r1
 8004654:	bf88      	it	hi
 8004656:	6013      	strhi	r3, [r2, #0]
 8004658:	6862      	ldr	r2, [r4, #4]
 800465a:	f022 0203 	bic.w	r2, r2, #3
 800465e:	4295      	cmp	r5, r2
 8004660:	ebc5 0302 	rsb	r3, r5, r2
 8004664:	d801      	bhi.n	800466a <_malloc_r+0x33a>
 8004666:	2b0f      	cmp	r3, #15
 8004668:	dc04      	bgt.n	8004674 <_malloc_r+0x344>
 800466a:	4638      	mov	r0, r7
 800466c:	f7fd fa82 	bl	8001b74 <__malloc_unlock>
 8004670:	2400      	movs	r4, #0
 8004672:	e693      	b.n	800439c <_malloc_r+0x6c>
 8004674:	1962      	adds	r2, r4, r5
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	f045 0501 	orr.w	r5, r5, #1
 800467e:	6065      	str	r5, [r4, #4]
 8004680:	4638      	mov	r0, r7
 8004682:	60b2      	str	r2, [r6, #8]
 8004684:	6053      	str	r3, [r2, #4]
 8004686:	f7fd fa75 	bl	8001b74 <__malloc_unlock>
 800468a:	3408      	adds	r4, #8
 800468c:	4620      	mov	r0, r4
 800468e:	b003      	add	sp, #12
 8004690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004694:	4422      	add	r2, r4
 8004696:	68e3      	ldr	r3, [r4, #12]
 8004698:	6850      	ldr	r0, [r2, #4]
 800469a:	68a1      	ldr	r1, [r4, #8]
 800469c:	f040 0501 	orr.w	r5, r0, #1
 80046a0:	60cb      	str	r3, [r1, #12]
 80046a2:	4638      	mov	r0, r7
 80046a4:	6099      	str	r1, [r3, #8]
 80046a6:	6055      	str	r5, [r2, #4]
 80046a8:	f7fd fa64 	bl	8001b74 <__malloc_unlock>
 80046ac:	3408      	adds	r4, #8
 80046ae:	4620      	mov	r0, r4
 80046b0:	b003      	add	sp, #12
 80046b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b6:	f1bc 0f14 	cmp.w	ip, #20
 80046ba:	bf9c      	itt	ls
 80046bc:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 80046c0:	ea4f 014c 	movls.w	r1, ip, lsl #1
 80046c4:	f67f ae76 	bls.w	80043b4 <_malloc_r+0x84>
 80046c8:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 80046cc:	f200 808f 	bhi.w	80047ee <_malloc_r+0x4be>
 80046d0:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 80046d4:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 80046d8:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80046dc:	e66a      	b.n	80043b4 <_malloc_r+0x84>
 80046de:	0a4b      	lsrs	r3, r1, #9
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d958      	bls.n	8004796 <_malloc_r+0x466>
 80046e4:	2b14      	cmp	r3, #20
 80046e6:	bf9c      	itt	ls
 80046e8:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 80046ec:	0050      	lslls	r0, r2, #1
 80046ee:	d905      	bls.n	80046fc <_malloc_r+0x3cc>
 80046f0:	2b54      	cmp	r3, #84	; 0x54
 80046f2:	f200 80ba 	bhi.w	800486a <_malloc_r+0x53a>
 80046f6:	0b0a      	lsrs	r2, r1, #12
 80046f8:	326e      	adds	r2, #110	; 0x6e
 80046fa:	0050      	lsls	r0, r2, #1
 80046fc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8004700:	f240 489c 	movw	r8, #1180	; 0x49c
 8004704:	6883      	ldr	r3, [r0, #8]
 8004706:	4283      	cmp	r3, r0
 8004708:	f2c2 0800 	movt	r8, #8192	; 0x2000
 800470c:	d07f      	beq.n	800480e <_malloc_r+0x4de>
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	f022 0203 	bic.w	r2, r2, #3
 8004714:	4291      	cmp	r1, r2
 8004716:	d202      	bcs.n	800471e <_malloc_r+0x3ee>
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	4298      	cmp	r0, r3
 800471c:	d1f7      	bne.n	800470e <_malloc_r+0x3de>
 800471e:	68d9      	ldr	r1, [r3, #12]
 8004720:	6872      	ldr	r2, [r6, #4]
 8004722:	60e1      	str	r1, [r4, #12]
 8004724:	60a3      	str	r3, [r4, #8]
 8004726:	608c      	str	r4, [r1, #8]
 8004728:	60dc      	str	r4, [r3, #12]
 800472a:	e68b      	b.n	8004444 <_malloc_r+0x114>
 800472c:	1961      	adds	r1, r4, r5
 800472e:	f042 0601 	orr.w	r6, r2, #1
 8004732:	f045 0501 	orr.w	r5, r5, #1
 8004736:	6065      	str	r5, [r4, #4]
 8004738:	4638      	mov	r0, r7
 800473a:	6159      	str	r1, [r3, #20]
 800473c:	6119      	str	r1, [r3, #16]
 800473e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004742:	f8c1 e008 	str.w	lr, [r1, #8]
 8004746:	604e      	str	r6, [r1, #4]
 8004748:	508a      	str	r2, [r1, r2]
 800474a:	3408      	adds	r4, #8
 800474c:	f7fd fa12 	bl	8001b74 <__malloc_unlock>
 8004750:	e624      	b.n	800439c <_malloc_r+0x6c>
 8004752:	f109 0901 	add.w	r9, r9, #1
 8004756:	f019 0f03 	tst.w	r9, #3
 800475a:	f104 0408 	add.w	r4, r4, #8
 800475e:	f47f ae84 	bne.w	800446a <_malloc_r+0x13a>
 8004762:	e028      	b.n	80047b6 <_malloc_r+0x486>
 8004764:	f104 0308 	add.w	r3, r4, #8
 8004768:	6964      	ldr	r4, [r4, #20]
 800476a:	42a3      	cmp	r3, r4
 800476c:	bf08      	it	eq
 800476e:	f10c 0c02 	addeq.w	ip, ip, #2
 8004772:	f43f ae39 	beq.w	80043e8 <_malloc_r+0xb8>
 8004776:	e601      	b.n	800437c <_malloc_r+0x4c>
 8004778:	4419      	add	r1, r3
 800477a:	461c      	mov	r4, r3
 800477c:	6848      	ldr	r0, [r1, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f854 2f08 	ldr.w	r2, [r4, #8]!
 8004784:	f040 0501 	orr.w	r5, r0, #1
 8004788:	604d      	str	r5, [r1, #4]
 800478a:	4638      	mov	r0, r7
 800478c:	60d3      	str	r3, [r2, #12]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	f7fd f9f0 	bl	8001b74 <__malloc_unlock>
 8004794:	e602      	b.n	800439c <_malloc_r+0x6c>
 8004796:	098a      	lsrs	r2, r1, #6
 8004798:	3238      	adds	r2, #56	; 0x38
 800479a:	0050      	lsls	r0, r2, #1
 800479c:	e7ae      	b.n	80046fc <_malloc_r+0x3cc>
 800479e:	42b4      	cmp	r4, r6
 80047a0:	f43f aee6 	beq.w	8004570 <_malloc_r+0x240>
 80047a4:	68b4      	ldr	r4, [r6, #8]
 80047a6:	6862      	ldr	r2, [r4, #4]
 80047a8:	f022 0203 	bic.w	r2, r2, #3
 80047ac:	e757      	b.n	800465e <_malloc_r+0x32e>
 80047ae:	f8d8 8000 	ldr.w	r8, [r8]
 80047b2:	4598      	cmp	r8, r3
 80047b4:	d16b      	bne.n	800488e <_malloc_r+0x55e>
 80047b6:	f01c 0f03 	tst.w	ip, #3
 80047ba:	f1a8 0308 	sub.w	r3, r8, #8
 80047be:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80047c2:	d1f4      	bne.n	80047ae <_malloc_r+0x47e>
 80047c4:	6873      	ldr	r3, [r6, #4]
 80047c6:	ea23 0300 	bic.w	r3, r3, r0
 80047ca:	6073      	str	r3, [r6, #4]
 80047cc:	0040      	lsls	r0, r0, #1
 80047ce:	4298      	cmp	r0, r3
 80047d0:	f63f ae97 	bhi.w	8004502 <_malloc_r+0x1d2>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	f43f ae94 	beq.w	8004502 <_malloc_r+0x1d2>
 80047da:	4203      	tst	r3, r0
 80047dc:	46cc      	mov	ip, r9
 80047de:	f47f ae40 	bne.w	8004462 <_malloc_r+0x132>
 80047e2:	0040      	lsls	r0, r0, #1
 80047e4:	4203      	tst	r3, r0
 80047e6:	f10c 0c04 	add.w	ip, ip, #4
 80047ea:	d0fa      	beq.n	80047e2 <_malloc_r+0x4b2>
 80047ec:	e639      	b.n	8004462 <_malloc_r+0x132>
 80047ee:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 80047f2:	d817      	bhi.n	8004824 <_malloc_r+0x4f4>
 80047f4:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 80047f8:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 80047fc:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8004800:	e5d8      	b.n	80043b4 <_malloc_r+0x84>
 8004802:	2301      	movs	r3, #1
 8004804:	f8c8 3004 	str.w	r3, [r8, #4]
 8004808:	4644      	mov	r4, r8
 800480a:	2200      	movs	r2, #0
 800480c:	e727      	b.n	800465e <_malloc_r+0x32e>
 800480e:	1091      	asrs	r1, r2, #2
 8004810:	2001      	movs	r0, #1
 8004812:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004816:	fa00 f101 	lsl.w	r1, r0, r1
 800481a:	430a      	orrs	r2, r1
 800481c:	f8c8 2004 	str.w	r2, [r8, #4]
 8004820:	4619      	mov	r1, r3
 8004822:	e77e      	b.n	8004722 <_malloc_r+0x3f2>
 8004824:	f240 5354 	movw	r3, #1364	; 0x554
 8004828:	459c      	cmp	ip, r3
 800482a:	bf9d      	ittte	ls
 800482c:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 8004830:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 8004834:	ea4f 014c 	movls.w	r1, ip, lsl #1
 8004838:	21fc      	movhi	r1, #252	; 0xfc
 800483a:	bf88      	it	hi
 800483c:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8004840:	e5b8      	b.n	80043b4 <_malloc_r+0x84>
 8004842:	f3c2 010b 	ubfx	r1, r2, #0, #12
 8004846:	2900      	cmp	r1, #0
 8004848:	f47f ae9e 	bne.w	8004588 <_malloc_r+0x258>
 800484c:	eb0c 0109 	add.w	r1, ip, r9
 8004850:	68b2      	ldr	r2, [r6, #8]
 8004852:	f041 0101 	orr.w	r1, r1, #1
 8004856:	6051      	str	r1, [r2, #4]
 8004858:	e6ed      	b.n	8004636 <_malloc_r+0x306>
 800485a:	f104 0108 	add.w	r1, r4, #8
 800485e:	4638      	mov	r0, r7
 8004860:	f002 fc50 	bl	8007104 <_free_r>
 8004864:	f8da 3000 	ldr.w	r3, [sl]
 8004868:	e6e5      	b.n	8004636 <_malloc_r+0x306>
 800486a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800486e:	d803      	bhi.n	8004878 <_malloc_r+0x548>
 8004870:	0bca      	lsrs	r2, r1, #15
 8004872:	3277      	adds	r2, #119	; 0x77
 8004874:	0050      	lsls	r0, r2, #1
 8004876:	e741      	b.n	80046fc <_malloc_r+0x3cc>
 8004878:	f240 5254 	movw	r2, #1364	; 0x554
 800487c:	4293      	cmp	r3, r2
 800487e:	bf9d      	ittte	ls
 8004880:	0c8a      	lsrls	r2, r1, #18
 8004882:	327c      	addls	r2, #124	; 0x7c
 8004884:	0050      	lslls	r0, r2, #1
 8004886:	20fc      	movhi	r0, #252	; 0xfc
 8004888:	bf88      	it	hi
 800488a:	227e      	movhi	r2, #126	; 0x7e
 800488c:	e736      	b.n	80046fc <_malloc_r+0x3cc>
 800488e:	6873      	ldr	r3, [r6, #4]
 8004890:	e79c      	b.n	80047cc <_malloc_r+0x49c>
 8004892:	bf00      	nop

08004894 <memset>:
 8004894:	b4f0      	push	{r4, r5, r6, r7}
 8004896:	0784      	lsls	r4, r0, #30
 8004898:	d043      	beq.n	8004922 <memset+0x8e>
 800489a:	1e54      	subs	r4, r2, #1
 800489c:	2a00      	cmp	r2, #0
 800489e:	d03e      	beq.n	800491e <memset+0x8a>
 80048a0:	b2cd      	uxtb	r5, r1
 80048a2:	4603      	mov	r3, r0
 80048a4:	e003      	b.n	80048ae <memset+0x1a>
 80048a6:	1e62      	subs	r2, r4, #1
 80048a8:	2c00      	cmp	r4, #0
 80048aa:	d038      	beq.n	800491e <memset+0x8a>
 80048ac:	4614      	mov	r4, r2
 80048ae:	f803 5b01 	strb.w	r5, [r3], #1
 80048b2:	079a      	lsls	r2, r3, #30
 80048b4:	d1f7      	bne.n	80048a6 <memset+0x12>
 80048b6:	2c03      	cmp	r4, #3
 80048b8:	d92a      	bls.n	8004910 <memset+0x7c>
 80048ba:	b2cd      	uxtb	r5, r1
 80048bc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80048c0:	2c0f      	cmp	r4, #15
 80048c2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80048c6:	d915      	bls.n	80048f4 <memset+0x60>
 80048c8:	f1a4 0710 	sub.w	r7, r4, #16
 80048cc:	093f      	lsrs	r7, r7, #4
 80048ce:	f103 0610 	add.w	r6, r3, #16
 80048d2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80048d6:	461a      	mov	r2, r3
 80048d8:	6015      	str	r5, [r2, #0]
 80048da:	6055      	str	r5, [r2, #4]
 80048dc:	6095      	str	r5, [r2, #8]
 80048de:	60d5      	str	r5, [r2, #12]
 80048e0:	3210      	adds	r2, #16
 80048e2:	42b2      	cmp	r2, r6
 80048e4:	d1f8      	bne.n	80048d8 <memset+0x44>
 80048e6:	f004 040f 	and.w	r4, r4, #15
 80048ea:	3701      	adds	r7, #1
 80048ec:	2c03      	cmp	r4, #3
 80048ee:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80048f2:	d90d      	bls.n	8004910 <memset+0x7c>
 80048f4:	461e      	mov	r6, r3
 80048f6:	4622      	mov	r2, r4
 80048f8:	3a04      	subs	r2, #4
 80048fa:	2a03      	cmp	r2, #3
 80048fc:	f846 5b04 	str.w	r5, [r6], #4
 8004900:	d8fa      	bhi.n	80048f8 <memset+0x64>
 8004902:	1f22      	subs	r2, r4, #4
 8004904:	f022 0203 	bic.w	r2, r2, #3
 8004908:	3204      	adds	r2, #4
 800490a:	4413      	add	r3, r2
 800490c:	f004 0403 	and.w	r4, r4, #3
 8004910:	b12c      	cbz	r4, 800491e <memset+0x8a>
 8004912:	b2c9      	uxtb	r1, r1
 8004914:	441c      	add	r4, r3
 8004916:	f803 1b01 	strb.w	r1, [r3], #1
 800491a:	42a3      	cmp	r3, r4
 800491c:	d1fb      	bne.n	8004916 <memset+0x82>
 800491e:	bcf0      	pop	{r4, r5, r6, r7}
 8004920:	4770      	bx	lr
 8004922:	4614      	mov	r4, r2
 8004924:	4603      	mov	r3, r0
 8004926:	e7c6      	b.n	80048b6 <memset+0x22>

08004928 <strlen>:
 8004928:	f020 0103 	bic.w	r1, r0, #3
 800492c:	f010 0003 	ands.w	r0, r0, #3
 8004930:	f1c0 0000 	rsb	r0, r0, #0
 8004934:	f851 3b04 	ldr.w	r3, [r1], #4
 8004938:	f100 0c04 	add.w	ip, r0, #4
 800493c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004940:	f06f 0200 	mvn.w	r2, #0
 8004944:	bf1c      	itt	ne
 8004946:	fa22 f20c 	lsrne.w	r2, r2, ip
 800494a:	4313      	orrne	r3, r2
 800494c:	f04f 0c01 	mov.w	ip, #1
 8004950:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004954:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004958:	eba3 020c 	sub.w	r2, r3, ip
 800495c:	ea22 0203 	bic.w	r2, r2, r3
 8004960:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004964:	bf04      	itt	eq
 8004966:	f851 3b04 	ldreq.w	r3, [r1], #4
 800496a:	3004      	addeq	r0, #4
 800496c:	d0f4      	beq.n	8004958 <strlen+0x30>
 800496e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004972:	bf1f      	itttt	ne
 8004974:	3001      	addne	r0, #1
 8004976:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 800497a:	3001      	addne	r0, #1
 800497c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 8004980:	bf18      	it	ne
 8004982:	3001      	addne	r0, #1
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <strncpy>:
 8004988:	ea40 0301 	orr.w	r3, r0, r1
 800498c:	079b      	lsls	r3, r3, #30
 800498e:	b470      	push	{r4, r5, r6}
 8004990:	d12b      	bne.n	80049ea <strncpy+0x62>
 8004992:	2a03      	cmp	r2, #3
 8004994:	bf84      	itt	hi
 8004996:	460c      	movhi	r4, r1
 8004998:	4603      	movhi	r3, r0
 800499a:	d926      	bls.n	80049ea <strncpy+0x62>
 800499c:	4621      	mov	r1, r4
 800499e:	f854 5b04 	ldr.w	r5, [r4], #4
 80049a2:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
 80049a6:	ea26 0605 	bic.w	r6, r6, r5
 80049aa:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
 80049ae:	d105      	bne.n	80049bc <strncpy+0x34>
 80049b0:	3a04      	subs	r2, #4
 80049b2:	2a03      	cmp	r2, #3
 80049b4:	f843 5b04 	str.w	r5, [r3], #4
 80049b8:	4621      	mov	r1, r4
 80049ba:	d8ef      	bhi.n	800499c <strncpy+0x14>
 80049bc:	b19a      	cbz	r2, 80049e6 <strncpy+0x5e>
 80049be:	780c      	ldrb	r4, [r1, #0]
 80049c0:	3a01      	subs	r2, #1
 80049c2:	701c      	strb	r4, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	b13c      	cbz	r4, 80049d8 <strncpy+0x50>
 80049c8:	b16a      	cbz	r2, 80049e6 <strncpy+0x5e>
 80049ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80049ce:	3a01      	subs	r2, #1
 80049d0:	f803 4b01 	strb.w	r4, [r3], #1
 80049d4:	2c00      	cmp	r4, #0
 80049d6:	d1f7      	bne.n	80049c8 <strncpy+0x40>
 80049d8:	b12a      	cbz	r2, 80049e6 <strncpy+0x5e>
 80049da:	441a      	add	r2, r3
 80049dc:	2100      	movs	r1, #0
 80049de:	f803 1b01 	strb.w	r1, [r3], #1
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d1fb      	bne.n	80049de <strncpy+0x56>
 80049e6:	bc70      	pop	{r4, r5, r6}
 80049e8:	4770      	bx	lr
 80049ea:	4603      	mov	r3, r0
 80049ec:	e7e6      	b.n	80049bc <strncpy+0x34>
 80049ee:	bf00      	nop

080049f0 <_svfprintf_r>:
 80049f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f4:	b0c7      	sub	sp, #284	; 0x11c
 80049f6:	4693      	mov	fp, r2
 80049f8:	910a      	str	r1, [sp, #40]	; 0x28
 80049fa:	9313      	str	r3, [sp, #76]	; 0x4c
 80049fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80049fe:	f002 fc4f 	bl	80072a0 <_localeconv_r>
 8004a02:	6800      	ldr	r0, [r0, #0]
 8004a04:	9019      	str	r0, [sp, #100]	; 0x64
 8004a06:	f7ff ff8f 	bl	8004928 <strlen>
 8004a0a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a0c:	901c      	str	r0, [sp, #112]	; 0x70
 8004a0e:	89a3      	ldrh	r3, [r4, #12]
 8004a10:	0619      	lsls	r1, r3, #24
 8004a12:	d503      	bpl.n	8004a1c <_svfprintf_r+0x2c>
 8004a14:	6923      	ldr	r3, [r4, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f001 807f 	beq.w	8005b1a <_svfprintf_r+0x112a>
 8004a1c:	f10d 04d7 	add.w	r4, sp, #215	; 0xd7
 8004a20:	ad36      	add	r5, sp, #216	; 0xd8
 8004a22:	9407      	str	r4, [sp, #28]
 8004a24:	9508      	str	r5, [sp, #32]
 8004a26:	9d07      	ldr	r5, [sp, #28]
 8004a28:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004a2c:	a836      	add	r0, sp, #216	; 0xd8
 8004a2e:	1b44      	subs	r4, r0, r5
 8004a30:	f248 4908 	movw	r9, #33800	; 0x8408
 8004a34:	941f      	str	r4, [sp, #124]	; 0x7c
 8004a36:	f248 4558 	movw	r5, #33880	; 0x8458
 8004a3a:	f248 445c 	movw	r4, #33884	; 0x845c
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f6c0 0400 	movt	r4, #2048	; 0x800
 8004a44:	f6c0 0900 	movt	r9, #2048	; 0x800
 8004a48:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004a4c:	9310      	str	r3, [sp, #64]	; 0x40
 8004a4e:	932b      	str	r3, [sp, #172]	; 0xac
 8004a50:	932a      	str	r3, [sp, #168]	; 0xa8
 8004a52:	931a      	str	r3, [sp, #104]	; 0x68
 8004a54:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a56:	9318      	str	r3, [sp, #96]	; 0x60
 8004a58:	931d      	str	r3, [sp, #116]	; 0x74
 8004a5a:	9311      	str	r3, [sp, #68]	; 0x44
 8004a5c:	9029      	str	r0, [sp, #164]	; 0xa4
 8004a5e:	9415      	str	r4, [sp, #84]	; 0x54
 8004a60:	9516      	str	r5, [sp, #88]	; 0x58
 8004a62:	4606      	mov	r6, r0
 8004a64:	464f      	mov	r7, r9
 8004a66:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004a68:	7823      	ldrb	r3, [r4, #0]
 8004a6a:	2b25      	cmp	r3, #37	; 0x25
 8004a6c:	bf18      	it	ne
 8004a6e:	2b00      	cmpne	r3, #0
 8004a70:	f000 80b3 	beq.w	8004bda <_svfprintf_r+0x1ea>
 8004a74:	1c62      	adds	r2, r4, #1
 8004a76:	4614      	mov	r4, r2
 8004a78:	3201      	adds	r2, #1
 8004a7a:	7823      	ldrb	r3, [r4, #0]
 8004a7c:	2b25      	cmp	r3, #37	; 0x25
 8004a7e:	bf18      	it	ne
 8004a80:	2b00      	cmpne	r3, #0
 8004a82:	d1f8      	bne.n	8004a76 <_svfprintf_r+0x86>
 8004a84:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004a86:	1a25      	subs	r5, r4, r0
 8004a88:	d00f      	beq.n	8004aaa <_svfprintf_r+0xba>
 8004a8a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004a8c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	3301      	adds	r3, #1
 8004a92:	442a      	add	r2, r5
 8004a94:	2b07      	cmp	r3, #7
 8004a96:	6075      	str	r5, [r6, #4]
 8004a98:	922b      	str	r2, [sp, #172]	; 0xac
 8004a9a:	932a      	str	r3, [sp, #168]	; 0xa8
 8004a9c:	bfd8      	it	le
 8004a9e:	3608      	addle	r6, #8
 8004aa0:	f300 8081 	bgt.w	8004ba6 <_svfprintf_r+0x1b6>
 8004aa4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004aa6:	4429      	add	r1, r5
 8004aa8:	9111      	str	r1, [sp, #68]	; 0x44
 8004aaa:	7823      	ldrb	r3, [r4, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8082 	beq.w	8004bb6 <_svfprintf_r+0x1c6>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	1c65      	adds	r5, r4, #1
 8004ab6:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004aba:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 8004abe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	9312      	str	r3, [sp, #72]	; 0x48
 8004ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ac8:	950b      	str	r5, [sp, #44]	; 0x2c
 8004aca:	940c      	str	r4, [sp, #48]	; 0x30
 8004acc:	462b      	mov	r3, r5
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f1a9 0120 	sub.w	r1, r9, #32
 8004ad4:	2958      	cmp	r1, #88	; 0x58
 8004ad6:	f200 8402 	bhi.w	80052de <_svfprintf_r+0x8ee>
 8004ada:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004ade:	03e4      	.short	0x03e4
 8004ae0:	04000400 	.word	0x04000400
 8004ae4:	040003eb 	.word	0x040003eb
 8004ae8:	04000400 	.word	0x04000400
 8004aec:	04000400 	.word	0x04000400
 8004af0:	03f20400 	.word	0x03f20400
 8004af4:	04000399 	.word	0x04000399
 8004af8:	022d005d 	.word	0x022d005d
 8004afc:	026c0400 	.word	0x026c0400
 8004b00:	02730273 	.word	0x02730273
 8004b04:	02730273 	.word	0x02730273
 8004b08:	02730273 	.word	0x02730273
 8004b0c:	02730273 	.word	0x02730273
 8004b10:	04000273 	.word	0x04000273
 8004b14:	04000400 	.word	0x04000400
 8004b18:	04000400 	.word	0x04000400
 8004b1c:	04000400 	.word	0x04000400
 8004b20:	04000400 	.word	0x04000400
 8004b24:	024e0400 	.word	0x024e0400
 8004b28:	0400028b 	.word	0x0400028b
 8004b2c:	0400028b 	.word	0x0400028b
 8004b30:	04000400 	.word	0x04000400
 8004b34:	02840400 	.word	0x02840400
 8004b38:	04000400 	.word	0x04000400
 8004b3c:	040002c8 	.word	0x040002c8
 8004b40:	04000400 	.word	0x04000400
 8004b44:	04000400 	.word	0x04000400
 8004b48:	040002e3 	.word	0x040002e3
 8004b4c:	02fb0400 	.word	0x02fb0400
 8004b50:	04000400 	.word	0x04000400
 8004b54:	04000400 	.word	0x04000400
 8004b58:	04000400 	.word	0x04000400
 8004b5c:	04000400 	.word	0x04000400
 8004b60:	04000400 	.word	0x04000400
 8004b64:	03380322 	.word	0x03380322
 8004b68:	028b028b 	.word	0x028b028b
 8004b6c:	03dd028b 	.word	0x03dd028b
 8004b70:	04000338 	.word	0x04000338
 8004b74:	039d0400 	.word	0x039d0400
 8004b78:	03b10400 	.word	0x03b10400
 8004b7c:	03c5021c 	.word	0x03c5021c
 8004b80:	04000350 	.word	0x04000350
 8004b84:	04000357 	.word	0x04000357
 8004b88:	04000080 	.word	0x04000080
 8004b8c:	037f0400 	.word	0x037f0400
 8004b90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004b92:	9113      	str	r1, [sp, #76]	; 0x4c
 8004b94:	4264      	negs	r4, r4
 8004b96:	9412      	str	r4, [sp, #72]	; 0x48
 8004b98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004b9a:	f045 0504 	orr.w	r5, r5, #4
 8004b9e:	9509      	str	r5, [sp, #36]	; 0x24
 8004ba0:	f893 9000 	ldrb.w	r9, [r3]
 8004ba4:	e793      	b.n	8004ace <_svfprintf_r+0xde>
 8004ba6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004ba8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004baa:	aa29      	add	r2, sp, #164	; 0xa4
 8004bac:	f002 ff02 	bl	80079b4 <__ssprint_r>
 8004bb0:	b940      	cbnz	r0, 8004bc4 <_svfprintf_r+0x1d4>
 8004bb2:	ae36      	add	r6, sp, #216	; 0xd8
 8004bb4:	e776      	b.n	8004aa4 <_svfprintf_r+0xb4>
 8004bb6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8004bb8:	b123      	cbz	r3, 8004bc4 <_svfprintf_r+0x1d4>
 8004bba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004bbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bbe:	aa29      	add	r2, sp, #164	; 0xa4
 8004bc0:	f002 fef8 	bl	80079b4 <__ssprint_r>
 8004bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004bc6:	9811      	ldr	r0, [sp, #68]	; 0x44
 8004bc8:	89a3      	ldrh	r3, [r4, #12]
 8004bca:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004bce:	bf18      	it	ne
 8004bd0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004bd4:	b047      	add	sp, #284	; 0x11c
 8004bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004bdc:	e765      	b.n	8004aaa <_svfprintf_r+0xba>
 8004bde:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004be2:	06a3      	lsls	r3, r4, #26
 8004be4:	f140 8267 	bpl.w	80050b6 <_svfprintf_r+0x6c6>
 8004be8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004bea:	1deb      	adds	r3, r5, #7
 8004bec:	f023 0307 	bic.w	r3, r3, #7
 8004bf0:	f103 0408 	add.w	r4, r3, #8
 8004bf4:	9413      	str	r4, [sp, #76]	; 0x4c
 8004bf6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f04f 0a00 	mov.w	sl, #0
 8004c00:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8004c04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	bfa2      	ittt	ge
 8004c0a:	9809      	ldrge	r0, [sp, #36]	; 0x24
 8004c0c:	f020 0080 	bicge.w	r0, r0, #128	; 0x80
 8004c10:	9009      	strge	r0, [sp, #36]	; 0x24
 8004c12:	ea54 0105 	orrs.w	r1, r4, r5
 8004c16:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c18:	bf0c      	ite	eq
 8004c1a:	2200      	moveq	r2, #0
 8004c1c:	2201      	movne	r2, #1
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	bf18      	it	ne
 8004c22:	f042 0201 	orrne.w	r2, r2, #1
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	f000 83df 	beq.w	80053ea <_svfprintf_r+0x9fa>
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	f000 850c 	beq.w	800564a <_svfprintf_r+0xc5a>
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	f10d 02d7 	add.w	r2, sp, #215	; 0xd7
 8004c38:	f040 8151 	bne.w	8004ede <_svfprintf_r+0x4ee>
 8004c3c:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004c3e:	f004 010f 	and.w	r1, r4, #15
 8004c42:	0923      	lsrs	r3, r4, #4
 8004c44:	4690      	mov	r8, r2
 8004c46:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8004c4a:	5c42      	ldrb	r2, [r0, r1]
 8004c4c:	0929      	lsrs	r1, r5, #4
 8004c4e:	461c      	mov	r4, r3
 8004c50:	460d      	mov	r5, r1
 8004c52:	ea54 0105 	orrs.w	r1, r4, r5
 8004c56:	f888 2000 	strb.w	r2, [r8]
 8004c5a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004c5e:	d1ee      	bne.n	8004c3e <_svfprintf_r+0x24e>
 8004c60:	9b08      	ldr	r3, [sp, #32]
 8004c62:	ebc8 0303 	rsb	r3, r8, r3
 8004c66:	930e      	str	r3, [sp, #56]	; 0x38
 8004c68:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004c6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004c6c:	42a5      	cmp	r5, r4
 8004c6e:	bfb8      	it	lt
 8004c70:	4625      	movlt	r5, r4
 8004c72:	2400      	movs	r4, #0
 8004c74:	950d      	str	r5, [sp, #52]	; 0x34
 8004c76:	9417      	str	r4, [sp, #92]	; 0x5c
 8004c78:	f1ba 0f00 	cmp.w	sl, #0
 8004c7c:	d002      	beq.n	8004c84 <_svfprintf_r+0x294>
 8004c7e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004c80:	3401      	adds	r4, #1
 8004c82:	940d      	str	r4, [sp, #52]	; 0x34
 8004c84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c86:	f015 0b02 	ands.w	fp, r5, #2
 8004c8a:	bf18      	it	ne
 8004c8c:	9c0d      	ldrne	r4, [sp, #52]	; 0x34
 8004c8e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004c90:	bf1c      	itt	ne
 8004c92:	3402      	addne	r4, #2
 8004c94:	940d      	strne	r4, [sp, #52]	; 0x34
 8004c96:	f015 0584 	ands.w	r5, r5, #132	; 0x84
 8004c9a:	9514      	str	r5, [sp, #80]	; 0x50
 8004c9c:	f040 8334 	bne.w	8005308 <_svfprintf_r+0x918>
 8004ca0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004ca2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004ca4:	1a2c      	subs	r4, r5, r0
 8004ca6:	2c00      	cmp	r4, #0
 8004ca8:	f340 832e 	ble.w	8005308 <_svfprintf_r+0x918>
 8004cac:	2c10      	cmp	r4, #16
 8004cae:	f248 4a5c 	movw	sl, #33884	; 0x845c
 8004cb2:	f340 87d6 	ble.w	8005c62 <_svfprintf_r+0x1272>
 8004cb6:	4630      	mov	r0, r6
 8004cb8:	971e      	str	r7, [sp, #120]	; 0x78
 8004cba:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004cbc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004cbe:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004cc0:	4627      	mov	r7, r4
 8004cc2:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004cc6:	2510      	movs	r5, #16
 8004cc8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8004cca:	e002      	b.n	8004cd2 <_svfprintf_r+0x2e2>
 8004ccc:	3f10      	subs	r7, #16
 8004cce:	2f10      	cmp	r7, #16
 8004cd0:	dd17      	ble.n	8004d02 <_svfprintf_r+0x312>
 8004cd2:	3201      	adds	r2, #1
 8004cd4:	3110      	adds	r1, #16
 8004cd6:	2a07      	cmp	r2, #7
 8004cd8:	6006      	str	r6, [r0, #0]
 8004cda:	6045      	str	r5, [r0, #4]
 8004cdc:	912b      	str	r1, [sp, #172]	; 0xac
 8004cde:	922a      	str	r2, [sp, #168]	; 0xa8
 8004ce0:	bfd8      	it	le
 8004ce2:	3008      	addle	r0, #8
 8004ce4:	ddf2      	ble.n	8004ccc <_svfprintf_r+0x2dc>
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cea:	aa29      	add	r2, sp, #164	; 0xa4
 8004cec:	f002 fe62 	bl	80079b4 <__ssprint_r>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	f47f af67 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8004cf6:	3f10      	subs	r7, #16
 8004cf8:	2f10      	cmp	r7, #16
 8004cfa:	992b      	ldr	r1, [sp, #172]	; 0xac
 8004cfc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8004cfe:	a836      	add	r0, sp, #216	; 0xd8
 8004d00:	dce7      	bgt.n	8004cd2 <_svfprintf_r+0x2e2>
 8004d02:	463c      	mov	r4, r7
 8004d04:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8004d06:	4606      	mov	r6, r0
 8004d08:	3201      	adds	r2, #1
 8004d0a:	4421      	add	r1, r4
 8004d0c:	2a07      	cmp	r2, #7
 8004d0e:	912b      	str	r1, [sp, #172]	; 0xac
 8004d10:	922a      	str	r2, [sp, #168]	; 0xa8
 8004d12:	f8c6 a000 	str.w	sl, [r6]
 8004d16:	6074      	str	r4, [r6, #4]
 8004d18:	f300 84a5 	bgt.w	8005666 <_svfprintf_r+0xc76>
 8004d1c:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8004d20:	3608      	adds	r6, #8
 8004d22:	460c      	mov	r4, r1
 8004d24:	f1ba 0f00 	cmp.w	sl, #0
 8004d28:	d00e      	beq.n	8004d48 <_svfprintf_r+0x358>
 8004d2a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	3401      	adds	r4, #1
 8004d30:	f10d 0187 	add.w	r1, sp, #135	; 0x87
 8004d34:	2201      	movs	r2, #1
 8004d36:	2b07      	cmp	r3, #7
 8004d38:	e886 0006 	stmia.w	r6, {r1, r2}
 8004d3c:	942b      	str	r4, [sp, #172]	; 0xac
 8004d3e:	932a      	str	r3, [sp, #168]	; 0xa8
 8004d40:	bfd8      	it	le
 8004d42:	3608      	addle	r6, #8
 8004d44:	f300 82e2 	bgt.w	800530c <_svfprintf_r+0x91c>
 8004d48:	f1bb 0f00 	cmp.w	fp, #0
 8004d4c:	d00d      	beq.n	8004d6a <_svfprintf_r+0x37a>
 8004d4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d50:	3301      	adds	r3, #1
 8004d52:	3402      	adds	r4, #2
 8004d54:	a922      	add	r1, sp, #136	; 0x88
 8004d56:	2202      	movs	r2, #2
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	e886 0006 	stmia.w	r6, {r1, r2}
 8004d5e:	942b      	str	r4, [sp, #172]	; 0xac
 8004d60:	932a      	str	r3, [sp, #168]	; 0xa8
 8004d62:	bfd8      	it	le
 8004d64:	3608      	addle	r6, #8
 8004d66:	f300 840d 	bgt.w	8005584 <_svfprintf_r+0xb94>
 8004d6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d6c:	2b80      	cmp	r3, #128	; 0x80
 8004d6e:	f000 834f 	beq.w	8005410 <_svfprintf_r+0xa20>
 8004d72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d76:	ebc3 0a05 	rsb	sl, r3, r5
 8004d7a:	f1ba 0f00 	cmp.w	sl, #0
 8004d7e:	dd44      	ble.n	8004e0a <_svfprintf_r+0x41a>
 8004d80:	f1ba 0f10 	cmp.w	sl, #16
 8004d84:	f248 4508 	movw	r5, #33800	; 0x8408
 8004d88:	bfdc      	itt	le
 8004d8a:	f6c0 0500 	movtle	r5, #2048	; 0x800
 8004d8e:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 8004d90:	dd27      	ble.n	8004de2 <_svfprintf_r+0x3f2>
 8004d92:	f6c0 0500 	movt	r5, #2048	; 0x800
 8004d96:	4622      	mov	r2, r4
 8004d98:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004d9a:	4654      	mov	r4, sl
 8004d9c:	f04f 0b10 	mov.w	fp, #16
 8004da0:	46aa      	mov	sl, r5
 8004da2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004da4:	e002      	b.n	8004dac <_svfprintf_r+0x3bc>
 8004da6:	3c10      	subs	r4, #16
 8004da8:	2c10      	cmp	r4, #16
 8004daa:	dd17      	ble.n	8004ddc <_svfprintf_r+0x3ec>
 8004dac:	3301      	adds	r3, #1
 8004dae:	3210      	adds	r2, #16
 8004db0:	2b07      	cmp	r3, #7
 8004db2:	e886 0880 	stmia.w	r6, {r7, fp}
 8004db6:	922b      	str	r2, [sp, #172]	; 0xac
 8004db8:	932a      	str	r3, [sp, #168]	; 0xa8
 8004dba:	bfd8      	it	le
 8004dbc:	3608      	addle	r6, #8
 8004dbe:	ddf2      	ble.n	8004da6 <_svfprintf_r+0x3b6>
 8004dc0:	4628      	mov	r0, r5
 8004dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004dc4:	aa29      	add	r2, sp, #164	; 0xa4
 8004dc6:	f002 fdf5 	bl	80079b4 <__ssprint_r>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	f47f aefa 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8004dd0:	3c10      	subs	r4, #16
 8004dd2:	2c10      	cmp	r4, #16
 8004dd4:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8004dd6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004dd8:	ae36      	add	r6, sp, #216	; 0xd8
 8004dda:	dce7      	bgt.n	8004dac <_svfprintf_r+0x3bc>
 8004ddc:	4655      	mov	r5, sl
 8004dde:	46a2      	mov	sl, r4
 8004de0:	4614      	mov	r4, r2
 8004de2:	3301      	adds	r3, #1
 8004de4:	4454      	add	r4, sl
 8004de6:	2b07      	cmp	r3, #7
 8004de8:	e886 0420 	stmia.w	r6, {r5, sl}
 8004dec:	942b      	str	r4, [sp, #172]	; 0xac
 8004dee:	932a      	str	r3, [sp, #168]	; 0xa8
 8004df0:	bfd8      	it	le
 8004df2:	3608      	addle	r6, #8
 8004df4:	dd09      	ble.n	8004e0a <_svfprintf_r+0x41a>
 8004df6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004df8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004dfa:	aa29      	add	r2, sp, #164	; 0xa4
 8004dfc:	f002 fdda 	bl	80079b4 <__ssprint_r>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	f47f aedf 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8004e06:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004e08:	ae36      	add	r6, sp, #216	; 0xd8
 8004e0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e0c:	05ea      	lsls	r2, r5, #23
 8004e0e:	f100 8288 	bmi.w	8005322 <_svfprintf_r+0x932>
 8004e12:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e14:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8004e16:	f8c6 8000 	str.w	r8, [r6]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	442c      	add	r4, r5
 8004e1e:	2b07      	cmp	r3, #7
 8004e20:	942b      	str	r4, [sp, #172]	; 0xac
 8004e22:	6075      	str	r5, [r6, #4]
 8004e24:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e26:	f300 8393 	bgt.w	8005550 <_svfprintf_r+0xb60>
 8004e2a:	3608      	adds	r6, #8
 8004e2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e2e:	076b      	lsls	r3, r5, #29
 8004e30:	d546      	bpl.n	8004ec0 <_svfprintf_r+0x4d0>
 8004e32:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004e34:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e36:	1a45      	subs	r5, r0, r1
 8004e38:	2d00      	cmp	r5, #0
 8004e3a:	dd41      	ble.n	8004ec0 <_svfprintf_r+0x4d0>
 8004e3c:	2d10      	cmp	r5, #16
 8004e3e:	f248 4a5c 	movw	sl, #33884	; 0x845c
 8004e42:	bfdc      	itt	le
 8004e44:	f6c0 0a00 	movtle	sl, #2048	; 0x800
 8004e48:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 8004e4a:	dd27      	ble.n	8004e9c <_svfprintf_r+0x4ac>
 8004e4c:	9709      	str	r7, [sp, #36]	; 0x24
 8004e4e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e50:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004e54:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8004e58:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004e5a:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8004e5e:	f04f 0810 	mov.w	r8, #16
 8004e62:	e002      	b.n	8004e6a <_svfprintf_r+0x47a>
 8004e64:	3d10      	subs	r5, #16
 8004e66:	2d10      	cmp	r5, #16
 8004e68:	dd17      	ble.n	8004e9a <_svfprintf_r+0x4aa>
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	3410      	adds	r4, #16
 8004e6e:	2b07      	cmp	r3, #7
 8004e70:	e886 0180 	stmia.w	r6, {r7, r8}
 8004e74:	942b      	str	r4, [sp, #172]	; 0xac
 8004e76:	932a      	str	r3, [sp, #168]	; 0xa8
 8004e78:	bfd8      	it	le
 8004e7a:	3608      	addle	r6, #8
 8004e7c:	ddf2      	ble.n	8004e64 <_svfprintf_r+0x474>
 8004e7e:	4648      	mov	r0, r9
 8004e80:	4659      	mov	r1, fp
 8004e82:	aa29      	add	r2, sp, #164	; 0xa4
 8004e84:	f002 fd96 	bl	80079b4 <__ssprint_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f47f ae9b 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8004e8e:	3d10      	subs	r5, #16
 8004e90:	2d10      	cmp	r5, #16
 8004e92:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004e94:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8004e96:	ae36      	add	r6, sp, #216	; 0xd8
 8004e98:	dce7      	bgt.n	8004e6a <_svfprintf_r+0x47a>
 8004e9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	442c      	add	r4, r5
 8004ea0:	2b07      	cmp	r3, #7
 8004ea2:	942b      	str	r4, [sp, #172]	; 0xac
 8004ea4:	932a      	str	r3, [sp, #168]	; 0xa8
 8004ea6:	f8c6 a000 	str.w	sl, [r6]
 8004eaa:	6075      	str	r5, [r6, #4]
 8004eac:	dd08      	ble.n	8004ec0 <_svfprintf_r+0x4d0>
 8004eae:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8004eb0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004eb2:	aa29      	add	r2, sp, #164	; 0xa4
 8004eb4:	f002 fd7e 	bl	80079b4 <__ssprint_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	f47f ae83 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8004ebe:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8004ec0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004ec2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ec4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004ec6:	4281      	cmp	r1, r0
 8004ec8:	bfac      	ite	ge
 8004eca:	186d      	addge	r5, r5, r1
 8004ecc:	182d      	addlt	r5, r5, r0
 8004ece:	9511      	str	r5, [sp, #68]	; 0x44
 8004ed0:	2c00      	cmp	r4, #0
 8004ed2:	f040 8348 	bne.w	8005566 <_svfprintf_r+0xb76>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	932a      	str	r3, [sp, #168]	; 0xa8
 8004eda:	ae36      	add	r6, sp, #216	; 0xd8
 8004edc:	e5c3      	b.n	8004a66 <_svfprintf_r+0x76>
 8004ede:	08e3      	lsrs	r3, r4, #3
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 8004ee6:	08ea      	lsrs	r2, r5, #3
 8004ee8:	f004 0107 	and.w	r1, r4, #7
 8004eec:	4615      	mov	r5, r2
 8004eee:	461c      	mov	r4, r3
 8004ef0:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8004ef4:	ea54 0105 	orrs.w	r1, r4, r5
 8004ef8:	f888 3000 	strb.w	r3, [r8]
 8004efc:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004f00:	d1ed      	bne.n	8004ede <_svfprintf_r+0x4ee>
 8004f02:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f04:	07e0      	lsls	r0, r4, #31
 8004f06:	4641      	mov	r1, r8
 8004f08:	f100 84ff 	bmi.w	800590a <_svfprintf_r+0xf1a>
 8004f0c:	9d08      	ldr	r5, [sp, #32]
 8004f0e:	ebc8 0505 	rsb	r5, r8, r5
 8004f12:	950e      	str	r5, [sp, #56]	; 0x38
 8004f14:	e6a8      	b.n	8004c68 <_svfprintf_r+0x278>
 8004f16:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f18:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f1a:	f015 0320 	ands.w	r3, r5, #32
 8004f1e:	f000 80b0 	beq.w	8005082 <_svfprintf_r+0x692>
 8004f22:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8004f24:	1de3      	adds	r3, r4, #7
 8004f26:	f023 0307 	bic.w	r3, r3, #7
 8004f2a:	f103 0508 	add.w	r5, r3, #8
 8004f2e:	9513      	str	r5, [sp, #76]	; 0x4c
 8004f30:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f34:	2300      	movs	r3, #0
 8004f36:	e661      	b.n	8004bfc <_svfprintf_r+0x20c>
 8004f38:	f893 9000 	ldrb.w	r9, [r3]
 8004f3c:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8004f40:	f103 0001 	add.w	r0, r3, #1
 8004f44:	f000 87a2 	beq.w	8005e8c <_svfprintf_r+0x149c>
 8004f48:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004f4c:	2909      	cmp	r1, #9
 8004f4e:	bf82      	ittt	hi
 8004f50:	2400      	movhi	r4, #0
 8004f52:	4603      	movhi	r3, r0
 8004f54:	940c      	strhi	r4, [sp, #48]	; 0x30
 8004f56:	f63f adbb 	bhi.w	8004ad0 <_svfprintf_r+0xe0>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f810 9b01 	ldrb.w	r9, [r0], #1
 8004f60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004f64:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004f68:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004f6c:	2909      	cmp	r1, #9
 8004f6e:	d9f5      	bls.n	8004f5c <_svfprintf_r+0x56c>
 8004f70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f74:	930c      	str	r3, [sp, #48]	; 0x30
 8004f76:	4603      	mov	r3, r0
 8004f78:	e5aa      	b.n	8004ad0 <_svfprintf_r+0xe0>
 8004f7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004f7c:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8004f80:	f045 0510 	orr.w	r5, r5, #16
 8004f84:	9509      	str	r5, [sp, #36]	; 0x24
 8004f86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f8a:	06a2      	lsls	r2, r4, #26
 8004f8c:	f140 80e6 	bpl.w	800515c <_svfprintf_r+0x76c>
 8004f90:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004f92:	1de9      	adds	r1, r5, #7
 8004f94:	f021 0107 	bic.w	r1, r1, #7
 8004f98:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004f9c:	3108      	adds	r1, #8
 8004f9e:	9113      	str	r1, [sp, #76]	; 0x4c
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	2a00      	cmp	r2, #0
 8004fa6:	f173 0100 	sbcs.w	r1, r3, #0
 8004faa:	f2c0 83cf 	blt.w	800574c <_svfprintf_r+0xd5c>
 8004fae:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e626      	b.n	8004c04 <_svfprintf_r+0x214>
 8004fb6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004fb8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004fbc:	9409      	str	r4, [sp, #36]	; 0x24
 8004fbe:	f893 9000 	ldrb.w	r9, [r3]
 8004fc2:	e584      	b.n	8004ace <_svfprintf_r+0xde>
 8004fc4:	2500      	movs	r5, #0
 8004fc6:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004fca:	9512      	str	r5, [sp, #72]	; 0x48
 8004fcc:	4628      	mov	r0, r5
 8004fce:	f813 9b01 	ldrb.w	r9, [r3], #1
 8004fd2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004fd6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8004fda:	f1a9 0130 	sub.w	r1, r9, #48	; 0x30
 8004fde:	2909      	cmp	r1, #9
 8004fe0:	d9f5      	bls.n	8004fce <_svfprintf_r+0x5de>
 8004fe2:	9012      	str	r0, [sp, #72]	; 0x48
 8004fe4:	e574      	b.n	8004ad0 <_svfprintf_r+0xe0>
 8004fe6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004fe8:	f044 0408 	orr.w	r4, r4, #8
 8004fec:	9409      	str	r4, [sp, #36]	; 0x24
 8004fee:	f893 9000 	ldrb.w	r9, [r3]
 8004ff2:	e56c      	b.n	8004ace <_svfprintf_r+0xde>
 8004ff4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004ff6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ff8:	0724      	lsls	r4, r4, #28
 8004ffa:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8004ffe:	f140 84ae 	bpl.w	800595e <_svfprintf_r+0xf6e>
 8005002:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005004:	1deb      	adds	r3, r5, #7
 8005006:	f023 0307 	bic.w	r3, r3, #7
 800500a:	f103 0408 	add.w	r4, r3, #8
 800500e:	681d      	ldr	r5, [r3, #0]
 8005010:	9413      	str	r4, [sp, #76]	; 0x4c
 8005012:	951a      	str	r5, [sp, #104]	; 0x68
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	931b      	str	r3, [sp, #108]	; 0x6c
 8005018:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800501a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800501c:	f002 fca2 	bl	8007964 <__fpclassifyd>
 8005020:	2801      	cmp	r0, #1
 8005022:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005024:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005026:	f040 847c 	bne.w	8005922 <_svfprintf_r+0xf32>
 800502a:	2200      	movs	r2, #0
 800502c:	2300      	movs	r3, #0
 800502e:	f7fb fdd3 	bl	8000bd8 <__aeabi_dcmplt>
 8005032:	2800      	cmp	r0, #0
 8005034:	f040 8654 	bne.w	8005ce0 <_svfprintf_r+0x12f0>
 8005038:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 800503c:	2503      	movs	r5, #3
 800503e:	950d      	str	r5, [sp, #52]	; 0x34
 8005040:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005042:	2400      	movs	r4, #0
 8005044:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005048:	f248 481c 	movw	r8, #33820	; 0x841c
 800504c:	f248 4318 	movw	r3, #33816	; 0x8418
 8005050:	f6c0 0800 	movt	r8, #2048	; 0x800
 8005054:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005058:	940c      	str	r4, [sp, #48]	; 0x30
 800505a:	9509      	str	r5, [sp, #36]	; 0x24
 800505c:	2403      	movs	r4, #3
 800505e:	2500      	movs	r5, #0
 8005060:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005064:	bfd8      	it	le
 8005066:	4698      	movle	r8, r3
 8005068:	940e      	str	r4, [sp, #56]	; 0x38
 800506a:	9517      	str	r5, [sp, #92]	; 0x5c
 800506c:	e604      	b.n	8004c78 <_svfprintf_r+0x288>
 800506e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005070:	930b      	str	r3, [sp, #44]	; 0x2c
 8005072:	f044 0410 	orr.w	r4, r4, #16
 8005076:	9409      	str	r4, [sp, #36]	; 0x24
 8005078:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800507a:	f015 0320 	ands.w	r3, r5, #32
 800507e:	f47f af50 	bne.w	8004f22 <_svfprintf_r+0x532>
 8005082:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005084:	f014 0210 	ands.w	r2, r4, #16
 8005088:	f040 834c 	bne.w	8005724 <_svfprintf_r+0xd34>
 800508c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800508e:	f014 0340 	ands.w	r3, r4, #64	; 0x40
 8005092:	f000 8347 	beq.w	8005724 <_svfprintf_r+0xd34>
 8005096:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005098:	8804      	ldrh	r4, [r0, #0]
 800509a:	3004      	adds	r0, #4
 800509c:	4613      	mov	r3, r2
 800509e:	2500      	movs	r5, #0
 80050a0:	9013      	str	r0, [sp, #76]	; 0x4c
 80050a2:	e5ab      	b.n	8004bfc <_svfprintf_r+0x20c>
 80050a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050a8:	f045 0510 	orr.w	r5, r5, #16
 80050ac:	9509      	str	r5, [sp, #36]	; 0x24
 80050ae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80050b0:	06a3      	lsls	r3, r4, #26
 80050b2:	f53f ad99 	bmi.w	8004be8 <_svfprintf_r+0x1f8>
 80050b6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050b8:	06ed      	lsls	r5, r5, #27
 80050ba:	f100 8325 	bmi.w	8005708 <_svfprintf_r+0xd18>
 80050be:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80050c0:	0664      	lsls	r4, r4, #25
 80050c2:	f140 8321 	bpl.w	8005708 <_svfprintf_r+0xd18>
 80050c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80050c8:	8804      	ldrh	r4, [r0, #0]
 80050ca:	3004      	adds	r0, #4
 80050cc:	2500      	movs	r5, #0
 80050ce:	2301      	movs	r3, #1
 80050d0:	9013      	str	r0, [sp, #76]	; 0x4c
 80050d2:	e593      	b.n	8004bfc <_svfprintf_r+0x20c>
 80050d4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80050d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80050d8:	f248 4428 	movw	r4, #33832	; 0x8428
 80050dc:	f6c0 0400 	movt	r4, #2048	; 0x800
 80050e0:	06a8      	lsls	r0, r5, #26
 80050e2:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 80050e6:	9418      	str	r4, [sp, #96]	; 0x60
 80050e8:	f140 8084 	bpl.w	80051f4 <_svfprintf_r+0x804>
 80050ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80050ee:	1de3      	adds	r3, r4, #7
 80050f0:	f023 0307 	bic.w	r3, r3, #7
 80050f4:	f103 0508 	add.w	r5, r3, #8
 80050f8:	9513      	str	r5, [sp, #76]	; 0x4c
 80050fa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005100:	07c3      	lsls	r3, r0, #31
 8005102:	f140 824b 	bpl.w	800559c <_svfprintf_r+0xbac>
 8005106:	ea54 0105 	orrs.w	r1, r4, r5
 800510a:	f000 8247 	beq.w	800559c <_svfprintf_r+0xbac>
 800510e:	2330      	movs	r3, #48	; 0x30
 8005110:	f040 0002 	orr.w	r0, r0, #2
 8005114:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005118:	f88d 9089 	strb.w	r9, [sp, #137]	; 0x89
 800511c:	9009      	str	r0, [sp, #36]	; 0x24
 800511e:	2302      	movs	r3, #2
 8005120:	e56c      	b.n	8004bfc <_svfprintf_r+0x20c>
 8005122:	930b      	str	r3, [sp, #44]	; 0x2c
 8005124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005126:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f04f 0a00 	mov.w	sl, #0
 800512e:	2501      	movs	r5, #1
 8005130:	3404      	adds	r4, #4
 8005132:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8005136:	950d      	str	r5, [sp, #52]	; 0x34
 8005138:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
 800513c:	9413      	str	r4, [sp, #76]	; 0x4c
 800513e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005142:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005146:	950e      	str	r5, [sp, #56]	; 0x38
 8005148:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800514c:	e59a      	b.n	8004c84 <_svfprintf_r+0x294>
 800514e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005150:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 8005154:	06a2      	lsls	r2, r4, #26
 8005156:	930b      	str	r3, [sp, #44]	; 0x2c
 8005158:	f53f af1a 	bmi.w	8004f90 <_svfprintf_r+0x5a0>
 800515c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800515e:	06e3      	lsls	r3, r4, #27
 8005160:	f100 82e7 	bmi.w	8005732 <_svfprintf_r+0xd42>
 8005164:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005166:	0665      	lsls	r5, r4, #25
 8005168:	f140 82e3 	bpl.w	8005732 <_svfprintf_r+0xd42>
 800516c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800516e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8005172:	3004      	adds	r0, #4
 8005174:	17e5      	asrs	r5, r4, #31
 8005176:	4622      	mov	r2, r4
 8005178:	462b      	mov	r3, r5
 800517a:	9013      	str	r0, [sp, #76]	; 0x4c
 800517c:	e712      	b.n	8004fa4 <_svfprintf_r+0x5b4>
 800517e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005180:	f044 0420 	orr.w	r4, r4, #32
 8005184:	9409      	str	r4, [sp, #36]	; 0x24
 8005186:	f893 9000 	ldrb.w	r9, [r3]
 800518a:	e4a0      	b.n	8004ace <_svfprintf_r+0xde>
 800518c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800518e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005190:	f8d4 8000 	ldr.w	r8, [r4]
 8005194:	2500      	movs	r5, #0
 8005196:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
 800519a:	3404      	adds	r4, #4
 800519c:	f1b8 0f00 	cmp.w	r8, #0
 80051a0:	f000 857e 	beq.w	8005ca0 <_svfprintf_r+0x12b0>
 80051a4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80051a6:	2800      	cmp	r0, #0
 80051a8:	4640      	mov	r0, r8
 80051aa:	f2c0 854c 	blt.w	8005c46 <_svfprintf_r+0x1256>
 80051ae:	4629      	mov	r1, r5
 80051b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051b2:	f002 f87b 	bl	80072ac <memchr>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	f000 85a3 	beq.w	8005d02 <_svfprintf_r+0x1312>
 80051bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051be:	9413      	str	r4, [sp, #76]	; 0x4c
 80051c0:	ebc8 0000 	rsb	r0, r8, r0
 80051c4:	4288      	cmp	r0, r1
 80051c6:	bfb8      	it	lt
 80051c8:	4601      	movlt	r1, r0
 80051ca:	ea21 74e1 	bic.w	r4, r1, r1, asr #31
 80051ce:	910e      	str	r1, [sp, #56]	; 0x38
 80051d0:	950c      	str	r5, [sp, #48]	; 0x30
 80051d2:	940d      	str	r4, [sp, #52]	; 0x34
 80051d4:	9517      	str	r5, [sp, #92]	; 0x5c
 80051d6:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 80051da:	e54d      	b.n	8004c78 <_svfprintf_r+0x288>
 80051dc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80051de:	930b      	str	r3, [sp, #44]	; 0x2c
 80051e0:	f248 443c 	movw	r4, #33852	; 0x843c
 80051e4:	f6c0 0400 	movt	r4, #2048	; 0x800
 80051e8:	06a8      	lsls	r0, r5, #26
 80051ea:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 80051ee:	9418      	str	r4, [sp, #96]	; 0x60
 80051f0:	f53f af7c 	bmi.w	80050ec <_svfprintf_r+0x6fc>
 80051f4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051f6:	06e1      	lsls	r1, r4, #27
 80051f8:	f100 828e 	bmi.w	8005718 <_svfprintf_r+0xd28>
 80051fc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80051fe:	0662      	lsls	r2, r4, #25
 8005200:	f140 828a 	bpl.w	8005718 <_svfprintf_r+0xd28>
 8005204:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005206:	8804      	ldrh	r4, [r0, #0]
 8005208:	3004      	adds	r0, #4
 800520a:	2500      	movs	r5, #0
 800520c:	9013      	str	r0, [sp, #76]	; 0x4c
 800520e:	e776      	b.n	80050fe <_svfprintf_r+0x70e>
 8005210:	f893 9000 	ldrb.w	r9, [r3]
 8005214:	222b      	movs	r2, #43	; 0x2b
 8005216:	e45a      	b.n	8004ace <_svfprintf_r+0xde>
 8005218:	f893 9000 	ldrb.w	r9, [r3]
 800521c:	f1b9 0f6c 	cmp.w	r9, #108	; 0x6c
 8005220:	bf0c      	ite	eq
 8005222:	9c09      	ldreq	r4, [sp, #36]	; 0x24
 8005224:	9d09      	ldrne	r5, [sp, #36]	; 0x24
 8005226:	4619      	mov	r1, r3
 8005228:	bf09      	itett	eq
 800522a:	f044 0420 	orreq.w	r4, r4, #32
 800522e:	f045 0510 	orrne.w	r5, r5, #16
 8005232:	3301      	addeq	r3, #1
 8005234:	9409      	streq	r4, [sp, #36]	; 0x24
 8005236:	bf0c      	ite	eq
 8005238:	f891 9001 	ldrbeq.w	r9, [r1, #1]
 800523c:	9509      	strne	r5, [sp, #36]	; 0x24
 800523e:	e446      	b.n	8004ace <_svfprintf_r+0xde>
 8005240:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005242:	930b      	str	r3, [sp, #44]	; 0x2c
 8005244:	06a9      	lsls	r1, r5, #26
 8005246:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 800524a:	f140 8395 	bpl.w	8005978 <_svfprintf_r+0xf88>
 800524e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005250:	6821      	ldr	r1, [r4, #0]
 8005252:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005254:	17e5      	asrs	r5, r4, #31
 8005256:	462b      	mov	r3, r5
 8005258:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800525a:	4622      	mov	r2, r4
 800525c:	3504      	adds	r5, #4
 800525e:	9513      	str	r5, [sp, #76]	; 0x4c
 8005260:	e9c1 2300 	strd	r2, r3, [r1]
 8005264:	f7ff bbff 	b.w	8004a66 <_svfprintf_r+0x76>
 8005268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800526a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800526c:	930b      	str	r3, [sp, #44]	; 0x2c
 800526e:	f045 0502 	orr.w	r5, r5, #2
 8005272:	f248 403c 	movw	r0, #33852	; 0x843c
 8005276:	2330      	movs	r3, #48	; 0x30
 8005278:	f04f 0978 	mov.w	r9, #120	; 0x78
 800527c:	9509      	str	r5, [sp, #36]	; 0x24
 800527e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005282:	1d15      	adds	r5, r2, #4
 8005284:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8005288:	9513      	str	r5, [sp, #76]	; 0x4c
 800528a:	6814      	ldr	r4, [r2, #0]
 800528c:	f88d 9089 	strb.w	r9, [sp, #137]	; 0x89
 8005290:	2500      	movs	r5, #0
 8005292:	9018      	str	r0, [sp, #96]	; 0x60
 8005294:	2302      	movs	r3, #2
 8005296:	e4b1      	b.n	8004bfc <_svfprintf_r+0x20c>
 8005298:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800529a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800529e:	9509      	str	r5, [sp, #36]	; 0x24
 80052a0:	f893 9000 	ldrb.w	r9, [r3]
 80052a4:	e413      	b.n	8004ace <_svfprintf_r+0xde>
 80052a6:	f893 9000 	ldrb.w	r9, [r3]
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	f47f ac0f 	bne.w	8004ace <_svfprintf_r+0xde>
 80052b0:	2220      	movs	r2, #32
 80052b2:	e40c      	b.n	8004ace <_svfprintf_r+0xde>
 80052b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80052b6:	f045 0501 	orr.w	r5, r5, #1
 80052ba:	9509      	str	r5, [sp, #36]	; 0x24
 80052bc:	f893 9000 	ldrb.w	r9, [r3]
 80052c0:	e405      	b.n	8004ace <_svfprintf_r+0xde>
 80052c2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80052c4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80052c6:	6824      	ldr	r4, [r4, #0]
 80052c8:	2c00      	cmp	r4, #0
 80052ca:	9412      	str	r4, [sp, #72]	; 0x48
 80052cc:	f105 0104 	add.w	r1, r5, #4
 80052d0:	f6ff ac5e 	blt.w	8004b90 <_svfprintf_r+0x1a0>
 80052d4:	9113      	str	r1, [sp, #76]	; 0x4c
 80052d6:	f893 9000 	ldrb.w	r9, [r3]
 80052da:	f7ff bbf8 	b.w	8004ace <_svfprintf_r+0xde>
 80052de:	930b      	str	r3, [sp, #44]	; 0x2c
 80052e0:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
 80052e4:	f1b9 0f00 	cmp.w	r9, #0
 80052e8:	f43f ac65 	beq.w	8004bb6 <_svfprintf_r+0x1c6>
 80052ec:	2300      	movs	r3, #0
 80052ee:	2501      	movs	r5, #1
 80052f0:	469a      	mov	sl, r3
 80052f2:	950d      	str	r5, [sp, #52]	; 0x34
 80052f4:	f88d 90b0 	strb.w	r9, [sp, #176]	; 0xb0
 80052f8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
 80052fc:	930c      	str	r3, [sp, #48]	; 0x30
 80052fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005300:	950e      	str	r5, [sp, #56]	; 0x38
 8005302:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005306:	e4bd      	b.n	8004c84 <_svfprintf_r+0x294>
 8005308:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800530a:	e50b      	b.n	8004d24 <_svfprintf_r+0x334>
 800530c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800530e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005310:	aa29      	add	r2, sp, #164	; 0xa4
 8005312:	f002 fb4f 	bl	80079b4 <__ssprint_r>
 8005316:	2800      	cmp	r0, #0
 8005318:	f47f ac54 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 800531c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800531e:	ae36      	add	r6, sp, #216	; 0xd8
 8005320:	e512      	b.n	8004d48 <_svfprintf_r+0x358>
 8005322:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005326:	f340 80c2 	ble.w	80054ae <_svfprintf_r+0xabe>
 800532a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800532c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	f7fb fc47 	bl	8000bc4 <__aeabi_dcmpeq>
 8005336:	2800      	cmp	r0, #0
 8005338:	f000 8133 	beq.w	80055a2 <_svfprintf_r+0xbb2>
 800533c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800533e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005340:	3301      	adds	r3, #1
 8005342:	3401      	adds	r4, #1
 8005344:	2201      	movs	r2, #1
 8005346:	2b07      	cmp	r3, #7
 8005348:	6035      	str	r5, [r6, #0]
 800534a:	6072      	str	r2, [r6, #4]
 800534c:	942b      	str	r4, [sp, #172]	; 0xac
 800534e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005350:	bfd8      	it	le
 8005352:	3608      	addle	r6, #8
 8005354:	f300 831c 	bgt.w	8005990 <_svfprintf_r+0xfa0>
 8005358:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800535a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800535c:	42ab      	cmp	r3, r5
 800535e:	db03      	blt.n	8005368 <_svfprintf_r+0x978>
 8005360:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005362:	07eb      	lsls	r3, r5, #31
 8005364:	f57f ad62 	bpl.w	8004e2c <_svfprintf_r+0x43c>
 8005368:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800536a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800536c:	6035      	str	r5, [r6, #0]
 800536e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005370:	3301      	adds	r3, #1
 8005372:	442c      	add	r4, r5
 8005374:	2b07      	cmp	r3, #7
 8005376:	6075      	str	r5, [r6, #4]
 8005378:	942b      	str	r4, [sp, #172]	; 0xac
 800537a:	932a      	str	r3, [sp, #168]	; 0xa8
 800537c:	bfd8      	it	le
 800537e:	3608      	addle	r6, #8
 8005380:	f300 83c0 	bgt.w	8005b04 <_svfprintf_r+0x1114>
 8005384:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005386:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800538a:	f1b8 0f00 	cmp.w	r8, #0
 800538e:	f77f ad4d 	ble.w	8004e2c <_svfprintf_r+0x43c>
 8005392:	f1b8 0f10 	cmp.w	r8, #16
 8005396:	f248 4508 	movw	r5, #33800	; 0x8408
 800539a:	f340 8503 	ble.w	8005da4 <_svfprintf_r+0x13b4>
 800539e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80053a0:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80053a4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80053a8:	f6c0 0500 	movt	r5, #2048	; 0x800
 80053ac:	f04f 0910 	mov.w	r9, #16
 80053b0:	e005      	b.n	80053be <_svfprintf_r+0x9ce>
 80053b2:	f1a8 0810 	sub.w	r8, r8, #16
 80053b6:	f1b8 0f10 	cmp.w	r8, #16
 80053ba:	f340 80c0 	ble.w	800553e <_svfprintf_r+0xb4e>
 80053be:	3301      	adds	r3, #1
 80053c0:	3410      	adds	r4, #16
 80053c2:	2b07      	cmp	r3, #7
 80053c4:	e886 0280 	stmia.w	r6, {r7, r9}
 80053c8:	942b      	str	r4, [sp, #172]	; 0xac
 80053ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80053cc:	bfd8      	it	le
 80053ce:	3608      	addle	r6, #8
 80053d0:	ddef      	ble.n	80053b2 <_svfprintf_r+0x9c2>
 80053d2:	4650      	mov	r0, sl
 80053d4:	4659      	mov	r1, fp
 80053d6:	aa29      	add	r2, sp, #164	; 0xa4
 80053d8:	f002 faec 	bl	80079b4 <__ssprint_r>
 80053dc:	2800      	cmp	r0, #0
 80053de:	f47f abf1 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 80053e2:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80053e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80053e6:	ae36      	add	r6, sp, #216	; 0xd8
 80053e8:	e7e3      	b.n	80053b2 <_svfprintf_r+0x9c2>
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 80c5 	bne.w	800557a <_svfprintf_r+0xb8a>
 80053f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80053f2:	07e1      	lsls	r1, r4, #31
 80053f4:	bf5c      	itt	pl
 80053f6:	930e      	strpl	r3, [sp, #56]	; 0x38
 80053f8:	f10d 08d8 	addpl.w	r8, sp, #216	; 0xd8
 80053fc:	f57f ac34 	bpl.w	8004c68 <_svfprintf_r+0x278>
 8005400:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8005402:	2330      	movs	r3, #48	; 0x30
 8005404:	f88d 30d7 	strb.w	r3, [sp, #215]	; 0xd7
 8005408:	950e      	str	r5, [sp, #56]	; 0x38
 800540a:	f10d 08d7 	add.w	r8, sp, #215	; 0xd7
 800540e:	e42b      	b.n	8004c68 <_svfprintf_r+0x278>
 8005410:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005412:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005414:	ebc0 0a05 	rsb	sl, r0, r5
 8005418:	f1ba 0f00 	cmp.w	sl, #0
 800541c:	f77f aca9 	ble.w	8004d72 <_svfprintf_r+0x382>
 8005420:	f1ba 0f10 	cmp.w	sl, #16
 8005424:	f248 4508 	movw	r5, #33800	; 0x8408
 8005428:	bfdc      	itt	le
 800542a:	f6c0 0500 	movtle	r5, #2048	; 0x800
 800542e:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 8005430:	dd27      	ble.n	8005482 <_svfprintf_r+0xa92>
 8005432:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005436:	4622      	mov	r2, r4
 8005438:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800543a:	4654      	mov	r4, sl
 800543c:	f04f 0b10 	mov.w	fp, #16
 8005440:	46aa      	mov	sl, r5
 8005442:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005444:	e002      	b.n	800544c <_svfprintf_r+0xa5c>
 8005446:	3c10      	subs	r4, #16
 8005448:	2c10      	cmp	r4, #16
 800544a:	dd17      	ble.n	800547c <_svfprintf_r+0xa8c>
 800544c:	3301      	adds	r3, #1
 800544e:	3210      	adds	r2, #16
 8005450:	2b07      	cmp	r3, #7
 8005452:	e886 0880 	stmia.w	r6, {r7, fp}
 8005456:	922b      	str	r2, [sp, #172]	; 0xac
 8005458:	932a      	str	r3, [sp, #168]	; 0xa8
 800545a:	bfd8      	it	le
 800545c:	3608      	addle	r6, #8
 800545e:	ddf2      	ble.n	8005446 <_svfprintf_r+0xa56>
 8005460:	4628      	mov	r0, r5
 8005462:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005464:	aa29      	add	r2, sp, #164	; 0xa4
 8005466:	f002 faa5 	bl	80079b4 <__ssprint_r>
 800546a:	2800      	cmp	r0, #0
 800546c:	f47f abaa 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005470:	3c10      	subs	r4, #16
 8005472:	2c10      	cmp	r4, #16
 8005474:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005476:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005478:	ae36      	add	r6, sp, #216	; 0xd8
 800547a:	dce7      	bgt.n	800544c <_svfprintf_r+0xa5c>
 800547c:	4655      	mov	r5, sl
 800547e:	46a2      	mov	sl, r4
 8005480:	4614      	mov	r4, r2
 8005482:	3301      	adds	r3, #1
 8005484:	4454      	add	r4, sl
 8005486:	2b07      	cmp	r3, #7
 8005488:	e886 0420 	stmia.w	r6, {r5, sl}
 800548c:	942b      	str	r4, [sp, #172]	; 0xac
 800548e:	932a      	str	r3, [sp, #168]	; 0xa8
 8005490:	bfd8      	it	le
 8005492:	3608      	addle	r6, #8
 8005494:	f77f ac6d 	ble.w	8004d72 <_svfprintf_r+0x382>
 8005498:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800549a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800549c:	aa29      	add	r2, sp, #164	; 0xa4
 800549e:	f002 fa89 	bl	80079b4 <__ssprint_r>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	f47f ab8e 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 80054a8:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80054aa:	ae36      	add	r6, sp, #216	; 0xd8
 80054ac:	e461      	b.n	8004d72 <_svfprintf_r+0x382>
 80054ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054b0:	2d01      	cmp	r5, #1
 80054b2:	f340 81d8 	ble.w	8005866 <_svfprintf_r+0xe76>
 80054b6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80054b8:	f8c6 8000 	str.w	r8, [r6]
 80054bc:	3301      	adds	r3, #1
 80054be:	1c62      	adds	r2, r4, #1
 80054c0:	2101      	movs	r1, #1
 80054c2:	2b07      	cmp	r3, #7
 80054c4:	6071      	str	r1, [r6, #4]
 80054c6:	922b      	str	r2, [sp, #172]	; 0xac
 80054c8:	932a      	str	r3, [sp, #168]	; 0xa8
 80054ca:	bfd8      	it	le
 80054cc:	3608      	addle	r6, #8
 80054ce:	f300 81f5 	bgt.w	80058bc <_svfprintf_r+0xecc>
 80054d2:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80054d4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80054d6:	4422      	add	r2, r4
 80054d8:	6035      	str	r5, [r6, #0]
 80054da:	1c5c      	adds	r4, r3, #1
 80054dc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80054de:	922b      	str	r2, [sp, #172]	; 0xac
 80054e0:	2c07      	cmp	r4, #7
 80054e2:	942a      	str	r4, [sp, #168]	; 0xa8
 80054e4:	6075      	str	r5, [r6, #4]
 80054e6:	f300 81dc 	bgt.w	80058a2 <_svfprintf_r+0xeb2>
 80054ea:	3608      	adds	r6, #8
 80054ec:	4691      	mov	r9, r2
 80054ee:	981a      	ldr	r0, [sp, #104]	; 0x68
 80054f0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80054f2:	2200      	movs	r2, #0
 80054f4:	2300      	movs	r3, #0
 80054f6:	f7fb fb65 	bl	8000bc4 <__aeabi_dcmpeq>
 80054fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80054fc:	2800      	cmp	r0, #0
 80054fe:	f040 80c0 	bne.w	8005682 <_svfprintf_r+0xc92>
 8005502:	1e6b      	subs	r3, r5, #1
 8005504:	3401      	adds	r4, #1
 8005506:	f108 0101 	add.w	r1, r8, #1
 800550a:	eb03 0209 	add.w	r2, r3, r9
 800550e:	2c07      	cmp	r4, #7
 8005510:	6031      	str	r1, [r6, #0]
 8005512:	942a      	str	r4, [sp, #168]	; 0xa8
 8005514:	922b      	str	r2, [sp, #172]	; 0xac
 8005516:	6073      	str	r3, [r6, #4]
 8005518:	f300 81b6 	bgt.w	8005888 <_svfprintf_r+0xe98>
 800551c:	3608      	adds	r6, #8
 800551e:	4691      	mov	r9, r2
 8005520:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005522:	1c63      	adds	r3, r4, #1
 8005524:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8005526:	932a      	str	r3, [sp, #168]	; 0xa8
 8005528:	444a      	add	r2, r9
 800552a:	a925      	add	r1, sp, #148	; 0x94
 800552c:	2b07      	cmp	r3, #7
 800552e:	922b      	str	r2, [sp, #172]	; 0xac
 8005530:	e886 0012 	stmia.w	r6, {r1, r4}
 8005534:	dc0c      	bgt.n	8005550 <_svfprintf_r+0xb60>
 8005536:	3608      	adds	r6, #8
 8005538:	4614      	mov	r4, r2
 800553a:	e477      	b.n	8004e2c <_svfprintf_r+0x43c>
 800553c:	4614      	mov	r4, r2
 800553e:	3301      	adds	r3, #1
 8005540:	4444      	add	r4, r8
 8005542:	2b07      	cmp	r3, #7
 8005544:	942b      	str	r4, [sp, #172]	; 0xac
 8005546:	932a      	str	r3, [sp, #168]	; 0xa8
 8005548:	e886 0120 	stmia.w	r6, {r5, r8}
 800554c:	f77f ac6d 	ble.w	8004e2a <_svfprintf_r+0x43a>
 8005550:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005552:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005554:	aa29      	add	r2, sp, #164	; 0xa4
 8005556:	f002 fa2d 	bl	80079b4 <__ssprint_r>
 800555a:	2800      	cmp	r0, #0
 800555c:	f47f ab32 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005560:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005562:	ae36      	add	r6, sp, #216	; 0xd8
 8005564:	e462      	b.n	8004e2c <_svfprintf_r+0x43c>
 8005566:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005568:	990a      	ldr	r1, [sp, #40]	; 0x28
 800556a:	aa29      	add	r2, sp, #164	; 0xa4
 800556c:	f002 fa22 	bl	80079b4 <__ssprint_r>
 8005570:	2800      	cmp	r0, #0
 8005572:	f43f acb0 	beq.w	8004ed6 <_svfprintf_r+0x4e6>
 8005576:	f7ff bb25 	b.w	8004bc4 <_svfprintf_r+0x1d4>
 800557a:	920e      	str	r2, [sp, #56]	; 0x38
 800557c:	f10d 08d8 	add.w	r8, sp, #216	; 0xd8
 8005580:	f7ff bb72 	b.w	8004c68 <_svfprintf_r+0x278>
 8005584:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005586:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005588:	aa29      	add	r2, sp, #164	; 0xa4
 800558a:	f002 fa13 	bl	80079b4 <__ssprint_r>
 800558e:	2800      	cmp	r0, #0
 8005590:	f47f ab18 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005594:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005596:	ae36      	add	r6, sp, #216	; 0xd8
 8005598:	f7ff bbe7 	b.w	8004d6a <_svfprintf_r+0x37a>
 800559c:	2302      	movs	r3, #2
 800559e:	f7ff bb2d 	b.w	8004bfc <_svfprintf_r+0x20c>
 80055a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f340 81fe 	ble.w	80059a6 <_svfprintf_r+0xfb6>
 80055aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80055ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80055ae:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80055b2:	4285      	cmp	r5, r0
 80055b4:	bfa8      	it	ge
 80055b6:	4605      	movge	r5, r0
 80055b8:	2d00      	cmp	r5, #0
 80055ba:	44c3      	add	fp, r8
 80055bc:	dd0c      	ble.n	80055d8 <_svfprintf_r+0xbe8>
 80055be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80055c0:	f8c6 8000 	str.w	r8, [r6]
 80055c4:	3301      	adds	r3, #1
 80055c6:	442c      	add	r4, r5
 80055c8:	2b07      	cmp	r3, #7
 80055ca:	6075      	str	r5, [r6, #4]
 80055cc:	942b      	str	r4, [sp, #172]	; 0xac
 80055ce:	932a      	str	r3, [sp, #168]	; 0xa8
 80055d0:	bfd8      	it	le
 80055d2:	3608      	addle	r6, #8
 80055d4:	f300 834b 	bgt.w	8005c6e <_svfprintf_r+0x127e>
 80055d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80055da:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80055de:	ebc5 0901 	rsb	r9, r5, r1
 80055e2:	f1b9 0f00 	cmp.w	r9, #0
 80055e6:	f340 80d1 	ble.w	800578c <_svfprintf_r+0xd9c>
 80055ea:	f1b9 0f10 	cmp.w	r9, #16
 80055ee:	f248 4508 	movw	r5, #33800	; 0x8408
 80055f2:	bfdc      	itt	le
 80055f4:	f6c0 0500 	movtle	r5, #2048	; 0x800
 80055f8:	9b2a      	ldrle	r3, [sp, #168]	; 0xa8
 80055fa:	f340 80b3 	ble.w	8005764 <_svfprintf_r+0xd74>
 80055fe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005602:	4622      	mov	r2, r4
 8005604:	950c      	str	r5, [sp, #48]	; 0x30
 8005606:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005608:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800560a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800560c:	f04f 0a10 	mov.w	sl, #16
 8005610:	e005      	b.n	800561e <_svfprintf_r+0xc2e>
 8005612:	f1a9 0910 	sub.w	r9, r9, #16
 8005616:	f1b9 0f10 	cmp.w	r9, #16
 800561a:	f340 80a1 	ble.w	8005760 <_svfprintf_r+0xd70>
 800561e:	3301      	adds	r3, #1
 8005620:	3210      	adds	r2, #16
 8005622:	2b07      	cmp	r3, #7
 8005624:	e886 0480 	stmia.w	r6, {r7, sl}
 8005628:	922b      	str	r2, [sp, #172]	; 0xac
 800562a:	932a      	str	r3, [sp, #168]	; 0xa8
 800562c:	bfd8      	it	le
 800562e:	3608      	addle	r6, #8
 8005630:	ddef      	ble.n	8005612 <_svfprintf_r+0xc22>
 8005632:	4620      	mov	r0, r4
 8005634:	4629      	mov	r1, r5
 8005636:	aa29      	add	r2, sp, #164	; 0xa4
 8005638:	f002 f9bc 	bl	80079b4 <__ssprint_r>
 800563c:	2800      	cmp	r0, #0
 800563e:	f47f aac1 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005642:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8005644:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005646:	ae36      	add	r6, sp, #216	; 0xd8
 8005648:	e7e3      	b.n	8005612 <_svfprintf_r+0xc22>
 800564a:	2d00      	cmp	r5, #0
 800564c:	bf08      	it	eq
 800564e:	2c0a      	cmpeq	r4, #10
 8005650:	f080 8140 	bcs.w	80058d4 <_svfprintf_r+0xee4>
 8005654:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8005656:	3430      	adds	r4, #48	; 0x30
 8005658:	f88d 40d7 	strb.w	r4, [sp, #215]	; 0xd7
 800565c:	950e      	str	r5, [sp, #56]	; 0x38
 800565e:	f10d 08d7 	add.w	r8, sp, #215	; 0xd7
 8005662:	f7ff bb01 	b.w	8004c68 <_svfprintf_r+0x278>
 8005666:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005668:	990a      	ldr	r1, [sp, #40]	; 0x28
 800566a:	aa29      	add	r2, sp, #164	; 0xa4
 800566c:	f002 f9a2 	bl	80079b4 <__ssprint_r>
 8005670:	2800      	cmp	r0, #0
 8005672:	f47f aaa7 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005676:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 800567a:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800567c:	ae36      	add	r6, sp, #216	; 0xd8
 800567e:	f7ff bb51 	b.w	8004d24 <_svfprintf_r+0x334>
 8005682:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8005686:	f1b8 0f00 	cmp.w	r8, #0
 800568a:	f77f af49 	ble.w	8005520 <_svfprintf_r+0xb30>
 800568e:	f248 4508 	movw	r5, #33800	; 0x8408
 8005692:	f1b8 0f10 	cmp.w	r8, #16
 8005696:	f6c0 0500 	movt	r5, #2048	; 0x800
 800569a:	dd28      	ble.n	80056ee <_svfprintf_r+0xcfe>
 800569c:	464b      	mov	r3, r9
 800569e:	f04f 0a10 	mov.w	sl, #16
 80056a2:	46a9      	mov	r9, r5
 80056a4:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80056a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80056aa:	e004      	b.n	80056b6 <_svfprintf_r+0xcc6>
 80056ac:	f1a8 0810 	sub.w	r8, r8, #16
 80056b0:	f1b8 0f10 	cmp.w	r8, #16
 80056b4:	dd19      	ble.n	80056ea <_svfprintf_r+0xcfa>
 80056b6:	3401      	adds	r4, #1
 80056b8:	3310      	adds	r3, #16
 80056ba:	2c07      	cmp	r4, #7
 80056bc:	e886 0480 	stmia.w	r6, {r7, sl}
 80056c0:	932b      	str	r3, [sp, #172]	; 0xac
 80056c2:	942a      	str	r4, [sp, #168]	; 0xa8
 80056c4:	bfd8      	it	le
 80056c6:	3608      	addle	r6, #8
 80056c8:	ddf0      	ble.n	80056ac <_svfprintf_r+0xcbc>
 80056ca:	4658      	mov	r0, fp
 80056cc:	4629      	mov	r1, r5
 80056ce:	aa29      	add	r2, sp, #164	; 0xa4
 80056d0:	f002 f970 	bl	80079b4 <__ssprint_r>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f47f aa75 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 80056da:	f1a8 0810 	sub.w	r8, r8, #16
 80056de:	f1b8 0f10 	cmp.w	r8, #16
 80056e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80056e4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80056e6:	ae36      	add	r6, sp, #216	; 0xd8
 80056e8:	dce5      	bgt.n	80056b6 <_svfprintf_r+0xcc6>
 80056ea:	464d      	mov	r5, r9
 80056ec:	4699      	mov	r9, r3
 80056ee:	3401      	adds	r4, #1
 80056f0:	eb08 0309 	add.w	r3, r8, r9
 80056f4:	2c07      	cmp	r4, #7
 80056f6:	932b      	str	r3, [sp, #172]	; 0xac
 80056f8:	942a      	str	r4, [sp, #168]	; 0xa8
 80056fa:	e886 0120 	stmia.w	r6, {r5, r8}
 80056fe:	f300 80c3 	bgt.w	8005888 <_svfprintf_r+0xe98>
 8005702:	3608      	adds	r6, #8
 8005704:	4699      	mov	r9, r3
 8005706:	e70b      	b.n	8005520 <_svfprintf_r+0xb30>
 8005708:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800570a:	682c      	ldr	r4, [r5, #0]
 800570c:	3504      	adds	r5, #4
 800570e:	9513      	str	r5, [sp, #76]	; 0x4c
 8005710:	2301      	movs	r3, #1
 8005712:	2500      	movs	r5, #0
 8005714:	f7ff ba72 	b.w	8004bfc <_svfprintf_r+0x20c>
 8005718:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 800571a:	682c      	ldr	r4, [r5, #0]
 800571c:	3504      	adds	r5, #4
 800571e:	9513      	str	r5, [sp, #76]	; 0x4c
 8005720:	2500      	movs	r5, #0
 8005722:	e4ec      	b.n	80050fe <_svfprintf_r+0x70e>
 8005724:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005726:	682c      	ldr	r4, [r5, #0]
 8005728:	3504      	adds	r5, #4
 800572a:	9513      	str	r5, [sp, #76]	; 0x4c
 800572c:	2500      	movs	r5, #0
 800572e:	f7ff ba65 	b.w	8004bfc <_svfprintf_r+0x20c>
 8005732:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005734:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005736:	682c      	ldr	r4, [r5, #0]
 8005738:	17e5      	asrs	r5, r4, #31
 800573a:	4622      	mov	r2, r4
 800573c:	462b      	mov	r3, r5
 800573e:	3004      	adds	r0, #4
 8005740:	2a00      	cmp	r2, #0
 8005742:	f173 0100 	sbcs.w	r1, r3, #0
 8005746:	9013      	str	r0, [sp, #76]	; 0x4c
 8005748:	f6bf ac31 	bge.w	8004fae <_svfprintf_r+0x5be>
 800574c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005750:	4264      	negs	r4, r4
 8005752:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8005756:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 800575a:	2301      	movs	r3, #1
 800575c:	f7ff ba52 	b.w	8004c04 <_svfprintf_r+0x214>
 8005760:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005762:	4614      	mov	r4, r2
 8005764:	3301      	adds	r3, #1
 8005766:	444c      	add	r4, r9
 8005768:	2b07      	cmp	r3, #7
 800576a:	e886 0220 	stmia.w	r6, {r5, r9}
 800576e:	942b      	str	r4, [sp, #172]	; 0xac
 8005770:	932a      	str	r3, [sp, #168]	; 0xa8
 8005772:	bfd8      	it	le
 8005774:	3608      	addle	r6, #8
 8005776:	dd09      	ble.n	800578c <_svfprintf_r+0xd9c>
 8005778:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800577a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800577c:	aa29      	add	r2, sp, #164	; 0xa4
 800577e:	f002 f919 	bl	80079b4 <__ssprint_r>
 8005782:	2800      	cmp	r0, #0
 8005784:	f47f aa1e 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005788:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800578a:	ae36      	add	r6, sp, #216	; 0xd8
 800578c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800578e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005790:	44a8      	add	r8, r5
 8005792:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005794:	42ab      	cmp	r3, r5
 8005796:	db4d      	blt.n	8005834 <_svfprintf_r+0xe44>
 8005798:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800579a:	07e9      	lsls	r1, r5, #31
 800579c:	d44a      	bmi.n	8005834 <_svfprintf_r+0xe44>
 800579e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80057a0:	ebc8 050b 	rsb	r5, r8, fp
 80057a4:	1ac3      	subs	r3, r0, r3
 80057a6:	42ab      	cmp	r3, r5
 80057a8:	bfb8      	it	lt
 80057aa:	461d      	movlt	r5, r3
 80057ac:	2d00      	cmp	r5, #0
 80057ae:	dd0c      	ble.n	80057ca <_svfprintf_r+0xdda>
 80057b0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80057b2:	f8c6 8000 	str.w	r8, [r6]
 80057b6:	3201      	adds	r2, #1
 80057b8:	442c      	add	r4, r5
 80057ba:	2a07      	cmp	r2, #7
 80057bc:	6075      	str	r5, [r6, #4]
 80057be:	942b      	str	r4, [sp, #172]	; 0xac
 80057c0:	922a      	str	r2, [sp, #168]	; 0xa8
 80057c2:	bfd8      	it	le
 80057c4:	3608      	addle	r6, #8
 80057c6:	f300 825d 	bgt.w	8005c84 <_svfprintf_r+0x1294>
 80057ca:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80057ce:	ebc5 0803 	rsb	r8, r5, r3
 80057d2:	f1b8 0f00 	cmp.w	r8, #0
 80057d6:	f77f ab29 	ble.w	8004e2c <_svfprintf_r+0x43c>
 80057da:	f1b8 0f10 	cmp.w	r8, #16
 80057de:	f248 4508 	movw	r5, #33800	; 0x8408
 80057e2:	f340 82df 	ble.w	8005da4 <_svfprintf_r+0x13b4>
 80057e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80057e8:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80057ec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80057f0:	f6c0 0500 	movt	r5, #2048	; 0x800
 80057f4:	f04f 0910 	mov.w	r9, #16
 80057f8:	4622      	mov	r2, r4
 80057fa:	e005      	b.n	8005808 <_svfprintf_r+0xe18>
 80057fc:	f1a8 0810 	sub.w	r8, r8, #16
 8005800:	f1b8 0f10 	cmp.w	r8, #16
 8005804:	f77f ae9a 	ble.w	800553c <_svfprintf_r+0xb4c>
 8005808:	3301      	adds	r3, #1
 800580a:	3210      	adds	r2, #16
 800580c:	2b07      	cmp	r3, #7
 800580e:	e886 0280 	stmia.w	r6, {r7, r9}
 8005812:	922b      	str	r2, [sp, #172]	; 0xac
 8005814:	932a      	str	r3, [sp, #168]	; 0xa8
 8005816:	bfd8      	it	le
 8005818:	3608      	addle	r6, #8
 800581a:	ddef      	ble.n	80057fc <_svfprintf_r+0xe0c>
 800581c:	4650      	mov	r0, sl
 800581e:	4659      	mov	r1, fp
 8005820:	aa29      	add	r2, sp, #164	; 0xa4
 8005822:	f002 f8c7 	bl	80079b4 <__ssprint_r>
 8005826:	2800      	cmp	r0, #0
 8005828:	f47f a9cc 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 800582c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800582e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005830:	ae36      	add	r6, sp, #216	; 0xd8
 8005832:	e7e3      	b.n	80057fc <_svfprintf_r+0xe0c>
 8005834:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005836:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005838:	6035      	str	r5, [r6, #0]
 800583a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800583c:	3201      	adds	r2, #1
 800583e:	442c      	add	r4, r5
 8005840:	2a07      	cmp	r2, #7
 8005842:	6075      	str	r5, [r6, #4]
 8005844:	942b      	str	r4, [sp, #172]	; 0xac
 8005846:	922a      	str	r2, [sp, #168]	; 0xa8
 8005848:	bfd8      	it	le
 800584a:	3608      	addle	r6, #8
 800584c:	dda7      	ble.n	800579e <_svfprintf_r+0xdae>
 800584e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005850:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005852:	aa29      	add	r2, sp, #164	; 0xa4
 8005854:	f002 f8ae 	bl	80079b4 <__ssprint_r>
 8005858:	2800      	cmp	r0, #0
 800585a:	f47f a9b3 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 800585e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005860:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005862:	ae36      	add	r6, sp, #216	; 0xd8
 8005864:	e79b      	b.n	800579e <_svfprintf_r+0xdae>
 8005866:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005868:	07ea      	lsls	r2, r5, #31
 800586a:	f53f ae24 	bmi.w	80054b6 <_svfprintf_r+0xac6>
 800586e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005870:	f8c6 8000 	str.w	r8, [r6]
 8005874:	1c63      	adds	r3, r4, #1
 8005876:	1c54      	adds	r4, r2, #1
 8005878:	2c07      	cmp	r4, #7
 800587a:	f04f 0201 	mov.w	r2, #1
 800587e:	932b      	str	r3, [sp, #172]	; 0xac
 8005880:	942a      	str	r4, [sp, #168]	; 0xa8
 8005882:	6072      	str	r2, [r6, #4]
 8005884:	f77f af3d 	ble.w	8005702 <_svfprintf_r+0xd12>
 8005888:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800588a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800588c:	aa29      	add	r2, sp, #164	; 0xa4
 800588e:	f002 f891 	bl	80079b4 <__ssprint_r>
 8005892:	2800      	cmp	r0, #0
 8005894:	f47f a996 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005898:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 800589c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800589e:	ae36      	add	r6, sp, #216	; 0xd8
 80058a0:	e63e      	b.n	8005520 <_svfprintf_r+0xb30>
 80058a2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80058a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058a6:	aa29      	add	r2, sp, #164	; 0xa4
 80058a8:	f002 f884 	bl	80079b4 <__ssprint_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f47f a989 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 80058b2:	f8dd 90ac 	ldr.w	r9, [sp, #172]	; 0xac
 80058b6:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 80058b8:	ae36      	add	r6, sp, #216	; 0xd8
 80058ba:	e618      	b.n	80054ee <_svfprintf_r+0xafe>
 80058bc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80058be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058c0:	aa29      	add	r2, sp, #164	; 0xa4
 80058c2:	f002 f877 	bl	80079b4 <__ssprint_r>
 80058c6:	2800      	cmp	r0, #0
 80058c8:	f47f a97c 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 80058cc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80058ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80058d0:	ae36      	add	r6, sp, #216	; 0xd8
 80058d2:	e5fe      	b.n	80054d2 <_svfprintf_r+0xae2>
 80058d4:	f10d 0bd7 	add.w	fp, sp, #215	; 0xd7
 80058d8:	4620      	mov	r0, r4
 80058da:	4629      	mov	r1, r5
 80058dc:	220a      	movs	r2, #10
 80058de:	2300      	movs	r3, #0
 80058e0:	f7fb f9ca 	bl	8000c78 <__aeabi_uldivmod>
 80058e4:	3230      	adds	r2, #48	; 0x30
 80058e6:	f88b 2000 	strb.w	r2, [fp]
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	220a      	movs	r2, #10
 80058f0:	2300      	movs	r3, #0
 80058f2:	f7fb f9c1 	bl	8000c78 <__aeabi_uldivmod>
 80058f6:	4604      	mov	r4, r0
 80058f8:	460d      	mov	r5, r1
 80058fa:	ea54 0005 	orrs.w	r0, r4, r5
 80058fe:	46d8      	mov	r8, fp
 8005900:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005904:	d1e8      	bne.n	80058d8 <_svfprintf_r+0xee8>
 8005906:	f7ff b9ab 	b.w	8004c60 <_svfprintf_r+0x270>
 800590a:	2b30      	cmp	r3, #48	; 0x30
 800590c:	f43f a9a8 	beq.w	8004c60 <_svfprintf_r+0x270>
 8005910:	9c08      	ldr	r4, [sp, #32]
 8005912:	2330      	movs	r3, #48	; 0x30
 8005914:	1aa4      	subs	r4, r4, r2
 8005916:	4690      	mov	r8, r2
 8005918:	940e      	str	r4, [sp, #56]	; 0x38
 800591a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800591e:	f7ff b9a3 	b.w	8004c68 <_svfprintf_r+0x278>
 8005922:	f002 f81f 	bl	8007964 <__fpclassifyd>
 8005926:	2800      	cmp	r0, #0
 8005928:	f040 808d 	bne.w	8005a46 <_svfprintf_r+0x1056>
 800592c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800592e:	900c      	str	r0, [sp, #48]	; 0x30
 8005930:	f248 4824 	movw	r8, #33828	; 0x8424
 8005934:	f248 4320 	movw	r3, #33824	; 0x8420
 8005938:	2403      	movs	r4, #3
 800593a:	f6c0 0800 	movt	r8, #2048	; 0x800
 800593e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005942:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005946:	940d      	str	r4, [sp, #52]	; 0x34
 8005948:	9509      	str	r5, [sp, #36]	; 0x24
 800594a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800594e:	bfd8      	it	le
 8005950:	4698      	movle	r8, r3
 8005952:	9017      	str	r0, [sp, #92]	; 0x5c
 8005954:	940e      	str	r4, [sp, #56]	; 0x38
 8005956:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 800595a:	f7ff b98d 	b.w	8004c78 <_svfprintf_r+0x288>
 800595e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005960:	1de3      	adds	r3, r4, #7
 8005962:	f023 0307 	bic.w	r3, r3, #7
 8005966:	f103 0508 	add.w	r5, r3, #8
 800596a:	681c      	ldr	r4, [r3, #0]
 800596c:	9513      	str	r5, [sp, #76]	; 0x4c
 800596e:	941a      	str	r4, [sp, #104]	; 0x68
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	931b      	str	r3, [sp, #108]	; 0x6c
 8005974:	f7ff bb50 	b.w	8005018 <_svfprintf_r+0x628>
 8005978:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800597a:	06e2      	lsls	r2, r4, #27
 800597c:	f140 80b4 	bpl.w	8005ae8 <_svfprintf_r+0x10f8>
 8005980:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005982:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	3504      	adds	r5, #4
 8005988:	9513      	str	r5, [sp, #76]	; 0x4c
 800598a:	601c      	str	r4, [r3, #0]
 800598c:	f7ff b86b 	b.w	8004a66 <_svfprintf_r+0x76>
 8005990:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005992:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005994:	aa29      	add	r2, sp, #164	; 0xa4
 8005996:	f002 f80d 	bl	80079b4 <__ssprint_r>
 800599a:	2800      	cmp	r0, #0
 800599c:	f47f a912 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 80059a0:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80059a2:	ae36      	add	r6, sp, #216	; 0xd8
 80059a4:	e4d8      	b.n	8005358 <_svfprintf_r+0x968>
 80059a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80059a8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80059aa:	3201      	adds	r2, #1
 80059ac:	3401      	adds	r4, #1
 80059ae:	2101      	movs	r1, #1
 80059b0:	2a07      	cmp	r2, #7
 80059b2:	6035      	str	r5, [r6, #0]
 80059b4:	942b      	str	r4, [sp, #172]	; 0xac
 80059b6:	922a      	str	r2, [sp, #168]	; 0xa8
 80059b8:	6071      	str	r1, [r6, #4]
 80059ba:	f300 8113 	bgt.w	8005be4 <_svfprintf_r+0x11f4>
 80059be:	3608      	adds	r6, #8
 80059c0:	4618      	mov	r0, r3
 80059c2:	b928      	cbnz	r0, 80059d0 <_svfprintf_r+0xfe0>
 80059c4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80059c6:	b91d      	cbnz	r5, 80059d0 <_svfprintf_r+0xfe0>
 80059c8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80059ca:	07ed      	lsls	r5, r5, #31
 80059cc:	f57f aa2e 	bpl.w	8004e2c <_svfprintf_r+0x43c>
 80059d0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80059d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80059d4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80059d6:	4421      	add	r1, r4
 80059d8:	3301      	adds	r3, #1
 80059da:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80059dc:	6035      	str	r5, [r6, #0]
 80059de:	2b07      	cmp	r3, #7
 80059e0:	912b      	str	r1, [sp, #172]	; 0xac
 80059e2:	6074      	str	r4, [r6, #4]
 80059e4:	932a      	str	r3, [sp, #168]	; 0xa8
 80059e6:	bfd8      	it	le
 80059e8:	f106 0208 	addle.w	r2, r6, #8
 80059ec:	f300 81bd 	bgt.w	8005d6a <_svfprintf_r+0x137a>
 80059f0:	4244      	negs	r4, r0
 80059f2:	2c00      	cmp	r4, #0
 80059f4:	f340 8117 	ble.w	8005c26 <_svfprintf_r+0x1236>
 80059f8:	f248 4508 	movw	r5, #33800	; 0x8408
 80059fc:	2c10      	cmp	r4, #16
 80059fe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005a02:	f340 80fb 	ble.w	8005bfc <_svfprintf_r+0x120c>
 8005a06:	2610      	movs	r6, #16
 8005a08:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8005a0c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005a10:	e003      	b.n	8005a1a <_svfprintf_r+0x102a>
 8005a12:	3c10      	subs	r4, #16
 8005a14:	2c10      	cmp	r4, #16
 8005a16:	f340 80f1 	ble.w	8005bfc <_svfprintf_r+0x120c>
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	3110      	adds	r1, #16
 8005a1e:	2b07      	cmp	r3, #7
 8005a20:	6017      	str	r7, [r2, #0]
 8005a22:	6056      	str	r6, [r2, #4]
 8005a24:	912b      	str	r1, [sp, #172]	; 0xac
 8005a26:	932a      	str	r3, [sp, #168]	; 0xa8
 8005a28:	bfd8      	it	le
 8005a2a:	3208      	addle	r2, #8
 8005a2c:	ddf1      	ble.n	8005a12 <_svfprintf_r+0x1022>
 8005a2e:	4648      	mov	r0, r9
 8005a30:	4651      	mov	r1, sl
 8005a32:	aa29      	add	r2, sp, #164	; 0xa4
 8005a34:	f001 ffbe 	bl	80079b4 <__ssprint_r>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f47f a8c3 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005a3e:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005a40:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005a42:	aa36      	add	r2, sp, #216	; 0xd8
 8005a44:	e7e5      	b.n	8005a12 <_svfprintf_r+0x1022>
 8005a46:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a48:	3401      	adds	r4, #1
 8005a4a:	bf08      	it	eq
 8005a4c:	2406      	moveq	r4, #6
 8005a4e:	f029 0520 	bic.w	r5, r9, #32
 8005a52:	bf08      	it	eq
 8005a54:	940c      	streq	r4, [sp, #48]	; 0x30
 8005a56:	d006      	beq.n	8005a66 <_svfprintf_r+0x1076>
 8005a58:	2d47      	cmp	r5, #71	; 0x47
 8005a5a:	d104      	bne.n	8005a66 <_svfprintf_r+0x1076>
 8005a5c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a5e:	2c00      	cmp	r4, #0
 8005a60:	bf08      	it	eq
 8005a62:	2401      	moveq	r4, #1
 8005a64:	940c      	str	r4, [sp, #48]	; 0x30
 8005a66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005a68:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8005a70:	9414      	str	r4, [sp, #80]	; 0x50
 8005a72:	bfbd      	ittte	lt
 8005a74:	461c      	movlt	r4, r3
 8005a76:	f104 4a00 	addlt.w	sl, r4, #2147483648	; 0x80000000
 8005a7a:	f04f 0b2d 	movlt.w	fp, #45	; 0x2d
 8005a7e:	f8dd a06c 	ldrge.w	sl, [sp, #108]	; 0x6c
 8005a82:	bfa8      	it	ge
 8005a84:	f04f 0b00 	movge.w	fp, #0
 8005a88:	f1b5 0046 	subs.w	r0, r5, #70	; 0x46
 8005a8c:	f1d0 0c00 	rsbs	ip, r0, #0
 8005a90:	eb5c 0c00 	adcs.w	ip, ip, r0
 8005a94:	f1bc 0f00 	cmp.w	ip, #0
 8005a98:	d04d      	beq.n	8005b36 <_svfprintf_r+0x1146>
 8005a9a:	2103      	movs	r1, #3
 8005a9c:	a823      	add	r0, sp, #140	; 0x8c
 8005a9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005aa0:	9100      	str	r1, [sp, #0]
 8005aa2:	9002      	str	r0, [sp, #8]
 8005aa4:	a924      	add	r1, sp, #144	; 0x90
 8005aa6:	a827      	add	r0, sp, #156	; 0x9c
 8005aa8:	9004      	str	r0, [sp, #16]
 8005aaa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005aac:	9401      	str	r4, [sp, #4]
 8005aae:	4653      	mov	r3, sl
 8005ab0:	9103      	str	r1, [sp, #12]
 8005ab2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005ab4:	f8cd c018 	str.w	ip, [sp, #24]
 8005ab8:	f000 fb26 	bl	8006108 <_dtoa_r>
 8005abc:	2d47      	cmp	r5, #71	; 0x47
 8005abe:	4680      	mov	r8, r0
 8005ac0:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005ac4:	d103      	bne.n	8005ace <_svfprintf_r+0x10de>
 8005ac6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005ac8:	07e1      	lsls	r1, r4, #31
 8005aca:	f140 810f 	bpl.w	8005cec <_svfprintf_r+0x12fc>
 8005ace:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005ad0:	4444      	add	r4, r8
 8005ad2:	f1bc 0f00 	cmp.w	ip, #0
 8005ad6:	d043      	beq.n	8005b60 <_svfprintf_r+0x1170>
 8005ad8:	f898 3000 	ldrb.w	r3, [r8]
 8005adc:	2b30      	cmp	r3, #48	; 0x30
 8005ade:	f000 81a5 	beq.w	8005e2c <_svfprintf_r+0x143c>
 8005ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ae4:	441c      	add	r4, r3
 8005ae6:	e03b      	b.n	8005b60 <_svfprintf_r+0x1170>
 8005ae8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005aea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005af2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8005af4:	f104 0404 	add.w	r4, r4, #4
 8005af8:	9413      	str	r4, [sp, #76]	; 0x4c
 8005afa:	bf14      	ite	ne
 8005afc:	801d      	strhne	r5, [r3, #0]
 8005afe:	601d      	streq	r5, [r3, #0]
 8005b00:	f7fe bfb1 	b.w	8004a66 <_svfprintf_r+0x76>
 8005b04:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b06:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b08:	aa29      	add	r2, sp, #164	; 0xa4
 8005b0a:	f001 ff53 	bl	80079b4 <__ssprint_r>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f47f a858 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005b14:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005b16:	ae36      	add	r6, sp, #216	; 0xd8
 8005b18:	e434      	b.n	8005384 <_svfprintf_r+0x994>
 8005b1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b1c:	2140      	movs	r1, #64	; 0x40
 8005b1e:	f7fe fc07 	bl	8004330 <_malloc_r>
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	6120      	str	r0, [r4, #16]
 8005b26:	2800      	cmp	r0, #0
 8005b28:	f000 81c7 	beq.w	8005eba <_svfprintf_r+0x14ca>
 8005b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005b2e:	2340      	movs	r3, #64	; 0x40
 8005b30:	6163      	str	r3, [r4, #20]
 8005b32:	f7fe bf73 	b.w	8004a1c <_svfprintf_r+0x2c>
 8005b36:	2d45      	cmp	r5, #69	; 0x45
 8005b38:	f040 8132 	bne.w	8005da0 <_svfprintf_r+0x13b0>
 8005b3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005b40:	1c44      	adds	r4, r0, #1
 8005b42:	a923      	add	r1, sp, #140	; 0x8c
 8005b44:	2002      	movs	r0, #2
 8005b46:	e88d 0011 	stmia.w	sp, {r0, r4}
 8005b4a:	9102      	str	r1, [sp, #8]
 8005b4c:	a824      	add	r0, sp, #144	; 0x90
 8005b4e:	a927      	add	r1, sp, #156	; 0x9c
 8005b50:	9003      	str	r0, [sp, #12]
 8005b52:	4653      	mov	r3, sl
 8005b54:	9104      	str	r1, [sp, #16]
 8005b56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b58:	f000 fad6 	bl	8006108 <_dtoa_r>
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	4404      	add	r4, r0
 8005b60:	2300      	movs	r3, #0
 8005b62:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005b64:	4651      	mov	r1, sl
 8005b66:	2200      	movs	r2, #0
 8005b68:	f7fb f82c 	bl	8000bc4 <__aeabi_dcmpeq>
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	b948      	cbnz	r0, 8005b84 <_svfprintf_r+0x1194>
 8005b70:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b72:	429c      	cmp	r4, r3
 8005b74:	d906      	bls.n	8005b84 <_svfprintf_r+0x1194>
 8005b76:	2130      	movs	r1, #48	; 0x30
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	9227      	str	r2, [sp, #156]	; 0x9c
 8005b7c:	7019      	strb	r1, [r3, #0]
 8005b7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b80:	429c      	cmp	r4, r3
 8005b82:	d8f9      	bhi.n	8005b78 <_svfprintf_r+0x1188>
 8005b84:	ebc8 0303 	rsb	r3, r8, r3
 8005b88:	2d47      	cmp	r5, #71	; 0x47
 8005b8a:	9310      	str	r3, [sp, #64]	; 0x40
 8005b8c:	f000 80b1 	beq.w	8005cf2 <_svfprintf_r+0x1302>
 8005b90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b94:	f340 818c 	ble.w	8005eb0 <_svfprintf_r+0x14c0>
 8005b98:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005b9c:	f000 8107 	beq.w	8005dae <_svfprintf_r+0x13be>
 8005ba0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 8005ba2:	9517      	str	r5, [sp, #92]	; 0x5c
 8005ba4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005ba6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005ba8:	42ac      	cmp	r4, r5
 8005baa:	f2c0 80eb 	blt.w	8005d84 <_svfprintf_r+0x1394>
 8005bae:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005bb0:	07e0      	lsls	r0, r4, #31
 8005bb2:	bf49      	itett	mi
 8005bb4:	9b17      	ldrmi	r3, [sp, #92]	; 0x5c
 8005bb6:	9d17      	ldrpl	r5, [sp, #92]	; 0x5c
 8005bb8:	3301      	addmi	r3, #1
 8005bba:	930e      	strmi	r3, [sp, #56]	; 0x38
 8005bbc:	bf5a      	itte	pl
 8005bbe:	ea25 73e5 	bicpl.w	r3, r5, r5, asr #31
 8005bc2:	950e      	strpl	r5, [sp, #56]	; 0x38
 8005bc4:	ea23 73e3 	bicmi.w	r3, r3, r3, asr #31
 8005bc8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005bcc:	f1bb 0f00 	cmp.w	fp, #0
 8005bd0:	d17b      	bne.n	8005cca <_svfprintf_r+0x12da>
 8005bd2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8005bd4:	930d      	str	r3, [sp, #52]	; 0x34
 8005bd6:	9409      	str	r4, [sp, #36]	; 0x24
 8005bd8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8005bdc:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8005be0:	f7ff b84a 	b.w	8004c78 <_svfprintf_r+0x288>
 8005be4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005be6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005be8:	aa29      	add	r2, sp, #164	; 0xa4
 8005bea:	f001 fee3 	bl	80079b4 <__ssprint_r>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f47e afe8 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005bf4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005bf6:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005bf8:	ae36      	add	r6, sp, #216	; 0xd8
 8005bfa:	e6e2      	b.n	80059c2 <_svfprintf_r+0xfd2>
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	4421      	add	r1, r4
 8005c00:	2b07      	cmp	r3, #7
 8005c02:	6015      	str	r5, [r2, #0]
 8005c04:	6054      	str	r4, [r2, #4]
 8005c06:	912b      	str	r1, [sp, #172]	; 0xac
 8005c08:	932a      	str	r3, [sp, #168]	; 0xa8
 8005c0a:	bfd8      	it	le
 8005c0c:	3208      	addle	r2, #8
 8005c0e:	dd0a      	ble.n	8005c26 <_svfprintf_r+0x1236>
 8005c10:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c12:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c14:	aa29      	add	r2, sp, #164	; 0xa4
 8005c16:	f001 fecd 	bl	80079b4 <__ssprint_r>
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	f47e afd2 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005c20:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005c22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005c24:	aa36      	add	r2, sp, #216	; 0xd8
 8005c26:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c28:	f8c2 8000 	str.w	r8, [r2]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	4429      	add	r1, r5
 8005c30:	2b07      	cmp	r3, #7
 8005c32:	912b      	str	r1, [sp, #172]	; 0xac
 8005c34:	932a      	str	r3, [sp, #168]	; 0xa8
 8005c36:	6055      	str	r5, [r2, #4]
 8005c38:	f73f ac8a 	bgt.w	8005550 <_svfprintf_r+0xb60>
 8005c3c:	f102 0608 	add.w	r6, r2, #8
 8005c40:	460c      	mov	r4, r1
 8005c42:	f7ff b8f3 	b.w	8004e2c <_svfprintf_r+0x43c>
 8005c46:	950c      	str	r5, [sp, #48]	; 0x30
 8005c48:	f7fe fe6e 	bl	8004928 <strlen>
 8005c4c:	9413      	str	r4, [sp, #76]	; 0x4c
 8005c4e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005c50:	900e      	str	r0, [sp, #56]	; 0x38
 8005c52:	ea20 75e0 	bic.w	r5, r0, r0, asr #31
 8005c56:	950d      	str	r5, [sp, #52]	; 0x34
 8005c58:	9417      	str	r4, [sp, #92]	; 0x5c
 8005c5a:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8005c5e:	f7ff b80b 	b.w	8004c78 <_svfprintf_r+0x288>
 8005c62:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8005c66:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005c68:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8005c6a:	f7ff b84d 	b.w	8004d08 <_svfprintf_r+0x318>
 8005c6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c72:	aa29      	add	r2, sp, #164	; 0xa4
 8005c74:	f001 fe9e 	bl	80079b4 <__ssprint_r>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	f47e afa3 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005c7e:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005c80:	ae36      	add	r6, sp, #216	; 0xd8
 8005c82:	e4a9      	b.n	80055d8 <_svfprintf_r+0xbe8>
 8005c84:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005c86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c88:	aa29      	add	r2, sp, #164	; 0xa4
 8005c8a:	f001 fe93 	bl	80079b4 <__ssprint_r>
 8005c8e:	2800      	cmp	r0, #0
 8005c90:	f47e af98 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005c94:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005c96:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005c98:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 8005c9a:	1acb      	subs	r3, r1, r3
 8005c9c:	ae36      	add	r6, sp, #216	; 0xd8
 8005c9e:	e594      	b.n	80057ca <_svfprintf_r+0xdda>
 8005ca0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ca2:	9413      	str	r4, [sp, #76]	; 0x4c
 8005ca4:	2d06      	cmp	r5, #6
 8005ca6:	bf28      	it	cs
 8005ca8:	2506      	movcs	r5, #6
 8005caa:	46c2      	mov	sl, r8
 8005cac:	950e      	str	r5, [sp, #56]	; 0x38
 8005cae:	f248 4850 	movw	r8, #33872	; 0x8450
 8005cb2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8005cb6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8005cba:	4654      	mov	r4, sl
 8005cbc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8005cc0:	950d      	str	r5, [sp, #52]	; 0x34
 8005cc2:	f6c0 0800 	movt	r8, #2048	; 0x800
 8005cc6:	f7fe bfd7 	b.w	8004c78 <_svfprintf_r+0x288>
 8005cca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005ccc:	930d      	str	r3, [sp, #52]	; 0x34
 8005cce:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005cd2:	2400      	movs	r4, #0
 8005cd4:	9509      	str	r5, [sp, #36]	; 0x24
 8005cd6:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8005cda:	940c      	str	r4, [sp, #48]	; 0x30
 8005cdc:	f7fe bfcf 	b.w	8004c7e <_svfprintf_r+0x28e>
 8005ce0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8005ce4:	f88d a087 	strb.w	sl, [sp, #135]	; 0x87
 8005ce8:	f7ff b9a8 	b.w	800503c <_svfprintf_r+0x64c>
 8005cec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005cee:	1a1b      	subs	r3, r3, r0
 8005cf0:	9310      	str	r3, [sp, #64]	; 0x40
 8005cf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005cf4:	1cda      	adds	r2, r3, #3
 8005cf6:	db11      	blt.n	8005d1c <_svfprintf_r+0x132c>
 8005cf8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	db0e      	blt.n	8005d1c <_svfprintf_r+0x132c>
 8005cfe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d00:	e750      	b.n	8005ba4 <_svfprintf_r+0x11b4>
 8005d02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d04:	9413      	str	r4, [sp, #76]	; 0x4c
 8005d06:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8005d0a:	950d      	str	r5, [sp, #52]	; 0x34
 8005d0c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d0e:	9017      	str	r0, [sp, #92]	; 0x5c
 8005d10:	950e      	str	r5, [sp, #56]	; 0x38
 8005d12:	900c      	str	r0, [sp, #48]	; 0x30
 8005d14:	f89d a087 	ldrb.w	sl, [sp, #135]	; 0x87
 8005d18:	f7fe bfae 	b.w	8004c78 <_svfprintf_r+0x288>
 8005d1c:	f1a9 0902 	sub.w	r9, r9, #2
 8005d20:	3b01      	subs	r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	9323      	str	r3, [sp, #140]	; 0x8c
 8005d26:	bfba      	itte	lt
 8005d28:	425b      	neglt	r3, r3
 8005d2a:	222d      	movlt	r2, #45	; 0x2d
 8005d2c:	222b      	movge	r2, #43	; 0x2b
 8005d2e:	2b09      	cmp	r3, #9
 8005d30:	f88d 9094 	strb.w	r9, [sp, #148]	; 0x94
 8005d34:	f88d 2095 	strb.w	r2, [sp, #149]	; 0x95
 8005d38:	dc48      	bgt.n	8005dcc <_svfprintf_r+0x13dc>
 8005d3a:	3330      	adds	r3, #48	; 0x30
 8005d3c:	2230      	movs	r2, #48	; 0x30
 8005d3e:	f88d 3097 	strb.w	r3, [sp, #151]	; 0x97
 8005d42:	f88d 2096 	strb.w	r2, [sp, #150]	; 0x96
 8005d46:	ab26      	add	r3, sp, #152	; 0x98
 8005d48:	aa25      	add	r2, sp, #148	; 0x94
 8005d4a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005d4c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d4e:	1a9a      	subs	r2, r3, r2
 8005d50:	4414      	add	r4, r2
 8005d52:	2d01      	cmp	r5, #1
 8005d54:	921d      	str	r2, [sp, #116]	; 0x74
 8005d56:	940e      	str	r4, [sp, #56]	; 0x38
 8005d58:	dd7f      	ble.n	8005e5a <_svfprintf_r+0x146a>
 8005d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d5c:	2400      	movs	r4, #0
 8005d5e:	3301      	adds	r3, #1
 8005d60:	930e      	str	r3, [sp, #56]	; 0x38
 8005d62:	9417      	str	r4, [sp, #92]	; 0x5c
 8005d64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005d68:	e730      	b.n	8005bcc <_svfprintf_r+0x11dc>
 8005d6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d6e:	aa29      	add	r2, sp, #164	; 0xa4
 8005d70:	f001 fe20 	bl	80079b4 <__ssprint_r>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f47e af25 	bne.w	8004bc4 <_svfprintf_r+0x1d4>
 8005d7a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8005d7c:	992b      	ldr	r1, [sp, #172]	; 0xac
 8005d7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005d80:	aa36      	add	r2, sp, #216	; 0xd8
 8005d82:	e635      	b.n	80059f0 <_svfprintf_r+0x1000>
 8005d84:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8005d86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d88:	2c00      	cmp	r4, #0
 8005d8a:	bfd4      	ite	le
 8005d8c:	f1c4 0302 	rsble	r3, r4, #2
 8005d90:	2301      	movgt	r3, #1
 8005d92:	441d      	add	r5, r3
 8005d94:	950e      	str	r5, [sp, #56]	; 0x38
 8005d96:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005d9a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d9e:	e715      	b.n	8005bcc <_svfprintf_r+0x11dc>
 8005da0:	2102      	movs	r1, #2
 8005da2:	e67b      	b.n	8005a9c <_svfprintf_r+0x10ac>
 8005da4:	f6c0 0500 	movt	r5, #2048	; 0x800
 8005da8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8005daa:	f7ff bbc8 	b.w	800553e <_svfprintf_r+0xb4e>
 8005dae:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	9417      	str	r4, [sp, #92]	; 0x5c
 8005db4:	dd5b      	ble.n	8005e6e <_svfprintf_r+0x147e>
 8005db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	d146      	bne.n	8005e4a <_svfprintf_r+0x145a>
 8005dbc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005dbe:	07e5      	lsls	r5, r4, #31
 8005dc0:	d443      	bmi.n	8005e4a <_svfprintf_r+0x145a>
 8005dc2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005dc4:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005dc8:	950e      	str	r5, [sp, #56]	; 0x38
 8005dca:	e6ff      	b.n	8005bcc <_svfprintf_r+0x11dc>
 8005dcc:	f246 6067 	movw	r0, #26215	; 0x6667
 8005dd0:	f2c6 6066 	movt	r0, #26214	; 0x6666
 8005dd4:	f10d 01a2 	add.w	r1, sp, #162	; 0xa2
 8005dd8:	fb80 5403 	smull	r5, r4, r0, r3
 8005ddc:	17da      	asrs	r2, r3, #31
 8005dde:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8005de2:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8005de6:	460d      	mov	r5, r1
 8005de8:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
 8005dec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005df0:	2a09      	cmp	r2, #9
 8005df2:	7029      	strb	r1, [r5, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	f105 31ff 	add.w	r1, r5, #4294967295	; 0xffffffff
 8005dfa:	dced      	bgt.n	8005dd8 <_svfprintf_r+0x13e8>
 8005dfc:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8005e00:	f10d 00a3 	add.w	r0, sp, #163	; 0xa3
 8005e04:	b2da      	uxtb	r2, r3
 8005e06:	4288      	cmp	r0, r1
 8005e08:	f805 2c01 	strb.w	r2, [r5, #-1]
 8005e0c:	d952      	bls.n	8005eb4 <_svfprintf_r+0x14c4>
 8005e0e:	f10d 0195 	add.w	r1, sp, #149	; 0x95
 8005e12:	462b      	mov	r3, r5
 8005e14:	e001      	b.n	8005e1a <_svfprintf_r+0x142a>
 8005e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1a:	4283      	cmp	r3, r0
 8005e1c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005e20:	d1f9      	bne.n	8005e16 <_svfprintf_r+0x1426>
 8005e22:	a846      	add	r0, sp, #280	; 0x118
 8005e24:	ebc5 0340 	rsb	r3, r5, r0, lsl #1
 8005e28:	3bf6      	subs	r3, #246	; 0xf6
 8005e2a:	e78d      	b.n	8005d48 <_svfprintf_r+0x1358>
 8005e2c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8005e2e:	4651      	mov	r1, sl
 8005e30:	2200      	movs	r2, #0
 8005e32:	2300      	movs	r3, #0
 8005e34:	f7fa fec6 	bl	8000bc4 <__aeabi_dcmpeq>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	f47f ae52 	bne.w	8005ae2 <_svfprintf_r+0x10f2>
 8005e3e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005e40:	f1c0 0301 	rsb	r3, r0, #1
 8005e44:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e46:	441c      	add	r4, r3
 8005e48:	e68a      	b.n	8005b60 <_svfprintf_r+0x1170>
 8005e4a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e4c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005e4e:	1c63      	adds	r3, r4, #1
 8005e50:	441d      	add	r5, r3
 8005e52:	950e      	str	r5, [sp, #56]	; 0x38
 8005e54:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005e58:	e6b8      	b.n	8005bcc <_svfprintf_r+0x11dc>
 8005e5a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005e5c:	f014 0301 	ands.w	r3, r4, #1
 8005e60:	f47f af7b 	bne.w	8005d5a <_svfprintf_r+0x136a>
 8005e64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005e66:	9317      	str	r3, [sp, #92]	; 0x5c
 8005e68:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 8005e6c:	e6ae      	b.n	8005bcc <_svfprintf_r+0x11dc>
 8005e6e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005e70:	b934      	cbnz	r4, 8005e80 <_svfprintf_r+0x1490>
 8005e72:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005e74:	07ec      	lsls	r4, r5, #31
 8005e76:	bf5c      	itt	pl
 8005e78:	2301      	movpl	r3, #1
 8005e7a:	930e      	strpl	r3, [sp, #56]	; 0x38
 8005e7c:	f57f aea6 	bpl.w	8005bcc <_svfprintf_r+0x11dc>
 8005e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e82:	3302      	adds	r3, #2
 8005e84:	930e      	str	r3, [sp, #56]	; 0x38
 8005e86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005e8a:	e69f      	b.n	8005bcc <_svfprintf_r+0x11dc>
 8005e8c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8005e8e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8005e90:	682d      	ldr	r5, [r5, #0]
 8005e92:	f893 9001 	ldrb.w	r9, [r3, #1]
 8005e96:	950c      	str	r5, [sp, #48]	; 0x30
 8005e98:	2d00      	cmp	r5, #0
 8005e9a:	f104 0104 	add.w	r1, r4, #4
 8005e9e:	bfb8      	it	lt
 8005ea0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8005ea4:	9113      	str	r1, [sp, #76]	; 0x4c
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	bfb8      	it	lt
 8005eaa:	950c      	strlt	r5, [sp, #48]	; 0x30
 8005eac:	f7fe be0f 	b.w	8004ace <_svfprintf_r+0xde>
 8005eb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eb2:	e735      	b.n	8005d20 <_svfprintf_r+0x1330>
 8005eb4:	f10d 0396 	add.w	r3, sp, #150	; 0x96
 8005eb8:	e746      	b.n	8005d48 <_svfprintf_r+0x1358>
 8005eba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	602b      	str	r3, [r5, #0]
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec4:	f7fe be86 	b.w	8004bd4 <_svfprintf_r+0x1e4>

08005ec8 <_vsprintf_r>:
 8005ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eca:	b09b      	sub	sp, #108	; 0x6c
 8005ecc:	460d      	mov	r5, r1
 8005ece:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8005ed2:	f44f 7702 	mov.w	r7, #520	; 0x208
 8005ed6:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005eda:	4669      	mov	r1, sp
 8005edc:	9500      	str	r5, [sp, #0]
 8005ede:	9504      	str	r5, [sp, #16]
 8005ee0:	f8ad 700c 	strh.w	r7, [sp, #12]
 8005ee4:	9402      	str	r4, [sp, #8]
 8005ee6:	9405      	str	r4, [sp, #20]
 8005ee8:	f8ad 600e 	strh.w	r6, [sp, #14]
 8005eec:	f7fe fd80 	bl	80049f0 <_svfprintf_r>
 8005ef0:	9b00      	ldr	r3, [sp, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	b01b      	add	sp, #108	; 0x6c
 8005ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005efa:	bf00      	nop

08005efc <vsprintf>:
 8005efc:	b430      	push	{r4, r5}
 8005efe:	f240 4498 	movw	r4, #1176	; 0x498
 8005f02:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005f06:	460d      	mov	r5, r1
 8005f08:	4613      	mov	r3, r2
 8005f0a:	4601      	mov	r1, r0
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	6820      	ldr	r0, [r4, #0]
 8005f10:	bc30      	pop	{r4, r5}
 8005f12:	f7ff bfd9 	b.w	8005ec8 <_vsprintf_r>
 8005f16:	bf00      	nop

08005f18 <__register_exitproc>:
 8005f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f1a:	f248 4404 	movw	r4, #33796	; 0x8404
 8005f1e:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005f22:	b085      	sub	sp, #20
 8005f24:	6826      	ldr	r6, [r4, #0]
 8005f26:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8005f2a:	4607      	mov	r7, r0
 8005f2c:	2c00      	cmp	r4, #0
 8005f2e:	d044      	beq.n	8005fba <__register_exitproc+0xa2>
 8005f30:	6865      	ldr	r5, [r4, #4]
 8005f32:	2d1f      	cmp	r5, #31
 8005f34:	dd21      	ble.n	8005f7a <__register_exitproc+0x62>
 8005f36:	f244 3411 	movw	r4, #17169	; 0x4311
 8005f3a:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005f3e:	b91c      	cbnz	r4, 8005f48 <__register_exitproc+0x30>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f44:	b005      	add	sp, #20
 8005f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f48:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005f4c:	9103      	str	r1, [sp, #12]
 8005f4e:	9202      	str	r2, [sp, #8]
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	f7fe f9dd 	bl	8004310 <malloc>
 8005f56:	9903      	ldr	r1, [sp, #12]
 8005f58:	9a02      	ldr	r2, [sp, #8]
 8005f5a:	9b01      	ldr	r3, [sp, #4]
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	d0ee      	beq.n	8005f40 <__register_exitproc+0x28>
 8005f62:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 8005f66:	2000      	movs	r0, #0
 8005f68:	6025      	str	r5, [r4, #0]
 8005f6a:	6060      	str	r0, [r4, #4]
 8005f6c:	4605      	mov	r5, r0
 8005f6e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005f72:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 8005f76:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 8005f7a:	b93f      	cbnz	r7, 8005f8c <__register_exitproc+0x74>
 8005f7c:	1cab      	adds	r3, r5, #2
 8005f7e:	2000      	movs	r0, #0
 8005f80:	3501      	adds	r5, #1
 8005f82:	6065      	str	r5, [r4, #4]
 8005f84:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 8005f88:	b005      	add	sp, #20
 8005f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f8c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 8005f90:	f04f 0c01 	mov.w	ip, #1
 8005f94:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8005f98:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 8005f9c:	fa0c f205 	lsl.w	r2, ip, r5
 8005fa0:	4316      	orrs	r6, r2
 8005fa2:	2f02      	cmp	r7, #2
 8005fa4:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 8005fa8:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 8005fac:	bf02      	ittt	eq
 8005fae:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8005fb2:	431a      	orreq	r2, r3
 8005fb4:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8005fb8:	e7e0      	b.n	8005f7c <__register_exitproc+0x64>
 8005fba:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8005fbe:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005fc2:	e7b5      	b.n	8005f30 <__register_exitproc+0x18>

08005fc4 <register_fini>:
 8005fc4:	f240 0300 	movw	r3, #0
 8005fc8:	f2c0 0300 	movt	r3, #0
 8005fcc:	b12b      	cbz	r3, 8005fda <register_fini+0x16>
 8005fce:	f244 2081 	movw	r0, #17025	; 0x4281
 8005fd2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005fd6:	f7fe b94d 	b.w	8004274 <atexit>
 8005fda:	4770      	bx	lr

08005fdc <quorem>:
 8005fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	6903      	ldr	r3, [r0, #16]
 8005fe2:	690d      	ldr	r5, [r1, #16]
 8005fe4:	429d      	cmp	r5, r3
 8005fe6:	4683      	mov	fp, r0
 8005fe8:	b083      	sub	sp, #12
 8005fea:	bfc8      	it	gt
 8005fec:	2000      	movgt	r0, #0
 8005fee:	f300 8088 	bgt.w	8006102 <quorem+0x126>
 8005ff2:	3d01      	subs	r5, #1
 8005ff4:	f101 0414 	add.w	r4, r1, #20
 8005ff8:	f10b 0a14 	add.w	sl, fp, #20
 8005ffc:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
 8006000:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8006004:	3201      	adds	r2, #1
 8006006:	fbb3 f8f2 	udiv	r8, r3, r2
 800600a:	00aa      	lsls	r2, r5, #2
 800600c:	4691      	mov	r9, r2
 800600e:	9200      	str	r2, [sp, #0]
 8006010:	4452      	add	r2, sl
 8006012:	44a1      	add	r9, r4
 8006014:	9201      	str	r2, [sp, #4]
 8006016:	f1b8 0f00 	cmp.w	r8, #0
 800601a:	d03d      	beq.n	8006098 <quorem+0xbc>
 800601c:	f04f 0e00 	mov.w	lr, #0
 8006020:	4670      	mov	r0, lr
 8006022:	4622      	mov	r2, r4
 8006024:	4653      	mov	r3, sl
 8006026:	468c      	mov	ip, r1
 8006028:	f852 6b04 	ldr.w	r6, [r2], #4
 800602c:	6819      	ldr	r1, [r3, #0]
 800602e:	b2b7      	uxth	r7, r6
 8006030:	0c36      	lsrs	r6, r6, #16
 8006032:	fb07 ee08 	mla	lr, r7, r8, lr
 8006036:	fb06 f608 	mul.w	r6, r6, r8
 800603a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
 800603e:	fa1f f78e 	uxth.w	r7, lr
 8006042:	1bc7      	subs	r7, r0, r7
 8006044:	b2b0      	uxth	r0, r6
 8006046:	fa17 f781 	uxtah	r7, r7, r1
 800604a:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
 800604e:	eb00 4027 	add.w	r0, r0, r7, asr #16
 8006052:	b2bf      	uxth	r7, r7
 8006054:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
 8006058:	4591      	cmp	r9, r2
 800605a:	f843 7b04 	str.w	r7, [r3], #4
 800605e:	ea4f 4020 	mov.w	r0, r0, asr #16
 8006062:	ea4f 4e16 	mov.w	lr, r6, lsr #16
 8006066:	d2df      	bcs.n	8006028 <quorem+0x4c>
 8006068:	9a00      	ldr	r2, [sp, #0]
 800606a:	f85a 3002 	ldr.w	r3, [sl, r2]
 800606e:	4661      	mov	r1, ip
 8006070:	b993      	cbnz	r3, 8006098 <quorem+0xbc>
 8006072:	9a01      	ldr	r2, [sp, #4]
 8006074:	1f13      	subs	r3, r2, #4
 8006076:	459a      	cmp	sl, r3
 8006078:	d20c      	bcs.n	8006094 <quorem+0xb8>
 800607a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800607e:	b94b      	cbnz	r3, 8006094 <quorem+0xb8>
 8006080:	f1a2 0308 	sub.w	r3, r2, #8
 8006084:	e002      	b.n	800608c <quorem+0xb0>
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	3b04      	subs	r3, #4
 800608a:	b91a      	cbnz	r2, 8006094 <quorem+0xb8>
 800608c:	459a      	cmp	sl, r3
 800608e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8006092:	d3f8      	bcc.n	8006086 <quorem+0xaa>
 8006094:	f8cb 5010 	str.w	r5, [fp, #16]
 8006098:	4658      	mov	r0, fp
 800609a:	f001 fb79 	bl	8007790 <__mcmp>
 800609e:	2800      	cmp	r0, #0
 80060a0:	db2e      	blt.n	8006100 <quorem+0x124>
 80060a2:	f108 0801 	add.w	r8, r8, #1
 80060a6:	4653      	mov	r3, sl
 80060a8:	2200      	movs	r2, #0
 80060aa:	f854 6b04 	ldr.w	r6, [r4], #4
 80060ae:	6818      	ldr	r0, [r3, #0]
 80060b0:	b2b1      	uxth	r1, r6
 80060b2:	1a52      	subs	r2, r2, r1
 80060b4:	0c36      	lsrs	r6, r6, #16
 80060b6:	fa12 f180 	uxtah	r1, r2, r0
 80060ba:	ebc6 4210 	rsb	r2, r6, r0, lsr #16
 80060be:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80060c2:	b289      	uxth	r1, r1
 80060c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060c8:	45a1      	cmp	r9, r4
 80060ca:	f843 1b04 	str.w	r1, [r3], #4
 80060ce:	ea4f 4222 	mov.w	r2, r2, asr #16
 80060d2:	d2ea      	bcs.n	80060aa <quorem+0xce>
 80060d4:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
 80060d8:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
 80060dc:	b982      	cbnz	r2, 8006100 <quorem+0x124>
 80060de:	1f1a      	subs	r2, r3, #4
 80060e0:	4592      	cmp	sl, r2
 80060e2:	d20b      	bcs.n	80060fc <quorem+0x120>
 80060e4:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80060e8:	b942      	cbnz	r2, 80060fc <quorem+0x120>
 80060ea:	3b08      	subs	r3, #8
 80060ec:	e002      	b.n	80060f4 <quorem+0x118>
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	b91a      	cbnz	r2, 80060fc <quorem+0x120>
 80060f4:	459a      	cmp	sl, r3
 80060f6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80060fa:	d3f8      	bcc.n	80060ee <quorem+0x112>
 80060fc:	f8cb 5010 	str.w	r5, [fp, #16]
 8006100:	4640      	mov	r0, r8
 8006102:	b003      	add	sp, #12
 8006104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006108 <_dtoa_r>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800610e:	b09d      	sub	sp, #116	; 0x74
 8006110:	4604      	mov	r4, r0
 8006112:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 8006114:	4692      	mov	sl, r2
 8006116:	469b      	mov	fp, r3
 8006118:	b141      	cbz	r1, 800612c <_dtoa_r+0x24>
 800611a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	604b      	str	r3, [r1, #4]
 8006122:	608a      	str	r2, [r1, #8]
 8006124:	f001 f930 	bl	8007388 <_Bfree>
 8006128:	2300      	movs	r3, #0
 800612a:	6423      	str	r3, [r4, #64]	; 0x40
 800612c:	f1bb 0f00 	cmp.w	fp, #0
 8006130:	bfb5      	itete	lt
 8006132:	2301      	movlt	r3, #1
 8006134:	2300      	movge	r3, #0
 8006136:	602b      	strlt	r3, [r5, #0]
 8006138:	602b      	strge	r3, [r5, #0]
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	bfb4      	ite	lt
 8006140:	f02b 4900 	biclt.w	r9, fp, #2147483648	; 0x80000000
 8006144:	46d9      	movge	r9, fp
 8006146:	f6c7 73f0 	movt	r3, #32752	; 0x7ff0
 800614a:	f04f 0200 	mov.w	r2, #0
 800614e:	ea09 0303 	and.w	r3, r9, r3
 8006152:	f6c7 72f0 	movt	r2, #32752	; 0x7ff0
 8006156:	bfb8      	it	lt
 8006158:	46cb      	movlt	fp, r9
 800615a:	4293      	cmp	r3, r2
 800615c:	d014      	beq.n	8006188 <_dtoa_r+0x80>
 800615e:	2200      	movs	r2, #0
 8006160:	2300      	movs	r3, #0
 8006162:	4650      	mov	r0, sl
 8006164:	4659      	mov	r1, fp
 8006166:	f7fa fd2d 	bl	8000bc4 <__aeabi_dcmpeq>
 800616a:	4680      	mov	r8, r0
 800616c:	b328      	cbz	r0, 80061ba <_dtoa_r+0xb2>
 800616e:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8006170:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8006172:	2301      	movs	r3, #1
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	2d00      	cmp	r5, #0
 8006178:	f000 80dd 	beq.w	8006336 <_dtoa_r+0x22e>
 800617c:	48aa      	ldr	r0, [pc, #680]	; (8006428 <_dtoa_r+0x320>)
 800617e:	6028      	str	r0, [r5, #0]
 8006180:	3801      	subs	r0, #1
 8006182:	b01d      	add	sp, #116	; 0x74
 8006184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006188:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800618a:	f242 730f 	movw	r3, #9999	; 0x270f
 800618e:	f248 4078 	movw	r0, #33912	; 0x8478
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f6c0 0000 	movt	r0, #2048	; 0x800
 8006198:	f1ba 0f00 	cmp.w	sl, #0
 800619c:	f000 80ab 	beq.w	80062f6 <_dtoa_r+0x1ee>
 80061a0:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80061a2:	2e00      	cmp	r6, #0
 80061a4:	d0ed      	beq.n	8006182 <_dtoa_r+0x7a>
 80061a6:	78c3      	ldrb	r3, [r0, #3]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 80b3 	bne.w	8006314 <_dtoa_r+0x20c>
 80061ae:	1cc3      	adds	r3, r0, #3
 80061b0:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80061b2:	602b      	str	r3, [r5, #0]
 80061b4:	b01d      	add	sp, #116	; 0x74
 80061b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ba:	aa1b      	add	r2, sp, #108	; 0x6c
 80061bc:	ab1a      	add	r3, sp, #104	; 0x68
 80061be:	e88d 000c 	stmia.w	sp, {r2, r3}
 80061c2:	4620      	mov	r0, r4
 80061c4:	4652      	mov	r2, sl
 80061c6:	465b      	mov	r3, fp
 80061c8:	f001 fb6e 	bl	80078a8 <__d2b>
 80061cc:	ea5f 5519 	movs.w	r5, r9, lsr #20
 80061d0:	900d      	str	r0, [sp, #52]	; 0x34
 80061d2:	f040 80a2 	bne.w	800631a <_dtoa_r+0x212>
 80061d6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80061d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80061da:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80061de:	443d      	add	r5, r7
 80061e0:	429d      	cmp	r5, r3
 80061e2:	f2c0 825f 	blt.w	80066a4 <_dtoa_r+0x59c>
 80061e6:	f64f 430e 	movw	r3, #64526	; 0xfc0e
 80061ea:	f6cf 73ff 	movt	r3, #65535	; 0xffff
 80061ee:	1b5b      	subs	r3, r3, r5
 80061f0:	f205 4212 	addw	r2, r5, #1042	; 0x412
 80061f4:	fa09 f303 	lsl.w	r3, r9, r3
 80061f8:	fa2a f202 	lsr.w	r2, sl, r2
 80061fc:	ea43 0002 	orr.w	r0, r3, r2
 8006200:	f7fa fa02 	bl	8000608 <__aeabi_ui2d>
 8006204:	2601      	movs	r6, #1
 8006206:	3d01      	subs	r5, #1
 8006208:	46b8      	mov	r8, r7
 800620a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800620e:	9617      	str	r6, [sp, #92]	; 0x5c
 8006210:	2300      	movs	r3, #0
 8006212:	2200      	movs	r2, #0
 8006214:	f6c3 73f8 	movt	r3, #16376	; 0x3ff8
 8006218:	f7fa f8b8 	bl	800038c <__aeabi_dsub>
 800621c:	a37c      	add	r3, pc, #496	; (adr r3, 8006410 <_dtoa_r+0x308>)
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f7fa fa67 	bl	80006f4 <__aeabi_dmul>
 8006226:	a37c      	add	r3, pc, #496	; (adr r3, 8006418 <_dtoa_r+0x310>)
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f7fa f8b0 	bl	8000390 <__adddf3>
 8006230:	4606      	mov	r6, r0
 8006232:	4628      	mov	r0, r5
 8006234:	460f      	mov	r7, r1
 8006236:	f7fa f9f7 	bl	8000628 <__aeabi_i2d>
 800623a:	a379      	add	r3, pc, #484	; (adr r3, 8006420 <_dtoa_r+0x318>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa fa58 	bl	80006f4 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4630      	mov	r0, r6
 800624a:	4639      	mov	r1, r7
 800624c:	f7fa f8a0 	bl	8000390 <__adddf3>
 8006250:	4606      	mov	r6, r0
 8006252:	460f      	mov	r7, r1
 8006254:	f7fa fce8 	bl	8000c28 <__aeabi_d2iz>
 8006258:	4639      	mov	r1, r7
 800625a:	9007      	str	r0, [sp, #28]
 800625c:	2200      	movs	r2, #0
 800625e:	4630      	mov	r0, r6
 8006260:	2300      	movs	r3, #0
 8006262:	f7fa fcb9 	bl	8000bd8 <__aeabi_dcmplt>
 8006266:	2800      	cmp	r0, #0
 8006268:	f040 8205 	bne.w	8006676 <_dtoa_r+0x56e>
 800626c:	9e07      	ldr	r6, [sp, #28]
 800626e:	2e16      	cmp	r6, #22
 8006270:	bf84      	itt	hi
 8006272:	2601      	movhi	r6, #1
 8006274:	9616      	strhi	r6, [sp, #88]	; 0x58
 8006276:	d812      	bhi.n	800629e <_dtoa_r+0x196>
 8006278:	f248 4388 	movw	r3, #33928	; 0x8488
 800627c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006280:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006284:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006288:	4652      	mov	r2, sl
 800628a:	465b      	mov	r3, fp
 800628c:	f7fa fcc2 	bl	8000c14 <__aeabi_dcmpgt>
 8006290:	2800      	cmp	r0, #0
 8006292:	f000 820f 	beq.w	80066b4 <_dtoa_r+0x5ac>
 8006296:	3e01      	subs	r6, #1
 8006298:	9607      	str	r6, [sp, #28]
 800629a:	2600      	movs	r6, #0
 800629c:	9616      	str	r6, [sp, #88]	; 0x58
 800629e:	ebc5 0508 	rsb	r5, r5, r8
 80062a2:	3d01      	subs	r5, #1
 80062a4:	bf48      	it	mi
 80062a6:	2600      	movmi	r6, #0
 80062a8:	950a      	str	r5, [sp, #40]	; 0x28
 80062aa:	bf48      	it	mi
 80062ac:	960a      	strmi	r6, [sp, #40]	; 0x28
 80062ae:	9e07      	ldr	r6, [sp, #28]
 80062b0:	bf4b      	itete	mi
 80062b2:	426d      	negmi	r5, r5
 80062b4:	2500      	movpl	r5, #0
 80062b6:	950c      	strmi	r5, [sp, #48]	; 0x30
 80062b8:	950c      	strpl	r5, [sp, #48]	; 0x30
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	f2c0 81e9 	blt.w	8006692 <_dtoa_r+0x58a>
 80062c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80062c2:	9611      	str	r6, [sp, #68]	; 0x44
 80062c4:	4435      	add	r5, r6
 80062c6:	2600      	movs	r6, #0
 80062c8:	950a      	str	r5, [sp, #40]	; 0x28
 80062ca:	960e      	str	r6, [sp, #56]	; 0x38
 80062cc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80062ce:	2d09      	cmp	r5, #9
 80062d0:	d836      	bhi.n	8006340 <_dtoa_r+0x238>
 80062d2:	2d05      	cmp	r5, #5
 80062d4:	bfc4      	itt	gt
 80062d6:	3d04      	subgt	r5, #4
 80062d8:	9526      	strgt	r5, [sp, #152]	; 0x98
 80062da:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80062dc:	f1a6 0302 	sub.w	r3, r6, #2
 80062e0:	bfcc      	ite	gt
 80062e2:	2500      	movgt	r5, #0
 80062e4:	2501      	movle	r5, #1
 80062e6:	2b03      	cmp	r3, #3
 80062e8:	d82c      	bhi.n	8006344 <_dtoa_r+0x23c>
 80062ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80062ee:	0347      	.short	0x0347
 80062f0:	03560213 	.word	0x03560213
 80062f4:	0573      	.short	0x0573
 80062f6:	f248 426c 	movw	r2, #33900	; 0x846c
 80062fa:	f248 4378 	movw	r3, #33912	; 0x8478
 80062fe:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006302:	f6c0 0200 	movt	r2, #2048	; 0x800
 8006306:	f6c0 0300 	movt	r3, #2048	; 0x800
 800630a:	2800      	cmp	r0, #0
 800630c:	bf0c      	ite	eq
 800630e:	4610      	moveq	r0, r2
 8006310:	4618      	movne	r0, r3
 8006312:	e745      	b.n	80061a0 <_dtoa_r+0x98>
 8006314:	f100 0308 	add.w	r3, r0, #8
 8006318:	e74a      	b.n	80061b0 <_dtoa_r+0xa8>
 800631a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800631e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006322:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006326:	4650      	mov	r0, sl
 8006328:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800632c:	f443 1140 	orr.w	r1, r3, #3145728	; 0x300000
 8006330:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006334:	e76c      	b.n	8006210 <_dtoa_r+0x108>
 8006336:	f248 4058 	movw	r0, #33880	; 0x8458
 800633a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800633e:	e720      	b.n	8006182 <_dtoa_r+0x7a>
 8006340:	2600      	movs	r6, #0
 8006342:	9626      	str	r6, [sp, #152]	; 0x98
 8006344:	2500      	movs	r5, #0
 8006346:	6465      	str	r5, [r4, #68]	; 0x44
 8006348:	4629      	mov	r1, r5
 800634a:	4620      	mov	r0, r4
 800634c:	f000 fff6 	bl	800733c <_Balloc>
 8006350:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8006354:	9527      	str	r5, [sp, #156]	; 0x9c
 8006356:	2501      	movs	r5, #1
 8006358:	9009      	str	r0, [sp, #36]	; 0x24
 800635a:	9610      	str	r6, [sp, #64]	; 0x40
 800635c:	6420      	str	r0, [r4, #64]	; 0x40
 800635e:	960b      	str	r6, [sp, #44]	; 0x2c
 8006360:	950f      	str	r5, [sp, #60]	; 0x3c
 8006362:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006364:	2b00      	cmp	r3, #0
 8006366:	f2c0 80be 	blt.w	80064e6 <_dtoa_r+0x3de>
 800636a:	9e07      	ldr	r6, [sp, #28]
 800636c:	2e0e      	cmp	r6, #14
 800636e:	f300 80ba 	bgt.w	80064e6 <_dtoa_r+0x3de>
 8006372:	f248 4388 	movw	r3, #33928	; 0x8488
 8006376:	f6c0 0300 	movt	r3, #2048	; 0x800
 800637a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800637e:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
 8006382:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006384:	ed93 7b00 	vldr	d7, [r3]
 8006388:	ea4f 72de 	mov.w	r2, lr, lsr #31
 800638c:	2d00      	cmp	r5, #0
 800638e:	bfcc      	ite	gt
 8006390:	2200      	movgt	r2, #0
 8006392:	f002 0201 	andle.w	r2, r2, #1
 8006396:	ed8d 7b04 	vstr	d7, [sp, #16]
 800639a:	2a00      	cmp	r2, #0
 800639c:	f040 8450 	bne.w	8006c40 <_dtoa_r+0xb38>
 80063a0:	ec53 2b17 	vmov	r2, r3, d7
 80063a4:	4650      	mov	r0, sl
 80063a6:	4659      	mov	r1, fp
 80063a8:	f7fa face 	bl	8000948 <__aeabi_ddiv>
 80063ac:	f7fa fc3c 	bl	8000c28 <__aeabi_d2iz>
 80063b0:	4680      	mov	r8, r0
 80063b2:	f7fa f939 	bl	8000628 <__aeabi_i2d>
 80063b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063ba:	f7fa f99b 	bl	80006f4 <__aeabi_dmul>
 80063be:	460b      	mov	r3, r1
 80063c0:	4602      	mov	r2, r0
 80063c2:	4659      	mov	r1, fp
 80063c4:	4650      	mov	r0, sl
 80063c6:	f7f9 ffe1 	bl	800038c <__aeabi_dsub>
 80063ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80063cc:	f108 0330 	add.w	r3, r8, #48	; 0x30
 80063d0:	702b      	strb	r3, [r5, #0]
 80063d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	f105 0501 	add.w	r5, r5, #1
 80063de:	d055      	beq.n	800648c <_dtoa_r+0x384>
 80063e0:	2300      	movs	r3, #0
 80063e2:	2200      	movs	r2, #0
 80063e4:	f2c4 0324 	movt	r3, #16420	; 0x4024
 80063e8:	f7fa f984 	bl	80006f4 <__aeabi_dmul>
 80063ec:	2200      	movs	r2, #0
 80063ee:	2300      	movs	r3, #0
 80063f0:	4606      	mov	r6, r0
 80063f2:	460f      	mov	r7, r1
 80063f4:	f7fa fbe6 	bl	8000bc4 <__aeabi_dcmpeq>
 80063f8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80063fc:	2800      	cmp	r0, #0
 80063fe:	f040 8503 	bne.w	8006e08 <_dtoa_r+0xd00>
 8006402:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006404:	44a9      	add	r9, r5
 8006406:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006408:	f105 0a02 	add.w	sl, r5, #2
 800640c:	e019      	b.n	8006442 <_dtoa_r+0x33a>
 800640e:	bf00      	nop
 8006410:	636f4361 	.word	0x636f4361
 8006414:	3fd287a7 	.word	0x3fd287a7
 8006418:	8b60c8b3 	.word	0x8b60c8b3
 800641c:	3fc68a28 	.word	0x3fc68a28
 8006420:	509f79fb 	.word	0x509f79fb
 8006424:	3fd34413 	.word	0x3fd34413
 8006428:	08008459 	.word	0x08008459
 800642c:	f7fa f962 	bl	80006f4 <__aeabi_dmul>
 8006430:	2200      	movs	r2, #0
 8006432:	2300      	movs	r3, #0
 8006434:	4606      	mov	r6, r0
 8006436:	460f      	mov	r7, r1
 8006438:	f7fa fbc4 	bl	8000bc4 <__aeabi_dcmpeq>
 800643c:	2800      	cmp	r0, #0
 800643e:	f040 84e1 	bne.w	8006e04 <_dtoa_r+0xcfc>
 8006442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006446:	4630      	mov	r0, r6
 8006448:	4639      	mov	r1, r7
 800644a:	f7fa fa7d 	bl	8000948 <__aeabi_ddiv>
 800644e:	f7fa fbeb 	bl	8000c28 <__aeabi_d2iz>
 8006452:	4680      	mov	r8, r0
 8006454:	f7fa f8e8 	bl	8000628 <__aeabi_i2d>
 8006458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645c:	f7fa f94a 	bl	80006f4 <__aeabi_dmul>
 8006460:	4602      	mov	r2, r0
 8006462:	460b      	mov	r3, r1
 8006464:	4630      	mov	r0, r6
 8006466:	4639      	mov	r1, r7
 8006468:	f7f9 ff90 	bl	800038c <__aeabi_dsub>
 800646c:	f108 0530 	add.w	r5, r8, #48	; 0x30
 8006470:	2300      	movs	r3, #0
 8006472:	45ca      	cmp	sl, r9
 8006474:	f80a 5c01 	strb.w	r5, [sl, #-1]
 8006478:	4606      	mov	r6, r0
 800647a:	4655      	mov	r5, sl
 800647c:	460f      	mov	r7, r1
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006486:	f10a 0a01 	add.w	sl, sl, #1
 800648a:	d1cf      	bne.n	800642c <_dtoa_r+0x324>
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7f9 ff7c 	bl	8000390 <__adddf3>
 8006498:	4606      	mov	r6, r0
 800649a:	460f      	mov	r7, r1
 800649c:	4632      	mov	r2, r6
 800649e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064a2:	463b      	mov	r3, r7
 80064a4:	f7fa fb98 	bl	8000bd8 <__aeabi_dcmplt>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	f000 8564 	beq.w	8006f76 <_dtoa_r+0xe6e>
 80064ae:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80064b2:	9e07      	ldr	r6, [sp, #28]
 80064b4:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80064b8:	9618      	str	r6, [sp, #96]	; 0x60
 80064ba:	9509      	str	r5, [sp, #36]	; 0x24
 80064bc:	462a      	mov	r2, r5
 80064be:	e005      	b.n	80064cc <_dtoa_r+0x3c4>
 80064c0:	4599      	cmp	r9, r3
 80064c2:	f000 84d3 	beq.w	8006e6c <_dtoa_r+0xd64>
 80064c6:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80064d0:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 80064d4:	d0f4      	beq.n	80064c0 <_dtoa_r+0x3b8>
 80064d6:	9209      	str	r2, [sp, #36]	; 0x24
 80064d8:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80064da:	f108 0201 	add.w	r2, r8, #1
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	9607      	str	r6, [sp, #28]
 80064e2:	701a      	strb	r2, [r3, #0]
 80064e4:	e0b1      	b.n	800664a <_dtoa_r+0x542>
 80064e6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	f040 80e5 	bne.w	80066b8 <_dtoa_r+0x5b0>
 80064ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80064f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064f2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80064f6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80064f8:	2900      	cmp	r1, #0
 80064fa:	bfc8      	it	gt
 80064fc:	2d00      	cmpgt	r5, #0
 80064fe:	dd09      	ble.n	8006514 <_dtoa_r+0x40c>
 8006500:	460b      	mov	r3, r1
 8006502:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006504:	42ab      	cmp	r3, r5
 8006506:	bfa8      	it	ge
 8006508:	462b      	movge	r3, r5
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	1ac9      	subs	r1, r1, r3
 800650e:	920c      	str	r2, [sp, #48]	; 0x30
 8006510:	1aed      	subs	r5, r5, r3
 8006512:	910a      	str	r1, [sp, #40]	; 0x28
 8006514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006516:	2b00      	cmp	r3, #0
 8006518:	dd1a      	ble.n	8006550 <_dtoa_r+0x448>
 800651a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800651c:	2900      	cmp	r1, #0
 800651e:	f000 8469 	beq.w	8006df4 <_dtoa_r+0xcec>
 8006522:	2e00      	cmp	r6, #0
 8006524:	dd10      	ble.n	8006548 <_dtoa_r+0x440>
 8006526:	4641      	mov	r1, r8
 8006528:	4632      	mov	r2, r6
 800652a:	4620      	mov	r0, r4
 800652c:	f001 f882 	bl	8007634 <__pow5mult>
 8006530:	4680      	mov	r8, r0
 8006532:	4641      	mov	r1, r8
 8006534:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006536:	4620      	mov	r0, r4
 8006538:	f000 ffd2 	bl	80074e0 <__multiply>
 800653c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800653e:	4607      	mov	r7, r0
 8006540:	4620      	mov	r0, r4
 8006542:	f000 ff21 	bl	8007388 <_Bfree>
 8006546:	970d      	str	r7, [sp, #52]	; 0x34
 8006548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800654a:	1b9a      	subs	r2, r3, r6
 800654c:	f040 8499 	bne.w	8006e82 <_dtoa_r+0xd7a>
 8006550:	2101      	movs	r1, #1
 8006552:	4620      	mov	r0, r4
 8006554:	f000 ffba 	bl	80074cc <__i2b>
 8006558:	9911      	ldr	r1, [sp, #68]	; 0x44
 800655a:	2900      	cmp	r1, #0
 800655c:	4606      	mov	r6, r0
 800655e:	dd05      	ble.n	800656c <_dtoa_r+0x464>
 8006560:	4601      	mov	r1, r0
 8006562:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006564:	4620      	mov	r0, r4
 8006566:	f001 f865 	bl	8007634 <__pow5mult>
 800656a:	4606      	mov	r6, r0
 800656c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800656e:	2a01      	cmp	r2, #1
 8006570:	f340 837c 	ble.w	8006c6c <_dtoa_r+0xb64>
 8006574:	2700      	movs	r7, #0
 8006576:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006578:	2001      	movs	r0, #1
 800657a:	2900      	cmp	r1, #0
 800657c:	f040 8336 	bne.w	8006bec <_dtoa_r+0xae4>
 8006580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006582:	4403      	add	r3, r0
 8006584:	f013 031f 	ands.w	r3, r3, #31
 8006588:	f000 8289 	beq.w	8006a9e <_dtoa_r+0x996>
 800658c:	f1c3 0220 	rsb	r2, r3, #32
 8006590:	2a04      	cmp	r2, #4
 8006592:	f340 855f 	ble.w	8007054 <_dtoa_r+0xf4c>
 8006596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006598:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 800659c:	f1c3 031c 	rsb	r3, r3, #28
 80065a0:	441a      	add	r2, r3
 80065a2:	449e      	add	lr, r3
 80065a4:	920c      	str	r2, [sp, #48]	; 0x30
 80065a6:	441d      	add	r5, r3
 80065a8:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80065ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	dd05      	ble.n	80065be <_dtoa_r+0x4b6>
 80065b2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80065b4:	461a      	mov	r2, r3
 80065b6:	4620      	mov	r0, r4
 80065b8:	f001 f88c 	bl	80076d4 <__lshift>
 80065bc:	900d      	str	r0, [sp, #52]	; 0x34
 80065be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80065c0:	2900      	cmp	r1, #0
 80065c2:	dd05      	ble.n	80065d0 <_dtoa_r+0x4c8>
 80065c4:	4631      	mov	r1, r6
 80065c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c8:	4620      	mov	r0, r4
 80065ca:	f001 f883 	bl	80076d4 <__lshift>
 80065ce:	4606      	mov	r6, r0
 80065d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80065d2:	2a00      	cmp	r2, #0
 80065d4:	f040 8313 	bne.w	8006bfe <_dtoa_r+0xaf6>
 80065d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80065da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065dc:	2a02      	cmp	r2, #2
 80065de:	bfd4      	ite	le
 80065e0:	2300      	movle	r3, #0
 80065e2:	2301      	movgt	r3, #1
 80065e4:	2900      	cmp	r1, #0
 80065e6:	bfc8      	it	gt
 80065e8:	2300      	movgt	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 820d 	beq.w	8006a0a <_dtoa_r+0x902>
 80065f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80065f2:	2d00      	cmp	r5, #0
 80065f4:	f040 8202 	bne.w	80069fc <_dtoa_r+0x8f4>
 80065f8:	4631      	mov	r1, r6
 80065fa:	462b      	mov	r3, r5
 80065fc:	2205      	movs	r2, #5
 80065fe:	4620      	mov	r0, r4
 8006600:	f000 fecc 	bl	800739c <__multadd>
 8006604:	4606      	mov	r6, r0
 8006606:	4631      	mov	r1, r6
 8006608:	980d      	ldr	r0, [sp, #52]	; 0x34
 800660a:	f001 f8c1 	bl	8007790 <__mcmp>
 800660e:	2800      	cmp	r0, #0
 8006610:	f340 81f4 	ble.w	80069fc <_dtoa_r+0x8f4>
 8006614:	9d07      	ldr	r5, [sp, #28]
 8006616:	3501      	adds	r5, #1
 8006618:	9507      	str	r5, [sp, #28]
 800661a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800661c:	46a9      	mov	r9, r5
 800661e:	2331      	movs	r3, #49	; 0x31
 8006620:	f109 0101 	add.w	r1, r9, #1
 8006624:	702b      	strb	r3, [r5, #0]
 8006626:	9109      	str	r1, [sp, #36]	; 0x24
 8006628:	2500      	movs	r5, #0
 800662a:	4631      	mov	r1, r6
 800662c:	4620      	mov	r0, r4
 800662e:	f000 feab 	bl	8007388 <_Bfree>
 8006632:	f1b8 0f00 	cmp.w	r8, #0
 8006636:	d008      	beq.n	800664a <_dtoa_r+0x542>
 8006638:	4545      	cmp	r5, r8
 800663a:	bf18      	it	ne
 800663c:	2d00      	cmpne	r5, #0
 800663e:	f040 823c 	bne.w	8006aba <_dtoa_r+0x9b2>
 8006642:	4641      	mov	r1, r8
 8006644:	4620      	mov	r0, r4
 8006646:	f000 fe9f 	bl	8007388 <_Bfree>
 800664a:	4620      	mov	r0, r4
 800664c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800664e:	f000 fe9b 	bl	8007388 <_Bfree>
 8006652:	9e07      	ldr	r6, [sp, #28]
 8006654:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006656:	2200      	movs	r2, #0
 8006658:	1c73      	adds	r3, r6, #1
 800665a:	702a      	strb	r2, [r5, #0]
 800665c:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 800665e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8006660:	6033      	str	r3, [r6, #0]
 8006662:	4648      	mov	r0, r9
 8006664:	2d00      	cmp	r5, #0
 8006666:	f43f ad8c 	beq.w	8006182 <_dtoa_r+0x7a>
 800666a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800666c:	4648      	mov	r0, r9
 800666e:	602e      	str	r6, [r5, #0]
 8006670:	b01d      	add	sp, #116	; 0x74
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	9807      	ldr	r0, [sp, #28]
 8006678:	f7f9 ffd6 	bl	8000628 <__aeabi_i2d>
 800667c:	4632      	mov	r2, r6
 800667e:	463b      	mov	r3, r7
 8006680:	f7fa faa0 	bl	8000bc4 <__aeabi_dcmpeq>
 8006684:	2800      	cmp	r0, #0
 8006686:	f47f adf1 	bne.w	800626c <_dtoa_r+0x164>
 800668a:	9e07      	ldr	r6, [sp, #28]
 800668c:	3e01      	subs	r6, #1
 800668e:	9607      	str	r6, [sp, #28]
 8006690:	e5ec      	b.n	800626c <_dtoa_r+0x164>
 8006692:	9e07      	ldr	r6, [sp, #28]
 8006694:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006696:	1bad      	subs	r5, r5, r6
 8006698:	950c      	str	r5, [sp, #48]	; 0x30
 800669a:	4275      	negs	r5, r6
 800669c:	2600      	movs	r6, #0
 800669e:	950e      	str	r5, [sp, #56]	; 0x38
 80066a0:	9611      	str	r6, [sp, #68]	; 0x44
 80066a2:	e613      	b.n	80062cc <_dtoa_r+0x1c4>
 80066a4:	f64f 30ee 	movw	r0, #64494	; 0xfbee
 80066a8:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 80066ac:	1b40      	subs	r0, r0, r5
 80066ae:	fa0a f000 	lsl.w	r0, sl, r0
 80066b2:	e5a5      	b.n	8006200 <_dtoa_r+0xf8>
 80066b4:	9016      	str	r0, [sp, #88]	; 0x58
 80066b6:	e5f2      	b.n	800629e <_dtoa_r+0x196>
 80066b8:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80066ba:	2e01      	cmp	r6, #1
 80066bc:	f340 8413 	ble.w	8006ee6 <_dtoa_r+0xdde>
 80066c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80066c2:	1e6e      	subs	r6, r5, #1
 80066c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80066c6:	42b5      	cmp	r5, r6
 80066c8:	bfbf      	itttt	lt
 80066ca:	9d0e      	ldrlt	r5, [sp, #56]	; 0x38
 80066cc:	960e      	strlt	r6, [sp, #56]	; 0x38
 80066ce:	ebc5 0306 	rsblt	r3, r5, r6
 80066d2:	9d11      	ldrlt	r5, [sp, #68]	; 0x44
 80066d4:	bfb6      	itet	lt
 80066d6:	18ed      	addlt	r5, r5, r3
 80066d8:	ebc6 0605 	rsbge	r6, r6, r5
 80066dc:	9511      	strlt	r5, [sp, #68]	; 0x44
 80066de:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80066e0:	bfb8      	it	lt
 80066e2:	2600      	movlt	r6, #0
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	bfb3      	iteet	lt
 80066e8:	f8dd e030 	ldrlt.w	lr, [sp, #48]	; 0x30
 80066ec:	9d0c      	ldrge	r5, [sp, #48]	; 0x30
 80066ee:	9b0b      	ldrge	r3, [sp, #44]	; 0x2c
 80066f0:	ebc5 050e 	rsblt	r5, r5, lr
 80066f4:	bfb8      	it	lt
 80066f6:	2300      	movlt	r3, #0
 80066f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066fa:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80066fe:	441a      	add	r2, r3
 8006700:	449e      	add	lr, r3
 8006702:	4620      	mov	r0, r4
 8006704:	2101      	movs	r1, #1
 8006706:	920c      	str	r2, [sp, #48]	; 0x30
 8006708:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 800670c:	f000 fede 	bl	80074cc <__i2b>
 8006710:	4680      	mov	r8, r0
 8006712:	e6f0      	b.n	80064f6 <_dtoa_r+0x3ee>
 8006714:	2600      	movs	r6, #0
 8006716:	960f      	str	r6, [sp, #60]	; 0x3c
 8006718:	9e07      	ldr	r6, [sp, #28]
 800671a:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
 800671e:	44b6      	add	lr, r6
 8006720:	f10e 0601 	add.w	r6, lr, #1
 8006724:	2e00      	cmp	r6, #0
 8006726:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800672a:	960b      	str	r6, [sp, #44]	; 0x2c
 800672c:	f340 8355 	ble.w	8006dda <_dtoa_r+0xcd2>
 8006730:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006732:	2e0e      	cmp	r6, #14
 8006734:	bf8c      	ite	hi
 8006736:	2500      	movhi	r5, #0
 8006738:	f005 0501 	andls.w	r5, r5, #1
 800673c:	2100      	movs	r1, #0
 800673e:	2e17      	cmp	r6, #23
 8006740:	6461      	str	r1, [r4, #68]	; 0x44
 8006742:	d90a      	bls.n	800675a <_dtoa_r+0x652>
 8006744:	2201      	movs	r2, #1
 8006746:	2304      	movs	r3, #4
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	f103 0014 	add.w	r0, r3, #20
 800674e:	42b0      	cmp	r0, r6
 8006750:	4611      	mov	r1, r2
 8006752:	f102 0201 	add.w	r2, r2, #1
 8006756:	d9f7      	bls.n	8006748 <_dtoa_r+0x640>
 8006758:	6461      	str	r1, [r4, #68]	; 0x44
 800675a:	4620      	mov	r0, r4
 800675c:	f000 fdee 	bl	800733c <_Balloc>
 8006760:	9009      	str	r0, [sp, #36]	; 0x24
 8006762:	6420      	str	r0, [r4, #64]	; 0x40
 8006764:	2d00      	cmp	r5, #0
 8006766:	f43f adfc 	beq.w	8006362 <_dtoa_r+0x25a>
 800676a:	9d07      	ldr	r5, [sp, #28]
 800676c:	2d00      	cmp	r5, #0
 800676e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8006772:	f340 81ab 	ble.w	8006acc <_dtoa_r+0x9c4>
 8006776:	f248 4388 	movw	r3, #33928	; 0x8488
 800677a:	f005 020f 	and.w	r2, r5, #15
 800677e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006786:	112d      	asrs	r5, r5, #4
 8006788:	e9d3 6700 	ldrd	r6, r7, [r3]
 800678c:	06eb      	lsls	r3, r5, #27
 800678e:	f140 818f 	bpl.w	8006ab0 <_dtoa_r+0x9a8>
 8006792:	f248 5350 	movw	r3, #34128	; 0x8550
 8006796:	f6c0 0300 	movt	r3, #2048	; 0x800
 800679a:	4650      	mov	r0, sl
 800679c:	4659      	mov	r1, fp
 800679e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067a2:	f7fa f8d1 	bl	8000948 <__aeabi_ddiv>
 80067a6:	f005 050f 	and.w	r5, r5, #15
 80067aa:	4682      	mov	sl, r0
 80067ac:	468b      	mov	fp, r1
 80067ae:	f04f 0803 	mov.w	r8, #3
 80067b2:	b19d      	cbz	r5, 80067dc <_dtoa_r+0x6d4>
 80067b4:	f248 5950 	movw	r9, #34128	; 0x8550
 80067b8:	f6c0 0900 	movt	r9, #2048	; 0x800
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	07ef      	lsls	r7, r5, #31
 80067c2:	d505      	bpl.n	80067d0 <_dtoa_r+0x6c8>
 80067c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80067c8:	f7f9 ff94 	bl	80006f4 <__aeabi_dmul>
 80067cc:	f108 0801 	add.w	r8, r8, #1
 80067d0:	106d      	asrs	r5, r5, #1
 80067d2:	f109 0908 	add.w	r9, r9, #8
 80067d6:	d1f3      	bne.n	80067c0 <_dtoa_r+0x6b8>
 80067d8:	4606      	mov	r6, r0
 80067da:	460f      	mov	r7, r1
 80067dc:	4632      	mov	r2, r6
 80067de:	463b      	mov	r3, r7
 80067e0:	4650      	mov	r0, sl
 80067e2:	4659      	mov	r1, fp
 80067e4:	f7fa f8b0 	bl	8000948 <__aeabi_ddiv>
 80067e8:	4606      	mov	r6, r0
 80067ea:	460f      	mov	r7, r1
 80067ec:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80067ee:	b155      	cbz	r5, 8006806 <_dtoa_r+0x6fe>
 80067f0:	2300      	movs	r3, #0
 80067f2:	4630      	mov	r0, r6
 80067f4:	4639      	mov	r1, r7
 80067f6:	2200      	movs	r2, #0
 80067f8:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 80067fc:	f7fa f9ec 	bl	8000bd8 <__aeabi_dcmplt>
 8006800:	2800      	cmp	r0, #0
 8006802:	f040 8308 	bne.w	8006e16 <_dtoa_r+0xd0e>
 8006806:	4640      	mov	r0, r8
 8006808:	f7f9 ff0e 	bl	8000628 <__aeabi_i2d>
 800680c:	4632      	mov	r2, r6
 800680e:	463b      	mov	r3, r7
 8006810:	f7f9 ff70 	bl	80006f4 <__aeabi_dmul>
 8006814:	2300      	movs	r3, #0
 8006816:	2200      	movs	r2, #0
 8006818:	f2c4 031c 	movt	r3, #16412	; 0x401c
 800681c:	f7f9 fdb8 	bl	8000390 <__adddf3>
 8006820:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006822:	4680      	mov	r8, r0
 8006824:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006828:	2d00      	cmp	r5, #0
 800682a:	f000 80cb 	beq.w	80069c4 <_dtoa_r+0x8bc>
 800682e:	9d07      	ldr	r5, [sp, #28]
 8006830:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8006834:	9518      	str	r5, [sp, #96]	; 0x60
 8006836:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006838:	f248 4388 	movw	r3, #33928	; 0x8488
 800683c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006840:	2d00      	cmp	r5, #0
 8006842:	f000 8170 	beq.w	8006b26 <_dtoa_r+0xa1e>
 8006846:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800684a:	2100      	movs	r1, #0
 800684c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006850:	2000      	movs	r0, #0
 8006852:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8006856:	f8cd c00c 	str.w	ip, [sp, #12]
 800685a:	f7fa f875 	bl	8000948 <__aeabi_ddiv>
 800685e:	4642      	mov	r2, r8
 8006860:	464b      	mov	r3, r9
 8006862:	f7f9 fd93 	bl	800038c <__aeabi_dsub>
 8006866:	4682      	mov	sl, r0
 8006868:	468b      	mov	fp, r1
 800686a:	4630      	mov	r0, r6
 800686c:	4639      	mov	r1, r7
 800686e:	f7fa f9db 	bl	8000c28 <__aeabi_d2iz>
 8006872:	4605      	mov	r5, r0
 8006874:	f7f9 fed8 	bl	8000628 <__aeabi_i2d>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4630      	mov	r0, r6
 800687e:	4639      	mov	r1, r7
 8006880:	f7f9 fd84 	bl	800038c <__aeabi_dsub>
 8006884:	3530      	adds	r5, #48	; 0x30
 8006886:	fa5f f885 	uxtb.w	r8, r5
 800688a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800688c:	4606      	mov	r6, r0
 800688e:	460f      	mov	r7, r1
 8006890:	f885 8000 	strb.w	r8, [r5]
 8006894:	4650      	mov	r0, sl
 8006896:	3501      	adds	r5, #1
 8006898:	4659      	mov	r1, fp
 800689a:	4632      	mov	r2, r6
 800689c:	463b      	mov	r3, r7
 800689e:	9504      	str	r5, [sp, #16]
 80068a0:	f7fa f9b8 	bl	8000c14 <__aeabi_dcmpgt>
 80068a4:	2800      	cmp	r0, #0
 80068a6:	d162      	bne.n	800696e <_dtoa_r+0x866>
 80068a8:	2100      	movs	r1, #0
 80068aa:	4632      	mov	r2, r6
 80068ac:	463b      	mov	r3, r7
 80068ae:	2000      	movs	r0, #0
 80068b0:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80068b4:	f7f9 fd6a 	bl	800038c <__aeabi_dsub>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4650      	mov	r0, sl
 80068be:	4659      	mov	r1, fp
 80068c0:	f7fa f9a8 	bl	8000c14 <__aeabi_dcmpgt>
 80068c4:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f040 83b8 	bne.w	800703e <_dtoa_r+0xf36>
 80068ce:	f1bc 0f01 	cmp.w	ip, #1
 80068d2:	f340 80f8 	ble.w	8006ac6 <_dtoa_r+0x9be>
 80068d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80068da:	9419      	str	r4, [sp, #100]	; 0x64
 80068dc:	44e1      	add	r9, ip
 80068de:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80068e2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80068e6:	e010      	b.n	800690a <_dtoa_r+0x802>
 80068e8:	2100      	movs	r1, #0
 80068ea:	2000      	movs	r0, #0
 80068ec:	f6c3 71f0 	movt	r1, #16368	; 0x3ff0
 80068f0:	f7f9 fd4c 	bl	800038c <__aeabi_dsub>
 80068f4:	4652      	mov	r2, sl
 80068f6:	465b      	mov	r3, fp
 80068f8:	f7fa f96e 	bl	8000bd8 <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f040 831e 	bne.w	8006f3e <_dtoa_r+0xe36>
 8006902:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006904:	45a9      	cmp	r9, r5
 8006906:	f000 80dd 	beq.w	8006ac4 <_dtoa_r+0x9bc>
 800690a:	2300      	movs	r3, #0
 800690c:	4650      	mov	r0, sl
 800690e:	4659      	mov	r1, fp
 8006910:	2200      	movs	r2, #0
 8006912:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006916:	f7f9 feed 	bl	80006f4 <__aeabi_dmul>
 800691a:	2300      	movs	r3, #0
 800691c:	2200      	movs	r2, #0
 800691e:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006922:	4682      	mov	sl, r0
 8006924:	468b      	mov	fp, r1
 8006926:	4630      	mov	r0, r6
 8006928:	4639      	mov	r1, r7
 800692a:	f7f9 fee3 	bl	80006f4 <__aeabi_dmul>
 800692e:	460d      	mov	r5, r1
 8006930:	4604      	mov	r4, r0
 8006932:	f7fa f979 	bl	8000c28 <__aeabi_d2iz>
 8006936:	4680      	mov	r8, r0
 8006938:	f7f9 fe76 	bl	8000628 <__aeabi_i2d>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4620      	mov	r0, r4
 8006942:	4629      	mov	r1, r5
 8006944:	f7f9 fd22 	bl	800038c <__aeabi_dsub>
 8006948:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800694c:	fa5f f888 	uxtb.w	r8, r8
 8006950:	4652      	mov	r2, sl
 8006952:	465b      	mov	r3, fp
 8006954:	f809 8b01 	strb.w	r8, [r9], #1
 8006958:	4606      	mov	r6, r0
 800695a:	460f      	mov	r7, r1
 800695c:	f7fa f93c 	bl	8000bd8 <__aeabi_dcmplt>
 8006960:	4632      	mov	r2, r6
 8006962:	463b      	mov	r3, r7
 8006964:	2800      	cmp	r0, #0
 8006966:	d0bf      	beq.n	80068e8 <_dtoa_r+0x7e0>
 8006968:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800696a:	f8cd 9010 	str.w	r9, [sp, #16]
 800696e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006970:	9e04      	ldr	r6, [sp, #16]
 8006972:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006976:	9507      	str	r5, [sp, #28]
 8006978:	9609      	str	r6, [sp, #36]	; 0x24
 800697a:	e666      	b.n	800664a <_dtoa_r+0x542>
 800697c:	2600      	movs	r6, #0
 800697e:	960f      	str	r6, [sp, #60]	; 0x3c
 8006980:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006982:	2900      	cmp	r1, #0
 8006984:	f340 8231 	ble.w	8006dea <_dtoa_r+0xce2>
 8006988:	290e      	cmp	r1, #14
 800698a:	bf8c      	ite	hi
 800698c:	2500      	movhi	r5, #0
 800698e:	f005 0501 	andls.w	r5, r5, #1
 8006992:	460e      	mov	r6, r1
 8006994:	9110      	str	r1, [sp, #64]	; 0x40
 8006996:	910b      	str	r1, [sp, #44]	; 0x2c
 8006998:	e6d0      	b.n	800673c <_dtoa_r+0x634>
 800699a:	2601      	movs	r6, #1
 800699c:	960f      	str	r6, [sp, #60]	; 0x3c
 800699e:	e7ef      	b.n	8006980 <_dtoa_r+0x878>
 80069a0:	4640      	mov	r0, r8
 80069a2:	f7f9 fe41 	bl	8000628 <__aeabi_i2d>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4630      	mov	r0, r6
 80069ac:	4639      	mov	r1, r7
 80069ae:	f7f9 fea1 	bl	80006f4 <__aeabi_dmul>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2200      	movs	r2, #0
 80069b6:	f2c4 031c 	movt	r3, #16412	; 0x401c
 80069ba:	f7f9 fce9 	bl	8000390 <__adddf3>
 80069be:	4680      	mov	r8, r0
 80069c0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80069c4:	2300      	movs	r3, #0
 80069c6:	4630      	mov	r0, r6
 80069c8:	2200      	movs	r2, #0
 80069ca:	f2c4 0314 	movt	r3, #16404	; 0x4014
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7f9 fcdc 	bl	800038c <__aeabi_dsub>
 80069d4:	4642      	mov	r2, r8
 80069d6:	464b      	mov	r3, r9
 80069d8:	4682      	mov	sl, r0
 80069da:	468b      	mov	fp, r1
 80069dc:	f7fa f91a 	bl	8000c14 <__aeabi_dcmpgt>
 80069e0:	4606      	mov	r6, r0
 80069e2:	2800      	cmp	r0, #0
 80069e4:	f040 80ff 	bne.w	8006be6 <_dtoa_r+0xade>
 80069e8:	4642      	mov	r2, r8
 80069ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80069ee:	4650      	mov	r0, sl
 80069f0:	4659      	mov	r1, fp
 80069f2:	f7fa f8f1 	bl	8000bd8 <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d065      	beq.n	8006ac6 <_dtoa_r+0x9be>
 80069fa:	46b0      	mov	r8, r6
 80069fc:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 80069fe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006a02:	43ed      	mvns	r5, r5
 8006a04:	9507      	str	r5, [sp, #28]
 8006a06:	2500      	movs	r5, #0
 8006a08:	e60f      	b.n	800662a <_dtoa_r+0x522>
 8006a0a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a0c:	2a00      	cmp	r2, #0
 8006a0e:	f040 8160 	bne.w	8006cd2 <_dtoa_r+0xbca>
 8006a12:	2500      	movs	r5, #0
 8006a14:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006a18:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 8006a1c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006a20:	e006      	b.n	8006a30 <_dtoa_r+0x928>
 8006a22:	4649      	mov	r1, r9
 8006a24:	4620      	mov	r0, r4
 8006a26:	220a      	movs	r2, #10
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f000 fcb7 	bl	800739c <__multadd>
 8006a2e:	4681      	mov	r9, r0
 8006a30:	4648      	mov	r0, r9
 8006a32:	4631      	mov	r1, r6
 8006a34:	f7ff fad2 	bl	8005fdc <quorem>
 8006a38:	3030      	adds	r0, #48	; 0x30
 8006a3a:	f80b 0005 	strb.w	r0, [fp, r5]
 8006a3e:	3501      	adds	r5, #1
 8006a40:	4555      	cmp	r5, sl
 8006a42:	dbee      	blt.n	8006a22 <_dtoa_r+0x91a>
 8006a44:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a46:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006a4a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 8006a4e:	2d01      	cmp	r5, #1
 8006a50:	bfac      	ite	ge
 8006a52:	44ab      	addge	fp, r5
 8006a54:	f10b 0b01 	addlt.w	fp, fp, #1
 8006a58:	4607      	mov	r7, r0
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a5e:	2201      	movs	r2, #1
 8006a60:	4620      	mov	r0, r4
 8006a62:	f000 fe37 	bl	80076d4 <__lshift>
 8006a66:	4631      	mov	r1, r6
 8006a68:	900d      	str	r0, [sp, #52]	; 0x34
 8006a6a:	f000 fe91 	bl	8007790 <__mcmp>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f340 826f 	ble.w	8006f52 <_dtoa_r+0xe4a>
 8006a74:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 8006a78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a7a:	e005      	b.n	8006a88 <_dtoa_r+0x980>
 8006a7c:	4299      	cmp	r1, r3
 8006a7e:	f000 8224 	beq.w	8006eca <_dtoa_r+0xdc2>
 8006a82:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006a86:	469b      	mov	fp, r3
 8006a88:	2a39      	cmp	r2, #57	; 0x39
 8006a8a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006a8e:	d0f5      	beq.n	8006a7c <_dtoa_r+0x974>
 8006a90:	3201      	adds	r2, #1
 8006a92:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006a9c:	e5c5      	b.n	800662a <_dtoa_r+0x522>
 8006a9e:	231c      	movs	r3, #28
 8006aa0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006aa4:	4419      	add	r1, r3
 8006aa6:	441a      	add	r2, r3
 8006aa8:	910c      	str	r1, [sp, #48]	; 0x30
 8006aaa:	441d      	add	r5, r3
 8006aac:	920a      	str	r2, [sp, #40]	; 0x28
 8006aae:	e57d      	b.n	80065ac <_dtoa_r+0x4a4>
 8006ab0:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8006ab4:	f04f 0802 	mov.w	r8, #2
 8006ab8:	e67b      	b.n	80067b2 <_dtoa_r+0x6aa>
 8006aba:	4629      	mov	r1, r5
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fc63 	bl	8007388 <_Bfree>
 8006ac2:	e5be      	b.n	8006642 <_dtoa_r+0x53a>
 8006ac4:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006ac6:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	; 0x50
 8006aca:	e44a      	b.n	8006362 <_dtoa_r+0x25a>
 8006acc:	9e07      	ldr	r6, [sp, #28]
 8006ace:	4275      	negs	r5, r6
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	f000 819b 	beq.w	8006e0c <_dtoa_r+0xd04>
 8006ad6:	f248 4388 	movw	r3, #33928	; 0x8488
 8006ada:	f005 020f 	and.w	r2, r5, #15
 8006ade:	f6c0 0300 	movt	r3, #2048	; 0x800
 8006ae2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aea:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006aee:	f7f9 fe01 	bl	80006f4 <__aeabi_dmul>
 8006af2:	112d      	asrs	r5, r5, #4
 8006af4:	4606      	mov	r6, r0
 8006af6:	460f      	mov	r7, r1
 8006af8:	f000 829d 	beq.w	8007036 <_dtoa_r+0xf2e>
 8006afc:	f248 5950 	movw	r9, #34128	; 0x8550
 8006b00:	f6c0 0900 	movt	r9, #2048	; 0x800
 8006b04:	f04f 0802 	mov.w	r8, #2
 8006b08:	07ee      	lsls	r6, r5, #31
 8006b0a:	d505      	bpl.n	8006b18 <_dtoa_r+0xa10>
 8006b0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006b10:	f7f9 fdf0 	bl	80006f4 <__aeabi_dmul>
 8006b14:	f108 0801 	add.w	r8, r8, #1
 8006b18:	106d      	asrs	r5, r5, #1
 8006b1a:	f109 0908 	add.w	r9, r9, #8
 8006b1e:	d1f3      	bne.n	8006b08 <_dtoa_r+0xa00>
 8006b20:	4606      	mov	r6, r0
 8006b22:	460f      	mov	r7, r1
 8006b24:	e662      	b.n	80067ec <_dtoa_r+0x6e4>
 8006b26:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 8006b2a:	eb03 01cb 	add.w	r1, r3, fp, lsl #3
 8006b2e:	4642      	mov	r2, r8
 8006b30:	464b      	mov	r3, r9
 8006b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b36:	f8cd c00c 	str.w	ip, [sp, #12]
 8006b3a:	f7f9 fddb 	bl	80006f4 <__aeabi_dmul>
 8006b3e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006b42:	4639      	mov	r1, r7
 8006b44:	4630      	mov	r0, r6
 8006b46:	f7fa f86f 	bl	8000c28 <__aeabi_d2iz>
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	f7f9 fd6c 	bl	8000628 <__aeabi_i2d>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4630      	mov	r0, r6
 8006b56:	4639      	mov	r1, r7
 8006b58:	f7f9 fc18 	bl	800038c <__aeabi_dsub>
 8006b5c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006b60:	3530      	adds	r5, #48	; 0x30
 8006b62:	f88e 5000 	strb.w	r5, [lr]
 8006b66:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006b6a:	f1bc 0f01 	cmp.w	ip, #1
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460f      	mov	r7, r1
 8006b72:	f10e 0a01 	add.w	sl, lr, #1
 8006b76:	d01f      	beq.n	8006bb8 <_dtoa_r+0xab0>
 8006b78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006b7a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006b7e:	44e1      	add	r9, ip
 8006b80:	2300      	movs	r3, #0
 8006b82:	2200      	movs	r2, #0
 8006b84:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006b88:	f7f9 fdb4 	bl	80006f4 <__aeabi_dmul>
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	4606      	mov	r6, r0
 8006b90:	f7fa f84a 	bl	8000c28 <__aeabi_d2iz>
 8006b94:	4680      	mov	r8, r0
 8006b96:	f7f9 fd47 	bl	8000628 <__aeabi_i2d>
 8006b9a:	f108 0830 	add.w	r8, r8, #48	; 0x30
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	f7f9 fbf1 	bl	800038c <__aeabi_dsub>
 8006baa:	f805 8f01 	strb.w	r8, [r5, #1]!
 8006bae:	454d      	cmp	r5, r9
 8006bb0:	d1e6      	bne.n	8006b80 <_dtoa_r+0xa78>
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	460f      	mov	r7, r1
 8006bb6:	44da      	add	sl, fp
 8006bb8:	2300      	movs	r3, #0
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
 8006bc0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8006bc4:	f7f9 fbe4 	bl	8000390 <__adddf3>
 8006bc8:	4632      	mov	r2, r6
 8006bca:	463b      	mov	r3, r7
 8006bcc:	f7fa f804 	bl	8000bd8 <__aeabi_dcmplt>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	f000 815d 	beq.w	8006e90 <_dtoa_r+0xd88>
 8006bd6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006bda:	f81a 8c01 	ldrb.w	r8, [sl, #-1]
 8006bde:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006be2:	4652      	mov	r2, sl
 8006be4:	e472      	b.n	80064cc <_dtoa_r+0x3c4>
 8006be6:	2600      	movs	r6, #0
 8006be8:	46b0      	mov	r8, r6
 8006bea:	e513      	b.n	8006614 <_dtoa_r+0x50c>
 8006bec:	6933      	ldr	r3, [r6, #16]
 8006bee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bf2:	6918      	ldr	r0, [r3, #16]
 8006bf4:	f000 fc1e 	bl	8007434 <__hi0bits>
 8006bf8:	f1c0 0020 	rsb	r0, r0, #32
 8006bfc:	e4c0      	b.n	8006580 <_dtoa_r+0x478>
 8006bfe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c00:	4631      	mov	r1, r6
 8006c02:	f000 fdc5 	bl	8007790 <__mcmp>
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f6bf ace6 	bge.w	80065d8 <_dtoa_r+0x4d0>
 8006c0c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006c10:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c12:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 8006c16:	4620      	mov	r0, r4
 8006c18:	220a      	movs	r2, #10
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8cd e01c 	str.w	lr, [sp, #28]
 8006c20:	f000 fbbc 	bl	800739c <__multadd>
 8006c24:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006c26:	900d      	str	r0, [sp, #52]	; 0x34
 8006c28:	2900      	cmp	r1, #0
 8006c2a:	d13b      	bne.n	8006ca4 <_dtoa_r+0xb9c>
 8006c2c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c2e:	2d00      	cmp	r5, #0
 8006c30:	dc03      	bgt.n	8006c3a <_dtoa_r+0xb32>
 8006c32:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8006c34:	2d02      	cmp	r5, #2
 8006c36:	f300 8209 	bgt.w	800704c <_dtoa_r+0xf44>
 8006c3a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006c3c:	950b      	str	r5, [sp, #44]	; 0x2c
 8006c3e:	e6e8      	b.n	8006a12 <_dtoa_r+0x90a>
 8006c40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	f040 8195 	bne.w	8006f72 <_dtoa_r+0xe6a>
 8006c48:	2300      	movs	r3, #0
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8006c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c54:	f7f9 fd4e 	bl	80006f4 <__aeabi_dmul>
 8006c58:	4652      	mov	r2, sl
 8006c5a:	465b      	mov	r3, fp
 8006c5c:	f7f9 ffd0 	bl	8000c00 <__aeabi_dcmpge>
 8006c60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c62:	46b0      	mov	r8, r6
 8006c64:	2800      	cmp	r0, #0
 8006c66:	f47f aec9 	bne.w	80069fc <_dtoa_r+0x8f4>
 8006c6a:	e4d3      	b.n	8006614 <_dtoa_r+0x50c>
 8006c6c:	f1ba 0f00 	cmp.w	sl, #0
 8006c70:	f47f ac80 	bne.w	8006574 <_dtoa_r+0x46c>
 8006c74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c78:	4657      	mov	r7, sl
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f47f ac7b 	bne.w	8006576 <_dtoa_r+0x46e>
 8006c80:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8006c84:	0d3f      	lsrs	r7, r7, #20
 8006c86:	053f      	lsls	r7, r7, #20
 8006c88:	2f00      	cmp	r7, #0
 8006c8a:	f43f ac74 	beq.w	8006576 <_dtoa_r+0x46e>
 8006c8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c90:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8006c94:	3301      	adds	r3, #1
 8006c96:	f10e 0e01 	add.w	lr, lr, #1
 8006c9a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c9c:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8006ca0:	2701      	movs	r7, #1
 8006ca2:	e468      	b.n	8006576 <_dtoa_r+0x46e>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	4641      	mov	r1, r8
 8006ca8:	220a      	movs	r2, #10
 8006caa:	4620      	mov	r0, r4
 8006cac:	f000 fb76 	bl	800739c <__multadd>
 8006cb0:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8006cb4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006cb6:	f1be 0f00 	cmp.w	lr, #0
 8006cba:	bfcc      	ite	gt
 8006cbc:	2300      	movgt	r3, #0
 8006cbe:	2301      	movle	r3, #1
 8006cc0:	2a02      	cmp	r2, #2
 8006cc2:	bfd8      	it	le
 8006cc4:	2300      	movle	r3, #0
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f040 81bf 	bne.w	800704c <_dtoa_r+0xf44>
 8006cce:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	dd05      	ble.n	8006ce2 <_dtoa_r+0xbda>
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	462a      	mov	r2, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fcfa 	bl	80076d4 <__lshift>
 8006ce0:	4680      	mov	r8, r0
 8006ce2:	46c4      	mov	ip, r8
 8006ce4:	2f00      	cmp	r7, #0
 8006ce6:	f040 8157 	bne.w	8006f98 <_dtoa_r+0xe90>
 8006cea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006cec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8006cf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cf2:	44ae      	add	lr, r5
 8006cf4:	f00a 0501 	and.w	r5, sl, #1
 8006cf8:	950b      	str	r5, [sp, #44]	; 0x2c
 8006cfa:	4637      	mov	r7, r6
 8006cfc:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 8006d00:	1c4d      	adds	r5, r1, #1
 8006d02:	46e1      	mov	r9, ip
 8006d04:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006d06:	e00a      	b.n	8006d1e <_dtoa_r+0xc16>
 8006d08:	f000 fb48 	bl	800739c <__multadd>
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4680      	mov	r8, r0
 8006d10:	220a      	movs	r2, #10
 8006d12:	4620      	mov	r0, r4
 8006d14:	2300      	movs	r3, #0
 8006d16:	f000 fb41 	bl	800739c <__multadd>
 8006d1a:	4681      	mov	r9, r0
 8006d1c:	3501      	adds	r5, #1
 8006d1e:	4639      	mov	r1, r7
 8006d20:	4630      	mov	r0, r6
 8006d22:	f7ff f95b 	bl	8005fdc <quorem>
 8006d26:	4641      	mov	r1, r8
 8006d28:	4682      	mov	sl, r0
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 fd30 	bl	8007790 <__mcmp>
 8006d30:	464a      	mov	r2, r9
 8006d32:	4683      	mov	fp, r0
 8006d34:	4639      	mov	r1, r7
 8006d36:	4620      	mov	r0, r4
 8006d38:	f000 fd4c 	bl	80077d4 <__mdiff>
 8006d3c:	f10a 0230 	add.w	r2, sl, #48	; 0x30
 8006d40:	9208      	str	r2, [sp, #32]
 8006d42:	68c2      	ldr	r2, [r0, #12]
 8006d44:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8006d48:	4603      	mov	r3, r0
 8006d4a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d13e      	bne.n	8006dd0 <_dtoa_r+0xcc8>
 8006d52:	4619      	mov	r1, r3
 8006d54:	4630      	mov	r0, r6
 8006d56:	9303      	str	r3, [sp, #12]
 8006d58:	f000 fd1a 	bl	8007790 <__mcmp>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	4602      	mov	r2, r0
 8006d60:	4619      	mov	r1, r3
 8006d62:	4620      	mov	r0, r4
 8006d64:	9203      	str	r2, [sp, #12]
 8006d66:	f000 fb0f 	bl	8007388 <_Bfree>
 8006d6a:	9a03      	ldr	r2, [sp, #12]
 8006d6c:	9926      	ldr	r1, [sp, #152]	; 0x98
 8006d6e:	4311      	orrs	r1, r2
 8006d70:	d103      	bne.n	8006d7a <_dtoa_r+0xc72>
 8006d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 814d 	beq.w	8007014 <_dtoa_r+0xf0c>
 8006d7a:	f1bb 0f00 	cmp.w	fp, #0
 8006d7e:	f2c0 80ba 	blt.w	8006ef6 <_dtoa_r+0xdee>
 8006d82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d84:	ea5b 0303 	orrs.w	r3, fp, r3
 8006d88:	d103      	bne.n	8006d92 <_dtoa_r+0xc8a>
 8006d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d8c:	2900      	cmp	r1, #0
 8006d8e:	f000 80b2 	beq.w	8006ef6 <_dtoa_r+0xdee>
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	f300 811d 	bgt.w	8006fd2 <_dtoa_r+0xeca>
 8006d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d9a:	9a08      	ldr	r2, [sp, #32]
 8006d9c:	429d      	cmp	r5, r3
 8006d9e:	f805 2c01 	strb.w	r2, [r5, #-1]
 8006da2:	46ab      	mov	fp, r5
 8006da4:	f000 8127 	beq.w	8006ff6 <_dtoa_r+0xeee>
 8006da8:	4631      	mov	r1, r6
 8006daa:	220a      	movs	r2, #10
 8006dac:	2300      	movs	r3, #0
 8006dae:	4620      	mov	r0, r4
 8006db0:	f000 faf4 	bl	800739c <__multadd>
 8006db4:	45c8      	cmp	r8, r9
 8006db6:	4606      	mov	r6, r0
 8006db8:	4641      	mov	r1, r8
 8006dba:	4620      	mov	r0, r4
 8006dbc:	f04f 020a 	mov.w	r2, #10
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	d1a0      	bne.n	8006d08 <_dtoa_r+0xc00>
 8006dc6:	f000 fae9 	bl	800739c <__multadd>
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4681      	mov	r9, r0
 8006dce:	e7a5      	b.n	8006d1c <_dtoa_r+0xc14>
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	e7c5      	b.n	8006d60 <_dtoa_r+0xc58>
 8006dd4:	2601      	movs	r6, #1
 8006dd6:	960f      	str	r6, [sp, #60]	; 0x3c
 8006dd8:	e49e      	b.n	8006718 <_dtoa_r+0x610>
 8006dda:	2e0e      	cmp	r6, #14
 8006ddc:	bf8c      	ite	hi
 8006dde:	2300      	movhi	r3, #0
 8006de0:	2301      	movls	r3, #1
 8006de2:	2100      	movs	r1, #0
 8006de4:	401d      	ands	r5, r3
 8006de6:	6461      	str	r1, [r4, #68]	; 0x44
 8006de8:	e4b7      	b.n	800675a <_dtoa_r+0x652>
 8006dea:	2301      	movs	r3, #1
 8006dec:	9327      	str	r3, [sp, #156]	; 0x9c
 8006dee:	9310      	str	r3, [sp, #64]	; 0x40
 8006df0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df2:	e7f6      	b.n	8006de2 <_dtoa_r+0xcda>
 8006df4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fc1b 	bl	8007634 <__pow5mult>
 8006dfe:	900d      	str	r0, [sp, #52]	; 0x34
 8006e00:	f7ff bba6 	b.w	8006550 <_dtoa_r+0x448>
 8006e04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006e08:	9509      	str	r5, [sp, #36]	; 0x24
 8006e0a:	e41e      	b.n	800664a <_dtoa_r+0x542>
 8006e0c:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8006e10:	f04f 0802 	mov.w	r8, #2
 8006e14:	e4ea      	b.n	80067ec <_dtoa_r+0x6e4>
 8006e16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	f43f adc1 	beq.w	80069a0 <_dtoa_r+0x898>
 8006e1e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e20:	2d00      	cmp	r5, #0
 8006e22:	f77f ae50 	ble.w	8006ac6 <_dtoa_r+0x9be>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f2c4 0324 	movt	r3, #16420	; 0x4024
 8006e2e:	4630      	mov	r0, r6
 8006e30:	4639      	mov	r1, r7
 8006e32:	f7f9 fc5f 	bl	80006f4 <__aeabi_dmul>
 8006e36:	4606      	mov	r6, r0
 8006e38:	f108 0001 	add.w	r0, r8, #1
 8006e3c:	460f      	mov	r7, r1
 8006e3e:	f7f9 fbf3 	bl	8000628 <__aeabi_i2d>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
 8006e46:	4630      	mov	r0, r6
 8006e48:	4639      	mov	r1, r7
 8006e4a:	f7f9 fc53 	bl	80006f4 <__aeabi_dmul>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	2200      	movs	r2, #0
 8006e52:	f2c4 031c 	movt	r3, #16412	; 0x401c
 8006e56:	f7f9 fa9b 	bl	8000390 <__adddf3>
 8006e5a:	9d07      	ldr	r5, [sp, #28]
 8006e5c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8006e60:	3d01      	subs	r5, #1
 8006e62:	4680      	mov	r8, r0
 8006e64:	9518      	str	r5, [sp, #96]	; 0x60
 8006e66:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8006e6a:	e4e4      	b.n	8006836 <_dtoa_r+0x72e>
 8006e6c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e70:	2230      	movs	r2, #48	; 0x30
 8006e72:	f889 2000 	strb.w	r2, [r9]
 8006e76:	3501      	adds	r5, #1
 8006e78:	2231      	movs	r2, #49	; 0x31
 8006e7a:	9507      	str	r5, [sp, #28]
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	f7ff bbe4 	b.w	800664a <_dtoa_r+0x542>
 8006e82:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e84:	4620      	mov	r0, r4
 8006e86:	f000 fbd5 	bl	8007634 <__pow5mult>
 8006e8a:	900d      	str	r0, [sp, #52]	; 0x34
 8006e8c:	f7ff bb60 	b.w	8006550 <_dtoa_r+0x448>
 8006e90:	2100      	movs	r1, #0
 8006e92:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006e96:	2000      	movs	r0, #0
 8006e98:	f6c3 71e0 	movt	r1, #16352	; 0x3fe0
 8006e9c:	f7f9 fa76 	bl	800038c <__aeabi_dsub>
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	f7f9 feb6 	bl	8000c14 <__aeabi_dcmpgt>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f43f ae0c 	beq.w	8006ac6 <_dtoa_r+0x9be>
 8006eae:	4653      	mov	r3, sl
 8006eb0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006eb4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006eb8:	2a30      	cmp	r2, #48	; 0x30
 8006eba:	d0f8      	beq.n	8006eae <_dtoa_r+0xda6>
 8006ebc:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006ebe:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006ec2:	9507      	str	r5, [sp, #28]
 8006ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec6:	f7ff bbc0 	b.w	800664a <_dtoa_r+0x542>
 8006eca:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8006ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ed0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8006ed4:	2331      	movs	r3, #49	; 0x31
 8006ed6:	f10e 0e01 	add.w	lr, lr, #1
 8006eda:	f8cd e01c 	str.w	lr, [sp, #28]
 8006ede:	700b      	strb	r3, [r1, #0]
 8006ee0:	4689      	mov	r9, r1
 8006ee2:	f7ff bba2 	b.w	800662a <_dtoa_r+0x522>
 8006ee6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8006ee8:	2d00      	cmp	r5, #0
 8006eea:	d06b      	beq.n	8006fc4 <_dtoa_r+0xebc>
 8006eec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006ef0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006ef2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ef4:	e400      	b.n	80066f8 <_dtoa_r+0x5f0>
 8006ef6:	2a00      	cmp	r2, #0
 8006ef8:	960d      	str	r6, [sp, #52]	; 0x34
 8006efa:	46cc      	mov	ip, r9
 8006efc:	463e      	mov	r6, r7
 8006efe:	9f08      	ldr	r7, [sp, #32]
 8006f00:	dd13      	ble.n	8006f2a <_dtoa_r+0xe22>
 8006f02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	f000 fbe2 	bl	80076d4 <__lshift>
 8006f10:	4631      	mov	r1, r6
 8006f12:	900d      	str	r0, [sp, #52]	; 0x34
 8006f14:	f000 fc3c 	bl	8007790 <__mcmp>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006f1e:	f340 8084 	ble.w	800702a <_dtoa_r+0xf22>
 8006f22:	2f39      	cmp	r7, #57	; 0x39
 8006f24:	d06d      	beq.n	8007002 <_dtoa_r+0xefa>
 8006f26:	f10a 0731 	add.w	r7, sl, #49	; 0x31
 8006f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f30:	701f      	strb	r7, [r3, #0]
 8006f32:	1c59      	adds	r1, r3, #1
 8006f34:	4645      	mov	r5, r8
 8006f36:	9109      	str	r1, [sp, #36]	; 0x24
 8006f38:	46e0      	mov	r8, ip
 8006f3a:	f7ff bb76 	b.w	800662a <_dtoa_r+0x522>
 8006f3e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006f42:	9d04      	ldr	r5, [sp, #16]
 8006f44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f48:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8006f4a:	9509      	str	r5, [sp, #36]	; 0x24
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	f7ff babd 	b.w	80064cc <_dtoa_r+0x3c4>
 8006f52:	d102      	bne.n	8006f5a <_dtoa_r+0xe52>
 8006f54:	07fb      	lsls	r3, r7, #31
 8006f56:	f53f ad8d 	bmi.w	8006a74 <_dtoa_r+0x96c>
 8006f5a:	465b      	mov	r3, fp
 8006f5c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006f60:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8006f64:	2a30      	cmp	r2, #48	; 0x30
 8006f66:	d0f8      	beq.n	8006f5a <_dtoa_r+0xe52>
 8006f68:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006f6e:	f7ff bb5c 	b.w	800662a <_dtoa_r+0x522>
 8006f72:	2600      	movs	r6, #0
 8006f74:	e541      	b.n	80069fa <_dtoa_r+0x8f2>
 8006f76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	f7f9 fe21 	bl	8000bc4 <__aeabi_dcmpeq>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	f43f af3e 	beq.w	8006e04 <_dtoa_r+0xcfc>
 8006f88:	f018 0f01 	tst.w	r8, #1
 8006f8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006f90:	f43f af3a 	beq.w	8006e08 <_dtoa_r+0xd00>
 8006f94:	f7ff ba8d 	b.w	80064b2 <_dtoa_r+0x3aa>
 8006f98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f000 f9cd 	bl	800733c <_Balloc>
 8006fa2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006fa6:	1c9a      	adds	r2, r3, #2
 8006fa8:	4605      	mov	r5, r0
 8006faa:	0092      	lsls	r2, r2, #2
 8006fac:	f108 010c 	add.w	r1, r8, #12
 8006fb0:	300c      	adds	r0, #12
 8006fb2:	f7f9 f94d 	bl	8000250 <memcpy>
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f000 fb8a 	bl	80076d4 <__lshift>
 8006fc0:	4684      	mov	ip, r0
 8006fc2:	e692      	b.n	8006cea <_dtoa_r+0xbe2>
 8006fc4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006fc6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006fc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006fca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006fce:	f7ff bb93 	b.w	80066f8 <_dtoa_r+0x5f0>
 8006fd2:	960d      	str	r6, [sp, #52]	; 0x34
 8006fd4:	463e      	mov	r6, r7
 8006fd6:	9f08      	ldr	r7, [sp, #32]
 8006fd8:	2f39      	cmp	r7, #57	; 0x39
 8006fda:	46cc      	mov	ip, r9
 8006fdc:	d011      	beq.n	8007002 <_dtoa_r+0xefa>
 8006fde:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fe0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006fe2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fe6:	3701      	adds	r7, #1
 8006fe8:	3101      	adds	r1, #1
 8006fea:	702f      	strb	r7, [r5, #0]
 8006fec:	9109      	str	r1, [sp, #36]	; 0x24
 8006fee:	4645      	mov	r5, r8
 8006ff0:	46e0      	mov	r8, ip
 8006ff2:	f7ff bb1a 	b.w	800662a <_dtoa_r+0x522>
 8006ff6:	960d      	str	r6, [sp, #52]	; 0x34
 8006ff8:	4645      	mov	r5, r8
 8006ffa:	463e      	mov	r6, r7
 8006ffc:	46c8      	mov	r8, r9
 8006ffe:	9f08      	ldr	r7, [sp, #32]
 8007000:	e52c      	b.n	8006a5c <_dtoa_r+0x954>
 8007002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007004:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007006:	2239      	movs	r2, #57	; 0x39
 8007008:	4645      	mov	r5, r8
 800700a:	701a      	strb	r2, [r3, #0]
 800700c:	46e0      	mov	r8, ip
 800700e:	f103 0b01 	add.w	fp, r3, #1
 8007012:	e539      	b.n	8006a88 <_dtoa_r+0x980>
 8007014:	960d      	str	r6, [sp, #52]	; 0x34
 8007016:	463e      	mov	r6, r7
 8007018:	9f08      	ldr	r7, [sp, #32]
 800701a:	2f39      	cmp	r7, #57	; 0x39
 800701c:	46cc      	mov	ip, r9
 800701e:	d0f0      	beq.n	8007002 <_dtoa_r+0xefa>
 8007020:	f1bb 0f00 	cmp.w	fp, #0
 8007024:	f73f af7f 	bgt.w	8006f26 <_dtoa_r+0xe1e>
 8007028:	e77f      	b.n	8006f2a <_dtoa_r+0xe22>
 800702a:	f47f af7e 	bne.w	8006f2a <_dtoa_r+0xe22>
 800702e:	07fa      	lsls	r2, r7, #31
 8007030:	f57f af7b 	bpl.w	8006f2a <_dtoa_r+0xe22>
 8007034:	e775      	b.n	8006f22 <_dtoa_r+0xe1a>
 8007036:	f04f 0802 	mov.w	r8, #2
 800703a:	f7ff bbd7 	b.w	80067ec <_dtoa_r+0x6e4>
 800703e:	9e04      	ldr	r6, [sp, #16]
 8007040:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007044:	9609      	str	r6, [sp, #36]	; 0x24
 8007046:	4632      	mov	r2, r6
 8007048:	f7ff ba40 	b.w	80064cc <_dtoa_r+0x3c4>
 800704c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800704e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007050:	f7ff bace 	b.w	80065f0 <_dtoa_r+0x4e8>
 8007054:	f43f aaaa 	beq.w	80065ac <_dtoa_r+0x4a4>
 8007058:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800705c:	e520      	b.n	8006aa0 <_dtoa_r+0x998>
 800705e:	bf00      	nop

08007060 <_malloc_trim_r>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	f240 449c 	movw	r4, #1180	; 0x49c
 8007066:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800706a:	460f      	mov	r7, r1
 800706c:	4605      	mov	r5, r0
 800706e:	f7fa fd7d 	bl	8001b6c <__malloc_lock>
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	685e      	ldr	r6, [r3, #4]
 8007076:	f026 0603 	bic.w	r6, r6, #3
 800707a:	1bf7      	subs	r7, r6, r7
 800707c:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 8007080:	0b3f      	lsrs	r7, r7, #12
 8007082:	3f01      	subs	r7, #1
 8007084:	033f      	lsls	r7, r7, #12
 8007086:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 800708a:	db07      	blt.n	800709c <_malloc_trim_r+0x3c>
 800708c:	4628      	mov	r0, r5
 800708e:	2100      	movs	r1, #0
 8007090:	f7fa fd3e 	bl	8001b10 <_sbrk_r>
 8007094:	68a3      	ldr	r3, [r4, #8]
 8007096:	4433      	add	r3, r6
 8007098:	4298      	cmp	r0, r3
 800709a:	d004      	beq.n	80070a6 <_malloc_trim_r+0x46>
 800709c:	4628      	mov	r0, r5
 800709e:	f7fa fd69 	bl	8001b74 <__malloc_unlock>
 80070a2:	2000      	movs	r0, #0
 80070a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a6:	4628      	mov	r0, r5
 80070a8:	4279      	negs	r1, r7
 80070aa:	f7fa fd31 	bl	8001b10 <_sbrk_r>
 80070ae:	3001      	adds	r0, #1
 80070b0:	d010      	beq.n	80070d4 <_malloc_trim_r+0x74>
 80070b2:	f640 2324 	movw	r3, #2596	; 0xa24
 80070b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80070ba:	68a1      	ldr	r1, [r4, #8]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	1bf6      	subs	r6, r6, r7
 80070c0:	f046 0601 	orr.w	r6, r6, #1
 80070c4:	4628      	mov	r0, r5
 80070c6:	1bd7      	subs	r7, r2, r7
 80070c8:	604e      	str	r6, [r1, #4]
 80070ca:	601f      	str	r7, [r3, #0]
 80070cc:	f7fa fd52 	bl	8001b74 <__malloc_unlock>
 80070d0:	2001      	movs	r0, #1
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070d4:	4628      	mov	r0, r5
 80070d6:	2100      	movs	r1, #0
 80070d8:	f7fa fd1a 	bl	8001b10 <_sbrk_r>
 80070dc:	68a3      	ldr	r3, [r4, #8]
 80070de:	1ac2      	subs	r2, r0, r3
 80070e0:	2a0f      	cmp	r2, #15
 80070e2:	dddb      	ble.n	800709c <_malloc_trim_r+0x3c>
 80070e4:	f640 04a8 	movw	r4, #2216	; 0x8a8
 80070e8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80070ec:	f640 2124 	movw	r1, #2596	; 0xa24
 80070f0:	6824      	ldr	r4, [r4, #0]
 80070f2:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	1b00      	subs	r0, r0, r4
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	6008      	str	r0, [r1, #0]
 8007100:	e7cc      	b.n	800709c <_malloc_trim_r+0x3c>
 8007102:	bf00      	nop

08007104 <_free_r>:
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	460e      	mov	r6, r1
 800710a:	4681      	mov	r9, r0
 800710c:	2900      	cmp	r1, #0
 800710e:	d060      	beq.n	80071d2 <_free_r+0xce>
 8007110:	f7fa fd2c 	bl	8001b6c <__malloc_lock>
 8007114:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8007118:	f1a6 0408 	sub.w	r4, r6, #8
 800711c:	f021 0301 	bic.w	r3, r1, #1
 8007120:	18e2      	adds	r2, r4, r3
 8007122:	f240 459c 	movw	r5, #1180	; 0x49c
 8007126:	6857      	ldr	r7, [r2, #4]
 8007128:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800712c:	f027 0003 	bic.w	r0, r7, #3
 8007130:	68af      	ldr	r7, [r5, #8]
 8007132:	4297      	cmp	r7, r2
 8007134:	d063      	beq.n	80071fe <_free_r+0xfa>
 8007136:	f011 0c01 	ands.w	ip, r1, #1
 800713a:	6050      	str	r0, [r2, #4]
 800713c:	bf18      	it	ne
 800713e:	2100      	movne	r1, #0
 8007140:	d111      	bne.n	8007166 <_free_r+0x62>
 8007142:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8007146:	1a64      	subs	r4, r4, r1
 8007148:	f105 0808 	add.w	r8, r5, #8
 800714c:	68a6      	ldr	r6, [r4, #8]
 800714e:	4546      	cmp	r6, r8
 8007150:	bf18      	it	ne
 8007152:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 8007156:	440b      	add	r3, r1
 8007158:	bf1d      	ittte	ne
 800715a:	f8c6 800c 	strne.w	r8, [r6, #12]
 800715e:	4661      	movne	r1, ip
 8007160:	f8c8 6008 	strne.w	r6, [r8, #8]
 8007164:	2101      	moveq	r1, #1
 8007166:	1816      	adds	r6, r2, r0
 8007168:	6876      	ldr	r6, [r6, #4]
 800716a:	07f6      	lsls	r6, r6, #31
 800716c:	d408      	bmi.n	8007180 <_free_r+0x7c>
 800716e:	4403      	add	r3, r0
 8007170:	6890      	ldr	r0, [r2, #8]
 8007172:	b911      	cbnz	r1, 800717a <_free_r+0x76>
 8007174:	4e49      	ldr	r6, [pc, #292]	; (800729c <_free_r+0x198>)
 8007176:	42b0      	cmp	r0, r6
 8007178:	d060      	beq.n	800723c <_free_r+0x138>
 800717a:	68d2      	ldr	r2, [r2, #12]
 800717c:	60c2      	str	r2, [r0, #12]
 800717e:	6090      	str	r0, [r2, #8]
 8007180:	f043 0201 	orr.w	r2, r3, #1
 8007184:	6062      	str	r2, [r4, #4]
 8007186:	50e3      	str	r3, [r4, r3]
 8007188:	b9f1      	cbnz	r1, 80071c8 <_free_r+0xc4>
 800718a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718e:	d322      	bcc.n	80071d6 <_free_r+0xd2>
 8007190:	0a5a      	lsrs	r2, r3, #9
 8007192:	2a04      	cmp	r2, #4
 8007194:	d85b      	bhi.n	800724e <_free_r+0x14a>
 8007196:	0998      	lsrs	r0, r3, #6
 8007198:	3038      	adds	r0, #56	; 0x38
 800719a:	0041      	lsls	r1, r0, #1
 800719c:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80071a0:	f240 419c 	movw	r1, #1180	; 0x49c
 80071a4:	68aa      	ldr	r2, [r5, #8]
 80071a6:	42aa      	cmp	r2, r5
 80071a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80071ac:	d05b      	beq.n	8007266 <_free_r+0x162>
 80071ae:	6851      	ldr	r1, [r2, #4]
 80071b0:	f021 0103 	bic.w	r1, r1, #3
 80071b4:	428b      	cmp	r3, r1
 80071b6:	d202      	bcs.n	80071be <_free_r+0xba>
 80071b8:	6892      	ldr	r2, [r2, #8]
 80071ba:	4295      	cmp	r5, r2
 80071bc:	d1f7      	bne.n	80071ae <_free_r+0xaa>
 80071be:	68d3      	ldr	r3, [r2, #12]
 80071c0:	60e3      	str	r3, [r4, #12]
 80071c2:	60a2      	str	r2, [r4, #8]
 80071c4:	609c      	str	r4, [r3, #8]
 80071c6:	60d4      	str	r4, [r2, #12]
 80071c8:	4648      	mov	r0, r9
 80071ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ce:	f7fa bcd1 	b.w	8001b74 <__malloc_unlock>
 80071d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d6:	08db      	lsrs	r3, r3, #3
 80071d8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80071dc:	6868      	ldr	r0, [r5, #4]
 80071de:	6891      	ldr	r1, [r2, #8]
 80071e0:	60e2      	str	r2, [r4, #12]
 80071e2:	2601      	movs	r6, #1
 80071e4:	109b      	asrs	r3, r3, #2
 80071e6:	fa06 f303 	lsl.w	r3, r6, r3
 80071ea:	4318      	orrs	r0, r3
 80071ec:	60a1      	str	r1, [r4, #8]
 80071ee:	6068      	str	r0, [r5, #4]
 80071f0:	6094      	str	r4, [r2, #8]
 80071f2:	4648      	mov	r0, r9
 80071f4:	60cc      	str	r4, [r1, #12]
 80071f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071fa:	f7fa bcbb 	b.w	8001b74 <__malloc_unlock>
 80071fe:	07cf      	lsls	r7, r1, #31
 8007200:	4418      	add	r0, r3
 8007202:	d407      	bmi.n	8007214 <_free_r+0x110>
 8007204:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8007208:	1ae4      	subs	r4, r4, r3
 800720a:	4418      	add	r0, r3
 800720c:	68a2      	ldr	r2, [r4, #8]
 800720e:	68e3      	ldr	r3, [r4, #12]
 8007210:	60d3      	str	r3, [r2, #12]
 8007212:	609a      	str	r2, [r3, #8]
 8007214:	f640 02a4 	movw	r2, #2212	; 0x8a4
 8007218:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800721c:	f040 0101 	orr.w	r1, r0, #1
 8007220:	6813      	ldr	r3, [r2, #0]
 8007222:	6061      	str	r1, [r4, #4]
 8007224:	4298      	cmp	r0, r3
 8007226:	60ac      	str	r4, [r5, #8]
 8007228:	d3ce      	bcc.n	80071c8 <_free_r+0xc4>
 800722a:	f640 2320 	movw	r3, #2592	; 0xa20
 800722e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007232:	4648      	mov	r0, r9
 8007234:	6819      	ldr	r1, [r3, #0]
 8007236:	f7ff ff13 	bl	8007060 <_malloc_trim_r>
 800723a:	e7c5      	b.n	80071c8 <_free_r+0xc4>
 800723c:	f043 0201 	orr.w	r2, r3, #1
 8007240:	616c      	str	r4, [r5, #20]
 8007242:	612c      	str	r4, [r5, #16]
 8007244:	60e0      	str	r0, [r4, #12]
 8007246:	60a0      	str	r0, [r4, #8]
 8007248:	6062      	str	r2, [r4, #4]
 800724a:	50e3      	str	r3, [r4, r3]
 800724c:	e7bc      	b.n	80071c8 <_free_r+0xc4>
 800724e:	2a14      	cmp	r2, #20
 8007250:	bf9c      	itt	ls
 8007252:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 8007256:	0041      	lslls	r1, r0, #1
 8007258:	d9a0      	bls.n	800719c <_free_r+0x98>
 800725a:	2a54      	cmp	r2, #84	; 0x54
 800725c:	d80c      	bhi.n	8007278 <_free_r+0x174>
 800725e:	0b18      	lsrs	r0, r3, #12
 8007260:	306e      	adds	r0, #110	; 0x6e
 8007262:	0041      	lsls	r1, r0, #1
 8007264:	e79a      	b.n	800719c <_free_r+0x98>
 8007266:	684b      	ldr	r3, [r1, #4]
 8007268:	1080      	asrs	r0, r0, #2
 800726a:	2501      	movs	r5, #1
 800726c:	fa05 f000 	lsl.w	r0, r5, r0
 8007270:	4303      	orrs	r3, r0
 8007272:	604b      	str	r3, [r1, #4]
 8007274:	4613      	mov	r3, r2
 8007276:	e7a3      	b.n	80071c0 <_free_r+0xbc>
 8007278:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800727c:	d803      	bhi.n	8007286 <_free_r+0x182>
 800727e:	0bd8      	lsrs	r0, r3, #15
 8007280:	3077      	adds	r0, #119	; 0x77
 8007282:	0041      	lsls	r1, r0, #1
 8007284:	e78a      	b.n	800719c <_free_r+0x98>
 8007286:	f240 5154 	movw	r1, #1364	; 0x554
 800728a:	428a      	cmp	r2, r1
 800728c:	bf9d      	ittte	ls
 800728e:	0c98      	lsrls	r0, r3, #18
 8007290:	307c      	addls	r0, #124	; 0x7c
 8007292:	0041      	lslls	r1, r0, #1
 8007294:	21fc      	movhi	r1, #252	; 0xfc
 8007296:	bf88      	it	hi
 8007298:	207e      	movhi	r0, #126	; 0x7e
 800729a:	e77f      	b.n	800719c <_free_r+0x98>
 800729c:	200004a4 	.word	0x200004a4

080072a0 <_localeconv_r>:
 80072a0:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80072a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <memchr>:
 80072ac:	0783      	lsls	r3, r0, #30
 80072ae:	b470      	push	{r4, r5, r6}
 80072b0:	b2c9      	uxtb	r1, r1
 80072b2:	d03f      	beq.n	8007334 <memchr+0x88>
 80072b4:	1e54      	subs	r4, r2, #1
 80072b6:	b32a      	cbz	r2, 8007304 <memchr+0x58>
 80072b8:	7803      	ldrb	r3, [r0, #0]
 80072ba:	428b      	cmp	r3, r1
 80072bc:	d023      	beq.n	8007306 <memchr+0x5a>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	e004      	b.n	80072cc <memchr+0x20>
 80072c2:	b1fc      	cbz	r4, 8007304 <memchr+0x58>
 80072c4:	7804      	ldrb	r4, [r0, #0]
 80072c6:	428c      	cmp	r4, r1
 80072c8:	d01d      	beq.n	8007306 <memchr+0x5a>
 80072ca:	4614      	mov	r4, r2
 80072cc:	f013 0f03 	tst.w	r3, #3
 80072d0:	4618      	mov	r0, r3
 80072d2:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 80072d6:	f103 0301 	add.w	r3, r3, #1
 80072da:	d1f2      	bne.n	80072c2 <memchr+0x16>
 80072dc:	2c03      	cmp	r4, #3
 80072de:	d814      	bhi.n	800730a <memchr+0x5e>
 80072e0:	1e65      	subs	r5, r4, #1
 80072e2:	b34c      	cbz	r4, 8007338 <memchr+0x8c>
 80072e4:	7803      	ldrb	r3, [r0, #0]
 80072e6:	428b      	cmp	r3, r1
 80072e8:	d00d      	beq.n	8007306 <memchr+0x5a>
 80072ea:	1c42      	adds	r2, r0, #1
 80072ec:	2300      	movs	r3, #0
 80072ee:	e002      	b.n	80072f6 <memchr+0x4a>
 80072f0:	7804      	ldrb	r4, [r0, #0]
 80072f2:	428c      	cmp	r4, r1
 80072f4:	d007      	beq.n	8007306 <memchr+0x5a>
 80072f6:	42ab      	cmp	r3, r5
 80072f8:	4610      	mov	r0, r2
 80072fa:	f103 0301 	add.w	r3, r3, #1
 80072fe:	f102 0201 	add.w	r2, r2, #1
 8007302:	d1f5      	bne.n	80072f0 <memchr+0x44>
 8007304:	2000      	movs	r0, #0
 8007306:	bc70      	pop	{r4, r5, r6}
 8007308:	4770      	bx	lr
 800730a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800730e:	4603      	mov	r3, r0
 8007310:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8007314:	4618      	mov	r0, r3
 8007316:	3304      	adds	r3, #4
 8007318:	6802      	ldr	r2, [r0, #0]
 800731a:	4072      	eors	r2, r6
 800731c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8007320:	ea25 0202 	bic.w	r2, r5, r2
 8007324:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8007328:	d1da      	bne.n	80072e0 <memchr+0x34>
 800732a:	3c04      	subs	r4, #4
 800732c:	2c03      	cmp	r4, #3
 800732e:	4618      	mov	r0, r3
 8007330:	d8f0      	bhi.n	8007314 <memchr+0x68>
 8007332:	e7d5      	b.n	80072e0 <memchr+0x34>
 8007334:	4614      	mov	r4, r2
 8007336:	e7d1      	b.n	80072dc <memchr+0x30>
 8007338:	4620      	mov	r0, r4
 800733a:	e7e4      	b.n	8007306 <memchr+0x5a>

0800733c <_Balloc>:
 800733c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800733e:	b570      	push	{r4, r5, r6, lr}
 8007340:	4605      	mov	r5, r0
 8007342:	460c      	mov	r4, r1
 8007344:	b14a      	cbz	r2, 800735a <_Balloc+0x1e>
 8007346:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 800734a:	b180      	cbz	r0, 800736e <_Balloc+0x32>
 800734c:	6801      	ldr	r1, [r0, #0]
 800734e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007352:	2200      	movs	r2, #0
 8007354:	6102      	str	r2, [r0, #16]
 8007356:	60c2      	str	r2, [r0, #12]
 8007358:	bd70      	pop	{r4, r5, r6, pc}
 800735a:	2221      	movs	r2, #33	; 0x21
 800735c:	2104      	movs	r1, #4
 800735e:	f000 fba9 	bl	8007ab4 <_calloc_r>
 8007362:	64e8      	str	r0, [r5, #76]	; 0x4c
 8007364:	4602      	mov	r2, r0
 8007366:	2800      	cmp	r0, #0
 8007368:	d1ed      	bne.n	8007346 <_Balloc+0xa>
 800736a:	2000      	movs	r0, #0
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	2101      	movs	r1, #1
 8007370:	fa01 f604 	lsl.w	r6, r1, r4
 8007374:	1d72      	adds	r2, r6, #5
 8007376:	4628      	mov	r0, r5
 8007378:	0092      	lsls	r2, r2, #2
 800737a:	f000 fb9b 	bl	8007ab4 <_calloc_r>
 800737e:	2800      	cmp	r0, #0
 8007380:	d0f3      	beq.n	800736a <_Balloc+0x2e>
 8007382:	6044      	str	r4, [r0, #4]
 8007384:	6086      	str	r6, [r0, #8]
 8007386:	e7e4      	b.n	8007352 <_Balloc+0x16>

08007388 <_Bfree>:
 8007388:	b131      	cbz	r1, 8007398 <_Bfree+0x10>
 800738a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800738c:	684a      	ldr	r2, [r1, #4]
 800738e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007392:	6008      	str	r0, [r1, #0]
 8007394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <__multadd>:
 800739c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a0:	f8d1 8010 	ldr.w	r8, [r1, #16]
 80073a4:	b082      	sub	sp, #8
 80073a6:	4689      	mov	r9, r1
 80073a8:	4682      	mov	sl, r0
 80073aa:	f101 0514 	add.w	r5, r1, #20
 80073ae:	2400      	movs	r4, #0
 80073b0:	682f      	ldr	r7, [r5, #0]
 80073b2:	b2be      	uxth	r6, r7
 80073b4:	0c3f      	lsrs	r7, r7, #16
 80073b6:	fb02 3606 	mla	r6, r2, r6, r3
 80073ba:	fb02 f307 	mul.w	r3, r2, r7
 80073be:	eb03 4316 	add.w	r3, r3, r6, lsr #16
 80073c2:	3401      	adds	r4, #1
 80073c4:	b2b6      	uxth	r6, r6
 80073c6:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 80073ca:	45a0      	cmp	r8, r4
 80073cc:	f845 6b04 	str.w	r6, [r5], #4
 80073d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80073d4:	dcec      	bgt.n	80073b0 <__multadd+0x14>
 80073d6:	b153      	cbz	r3, 80073ee <__multadd+0x52>
 80073d8:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80073dc:	4590      	cmp	r8, r2
 80073de:	da0a      	bge.n	80073f6 <__multadd+0x5a>
 80073e0:	eb09 0188 	add.w	r1, r9, r8, lsl #2
 80073e4:	f108 0201 	add.w	r2, r8, #1
 80073e8:	614b      	str	r3, [r1, #20]
 80073ea:	f8c9 2010 	str.w	r2, [r9, #16]
 80073ee:	4648      	mov	r0, r9
 80073f0:	b002      	add	sp, #8
 80073f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	3101      	adds	r1, #1
 80073fe:	4650      	mov	r0, sl
 8007400:	f7ff ff9c 	bl	800733c <_Balloc>
 8007404:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8007408:	3202      	adds	r2, #2
 800740a:	f109 010c 	add.w	r1, r9, #12
 800740e:	4604      	mov	r4, r0
 8007410:	0092      	lsls	r2, r2, #2
 8007412:	300c      	adds	r0, #12
 8007414:	f7f8 ff1c 	bl	8000250 <memcpy>
 8007418:	f8da 204c 	ldr.w	r2, [sl, #76]	; 0x4c
 800741c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007420:	9b01      	ldr	r3, [sp, #4]
 8007422:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8007426:	f8c9 0000 	str.w	r0, [r9]
 800742a:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
 800742e:	46a1      	mov	r9, r4
 8007430:	e7d6      	b.n	80073e0 <__multadd+0x44>
 8007432:	bf00      	nop

08007434 <__hi0bits>:
 8007434:	0c03      	lsrs	r3, r0, #16
 8007436:	bf06      	itte	eq
 8007438:	0400      	lsleq	r0, r0, #16
 800743a:	2310      	moveq	r3, #16
 800743c:	2300      	movne	r3, #0
 800743e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007442:	bf04      	itt	eq
 8007444:	0200      	lsleq	r0, r0, #8
 8007446:	3308      	addeq	r3, #8
 8007448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800744c:	bf04      	itt	eq
 800744e:	0100      	lsleq	r0, r0, #4
 8007450:	3304      	addeq	r3, #4
 8007452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007456:	bf04      	itt	eq
 8007458:	0080      	lsleq	r0, r0, #2
 800745a:	3302      	addeq	r3, #2
 800745c:	2800      	cmp	r0, #0
 800745e:	db05      	blt.n	800746c <__hi0bits+0x38>
 8007460:	0042      	lsls	r2, r0, #1
 8007462:	d401      	bmi.n	8007468 <__hi0bits+0x34>
 8007464:	2020      	movs	r0, #32
 8007466:	4770      	bx	lr
 8007468:	1c58      	adds	r0, r3, #1
 800746a:	4770      	bx	lr
 800746c:	4618      	mov	r0, r3
 800746e:	4770      	bx	lr

08007470 <__lo0bits>:
 8007470:	6803      	ldr	r3, [r0, #0]
 8007472:	f013 0207 	ands.w	r2, r3, #7
 8007476:	d00b      	beq.n	8007490 <__lo0bits+0x20>
 8007478:	07d9      	lsls	r1, r3, #31
 800747a:	d424      	bmi.n	80074c6 <__lo0bits+0x56>
 800747c:	079a      	lsls	r2, r3, #30
 800747e:	bf4b      	itete	mi
 8007480:	085b      	lsrmi	r3, r3, #1
 8007482:	089b      	lsrpl	r3, r3, #2
 8007484:	6003      	strmi	r3, [r0, #0]
 8007486:	6003      	strpl	r3, [r0, #0]
 8007488:	bf4c      	ite	mi
 800748a:	2001      	movmi	r0, #1
 800748c:	2002      	movpl	r0, #2
 800748e:	4770      	bx	lr
 8007490:	b299      	uxth	r1, r3
 8007492:	b909      	cbnz	r1, 8007498 <__lo0bits+0x28>
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	2210      	movs	r2, #16
 8007498:	f013 0fff 	tst.w	r3, #255	; 0xff
 800749c:	bf04      	itt	eq
 800749e:	0a1b      	lsreq	r3, r3, #8
 80074a0:	3208      	addeq	r2, #8
 80074a2:	0719      	lsls	r1, r3, #28
 80074a4:	bf04      	itt	eq
 80074a6:	091b      	lsreq	r3, r3, #4
 80074a8:	3204      	addeq	r2, #4
 80074aa:	0799      	lsls	r1, r3, #30
 80074ac:	bf04      	itt	eq
 80074ae:	089b      	lsreq	r3, r3, #2
 80074b0:	3202      	addeq	r2, #2
 80074b2:	07d9      	lsls	r1, r3, #31
 80074b4:	d404      	bmi.n	80074c0 <__lo0bits+0x50>
 80074b6:	085b      	lsrs	r3, r3, #1
 80074b8:	d101      	bne.n	80074be <__lo0bits+0x4e>
 80074ba:	2020      	movs	r0, #32
 80074bc:	4770      	bx	lr
 80074be:	3201      	adds	r2, #1
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	4610      	mov	r0, r2
 80074c4:	4770      	bx	lr
 80074c6:	2000      	movs	r0, #0
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop

080074cc <__i2b>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	460c      	mov	r4, r1
 80074d0:	2101      	movs	r1, #1
 80074d2:	f7ff ff33 	bl	800733c <_Balloc>
 80074d6:	2201      	movs	r2, #1
 80074d8:	6144      	str	r4, [r0, #20]
 80074da:	6102      	str	r2, [r0, #16]
 80074dc:	bd10      	pop	{r4, pc}
 80074de:	bf00      	nop

080074e0 <__multiply>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	690c      	ldr	r4, [r1, #16]
 80074e6:	6917      	ldr	r7, [r2, #16]
 80074e8:	42bc      	cmp	r4, r7
 80074ea:	b085      	sub	sp, #20
 80074ec:	4688      	mov	r8, r1
 80074ee:	4691      	mov	r9, r2
 80074f0:	da04      	bge.n	80074fc <__multiply+0x1c>
 80074f2:	4622      	mov	r2, r4
 80074f4:	46c8      	mov	r8, r9
 80074f6:	463c      	mov	r4, r7
 80074f8:	4689      	mov	r9, r1
 80074fa:	4617      	mov	r7, r2
 80074fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007504:	19e6      	adds	r6, r4, r7
 8007506:	429e      	cmp	r6, r3
 8007508:	bfc8      	it	gt
 800750a:	3101      	addgt	r1, #1
 800750c:	f7ff ff16 	bl	800733c <_Balloc>
 8007510:	f100 0514 	add.w	r5, r0, #20
 8007514:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8007518:	4565      	cmp	r5, ip
 800751a:	9001      	str	r0, [sp, #4]
 800751c:	bf3c      	itt	cc
 800751e:	462b      	movcc	r3, r5
 8007520:	2000      	movcc	r0, #0
 8007522:	d203      	bcs.n	800752c <__multiply+0x4c>
 8007524:	f843 0b04 	str.w	r0, [r3], #4
 8007528:	459c      	cmp	ip, r3
 800752a:	d8fb      	bhi.n	8007524 <__multiply+0x44>
 800752c:	f109 0914 	add.w	r9, r9, #20
 8007530:	eb09 0387 	add.w	r3, r9, r7, lsl #2
 8007534:	4599      	cmp	r9, r3
 8007536:	f108 0814 	add.w	r8, r8, #20
 800753a:	bf38      	it	cc
 800753c:	f8cd c008 	strcc.w	ip, [sp, #8]
 8007540:	f8cd 8000 	str.w	r8, [sp]
 8007544:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8007548:	bf3e      	ittt	cc
 800754a:	464f      	movcc	r7, r9
 800754c:	469c      	movcc	ip, r3
 800754e:	9603      	strcc	r6, [sp, #12]
 8007550:	d25c      	bcs.n	800760c <__multiply+0x12c>
 8007552:	f857 3b04 	ldr.w	r3, [r7], #4
 8007556:	fa1f f883 	uxth.w	r8, r3
 800755a:	f1b8 0f00 	cmp.w	r8, #0
 800755e:	d024      	beq.n	80075aa <__multiply+0xca>
 8007560:	9a00      	ldr	r2, [sp, #0]
 8007562:	462b      	mov	r3, r5
 8007564:	f04f 0900 	mov.w	r9, #0
 8007568:	e000      	b.n	800756c <__multiply+0x8c>
 800756a:	460b      	mov	r3, r1
 800756c:	f852 6b04 	ldr.w	r6, [r2], #4
 8007570:	6819      	ldr	r1, [r3, #0]
 8007572:	fa1f fb86 	uxth.w	fp, r6
 8007576:	fa1f fa81 	uxth.w	sl, r1
 800757a:	0c30      	lsrs	r0, r6, #16
 800757c:	0c09      	lsrs	r1, r1, #16
 800757e:	fb08 a60b 	mla	r6, r8, fp, sl
 8007582:	44b1      	add	r9, r6
 8007584:	fb08 1000 	mla	r0, r8, r0, r1
 8007588:	eb00 4019 	add.w	r0, r0, r9, lsr #16
 800758c:	4619      	mov	r1, r3
 800758e:	fa1f f989 	uxth.w	r9, r9
 8007592:	ea49 4600 	orr.w	r6, r9, r0, lsl #16
 8007596:	4294      	cmp	r4, r2
 8007598:	ea4f 4910 	mov.w	r9, r0, lsr #16
 800759c:	f841 6b04 	str.w	r6, [r1], #4
 80075a0:	d8e3      	bhi.n	800756a <__multiply+0x8a>
 80075a2:	f8c3 9004 	str.w	r9, [r3, #4]
 80075a6:	f857 3c04 	ldr.w	r3, [r7, #-4]
 80075aa:	ea5f 4913 	movs.w	r9, r3, lsr #16
 80075ae:	d026      	beq.n	80075fe <__multiply+0x11e>
 80075b0:	f8d5 a000 	ldr.w	sl, [r5]
 80075b4:	9b00      	ldr	r3, [sp, #0]
 80075b6:	f04f 0b00 	mov.w	fp, #0
 80075ba:	4629      	mov	r1, r5
 80075bc:	465e      	mov	r6, fp
 80075be:	4650      	mov	r0, sl
 80075c0:	e000      	b.n	80075c4 <__multiply+0xe4>
 80075c2:	4611      	mov	r1, r2
 80075c4:	f8b3 b000 	ldrh.w	fp, [r3]
 80075c8:	0c00      	lsrs	r0, r0, #16
 80075ca:	fb09 0b0b 	mla	fp, r9, fp, r0
 80075ce:	44b3      	add	fp, r6
 80075d0:	fa1f f08a 	uxth.w	r0, sl
 80075d4:	460a      	mov	r2, r1
 80075d6:	ea40 400b 	orr.w	r0, r0, fp, lsl #16
 80075da:	f842 0b04 	str.w	r0, [r2], #4
 80075de:	f853 ab04 	ldr.w	sl, [r3], #4
 80075e2:	6848      	ldr	r0, [r1, #4]
 80075e4:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 80075e8:	b286      	uxth	r6, r0
 80075ea:	fb09 6a0a 	mla	sl, r9, sl, r6
 80075ee:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
 80075f2:	429c      	cmp	r4, r3
 80075f4:	ea4f 461a 	mov.w	r6, sl, lsr #16
 80075f8:	d8e3      	bhi.n	80075c2 <__multiply+0xe2>
 80075fa:	f8c1 a004 	str.w	sl, [r1, #4]
 80075fe:	45bc      	cmp	ip, r7
 8007600:	f105 0504 	add.w	r5, r5, #4
 8007604:	d8a5      	bhi.n	8007552 <__multiply+0x72>
 8007606:	f8dd c008 	ldr.w	ip, [sp, #8]
 800760a:	9e03      	ldr	r6, [sp, #12]
 800760c:	2e00      	cmp	r6, #0
 800760e:	dd0a      	ble.n	8007626 <__multiply+0x146>
 8007610:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8007614:	f1ac 0c04 	sub.w	ip, ip, #4
 8007618:	b11b      	cbz	r3, 8007622 <__multiply+0x142>
 800761a:	e004      	b.n	8007626 <__multiply+0x146>
 800761c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007620:	b90b      	cbnz	r3, 8007626 <__multiply+0x146>
 8007622:	3e01      	subs	r6, #1
 8007624:	d1fa      	bne.n	800761c <__multiply+0x13c>
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	4610      	mov	r0, r2
 800762a:	6116      	str	r6, [r2, #16]
 800762c:	b005      	add	sp, #20
 800762e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007632:	bf00      	nop

08007634 <__pow5mult>:
 8007634:	f012 0303 	ands.w	r3, r2, #3
 8007638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763c:	4614      	mov	r4, r2
 800763e:	4607      	mov	r7, r0
 8007640:	460e      	mov	r6, r1
 8007642:	d12c      	bne.n	800769e <__pow5mult+0x6a>
 8007644:	10a4      	asrs	r4, r4, #2
 8007646:	d01c      	beq.n	8007682 <__pow5mult+0x4e>
 8007648:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 800764a:	2d00      	cmp	r5, #0
 800764c:	d033      	beq.n	80076b6 <__pow5mult+0x82>
 800764e:	f04f 0800 	mov.w	r8, #0
 8007652:	e004      	b.n	800765e <__pow5mult+0x2a>
 8007654:	1064      	asrs	r4, r4, #1
 8007656:	d014      	beq.n	8007682 <__pow5mult+0x4e>
 8007658:	6828      	ldr	r0, [r5, #0]
 800765a:	b1a8      	cbz	r0, 8007688 <__pow5mult+0x54>
 800765c:	4605      	mov	r5, r0
 800765e:	07e0      	lsls	r0, r4, #31
 8007660:	d5f8      	bpl.n	8007654 <__pow5mult+0x20>
 8007662:	4638      	mov	r0, r7
 8007664:	4631      	mov	r1, r6
 8007666:	462a      	mov	r2, r5
 8007668:	f7ff ff3a 	bl	80074e0 <__multiply>
 800766c:	b1ae      	cbz	r6, 800769a <__pow5mult+0x66>
 800766e:	6872      	ldr	r2, [r6, #4]
 8007670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007672:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007676:	1064      	asrs	r4, r4, #1
 8007678:	6031      	str	r1, [r6, #0]
 800767a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800767e:	4606      	mov	r6, r0
 8007680:	d1ea      	bne.n	8007658 <__pow5mult+0x24>
 8007682:	4630      	mov	r0, r6
 8007684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007688:	4638      	mov	r0, r7
 800768a:	4629      	mov	r1, r5
 800768c:	462a      	mov	r2, r5
 800768e:	f7ff ff27 	bl	80074e0 <__multiply>
 8007692:	6028      	str	r0, [r5, #0]
 8007694:	f8c0 8000 	str.w	r8, [r0]
 8007698:	e7e0      	b.n	800765c <__pow5mult+0x28>
 800769a:	4606      	mov	r6, r0
 800769c:	e7da      	b.n	8007654 <__pow5mult+0x20>
 800769e:	f248 5278 	movw	r2, #34168	; 0x8578
 80076a2:	1e5d      	subs	r5, r3, #1
 80076a4:	f6c0 0200 	movt	r2, #2048	; 0x800
 80076a8:	2300      	movs	r3, #0
 80076aa:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80076ae:	f7ff fe75 	bl	800739c <__multadd>
 80076b2:	4606      	mov	r6, r0
 80076b4:	e7c6      	b.n	8007644 <__pow5mult+0x10>
 80076b6:	2101      	movs	r1, #1
 80076b8:	4638      	mov	r0, r7
 80076ba:	f7ff fe3f 	bl	800733c <_Balloc>
 80076be:	f240 2171 	movw	r1, #625	; 0x271
 80076c2:	2201      	movs	r2, #1
 80076c4:	2300      	movs	r3, #0
 80076c6:	6141      	str	r1, [r0, #20]
 80076c8:	6102      	str	r2, [r0, #16]
 80076ca:	4605      	mov	r5, r0
 80076cc:	64b8      	str	r0, [r7, #72]	; 0x48
 80076ce:	6003      	str	r3, [r0, #0]
 80076d0:	e7bd      	b.n	800764e <__pow5mult+0x1a>
 80076d2:	bf00      	nop

080076d4 <__lshift>:
 80076d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	4693      	mov	fp, r2
 80076da:	690a      	ldr	r2, [r1, #16]
 80076dc:	688b      	ldr	r3, [r1, #8]
 80076de:	ea4f 1a6b 	mov.w	sl, fp, asr #5
 80076e2:	eb0a 0902 	add.w	r9, sl, r2
 80076e6:	f109 0601 	add.w	r6, r9, #1
 80076ea:	429e      	cmp	r6, r3
 80076ec:	460f      	mov	r7, r1
 80076ee:	4680      	mov	r8, r0
 80076f0:	6849      	ldr	r1, [r1, #4]
 80076f2:	dd04      	ble.n	80076fe <__lshift+0x2a>
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	429e      	cmp	r6, r3
 80076f8:	f101 0101 	add.w	r1, r1, #1
 80076fc:	dcfa      	bgt.n	80076f4 <__lshift+0x20>
 80076fe:	4640      	mov	r0, r8
 8007700:	f7ff fe1c 	bl	800733c <_Balloc>
 8007704:	f1ba 0f00 	cmp.w	sl, #0
 8007708:	f100 0414 	add.w	r4, r0, #20
 800770c:	dd09      	ble.n	8007722 <__lshift+0x4e>
 800770e:	2300      	movs	r3, #0
 8007710:	461a      	mov	r2, r3
 8007712:	4625      	mov	r5, r4
 8007714:	3301      	adds	r3, #1
 8007716:	4553      	cmp	r3, sl
 8007718:	f845 2b04 	str.w	r2, [r5], #4
 800771c:	d1fa      	bne.n	8007714 <__lshift+0x40>
 800771e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	f107 0314 	add.w	r3, r7, #20
 8007728:	f01b 0b1f 	ands.w	fp, fp, #31
 800772c:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
 8007730:	d021      	beq.n	8007776 <__lshift+0xa2>
 8007732:	f1cb 0a20 	rsb	sl, fp, #32
 8007736:	2200      	movs	r2, #0
 8007738:	e000      	b.n	800773c <__lshift+0x68>
 800773a:	462c      	mov	r4, r5
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	4625      	mov	r5, r4
 8007740:	fa01 f10b 	lsl.w	r1, r1, fp
 8007744:	430a      	orrs	r2, r1
 8007746:	f845 2b04 	str.w	r2, [r5], #4
 800774a:	f853 2b04 	ldr.w	r2, [r3], #4
 800774e:	4563      	cmp	r3, ip
 8007750:	fa22 f20a 	lsr.w	r2, r2, sl
 8007754:	d3f1      	bcc.n	800773a <__lshift+0x66>
 8007756:	6062      	str	r2, [r4, #4]
 8007758:	b10a      	cbz	r2, 800775e <__lshift+0x8a>
 800775a:	f109 0602 	add.w	r6, r9, #2
 800775e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007768:	3e01      	subs	r6, #1
 800776a:	6106      	str	r6, [r0, #16]
 800776c:	6039      	str	r1, [r7, #0]
 800776e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8007772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007776:	f853 2b04 	ldr.w	r2, [r3], #4
 800777a:	459c      	cmp	ip, r3
 800777c:	f844 2b04 	str.w	r2, [r4], #4
 8007780:	d9ed      	bls.n	800775e <__lshift+0x8a>
 8007782:	f853 2b04 	ldr.w	r2, [r3], #4
 8007786:	459c      	cmp	ip, r3
 8007788:	f844 2b04 	str.w	r2, [r4], #4
 800778c:	d8f3      	bhi.n	8007776 <__lshift+0xa2>
 800778e:	e7e6      	b.n	800775e <__lshift+0x8a>

08007790 <__mcmp>:
 8007790:	6902      	ldr	r2, [r0, #16]
 8007792:	690b      	ldr	r3, [r1, #16]
 8007794:	1ad2      	subs	r2, r2, r3
 8007796:	b410      	push	{r4}
 8007798:	bf18      	it	ne
 800779a:	4610      	movne	r0, r2
 800779c:	d112      	bne.n	80077c4 <__mcmp+0x34>
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	3014      	adds	r0, #20
 80077a2:	3114      	adds	r1, #20
 80077a4:	4419      	add	r1, r3
 80077a6:	4403      	add	r3, r0
 80077a8:	e001      	b.n	80077ae <__mcmp+0x1e>
 80077aa:	4298      	cmp	r0, r3
 80077ac:	d20d      	bcs.n	80077ca <__mcmp+0x3a>
 80077ae:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80077b2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80077b6:	42a2      	cmp	r2, r4
 80077b8:	d0f7      	beq.n	80077aa <__mcmp+0x1a>
 80077ba:	4294      	cmp	r4, r2
 80077bc:	bf94      	ite	ls
 80077be:	2001      	movls	r0, #1
 80077c0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80077c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	2000      	movs	r0, #0
 80077cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop

080077d4 <__mdiff>:
 80077d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	460c      	mov	r4, r1
 80077da:	4606      	mov	r6, r0
 80077dc:	4611      	mov	r1, r2
 80077de:	4620      	mov	r0, r4
 80077e0:	4615      	mov	r5, r2
 80077e2:	f7ff ffd5 	bl	8007790 <__mcmp>
 80077e6:	1e07      	subs	r7, r0, #0
 80077e8:	d054      	beq.n	8007894 <__mdiff+0xc0>
 80077ea:	bfbc      	itt	lt
 80077ec:	4623      	movlt	r3, r4
 80077ee:	462c      	movlt	r4, r5
 80077f0:	4630      	mov	r0, r6
 80077f2:	bfb8      	it	lt
 80077f4:	461d      	movlt	r5, r3
 80077f6:	6861      	ldr	r1, [r4, #4]
 80077f8:	bfac      	ite	ge
 80077fa:	2700      	movge	r7, #0
 80077fc:	2701      	movlt	r7, #1
 80077fe:	f7ff fd9d 	bl	800733c <_Balloc>
 8007802:	692a      	ldr	r2, [r5, #16]
 8007804:	f8d4 c010 	ldr.w	ip, [r4, #16]
 8007808:	60c7      	str	r7, [r0, #12]
 800780a:	3414      	adds	r4, #20
 800780c:	3514      	adds	r5, #20
 800780e:	eb05 0982 	add.w	r9, r5, r2, lsl #2
 8007812:	f100 0314 	add.w	r3, r0, #20
 8007816:	eb04 088c 	add.w	r8, r4, ip, lsl #2
 800781a:	2200      	movs	r2, #0
 800781c:	f854 6b04 	ldr.w	r6, [r4], #4
 8007820:	f855 7b04 	ldr.w	r7, [r5], #4
 8007824:	fa12 f286 	uxtah	r2, r2, r6
 8007828:	b2b9      	uxth	r1, r7
 800782a:	0c3f      	lsrs	r7, r7, #16
 800782c:	1a51      	subs	r1, r2, r1
 800782e:	ebc7 4216 	rsb	r2, r7, r6, lsr #16
 8007832:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8007836:	b289      	uxth	r1, r1
 8007838:	ea41 4602 	orr.w	r6, r1, r2, lsl #16
 800783c:	45a9      	cmp	r9, r5
 800783e:	f843 6b04 	str.w	r6, [r3], #4
 8007842:	ea4f 4222 	mov.w	r2, r2, asr #16
 8007846:	4621      	mov	r1, r4
 8007848:	d8e8      	bhi.n	800781c <__mdiff+0x48>
 800784a:	45a0      	cmp	r8, r4
 800784c:	461f      	mov	r7, r3
 800784e:	d915      	bls.n	800787c <__mdiff+0xa8>
 8007850:	f851 5b04 	ldr.w	r5, [r1], #4
 8007854:	fa12 f285 	uxtah	r2, r2, r5
 8007858:	0c2d      	lsrs	r5, r5, #16
 800785a:	eb05 4522 	add.w	r5, r5, r2, asr #16
 800785e:	b292      	uxth	r2, r2
 8007860:	ea42 4605 	orr.w	r6, r2, r5, lsl #16
 8007864:	4588      	cmp	r8, r1
 8007866:	f843 6b04 	str.w	r6, [r3], #4
 800786a:	ea4f 4225 	mov.w	r2, r5, asr #16
 800786e:	d8ef      	bhi.n	8007850 <__mdiff+0x7c>
 8007870:	43e3      	mvns	r3, r4
 8007872:	4443      	add	r3, r8
 8007874:	f023 0303 	bic.w	r3, r3, #3
 8007878:	3304      	adds	r3, #4
 800787a:	443b      	add	r3, r7
 800787c:	3b04      	subs	r3, #4
 800787e:	b92e      	cbnz	r6, 800788c <__mdiff+0xb8>
 8007880:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007884:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8007888:	2a00      	cmp	r2, #0
 800788a:	d0f9      	beq.n	8007880 <__mdiff+0xac>
 800788c:	f8c0 c010 	str.w	ip, [r0, #16]
 8007890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007894:	4630      	mov	r0, r6
 8007896:	4639      	mov	r1, r7
 8007898:	f7ff fd50 	bl	800733c <_Balloc>
 800789c:	2301      	movs	r3, #1
 800789e:	6147      	str	r7, [r0, #20]
 80078a0:	6103      	str	r3, [r0, #16]
 80078a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a6:	bf00      	nop

080078a8 <__d2b>:
 80078a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80078ac:	b083      	sub	sp, #12
 80078ae:	2101      	movs	r1, #1
 80078b0:	461d      	mov	r5, r3
 80078b2:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80078b6:	4614      	mov	r4, r2
 80078b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80078ba:	f7ff fd3f 	bl	800733c <_Balloc>
 80078be:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078c2:	4680      	mov	r8, r0
 80078c4:	b10e      	cbz	r6, 80078ca <__d2b+0x22>
 80078c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ca:	9301      	str	r3, [sp, #4]
 80078cc:	b324      	cbz	r4, 8007918 <__d2b+0x70>
 80078ce:	a802      	add	r0, sp, #8
 80078d0:	f840 4d08 	str.w	r4, [r0, #-8]!
 80078d4:	4668      	mov	r0, sp
 80078d6:	f7ff fdcb 	bl	8007470 <__lo0bits>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d135      	bne.n	800794a <__d2b+0xa2>
 80078de:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80078e2:	f8c8 2014 	str.w	r2, [r8, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bf0c      	ite	eq
 80078ea:	2401      	moveq	r4, #1
 80078ec:	2402      	movne	r4, #2
 80078ee:	f8c8 3018 	str.w	r3, [r8, #24]
 80078f2:	f8c8 4010 	str.w	r4, [r8, #16]
 80078f6:	b9de      	cbnz	r6, 8007930 <__d2b+0x88>
 80078f8:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 80078fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007900:	6038      	str	r0, [r7, #0]
 8007902:	6918      	ldr	r0, [r3, #16]
 8007904:	f7ff fd96 	bl	8007434 <__hi0bits>
 8007908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800790a:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 800790e:	6018      	str	r0, [r3, #0]
 8007910:	4640      	mov	r0, r8
 8007912:	b003      	add	sp, #12
 8007914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007918:	a801      	add	r0, sp, #4
 800791a:	f7ff fda9 	bl	8007470 <__lo0bits>
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	2401      	movs	r4, #1
 8007922:	3020      	adds	r0, #32
 8007924:	f8c8 3014 	str.w	r3, [r8, #20]
 8007928:	f8c8 4010 	str.w	r4, [r8, #16]
 800792c:	2e00      	cmp	r6, #0
 800792e:	d0e3      	beq.n	80078f8 <__d2b+0x50>
 8007930:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
 8007934:	eb09 0300 	add.w	r3, r9, r0
 8007938:	603b      	str	r3, [r7, #0]
 800793a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800793c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007940:	6018      	str	r0, [r3, #0]
 8007942:	4640      	mov	r0, r8
 8007944:	b003      	add	sp, #12
 8007946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800794a:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800794e:	f1c0 0120 	rsb	r1, r0, #32
 8007952:	fa03 f101 	lsl.w	r1, r3, r1
 8007956:	430a      	orrs	r2, r1
 8007958:	40c3      	lsrs	r3, r0
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	f8c8 2014 	str.w	r2, [r8, #20]
 8007960:	e7c1      	b.n	80078e6 <__d2b+0x3e>
 8007962:	bf00      	nop

08007964 <__fpclassifyd>:
 8007964:	ea50 0301 	orrs.w	r3, r0, r1
 8007968:	d101      	bne.n	800796e <__fpclassifyd+0xa>
 800796a:	2002      	movs	r0, #2
 800796c:	4770      	bx	lr
 800796e:	f1d0 0301 	rsbs	r3, r0, #1
 8007972:	bf38      	it	cc
 8007974:	2300      	movcc	r3, #0
 8007976:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800797a:	bf08      	it	eq
 800797c:	2800      	cmpeq	r0, #0
 800797e:	d0f4      	beq.n	800796a <__fpclassifyd+0x6>
 8007980:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007988:	f5a1 1080 	sub.w	r0, r1, #1048576	; 0x100000
 800798c:	f6c7 72df 	movt	r2, #32735	; 0x7fdf
 8007990:	4290      	cmp	r0, r2
 8007992:	d801      	bhi.n	8007998 <__fpclassifyd+0x34>
 8007994:	2004      	movs	r0, #4
 8007996:	4770      	bx	lr
 8007998:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800799c:	d201      	bcs.n	80079a2 <__fpclassifyd+0x3e>
 800799e:	2003      	movs	r0, #3
 80079a0:	4770      	bx	lr
 80079a2:	2000      	movs	r0, #0
 80079a4:	f6c7 70f0 	movt	r0, #32752	; 0x7ff0
 80079a8:	4281      	cmp	r1, r0
 80079aa:	bf14      	ite	ne
 80079ac:	2000      	movne	r0, #0
 80079ae:	f003 0001 	andeq.w	r0, r3, #1
 80079b2:	4770      	bx	lr

080079b4 <__ssprint_r>:
 80079b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	6894      	ldr	r4, [r2, #8]
 80079ba:	6816      	ldr	r6, [r2, #0]
 80079bc:	b083      	sub	sp, #12
 80079be:	4692      	mov	sl, r2
 80079c0:	4680      	mov	r8, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	2c00      	cmp	r4, #0
 80079c6:	d06f      	beq.n	8007aa8 <__ssprint_r+0xf4>
 80079c8:	f04f 0b00 	mov.w	fp, #0
 80079cc:	6808      	ldr	r0, [r1, #0]
 80079ce:	688b      	ldr	r3, [r1, #8]
 80079d0:	465c      	mov	r4, fp
 80079d2:	2c00      	cmp	r4, #0
 80079d4:	d043      	beq.n	8007a5e <__ssprint_r+0xaa>
 80079d6:	429c      	cmp	r4, r3
 80079d8:	461f      	mov	r7, r3
 80079da:	d345      	bcc.n	8007a68 <__ssprint_r+0xb4>
 80079dc:	89ab      	ldrh	r3, [r5, #12]
 80079de:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80079e2:	d044      	beq.n	8007a6e <__ssprint_r+0xba>
 80079e4:	696f      	ldr	r7, [r5, #20]
 80079e6:	6929      	ldr	r1, [r5, #16]
 80079e8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80079ec:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 80079f0:	ebc1 0900 	rsb	r9, r1, r0
 80079f4:	1c62      	adds	r2, r4, #1
 80079f6:	107f      	asrs	r7, r7, #1
 80079f8:	444a      	add	r2, r9
 80079fa:	4297      	cmp	r7, r2
 80079fc:	bf34      	ite	cc
 80079fe:	4617      	movcc	r7, r2
 8007a00:	463a      	movcs	r2, r7
 8007a02:	055b      	lsls	r3, r3, #21
 8007a04:	d535      	bpl.n	8007a72 <__ssprint_r+0xbe>
 8007a06:	4611      	mov	r1, r2
 8007a08:	4640      	mov	r0, r8
 8007a0a:	f7fc fc91 	bl	8004330 <_malloc_r>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d039      	beq.n	8007a86 <__ssprint_r+0xd2>
 8007a12:	6929      	ldr	r1, [r5, #16]
 8007a14:	9001      	str	r0, [sp, #4]
 8007a16:	464a      	mov	r2, r9
 8007a18:	f7f8 fc1a 	bl	8000250 <memcpy>
 8007a1c:	89aa      	ldrh	r2, [r5, #12]
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007a24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a28:	81aa      	strh	r2, [r5, #12]
 8007a2a:	ebc9 0207 	rsb	r2, r9, r7
 8007a2e:	eb03 0009 	add.w	r0, r3, r9
 8007a32:	616f      	str	r7, [r5, #20]
 8007a34:	612b      	str	r3, [r5, #16]
 8007a36:	6028      	str	r0, [r5, #0]
 8007a38:	60aa      	str	r2, [r5, #8]
 8007a3a:	4627      	mov	r7, r4
 8007a3c:	46a1      	mov	r9, r4
 8007a3e:	464a      	mov	r2, r9
 8007a40:	4659      	mov	r1, fp
 8007a42:	f000 f867 	bl	8007b14 <memmove>
 8007a46:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007a4a:	68ab      	ldr	r3, [r5, #8]
 8007a4c:	6828      	ldr	r0, [r5, #0]
 8007a4e:	1bdb      	subs	r3, r3, r7
 8007a50:	4448      	add	r0, r9
 8007a52:	1b14      	subs	r4, r2, r4
 8007a54:	60ab      	str	r3, [r5, #8]
 8007a56:	6028      	str	r0, [r5, #0]
 8007a58:	f8ca 4008 	str.w	r4, [sl, #8]
 8007a5c:	b324      	cbz	r4, 8007aa8 <__ssprint_r+0xf4>
 8007a5e:	f8d6 b000 	ldr.w	fp, [r6]
 8007a62:	6874      	ldr	r4, [r6, #4]
 8007a64:	3608      	adds	r6, #8
 8007a66:	e7b4      	b.n	80079d2 <__ssprint_r+0x1e>
 8007a68:	4627      	mov	r7, r4
 8007a6a:	46a1      	mov	r9, r4
 8007a6c:	e7e7      	b.n	8007a3e <__ssprint_r+0x8a>
 8007a6e:	46b9      	mov	r9, r7
 8007a70:	e7e5      	b.n	8007a3e <__ssprint_r+0x8a>
 8007a72:	4640      	mov	r0, r8
 8007a74:	f000 f8b0 	bl	8007bd8 <_realloc_r>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d1d5      	bne.n	8007a2a <__ssprint_r+0x76>
 8007a7e:	4640      	mov	r0, r8
 8007a80:	6929      	ldr	r1, [r5, #16]
 8007a82:	f7ff fb3f 	bl	8007104 <_free_r>
 8007a86:	89aa      	ldrh	r2, [r5, #12]
 8007a88:	230c      	movs	r3, #12
 8007a8a:	f8c8 3000 	str.w	r3, [r8]
 8007a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a92:	2300      	movs	r3, #0
 8007a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a98:	81aa      	strh	r2, [r5, #12]
 8007a9a:	f8ca 3008 	str.w	r3, [sl, #8]
 8007a9e:	f8ca 3004 	str.w	r3, [sl, #4]
 8007aa2:	b003      	add	sp, #12
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f8ca 4004 	str.w	r4, [sl, #4]
 8007aae:	b003      	add	sp, #12
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ab4 <_calloc_r>:
 8007ab4:	b510      	push	{r4, lr}
 8007ab6:	fb02 f101 	mul.w	r1, r2, r1
 8007aba:	f7fc fc39 	bl	8004330 <_malloc_r>
 8007abe:	4604      	mov	r4, r0
 8007ac0:	b170      	cbz	r0, 8007ae0 <_calloc_r+0x2c>
 8007ac2:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007ac6:	f022 0203 	bic.w	r2, r2, #3
 8007aca:	3a04      	subs	r2, #4
 8007acc:	2a24      	cmp	r2, #36	; 0x24
 8007ace:	d81c      	bhi.n	8007b0a <_calloc_r+0x56>
 8007ad0:	2a13      	cmp	r2, #19
 8007ad2:	bf98      	it	ls
 8007ad4:	4603      	movls	r3, r0
 8007ad6:	d805      	bhi.n	8007ae4 <_calloc_r+0x30>
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	605a      	str	r2, [r3, #4]
 8007ade:	609a      	str	r2, [r3, #8]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	bd10      	pop	{r4, pc}
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	2a1b      	cmp	r2, #27
 8007ae8:	6003      	str	r3, [r0, #0]
 8007aea:	6043      	str	r3, [r0, #4]
 8007aec:	bf98      	it	ls
 8007aee:	f100 0308 	addls.w	r3, r0, #8
 8007af2:	d9f1      	bls.n	8007ad8 <_calloc_r+0x24>
 8007af4:	2a24      	cmp	r2, #36	; 0x24
 8007af6:	6083      	str	r3, [r0, #8]
 8007af8:	60c3      	str	r3, [r0, #12]
 8007afa:	bf05      	ittet	eq
 8007afc:	6103      	streq	r3, [r0, #16]
 8007afe:	6143      	streq	r3, [r0, #20]
 8007b00:	f100 0310 	addne.w	r3, r0, #16
 8007b04:	f100 0318 	addeq.w	r3, r0, #24
 8007b08:	e7e6      	b.n	8007ad8 <_calloc_r+0x24>
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	f7fc fec2 	bl	8004894 <memset>
 8007b10:	4620      	mov	r0, r4
 8007b12:	bd10      	pop	{r4, pc}

08007b14 <memmove>:
 8007b14:	4288      	cmp	r0, r1
 8007b16:	b4f0      	push	{r4, r5, r6, r7}
 8007b18:	d910      	bls.n	8007b3c <memmove+0x28>
 8007b1a:	188c      	adds	r4, r1, r2
 8007b1c:	42a0      	cmp	r0, r4
 8007b1e:	d20d      	bcs.n	8007b3c <memmove+0x28>
 8007b20:	1885      	adds	r5, r0, r2
 8007b22:	1e53      	subs	r3, r2, #1
 8007b24:	b142      	cbz	r2, 8007b38 <memmove+0x24>
 8007b26:	4621      	mov	r1, r4
 8007b28:	462a      	mov	r2, r5
 8007b2a:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8007b2e:	3b01      	subs	r3, #1
 8007b30:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b34:	1c5c      	adds	r4, r3, #1
 8007b36:	d1f8      	bne.n	8007b2a <memmove+0x16>
 8007b38:	bcf0      	pop	{r4, r5, r6, r7}
 8007b3a:	4770      	bx	lr
 8007b3c:	2a0f      	cmp	r2, #15
 8007b3e:	d940      	bls.n	8007bc2 <memmove+0xae>
 8007b40:	ea40 0301 	orr.w	r3, r0, r1
 8007b44:	079b      	lsls	r3, r3, #30
 8007b46:	d140      	bne.n	8007bca <memmove+0xb6>
 8007b48:	f1a2 0710 	sub.w	r7, r2, #16
 8007b4c:	093f      	lsrs	r7, r7, #4
 8007b4e:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 8007b52:	3610      	adds	r6, #16
 8007b54:	460c      	mov	r4, r1
 8007b56:	4603      	mov	r3, r0
 8007b58:	6825      	ldr	r5, [r4, #0]
 8007b5a:	601d      	str	r5, [r3, #0]
 8007b5c:	6865      	ldr	r5, [r4, #4]
 8007b5e:	605d      	str	r5, [r3, #4]
 8007b60:	68a5      	ldr	r5, [r4, #8]
 8007b62:	609d      	str	r5, [r3, #8]
 8007b64:	68e5      	ldr	r5, [r4, #12]
 8007b66:	3310      	adds	r3, #16
 8007b68:	f843 5c04 	str.w	r5, [r3, #-4]
 8007b6c:	42b3      	cmp	r3, r6
 8007b6e:	f104 0410 	add.w	r4, r4, #16
 8007b72:	d1f1      	bne.n	8007b58 <memmove+0x44>
 8007b74:	1c7b      	adds	r3, r7, #1
 8007b76:	f002 0c0f 	and.w	ip, r2, #15
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	f1bc 0f03 	cmp.w	ip, #3
 8007b80:	4419      	add	r1, r3
 8007b82:	4403      	add	r3, r0
 8007b84:	d923      	bls.n	8007bce <memmove+0xba>
 8007b86:	460e      	mov	r6, r1
 8007b88:	461d      	mov	r5, r3
 8007b8a:	4664      	mov	r4, ip
 8007b8c:	f856 7b04 	ldr.w	r7, [r6], #4
 8007b90:	3c04      	subs	r4, #4
 8007b92:	2c03      	cmp	r4, #3
 8007b94:	f845 7b04 	str.w	r7, [r5], #4
 8007b98:	d8f8      	bhi.n	8007b8c <memmove+0x78>
 8007b9a:	f1ac 0404 	sub.w	r4, ip, #4
 8007b9e:	f024 0403 	bic.w	r4, r4, #3
 8007ba2:	3404      	adds	r4, #4
 8007ba4:	f002 0203 	and.w	r2, r2, #3
 8007ba8:	4423      	add	r3, r4
 8007baa:	4421      	add	r1, r4
 8007bac:	2a00      	cmp	r2, #0
 8007bae:	d0c3      	beq.n	8007b38 <memmove+0x24>
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb6:	f803 4b01 	strb.w	r4, [r3], #1
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d1f9      	bne.n	8007bb2 <memmove+0x9e>
 8007bbe:	bcf0      	pop	{r4, r5, r6, r7}
 8007bc0:	4770      	bx	lr
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2a00      	cmp	r2, #0
 8007bc6:	d1f3      	bne.n	8007bb0 <memmove+0x9c>
 8007bc8:	e7b6      	b.n	8007b38 <memmove+0x24>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	e7f0      	b.n	8007bb0 <memmove+0x9c>
 8007bce:	4662      	mov	r2, ip
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	d1ed      	bne.n	8007bb0 <memmove+0x9c>
 8007bd4:	e7b0      	b.n	8007b38 <memmove+0x24>
 8007bd6:	bf00      	nop

08007bd8 <_realloc_r>:
 8007bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bdc:	460c      	mov	r4, r1
 8007bde:	b083      	sub	sp, #12
 8007be0:	4690      	mov	r8, r2
 8007be2:	4681      	mov	r9, r0
 8007be4:	2900      	cmp	r1, #0
 8007be6:	f000 8124 	beq.w	8007e32 <_realloc_r+0x25a>
 8007bea:	f7f9 ffbf 	bl	8001b6c <__malloc_lock>
 8007bee:	f108 060b 	add.w	r6, r8, #11
 8007bf2:	2e16      	cmp	r6, #22
 8007bf4:	bf8c      	ite	hi
 8007bf6:	f026 0607 	bichi.w	r6, r6, #7
 8007bfa:	2210      	movls	r2, #16
 8007bfc:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8007c00:	bf8d      	iteet	hi
 8007c02:	0ff3      	lsrhi	r3, r6, #31
 8007c04:	4616      	movls	r6, r2
 8007c06:	2300      	movls	r3, #0
 8007c08:	4632      	movhi	r2, r6
 8007c0a:	4546      	cmp	r6, r8
 8007c0c:	bf38      	it	cc
 8007c0e:	f043 0301 	orrcc.w	r3, r3, #1
 8007c12:	f02c 0503 	bic.w	r5, ip, #3
 8007c16:	f1a4 0708 	sub.w	r7, r4, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f040 810f 	bne.w	8007e3e <_realloc_r+0x266>
 8007c20:	4295      	cmp	r5, r2
 8007c22:	db15      	blt.n	8007c50 <_realloc_r+0x78>
 8007c24:	4660      	mov	r0, ip
 8007c26:	1bab      	subs	r3, r5, r6
 8007c28:	2b0f      	cmp	r3, #15
 8007c2a:	f000 0c01 	and.w	ip, r0, #1
 8007c2e:	f200 80c6 	bhi.w	8007dbe <_realloc_r+0x1e6>
 8007c32:	ea4c 0305 	orr.w	r3, ip, r5
 8007c36:	443d      	add	r5, r7
 8007c38:	607b      	str	r3, [r7, #4]
 8007c3a:	686b      	ldr	r3, [r5, #4]
 8007c3c:	f043 0301 	orr.w	r3, r3, #1
 8007c40:	606b      	str	r3, [r5, #4]
 8007c42:	4648      	mov	r0, r9
 8007c44:	f7f9 ff96 	bl	8001b74 <__malloc_unlock>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	b003      	add	sp, #12
 8007c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c50:	f240 4a9c 	movw	sl, #1180	; 0x49c
 8007c54:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8007c58:	1979      	adds	r1, r7, r5
 8007c5a:	f8da 0008 	ldr.w	r0, [sl, #8]
 8007c5e:	4288      	cmp	r0, r1
 8007c60:	f000 80f2 	beq.w	8007e48 <_realloc_r+0x270>
 8007c64:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8007c68:	f02e 0b01 	bic.w	fp, lr, #1
 8007c6c:	448b      	add	fp, r1
 8007c6e:	f8db b004 	ldr.w	fp, [fp, #4]
 8007c72:	f01b 0f01 	tst.w	fp, #1
 8007c76:	bf1c      	itt	ne
 8007c78:	469e      	movne	lr, r3
 8007c7a:	4671      	movne	r1, lr
 8007c7c:	d054      	beq.n	8007d28 <_realloc_r+0x150>
 8007c7e:	f01c 0f01 	tst.w	ip, #1
 8007c82:	f040 80ad 	bne.w	8007de0 <_realloc_r+0x208>
 8007c86:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8007c8a:	ebc3 0b07 	rsb	fp, r3, r7
 8007c8e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007c92:	f023 0303 	bic.w	r3, r3, #3
 8007c96:	442b      	add	r3, r5
 8007c98:	2900      	cmp	r1, #0
 8007c9a:	d052      	beq.n	8007d42 <_realloc_r+0x16a>
 8007c9c:	4281      	cmp	r1, r0
 8007c9e:	f000 811f 	beq.w	8007ee0 <_realloc_r+0x308>
 8007ca2:	449e      	add	lr, r3
 8007ca4:	4596      	cmp	lr, r2
 8007ca6:	db4c      	blt.n	8007d42 <_realloc_r+0x16a>
 8007ca8:	68cb      	ldr	r3, [r1, #12]
 8007caa:	688a      	ldr	r2, [r1, #8]
 8007cac:	465f      	mov	r7, fp
 8007cae:	60d3      	str	r3, [r2, #12]
 8007cb0:	609a      	str	r2, [r3, #8]
 8007cb2:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007cb6:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007cba:	1f2a      	subs	r2, r5, #4
 8007cbc:	2a24      	cmp	r2, #36	; 0x24
 8007cbe:	60cb      	str	r3, [r1, #12]
 8007cc0:	6099      	str	r1, [r3, #8]
 8007cc2:	f200 8165 	bhi.w	8007f90 <_realloc_r+0x3b8>
 8007cc6:	2a13      	cmp	r2, #19
 8007cc8:	bf98      	it	ls
 8007cca:	463b      	movls	r3, r7
 8007ccc:	d920      	bls.n	8007d10 <_realloc_r+0x138>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f8cb 3008 	str.w	r3, [fp, #8]
 8007cd4:	6863      	ldr	r3, [r4, #4]
 8007cd6:	2a1b      	cmp	r2, #27
 8007cd8:	f8cb 300c 	str.w	r3, [fp, #12]
 8007cdc:	bf9c      	itt	ls
 8007cde:	3408      	addls	r4, #8
 8007ce0:	f10b 0310 	addls.w	r3, fp, #16
 8007ce4:	d914      	bls.n	8007d10 <_realloc_r+0x138>
 8007ce6:	68a3      	ldr	r3, [r4, #8]
 8007ce8:	f8cb 3010 	str.w	r3, [fp, #16]
 8007cec:	68e3      	ldr	r3, [r4, #12]
 8007cee:	2a24      	cmp	r2, #36	; 0x24
 8007cf0:	f8cb 3014 	str.w	r3, [fp, #20]
 8007cf4:	bf03      	ittte	eq
 8007cf6:	6923      	ldreq	r3, [r4, #16]
 8007cf8:	f8cb 3018 	streq.w	r3, [fp, #24]
 8007cfc:	6962      	ldreq	r2, [r4, #20]
 8007cfe:	3410      	addne	r4, #16
 8007d00:	bf11      	iteee	ne
 8007d02:	f10b 0318 	addne.w	r3, fp, #24
 8007d06:	f10b 0320 	addeq.w	r3, fp, #32
 8007d0a:	f8cb 201c 	streq.w	r2, [fp, #28]
 8007d0e:	3418      	addeq	r4, #24
 8007d10:	6822      	ldr	r2, [r4, #0]
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	6862      	ldr	r2, [r4, #4]
 8007d16:	605a      	str	r2, [r3, #4]
 8007d18:	68a2      	ldr	r2, [r4, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
 8007d1c:	463c      	mov	r4, r7
 8007d1e:	4675      	mov	r5, lr
 8007d20:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007d24:	465f      	mov	r7, fp
 8007d26:	e77e      	b.n	8007c26 <_realloc_r+0x4e>
 8007d28:	f02e 0e03 	bic.w	lr, lr, #3
 8007d2c:	eb0e 0305 	add.w	r3, lr, r5
 8007d30:	4293      	cmp	r3, r2
 8007d32:	dba4      	blt.n	8007c7e <_realloc_r+0xa6>
 8007d34:	68ca      	ldr	r2, [r1, #12]
 8007d36:	6889      	ldr	r1, [r1, #8]
 8007d38:	4660      	mov	r0, ip
 8007d3a:	60ca      	str	r2, [r1, #12]
 8007d3c:	461d      	mov	r5, r3
 8007d3e:	6091      	str	r1, [r2, #8]
 8007d40:	e771      	b.n	8007c26 <_realloc_r+0x4e>
 8007d42:	4293      	cmp	r3, r2
 8007d44:	db4c      	blt.n	8007de0 <_realloc_r+0x208>
 8007d46:	465f      	mov	r7, fp
 8007d48:	f8db 100c 	ldr.w	r1, [fp, #12]
 8007d4c:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8007d50:	1f2a      	subs	r2, r5, #4
 8007d52:	2a24      	cmp	r2, #36	; 0x24
 8007d54:	60c1      	str	r1, [r0, #12]
 8007d56:	6088      	str	r0, [r1, #8]
 8007d58:	f200 80b4 	bhi.w	8007ec4 <_realloc_r+0x2ec>
 8007d5c:	2a13      	cmp	r2, #19
 8007d5e:	bf98      	it	ls
 8007d60:	463a      	movls	r2, r7
 8007d62:	d920      	bls.n	8007da6 <_realloc_r+0x1ce>
 8007d64:	6821      	ldr	r1, [r4, #0]
 8007d66:	f8cb 1008 	str.w	r1, [fp, #8]
 8007d6a:	6861      	ldr	r1, [r4, #4]
 8007d6c:	2a1b      	cmp	r2, #27
 8007d6e:	f8cb 100c 	str.w	r1, [fp, #12]
 8007d72:	bf9c      	itt	ls
 8007d74:	3408      	addls	r4, #8
 8007d76:	f10b 0210 	addls.w	r2, fp, #16
 8007d7a:	d914      	bls.n	8007da6 <_realloc_r+0x1ce>
 8007d7c:	68a1      	ldr	r1, [r4, #8]
 8007d7e:	f8cb 1010 	str.w	r1, [fp, #16]
 8007d82:	68e1      	ldr	r1, [r4, #12]
 8007d84:	2a24      	cmp	r2, #36	; 0x24
 8007d86:	f8cb 1014 	str.w	r1, [fp, #20]
 8007d8a:	bf03      	ittte	eq
 8007d8c:	6922      	ldreq	r2, [r4, #16]
 8007d8e:	f8cb 2018 	streq.w	r2, [fp, #24]
 8007d92:	6961      	ldreq	r1, [r4, #20]
 8007d94:	3410      	addne	r4, #16
 8007d96:	bf11      	iteee	ne
 8007d98:	f10b 0218 	addne.w	r2, fp, #24
 8007d9c:	f10b 0220 	addeq.w	r2, fp, #32
 8007da0:	f8cb 101c 	streq.w	r1, [fp, #28]
 8007da4:	3418      	addeq	r4, #24
 8007da6:	6821      	ldr	r1, [r4, #0]
 8007da8:	6011      	str	r1, [r2, #0]
 8007daa:	6861      	ldr	r1, [r4, #4]
 8007dac:	6051      	str	r1, [r2, #4]
 8007dae:	68a1      	ldr	r1, [r4, #8]
 8007db0:	6091      	str	r1, [r2, #8]
 8007db2:	463c      	mov	r4, r7
 8007db4:	461d      	mov	r5, r3
 8007db6:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007dba:	465f      	mov	r7, fp
 8007dbc:	e733      	b.n	8007c26 <_realloc_r+0x4e>
 8007dbe:	19b9      	adds	r1, r7, r6
 8007dc0:	f043 0201 	orr.w	r2, r3, #1
 8007dc4:	ea4c 0606 	orr.w	r6, ip, r6
 8007dc8:	440b      	add	r3, r1
 8007dca:	607e      	str	r6, [r7, #4]
 8007dcc:	604a      	str	r2, [r1, #4]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	3108      	adds	r1, #8
 8007dd6:	605a      	str	r2, [r3, #4]
 8007dd8:	4648      	mov	r0, r9
 8007dda:	f7ff f993 	bl	8007104 <_free_r>
 8007dde:	e730      	b.n	8007c42 <_realloc_r+0x6a>
 8007de0:	4641      	mov	r1, r8
 8007de2:	4648      	mov	r0, r9
 8007de4:	f7fc faa4 	bl	8004330 <_malloc_r>
 8007de8:	4680      	mov	r8, r0
 8007dea:	b1d8      	cbz	r0, 8007e24 <_realloc_r+0x24c>
 8007dec:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007df0:	f023 0201 	bic.w	r2, r3, #1
 8007df4:	443a      	add	r2, r7
 8007df6:	f1a0 0108 	sub.w	r1, r0, #8
 8007dfa:	4291      	cmp	r1, r2
 8007dfc:	f000 80c1 	beq.w	8007f82 <_realloc_r+0x3aa>
 8007e00:	1f2a      	subs	r2, r5, #4
 8007e02:	2a24      	cmp	r2, #36	; 0x24
 8007e04:	d868      	bhi.n	8007ed8 <_realloc_r+0x300>
 8007e06:	2a13      	cmp	r2, #19
 8007e08:	bf9c      	itt	ls
 8007e0a:	4603      	movls	r3, r0
 8007e0c:	4622      	movls	r2, r4
 8007e0e:	d83a      	bhi.n	8007e86 <_realloc_r+0x2ae>
 8007e10:	6811      	ldr	r1, [r2, #0]
 8007e12:	6019      	str	r1, [r3, #0]
 8007e14:	6851      	ldr	r1, [r2, #4]
 8007e16:	6059      	str	r1, [r3, #4]
 8007e18:	6892      	ldr	r2, [r2, #8]
 8007e1a:	609a      	str	r2, [r3, #8]
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4648      	mov	r0, r9
 8007e20:	f7ff f970 	bl	8007104 <_free_r>
 8007e24:	4648      	mov	r0, r9
 8007e26:	f7f9 fea5 	bl	8001b74 <__malloc_unlock>
 8007e2a:	4640      	mov	r0, r8
 8007e2c:	b003      	add	sp, #12
 8007e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e32:	4611      	mov	r1, r2
 8007e34:	b003      	add	sp, #12
 8007e36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	f7fc ba79 	b.w	8004330 <_malloc_r>
 8007e3e:	230c      	movs	r3, #12
 8007e40:	f8c9 3000 	str.w	r3, [r9]
 8007e44:	2000      	movs	r0, #0
 8007e46:	e700      	b.n	8007c4a <_realloc_r+0x72>
 8007e48:	6843      	ldr	r3, [r0, #4]
 8007e4a:	f023 0e03 	bic.w	lr, r3, #3
 8007e4e:	f106 0110 	add.w	r1, r6, #16
 8007e52:	eb0e 0305 	add.w	r3, lr, r5
 8007e56:	428b      	cmp	r3, r1
 8007e58:	bfb8      	it	lt
 8007e5a:	4601      	movlt	r1, r0
 8007e5c:	f6ff af0f 	blt.w	8007c7e <_realloc_r+0xa6>
 8007e60:	4437      	add	r7, r6
 8007e62:	1b9b      	subs	r3, r3, r6
 8007e64:	f043 0301 	orr.w	r3, r3, #1
 8007e68:	f8ca 7008 	str.w	r7, [sl, #8]
 8007e6c:	607b      	str	r3, [r7, #4]
 8007e6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e72:	f003 0301 	and.w	r3, r3, #1
 8007e76:	431e      	orrs	r6, r3
 8007e78:	4648      	mov	r0, r9
 8007e7a:	f844 6c04 	str.w	r6, [r4, #-4]
 8007e7e:	f7f9 fe79 	bl	8001b74 <__malloc_unlock>
 8007e82:	4620      	mov	r0, r4
 8007e84:	e6e1      	b.n	8007c4a <_realloc_r+0x72>
 8007e86:	6823      	ldr	r3, [r4, #0]
 8007e88:	6003      	str	r3, [r0, #0]
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	2a1b      	cmp	r2, #27
 8007e8e:	6043      	str	r3, [r0, #4]
 8007e90:	bf9c      	itt	ls
 8007e92:	f104 0208 	addls.w	r2, r4, #8
 8007e96:	f100 0308 	addls.w	r3, r0, #8
 8007e9a:	d9b9      	bls.n	8007e10 <_realloc_r+0x238>
 8007e9c:	68a3      	ldr	r3, [r4, #8]
 8007e9e:	6083      	str	r3, [r0, #8]
 8007ea0:	68e3      	ldr	r3, [r4, #12]
 8007ea2:	2a24      	cmp	r2, #36	; 0x24
 8007ea4:	60c3      	str	r3, [r0, #12]
 8007ea6:	bf03      	ittte	eq
 8007ea8:	6923      	ldreq	r3, [r4, #16]
 8007eaa:	6103      	streq	r3, [r0, #16]
 8007eac:	6962      	ldreq	r2, [r4, #20]
 8007eae:	f100 0310 	addne.w	r3, r0, #16
 8007eb2:	bf09      	itett	eq
 8007eb4:	6142      	streq	r2, [r0, #20]
 8007eb6:	f104 0210 	addne.w	r2, r4, #16
 8007eba:	f100 0318 	addeq.w	r3, r0, #24
 8007ebe:	f104 0218 	addeq.w	r2, r4, #24
 8007ec2:	e7a5      	b.n	8007e10 <_realloc_r+0x238>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	461d      	mov	r5, r3
 8007eca:	463c      	mov	r4, r7
 8007ecc:	f7ff fe22 	bl	8007b14 <memmove>
 8007ed0:	465f      	mov	r7, fp
 8007ed2:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007ed6:	e6a6      	b.n	8007c26 <_realloc_r+0x4e>
 8007ed8:	4621      	mov	r1, r4
 8007eda:	f7ff fe1b 	bl	8007b14 <memmove>
 8007ede:	e79d      	b.n	8007e1c <_realloc_r+0x244>
 8007ee0:	eb0e 0c03 	add.w	ip, lr, r3
 8007ee4:	f106 0110 	add.w	r1, r6, #16
 8007ee8:	458c      	cmp	ip, r1
 8007eea:	f6ff af2a 	blt.w	8007d42 <_realloc_r+0x16a>
 8007eee:	465f      	mov	r7, fp
 8007ef0:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007ef4:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8007ef8:	1f2a      	subs	r2, r5, #4
 8007efa:	2a24      	cmp	r2, #36	; 0x24
 8007efc:	60cb      	str	r3, [r1, #12]
 8007efe:	6099      	str	r1, [r3, #8]
 8007f00:	d850      	bhi.n	8007fa4 <_realloc_r+0x3cc>
 8007f02:	2a13      	cmp	r2, #19
 8007f04:	bf98      	it	ls
 8007f06:	463b      	movls	r3, r7
 8007f08:	d920      	bls.n	8007f4c <_realloc_r+0x374>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	f8cb 3008 	str.w	r3, [fp, #8]
 8007f10:	6863      	ldr	r3, [r4, #4]
 8007f12:	2a1b      	cmp	r2, #27
 8007f14:	f8cb 300c 	str.w	r3, [fp, #12]
 8007f18:	bf9c      	itt	ls
 8007f1a:	3408      	addls	r4, #8
 8007f1c:	f10b 0310 	addls.w	r3, fp, #16
 8007f20:	d914      	bls.n	8007f4c <_realloc_r+0x374>
 8007f22:	68a3      	ldr	r3, [r4, #8]
 8007f24:	f8cb 3010 	str.w	r3, [fp, #16]
 8007f28:	68e3      	ldr	r3, [r4, #12]
 8007f2a:	2a24      	cmp	r2, #36	; 0x24
 8007f2c:	f8cb 3014 	str.w	r3, [fp, #20]
 8007f30:	bf03      	ittte	eq
 8007f32:	6923      	ldreq	r3, [r4, #16]
 8007f34:	f8cb 3018 	streq.w	r3, [fp, #24]
 8007f38:	6962      	ldreq	r2, [r4, #20]
 8007f3a:	3410      	addne	r4, #16
 8007f3c:	bf11      	iteee	ne
 8007f3e:	f10b 0318 	addne.w	r3, fp, #24
 8007f42:	f10b 0320 	addeq.w	r3, fp, #32
 8007f46:	f8cb 201c 	streq.w	r2, [fp, #28]
 8007f4a:	3418      	addeq	r4, #24
 8007f4c:	6822      	ldr	r2, [r4, #0]
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	6862      	ldr	r2, [r4, #4]
 8007f52:	605a      	str	r2, [r3, #4]
 8007f54:	68a2      	ldr	r2, [r4, #8]
 8007f56:	609a      	str	r2, [r3, #8]
 8007f58:	eb0b 0306 	add.w	r3, fp, r6
 8007f5c:	ebc6 020c 	rsb	r2, r6, ip
 8007f60:	f042 0201 	orr.w	r2, r2, #1
 8007f64:	f8ca 3008 	str.w	r3, [sl, #8]
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	431e      	orrs	r6, r3
 8007f74:	4648      	mov	r0, r9
 8007f76:	f8cb 6004 	str.w	r6, [fp, #4]
 8007f7a:	f7f9 fdfb 	bl	8001b74 <__malloc_unlock>
 8007f7e:	4638      	mov	r0, r7
 8007f80:	e663      	b.n	8007c4a <_realloc_r+0x72>
 8007f82:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007f86:	f022 0203 	bic.w	r2, r2, #3
 8007f8a:	4415      	add	r5, r2
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	e64a      	b.n	8007c26 <_realloc_r+0x4e>
 8007f90:	4621      	mov	r1, r4
 8007f92:	4638      	mov	r0, r7
 8007f94:	4675      	mov	r5, lr
 8007f96:	463c      	mov	r4, r7
 8007f98:	f7ff fdbc 	bl	8007b14 <memmove>
 8007f9c:	465f      	mov	r7, fp
 8007f9e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8007fa2:	e640      	b.n	8007c26 <_realloc_r+0x4e>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	f8cd c004 	str.w	ip, [sp, #4]
 8007fac:	f7ff fdb2 	bl	8007b14 <memmove>
 8007fb0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007fb4:	e7d0      	b.n	8007f58 <_realloc_r+0x380>
 8007fb6:	bf00      	nop
 8007fb8:	5576      	strb	r6, [r6, r5]
 8007fba:	4153      	adcs	r3, r2
 8007fbc:	5452      	strb	r2, [r2, r1]
 8007fbe:	635f      	str	r7, [r3, #52]	; 0x34
 8007fc0:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 8007fc2:	616d      	str	r5, [r5, #20]
 8007fc4:	646e      	str	r6, [r5, #68]	; 0x44
 8007fc6:	685f      	ldr	r7, [r3, #4]
 8007fc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007fca:	6c64      	ldr	r4, [r4, #68]	; 0x44
 8007fcc:	7265      	strb	r5, [r4, #9]
 8007fce:	0000      	movs	r0, r0
 8007fd0:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8007fd2:	7469      	strb	r1, [r5, #17]
 8007fd4:	4120      	asrs	r0, r4
 8007fd6:	2043      	movs	r0, #67	; 0x43
 8007fd8:	7953      	ldrb	r3, [r2, #5]
 8007fda:	7473      	strb	r3, [r6, #17]
 8007fdc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8007fde:	2e2e      	cmp	r6, #46	; 0x2e
 8007fe0:	002e      	movs	r6, r5
 8007fe2:	0000      	movs	r0, r0
 8007fe4:	4f20      	ldr	r7, [pc, #128]	; (8008068 <_realloc_r+0x490>)
 8007fe6:	0d4b      	lsrs	r3, r1, #21
 8007fe8:	000a      	movs	r2, r1
 8007fea:	0000      	movs	r0, r0
 8007fec:	4920      	ldr	r1, [pc, #128]	; (8008070 <_realloc_r+0x498>)
 8007fee:	696e      	ldr	r6, [r5, #20]
 8007ff0:	2074      	movs	r0, #116	; 0x74
 8007ff2:	7948      	ldrb	r0, [r1, #5]
 8007ff4:	7264      	strb	r4, [r4, #9]
 8007ff6:	706f      	strb	r7, [r5, #1]
 8007ff8:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8007ffa:	6369      	str	r1, [r5, #52]	; 0x34
 8007ffc:	5320      	strh	r0, [r4, r4]
 8007ffe:	7379      	strb	r1, [r7, #13]
 8008000:	6574      	str	r4, [r6, #84]	; 0x54
 8008002:	2e6d      	cmp	r6, #109	; 0x6d
 8008004:	2e2e      	cmp	r6, #46	; 0x2e
 8008006:	0000      	movs	r0, r0
 8008008:	4f20      	ldr	r7, [pc, #128]	; (800808c <_realloc_r+0x4b4>)
 800800a:	0d6b      	lsrs	r3, r5, #21
 800800c:	000a      	movs	r2, r1
 800800e:	0000      	movs	r0, r0
 8008010:	6552      	str	r2, [r2, #84]	; 0x54
 8008012:	6461      	str	r1, [r4, #68]	; 0x44
 8008014:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8008016:	2067      	movs	r0, #103	; 0x67
 8008018:	6c55      	ldr	r5, [r2, #68]	; 0x44
 800801a:	7274      	strb	r4, [r6, #9]
 800801c:	7361      	strb	r1, [r4, #13]
 800801e:	6e6f      	ldr	r7, [r5, #100]	; 0x64
 8008020:	6369      	str	r1, [r5, #52]	; 0x34
 8008022:	4420      	add	r0, r4
 8008024:	7369      	strb	r1, [r5, #13]
 8008026:	6174      	str	r4, [r6, #20]
 8008028:	636e      	str	r6, [r5, #52]	; 0x34
 800802a:	2065      	movs	r0, #101	; 0x65
 800802c:	6553      	str	r3, [r2, #84]	; 0x54
 800802e:	736e      	strb	r6, [r5, #13]
 8008030:	726f      	strb	r7, [r5, #9]
 8008032:	2e2e      	cmp	r6, #46	; 0x2e
 8008034:	0d2e      	lsrs	r6, r5, #20
 8008036:	000a      	movs	r2, r1
 8008038:	0a0d      	lsrs	r5, r1, #8
 800803a:	6944      	ldr	r4, [r0, #20]
 800803c:	7473      	strb	r3, [r6, #17]
 800803e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008040:	6563      	str	r3, [r4, #84]	; 0x54
 8008042:	203a      	movs	r0, #58	; 0x3a
 8008044:	0000      	movs	r0, r0
 8008046:	0000      	movs	r0, r0
 8008048:	5546      	strb	r6, [r0, r5]
 800804a:	4b43      	ldr	r3, [pc, #268]	; (8008158 <_realloc_r+0x580>)
 800804c:	0000      	movs	r0, r0
 800804e:	0000      	movs	r0, r0
 8008050:	4850      	ldr	r0, [pc, #320]	; (8008194 <_realloc_r+0x5bc>)
 8008052:	5420      	strb	r0, [r4, r0]
 8008054:	7361      	strb	r1, [r4, #13]
 8008056:	206b      	movs	r0, #107	; 0x6b
 8008058:	614c      	str	r4, [r1, #20]
 800805a:	6e75      	ldr	r5, [r6, #100]	; 0x64
 800805c:	6863      	ldr	r3, [r4, #4]
 800805e:	6465      	str	r5, [r4, #68]	; 0x44
 8008060:	2e2e      	cmp	r6, #46	; 0x2e
 8008062:	0d2e      	lsrs	r6, r5, #20
 8008064:	000a      	movs	r2, r1
 8008066:	0000      	movs	r0, r0
 8008068:	6341      	str	r1, [r0, #52]	; 0x34
 800806a:	7571      	strb	r1, [r6, #21]
 800806c:	7269      	strb	r1, [r5, #9]
 800806e:	6465      	str	r5, [r4, #68]	; 0x44
 8008070:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008072:	7475      	strb	r5, [r6, #17]
 8008074:	7865      	ldrb	r5, [r4, #1]
 8008076:	6620      	str	r0, [r4, #96]	; 0x60
 8008078:	726f      	strb	r7, [r5, #9]
 800807a:	5020      	str	r0, [r4, r0]
 800807c:	4d48      	ldr	r5, [pc, #288]	; (80081a0 <_realloc_r+0x5c8>)
 800807e:	7465      	strb	r5, [r4, #17]
 8008080:	7265      	strb	r5, [r4, #9]
 8008082:	2e2e      	cmp	r6, #46	; 0x2e
 8008084:	0d2e      	lsrs	r6, r5, #20
 8008086:	000a      	movs	r2, r1
 8008088:	4850      	ldr	r0, [pc, #320]	; (80081cc <_realloc_r+0x5f4>)
 800808a:	5220      	strh	r0, [r4, r0]
 800808c:	6165      	str	r5, [r4, #20]
 800808e:	0064      	lsls	r4, r4, #1
 8008090:	4850      	ldr	r0, [pc, #320]	; (80081d4 <_realloc_r+0x5fc>)
 8008092:	5620      	ldrsb	r0, [r4, r0]
 8008094:	4c41      	ldr	r4, [pc, #260]	; (800819c <_realloc_r+0x5c4>)
 8008096:	4555      	cmp	r5, sl
 8008098:	203a      	movs	r0, #58	; 0x3a
 800809a:	6425      	str	r5, [r4, #64]	; 0x40
 800809c:	0a0d      	lsrs	r5, r1, #8
 800809e:	0000      	movs	r0, r0
 80080a0:	6441      	str	r1, [r0, #68]	; 0x44
 80080a2:	6964      	ldr	r4, [r4, #20]
 80080a4:	676e      	str	r6, [r5, #116]	; 0x74
 80080a6:	5020      	str	r0, [r4, r0]
 80080a8:	2048      	movs	r0, #72	; 0x48
 80080aa:	7055      	strb	r5, [r2, #1]
 80080ac:	2e2e      	cmp	r6, #46	; 0x2e
 80080ae:	0d2e      	lsrs	r6, r5, #20
 80080b0:	000a      	movs	r2, r1
 80080b2:	0000      	movs	r0, r0
 80080b4:	6441      	str	r1, [r0, #68]	; 0x44
 80080b6:	6964      	ldr	r4, [r4, #20]
 80080b8:	676e      	str	r6, [r5, #116]	; 0x74
 80080ba:	5020      	str	r0, [r4, r0]
 80080bc:	2048      	movs	r0, #72	; 0x48
 80080be:	4f44      	ldr	r7, [pc, #272]	; (80081d0 <_realloc_r+0x5f8>)
 80080c0:	6e77      	ldr	r7, [r6, #100]	; 0x64
 80080c2:	2e2e      	cmp	r6, #46	; 0x2e
 80080c4:	0d2e      	lsrs	r6, r5, #20
 80080c6:	000a      	movs	r2, r1
 80080c8:	7453      	strb	r3, [r2, #17]
 80080ca:	6261      	str	r1, [r4, #36]	; 0x24
 80080cc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80080ce:	7a69      	ldrb	r1, [r5, #9]
 80080d0:	6465      	str	r5, [r4, #68]	; 0x44
 80080d2:	5020      	str	r0, [r4, r0]
 80080d4:	2e48      	cmp	r6, #72	; 0x48
 80080d6:	2e2e      	cmp	r6, #46	; 0x2e
 80080d8:	00000a0d 	.word	0x00000a0d
 80080dc:	00002820 	.word	0x00002820
 80080e0:	000a0d29 	.word	0x000a0d29
 80080e4:	2d2d2d3d 	.word	0x2d2d2d3d
 80080e8:	4e4f442d 	.word	0x4e4f442d
 80080ec:	2d2d2d45 	.word	0x2d2d2d45
 80080f0:	0a0d3d2d 	.word	0x0a0d3d2d
 80080f4:	00000000 	.word	0x00000000
 80080f8:	6f6f420a 	.word	0x6f6f420a
 80080fc:	676e6974 	.word	0x676e6974
 8008100:	2e707520 	.word	0x2e707520
 8008104:	0a0d2e2e 	.word	0x0a0d2e2e
 8008108:	00000000 	.word	0x00000000
 800810c:	72617453 	.word	0x72617453
 8008110:	676e6974 	.word	0x676e6974
 8008114:	53445520 	.word	0x53445520
 8008118:	0d2e2e2e 	.word	0x0d2e2e2e
 800811c:	0000000a 	.word	0x0000000a
 8008120:	74736944 	.word	0x74736944
 8008124:	65636e61 	.word	0x65636e61
 8008128:	0000203a 	.word	0x0000203a
 800812c:	41535576 	.word	0x41535576
 8008130:	705f5452 	.word	0x705f5452
 8008134:	00737475 	.word	0x00737475
 8008138:	4f525245 	.word	0x4f525245
 800813c:	33383452 	.word	0x33383452
 8008140:	00000a0d 	.word	0x00000a0d
 8008144:	4e495250 	.word	0x4e495250
 8008148:	474e4954 	.word	0x474e4954
 800814c:	58454e20 	.word	0x58454e20
 8008150:	494c2054 	.word	0x494c2054
 8008154:	203a454e 	.word	0x203a454e
 8008158:	00000000 	.word	0x00000000
 800815c:	6d6d6f43 	.word	0x6d6d6f43
 8008160:	3a646e61 	.word	0x3a646e61
 8008164:	00000020 	.word	0x00000020
 8008168:	7265766f 	.word	0x7265766f
 800816c:	77656976 	.word	0x77656976
 8008170:	0000000d 	.word	0x0000000d
 8008174:	626f277b 	.word	0x626f277b
 8008178:	7463656a 	.word	0x7463656a
 800817c:	7079745f 	.word	0x7079745f
 8008180:	203a2765 	.word	0x203a2765
 8008184:	47455227 	.word	0x47455227
 8008188:	5f454d49 	.word	0x5f454d49
 800818c:	2c274850 	.word	0x2c274850
 8008190:	656d2720 	.word	0x656d2720
 8008194:	646f6874 	.word	0x646f6874
 8008198:	27203a27 	.word	0x27203a27
 800819c:	27746573 	.word	0x27746573
 80081a0:	6527202c 	.word	0x6527202c
 80081a4:	726f7272 	.word	0x726f7272
 80081a8:	64253a27 	.word	0x64253a27
 80081ac:	6f27202c 	.word	0x6f27202c
 80081b0:	63656a62 	.word	0x63656a62
 80081b4:	64695f74 	.word	0x64695f74
 80081b8:	64253a27 	.word	0x64253a27
 80081bc:	000a0d7d 	.word	0x000a0d7d
 80081c0:	626f277b 	.word	0x626f277b
 80081c4:	7463656a 	.word	0x7463656a
 80081c8:	7079745f 	.word	0x7079745f
 80081cc:	203a2765 	.word	0x203a2765
 80081d0:	41545327 	.word	0x41545327
 80081d4:	2c274547 	.word	0x2c274547
 80081d8:	656d2720 	.word	0x656d2720
 80081dc:	646f6874 	.word	0x646f6874
 80081e0:	27203a27 	.word	0x27203a27
 80081e4:	27746573 	.word	0x27746573
 80081e8:	6527202c 	.word	0x6527202c
 80081ec:	726f7272 	.word	0x726f7272
 80081f0:	64253a27 	.word	0x64253a27
 80081f4:	6f27202c 	.word	0x6f27202c
 80081f8:	63656a62 	.word	0x63656a62
 80081fc:	64695f74 	.word	0x64695f74
 8008200:	64253a27 	.word	0x64253a27
 8008204:	000a0d7d 	.word	0x000a0d7d
 8008208:	49474552 	.word	0x49474552
 800820c:	505f454d 	.word	0x505f454d
 8008210:	00000348 	.word	0x00000348
 8008214:	47415453 	.word	0x47415453
 8008218:	00000345 	.word	0x00000345
 800821c:	49474552 	.word	0x49474552
 8008220:	4c5f454d 	.word	0x4c5f454d
 8008224:	54484749 	.word	0x54484749
 8008228:	03474e49 	.word	0x03474e49
 800822c:	00000000 	.word	0x00000000
 8008230:	626f277b 	.word	0x626f277b
 8008234:	7463656a 	.word	0x7463656a
 8008238:	7079745f 	.word	0x7079745f
 800823c:	203a2765 	.word	0x203a2765
 8008240:	202c2727 	.word	0x202c2727
 8008244:	6874656d 	.word	0x6874656d
 8008248:	203a646f 	.word	0x203a646f
 800824c:	74657327 	.word	0x74657327
 8008250:	65202c27 	.word	0x65202c27
 8008254:	726f7272 	.word	0x726f7272
 8008258:	3031203a 	.word	0x3031203a
 800825c:	6f27202c 	.word	0x6f27202c
 8008260:	63656a62 	.word	0x63656a62
 8008264:	64695f74 	.word	0x64695f74
 8008268:	2d203a27 	.word	0x2d203a27
 800826c:	0a0d7d31 	.word	0x0a0d7d31
 8008270:	00000000 	.word	0x00000000
 8008274:	6f727245 	.word	0x6f727245
 8008278:	49203a72 	.word	0x49203a72
 800827c:	726f636e 	.word	0x726f636e
 8008280:	74636572 	.word	0x74636572
 8008284:	47455220 	.word	0x47455220
 8008288:	5f454d49 	.word	0x5f454d49
 800828c:	69204850 	.word	0x69204850
 8008290:	000a0d64 	.word	0x000a0d64
 8008294:	55424544 	.word	0x55424544
 8008298:	44203a47 	.word	0x44203a47
 800829c:	54454c45 	.word	0x54454c45
 80082a0:	20474e49 	.word	0x20474e49
 80082a4:	49474552 	.word	0x49474552
 80082a8:	495f454d 	.word	0x495f454d
 80082ac:	64252044 	.word	0x64252044
 80082b0:	00000a0d 	.word	0x00000a0d
 80082b4:	6f727245 	.word	0x6f727245
 80082b8:	49203a72 	.word	0x49203a72
 80082bc:	726f636e 	.word	0x726f636e
 80082c0:	74636572 	.word	0x74636572
 80082c4:	61747320 	.word	0x61747320
 80082c8:	69206567 	.word	0x69206567
 80082cc:	000a0d64 	.word	0x000a0d64
 80082d0:	63637553 	.word	0x63637553
 80082d4:	75667365 	.word	0x75667365
 80082d8:	20796c6c 	.word	0x20796c6c
 80082dc:	656c6564 	.word	0x656c6564
 80082e0:	20646574 	.word	0x20646574
 80082e4:	67617473 	.word	0x67617473
 80082e8:	64692065 	.word	0x64692065
 80082ec:	6425203a 	.word	0x6425203a
 80082f0:	00000a0d 	.word	0x00000a0d
 80082f4:	6f727245 	.word	0x6f727245
 80082f8:	55203a72 	.word	0x55203a72
 80082fc:	6f6e6b6e 	.word	0x6f6e6b6e
 8008300:	4f206e77 	.word	0x4f206e77
 8008304:	63656a62 	.word	0x63656a62
 8008308:	25272074 	.word	0x25272074
 800830c:	0a0d2773 	.word	0x0a0d2773
 8008310:	00000000 	.word	0x00000000
 8008314:	6469277b 	.word	0x6469277b
 8008318:	25203a27 	.word	0x25203a27
 800831c:	27202c64 	.word	0x27202c64
 8008320:	676e656c 	.word	0x676e656c
 8008324:	3a276874 	.word	0x3a276874
 8008328:	2c642520 	.word	0x2c642520
 800832c:	726f2720 	.word	0x726f2720
 8008330:	27726564 	.word	0x27726564
 8008334:	2c64253a 	.word	0x2c64253a
 8008338:	68702720 	.word	0x68702720
 800833c:	2764695f 	.word	0x2764695f
 8008340:	6425203a 	.word	0x6425203a
 8008344:	6c27202c 	.word	0x6c27202c
 8008348:	74686769 	.word	0x74686769
 800834c:	5f676e69 	.word	0x5f676e69
 8008350:	3a276469 	.word	0x3a276469
 8008354:	202c6425 	.word	0x202c6425
 8008358:	69737527 	.word	0x69737527
 800835c:	3a27676e 	.word	0x3a27676e
 8008360:	0d7d6425 	.word	0x0d7d6425
 8008364:	0000000a 	.word	0x0000000a
 8008368:	6469277b 	.word	0x6469277b
 800836c:	25203a27 	.word	0x25203a27
 8008370:	27202c64 	.word	0x27202c64
 8008374:	3a276870 	.word	0x3a276870
 8008378:	2c642520 	.word	0x2c642520
 800837c:	65642720 	.word	0x65642720
 8008380:	2779616c 	.word	0x2779616c
 8008384:	6425203a 	.word	0x6425203a
 8008388:	000a0d7d 	.word	0x000a0d7d
 800838c:	6f727245 	.word	0x6f727245
 8008390:	49203a72 	.word	0x49203a72
 8008394:	6c61766e 	.word	0x6c61766e
 8008398:	72206469 	.word	0x72206469
 800839c:	6d696765 	.word	0x6d696765
 80083a0:	68705f65 	.word	0x68705f65
 80083a4:	0d64695f 	.word	0x0d64695f
 80083a8:	0000000a 	.word	0x0000000a
 80083ac:	6f727245 	.word	0x6f727245
 80083b0:	49203a72 	.word	0x49203a72
 80083b4:	6c61766e 	.word	0x6c61766e
 80083b8:	73206469 	.word	0x73206469
 80083bc:	65676174 	.word	0x65676174
 80083c0:	0d64695f 	.word	0x0d64695f
 80083c4:	0000000a 	.word	0x0000000a
 80083c8:	03746567 	.word	0x03746567
 80083cc:	00000000 	.word	0x00000000
 80083d0:	03746573 	.word	0x03746573
 80083d4:	00000000 	.word	0x00000000
 80083d8:	036c6564 	.word	0x036c6564
 80083dc:	00000000 	.word	0x00000000
 80083e0:	656d277b 	.word	0x656d277b
 80083e4:	646f6874 	.word	0x646f6874
 80083e8:	27203a27 	.word	0x27203a27
 80083ec:	27202c27 	.word	0x27202c27
 80083f0:	6f727265 	.word	0x6f727265
 80083f4:	203a2772 	.word	0x203a2772
 80083f8:	0a0d7d39 	.word	0x0a0d7d39
 80083fc:	00000000 	.word	0x00000000
 8008400:	00000043 	.word	0x00000043

08008404 <_global_impure_ptr>:
 8008404:	20000070                                p.. 

08008408 <zeroes.6760>:
 8008408:	30303030 30303030 30303030 30303030     0000000000000000
 8008418:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8008428:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8008438:	00000000 33323130 37363534 62613938     ....0123456789ab
 8008448:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
 8008458:	00000030                                0...

0800845c <blanks.6759>:
 800845c:	20202020 20202020 20202020 20202020                     
 800846c:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
 800847c:	49534f50 00000058 00000000              POSIX.......

08008488 <__mprec_tens>:
 8008488:	00000000 3ff00000 00000000 40240000     .......?......$@
 8008498:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 80084a8:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 80084b8:	00000000 412e8480 00000000 416312d0     .......A......cA
 80084c8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 80084d8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 80084e8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 80084f8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8008508:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8008518:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8008528:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8008538:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8008548:	79d99db4 44ea7843                       ...yCx.D

08008550 <__mprec_bigtens>:
 8008550:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8008560:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8008570:	7f73bf3c 75154fdd                       <.s..O.u

08008578 <p05.5266>:
 8008578:	00000005 00000019 0000007d              ........}...

08008584 <_init>:
 8008584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008586:	bf00      	nop
 8008588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858a:	bc08      	pop	{r3}
 800858c:	469e      	mov	lr, r3
 800858e:	4770      	bx	lr

08008590 <_fini>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr
