   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vPortStartFirstTask,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	vPortStartFirstTask:
  25              	.LFB112:
  26              		.file 1 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.1.1 - Copyright (C) 2012 Real Time Engineers Ltd.
   3:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   4:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  24:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  42:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     
  44:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  45:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  46:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Having a problem?  Start by reading the FAQ "My application does   *
  47:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    not run, what could be wrong?                                      *
  48:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  49:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    http://www.FreeRTOS.org/FAQHelp.html                               *
  50:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  51:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  52:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  53:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     
  54:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, training, latest information, 
  55:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     license and contact details.
  56:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     
  57:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  58:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     including FreeRTOS+Trace - an indispensable productivity tool.
  59:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  60:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Real Time Engineers ltd license FreeRTOS to High Integrity Systems, who sell 
  61:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the code with commercial support, indemnification, and middleware, under 
  62:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the OpenRTOS brand: http://www.OpenRTOS.com.  High Integrity Systems also
  63:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide a safety engineered and independently SIL3 certified version under 
  64:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the SafeRTOS brand: http://www.SafeRTOS.com.
  65:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  66:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  67:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  68:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  69:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  70:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  71:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  72:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  73:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  74:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  75:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  76:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  77:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  78:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  79:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  80:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long * ) 0xe000e010 )
  81:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long * ) 0xe000e014 )
  82:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long * ) 0xe000ed04 )
  83:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long * ) 0xe000ed20 )
  84:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  85:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  86:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  87:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  88:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  89:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  90:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  91:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  92:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR					( ( volatile unsigned long * ) 0xe000ef34 ) /* Floating point context control
  93:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS	( 0x3UL << 30UL )
  94:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  95:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  96:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  97:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXEC_RETURN		( 0xfffffffd )
  98:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  99:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
 100:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
 101:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
 102:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 103:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 104:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 105:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
 106:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 107:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 108:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
 109:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 110:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
 111:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 112:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 113:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 114:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 115:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 116:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 117:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 118:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 119:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 120:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 121:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 122:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortStartFirstTask( void ) __attribute__ (( naked ));
 123:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 124:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 125:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 126:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 127:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  static void vPortEnableVFP( void ) __attribute__ (( naked ));
 128:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 129:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 130:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 131:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 132:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 133:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 134:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 135:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 137:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 138:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 139:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 140:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 141:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 142:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 143:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 144:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 145:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 146:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 147:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 148:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
 149:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 150:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 151:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 152:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 153:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 154:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 155:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 156:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 157:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 158:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 159:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 160:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 161:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 162:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 163:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 164:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 165:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 166:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 167:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 168:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 169:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 170:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 171:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 173:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 174:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 175:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 176:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 177:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 178:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 179:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 181:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 182:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 183:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortStartFirstTask( void )
 184:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  27              		.loc 1 184 0
  28              		.cfi_startproc
  29              		@ Naked Function: prologue and epilogue provided by programmer.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
 185:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
  32              		.loc 1 185 0
  33              	@ 185 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
  34 0000 0348     		 ldr r0, =0xE000ED08 	
  35 0002 0068     	 ldr r0, [r0] 			
  36 0004 0068     	 ldr r0, [r0] 			
  37 0006 80F30888 	 msr msp, r0			
  38 000a 62B6     	 cpsie i				
  39 000c 00DF     	 svc 0					
  40 000e 00BF     	 nop					
  41              	
  42              	@ 0 "" 2
 186:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 187:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 188:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 189:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 190:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 191:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 192:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 193:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
  43              		.loc 1 194 0
  44              		.thumb
  45              		.cfi_endproc
  46              	.LFE112:
  48              		.section	.text.prvSetupTimerInterrupt,"ax",%progbits
  49              		.align	2
  50              		.thumb
  51              		.thumb_func
  53              	prvSetupTimerInterrupt:
  54              	.LFB120:
 195:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 197:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 199:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 200:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 201:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 202:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 203:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 204:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 205:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 206:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 207:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 208:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 209:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 211:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 213:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 215:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 216:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 217:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 218:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 219:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 220:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 221:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 222:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 223:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 224:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 225:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 227:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 228:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 229:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 231:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 232:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 233:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 234:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 235:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 236:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 237:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 238:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 239:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 240:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 241:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 242:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 243:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 244:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 245:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 246:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 247:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 248:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 249:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 250:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 251:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 252:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 253:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 254:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 255:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 256:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 257:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 258:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 259:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 260:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 261:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 262:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 263:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 264:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 265:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 266:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst				\n" /* Get the location of the current TCB. */
 267:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 268:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 269:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 270:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 271:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 272:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 273:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 274:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 275:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 276:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 277:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 278:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 279:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 280:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 281:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 282:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 283:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 284:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 285:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 286:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 287:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 288:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 289:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 290:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 291:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 292:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
 293:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 294:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 295:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 296:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 297:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 298:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 299:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 300:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 301:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 302:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 303:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 304:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 305:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 306:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** unsigned long ulDummy;
 307:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 308:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 309:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if configUSE_PREEMPTION == 1
 310:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 311:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 312:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 313:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 314:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 315:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		vTaskIncrementTick();
 316:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 317:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 318:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 319:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 320:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 321:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 322:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 323:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 324:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 325:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 326:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  55              		.loc 1 326 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
 327:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 328:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  60              		.loc 1 328 0
  61 0000 40F20003 		movw	r3, #:lower16:SystemCoreClock
  62 0004 C0F20003 		movt	r3, #:upper16:SystemCoreClock
  63 0008 1A68     		ldr	r2, [r3]
  64 000a 44F6D353 		movw	r3, #19923
  65 000e C1F26203 		movt	r3, 4194
  66 0012 A3FB0212 		umull	r1, r2, r3, r2
  67 0016 9209     		lsrs	r2, r2, #6
  68 0018 013A     		subs	r2, r2, #1
  69 001a 4EF21403 		movw	r3, #57364
  70 001e CEF20003 		movt	r3, 57344
  71 0022 1A60     		str	r2, [r3]
 329:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
  72              		.loc 1 329 0
  73 0024 4EF21003 		movw	r3, #57360
  74 0028 CEF20003 		movt	r3, 57344
  75 002c 0722     		movs	r2, #7
  76 002e 1A60     		str	r2, [r3]
  77 0030 7047     		bx	lr
  78              		.cfi_endproc
  79              	.LFE120:
  81 0032 00BF     		.section	.text.vPortEnableVFP,"ax",%progbits
  82              		.align	2
  83              		.thumb
  84              		.thumb_func
  86              	vPortEnableVFP:
  87              	.LFB121:
 330:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 331:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 332:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 333:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 334:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 335:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  88              		.loc 1 335 0
  89              		.cfi_startproc
  90              		@ Naked Function: prologue and epilogue provided by programmer.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
 336:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
  93              		.loc 1 336 0
  94              	@ 336 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
  95 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
  96 0004 0168     		ldr r1, [r0]				
  97              									
  98 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
  99 000a 0160     		str r1, [r0]				
 100 000c 7047     		bx r14						
 101              	@ 0 "" 2
 337:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 338:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 339:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 340:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 341:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 342:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 343:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 344:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 345:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 102              		.loc 1 345 0
 103              		.thumb
 104              		.cfi_endproc
 105              	.LFE121:
 107 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 108              		.align	2
 109              		.global	pxPortInitialiseStack
 110              		.thumb
 111              		.thumb_func
 113              	pxPortInitialiseStack:
 114              	.LFB110:
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 115              		.loc 1 136 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
 120              	.LVL0:
 144:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 121              		.loc 1 144 0
 122 0000 4FF08073 		mov	r3, #16777216
 123 0004 40F8043C 		str	r3, [r0, #-4]
 124              	.LVL1:
 146:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 125              		.loc 1 146 0
 126 0008 40F8081C 		str	r1, [r0, #-8]
 127              	.LVL2:
 148:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 128              		.loc 1 148 0
 129 000c 0023     		movs	r3, #0
 130 000e 40F80C3C 		str	r3, [r0, #-12]
 131              	.LVL3:
 152:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 132              		.loc 1 152 0
 133 0012 40F8202C 		str	r2, [r0, #-32]
 134              	.LVL4:
 157:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 135              		.loc 1 157 0
 136 0016 6FF00203 		mvn	r3, #2
 137 001a 40F8243C 		str	r3, [r0, #-36]
 138              	.LVL5:
 162:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 139              		.loc 1 162 0
 140 001e 4438     		subs	r0, r0, #68
 141              	.LVL6:
 142 0020 7047     		bx	lr
 143              		.cfi_endproc
 144              	.LFE110:
 146 0022 00BF     		.section	.text.SVC_Handler,"ax",%progbits
 147              		.align	2
 148              		.global	SVC_Handler
 149              		.thumb
 150              		.thumb_func
 152              	SVC_Handler:
 153              	.LFB111:
 166:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 154              		.loc 1 166 0
 155              		.cfi_startproc
 156              		@ Naked Function: prologue and epilogue provided by programmer.
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 167:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 159              		.loc 1 167 0
 160              	@ 167 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 161 0000 054B     			ldr	r3, pxCurrentTCBConst2		
 162 0002 1968     		ldr r1, [r3]					
 163 0004 0868     		ldr r0, [r1]					
 164 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 165 000a 80F30988 		msr psp, r0						
 166 000e 4FF00000 		mov r0, #0 						
 167 0012 80F31188 		msr	basepri, r0					
 168 0016 7047     		bx r14							
 169              										
 170              		.align 2						
 171 0018 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 172              	
 173              	@ 0 "" 2
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 174              		.loc 1 180 0
 175              		.thumb
 176              		.cfi_endproc
 177              	.LFE111:
 179              		.section	.text.xPortStartScheduler,"ax",%progbits
 180              		.align	2
 181              		.global	xPortStartScheduler
 182              		.thumb
 183              		.thumb_func
 185              	xPortStartScheduler:
 186              	.LFB113:
 201:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 187              		.loc 1 201 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191 0000 10B5     		push	{r4, lr}
 192              	.LCFI0:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 4, -8
 195              		.cfi_offset 14, -4
 203:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 196              		.loc 1 203 0
 197 0002 4EF62053 		movw	r3, #60704
 198 0006 CEF20003 		movt	r3, 57344
 199 000a 1A68     		ldr	r2, [r3]
 200 000c 42F47F02 		orr	r2, r2, #16711680
 201 0010 1A60     		str	r2, [r3]
 204:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 202              		.loc 1 204 0
 203 0012 1A68     		ldr	r2, [r3]
 204 0014 42F07F42 		orr	r2, r2, #-16777216
 205 0018 1A60     		str	r2, [r3]
 208:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 206              		.loc 1 208 0
 207 001a FFF7FEFF 		bl	prvSetupTimerInterrupt
 208              	.LVL7:
 211:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 209              		.loc 1 211 0
 210 001e 40F20003 		movw	r3, #:lower16:.LANCHOR0
 211 0022 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 212 0026 0024     		movs	r4, #0
 213 0028 1C60     		str	r4, [r3]
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 214              		.loc 1 214 0
 215 002a FFF7FEFF 		bl	vPortEnableVFP
 216              	.LVL8:
 217:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 217              		.loc 1 217 0
 218 002e 4EF63473 		movw	r3, #61236
 219 0032 CEF20003 		movt	r3, 57344
 220 0036 1A68     		ldr	r2, [r3]
 221 0038 42F04042 		orr	r2, r2, #-1073741824
 222 003c 1A60     		str	r2, [r3]
 220:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 223              		.loc 1 220 0
 224 003e FFF7FEFF 		bl	vPortStartFirstTask
 225              	.LVL9:
 224:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 226              		.loc 1 224 0
 227 0042 2046     		mov	r0, r4
 228 0044 10BD     		pop	{r4, pc}
 229              		.cfi_endproc
 230              	.LFE113:
 232 0046 00BF     		.section	.text.vPortEndScheduler,"ax",%progbits
 233              		.align	2
 234              		.global	vPortEndScheduler
 235              		.thumb
 236              		.thumb_func
 238              	vPortEndScheduler:
 239              	.LFB114:
 228:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 240              		.loc 1 228 0
 241              		.cfi_startproc
 242              		@ args = 0, pretend = 0, frame = 0
 243              		@ frame_needed = 0, uses_anonymous_args = 0
 244              		@ link register save eliminated.
 245 0000 7047     		bx	lr
 246              		.cfi_endproc
 247              	.LFE114:
 249 0002 00BF     		.section	.text.vPortYieldFromISR,"ax",%progbits
 250              		.align	2
 251              		.global	vPortYieldFromISR
 252              		.thumb
 253              		.thumb_func
 255              	vPortYieldFromISR:
 256              	.LFB115:
 235:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 257              		.loc 1 235 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 237:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 262              		.loc 1 237 0
 263 0000 4EF60453 		movw	r3, #60676
 264 0004 CEF20003 		movt	r3, 57344
 265 0008 4FF08052 		mov	r2, #268435456
 266 000c 1A60     		str	r2, [r3]
 267 000e 7047     		bx	lr
 268              		.cfi_endproc
 269              	.LFE115:
 271              		.section	.text.vPortEnterCritical,"ax",%progbits
 272              		.align	2
 273              		.global	vPortEnterCritical
 274              		.thumb
 275              		.thumb_func
 277              	vPortEnterCritical:
 278              	.LFB116:
 242:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 279              		.loc 1 242 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 243:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 284              		.loc 1 243 0
 285              	@ 243 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 286 0000 4FF0BF00 			mov r0, #191								
 287 0004 80F31188 		msr basepri, r0							
 288              	
 289              	@ 0 "" 2
 244:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 290              		.loc 1 244 0
 291              		.thumb
 292 0008 40F20003 		movw	r3, #:lower16:.LANCHOR0
 293 000c C0F20003 		movt	r3, #:upper16:.LANCHOR0
 294 0010 1A68     		ldr	r2, [r3]
 295 0012 0132     		adds	r2, r2, #1
 296 0014 1A60     		str	r2, [r3]
 297 0016 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE116:
 301              		.section	.text.vPortExitCritical,"ax",%progbits
 302              		.align	2
 303              		.global	vPortExitCritical
 304              		.thumb
 305              		.thumb_func
 307              	vPortExitCritical:
 308              	.LFB117:
 249:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 309              		.loc 1 249 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 250:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 314              		.loc 1 250 0
 315 0000 40F20003 		movw	r3, #:lower16:.LANCHOR0
 316 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 317 0008 1A68     		ldr	r2, [r3]
 318 000a 013A     		subs	r2, r2, #1
 319 000c 1A60     		str	r2, [r3]
 251:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 320              		.loc 1 251 0
 321 000e 1AB9     		cbnz	r2, .L10
 253:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 322              		.loc 1 253 0
 323              	@ 253 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 324 0010 4FF00000 			mov r0, #0					
 325 0014 80F31188 		msr basepri, r0				
 326              	
 327              	@ 0 "" 2
 328              		.thumb
 329              	.L10:
 330 0018 7047     		bx	lr
 331              		.cfi_endproc
 332              	.LFE117:
 334 001a 00BF     		.section	.text.PendSV_Handler,"ax",%progbits
 335              		.align	2
 336              		.global	PendSV_Handler
 337              		.thumb
 338              		.thumb_func
 340              	PendSV_Handler:
 341              	.LFB118:
 259:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 342              		.loc 1 259 0
 343              		.cfi_startproc
 344              		@ Naked Function: prologue and epilogue provided by programmer.
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 262:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 347              		.loc 1 262 0
 348              	@ 262 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 349 0000 EFF30980 			mrs r0, psp							
 350              											
 351 0004 114B     		ldr	r3, pxCurrentTCBConst				
 352 0006 1A68     		ldr	r2, [r3]						
 353              											
 354 0008 1EF0100F 		tst r14, #0x10						
 355 000c 08BF     		it eq								
 356 000e 20ED108A 		vstmdbeq r0!, {s16-s31}				
 357              											
 358 0012 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 359              											
 360 0016 1060     		str r0, [r2]						
 361              											
 362 0018 2DE90840 		stmdb sp!, {r3, r14}				
 363 001c 4FF0BF00 		mov r0, #191 							
 364 0020 80F31188 		msr basepri, r0						
 365 0024 FFF7FEFF 		bl vTaskSwitchContext				
 366 0028 4FF00000 		mov r0, #0							
 367 002c 80F31188 		msr basepri, r0						
 368 0030 BDE80840 		ldmia sp!, {r3, r14}				
 369              											
 370 0034 1968     		ldr r1, [r3]						
 371 0036 0868     		ldr r0, [r1]						
 372              											
 373 0038 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 374              											
 375 003c 1EF0100F 		tst r14, #0x10						
 376 0040 08BF     		it eq								
 377 0042 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 378              											
 379 0046 80F30988 		msr psp, r0							
 380 004a 7047     		bx r14								
 381              											
 382              		.align 2							
 383 004c 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 384              	
 385              	@ 0 "" 2
 301:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 386              		.loc 1 301 0
 387              		.thumb
 388              		.cfi_endproc
 389              	.LFE118:
 391              		.section	.text.SysTick_Handler,"ax",%progbits
 392              		.align	2
 393              		.global	SysTick_Handler
 394              		.thumb
 395              		.thumb_func
 397              	SysTick_Handler:
 398              	.LFB119:
 305:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** unsigned long ulDummy;
 399              		.loc 1 305 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 0000 08B5     		push	{r3, lr}
 404              	.LCFI1:
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 3, -8
 407              		.cfi_offset 14, -4
 310:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 408              		.loc 1 310 0
 409 0002 4EF60453 		movw	r3, #60676
 410 0006 CEF20003 		movt	r3, 57344
 411 000a 4FF08052 		mov	r2, #268435456
 412 000e 1A60     		str	r2, [r3]
 413              	.LVL10:
 313:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 414              		.loc 1 313 0
 415              	@ 313 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 416 0010 4FF0BF00 			mov r0, #191								
 417 0014 80F31188 		msr basepri, r0							
 418              	
 419              	@ 0 "" 2
 315:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 420              		.loc 1 315 0
 421              		.thumb
 422 0018 FFF7FEFF 		bl	vTaskIncrementTick
 423              	.LVL11:
 317:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 424              		.loc 1 317 0
 425              	@ 317 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 426 001c 4FF00000 			mov r0, #0					
 427 0020 80F31188 		msr basepri, r0				
 428              	
 429              	@ 0 "" 2
 430              		.thumb
 431 0024 08BD     		pop	{r3, pc}
 432              		.cfi_endproc
 433              	.LFE119:
 435              		.global	ulKernelPriority
 436 0026 00BF     		.section	.rodata.ulKernelPriority,"a",%progbits
 437              		.align	2
 440              	ulKernelPriority:
 441 0000 FF000000 		.word	255
 442              		.section	.data.uxCriticalNesting,"aw",%progbits
 443              		.align	2
 444              		.set	.LANCHOR0,. + 0
 447              	uxCriticalNesting:
 448 0000 AAAAAAAA 		.word	-1431655766
 449              		.text
 450              	.Letext0:
 451              		.file 2 "FreeRTOS/Source/include/projdefs.h"
 452              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 453              		.file 4 "/usr/include/newlib/stdint.h"
 454              		.file 5 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 455              		.file 6 "libs/CMSIS/Include/core_cm4.h"
 456              		.file 7 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
 457              		.file 8 "FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 port.c
     /tmp/ccSTmMyu.s:20     .text.vPortStartFirstTask:0000000000000000 $t
     /tmp/ccSTmMyu.s:24     .text.vPortStartFirstTask:0000000000000000 vPortStartFirstTask
     /tmp/ccSTmMyu.s:49     .text.prvSetupTimerInterrupt:0000000000000000 $t
     /tmp/ccSTmMyu.s:53     .text.prvSetupTimerInterrupt:0000000000000000 prvSetupTimerInterrupt
     /tmp/ccSTmMyu.s:82     .text.vPortEnableVFP:0000000000000000 $t
     /tmp/ccSTmMyu.s:86     .text.vPortEnableVFP:0000000000000000 vPortEnableVFP
     /tmp/ccSTmMyu.s:108    .text.pxPortInitialiseStack:0000000000000000 $t
     /tmp/ccSTmMyu.s:113    .text.pxPortInitialiseStack:0000000000000000 pxPortInitialiseStack
     /tmp/ccSTmMyu.s:147    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccSTmMyu.s:152    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccSTmMyu.s:171    .text.SVC_Handler:0000000000000018 pxCurrentTCBConst2
     /tmp/ccSTmMyu.s:171    .text.SVC_Handler:0000000000000018 $d
     /tmp/ccSTmMyu.s:180    .text.xPortStartScheduler:0000000000000000 $t
     /tmp/ccSTmMyu.s:185    .text.xPortStartScheduler:0000000000000000 xPortStartScheduler
     /tmp/ccSTmMyu.s:444    .data.uxCriticalNesting:0000000000000000 .LANCHOR0
     /tmp/ccSTmMyu.s:233    .text.vPortEndScheduler:0000000000000000 $t
     /tmp/ccSTmMyu.s:238    .text.vPortEndScheduler:0000000000000000 vPortEndScheduler
     /tmp/ccSTmMyu.s:250    .text.vPortYieldFromISR:0000000000000000 $t
     /tmp/ccSTmMyu.s:255    .text.vPortYieldFromISR:0000000000000000 vPortYieldFromISR
     /tmp/ccSTmMyu.s:272    .text.vPortEnterCritical:0000000000000000 $t
     /tmp/ccSTmMyu.s:277    .text.vPortEnterCritical:0000000000000000 vPortEnterCritical
     /tmp/ccSTmMyu.s:302    .text.vPortExitCritical:0000000000000000 $t
     /tmp/ccSTmMyu.s:307    .text.vPortExitCritical:0000000000000000 vPortExitCritical
     /tmp/ccSTmMyu.s:335    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccSTmMyu.s:340    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccSTmMyu.s:383    .text.PendSV_Handler:000000000000004c pxCurrentTCBConst
     /tmp/ccSTmMyu.s:383    .text.PendSV_Handler:000000000000004c $d
     /tmp/ccSTmMyu.s:392    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccSTmMyu.s:397    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccSTmMyu.s:440    .rodata.ulKernelPriority:0000000000000000 ulKernelPriority
     /tmp/ccSTmMyu.s:437    .rodata.ulKernelPriority:0000000000000000 $d
     /tmp/ccSTmMyu.s:443    .data.uxCriticalNesting:0000000000000000 $d
     /tmp/ccSTmMyu.s:447    .data.uxCriticalNesting:0000000000000000 uxCriticalNesting
     /tmp/ccSTmMyu.s:107    .text.vPortEnableVFP:000000000000000e $d
     /tmp/ccSTmMyu.s:48     .text.vPortStartFirstTask:0000000000000010 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.55.a343614a17c4367a6359a1f530d6d32b
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.74.fc794e36cd6c91c3b4695c74d78d9ccd
                           .group:0000000000000000 wm4.portmacro.h.69.a7e264ae32accd81a6ffb6f75a8356fe
                           .group:0000000000000000 wm4.portable.h.315.489c085dbd13c768c8594a7d23ef5545
                           .group:0000000000000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a1d4f27d190f434afd0502fdd510d30a
                           .group:0000000000000000 wm4.list.h.84.e713c47e239b06424d7c93968625e34d
                           .group:0000000000000000 wm4.task.h.73.ea72fb74b80a9cae261e97c6a9e3f3a7

UNDEFINED SYMBOLS
SystemCoreClock
pxCurrentTCB
vTaskSwitchContext
vTaskIncrementTick
