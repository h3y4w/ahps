   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.section	.bss.pxCurrentTCB,"aw",%nobits
  21              		.align	2
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  27              		.align	2
  30              	pxReadyTasksLists:
  31 0000 00000000 		.space	100
  31      00000000 
  31      00000000 
  31      00000000 
  31      00000000 
  32              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  33              		.align	2
  36              	xDelayedTaskList1:
  37 0000 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  39              		.align	2
  42              	xDelayedTaskList2:
  43 0000 00000000 		.space	20
  43      00000000 
  43      00000000 
  43      00000000 
  43      00000000 
  44              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  45              		.align	2
  48              	pxDelayedTaskList:
  49 0000 00000000 		.space	4
  50              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  51              		.align	2
  54              	pxOverflowDelayedTaskList:
  55 0000 00000000 		.space	4
  56              		.section	.bss.xPendingReadyList,"aw",%nobits
  57              		.align	2
  60              	xPendingReadyList:
  61 0000 00000000 		.space	20
  61      00000000 
  61      00000000 
  61      00000000 
  61      00000000 
  62              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  63              		.align	2
  66              	xTasksWaitingTermination:
  67 0000 00000000 		.space	20
  67      00000000 
  67      00000000 
  67      00000000 
  67      00000000 
  68              		.section	.bss.uxTasksDeleted,"aw",%nobits
  69              		.align	2
  72              	uxTasksDeleted:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  75              		.align	2
  78              	xSuspendedTaskList:
  79 0000 00000000 		.space	20
  79      00000000 
  79      00000000 
  79      00000000 
  79      00000000 
  80              		.section	.bss.xIdleTaskHandle,"aw",%nobits
  81              		.align	2
  84              	xIdleTaskHandle:
  85 0000 00000000 		.space	4
  86              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  87              		.align	2
  90              	uxCurrentNumberOfTasks:
  91 0000 00000000 		.space	4
  92              		.section	.bss.xTickCount,"aw",%nobits
  93              		.align	2
  96              	xTickCount:
  97 0000 00000000 		.space	4
  98              		.section	.bss.uxTopUsedPriority,"aw",%nobits
  99              		.align	2
 102              	uxTopUsedPriority:
 103 0000 00000000 		.space	4
 104              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 105              		.align	2
 108              	uxTopReadyPriority:
 109 0000 00000000 		.space	4
 110              		.section	.bss.xSchedulerRunning,"aw",%nobits
 111              		.align	2
 114              	xSchedulerRunning:
 115 0000 00000000 		.space	4
 116              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 117              		.align	2
 120              	uxSchedulerSuspended:
 121 0000 00000000 		.space	4
 122              		.section	.bss.uxMissedTicks,"aw",%nobits
 123              		.align	2
 126              	uxMissedTicks:
 127 0000 00000000 		.space	4
 128              		.section	.bss.xMissedYield,"aw",%nobits
 129              		.align	2
 132              	xMissedYield:
 133 0000 00000000 		.space	4
 134              		.section	.bss.xNumOfOverflows,"aw",%nobits
 135              		.align	2
 138              	xNumOfOverflows:
 139 0000 00000000 		.space	4
 140              		.section	.bss.uxTaskNumber,"aw",%nobits
 141              		.align	2
 144              	uxTaskNumber:
 145 0000 00000000 		.space	4
 146              		.section	.data.xNextTaskUnblockTime,"aw",%progbits
 147              		.align	2
 150              	xNextTaskUnblockTime:
 151 0000 FFFFFFFF 		.word	-1
 152              		.section	.bss.pcStatsString,"aw",%nobits
 153              		.align	2
 156              	pcStatsString:
 157 0000 00000000 		.space	50
 157      00000000 
 157      00000000 
 157      00000000 
 157      00000000 
 158 0032 0000     		.section	.bss.ulTaskSwitchedInTime,"aw",%nobits
 159              		.align	2
 162              	ulTaskSwitchedInTime:
 163 0000 00000000 		.space	4
 164              		.section	.text.xTaskGenericCreate,"ax",%progbits
 165              		.align	2
 166              		.global	xTaskGenericCreate
 167              		.thumb
 168              		.thumb_func
 170              	xTaskGenericCreate:
 171              	.LFB110:
 172              		.file 1 "FreeRTOS/Source/tasks.c"
   1:FreeRTOS/Source/tasks.c **** /*
   2:FreeRTOS/Source/tasks.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/tasks.c **** 	
   4:FreeRTOS/Source/tasks.c **** 
   5:FreeRTOS/Source/tasks.c ****     ***************************************************************************
   6:FreeRTOS/Source/tasks.c ****      *                                                                       *
   7:FreeRTOS/Source/tasks.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/tasks.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/tasks.c ****      *    available.                                                         *
  10:FreeRTOS/Source/tasks.c ****      *                                                                       *
  11:FreeRTOS/Source/tasks.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/tasks.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/tasks.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/tasks.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/tasks.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/tasks.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/tasks.c ****      *                                                                       *
  18:FreeRTOS/Source/tasks.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/tasks.c ****      *                                                                       *
  20:FreeRTOS/Source/tasks.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/tasks.c ****      *                                                                       *
  22:FreeRTOS/Source/tasks.c ****     ***************************************************************************
  23:FreeRTOS/Source/tasks.c **** 
  24:FreeRTOS/Source/tasks.c **** 
  25:FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/tasks.c **** 
  27:FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/tasks.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/tasks.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/tasks.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/tasks.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/tasks.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/tasks.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/tasks.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/tasks.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/tasks.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/tasks.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/tasks.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/tasks.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/tasks.c **** 
  42:FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/tasks.c **** 
  44:FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/tasks.c ****     contact details.
  46:FreeRTOS/Source/tasks.c **** 
  47:FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/tasks.c ****     critical systems.
  49:FreeRTOS/Source/tasks.c **** 
  50:FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/tasks.c ****     licensing and training services.
  52:FreeRTOS/Source/tasks.c **** */
  53:FreeRTOS/Source/tasks.c **** 
  54:FreeRTOS/Source/tasks.c **** 
  55:FreeRTOS/Source/tasks.c **** #include <stdio.h>
  56:FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  57:FreeRTOS/Source/tasks.c **** #include <string.h>
  58:FreeRTOS/Source/tasks.c **** 
  59:FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  60:FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  61:FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  62:FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  63:FreeRTOS/Source/tasks.c **** 
  64:FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  65:FreeRTOS/Source/tasks.c **** #include "task.h"
  66:FreeRTOS/Source/tasks.c **** #include "timers.h"
  67:FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  68:FreeRTOS/Source/tasks.c **** 
  69:FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  70:FreeRTOS/Source/tasks.c **** 
  71:FreeRTOS/Source/tasks.c **** /*
  72:FreeRTOS/Source/tasks.c ****  * Macro to define the amount of stack available to the idle task.
  73:FreeRTOS/Source/tasks.c ****  */
  74:FreeRTOS/Source/tasks.c **** #define tskIDLE_STACK_SIZE	configMINIMAL_STACK_SIZE
  75:FreeRTOS/Source/tasks.c **** 
  76:FreeRTOS/Source/tasks.c **** /*
  77:FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated to each task,
  78:FreeRTOS/Source/tasks.c ****  * and stores the context of the task.
  79:FreeRTOS/Source/tasks.c ****  */
  80:FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
  81:FreeRTOS/Source/tasks.c **** {
  82:FreeRTOS/Source/tasks.c **** 	volatile portSTACK_TYPE	*pxTopOfStack;		/*< Points to the location of the last item placed on the 
  83:FreeRTOS/Source/tasks.c **** 
  84:FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
  85:FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS xMPUSettings;				/*< The MPU settings are defined as part of the port layer.  THIS 
  86:FreeRTOS/Source/tasks.c **** 	#endif	
  87:FreeRTOS/Source/tasks.c **** 	
  88:FreeRTOS/Source/tasks.c **** 	xListItem				xGenericListItem;	/*< List item used to place the TCB in ready and blocked queues. */
  89:FreeRTOS/Source/tasks.c **** 	xListItem				xEventListItem;		/*< List item used to place the TCB in event lists. */
  90:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE	uxPriority;			/*< The priority of the task where 0 is the lowest priority. 
  91:FreeRTOS/Source/tasks.c **** 	portSTACK_TYPE			*pxStack;			/*< Points to the start of the stack. */
  92:FreeRTOS/Source/tasks.c **** 	signed char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when c
  93:FreeRTOS/Source/tasks.c **** 
  94:FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
  95:FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxEndOfStack;			/*< Used for stack overflow checking on architectures where the s
  96:FreeRTOS/Source/tasks.c **** 	#endif
  97:FreeRTOS/Source/tasks.c **** 
  98:FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
  99:FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxCriticalNesting;
 100:FreeRTOS/Source/tasks.c **** 	#endif
 101:FreeRTOS/Source/tasks.c **** 
 102:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 103:FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE	uxTCBNumber;	/*< This is used for tracing the scheduler and making debuggi
 104:FreeRTOS/Source/tasks.c **** 	#endif
 105:FreeRTOS/Source/tasks.c **** 
 106:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 107:FreeRTOS/Source/tasks.c **** 		unsigned portBASE_TYPE uxBasePriority;	/*< The priority last assigned to the task - used by the p
 108:FreeRTOS/Source/tasks.c **** 	#endif
 109:FreeRTOS/Source/tasks.c **** 
 110:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 111:FreeRTOS/Source/tasks.c **** 		pdTASK_HOOK_CODE pxTaskTag;
 112:FreeRTOS/Source/tasks.c **** 	#endif
 113:FreeRTOS/Source/tasks.c **** 
 114:FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 115:FreeRTOS/Source/tasks.c **** 		unsigned long ulRunTimeCounter;		/*< Used for calculating how much CPU time each task is utilisin
 116:FreeRTOS/Source/tasks.c **** 	#endif
 117:FreeRTOS/Source/tasks.c **** 
 118:FreeRTOS/Source/tasks.c **** } tskTCB;
 119:FreeRTOS/Source/tasks.c **** 
 120:FreeRTOS/Source/tasks.c **** 
 121:FreeRTOS/Source/tasks.c **** /*
 122:FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
 123:FreeRTOS/Source/tasks.c ****  * than file scope.
 124:FreeRTOS/Source/tasks.c ****  */
 125:FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 126:FreeRTOS/Source/tasks.c **** 	#define static
 127:FreeRTOS/Source/tasks.c **** #endif
 128:FreeRTOS/Source/tasks.c **** 
 129:FreeRTOS/Source/tasks.c **** /*lint -e956 */
 130:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA tskTCB * volatile pxCurrentTCB = NULL;
 131:FreeRTOS/Source/tasks.c **** 
 132:FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 133:FreeRTOS/Source/tasks.c **** 
 134:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList pxReadyTasksLists[ configMAX_PRIORITIES ];	/*< Prioritised ready tasks
 135:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList1;							/*< Delayed tasks. */
 136:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xDelayedTaskList2;							/*< Delayed tasks (two lists are used - one f
 137:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxDelayedTaskList ;				/*< Points to the delayed task list 
 138:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task 
 139:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static xList xPendingReadyList;							/*< Tasks that have been readied while the sc
 140:FreeRTOS/Source/tasks.c **** 
 141:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 142:FreeRTOS/Source/tasks.c **** 
 143:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xTasksWaitingTermination;				/*< Tasks that have been deleted - but t
 144:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTasksDeleted = ( unsigned portBASE_TYPE )
 145:FreeRTOS/Source/tasks.c **** 
 146:FreeRTOS/Source/tasks.c **** #endif
 147:FreeRTOS/Source/tasks.c **** 
 148:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 149:FreeRTOS/Source/tasks.c **** 
 150:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xList xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 151:FreeRTOS/Source/tasks.c **** 
 152:FreeRTOS/Source/tasks.c **** #endif
 153:FreeRTOS/Source/tasks.c **** 
 154:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
 155:FreeRTOS/Source/tasks.c **** 	
 156:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static xTaskHandle xIdleTaskHandle = NULL;
 157:FreeRTOS/Source/tasks.c **** 	
 158:FreeRTOS/Source/tasks.c **** #endif
 159:FreeRTOS/Source/tasks.c **** 
 160:FreeRTOS/Source/tasks.c **** /* File private variables. --------------------------------*/
 161:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxCurrentNumberOfTasks 	= ( unsigned portBAS
 162:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portTickType xTickCount 						= ( portTickType ) 0U;
 163:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTopUsedPriority	 				= tskIDLE_PRIORITY;
 164:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxTopReadyPriority 		= tskIDLE_PRIORITY;
 165:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile signed portBASE_TYPE xSchedulerRunning 			= pdFALSE;
 166:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxSchedulerSuspended	 	= ( unsigned portBASE
 167:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile unsigned portBASE_TYPE uxMissedTicks 			= ( unsigned portBASE_TYPE 
 168:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xMissedYield 						= ( portBASE_TYPE ) pdFALSE;
 169:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile portBASE_TYPE xNumOfOverflows 					= ( portBASE_TYPE ) 0;
 170:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static unsigned portBASE_TYPE uxTaskNumber 						= ( unsigned portBASE_TYPE ) 0U;
 171:FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static portTickType xNextTaskUnblockTime						= ( portTickType ) portMAX_DELAY;
 172:FreeRTOS/Source/tasks.c **** 
 173:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 174:FreeRTOS/Source/tasks.c **** 
 175:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatsString[ 50 ] ;
 176:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static unsigned long ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/co
 177:FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
 178:FreeRTOS/Source/tasks.c **** 
 179:FreeRTOS/Source/tasks.c **** #endif
 180:FreeRTOS/Source/tasks.c **** 
 181:FreeRTOS/Source/tasks.c **** /* Debugging and trace facilities private variables and macros. ------------*/
 182:FreeRTOS/Source/tasks.c **** 
 183:FreeRTOS/Source/tasks.c **** /*
 184:FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 185:FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 186:FreeRTOS/Source/tasks.c ****  */
 187:FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 188:FreeRTOS/Source/tasks.c **** 
 189:FreeRTOS/Source/tasks.c **** /*
 190:FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 191:FreeRTOS/Source/tasks.c ****  */
 192:FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( ( signed char ) 'B' )
 193:FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( ( signed char ) 'R' )
 194:FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( ( signed char ) 'D' )
 195:FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( ( signed char ) 'S' )
 196:FreeRTOS/Source/tasks.c **** 
 197:FreeRTOS/Source/tasks.c **** /*
 198:FreeRTOS/Source/tasks.c ****  * Macros and private variables used by the trace facility.
 199:FreeRTOS/Source/tasks.c ****  */
 200:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 201:FreeRTOS/Source/tasks.c **** 
 202:FreeRTOS/Source/tasks.c **** 	#define tskSIZE_OF_EACH_TRACE_LINE			( ( unsigned long ) ( sizeof( unsigned long ) + sizeof( unsig
 203:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile signed char * volatile pcTraceBuffer;
 204:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferStart;
 205:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed char *pcTraceBufferEnd;
 206:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static signed portBASE_TYPE xTracing = pdFALSE;
 207:FreeRTOS/Source/tasks.c **** 	static unsigned portBASE_TYPE uxPreviousTask = 255U;
 208:FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static char pcStatusString[ 50 ];
 209:FreeRTOS/Source/tasks.c **** 
 210:FreeRTOS/Source/tasks.c **** #endif
 211:FreeRTOS/Source/tasks.c **** 
 212:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:FreeRTOS/Source/tasks.c **** 
 214:FreeRTOS/Source/tasks.c **** /*
 215:FreeRTOS/Source/tasks.c ****  * Macro that writes a trace of scheduler activity to a buffer.  This trace
 216:FreeRTOS/Source/tasks.c ****  * shows which task is running when and is very useful as a debugging tool.
 217:FreeRTOS/Source/tasks.c ****  * As this macro is called each context switch it is a good idea to undefine
 218:FreeRTOS/Source/tasks.c ****  * it if not using the facility.
 219:FreeRTOS/Source/tasks.c ****  */
 220:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 221:FreeRTOS/Source/tasks.c **** 
 222:FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()																	\
 223:FreeRTOS/Source/tasks.c **** 	{																								\
 224:FreeRTOS/Source/tasks.c **** 		if( xTracing != pdFALSE )																	\
 225:FreeRTOS/Source/tasks.c **** 		{																							\
 226:FreeRTOS/Source/tasks.c **** 			if( uxPreviousTask != pxCurrentTCB->uxTCBNumber )										\
 227:FreeRTOS/Source/tasks.c **** 			{																						\
 228:FreeRTOS/Source/tasks.c **** 				if( ( pcTraceBuffer + tskSIZE_OF_EACH_TRACE_LINE ) < pcTraceBufferEnd )				\
 229:FreeRTOS/Source/tasks.c **** 				{																					\
 230:FreeRTOS/Source/tasks.c **** 					uxPreviousTask = pxCurrentTCB->uxTCBNumber;										\
 231:FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) xTickCount;				\
 232:FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 233:FreeRTOS/Source/tasks.c **** 					*( unsigned long * ) pcTraceBuffer = ( unsigned long ) uxPreviousTask;			\
 234:FreeRTOS/Source/tasks.c **** 					pcTraceBuffer += sizeof( unsigned long );										\
 235:FreeRTOS/Source/tasks.c **** 				}																					\
 236:FreeRTOS/Source/tasks.c **** 				else																				\
 237:FreeRTOS/Source/tasks.c **** 				{																					\
 238:FreeRTOS/Source/tasks.c **** 					xTracing = pdFALSE;																\
 239:FreeRTOS/Source/tasks.c **** 				}																					\
 240:FreeRTOS/Source/tasks.c **** 			}																						\
 241:FreeRTOS/Source/tasks.c **** 		}																							\
 242:FreeRTOS/Source/tasks.c **** 	}
 243:FreeRTOS/Source/tasks.c **** 
 244:FreeRTOS/Source/tasks.c **** #else
 245:FreeRTOS/Source/tasks.c **** 
 246:FreeRTOS/Source/tasks.c **** 	#define vWriteTraceToBuffer()
 247:FreeRTOS/Source/tasks.c **** 
 248:FreeRTOS/Source/tasks.c **** #endif
 249:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 250:FreeRTOS/Source/tasks.c **** 
 251:FreeRTOS/Source/tasks.c **** /*
 252:FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready queue for
 253:FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.  One quirk of this is
 254:FreeRTOS/Source/tasks.c ****  * that if the task being inserted is at the same priority as the currently
 255:FreeRTOS/Source/tasks.c ****  * executing task, then it will only be rescheduled after the currently
 256:FreeRTOS/Source/tasks.c ****  * executing task has been rescheduled.
 257:FreeRTOS/Source/tasks.c ****  */
 258:FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyQueue( pxTCB )																					\
 259:FreeRTOS/Source/tasks.c **** 	if( ( pxTCB )->uxPriority > uxTopReadyPriority )																	\
 260:FreeRTOS/Source/tasks.c **** 	{																													\
 261:FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = ( pxTCB )->uxPriority;																		\
 262:FreeRTOS/Source/tasks.c **** 	}																													\
 263:FreeRTOS/Source/tasks.c **** 	vListInsertEnd( ( xList * ) &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xGeneri
 264:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:FreeRTOS/Source/tasks.c **** 
 266:FreeRTOS/Source/tasks.c **** /*
 267:FreeRTOS/Source/tasks.c ****  * Macro that looks at the list of tasks that are currently delayed to see if
 268:FreeRTOS/Source/tasks.c ****  * any require waking.
 269:FreeRTOS/Source/tasks.c ****  *
 270:FreeRTOS/Source/tasks.c ****  * Tasks are stored in the queue in the order of their wake time - meaning
 271:FreeRTOS/Source/tasks.c ****  * once one tasks has been found whose timer has not expired we need not look
 272:FreeRTOS/Source/tasks.c ****  * any further down the list.
 273:FreeRTOS/Source/tasks.c ****  */
 274:FreeRTOS/Source/tasks.c **** #define prvCheckDelayedTasks()															\
 275:FreeRTOS/Source/tasks.c **** {																						\
 276:FreeRTOS/Source/tasks.c **** portTickType xItemValue;																\
 277:FreeRTOS/Source/tasks.c **** 																						\
 278:FreeRTOS/Source/tasks.c **** 	/* Is the tick count greater than or equal to the wake time of the first			\
 279:FreeRTOS/Source/tasks.c **** 	task referenced from the delayed tasks list? */										\
 280:FreeRTOS/Source/tasks.c **** 	if( xTickCount >= xNextTaskUnblockTime )											\
 281:FreeRTOS/Source/tasks.c **** 	{																					\
 282:FreeRTOS/Source/tasks.c **** 		for( ;; )																		\
 283:FreeRTOS/Source/tasks.c **** 		{																				\
 284:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )						\
 285:FreeRTOS/Source/tasks.c **** 			{																			\
 286:FreeRTOS/Source/tasks.c **** 				/* The delayed list is empty.  Set xNextTaskUnblockTime to the			\
 287:FreeRTOS/Source/tasks.c **** 				maximum possible value so it is extremely unlikely that the				\
 288:FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass next			\
 289:FreeRTOS/Source/tasks.c **** 				time through. */														\
 290:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;									\
 291:FreeRTOS/Source/tasks.c **** 				break;																	\
 292:FreeRTOS/Source/tasks.c **** 			}																			\
 293:FreeRTOS/Source/tasks.c **** 			else																		\
 294:FreeRTOS/Source/tasks.c **** 			{																			\
 295:FreeRTOS/Source/tasks.c **** 				/* The delayed list is not empty, get the value of the item at			\
 296:FreeRTOS/Source/tasks.c **** 				the head of the delayed list.  This is the time at which the			\
 297:FreeRTOS/Source/tasks.c **** 				task at the head of the delayed list should be removed from				\
 298:FreeRTOS/Source/tasks.c **** 				the Blocked state. */													\
 299:FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );	\
 300:FreeRTOS/Source/tasks.c **** 				xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );	\
 301:FreeRTOS/Source/tasks.c **** 																						\
 302:FreeRTOS/Source/tasks.c **** 				if( xTickCount < xItemValue )											\
 303:FreeRTOS/Source/tasks.c **** 				{																		\
 304:FreeRTOS/Source/tasks.c **** 					/* It is not time to unblock this item yet, but the item			\
 305:FreeRTOS/Source/tasks.c **** 					value is the time at which the task at the head of the				\
 306:FreeRTOS/Source/tasks.c **** 					blocked list should be removed from the Blocked state -				\
 307:FreeRTOS/Source/tasks.c **** 					so record the item value in xNextTaskUnblockTime. */				\
 308:FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xItemValue;									\
 309:FreeRTOS/Source/tasks.c **** 					break;																\
 310:FreeRTOS/Source/tasks.c **** 				}																		\
 311:FreeRTOS/Source/tasks.c **** 																						\
 312:FreeRTOS/Source/tasks.c **** 				/* It is time to remove the item from the Blocked state. */				\
 313:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );							\
 314:FreeRTOS/Source/tasks.c **** 																						\
 315:FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also? */								\
 316:FreeRTOS/Source/tasks.c **** 				if( pxTCB->xEventListItem.pvContainer != NULL )							\
 317:FreeRTOS/Source/tasks.c **** 				{																		\
 318:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );							\
 319:FreeRTOS/Source/tasks.c **** 				}																		\
 320:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );										\
 321:FreeRTOS/Source/tasks.c **** 			}																			\
 322:FreeRTOS/Source/tasks.c **** 		}																				\
 323:FreeRTOS/Source/tasks.c **** 	}																					\
 324:FreeRTOS/Source/tasks.c **** }
 325:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 326:FreeRTOS/Source/tasks.c **** 
 327:FreeRTOS/Source/tasks.c **** /*
 328:FreeRTOS/Source/tasks.c ****  * Several functions take an xTaskHandle parameter that can optionally be NULL,
 329:FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 330:FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 331:FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 332:FreeRTOS/Source/tasks.c ****  */
 333:FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( tskTCB * ) pxCurrentTCB : ( 
 334:FreeRTOS/Source/tasks.c **** 
 335:FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 336:FreeRTOS/Source/tasks.c **** extern void vApplicationStackOverflowHook( xTaskHandle *pxTask, signed char *pcTaskName );
 337:FreeRTOS/Source/tasks.c **** extern void vApplicationTickHook( void );
 338:FreeRTOS/Source/tasks.c **** 		
 339:FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 340:FreeRTOS/Source/tasks.c **** 
 341:FreeRTOS/Source/tasks.c **** /*
 342:FreeRTOS/Source/tasks.c ****  * Utility to ready a TCB for a given task.  Mainly just copies the parameters
 343:FreeRTOS/Source/tasks.c ****  * into the TCB structure.
 344:FreeRTOS/Source/tasks.c ****  */
 345:FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
 346:FreeRTOS/Source/tasks.c **** 
 347:FreeRTOS/Source/tasks.c **** /*
 348:FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 349:FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 350:FreeRTOS/Source/tasks.c ****  */
 351:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 352:FreeRTOS/Source/tasks.c **** 
 353:FreeRTOS/Source/tasks.c **** /*
 354:FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 355:FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 356:FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 357:FreeRTOS/Source/tasks.c ****  *
 358:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 359:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 360:FreeRTOS/Source/tasks.c ****  *
 361:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 362:FreeRTOS/Source/tasks.c ****  *
 363:FreeRTOS/Source/tasks.c ****  */
 364:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 365:FreeRTOS/Source/tasks.c **** 
 366:FreeRTOS/Source/tasks.c **** /*
 367:FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 368:FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 369:FreeRTOS/Source/tasks.c ****  *
 370:FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 371:FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 372:FreeRTOS/Source/tasks.c ****  */
 373:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 374:FreeRTOS/Source/tasks.c **** 
 375:FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB ) PRIVILEGED_FUNCTION;
 376:FreeRTOS/Source/tasks.c **** 
 377:FreeRTOS/Source/tasks.c **** #endif
 378:FreeRTOS/Source/tasks.c **** 
 379:FreeRTOS/Source/tasks.c **** /*
 380:FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 381:FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 382:FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 383:FreeRTOS/Source/tasks.c ****  */
 384:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 385:FreeRTOS/Source/tasks.c **** 
 386:FreeRTOS/Source/tasks.c **** /*
 387:FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 388:FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 389:FreeRTOS/Source/tasks.c ****  */
 390:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake ) PRIVILEGED_FUNCTION;
 391:FreeRTOS/Source/tasks.c **** 
 392:FreeRTOS/Source/tasks.c **** /*
 393:FreeRTOS/Source/tasks.c ****  * Allocates memory from the heap for a TCB and associated stack.  Checks the
 394:FreeRTOS/Source/tasks.c ****  * allocation was successful.
 395:FreeRTOS/Source/tasks.c ****  */
 396:FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
 397:FreeRTOS/Source/tasks.c **** 
 398:FreeRTOS/Source/tasks.c **** /*
 399:FreeRTOS/Source/tasks.c ****  * Called from vTaskList.  vListTasks details all the tasks currently under
 400:FreeRTOS/Source/tasks.c ****  * control of the scheduler.  The tasks may be in one of a number of lists.
 401:FreeRTOS/Source/tasks.c ****  * prvListTaskWithinSingleList accepts a list and details the tasks from
 402:FreeRTOS/Source/tasks.c ****  * within just that list.
 403:FreeRTOS/Source/tasks.c ****  *
 404:FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 405:FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 406:FreeRTOS/Source/tasks.c ****  */
 407:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 408:FreeRTOS/Source/tasks.c **** 
 409:FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
 410:FreeRTOS/Source/tasks.c **** 
 411:FreeRTOS/Source/tasks.c **** #endif
 412:FreeRTOS/Source/tasks.c **** 
 413:FreeRTOS/Source/tasks.c **** /*
 414:FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 415:FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 416:FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 417:FreeRTOS/Source/tasks.c ****  */
 418:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 419:FreeRTOS/Source/tasks.c **** 
 420:FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte ) PRIVILEGED_F
 421:FreeRTOS/Source/tasks.c **** 
 422:FreeRTOS/Source/tasks.c **** #endif
 423:FreeRTOS/Source/tasks.c **** 
 424:FreeRTOS/Source/tasks.c **** 
 425:FreeRTOS/Source/tasks.c **** /*lint +e956 */
 426:FreeRTOS/Source/tasks.c **** 
 427:FreeRTOS/Source/tasks.c **** 
 428:FreeRTOS/Source/tasks.c **** 
 429:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 430:FreeRTOS/Source/tasks.c ****  * TASK CREATION API documented in task.h
 431:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 432:FreeRTOS/Source/tasks.c **** 
 433:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, 
 434:FreeRTOS/Source/tasks.c **** {
 173              		.loc 1 434 0
 174              		.cfi_startproc
 175              		@ args = 16, pretend = 0, frame = 32
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              	.LCFI0:
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 7, -8
 181              		.cfi_offset 14, -4
 182 0002 8AB0     		sub	sp, sp, #40
 183              	.LCFI1:
 184              		.cfi_def_cfa_offset 48
 185 0004 02AF     		add	r7, sp, #8
 186              	.LCFI2:
 187              		.cfi_def_cfa 7, 40
 188 0006 F860     		str	r0, [r7, #12]
 189 0008 B960     		str	r1, [r7, #8]
 190 000a 3B60     		str	r3, [r7]
 191 000c 1346     		mov	r3, r2	@ movhi
 192 000e FB80     		strh	r3, [r7, #6]	@ movhi
 435:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xReturn;
 436:FreeRTOS/Source/tasks.c **** tskTCB * pxNewTCB;
 437:FreeRTOS/Source/tasks.c **** 
 438:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTaskCode );
 439:FreeRTOS/Source/tasks.c **** 	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );
 440:FreeRTOS/Source/tasks.c **** 
 441:FreeRTOS/Source/tasks.c **** 	/* Allocate the memory required by the TCB and stack for the new task,
 442:FreeRTOS/Source/tasks.c **** 	checking that the allocation was successful. */
 443:FreeRTOS/Source/tasks.c **** 	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
 193              		.loc 1 443 0
 194 0010 FB88     		ldrh	r3, [r7, #6]
 195 0012 1846     		mov	r0, r3
 196 0014 396B     		ldr	r1, [r7, #48]
 197 0016 FFF7FEFF 		bl	prvAllocateTCBAndStack
 198 001a B861     		str	r0, [r7, #24]
 444:FreeRTOS/Source/tasks.c **** 
 445:FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 199              		.loc 1 445 0
 200 001c BB69     		ldr	r3, [r7, #24]
 201 001e 002B     		cmp	r3, #0
 202 0020 00F09E80 		beq	.L2
 203              	.LBB2:
 446:FreeRTOS/Source/tasks.c **** 	{
 447:FreeRTOS/Source/tasks.c **** 		portSTACK_TYPE *pxTopOfStack;
 448:FreeRTOS/Source/tasks.c **** 
 449:FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 450:FreeRTOS/Source/tasks.c **** 			/* Should the task be created in privileged mode? */
 451:FreeRTOS/Source/tasks.c **** 			portBASE_TYPE xRunPrivileged;
 452:FreeRTOS/Source/tasks.c **** 			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 453:FreeRTOS/Source/tasks.c **** 			{
 454:FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdTRUE;
 455:FreeRTOS/Source/tasks.c **** 			}
 456:FreeRTOS/Source/tasks.c **** 			else
 457:FreeRTOS/Source/tasks.c **** 			{
 458:FreeRTOS/Source/tasks.c **** 				xRunPrivileged = pdFALSE;
 459:FreeRTOS/Source/tasks.c **** 			}
 460:FreeRTOS/Source/tasks.c **** 			uxPriority &= ~portPRIVILEGE_BIT;
 461:FreeRTOS/Source/tasks.c **** 		#endif /* portUSING_MPU_WRAPPERS == 1 */
 462:FreeRTOS/Source/tasks.c **** 
 463:FreeRTOS/Source/tasks.c **** 		/* Calculate the top of stack address.  This depends on whether the
 464:FreeRTOS/Source/tasks.c **** 		stack grows from high memory to low (as per the 80x86) or visa versa.
 465:FreeRTOS/Source/tasks.c **** 		portSTACK_GROWTH is used to make the result positive or negative as
 466:FreeRTOS/Source/tasks.c **** 		required by the port. */
 467:FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH < 0 )
 468:FreeRTOS/Source/tasks.c **** 		{
 469:FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
 204              		.loc 1 469 0
 205 0024 BB69     		ldr	r3, [r7, #24]
 206 0026 1A6B     		ldr	r2, [r3, #48]
 207 0028 FB88     		ldrh	r3, [r7, #6]
 208 002a 03F18043 		add	r3, r3, #1073741824
 209 002e 013B     		subs	r3, r3, #1
 210 0030 9B00     		lsls	r3, r3, #2
 211 0032 1344     		add	r3, r3, r2
 212 0034 7B61     		str	r3, [r7, #20]
 470:FreeRTOS/Source/tasks.c **** 			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINT
 213              		.loc 1 470 0
 214 0036 7B69     		ldr	r3, [r7, #20]
 215 0038 23F00703 		bic	r3, r3, #7
 216 003c 7B61     		str	r3, [r7, #20]
 471:FreeRTOS/Source/tasks.c **** 
 472:FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the calculated top of stack is correct. */
 473:FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) =
 474:FreeRTOS/Source/tasks.c **** 		}
 475:FreeRTOS/Source/tasks.c **** 		#else
 476:FreeRTOS/Source/tasks.c **** 		{
 477:FreeRTOS/Source/tasks.c **** 			pxTopOfStack = pxNewTCB->pxStack;
 478:FreeRTOS/Source/tasks.c **** 			
 479:FreeRTOS/Source/tasks.c **** 			/* Check the alignment of the stack buffer is correct. */
 480:FreeRTOS/Source/tasks.c **** 			configASSERT( ( ( ( unsigned long ) pxNewTCB->pxStack & ( unsigned long ) portBYTE_ALIGNMENT_MAS
 481:FreeRTOS/Source/tasks.c **** 
 482:FreeRTOS/Source/tasks.c **** 			/* If we want to use stack checking on architectures that use
 483:FreeRTOS/Source/tasks.c **** 			a positive stack growth direction then we also need to store the
 484:FreeRTOS/Source/tasks.c **** 			other extreme of the stack space. */
 485:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
 486:FreeRTOS/Source/tasks.c **** 		}
 487:FreeRTOS/Source/tasks.c **** 		#endif
 488:FreeRTOS/Source/tasks.c **** 
 489:FreeRTOS/Source/tasks.c **** 		/* Setup the newly allocated TCB with the initial state of the task. */
 490:FreeRTOS/Source/tasks.c **** 		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
 217              		.loc 1 490 0
 218 003e FB88     		ldrh	r3, [r7, #6]
 219 0040 0093     		str	r3, [sp]
 220 0042 B869     		ldr	r0, [r7, #24]
 221 0044 B968     		ldr	r1, [r7, #8]
 222 0046 BA6A     		ldr	r2, [r7, #40]
 223 0048 7B6B     		ldr	r3, [r7, #52]
 224 004a FFF7FEFF 		bl	prvInitialiseTCBVariables
 491:FreeRTOS/Source/tasks.c **** 
 492:FreeRTOS/Source/tasks.c **** 		/* Initialize the TCB stack to look as if the task was already running,
 493:FreeRTOS/Source/tasks.c **** 		but had been interrupted by the scheduler.  The return address is set
 494:FreeRTOS/Source/tasks.c **** 		to the start of the task function. Once the stack has been initialised
 495:FreeRTOS/Source/tasks.c **** 		the	top of stack variable is updated. */
 496:FreeRTOS/Source/tasks.c **** 		#if( portUSING_MPU_WRAPPERS == 1 )
 497:FreeRTOS/Source/tasks.c **** 		{
 498:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
 499:FreeRTOS/Source/tasks.c **** 		}
 500:FreeRTOS/Source/tasks.c **** 		#else
 501:FreeRTOS/Source/tasks.c **** 		{
 502:FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 225              		.loc 1 502 0
 226 004e 7869     		ldr	r0, [r7, #20]
 227 0050 F968     		ldr	r1, [r7, #12]
 228 0052 3A68     		ldr	r2, [r7]
 229 0054 FFF7FEFF 		bl	pxPortInitialiseStack
 230 0058 0246     		mov	r2, r0
 231 005a BB69     		ldr	r3, [r7, #24]
 232 005c 1A60     		str	r2, [r3]
 503:FreeRTOS/Source/tasks.c **** 		}
 504:FreeRTOS/Source/tasks.c **** 		#endif
 505:FreeRTOS/Source/tasks.c **** 
 506:FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the initialised stack. */
 507:FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT
 508:FreeRTOS/Source/tasks.c **** 
 509:FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxCreatedTask != NULL )
 233              		.loc 1 509 0
 234 005e FB6A     		ldr	r3, [r7, #44]
 235 0060 002B     		cmp	r3, #0
 236 0062 02D0     		beq	.L3
 510:FreeRTOS/Source/tasks.c **** 		{
 511:FreeRTOS/Source/tasks.c **** 			/* Pass the TCB out - in an anonymous way.  The calling function/
 512:FreeRTOS/Source/tasks.c **** 			task can use this as a handle to delete the task later if
 513:FreeRTOS/Source/tasks.c **** 			required.*/
 514:FreeRTOS/Source/tasks.c **** 			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
 237              		.loc 1 514 0
 238 0064 FB6A     		ldr	r3, [r7, #44]
 239 0066 BA69     		ldr	r2, [r7, #24]
 240 0068 1A60     		str	r2, [r3]
 241              	.L3:
 515:FreeRTOS/Source/tasks.c **** 		}
 516:FreeRTOS/Source/tasks.c **** 		
 517:FreeRTOS/Source/tasks.c **** 		/* We are going to manipulate the task queues to add this task to a
 518:FreeRTOS/Source/tasks.c **** 		ready list, so must make sure no interrupts occur. */
 519:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 242              		.loc 1 519 0
 243 006a FFF7FEFF 		bl	vPortEnterCritical
 520:FreeRTOS/Source/tasks.c **** 		{
 521:FreeRTOS/Source/tasks.c **** 			uxCurrentNumberOfTasks++;
 244              		.loc 1 521 0
 245 006e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 246 0072 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 247 0076 1B68     		ldr	r3, [r3]
 248 0078 5A1C     		adds	r2, r3, #1
 249 007a 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 250 007e C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 251 0082 1A60     		str	r2, [r3]
 522:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB == NULL )
 252              		.loc 1 522 0
 253 0084 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 254 0088 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 255 008c 1B68     		ldr	r3, [r3]
 256 008e 002B     		cmp	r3, #0
 257 0090 0FD1     		bne	.L4
 523:FreeRTOS/Source/tasks.c **** 			{
 524:FreeRTOS/Source/tasks.c **** 				/* There are no other tasks, or all the other tasks are in
 525:FreeRTOS/Source/tasks.c **** 				the suspended state - make this the current task. */
 526:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB =  pxNewTCB;
 258              		.loc 1 526 0
 259 0092 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 260 0096 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 261 009a BA69     		ldr	r2, [r7, #24]
 262 009c 1A60     		str	r2, [r3]
 527:FreeRTOS/Source/tasks.c **** 
 528:FreeRTOS/Source/tasks.c **** 				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
 263              		.loc 1 528 0
 264 009e 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 265 00a2 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 266 00a6 1B68     		ldr	r3, [r3]
 267 00a8 012B     		cmp	r3, #1
 268 00aa 18D1     		bne	.L6
 529:FreeRTOS/Source/tasks.c **** 				{
 530:FreeRTOS/Source/tasks.c **** 					/* This is the first task to be created so do the preliminary
 531:FreeRTOS/Source/tasks.c **** 					initialisation required.  We will not recover if this call
 532:FreeRTOS/Source/tasks.c **** 					fails, but we will report the failure. */
 533:FreeRTOS/Source/tasks.c **** 					prvInitialiseTaskLists();
 269              		.loc 1 533 0
 270 00ac FFF7FEFF 		bl	prvInitialiseTaskLists
 271 00b0 15E0     		b	.L6
 272              	.L4:
 534:FreeRTOS/Source/tasks.c **** 				}
 535:FreeRTOS/Source/tasks.c **** 			}
 536:FreeRTOS/Source/tasks.c **** 			else
 537:FreeRTOS/Source/tasks.c **** 			{
 538:FreeRTOS/Source/tasks.c **** 				/* If the scheduler is not already running, make this task the
 539:FreeRTOS/Source/tasks.c **** 				current task if it is the highest priority task to be created
 540:FreeRTOS/Source/tasks.c **** 				so far. */
 541:FreeRTOS/Source/tasks.c **** 				if( xSchedulerRunning == pdFALSE )
 273              		.loc 1 541 0
 274 00b2 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 275 00b6 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 276 00ba 1B68     		ldr	r3, [r3]
 277 00bc 002B     		cmp	r3, #0
 278 00be 0ED1     		bne	.L6
 542:FreeRTOS/Source/tasks.c **** 				{
 543:FreeRTOS/Source/tasks.c **** 					if( pxCurrentTCB->uxPriority <= uxPriority )
 279              		.loc 1 543 0
 280 00c0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 281 00c4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 282 00c8 1B68     		ldr	r3, [r3]
 283 00ca DA6A     		ldr	r2, [r3, #44]
 284 00cc BB6A     		ldr	r3, [r7, #40]
 285 00ce 9A42     		cmp	r2, r3
 286 00d0 05D8     		bhi	.L6
 544:FreeRTOS/Source/tasks.c **** 					{
 545:FreeRTOS/Source/tasks.c **** 						pxCurrentTCB = pxNewTCB;
 287              		.loc 1 545 0
 288 00d2 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 289 00d6 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 290 00da BA69     		ldr	r2, [r7, #24]
 291 00dc 1A60     		str	r2, [r3]
 292              	.L6:
 546:FreeRTOS/Source/tasks.c **** 					}
 547:FreeRTOS/Source/tasks.c **** 				}
 548:FreeRTOS/Source/tasks.c **** 			}
 549:FreeRTOS/Source/tasks.c **** 
 550:FreeRTOS/Source/tasks.c **** 			/* Remember the top priority to make context switching faster.  Use
 551:FreeRTOS/Source/tasks.c **** 			the priority in pxNewTCB as this has been capped to a valid value. */
 552:FreeRTOS/Source/tasks.c **** 			if( pxNewTCB->uxPriority > uxTopUsedPriority )
 293              		.loc 1 552 0
 294 00de BB69     		ldr	r3, [r7, #24]
 295 00e0 DA6A     		ldr	r2, [r3, #44]
 296 00e2 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 297 00e6 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 298 00ea 1B68     		ldr	r3, [r3]
 299 00ec 9A42     		cmp	r2, r3
 300 00ee 06D9     		bls	.L7
 553:FreeRTOS/Source/tasks.c **** 			{
 554:FreeRTOS/Source/tasks.c **** 				uxTopUsedPriority = pxNewTCB->uxPriority;
 301              		.loc 1 554 0
 302 00f0 BB69     		ldr	r3, [r7, #24]
 303 00f2 DA6A     		ldr	r2, [r3, #44]
 304 00f4 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 305 00f8 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 306 00fc 1A60     		str	r2, [r3]
 307              	.L7:
 555:FreeRTOS/Source/tasks.c **** 			}
 556:FreeRTOS/Source/tasks.c **** 
 557:FreeRTOS/Source/tasks.c **** 			#if ( configUSE_TRACE_FACILITY == 1 )
 558:FreeRTOS/Source/tasks.c **** 			{
 559:FreeRTOS/Source/tasks.c **** 				/* Add a counter into the TCB for tracing only. */
 560:FreeRTOS/Source/tasks.c **** 				pxNewTCB->uxTCBNumber = uxTaskNumber;
 561:FreeRTOS/Source/tasks.c **** 			}
 562:FreeRTOS/Source/tasks.c **** 			#endif
 563:FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 308              		.loc 1 563 0
 309 00fe 40F20003 		movw	r3, #:lower16:uxTaskNumber
 310 0102 C0F20003 		movt	r3, #:upper16:uxTaskNumber
 311 0106 1B68     		ldr	r3, [r3]
 312 0108 5A1C     		adds	r2, r3, #1
 313 010a 40F20003 		movw	r3, #:lower16:uxTaskNumber
 314 010e C0F20003 		movt	r3, #:upper16:uxTaskNumber
 315 0112 1A60     		str	r2, [r3]
 564:FreeRTOS/Source/tasks.c **** 
 565:FreeRTOS/Source/tasks.c **** 			prvAddTaskToReadyQueue( pxNewTCB );
 316              		.loc 1 565 0
 317 0114 BB69     		ldr	r3, [r7, #24]
 318 0116 DA6A     		ldr	r2, [r3, #44]
 319 0118 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 320 011c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 321 0120 1B68     		ldr	r3, [r3]
 322 0122 9A42     		cmp	r2, r3
 323 0124 06D9     		bls	.L8
 324              		.loc 1 565 0 is_stmt 0 discriminator 1
 325 0126 BB69     		ldr	r3, [r7, #24]
 326 0128 DA6A     		ldr	r2, [r3, #44]
 327 012a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 328 012e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 329 0132 1A60     		str	r2, [r3]
 330              	.L8:
 331              		.loc 1 565 0 discriminator 2
 332 0134 BB69     		ldr	r3, [r7, #24]
 333 0136 DA6A     		ldr	r2, [r3, #44]
 334 0138 1346     		mov	r3, r2
 335 013a 9B00     		lsls	r3, r3, #2
 336 013c 1344     		add	r3, r3, r2
 337 013e 9B00     		lsls	r3, r3, #2
 338 0140 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 339 0144 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 340 0148 1A44     		add	r2, r2, r3
 341 014a BB69     		ldr	r3, [r7, #24]
 342 014c 0433     		adds	r3, r3, #4
 343 014e 1046     		mov	r0, r2
 344 0150 1946     		mov	r1, r3
 345 0152 FFF7FEFF 		bl	vListInsertEnd
 566:FreeRTOS/Source/tasks.c **** 
 567:FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 346              		.loc 1 567 0 is_stmt 1 discriminator 2
 347 0156 0123     		movs	r3, #1
 348 0158 FB61     		str	r3, [r7, #28]
 568:FreeRTOS/Source/tasks.c **** 			traceTASK_CREATE( pxNewTCB );
 569:FreeRTOS/Source/tasks.c **** 		}
 570:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 349              		.loc 1 570 0 discriminator 2
 350 015a FFF7FEFF 		bl	vPortExitCritical
 351              	.LBE2:
 352 015e 02E0     		b	.L9
 353              	.L2:
 571:FreeRTOS/Source/tasks.c **** 	}
 572:FreeRTOS/Source/tasks.c **** 	else
 573:FreeRTOS/Source/tasks.c **** 	{
 574:FreeRTOS/Source/tasks.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 354              		.loc 1 574 0
 355 0160 4FF0FF33 		mov	r3, #-1
 356 0164 FB61     		str	r3, [r7, #28]
 357              	.L9:
 575:FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE_FAILED();
 576:FreeRTOS/Source/tasks.c **** 	}
 577:FreeRTOS/Source/tasks.c **** 
 578:FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 358              		.loc 1 578 0
 359 0166 FB69     		ldr	r3, [r7, #28]
 360 0168 012B     		cmp	r3, #1
 361 016a 11D1     		bne	.L10
 579:FreeRTOS/Source/tasks.c **** 	{
 580:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 362              		.loc 1 580 0
 363 016c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 364 0170 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 365 0174 1B68     		ldr	r3, [r3]
 366 0176 002B     		cmp	r3, #0
 367 0178 0AD0     		beq	.L10
 581:FreeRTOS/Source/tasks.c **** 		{
 582:FreeRTOS/Source/tasks.c **** 			/* If the created task is of a higher priority than the current task
 583:FreeRTOS/Source/tasks.c **** 			then it should run now. */
 584:FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxPriority < uxPriority )
 368              		.loc 1 584 0
 369 017a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 370 017e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 371 0182 1B68     		ldr	r3, [r3]
 372 0184 DA6A     		ldr	r2, [r3, #44]
 373 0186 BB6A     		ldr	r3, [r7, #40]
 374 0188 9A42     		cmp	r2, r3
 375 018a 01D2     		bcs	.L10
 585:FreeRTOS/Source/tasks.c **** 			{
 586:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 376              		.loc 1 586 0
 377 018c FFF7FEFF 		bl	vPortYieldFromISR
 378              	.L10:
 587:FreeRTOS/Source/tasks.c **** 			}
 588:FreeRTOS/Source/tasks.c **** 		}
 589:FreeRTOS/Source/tasks.c **** 	}
 590:FreeRTOS/Source/tasks.c **** 
 591:FreeRTOS/Source/tasks.c **** 	return xReturn;
 379              		.loc 1 591 0
 380 0190 FB69     		ldr	r3, [r7, #28]
 592:FreeRTOS/Source/tasks.c **** }
 381              		.loc 1 592 0
 382 0192 1846     		mov	r0, r3
 383 0194 2037     		adds	r7, r7, #32
 384 0196 BD46     		mov	sp, r7
 385              		@ sp needed
 386 0198 80BD     		pop	{r7, pc}
 387              		.cfi_endproc
 388              	.LFE110:
 390 019a 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 391              		.align	2
 392              		.global	vTaskDelete
 393              		.thumb
 394              		.thumb_func
 396              	vTaskDelete:
 397              	.LFB111:
 593:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 594:FreeRTOS/Source/tasks.c **** 
 595:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 596:FreeRTOS/Source/tasks.c **** 
 597:FreeRTOS/Source/tasks.c **** 	void vTaskDelete( xTaskHandle pxTaskToDelete )
 598:FreeRTOS/Source/tasks.c **** 	{
 398              		.loc 1 598 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 16
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402 0000 80B5     		push	{r7, lr}
 403              	.LCFI3:
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406              		.cfi_offset 14, -4
 407 0002 84B0     		sub	sp, sp, #16
 408              	.LCFI4:
 409              		.cfi_def_cfa_offset 24
 410 0004 00AF     		add	r7, sp, #0
 411              	.LCFI5:
 412              		.cfi_def_cfa_register 7
 413 0006 7860     		str	r0, [r7, #4]
 599:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 600:FreeRTOS/Source/tasks.c **** 
 601:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 414              		.loc 1 601 0
 415 0008 FFF7FEFF 		bl	vPortEnterCritical
 602:FreeRTOS/Source/tasks.c **** 		{
 603:FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 604:FreeRTOS/Source/tasks.c **** 			deleted. */
 605:FreeRTOS/Source/tasks.c **** 			if( pxTaskToDelete == pxCurrentTCB )
 416              		.loc 1 605 0
 417 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 418 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 419 0014 1B68     		ldr	r3, [r3]
 420 0016 7A68     		ldr	r2, [r7, #4]
 421 0018 9A42     		cmp	r2, r3
 422 001a 01D1     		bne	.L13
 606:FreeRTOS/Source/tasks.c **** 			{
 607:FreeRTOS/Source/tasks.c **** 				pxTaskToDelete = NULL;
 423              		.loc 1 607 0
 424 001c 0023     		movs	r3, #0
 425 001e 7B60     		str	r3, [r7, #4]
 426              	.L13:
 608:FreeRTOS/Source/tasks.c **** 			}
 609:FreeRTOS/Source/tasks.c **** 
 610:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are deleting ourselves. */
 611:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
 427              		.loc 1 611 0
 428 0020 7B68     		ldr	r3, [r7, #4]
 429 0022 002B     		cmp	r3, #0
 430 0024 05D1     		bne	.L14
 431              		.loc 1 611 0 is_stmt 0 discriminator 1
 432 0026 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 433 002a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 434 002e 1B68     		ldr	r3, [r3]
 435 0030 00E0     		b	.L15
 436              	.L14:
 437              		.loc 1 611 0 discriminator 2
 438 0032 7B68     		ldr	r3, [r7, #4]
 439              	.L15:
 440              		.loc 1 611 0 discriminator 3
 441 0034 FB60     		str	r3, [r7, #12]
 612:FreeRTOS/Source/tasks.c **** 
 613:FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list and place in the	termination list.
 614:FreeRTOS/Source/tasks.c **** 			This will stop the task from be scheduled.  The idle task will check
 615:FreeRTOS/Source/tasks.c **** 			the termination list and free up any memory allocated by the
 616:FreeRTOS/Source/tasks.c **** 			scheduler for the TCB and stack. */
 617:FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 442              		.loc 1 617 0 is_stmt 1 discriminator 3
 443 0036 FB68     		ldr	r3, [r7, #12]
 444 0038 0433     		adds	r3, r3, #4
 445 003a 1846     		mov	r0, r3
 446 003c FFF7FEFF 		bl	vListRemove
 618:FreeRTOS/Source/tasks.c **** 
 619:FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 620:FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 447              		.loc 1 620 0 discriminator 3
 448 0040 FB68     		ldr	r3, [r7, #12]
 449 0042 9B6A     		ldr	r3, [r3, #40]
 450 0044 002B     		cmp	r3, #0
 451 0046 04D0     		beq	.L16
 621:FreeRTOS/Source/tasks.c **** 			{
 622:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 452              		.loc 1 622 0
 453 0048 FB68     		ldr	r3, [r7, #12]
 454 004a 1833     		adds	r3, r3, #24
 455 004c 1846     		mov	r0, r3
 456 004e FFF7FEFF 		bl	vListRemove
 457              	.L16:
 623:FreeRTOS/Source/tasks.c **** 			}
 624:FreeRTOS/Source/tasks.c **** 
 625:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 458              		.loc 1 625 0
 459 0052 FB68     		ldr	r3, [r7, #12]
 460 0054 0433     		adds	r3, r3, #4
 461 0056 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 462 005a C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 463 005e 1946     		mov	r1, r3
 464 0060 FFF7FEFF 		bl	vListInsertEnd
 626:FreeRTOS/Source/tasks.c **** 
 627:FreeRTOS/Source/tasks.c **** 			/* Increment the ucTasksDeleted variable so the idle task knows
 628:FreeRTOS/Source/tasks.c **** 			there is a task that has been deleted and that it should therefore
 629:FreeRTOS/Source/tasks.c **** 			check the xTasksWaitingTermination list. */
 630:FreeRTOS/Source/tasks.c **** 			++uxTasksDeleted;
 465              		.loc 1 630 0
 466 0064 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 467 0068 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 468 006c 1B68     		ldr	r3, [r3]
 469 006e 5A1C     		adds	r2, r3, #1
 470 0070 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 471 0074 C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 472 0078 1A60     		str	r2, [r3]
 631:FreeRTOS/Source/tasks.c **** 
 632:FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
 633:FreeRTOS/Source/tasks.c **** 			can detect that the task lists need re-generating. */
 634:FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 473              		.loc 1 634 0
 474 007a 40F20003 		movw	r3, #:lower16:uxTaskNumber
 475 007e C0F20003 		movt	r3, #:upper16:uxTaskNumber
 476 0082 1B68     		ldr	r3, [r3]
 477 0084 5A1C     		adds	r2, r3, #1
 478 0086 40F20003 		movw	r3, #:lower16:uxTaskNumber
 479 008a C0F20003 		movt	r3, #:upper16:uxTaskNumber
 480 008e 1A60     		str	r2, [r3]
 635:FreeRTOS/Source/tasks.c **** 
 636:FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
 637:FreeRTOS/Source/tasks.c **** 		}
 638:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 481              		.loc 1 638 0
 482 0090 FFF7FEFF 		bl	vPortExitCritical
 639:FreeRTOS/Source/tasks.c **** 
 640:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if we have just deleted the current task. */
 641:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 483              		.loc 1 641 0
 484 0094 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 485 0098 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 486 009c 1B68     		ldr	r3, [r3]
 487 009e 002B     		cmp	r3, #0
 488 00a0 04D0     		beq	.L12
 642:FreeRTOS/Source/tasks.c **** 		{
 643:FreeRTOS/Source/tasks.c **** 			if( ( void * ) pxTaskToDelete == NULL )
 489              		.loc 1 643 0
 490 00a2 7B68     		ldr	r3, [r7, #4]
 491 00a4 002B     		cmp	r3, #0
 492 00a6 01D1     		bne	.L12
 644:FreeRTOS/Source/tasks.c **** 			{
 645:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 493              		.loc 1 645 0
 494 00a8 FFF7FEFF 		bl	vPortYieldFromISR
 495              	.L12:
 646:FreeRTOS/Source/tasks.c **** 			}
 647:FreeRTOS/Source/tasks.c **** 		}
 648:FreeRTOS/Source/tasks.c **** 	}
 496              		.loc 1 648 0
 497 00ac 1037     		adds	r7, r7, #16
 498 00ae BD46     		mov	sp, r7
 499              		@ sp needed
 500 00b0 80BD     		pop	{r7, pc}
 501              		.cfi_endproc
 502              	.LFE111:
 504 00b2 00BF     		.section	.text.vTaskDelayUntil,"ax",%progbits
 505              		.align	2
 506              		.global	vTaskDelayUntil
 507              		.thumb
 508              		.thumb_func
 510              	vTaskDelayUntil:
 511              	.LFB112:
 649:FreeRTOS/Source/tasks.c **** 
 650:FreeRTOS/Source/tasks.c **** #endif
 651:FreeRTOS/Source/tasks.c **** 
 652:FreeRTOS/Source/tasks.c **** 
 653:FreeRTOS/Source/tasks.c **** 
 654:FreeRTOS/Source/tasks.c **** 
 655:FreeRTOS/Source/tasks.c **** 
 656:FreeRTOS/Source/tasks.c **** 
 657:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
 658:FreeRTOS/Source/tasks.c ****  * TASK CONTROL API documented in task.h
 659:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
 660:FreeRTOS/Source/tasks.c **** 
 661:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
 662:FreeRTOS/Source/tasks.c **** 
 663:FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
 664:FreeRTOS/Source/tasks.c **** 	{
 512              		.loc 1 664 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 24
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516 0000 80B5     		push	{r7, lr}
 517              	.LCFI6:
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 7, -8
 520              		.cfi_offset 14, -4
 521 0002 86B0     		sub	sp, sp, #24
 522              	.LCFI7:
 523              		.cfi_def_cfa_offset 32
 524 0004 00AF     		add	r7, sp, #0
 525              	.LCFI8:
 526              		.cfi_def_cfa_register 7
 527 0006 7860     		str	r0, [r7, #4]
 528 0008 3960     		str	r1, [r7]
 665:FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 666:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
 529              		.loc 1 666 0
 530 000a 0023     		movs	r3, #0
 531 000c 7B61     		str	r3, [r7, #20]
 667:FreeRTOS/Source/tasks.c **** 
 668:FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 669:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 670:FreeRTOS/Source/tasks.c **** 
 671:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 532              		.loc 1 671 0
 533 000e FFF7FEFF 		bl	vTaskSuspendAll
 672:FreeRTOS/Source/tasks.c **** 		{
 673:FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
 674:FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 534              		.loc 1 674 0
 535 0012 7B68     		ldr	r3, [r7, #4]
 536 0014 1A68     		ldr	r2, [r3]
 537 0016 3B68     		ldr	r3, [r7]
 538 0018 1344     		add	r3, r3, r2
 539 001a 3B61     		str	r3, [r7, #16]
 675:FreeRTOS/Source/tasks.c **** 
 676:FreeRTOS/Source/tasks.c **** 			if( xTickCount < *pxPreviousWakeTime )
 540              		.loc 1 676 0
 541 001c 7B68     		ldr	r3, [r7, #4]
 542 001e 1A68     		ldr	r2, [r3]
 543 0020 40F20003 		movw	r3, #:lower16:xTickCount
 544 0024 C0F20003 		movt	r3, #:upper16:xTickCount
 545 0028 1B68     		ldr	r3, [r3]
 546 002a 9A42     		cmp	r2, r3
 547 002c 0FD9     		bls	.L19
 677:FreeRTOS/Source/tasks.c **** 			{
 678:FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
 679:FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
 680:FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
 681:FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
 682:FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
 683:FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
 548              		.loc 1 683 0
 549 002e 7B68     		ldr	r3, [r7, #4]
 550 0030 1A68     		ldr	r2, [r3]
 551 0032 3B69     		ldr	r3, [r7, #16]
 552 0034 9A42     		cmp	r2, r3
 553 0036 19D9     		bls	.L21
 554              		.loc 1 683 0 is_stmt 0 discriminator 1
 555 0038 40F20003 		movw	r3, #:lower16:xTickCount
 556 003c C0F20003 		movt	r3, #:upper16:xTickCount
 557 0040 1B68     		ldr	r3, [r3]
 558 0042 3A69     		ldr	r2, [r7, #16]
 559 0044 9A42     		cmp	r2, r3
 560 0046 11D9     		bls	.L21
 684:FreeRTOS/Source/tasks.c **** 				{
 685:FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 561              		.loc 1 685 0 is_stmt 1
 562 0048 0123     		movs	r3, #1
 563 004a 7B61     		str	r3, [r7, #20]
 564 004c 0EE0     		b	.L21
 565              	.L19:
 686:FreeRTOS/Source/tasks.c **** 				}
 687:FreeRTOS/Source/tasks.c **** 			}
 688:FreeRTOS/Source/tasks.c **** 			else
 689:FreeRTOS/Source/tasks.c **** 			{
 690:FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
 691:FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
 692:FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
 693:FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
 566              		.loc 1 693 0
 567 004e 7B68     		ldr	r3, [r7, #4]
 568 0050 1A68     		ldr	r2, [r3]
 569 0052 3B69     		ldr	r3, [r7, #16]
 570 0054 9A42     		cmp	r2, r3
 571 0056 07D8     		bhi	.L22
 572              		.loc 1 693 0 is_stmt 0 discriminator 1
 573 0058 40F20003 		movw	r3, #:lower16:xTickCount
 574 005c C0F20003 		movt	r3, #:upper16:xTickCount
 575 0060 1B68     		ldr	r3, [r3]
 576 0062 3A69     		ldr	r2, [r7, #16]
 577 0064 9A42     		cmp	r2, r3
 578 0066 01D9     		bls	.L21
 579              	.L22:
 694:FreeRTOS/Source/tasks.c **** 				{
 695:FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 580              		.loc 1 695 0 is_stmt 1
 581 0068 0123     		movs	r3, #1
 582 006a 7B61     		str	r3, [r7, #20]
 583              	.L21:
 696:FreeRTOS/Source/tasks.c **** 				}
 697:FreeRTOS/Source/tasks.c **** 			}
 698:FreeRTOS/Source/tasks.c **** 
 699:FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
 700:FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 584              		.loc 1 700 0
 585 006c 7B68     		ldr	r3, [r7, #4]
 586 006e 3A69     		ldr	r2, [r7, #16]
 587 0070 1A60     		str	r2, [r3]
 701:FreeRTOS/Source/tasks.c **** 
 702:FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 588              		.loc 1 702 0
 589 0072 7B69     		ldr	r3, [r7, #20]
 590 0074 002B     		cmp	r3, #0
 591 0076 0BD0     		beq	.L23
 703:FreeRTOS/Source/tasks.c **** 			{
 704:FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL();
 705:FreeRTOS/Source/tasks.c **** 
 706:FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 707:FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 708:FreeRTOS/Source/tasks.c **** 				both lists. */
 709:FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 592              		.loc 1 709 0
 593 0078 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 594 007c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 595 0080 1B68     		ldr	r3, [r3]
 596 0082 0433     		adds	r3, r3, #4
 597 0084 1846     		mov	r0, r3
 598 0086 FFF7FEFF 		bl	vListRemove
 710:FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 599              		.loc 1 710 0
 600 008a 3869     		ldr	r0, [r7, #16]
 601 008c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 602              	.L23:
 711:FreeRTOS/Source/tasks.c **** 			}
 712:FreeRTOS/Source/tasks.c **** 		}
 713:FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 603              		.loc 1 713 0
 604 0090 FFF7FEFF 		bl	xTaskResumeAll
 605 0094 F860     		str	r0, [r7, #12]
 714:FreeRTOS/Source/tasks.c **** 
 715:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 716:FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 717:FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 606              		.loc 1 717 0
 607 0096 FB68     		ldr	r3, [r7, #12]
 608 0098 002B     		cmp	r3, #0
 609 009a 01D1     		bne	.L18
 718:FreeRTOS/Source/tasks.c **** 		{
 719:FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 610              		.loc 1 719 0
 611 009c FFF7FEFF 		bl	vPortYieldFromISR
 612              	.L18:
 720:FreeRTOS/Source/tasks.c **** 		}
 721:FreeRTOS/Source/tasks.c **** 	}
 613              		.loc 1 721 0
 614 00a0 1837     		adds	r7, r7, #24
 615 00a2 BD46     		mov	sp, r7
 616              		@ sp needed
 617 00a4 80BD     		pop	{r7, pc}
 618              		.cfi_endproc
 619              	.LFE112:
 621 00a6 00BF     		.section	.text.vTaskDelay,"ax",%progbits
 622              		.align	2
 623              		.global	vTaskDelay
 624              		.thumb
 625              		.thumb_func
 627              	vTaskDelay:
 628              	.LFB113:
 722:FreeRTOS/Source/tasks.c **** 
 723:FreeRTOS/Source/tasks.c **** #endif
 724:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 725:FreeRTOS/Source/tasks.c **** 
 726:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
 727:FreeRTOS/Source/tasks.c **** 
 728:FreeRTOS/Source/tasks.c **** 	void vTaskDelay( portTickType xTicksToDelay )
 729:FreeRTOS/Source/tasks.c **** 	{
 629              		.loc 1 729 0
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 16
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633 0000 80B5     		push	{r7, lr}
 634              	.LCFI9:
 635              		.cfi_def_cfa_offset 8
 636              		.cfi_offset 7, -8
 637              		.cfi_offset 14, -4
 638 0002 84B0     		sub	sp, sp, #16
 639              	.LCFI10:
 640              		.cfi_def_cfa_offset 24
 641 0004 00AF     		add	r7, sp, #0
 642              	.LCFI11:
 643              		.cfi_def_cfa_register 7
 644 0006 7860     		str	r0, [r7, #4]
 730:FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
 731:FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 645              		.loc 1 731 0
 646 0008 0023     		movs	r3, #0
 647 000a FB60     		str	r3, [r7, #12]
 732:FreeRTOS/Source/tasks.c **** 
 733:FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
 734:FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( portTickType ) 0U )
 648              		.loc 1 734 0
 649 000c 7B68     		ldr	r3, [r7, #4]
 650 000e 002B     		cmp	r3, #0
 651 0010 18D0     		beq	.L26
 735:FreeRTOS/Source/tasks.c **** 		{
 736:FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 652              		.loc 1 736 0
 653 0012 FFF7FEFF 		bl	vTaskSuspendAll
 737:FreeRTOS/Source/tasks.c **** 			{
 738:FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
 739:FreeRTOS/Source/tasks.c **** 
 740:FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
 741:FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
 742:FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
 743:FreeRTOS/Source/tasks.c **** 				is resumed.
 744:FreeRTOS/Source/tasks.c **** 
 745:FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
 746:FreeRTOS/Source/tasks.c **** 				executing task. */
 747:FreeRTOS/Source/tasks.c **** 
 748:FreeRTOS/Source/tasks.c **** 				/* Calculate the time to wake - this may overflow but this is
 749:FreeRTOS/Source/tasks.c **** 				not a problem. */
 750:FreeRTOS/Source/tasks.c **** 				xTimeToWake = xTickCount + xTicksToDelay;
 654              		.loc 1 750 0
 655 0016 40F20003 		movw	r3, #:lower16:xTickCount
 656 001a C0F20003 		movt	r3, #:upper16:xTickCount
 657 001e 1A68     		ldr	r2, [r3]
 658 0020 7B68     		ldr	r3, [r7, #4]
 659 0022 1344     		add	r3, r3, r2
 660 0024 BB60     		str	r3, [r7, #8]
 751:FreeRTOS/Source/tasks.c **** 
 752:FreeRTOS/Source/tasks.c **** 				/* We must remove ourselves from the ready list before adding
 753:FreeRTOS/Source/tasks.c **** 				ourselves to the blocked list as the same list item is used for
 754:FreeRTOS/Source/tasks.c **** 				both lists. */
 755:FreeRTOS/Source/tasks.c **** 				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 661              		.loc 1 755 0
 662 0026 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 663 002a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 664 002e 1B68     		ldr	r3, [r3]
 665 0030 0433     		adds	r3, r3, #4
 666 0032 1846     		mov	r0, r3
 667 0034 FFF7FEFF 		bl	vListRemove
 756:FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake );
 668              		.loc 1 756 0
 669 0038 B868     		ldr	r0, [r7, #8]
 670 003a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 757:FreeRTOS/Source/tasks.c **** 			}
 758:FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 671              		.loc 1 758 0
 672 003e FFF7FEFF 		bl	xTaskResumeAll
 673 0042 F860     		str	r0, [r7, #12]
 674              	.L26:
 759:FreeRTOS/Source/tasks.c **** 		}
 760:FreeRTOS/Source/tasks.c **** 
 761:FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
 762:FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
 763:FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 675              		.loc 1 763 0
 676 0044 FB68     		ldr	r3, [r7, #12]
 677 0046 002B     		cmp	r3, #0
 678 0048 01D1     		bne	.L25
 764:FreeRTOS/Source/tasks.c **** 		{
 765:FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 679              		.loc 1 765 0
 680 004a FFF7FEFF 		bl	vPortYieldFromISR
 681              	.L25:
 766:FreeRTOS/Source/tasks.c **** 		}
 767:FreeRTOS/Source/tasks.c **** 	}
 682              		.loc 1 767 0
 683 004e 1037     		adds	r7, r7, #16
 684 0050 BD46     		mov	sp, r7
 685              		@ sp needed
 686 0052 80BD     		pop	{r7, pc}
 687              		.cfi_endproc
 688              	.LFE113:
 690              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 691              		.align	2
 692              		.global	uxTaskPriorityGet
 693              		.thumb
 694              		.thumb_func
 696              	uxTaskPriorityGet:
 697              	.LFB114:
 768:FreeRTOS/Source/tasks.c **** 
 769:FreeRTOS/Source/tasks.c **** #endif
 770:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 771:FreeRTOS/Source/tasks.c **** 
 772:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
 773:FreeRTOS/Source/tasks.c **** 
 774:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
 775:FreeRTOS/Source/tasks.c **** 	{
 698              		.loc 1 775 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 16
 701              		@ frame_needed = 1, uses_anonymous_args = 0
 702 0000 80B5     		push	{r7, lr}
 703              	.LCFI12:
 704              		.cfi_def_cfa_offset 8
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 0002 84B0     		sub	sp, sp, #16
 708              	.LCFI13:
 709              		.cfi_def_cfa_offset 24
 710 0004 00AF     		add	r7, sp, #0
 711              	.LCFI14:
 712              		.cfi_def_cfa_register 7
 713 0006 7860     		str	r0, [r7, #4]
 776:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 777:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
 778:FreeRTOS/Source/tasks.c **** 
 779:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 714              		.loc 1 779 0
 715 0008 FFF7FEFF 		bl	vPortEnterCritical
 780:FreeRTOS/Source/tasks.c **** 		{
 781:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 782:FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 783:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 716              		.loc 1 783 0
 717 000c 7B68     		ldr	r3, [r7, #4]
 718 000e 002B     		cmp	r3, #0
 719 0010 05D1     		bne	.L29
 720              		.loc 1 783 0 is_stmt 0 discriminator 1
 721 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 722 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 723 001a 1B68     		ldr	r3, [r3]
 724 001c 00E0     		b	.L30
 725              	.L29:
 726              		.loc 1 783 0 discriminator 2
 727 001e 7B68     		ldr	r3, [r7, #4]
 728              	.L30:
 729              		.loc 1 783 0 discriminator 3
 730 0020 FB60     		str	r3, [r7, #12]
 784:FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 731              		.loc 1 784 0 is_stmt 1 discriminator 3
 732 0022 FB68     		ldr	r3, [r7, #12]
 733 0024 DB6A     		ldr	r3, [r3, #44]
 734 0026 BB60     		str	r3, [r7, #8]
 785:FreeRTOS/Source/tasks.c **** 		}
 786:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 735              		.loc 1 786 0 discriminator 3
 736 0028 FFF7FEFF 		bl	vPortExitCritical
 787:FreeRTOS/Source/tasks.c **** 
 788:FreeRTOS/Source/tasks.c **** 		return uxReturn;
 737              		.loc 1 788 0 discriminator 3
 738 002c BB68     		ldr	r3, [r7, #8]
 789:FreeRTOS/Source/tasks.c **** 	}
 739              		.loc 1 789 0 discriminator 3
 740 002e 1846     		mov	r0, r3
 741 0030 1037     		adds	r7, r7, #16
 742 0032 BD46     		mov	sp, r7
 743              		@ sp needed
 744 0034 80BD     		pop	{r7, pc}
 745              		.cfi_endproc
 746              	.LFE114:
 748 0036 00BF     		.section	.text.vTaskPrioritySet,"ax",%progbits
 749              		.align	2
 750              		.global	vTaskPrioritySet
 751              		.thumb
 752              		.thumb_func
 754              	vTaskPrioritySet:
 755              	.LFB115:
 790:FreeRTOS/Source/tasks.c **** 
 791:FreeRTOS/Source/tasks.c **** #endif
 792:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 793:FreeRTOS/Source/tasks.c **** 
 794:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
 795:FreeRTOS/Source/tasks.c **** 
 796:FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
 797:FreeRTOS/Source/tasks.c **** 	{
 756              		.loc 1 797 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 24
 759              		@ frame_needed = 1, uses_anonymous_args = 0
 760 0000 80B5     		push	{r7, lr}
 761              	.LCFI15:
 762              		.cfi_def_cfa_offset 8
 763              		.cfi_offset 7, -8
 764              		.cfi_offset 14, -4
 765 0002 86B0     		sub	sp, sp, #24
 766              	.LCFI16:
 767              		.cfi_def_cfa_offset 32
 768 0004 00AF     		add	r7, sp, #0
 769              	.LCFI17:
 770              		.cfi_def_cfa_register 7
 771 0006 7860     		str	r0, [r7, #4]
 772 0008 3960     		str	r1, [r7]
 798:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 799:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxCurrentPriority;
 800:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 773              		.loc 1 800 0
 774 000a 0023     		movs	r3, #0
 775 000c 7B61     		str	r3, [r7, #20]
 801:FreeRTOS/Source/tasks.c **** 
 802:FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 803:FreeRTOS/Source/tasks.c **** 
 804:FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
 805:FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= configMAX_PRIORITIES )
 776              		.loc 1 805 0
 777 000e 3B68     		ldr	r3, [r7]
 778 0010 042B     		cmp	r3, #4
 779 0012 01D9     		bls	.L33
 806:FreeRTOS/Source/tasks.c **** 		{
 807:FreeRTOS/Source/tasks.c **** 			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 780              		.loc 1 807 0
 781 0014 0423     		movs	r3, #4
 782 0016 3B60     		str	r3, [r7]
 783              	.L33:
 808:FreeRTOS/Source/tasks.c **** 		}
 809:FreeRTOS/Source/tasks.c **** 
 810:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 784              		.loc 1 810 0
 785 0018 FFF7FEFF 		bl	vPortEnterCritical
 811:FreeRTOS/Source/tasks.c **** 		{
 812:FreeRTOS/Source/tasks.c **** 			if( pxTask == pxCurrentTCB )
 786              		.loc 1 812 0
 787 001c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 788 0020 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 789 0024 1B68     		ldr	r3, [r3]
 790 0026 7A68     		ldr	r2, [r7, #4]
 791 0028 9A42     		cmp	r2, r3
 792 002a 01D1     		bne	.L34
 813:FreeRTOS/Source/tasks.c **** 			{
 814:FreeRTOS/Source/tasks.c **** 				pxTask = NULL;
 793              		.loc 1 814 0
 794 002c 0023     		movs	r3, #0
 795 002e 7B60     		str	r3, [r7, #4]
 796              	.L34:
 815:FreeRTOS/Source/tasks.c **** 			}
 816:FreeRTOS/Source/tasks.c **** 
 817:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are changing the
 818:FreeRTOS/Source/tasks.c **** 			priority of the calling function. */
 819:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTask );
 797              		.loc 1 819 0
 798 0030 7B68     		ldr	r3, [r7, #4]
 799 0032 002B     		cmp	r3, #0
 800 0034 05D1     		bne	.L35
 801              		.loc 1 819 0 is_stmt 0 discriminator 1
 802 0036 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 803 003a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 804 003e 1B68     		ldr	r3, [r3]
 805 0040 00E0     		b	.L36
 806              	.L35:
 807              		.loc 1 819 0 discriminator 2
 808 0042 7B68     		ldr	r3, [r7, #4]
 809              	.L36:
 810              		.loc 1 819 0 discriminator 3
 811 0044 3B61     		str	r3, [r7, #16]
 820:FreeRTOS/Source/tasks.c **** 
 821:FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTask, uxNewPriority );
 822:FreeRTOS/Source/tasks.c **** 
 823:FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
 824:FreeRTOS/Source/tasks.c **** 			{
 825:FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxBasePriority;
 812              		.loc 1 825 0 is_stmt 1 discriminator 3
 813 0046 3B69     		ldr	r3, [r7, #16]
 814 0048 5B6C     		ldr	r3, [r3, #68]
 815 004a FB60     		str	r3, [r7, #12]
 826:FreeRTOS/Source/tasks.c **** 			}
 827:FreeRTOS/Source/tasks.c **** 			#else
 828:FreeRTOS/Source/tasks.c **** 			{
 829:FreeRTOS/Source/tasks.c **** 				uxCurrentPriority = pxTCB->uxPriority;
 830:FreeRTOS/Source/tasks.c **** 			}
 831:FreeRTOS/Source/tasks.c **** 			#endif
 832:FreeRTOS/Source/tasks.c **** 
 833:FreeRTOS/Source/tasks.c **** 			if( uxCurrentPriority != uxNewPriority )
 816              		.loc 1 833 0 discriminator 3
 817 004c FA68     		ldr	r2, [r7, #12]
 818 004e 3B68     		ldr	r3, [r7]
 819 0050 9A42     		cmp	r2, r3
 820 0052 58D0     		beq	.L37
 834:FreeRTOS/Source/tasks.c **** 			{
 835:FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
 836:FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
 837:FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentPriority )
 821              		.loc 1 837 0
 822 0054 3A68     		ldr	r2, [r7]
 823 0056 FB68     		ldr	r3, [r7, #12]
 824 0058 9A42     		cmp	r2, r3
 825 005a 05D9     		bls	.L38
 838:FreeRTOS/Source/tasks.c **** 				{
 839:FreeRTOS/Source/tasks.c **** 					if( pxTask != NULL )
 826              		.loc 1 839 0
 827 005c 7B68     		ldr	r3, [r7, #4]
 828 005e 002B     		cmp	r3, #0
 829 0060 07D0     		beq	.L40
 840:FreeRTOS/Source/tasks.c **** 					{
 841:FreeRTOS/Source/tasks.c **** 						/* The priority of another task is being raised.  If we
 842:FreeRTOS/Source/tasks.c **** 						were raising the priority of the currently running task
 843:FreeRTOS/Source/tasks.c **** 						there would be no need to switch as it must have already
 844:FreeRTOS/Source/tasks.c **** 						been the highest priority task. */
 845:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 830              		.loc 1 845 0
 831 0062 0123     		movs	r3, #1
 832 0064 7B61     		str	r3, [r7, #20]
 833 0066 04E0     		b	.L40
 834              	.L38:
 846:FreeRTOS/Source/tasks.c **** 					}
 847:FreeRTOS/Source/tasks.c **** 				}
 848:FreeRTOS/Source/tasks.c **** 				else if( pxTask == NULL )
 835              		.loc 1 848 0
 836 0068 7B68     		ldr	r3, [r7, #4]
 837 006a 002B     		cmp	r3, #0
 838 006c 01D1     		bne	.L40
 849:FreeRTOS/Source/tasks.c **** 				{
 850:FreeRTOS/Source/tasks.c **** 					/* Setting our own priority down means there may now be another
 851:FreeRTOS/Source/tasks.c **** 					task of higher priority that is ready to execute. */
 852:FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 839              		.loc 1 852 0
 840 006e 0123     		movs	r3, #1
 841 0070 7B61     		str	r3, [r7, #20]
 842              	.L40:
 853:FreeRTOS/Source/tasks.c **** 				}
 854:FreeRTOS/Source/tasks.c **** 
 855:FreeRTOS/Source/tasks.c **** 
 856:FreeRTOS/Source/tasks.c **** 
 857:FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
 858:FreeRTOS/Source/tasks.c **** 				{
 859:FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
 860:FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
 861:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 843              		.loc 1 861 0
 844 0072 3B69     		ldr	r3, [r7, #16]
 845 0074 5A6C     		ldr	r2, [r3, #68]
 846 0076 3B69     		ldr	r3, [r7, #16]
 847 0078 DB6A     		ldr	r3, [r3, #44]
 848 007a 9A42     		cmp	r2, r3
 849 007c 02D1     		bne	.L41
 862:FreeRTOS/Source/tasks.c **** 					{
 863:FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 850              		.loc 1 863 0
 851 007e 3B69     		ldr	r3, [r7, #16]
 852 0080 3A68     		ldr	r2, [r7]
 853 0082 DA62     		str	r2, [r3, #44]
 854              	.L41:
 864:FreeRTOS/Source/tasks.c **** 					}
 865:FreeRTOS/Source/tasks.c **** 
 866:FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
 867:FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 855              		.loc 1 867 0
 856 0084 3B69     		ldr	r3, [r7, #16]
 857 0086 3A68     		ldr	r2, [r7]
 858 0088 5A64     		str	r2, [r3, #68]
 868:FreeRTOS/Source/tasks.c **** 				}
 869:FreeRTOS/Source/tasks.c **** 				#else
 870:FreeRTOS/Source/tasks.c **** 				{
 871:FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
 872:FreeRTOS/Source/tasks.c **** 				}
 873:FreeRTOS/Source/tasks.c **** 				#endif
 874:FreeRTOS/Source/tasks.c **** 
 875:FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) 
 859              		.loc 1 875 0
 860 008a 3B68     		ldr	r3, [r7]
 861 008c C3F10502 		rsb	r2, r3, #5
 862 0090 3B69     		ldr	r3, [r7, #16]
 863 0092 9A61     		str	r2, [r3, #24]
 876:FreeRTOS/Source/tasks.c **** 
 877:FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
 878:FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
 879:FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
 880:FreeRTOS/Source/tasks.c **** 				in the queue appropriate to its new priority. */
 881:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericLis
 864              		.loc 1 881 0
 865 0094 3B69     		ldr	r3, [r7, #16]
 866 0096 5969     		ldr	r1, [r3, #20]
 867 0098 FA68     		ldr	r2, [r7, #12]
 868 009a 1346     		mov	r3, r2
 869 009c 9B00     		lsls	r3, r3, #2
 870 009e 1344     		add	r3, r3, r2
 871 00a0 9B00     		lsls	r3, r3, #2
 872 00a2 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 873 00a6 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 874 00aa 1344     		add	r3, r3, r2
 875 00ac 9942     		cmp	r1, r3
 876 00ae 25D1     		bne	.L42
 882:FreeRTOS/Source/tasks.c **** 				{
 883:FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
 884:FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
 885:FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
 886:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 877              		.loc 1 886 0
 878 00b0 3B69     		ldr	r3, [r7, #16]
 879 00b2 0433     		adds	r3, r3, #4
 880 00b4 1846     		mov	r0, r3
 881 00b6 FFF7FEFF 		bl	vListRemove
 887:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 882              		.loc 1 887 0
 883 00ba 3B69     		ldr	r3, [r7, #16]
 884 00bc DA6A     		ldr	r2, [r3, #44]
 885 00be 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 886 00c2 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 887 00c6 1B68     		ldr	r3, [r3]
 888 00c8 9A42     		cmp	r2, r3
 889 00ca 06D9     		bls	.L43
 890              		.loc 1 887 0 is_stmt 0 discriminator 1
 891 00cc 3B69     		ldr	r3, [r7, #16]
 892 00ce DA6A     		ldr	r2, [r3, #44]
 893 00d0 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 894 00d4 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 895 00d8 1A60     		str	r2, [r3]
 896              	.L43:
 897              		.loc 1 887 0 discriminator 2
 898 00da 3B69     		ldr	r3, [r7, #16]
 899 00dc DA6A     		ldr	r2, [r3, #44]
 900 00de 1346     		mov	r3, r2
 901 00e0 9B00     		lsls	r3, r3, #2
 902 00e2 1344     		add	r3, r3, r2
 903 00e4 9B00     		lsls	r3, r3, #2
 904 00e6 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 905 00ea C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 906 00ee 1A44     		add	r2, r2, r3
 907 00f0 3B69     		ldr	r3, [r7, #16]
 908 00f2 0433     		adds	r3, r3, #4
 909 00f4 1046     		mov	r0, r2
 910 00f6 1946     		mov	r1, r3
 911 00f8 FFF7FEFF 		bl	vListInsertEnd
 912              	.L42:
 888:FreeRTOS/Source/tasks.c **** 				}
 889:FreeRTOS/Source/tasks.c **** 
 890:FreeRTOS/Source/tasks.c **** 				if( xYieldRequired == pdTRUE )
 913              		.loc 1 890 0 is_stmt 1
 914 00fc 7B69     		ldr	r3, [r7, #20]
 915 00fe 012B     		cmp	r3, #1
 916 0100 01D1     		bne	.L37
 891:FreeRTOS/Source/tasks.c **** 				{
 892:FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 917              		.loc 1 892 0
 918 0102 FFF7FEFF 		bl	vPortYieldFromISR
 919              	.L37:
 893:FreeRTOS/Source/tasks.c **** 				}
 894:FreeRTOS/Source/tasks.c **** 			}
 895:FreeRTOS/Source/tasks.c **** 		}
 896:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 920              		.loc 1 896 0
 921 0106 FFF7FEFF 		bl	vPortExitCritical
 897:FreeRTOS/Source/tasks.c **** 	}
 922              		.loc 1 897 0
 923 010a 1837     		adds	r7, r7, #24
 924 010c BD46     		mov	sp, r7
 925              		@ sp needed
 926 010e 80BD     		pop	{r7, pc}
 927              		.cfi_endproc
 928              	.LFE115:
 930              		.section	.text.vTaskSuspend,"ax",%progbits
 931              		.align	2
 932              		.global	vTaskSuspend
 933              		.thumb
 934              		.thumb_func
 936              	vTaskSuspend:
 937              	.LFB116:
 898:FreeRTOS/Source/tasks.c **** 
 899:FreeRTOS/Source/tasks.c **** #endif
 900:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 901:FreeRTOS/Source/tasks.c **** 
 902:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 903:FreeRTOS/Source/tasks.c **** 
 904:FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
 905:FreeRTOS/Source/tasks.c **** 	{
 938              		.loc 1 905 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 16
 941              		@ frame_needed = 1, uses_anonymous_args = 0
 942 0000 80B5     		push	{r7, lr}
 943              	.LCFI18:
 944              		.cfi_def_cfa_offset 8
 945              		.cfi_offset 7, -8
 946              		.cfi_offset 14, -4
 947 0002 84B0     		sub	sp, sp, #16
 948              	.LCFI19:
 949              		.cfi_def_cfa_offset 24
 950 0004 00AF     		add	r7, sp, #0
 951              	.LCFI20:
 952              		.cfi_def_cfa_register 7
 953 0006 7860     		str	r0, [r7, #4]
 906:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
 907:FreeRTOS/Source/tasks.c **** 
 908:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 954              		.loc 1 908 0
 955 0008 FFF7FEFF 		bl	vPortEnterCritical
 909:FreeRTOS/Source/tasks.c **** 		{
 910:FreeRTOS/Source/tasks.c **** 			/* Ensure a yield is performed if the current task is being
 911:FreeRTOS/Source/tasks.c **** 			suspended. */
 912:FreeRTOS/Source/tasks.c **** 			if( pxTaskToSuspend == pxCurrentTCB )
 956              		.loc 1 912 0
 957 000c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 958 0010 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 959 0014 1B68     		ldr	r3, [r3]
 960 0016 7A68     		ldr	r2, [r7, #4]
 961 0018 9A42     		cmp	r2, r3
 962 001a 01D1     		bne	.L45
 913:FreeRTOS/Source/tasks.c **** 			{
 914:FreeRTOS/Source/tasks.c **** 				pxTaskToSuspend = NULL;
 963              		.loc 1 914 0
 964 001c 0023     		movs	r3, #0
 965 001e 7B60     		str	r3, [r7, #4]
 966              	.L45:
 915:FreeRTOS/Source/tasks.c **** 			}
 916:FreeRTOS/Source/tasks.c **** 
 917:FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then we are suspending ourselves. */
 918:FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
 967              		.loc 1 918 0
 968 0020 7B68     		ldr	r3, [r7, #4]
 969 0022 002B     		cmp	r3, #0
 970 0024 05D1     		bne	.L46
 971              		.loc 1 918 0 is_stmt 0 discriminator 1
 972 0026 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 973 002a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 974 002e 1B68     		ldr	r3, [r3]
 975 0030 00E0     		b	.L47
 976              	.L46:
 977              		.loc 1 918 0 discriminator 2
 978 0032 7B68     		ldr	r3, [r7, #4]
 979              	.L47:
 980              		.loc 1 918 0 discriminator 3
 981 0034 FB60     		str	r3, [r7, #12]
 919:FreeRTOS/Source/tasks.c **** 
 920:FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
 921:FreeRTOS/Source/tasks.c **** 
 922:FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the	suspended list. */
 923:FreeRTOS/Source/tasks.c **** 			vListRemove( &( pxTCB->xGenericListItem ) );
 982              		.loc 1 923 0 is_stmt 1 discriminator 3
 983 0036 FB68     		ldr	r3, [r7, #12]
 984 0038 0433     		adds	r3, r3, #4
 985 003a 1846     		mov	r0, r3
 986 003c FFF7FEFF 		bl	vListRemove
 924:FreeRTOS/Source/tasks.c **** 
 925:FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
 926:FreeRTOS/Source/tasks.c **** 			if( pxTCB->xEventListItem.pvContainer != NULL )
 987              		.loc 1 926 0 discriminator 3
 988 0040 FB68     		ldr	r3, [r7, #12]
 989 0042 9B6A     		ldr	r3, [r3, #40]
 990 0044 002B     		cmp	r3, #0
 991 0046 04D0     		beq	.L48
 927:FreeRTOS/Source/tasks.c **** 			{
 928:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xEventListItem ) );
 992              		.loc 1 928 0
 993 0048 FB68     		ldr	r3, [r7, #12]
 994 004a 1833     		adds	r3, r3, #24
 995 004c 1846     		mov	r0, r3
 996 004e FFF7FEFF 		bl	vListRemove
 997              	.L48:
 929:FreeRTOS/Source/tasks.c **** 			}
 930:FreeRTOS/Source/tasks.c **** 
 931:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
 998              		.loc 1 931 0
 999 0052 FB68     		ldr	r3, [r7, #12]
 1000 0054 0433     		adds	r3, r3, #4
 1001 0056 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 1002 005a C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 1003 005e 1946     		mov	r1, r3
 1004 0060 FFF7FEFF 		bl	vListInsertEnd
 932:FreeRTOS/Source/tasks.c **** 		}
 933:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1005              		.loc 1 933 0
 1006 0064 FFF7FEFF 		bl	vPortExitCritical
 934:FreeRTOS/Source/tasks.c **** 
 935:FreeRTOS/Source/tasks.c **** 		if( ( void * ) pxTaskToSuspend == NULL )
 1007              		.loc 1 935 0
 1008 0068 7B68     		ldr	r3, [r7, #4]
 1009 006a 002B     		cmp	r3, #0
 1010 006c 1ED1     		bne	.L44
 936:FreeRTOS/Source/tasks.c **** 		{
 937:FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1011              		.loc 1 937 0
 1012 006e 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1013 0072 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1014 0076 1B68     		ldr	r3, [r3]
 1015 0078 002B     		cmp	r3, #0
 1016 007a 02D0     		beq	.L50
 938:FreeRTOS/Source/tasks.c **** 			{
 939:FreeRTOS/Source/tasks.c **** 				/* We have just suspended the current task. */
 940:FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1017              		.loc 1 940 0
 1018 007c FFF7FEFF 		bl	vPortYieldFromISR
 1019 0080 14E0     		b	.L44
 1020              	.L50:
 941:FreeRTOS/Source/tasks.c **** 			}
 942:FreeRTOS/Source/tasks.c **** 			else
 943:FreeRTOS/Source/tasks.c **** 			{
 944:FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
 945:FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
 946:FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
 947:FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 1021              		.loc 1 947 0
 1022 0082 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1023 0086 C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1024 008a 1A68     		ldr	r2, [r3]
 1025 008c 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1026 0090 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1027 0094 1B68     		ldr	r3, [r3]
 1028 0096 9A42     		cmp	r2, r3
 1029 0098 06D1     		bne	.L51
 948:FreeRTOS/Source/tasks.c **** 				{
 949:FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
 950:FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
 951:FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
 952:FreeRTOS/Source/tasks.c **** 					is. */
 953:FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
 1030              		.loc 1 953 0
 1031 009a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1032 009e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1033 00a2 0022     		movs	r2, #0
 1034 00a4 1A60     		str	r2, [r3]
 1035 00a6 01E0     		b	.L44
 1036              	.L51:
 954:FreeRTOS/Source/tasks.c **** 				}
 955:FreeRTOS/Source/tasks.c **** 				else
 956:FreeRTOS/Source/tasks.c **** 				{
 957:FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
 1037              		.loc 1 957 0
 1038 00a8 FFF7FEFF 		bl	vTaskSwitchContext
 1039              	.L44:
 958:FreeRTOS/Source/tasks.c **** 				}
 959:FreeRTOS/Source/tasks.c **** 			}
 960:FreeRTOS/Source/tasks.c **** 		}
 961:FreeRTOS/Source/tasks.c **** 	}
 1040              		.loc 1 961 0
 1041 00ac 1037     		adds	r7, r7, #16
 1042 00ae BD46     		mov	sp, r7
 1043              		@ sp needed
 1044 00b0 80BD     		pop	{r7, pc}
 1045              		.cfi_endproc
 1046              	.LFE116:
 1048 00b2 00BF     		.section	.text.xTaskIsTaskSuspended,"ax",%progbits
 1049              		.align	2
 1050              		.global	xTaskIsTaskSuspended
 1051              		.thumb
 1052              		.thumb_func
 1054              	xTaskIsTaskSuspended:
 1055              	.LFB117:
 962:FreeRTOS/Source/tasks.c **** 
 963:FreeRTOS/Source/tasks.c **** #endif
 964:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 965:FreeRTOS/Source/tasks.c **** 
 966:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 967:FreeRTOS/Source/tasks.c **** 
 968:FreeRTOS/Source/tasks.c **** 	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
 969:FreeRTOS/Source/tasks.c **** 	{
 1056              		.loc 1 969 0
 1057              		.cfi_startproc
 1058              		@ args = 0, pretend = 0, frame = 16
 1059              		@ frame_needed = 1, uses_anonymous_args = 0
 1060              		@ link register save eliminated.
 1061 0000 80B4     		push	{r7}
 1062              	.LCFI21:
 1063              		.cfi_def_cfa_offset 4
 1064              		.cfi_offset 7, -4
 1065 0002 85B0     		sub	sp, sp, #20
 1066              	.LCFI22:
 1067              		.cfi_def_cfa_offset 24
 1068 0004 00AF     		add	r7, sp, #0
 1069              	.LCFI23:
 1070              		.cfi_def_cfa_register 7
 1071 0006 7860     		str	r0, [r7, #4]
 970:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn = pdFALSE;
 1072              		.loc 1 970 0
 1073 0008 0023     		movs	r3, #0
 1074 000a FB60     		str	r3, [r7, #12]
 971:FreeRTOS/Source/tasks.c **** 	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
 1075              		.loc 1 971 0
 1076 000c 7B68     		ldr	r3, [r7, #4]
 1077 000e BB60     		str	r3, [r7, #8]
 972:FreeRTOS/Source/tasks.c **** 
 973:FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
 974:FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 975:FreeRTOS/Source/tasks.c **** 
 976:FreeRTOS/Source/tasks.c **** 		/* Is the task we are attempting to resume actually in the
 977:FreeRTOS/Source/tasks.c **** 		suspended list? */
 978:FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
 1078              		.loc 1 978 0
 1079 0010 BB68     		ldr	r3, [r7, #8]
 1080 0012 5A69     		ldr	r2, [r3, #20]
 1081 0014 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1082 0018 C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1083 001c 9A42     		cmp	r2, r3
 1084 001e 0DD1     		bne	.L53
 979:FreeRTOS/Source/tasks.c **** 		{
 980:FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
 981:FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
 1085              		.loc 1 981 0
 1086 0020 BB68     		ldr	r3, [r7, #8]
 1087 0022 9A6A     		ldr	r2, [r3, #40]
 1088 0024 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1089 0028 C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1090 002c 9A42     		cmp	r2, r3
 1091 002e 05D0     		beq	.L53
 982:FreeRTOS/Source/tasks.c **** 			{
 983:FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the
 984:FreeRTOS/Source/tasks.c **** 				Suspended state?  It is possible to be in the suspended
 985:FreeRTOS/Source/tasks.c **** 				list because it is blocked on a task with no timeout
 986:FreeRTOS/Source/tasks.c **** 				specified. */
 987:FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
 1092              		.loc 1 987 0
 1093 0030 BB68     		ldr	r3, [r7, #8]
 1094 0032 9B6A     		ldr	r3, [r3, #40]
 1095 0034 002B     		cmp	r3, #0
 1096 0036 01D1     		bne	.L53
 988:FreeRTOS/Source/tasks.c **** 				{
 989:FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 1097              		.loc 1 989 0
 1098 0038 0123     		movs	r3, #1
 1099 003a FB60     		str	r3, [r7, #12]
 1100              	.L53:
 990:FreeRTOS/Source/tasks.c **** 				}
 991:FreeRTOS/Source/tasks.c **** 			}
 992:FreeRTOS/Source/tasks.c **** 		}
 993:FreeRTOS/Source/tasks.c **** 
 994:FreeRTOS/Source/tasks.c **** 		return xReturn;
 1101              		.loc 1 994 0
 1102 003c FB68     		ldr	r3, [r7, #12]
 995:FreeRTOS/Source/tasks.c **** 	}
 1103              		.loc 1 995 0
 1104 003e 1846     		mov	r0, r3
 1105 0040 1437     		adds	r7, r7, #20
 1106 0042 BD46     		mov	sp, r7
 1107              		@ sp needed
 1108 0044 5DF8047B 		ldr	r7, [sp], #4
 1109 0048 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE117:
 1113 004a 00BF     		.section	.text.vTaskResume,"ax",%progbits
 1114              		.align	2
 1115              		.global	vTaskResume
 1116              		.thumb
 1117              		.thumb_func
 1119              	vTaskResume:
 1120              	.LFB118:
 996:FreeRTOS/Source/tasks.c **** 
 997:FreeRTOS/Source/tasks.c **** #endif
 998:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 999:FreeRTOS/Source/tasks.c **** 
1000:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1001:FreeRTOS/Source/tasks.c **** 
1002:FreeRTOS/Source/tasks.c **** 	void vTaskResume( xTaskHandle pxTaskToResume )
1003:FreeRTOS/Source/tasks.c **** 	{
 1121              		.loc 1 1003 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 16
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125 0000 80B5     		push	{r7, lr}
 1126              	.LCFI24:
 1127              		.cfi_def_cfa_offset 8
 1128              		.cfi_offset 7, -8
 1129              		.cfi_offset 14, -4
 1130 0002 84B0     		sub	sp, sp, #16
 1131              	.LCFI25:
 1132              		.cfi_def_cfa_offset 24
 1133 0004 00AF     		add	r7, sp, #0
 1134              	.LCFI26:
 1135              		.cfi_def_cfa_register 7
 1136 0006 7860     		str	r0, [r7, #4]
1004:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1005:FreeRTOS/Source/tasks.c **** 
1006:FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1007:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1008:FreeRTOS/Source/tasks.c **** 
1009:FreeRTOS/Source/tasks.c **** 		/* Remove the task from whichever list it is currently in, and place
1010:FreeRTOS/Source/tasks.c **** 		it in the ready list. */
1011:FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1137              		.loc 1 1011 0
 1138 0008 7B68     		ldr	r3, [r7, #4]
 1139 000a FB60     		str	r3, [r7, #12]
1012:FreeRTOS/Source/tasks.c **** 
1013:FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1014:FreeRTOS/Source/tasks.c **** 		currently executing task. */
1015:FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 1140              		.loc 1 1015 0
 1141 000c FB68     		ldr	r3, [r7, #12]
 1142 000e 002B     		cmp	r3, #0
 1143 0010 43D0     		beq	.L55
 1144              		.loc 1 1015 0 is_stmt 0 discriminator 1
 1145 0012 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1146 0016 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1147 001a 1B68     		ldr	r3, [r3]
 1148 001c FA68     		ldr	r2, [r7, #12]
 1149 001e 9A42     		cmp	r2, r3
 1150 0020 3BD0     		beq	.L55
1016:FreeRTOS/Source/tasks.c **** 		{
1017:FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1151              		.loc 1 1017 0 is_stmt 1
 1152 0022 FFF7FEFF 		bl	vPortEnterCritical
1018:FreeRTOS/Source/tasks.c **** 			{
1019:FreeRTOS/Source/tasks.c **** 				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1153              		.loc 1 1019 0
 1154 0026 F868     		ldr	r0, [r7, #12]
 1155 0028 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1156 002c 0346     		mov	r3, r0
 1157 002e 012B     		cmp	r3, #1
 1158 0030 31D1     		bne	.L57
1020:FreeRTOS/Source/tasks.c **** 				{
1021:FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1022:FreeRTOS/Source/tasks.c **** 
1023:FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1024:FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1025:FreeRTOS/Source/tasks.c **** 					vListRemove(  &( pxTCB->xGenericListItem ) );
 1159              		.loc 1 1025 0
 1160 0032 FB68     		ldr	r3, [r7, #12]
 1161 0034 0433     		adds	r3, r3, #4
 1162 0036 1846     		mov	r0, r3
 1163 0038 FFF7FEFF 		bl	vListRemove
1026:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1164              		.loc 1 1026 0
 1165 003c FB68     		ldr	r3, [r7, #12]
 1166 003e DA6A     		ldr	r2, [r3, #44]
 1167 0040 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1168 0044 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1169 0048 1B68     		ldr	r3, [r3]
 1170 004a 9A42     		cmp	r2, r3
 1171 004c 06D9     		bls	.L58
 1172              		.loc 1 1026 0 is_stmt 0 discriminator 1
 1173 004e FB68     		ldr	r3, [r7, #12]
 1174 0050 DA6A     		ldr	r2, [r3, #44]
 1175 0052 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1176 0056 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1177 005a 1A60     		str	r2, [r3]
 1178              	.L58:
 1179              		.loc 1 1026 0 discriminator 2
 1180 005c FB68     		ldr	r3, [r7, #12]
 1181 005e DA6A     		ldr	r2, [r3, #44]
 1182 0060 1346     		mov	r3, r2
 1183 0062 9B00     		lsls	r3, r3, #2
 1184 0064 1344     		add	r3, r3, r2
 1185 0066 9B00     		lsls	r3, r3, #2
 1186 0068 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 1187 006c C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 1188 0070 1A44     		add	r2, r2, r3
 1189 0072 FB68     		ldr	r3, [r7, #12]
 1190 0074 0433     		adds	r3, r3, #4
 1191 0076 1046     		mov	r0, r2
 1192 0078 1946     		mov	r1, r3
 1193 007a FFF7FEFF 		bl	vListInsertEnd
1027:FreeRTOS/Source/tasks.c **** 
1028:FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1029:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1194              		.loc 1 1029 0 is_stmt 1 discriminator 2
 1195 007e FB68     		ldr	r3, [r7, #12]
 1196 0080 DA6A     		ldr	r2, [r3, #44]
 1197 0082 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1198 0086 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1199 008a 1B68     		ldr	r3, [r3]
 1200 008c DB6A     		ldr	r3, [r3, #44]
 1201 008e 9A42     		cmp	r2, r3
 1202 0090 01D3     		bcc	.L57
1030:FreeRTOS/Source/tasks.c **** 					{
1031:FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run, but
1032:FreeRTOS/Source/tasks.c **** 						will leave the lists in the correct state for the next yield. */
1033:FreeRTOS/Source/tasks.c **** 						portYIELD_WITHIN_API();
 1203              		.loc 1 1033 0
 1204 0092 FFF7FEFF 		bl	vPortYieldFromISR
 1205              	.L57:
1034:FreeRTOS/Source/tasks.c **** 					}
1035:FreeRTOS/Source/tasks.c **** 				}
1036:FreeRTOS/Source/tasks.c **** 			}
1037:FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1206              		.loc 1 1037 0
 1207 0096 FFF7FEFF 		bl	vPortExitCritical
 1208              	.L55:
1038:FreeRTOS/Source/tasks.c **** 		}
1039:FreeRTOS/Source/tasks.c **** 	}
 1209              		.loc 1 1039 0
 1210 009a 1037     		adds	r7, r7, #16
 1211 009c BD46     		mov	sp, r7
 1212              		@ sp needed
 1213 009e 80BD     		pop	{r7, pc}
 1214              		.cfi_endproc
 1215              	.LFE118:
 1217              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1218              		.align	2
 1219              		.global	xTaskResumeFromISR
 1220              		.thumb
 1221              		.thumb_func
 1223              	xTaskResumeFromISR:
 1224              	.LFB119:
1040:FreeRTOS/Source/tasks.c **** 
1041:FreeRTOS/Source/tasks.c **** #endif
1042:FreeRTOS/Source/tasks.c **** 
1043:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1044:FreeRTOS/Source/tasks.c **** 
1045:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1046:FreeRTOS/Source/tasks.c **** 
1047:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
1048:FreeRTOS/Source/tasks.c **** 	{
 1225              		.loc 1 1048 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 16
 1228              		@ frame_needed = 1, uses_anonymous_args = 0
 1229 0000 80B5     		push	{r7, lr}
 1230              	.LCFI27:
 1231              		.cfi_def_cfa_offset 8
 1232              		.cfi_offset 7, -8
 1233              		.cfi_offset 14, -4
 1234 0002 84B0     		sub	sp, sp, #16
 1235              	.LCFI28:
 1236              		.cfi_def_cfa_offset 24
 1237 0004 00AF     		add	r7, sp, #0
 1238              	.LCFI29:
 1239              		.cfi_def_cfa_register 7
 1240 0006 7860     		str	r0, [r7, #4]
1049:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xYieldRequired = pdFALSE;
 1241              		.loc 1 1049 0
 1242 0008 0023     		movs	r3, #0
 1243 000a FB60     		str	r3, [r7, #12]
1050:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1051:FreeRTOS/Source/tasks.c **** 
1052:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskToResume );
1053:FreeRTOS/Source/tasks.c **** 
1054:FreeRTOS/Source/tasks.c **** 		pxTCB = ( tskTCB * ) pxTaskToResume;
 1244              		.loc 1 1054 0
 1245 000c 7B68     		ldr	r3, [r7, #4]
 1246 000e BB60     		str	r3, [r7, #8]
1055:FreeRTOS/Source/tasks.c **** 
1056:FreeRTOS/Source/tasks.c **** 		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
 1247              		.loc 1 1056 0
 1248 0010 B868     		ldr	r0, [r7, #8]
 1249 0012 FFF7FEFF 		bl	xTaskIsTaskSuspended
 1250 0016 0346     		mov	r3, r0
 1251 0018 012B     		cmp	r3, #1
 1252 001a 44D1     		bne	.L60
1057:FreeRTOS/Source/tasks.c **** 		{
1058:FreeRTOS/Source/tasks.c **** 			traceTASK_RESUME_FROM_ISR( pxTCB );
1059:FreeRTOS/Source/tasks.c **** 
1060:FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1253              		.loc 1 1060 0
 1254 001c 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1255 0020 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1256 0024 1B68     		ldr	r3, [r3]
 1257 0026 002B     		cmp	r3, #0
 1258 0028 34D1     		bne	.L61
1061:FreeRTOS/Source/tasks.c **** 			{
1062:FreeRTOS/Source/tasks.c **** 				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
 1259              		.loc 1 1062 0
 1260 002a BB68     		ldr	r3, [r7, #8]
 1261 002c DA6A     		ldr	r2, [r3, #44]
 1262 002e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1263 0032 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1264 0036 1B68     		ldr	r3, [r3]
 1265 0038 DB6A     		ldr	r3, [r3, #44]
 1266 003a 9A42     		cmp	r2, r3
 1267 003c 34BF     		ite	cc
 1268 003e 0023     		movcc	r3, #0
 1269 0040 0123     		movcs	r3, #1
 1270 0042 DBB2     		uxtb	r3, r3
 1271 0044 FB60     		str	r3, [r7, #12]
1063:FreeRTOS/Source/tasks.c **** 				vListRemove(  &( pxTCB->xGenericListItem ) );
 1272              		.loc 1 1063 0
 1273 0046 BB68     		ldr	r3, [r7, #8]
 1274 0048 0433     		adds	r3, r3, #4
 1275 004a 1846     		mov	r0, r3
 1276 004c FFF7FEFF 		bl	vListRemove
1064:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 1277              		.loc 1 1064 0
 1278 0050 BB68     		ldr	r3, [r7, #8]
 1279 0052 DA6A     		ldr	r2, [r3, #44]
 1280 0054 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1281 0058 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1282 005c 1B68     		ldr	r3, [r3]
 1283 005e 9A42     		cmp	r2, r3
 1284 0060 06D9     		bls	.L62
 1285              		.loc 1 1064 0 is_stmt 0 discriminator 1
 1286 0062 BB68     		ldr	r3, [r7, #8]
 1287 0064 DA6A     		ldr	r2, [r3, #44]
 1288 0066 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1289 006a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1290 006e 1A60     		str	r2, [r3]
 1291              	.L62:
 1292              		.loc 1 1064 0 discriminator 2
 1293 0070 BB68     		ldr	r3, [r7, #8]
 1294 0072 DA6A     		ldr	r2, [r3, #44]
 1295 0074 1346     		mov	r3, r2
 1296 0076 9B00     		lsls	r3, r3, #2
 1297 0078 1344     		add	r3, r3, r2
 1298 007a 9B00     		lsls	r3, r3, #2
 1299 007c 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 1300 0080 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 1301 0084 1A44     		add	r2, r2, r3
 1302 0086 BB68     		ldr	r3, [r7, #8]
 1303 0088 0433     		adds	r3, r3, #4
 1304 008a 1046     		mov	r0, r2
 1305 008c 1946     		mov	r1, r3
 1306 008e FFF7FEFF 		bl	vListInsertEnd
 1307 0092 08E0     		b	.L60
 1308              	.L61:
1065:FreeRTOS/Source/tasks.c **** 			}
1066:FreeRTOS/Source/tasks.c **** 			else
1067:FreeRTOS/Source/tasks.c **** 			{
1068:FreeRTOS/Source/tasks.c **** 				/* We cannot access the delayed or ready lists, so will hold this
1069:FreeRTOS/Source/tasks.c **** 				task pending until the scheduler is resumed, at which point a
1070:FreeRTOS/Source/tasks.c **** 				yield will be performed if necessary. */
1071:FreeRTOS/Source/tasks.c **** 				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1309              		.loc 1 1071 0 is_stmt 1
 1310 0094 BB68     		ldr	r3, [r7, #8]
 1311 0096 1833     		adds	r3, r3, #24
 1312 0098 40F20000 		movw	r0, #:lower16:xPendingReadyList
 1313 009c C0F20000 		movt	r0, #:upper16:xPendingReadyList
 1314 00a0 1946     		mov	r1, r3
 1315 00a2 FFF7FEFF 		bl	vListInsertEnd
 1316              	.L60:
1072:FreeRTOS/Source/tasks.c **** 			}
1073:FreeRTOS/Source/tasks.c **** 		}
1074:FreeRTOS/Source/tasks.c **** 
1075:FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 1317              		.loc 1 1075 0
 1318 00a6 FB68     		ldr	r3, [r7, #12]
1076:FreeRTOS/Source/tasks.c **** 	}
 1319              		.loc 1 1076 0
 1320 00a8 1846     		mov	r0, r3
 1321 00aa 1037     		adds	r7, r7, #16
 1322 00ac BD46     		mov	sp, r7
 1323              		@ sp needed
 1324 00ae 80BD     		pop	{r7, pc}
 1325              		.cfi_endproc
 1326              	.LFE119:
 1328              		.section	.rodata
 1329              		.align	2
 1330              	.LC0:
 1331 0000 49444C45 		.ascii	"IDLE\000"
 1331      00
 1332              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1333              		.align	2
 1334              		.global	vTaskStartScheduler
 1335              		.thumb
 1336              		.thumb_func
 1338              	vTaskStartScheduler:
 1339              	.LFB120:
1077:FreeRTOS/Source/tasks.c **** 
1078:FreeRTOS/Source/tasks.c **** #endif
1079:FreeRTOS/Source/tasks.c **** 
1080:FreeRTOS/Source/tasks.c **** 
1081:FreeRTOS/Source/tasks.c **** 
1082:FreeRTOS/Source/tasks.c **** 
1083:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1084:FreeRTOS/Source/tasks.c ****  * PUBLIC SCHEDULER CONTROL documented in task.h
1085:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1086:FreeRTOS/Source/tasks.c **** 
1087:FreeRTOS/Source/tasks.c **** 
1088:FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1089:FreeRTOS/Source/tasks.c **** {
 1340              		.loc 1 1089 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 8
 1343              		@ frame_needed = 1, uses_anonymous_args = 0
 1344 0000 80B5     		push	{r7, lr}
 1345              	.LCFI30:
 1346              		.cfi_def_cfa_offset 8
 1347              		.cfi_offset 7, -8
 1348              		.cfi_offset 14, -4
 1349 0002 86B0     		sub	sp, sp, #24
 1350              	.LCFI31:
 1351              		.cfi_def_cfa_offset 32
 1352 0004 04AF     		add	r7, sp, #16
 1353              	.LCFI32:
 1354              		.cfi_def_cfa 7, 16
1090:FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1091:FreeRTOS/Source/tasks.c **** 
1092:FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1093:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1094:FreeRTOS/Source/tasks.c **** 	{
1095:FreeRTOS/Source/tasks.c **** 		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
1096:FreeRTOS/Source/tasks.c **** 		be returned by the xTaskGetIdleTaskHandle() function. */
1097:FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
 1355              		.loc 1 1097 0
 1356 0006 0023     		movs	r3, #0
 1357 0008 0093     		str	r3, [sp]
 1358 000a 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1359 000e C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1360 0012 0193     		str	r3, [sp, #4]
 1361 0014 0023     		movs	r3, #0
 1362 0016 0293     		str	r3, [sp, #8]
 1363 0018 0023     		movs	r3, #0
 1364 001a 0393     		str	r3, [sp, #12]
 1365 001c 40F20000 		movw	r0, #:lower16:prvIdleTask
 1366 0020 C0F20000 		movt	r0, #:upper16:prvIdleTask
 1367 0024 40F20001 		movw	r1, #:lower16:.LC0
 1368 0028 C0F20001 		movt	r1, #:upper16:.LC0
 1369 002c 4FF48072 		mov	r2, #256
 1370 0030 0023     		movs	r3, #0
 1371 0032 FFF7FEFF 		bl	xTaskGenericCreate
 1372 0036 7860     		str	r0, [r7, #4]
1098:FreeRTOS/Source/tasks.c **** 	}
1099:FreeRTOS/Source/tasks.c **** 	#else
1100:FreeRTOS/Source/tasks.c **** 	{
1101:FreeRTOS/Source/tasks.c **** 		/* Create the idle task without storing its handle. */
1102:FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL
1103:FreeRTOS/Source/tasks.c **** 	}
1104:FreeRTOS/Source/tasks.c **** 	#endif
1105:FreeRTOS/Source/tasks.c **** 
1106:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1107:FreeRTOS/Source/tasks.c **** 	{
1108:FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1109:FreeRTOS/Source/tasks.c **** 		{
1110:FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1111:FreeRTOS/Source/tasks.c **** 		}
1112:FreeRTOS/Source/tasks.c **** 	}
1113:FreeRTOS/Source/tasks.c **** 	#endif
1114:FreeRTOS/Source/tasks.c **** 
1115:FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 1373              		.loc 1 1115 0
 1374 0038 7B68     		ldr	r3, [r7, #4]
 1375 003a 012B     		cmp	r3, #1
 1376 003c 13D1     		bne	.L64
1116:FreeRTOS/Source/tasks.c **** 	{
1117:FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1118:FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1119:FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1120:FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1121:FreeRTOS/Source/tasks.c **** 		starts to run.
1122:FreeRTOS/Source/tasks.c **** 
1123:FreeRTOS/Source/tasks.c **** 		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
1124:FreeRTOS/Source/tasks.c **** 		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
1125:FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
 1377              		.loc 1 1125 0
 1378              	@ 1125 "FreeRTOS/Source/tasks.c" 1
 1379 003e 4FF0BF00 			mov r0, #191								
 1380 0042 80F31188 		msr basepri, r0							
 1381              	
 1382              	@ 0 "" 2
1126:FreeRTOS/Source/tasks.c **** 
1127:FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1383              		.loc 1 1127 0
 1384              		.thumb
 1385 0046 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1386 004a C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1387 004e 0122     		movs	r2, #1
 1388 0050 1A60     		str	r2, [r3]
1128:FreeRTOS/Source/tasks.c **** 		xTickCount = ( portTickType ) 0U;
 1389              		.loc 1 1128 0
 1390 0052 40F20003 		movw	r3, #:lower16:xTickCount
 1391 0056 C0F20003 		movt	r3, #:upper16:xTickCount
 1392 005a 0022     		movs	r2, #0
 1393 005c 1A60     		str	r2, [r3]
1129:FreeRTOS/Source/tasks.c **** 
1130:FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1131:FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1132:FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1133:FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 1394              		.loc 1 1133 0
 1395 005e FFF7FEFF 		bl	init_us_timer
1134:FreeRTOS/Source/tasks.c **** 		
1135:FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1136:FreeRTOS/Source/tasks.c **** 		portable interface. */
1137:FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1396              		.loc 1 1137 0
 1397 0062 FFF7FEFF 		bl	xPortStartScheduler
 1398              	.L64:
1138:FreeRTOS/Source/tasks.c **** 		{
1139:FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1140:FreeRTOS/Source/tasks.c **** 			function will not return. */
1141:FreeRTOS/Source/tasks.c **** 		}
1142:FreeRTOS/Source/tasks.c **** 		else
1143:FreeRTOS/Source/tasks.c **** 		{
1144:FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1145:FreeRTOS/Source/tasks.c **** 		}
1146:FreeRTOS/Source/tasks.c **** 	}
1147:FreeRTOS/Source/tasks.c **** 
1148:FreeRTOS/Source/tasks.c **** 	/* This line will only be reached if the kernel could not be started. */
1149:FreeRTOS/Source/tasks.c **** 	configASSERT( xReturn );
1150:FreeRTOS/Source/tasks.c **** }
 1399              		.loc 1 1150 0
 1400 0066 0837     		adds	r7, r7, #8
 1401 0068 BD46     		mov	sp, r7
 1402              		@ sp needed
 1403 006a 80BD     		pop	{r7, pc}
 1404              		.cfi_endproc
 1405              	.LFE120:
 1407              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1408              		.align	2
 1409              		.global	vTaskEndScheduler
 1410              		.thumb
 1411              		.thumb_func
 1413              	vTaskEndScheduler:
 1414              	.LFB121:
1151:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1152:FreeRTOS/Source/tasks.c **** 
1153:FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1154:FreeRTOS/Source/tasks.c **** {
 1415              		.loc 1 1154 0
 1416              		.cfi_startproc
 1417              		@ args = 0, pretend = 0, frame = 0
 1418              		@ frame_needed = 1, uses_anonymous_args = 0
 1419 0000 80B5     		push	{r7, lr}
 1420              	.LCFI33:
 1421              		.cfi_def_cfa_offset 8
 1422              		.cfi_offset 7, -8
 1423              		.cfi_offset 14, -4
 1424 0002 00AF     		add	r7, sp, #0
 1425              	.LCFI34:
 1426              		.cfi_def_cfa_register 7
1155:FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1156:FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1157:FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1158:FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
 1427              		.loc 1 1158 0
 1428              	@ 1158 "FreeRTOS/Source/tasks.c" 1
 1429 0004 4FF0BF00 			mov r0, #191								
 1430 0008 80F31188 		msr basepri, r0							
 1431              	
 1432              	@ 0 "" 2
1159:FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1433              		.loc 1 1159 0
 1434              		.thumb
 1435 000c 40F20003 		movw	r3, #:lower16:xSchedulerRunning
 1436 0010 C0F20003 		movt	r3, #:upper16:xSchedulerRunning
 1437 0014 0022     		movs	r2, #0
 1438 0016 1A60     		str	r2, [r3]
1160:FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1439              		.loc 1 1160 0
 1440 0018 FFF7FEFF 		bl	vPortEndScheduler
1161:FreeRTOS/Source/tasks.c **** }
 1441              		.loc 1 1161 0
 1442 001c 80BD     		pop	{r7, pc}
 1443              		.cfi_endproc
 1444              	.LFE121:
 1446              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1447              		.align	2
 1448              		.global	vTaskSuspendAll
 1449              		.thumb
 1450              		.thumb_func
 1452              	vTaskSuspendAll:
 1453              	.LFB122:
1162:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1163:FreeRTOS/Source/tasks.c **** 
1164:FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1165:FreeRTOS/Source/tasks.c **** {
 1454              		.loc 1 1165 0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 1, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
 1459 0000 80B4     		push	{r7}
 1460              	.LCFI35:
 1461              		.cfi_def_cfa_offset 4
 1462              		.cfi_offset 7, -4
 1463 0002 00AF     		add	r7, sp, #0
 1464              	.LCFI36:
 1465              		.cfi_def_cfa_register 7
1166:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1167:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1168:FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 1466              		.loc 1 1168 0
 1467 0004 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1468 0008 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1469 000c 1B68     		ldr	r3, [r3]
 1470 000e 5A1C     		adds	r2, r3, #1
 1471 0010 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1472 0014 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1473 0018 1A60     		str	r2, [r3]
1169:FreeRTOS/Source/tasks.c **** }
 1474              		.loc 1 1169 0
 1475 001a BD46     		mov	sp, r7
 1476              		@ sp needed
 1477 001c 5DF8047B 		ldr	r7, [sp], #4
 1478 0020 7047     		bx	lr
 1479              		.cfi_endproc
 1480              	.LFE122:
 1482 0022 00BF     		.section	.text.xTaskResumeAll,"ax",%progbits
 1483              		.align	2
 1484              		.global	xTaskResumeAll
 1485              		.thumb
 1486              		.thumb_func
 1488              	xTaskResumeAll:
 1489              	.LFB123:
1170:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1171:FreeRTOS/Source/tasks.c **** 
1172:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskResumeAll( void )
1173:FreeRTOS/Source/tasks.c **** {
 1490              		.loc 1 1173 0
 1491              		.cfi_startproc
 1492              		@ args = 0, pretend = 0, frame = 8
 1493              		@ frame_needed = 1, uses_anonymous_args = 0
 1494 0000 90B5     		push	{r4, r7, lr}
 1495              	.LCFI37:
 1496              		.cfi_def_cfa_offset 12
 1497              		.cfi_offset 4, -12
 1498              		.cfi_offset 7, -8
 1499              		.cfi_offset 14, -4
 1500 0002 83B0     		sub	sp, sp, #12
 1501              	.LCFI38:
 1502              		.cfi_def_cfa_offset 24
 1503 0004 00AF     		add	r7, sp, #0
 1504              	.LCFI39:
 1505              		.cfi_def_cfa_register 7
1174:FreeRTOS/Source/tasks.c **** register tskTCB *pxTCB;
1175:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xAlreadyYielded = pdFALSE;
 1506              		.loc 1 1175 0
 1507 0006 0023     		movs	r3, #0
 1508 0008 7B60     		str	r3, [r7, #4]
1176:FreeRTOS/Source/tasks.c **** 
1177:FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
1178:FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
1179:FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
1180:FreeRTOS/Source/tasks.c **** 
1181:FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
1182:FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
1183:FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
1184:FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
1185:FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
1186:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1509              		.loc 1 1186 0
 1510 000a FFF7FEFF 		bl	vPortEnterCritical
1187:FreeRTOS/Source/tasks.c **** 	{
1188:FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 1511              		.loc 1 1188 0
 1512 000e 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1513 0012 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1514 0016 1B68     		ldr	r3, [r3]
 1515 0018 5A1E     		subs	r2, r3, #1
 1516 001a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1517 001e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1518 0022 1A60     		str	r2, [r3]
1189:FreeRTOS/Source/tasks.c **** 
1190:FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 1519              		.loc 1 1190 0
 1520 0024 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 1521 0028 C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 1522 002c 1B68     		ldr	r3, [r3]
 1523 002e 002B     		cmp	r3, #0
 1524 0030 79D1     		bne	.L69
1191:FreeRTOS/Source/tasks.c **** 		{
1192:FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
 1525              		.loc 1 1192 0
 1526 0032 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1527 0036 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1528 003a 1B68     		ldr	r3, [r3]
 1529 003c 002B     		cmp	r3, #0
 1530 003e 72D0     		beq	.L69
 1531              	.LBB3:
1193:FreeRTOS/Source/tasks.c **** 			{
1194:FreeRTOS/Source/tasks.c **** 				portBASE_TYPE xYieldRequired = pdFALSE;
 1532              		.loc 1 1194 0
 1533 0040 0023     		movs	r3, #0
 1534 0042 3B60     		str	r3, [r7]
1195:FreeRTOS/Source/tasks.c **** 
1196:FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
1197:FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
1198:FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
 1535              		.loc 1 1198 0
 1536 0044 36E0     		b	.L70
 1537              	.L72:
1199:FreeRTOS/Source/tasks.c **** 				{
1200:FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
 1538              		.loc 1 1200 0
 1539 0046 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1540 004a C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1541 004e DB68     		ldr	r3, [r3, #12]
 1542 0050 DC68     		ldr	r4, [r3, #12]
1201:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xEventListItem ) );
 1543              		.loc 1 1201 0
 1544 0052 04F11803 		add	r3, r4, #24
 1545 0056 1846     		mov	r0, r3
 1546 0058 FFF7FEFF 		bl	vListRemove
1202:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 1547              		.loc 1 1202 0
 1548 005c 231D     		adds	r3, r4, #4
 1549 005e 1846     		mov	r0, r3
 1550 0060 FFF7FEFF 		bl	vListRemove
1203:FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyQueue( pxTCB );
 1551              		.loc 1 1203 0
 1552 0064 E26A     		ldr	r2, [r4, #44]
 1553 0066 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1554 006a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1555 006e 1B68     		ldr	r3, [r3]
 1556 0070 9A42     		cmp	r2, r3
 1557 0072 05D9     		bls	.L71
 1558              		.loc 1 1203 0 is_stmt 0 discriminator 1
 1559 0074 E26A     		ldr	r2, [r4, #44]
 1560 0076 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 1561 007a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 1562 007e 1A60     		str	r2, [r3]
 1563              	.L71:
 1564              		.loc 1 1203 0 discriminator 2
 1565 0080 E26A     		ldr	r2, [r4, #44]
 1566 0082 1346     		mov	r3, r2
 1567 0084 9B00     		lsls	r3, r3, #2
 1568 0086 1344     		add	r3, r3, r2
 1569 0088 9B00     		lsls	r3, r3, #2
 1570 008a 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 1571 008e C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 1572 0092 1A44     		add	r2, r2, r3
 1573 0094 231D     		adds	r3, r4, #4
 1574 0096 1046     		mov	r0, r2
 1575 0098 1946     		mov	r1, r3
 1576 009a FFF7FEFF 		bl	vListInsertEnd
1204:FreeRTOS/Source/tasks.c **** 
1205:FreeRTOS/Source/tasks.c **** 					/* If we have moved a task that has a priority higher than
1206:FreeRTOS/Source/tasks.c **** 					the current task then we should yield. */
1207:FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1577              		.loc 1 1207 0 is_stmt 1 discriminator 2
 1578 009e E26A     		ldr	r2, [r4, #44]
 1579 00a0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 1580 00a4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 1581 00a8 1B68     		ldr	r3, [r3]
 1582 00aa DB6A     		ldr	r3, [r3, #44]
 1583 00ac 9A42     		cmp	r2, r3
 1584 00ae 01D3     		bcc	.L70
1208:FreeRTOS/Source/tasks.c **** 					{
1209:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1585              		.loc 1 1209 0
 1586 00b0 0123     		movs	r3, #1
 1587 00b2 3B60     		str	r3, [r7]
 1588              	.L70:
1198:FreeRTOS/Source/tasks.c **** 				{
 1589              		.loc 1 1198 0 discriminator 1
 1590 00b4 40F20003 		movw	r3, #:lower16:xPendingReadyList
 1591 00b8 C0F20003 		movt	r3, #:upper16:xPendingReadyList
 1592 00bc 1B68     		ldr	r3, [r3]
 1593 00be 002B     		cmp	r3, #0
 1594 00c0 C1D1     		bne	.L72
1210:FreeRTOS/Source/tasks.c **** 					}
1211:FreeRTOS/Source/tasks.c **** 				}
1212:FreeRTOS/Source/tasks.c **** 
1213:FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
1214:FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does not
1215:FreeRTOS/Source/tasks.c **** 				slip, and that any delayed tasks are resumed at the correct time. */
1216:FreeRTOS/Source/tasks.c **** 				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1595              		.loc 1 1216 0
 1596 00c2 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1597 00c6 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1598 00ca 1B68     		ldr	r3, [r3]
 1599 00cc 002B     		cmp	r3, #0
 1600 00ce 16D0     		beq	.L73
1217:FreeRTOS/Source/tasks.c **** 				{
1218:FreeRTOS/Source/tasks.c **** 					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
 1601              		.loc 1 1218 0
 1602 00d0 0CE0     		b	.L74
 1603              	.L75:
1219:FreeRTOS/Source/tasks.c **** 					{
1220:FreeRTOS/Source/tasks.c **** 						vTaskIncrementTick();
 1604              		.loc 1 1220 0
 1605 00d2 FFF7FEFF 		bl	vTaskIncrementTick
1221:FreeRTOS/Source/tasks.c **** 						--uxMissedTicks;
 1606              		.loc 1 1221 0
 1607 00d6 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1608 00da C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1609 00de 1B68     		ldr	r3, [r3]
 1610 00e0 5A1E     		subs	r2, r3, #1
 1611 00e2 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1612 00e6 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1613 00ea 1A60     		str	r2, [r3]
 1614              	.L74:
1218:FreeRTOS/Source/tasks.c **** 					{
 1615              		.loc 1 1218 0 discriminator 1
 1616 00ec 40F20003 		movw	r3, #:lower16:uxMissedTicks
 1617 00f0 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 1618 00f4 1B68     		ldr	r3, [r3]
 1619 00f6 002B     		cmp	r3, #0
 1620 00f8 EBD1     		bne	.L75
1222:FreeRTOS/Source/tasks.c **** 					}
1223:FreeRTOS/Source/tasks.c **** 
1224:FreeRTOS/Source/tasks.c **** 					/* As we have processed some ticks it is appropriate to yield
1225:FreeRTOS/Source/tasks.c **** 					to ensure the highest priority task that is ready to run is
1226:FreeRTOS/Source/tasks.c **** 					the task actually running. */
1227:FreeRTOS/Source/tasks.c **** 					#if configUSE_PREEMPTION == 1
1228:FreeRTOS/Source/tasks.c **** 					{
1229:FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1621              		.loc 1 1229 0
 1622 00fa 0123     		movs	r3, #1
 1623 00fc 3B60     		str	r3, [r7]
 1624              	.L73:
1230:FreeRTOS/Source/tasks.c **** 					}
1231:FreeRTOS/Source/tasks.c **** 					#endif
1232:FreeRTOS/Source/tasks.c **** 				}
1233:FreeRTOS/Source/tasks.c **** 
1234:FreeRTOS/Source/tasks.c **** 				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
 1625              		.loc 1 1234 0
 1626 00fe 3B68     		ldr	r3, [r7]
 1627 0100 012B     		cmp	r3, #1
 1628 0102 06D0     		beq	.L76
 1629              		.loc 1 1234 0 is_stmt 0 discriminator 1
 1630 0104 40F20003 		movw	r3, #:lower16:xMissedYield
 1631 0108 C0F20003 		movt	r3, #:upper16:xMissedYield
 1632 010c 1B68     		ldr	r3, [r3]
 1633 010e 012B     		cmp	r3, #1
 1634 0110 09D1     		bne	.L69
 1635              	.L76:
1235:FreeRTOS/Source/tasks.c **** 				{
1236:FreeRTOS/Source/tasks.c **** 					xAlreadyYielded = pdTRUE;
 1636              		.loc 1 1236 0 is_stmt 1
 1637 0112 0123     		movs	r3, #1
 1638 0114 7B60     		str	r3, [r7, #4]
1237:FreeRTOS/Source/tasks.c **** 					xMissedYield = pdFALSE;
 1639              		.loc 1 1237 0
 1640 0116 40F20003 		movw	r3, #:lower16:xMissedYield
 1641 011a C0F20003 		movt	r3, #:upper16:xMissedYield
 1642 011e 0022     		movs	r2, #0
 1643 0120 1A60     		str	r2, [r3]
1238:FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 1644              		.loc 1 1238 0
 1645 0122 FFF7FEFF 		bl	vPortYieldFromISR
 1646              	.L69:
 1647              	.LBE3:
1239:FreeRTOS/Source/tasks.c **** 				}
1240:FreeRTOS/Source/tasks.c **** 			}
1241:FreeRTOS/Source/tasks.c **** 		}
1242:FreeRTOS/Source/tasks.c **** 	}
1243:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1648              		.loc 1 1243 0
 1649 0126 FFF7FEFF 		bl	vPortExitCritical
1244:FreeRTOS/Source/tasks.c **** 
1245:FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 1650              		.loc 1 1245 0
 1651 012a 7B68     		ldr	r3, [r7, #4]
1246:FreeRTOS/Source/tasks.c **** }
 1652              		.loc 1 1246 0
 1653 012c 1846     		mov	r0, r3
 1654 012e 0C37     		adds	r7, r7, #12
 1655 0130 BD46     		mov	sp, r7
 1656              		@ sp needed
 1657 0132 90BD     		pop	{r4, r7, pc}
 1658              		.cfi_endproc
 1659              	.LFE123:
 1661              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1662              		.align	2
 1663              		.global	xTaskGetTickCount
 1664              		.thumb
 1665              		.thumb_func
 1667              	xTaskGetTickCount:
 1668              	.LFB124:
1247:FreeRTOS/Source/tasks.c **** 
1248:FreeRTOS/Source/tasks.c **** 
1249:FreeRTOS/Source/tasks.c **** 
1250:FreeRTOS/Source/tasks.c **** 
1251:FreeRTOS/Source/tasks.c **** 
1252:FreeRTOS/Source/tasks.c **** 
1253:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1254:FreeRTOS/Source/tasks.c ****  * PUBLIC TASK UTILITIES documented in task.h
1255:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1256:FreeRTOS/Source/tasks.c **** 
1257:FreeRTOS/Source/tasks.c **** 
1258:FreeRTOS/Source/tasks.c **** 
1259:FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCount( void )
1260:FreeRTOS/Source/tasks.c **** {
 1669              		.loc 1 1260 0
 1670              		.cfi_startproc
 1671              		@ args = 0, pretend = 0, frame = 8
 1672              		@ frame_needed = 1, uses_anonymous_args = 0
 1673 0000 80B5     		push	{r7, lr}
 1674              	.LCFI40:
 1675              		.cfi_def_cfa_offset 8
 1676              		.cfi_offset 7, -8
 1677              		.cfi_offset 14, -4
 1678 0002 82B0     		sub	sp, sp, #8
 1679              	.LCFI41:
 1680              		.cfi_def_cfa_offset 16
 1681 0004 00AF     		add	r7, sp, #0
 1682              	.LCFI42:
 1683              		.cfi_def_cfa_register 7
1261:FreeRTOS/Source/tasks.c **** portTickType xTicks;
1262:FreeRTOS/Source/tasks.c **** 
1263:FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
1264:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 1684              		.loc 1 1264 0
 1685 0006 FFF7FEFF 		bl	vPortEnterCritical
1265:FreeRTOS/Source/tasks.c **** 	{
1266:FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 1686              		.loc 1 1266 0
 1687 000a 40F20003 		movw	r3, #:lower16:xTickCount
 1688 000e C0F20003 		movt	r3, #:upper16:xTickCount
 1689 0012 1B68     		ldr	r3, [r3]
 1690 0014 7B60     		str	r3, [r7, #4]
1267:FreeRTOS/Source/tasks.c **** 	}
1268:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 1691              		.loc 1 1268 0
 1692 0016 FFF7FEFF 		bl	vPortExitCritical
1269:FreeRTOS/Source/tasks.c **** 
1270:FreeRTOS/Source/tasks.c **** 	return xTicks;
 1693              		.loc 1 1270 0
 1694 001a 7B68     		ldr	r3, [r7, #4]
1271:FreeRTOS/Source/tasks.c **** }
 1695              		.loc 1 1271 0
 1696 001c 1846     		mov	r0, r3
 1697 001e 0837     		adds	r7, r7, #8
 1698 0020 BD46     		mov	sp, r7
 1699              		@ sp needed
 1700 0022 80BD     		pop	{r7, pc}
 1701              		.cfi_endproc
 1702              	.LFE124:
 1704              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1705              		.align	2
 1706              		.global	xTaskGetTickCountFromISR
 1707              		.thumb
 1708              		.thumb_func
 1710              	xTaskGetTickCountFromISR:
 1711              	.LFB125:
1272:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1273:FreeRTOS/Source/tasks.c **** 
1274:FreeRTOS/Source/tasks.c **** portTickType xTaskGetTickCountFromISR( void )
1275:FreeRTOS/Source/tasks.c **** {
 1712              		.loc 1 1275 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 8
 1715              		@ frame_needed = 1, uses_anonymous_args = 0
 1716              		@ link register save eliminated.
 1717 0000 80B4     		push	{r7}
 1718              	.LCFI43:
 1719              		.cfi_def_cfa_offset 4
 1720              		.cfi_offset 7, -4
 1721 0002 83B0     		sub	sp, sp, #12
 1722              	.LCFI44:
 1723              		.cfi_def_cfa_offset 16
 1724 0004 00AF     		add	r7, sp, #0
 1725              	.LCFI45:
 1726              		.cfi_def_cfa_register 7
1276:FreeRTOS/Source/tasks.c **** portTickType xReturn;
1277:FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxSavedInterruptStatus;
1278:FreeRTOS/Source/tasks.c **** 
1279:FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1727              		.loc 1 1279 0
 1728 0006 0023     		movs	r3, #0
 1729 0008 7B60     		str	r3, [r7, #4]
 1730              	@ 1279 "FreeRTOS/Source/tasks.c" 1
 1731 000a 4FF0BF00 			mov r0, #191								
 1732 000e 80F31188 		msr basepri, r0							
 1733              	
 1734              	@ 0 "" 2
1280:FreeRTOS/Source/tasks.c **** 	xReturn = xTickCount;
 1735              		.loc 1 1280 0
 1736              		.thumb
 1737 0012 40F20003 		movw	r3, #:lower16:xTickCount
 1738 0016 C0F20003 		movt	r3, #:upper16:xTickCount
 1739 001a 1B68     		ldr	r3, [r3]
 1740 001c 3B60     		str	r3, [r7]
1281:FreeRTOS/Source/tasks.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 1741              		.loc 1 1281 0
 1742              	@ 1281 "FreeRTOS/Source/tasks.c" 1
 1743 001e 4FF00000 			mov r0, #0					
 1744 0022 80F31188 		msr basepri, r0				
 1745              	
 1746              	@ 0 "" 2
1282:FreeRTOS/Source/tasks.c **** 
1283:FreeRTOS/Source/tasks.c **** 	return xReturn;
 1747              		.loc 1 1283 0
 1748              		.thumb
 1749 0026 3B68     		ldr	r3, [r7]
1284:FreeRTOS/Source/tasks.c **** }
 1750              		.loc 1 1284 0
 1751 0028 1846     		mov	r0, r3
 1752 002a 0C37     		adds	r7, r7, #12
 1753 002c BD46     		mov	sp, r7
 1754              		@ sp needed
 1755 002e 5DF8047B 		ldr	r7, [sp], #4
 1756 0032 7047     		bx	lr
 1757              		.cfi_endproc
 1758              	.LFE125:
 1760              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1761              		.align	2
 1762              		.global	uxTaskGetNumberOfTasks
 1763              		.thumb
 1764              		.thumb_func
 1766              	uxTaskGetNumberOfTasks:
 1767              	.LFB126:
1285:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1286:FreeRTOS/Source/tasks.c **** 
1287:FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
1288:FreeRTOS/Source/tasks.c **** {
 1768              		.loc 1 1288 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 0
 1771              		@ frame_needed = 1, uses_anonymous_args = 0
 1772              		@ link register save eliminated.
 1773 0000 80B4     		push	{r7}
 1774              	.LCFI46:
 1775              		.cfi_def_cfa_offset 4
 1776              		.cfi_offset 7, -4
 1777 0002 00AF     		add	r7, sp, #0
 1778              	.LCFI47:
 1779              		.cfi_def_cfa_register 7
1289:FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
1290:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE. */
1291:FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 1780              		.loc 1 1291 0
 1781 0004 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 1782 0008 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 1783 000c 1B68     		ldr	r3, [r3]
1292:FreeRTOS/Source/tasks.c **** }
 1784              		.loc 1 1292 0
 1785 000e 1846     		mov	r0, r3
 1786 0010 BD46     		mov	sp, r7
 1787              		@ sp needed
 1788 0012 5DF8047B 		ldr	r7, [sp], #4
 1789 0016 7047     		bx	lr
 1790              		.cfi_endproc
 1791              	.LFE126:
 1793              		.section	.rodata
 1794 0005 000000   		.align	2
 1795              	.LC1:
 1796 0008 0D0A00   		.ascii	"\015\012\000"
 1797              		.section	.text.vTaskGetRunTimeStats,"ax",%progbits
 1798              		.align	2
 1799              		.global	vTaskGetRunTimeStats
 1800              		.thumb
 1801              		.thumb_func
 1803              	vTaskGetRunTimeStats:
 1804              	.LFB127:
1293:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1294:FreeRTOS/Source/tasks.c **** 
1295:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_pcTaskGetTaskName == 1 )
1296:FreeRTOS/Source/tasks.c **** 
1297:FreeRTOS/Source/tasks.c **** 	signed char *pcTaskGetTaskName( xTaskHandle xTaskToQuery )
1298:FreeRTOS/Source/tasks.c **** 	{
1299:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
1300:FreeRTOS/Source/tasks.c **** 
1301:FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then the name of the calling task is being queried. */
1302:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToQuery );
1303:FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1304:FreeRTOS/Source/tasks.c **** 		return &( pxTCB->pcTaskName[ 0 ] );
1305:FreeRTOS/Source/tasks.c **** 	}
1306:FreeRTOS/Source/tasks.c **** 
1307:FreeRTOS/Source/tasks.c **** #endif
1308:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1309:FreeRTOS/Source/tasks.c **** 
1310:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1311:FreeRTOS/Source/tasks.c **** 
1312:FreeRTOS/Source/tasks.c **** 	void vTaskList( signed char *pcWriteBuffer )
1313:FreeRTOS/Source/tasks.c **** 	{
1314:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1315:FreeRTOS/Source/tasks.c **** 
1316:FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1317:FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1318:FreeRTOS/Source/tasks.c **** 
1319:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1320:FreeRTOS/Source/tasks.c **** 		{
1321:FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB and
1322:FreeRTOS/Source/tasks.c **** 			report the task name, state and stack high water mark. */
1323:FreeRTOS/Source/tasks.c **** 
1324:FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
1325:FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
1326:FreeRTOS/Source/tasks.c **** 
1327:FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
1328:FreeRTOS/Source/tasks.c **** 
1329:FreeRTOS/Source/tasks.c **** 			do
1330:FreeRTOS/Source/tasks.c **** 			{
1331:FreeRTOS/Source/tasks.c **** 				uxQueue--;
1332:FreeRTOS/Source/tasks.c **** 
1333:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
1334:FreeRTOS/Source/tasks.c **** 				{
1335:FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueue ] ), tsk
1336:FreeRTOS/Source/tasks.c **** 				}
1337:FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
1338:FreeRTOS/Source/tasks.c **** 
1339:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
1340:FreeRTOS/Source/tasks.c **** 			{
1341:FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, tskBLOCKED_CHAR );
1342:FreeRTOS/Source/tasks.c **** 			}
1343:FreeRTOS/Source/tasks.c **** 
1344:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
1345:FreeRTOS/Source/tasks.c **** 			{
1346:FreeRTOS/Source/tasks.c **** 				prvListTaskWithinSingleList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, tskBLOCKED_C
1347:FreeRTOS/Source/tasks.c **** 			}
1348:FreeRTOS/Source/tasks.c **** 
1349:FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
1350:FreeRTOS/Source/tasks.c **** 			{
1351:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
1352:FreeRTOS/Source/tasks.c **** 				{
1353:FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xTasksWaitingTermination, tskDELETED_CHAR );
1354:FreeRTOS/Source/tasks.c **** 				}
1355:FreeRTOS/Source/tasks.c **** 			}
1356:FreeRTOS/Source/tasks.c **** 			#endif
1357:FreeRTOS/Source/tasks.c **** 
1358:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1359:FreeRTOS/Source/tasks.c **** 			{
1360:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
1361:FreeRTOS/Source/tasks.c **** 				{
1362:FreeRTOS/Source/tasks.c **** 					prvListTaskWithinSingleList( pcWriteBuffer, &xSuspendedTaskList, tskSUSPENDED_CHAR );
1363:FreeRTOS/Source/tasks.c **** 				}
1364:FreeRTOS/Source/tasks.c **** 			}
1365:FreeRTOS/Source/tasks.c **** 			#endif
1366:FreeRTOS/Source/tasks.c **** 		}
1367:FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
1368:FreeRTOS/Source/tasks.c **** 	}
1369:FreeRTOS/Source/tasks.c **** 
1370:FreeRTOS/Source/tasks.c **** #endif
1371:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1372:FreeRTOS/Source/tasks.c **** 
1373:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
1374:FreeRTOS/Source/tasks.c **** 
1375:FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( signed char *pcWriteBuffer )
1376:FreeRTOS/Source/tasks.c **** 	{
 1805              		.loc 1 1376 0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 16
 1808              		@ frame_needed = 1, uses_anonymous_args = 0
 1809 0000 90B5     		push	{r4, r7, lr}
 1810              	.LCFI48:
 1811              		.cfi_def_cfa_offset 12
 1812              		.cfi_offset 4, -12
 1813              		.cfi_offset 7, -8
 1814              		.cfi_offset 14, -4
 1815 0002 85B0     		sub	sp, sp, #20
 1816              	.LCFI49:
 1817              		.cfi_def_cfa_offset 32
 1818 0004 00AF     		add	r7, sp, #0
 1819              	.LCFI50:
 1820              		.cfi_def_cfa_register 7
 1821 0006 7860     		str	r0, [r7, #4]
1377:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxQueue;
1378:FreeRTOS/Source/tasks.c **** 	unsigned long ulTotalRunTime;
1379:FreeRTOS/Source/tasks.c **** 
1380:FreeRTOS/Source/tasks.c **** 		/* This is a VERY costly function that should be used for debug only.
1381:FreeRTOS/Source/tasks.c **** 		It leaves interrupts disabled for a LONG time. */
1382:FreeRTOS/Source/tasks.c **** 
1383:FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1822              		.loc 1 1383 0
 1823 0008 FFF7FEFF 		bl	vTaskSuspendAll
1384:FreeRTOS/Source/tasks.c **** 		{
1385:FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1386:FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
1387:FreeRTOS/Source/tasks.c **** 			#else
1388:FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 1824              		.loc 1 1388 0
 1825 000c FFF7FEFF 		bl	get_us_time
 1826 0010 0246     		mov	r2, r0
 1827 0012 0B46     		mov	r3, r1
 1828 0014 1346     		mov	r3, r2
 1829 0016 BB60     		str	r3, [r7, #8]
1389:FreeRTOS/Source/tasks.c **** 			#endif
1390:FreeRTOS/Source/tasks.c **** 
1391:FreeRTOS/Source/tasks.c **** 			/* Divide ulTotalRunTime by 100 to make the percentage caluclations
1392:FreeRTOS/Source/tasks.c **** 			simpler in the prvGenerateRunTimeStatsForTasksInList() function. */
1393:FreeRTOS/Source/tasks.c **** 			ulTotalRunTime /= 100UL;
 1830              		.loc 1 1393 0
 1831 0018 BA68     		ldr	r2, [r7, #8]
 1832 001a 48F21F53 		movw	r3, #34079
 1833 001e C5F2EB13 		movt	r3, 20971
 1834 0022 A3FB0213 		umull	r1, r3, r3, r2
 1835 0026 5B09     		lsrs	r3, r3, #5
 1836 0028 BB60     		str	r3, [r7, #8]
1394:FreeRTOS/Source/tasks.c **** 			
1395:FreeRTOS/Source/tasks.c **** 			/* Run through all the lists that could potentially contain a TCB,
1396:FreeRTOS/Source/tasks.c **** 			generating a table of run timer percentages in the provided
1397:FreeRTOS/Source/tasks.c **** 			buffer. */
1398:FreeRTOS/Source/tasks.c **** 
1399:FreeRTOS/Source/tasks.c **** 			*pcWriteBuffer = ( signed char ) 0x00;
 1837              		.loc 1 1399 0
 1838 002a 7B68     		ldr	r3, [r7, #4]
 1839 002c 0022     		movs	r2, #0
 1840 002e 1A70     		strb	r2, [r3]
1400:FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( const char * ) "\r\n" );
 1841              		.loc 1 1400 0
 1842 0030 7C68     		ldr	r4, [r7, #4]
 1843 0032 2046     		mov	r0, r4
 1844 0034 FFF7FEFF 		bl	strlen
 1845 0038 0346     		mov	r3, r0
 1846 003a E218     		adds	r2, r4, r3
 1847 003c 40F20003 		movw	r3, #:lower16:.LC1
 1848 0040 C0F20003 		movt	r3, #:upper16:.LC1
 1849 0044 1988     		ldrh	r1, [r3]	@ unaligned
 1850 0046 9B78     		ldrb	r3, [r3, #2]
 1851 0048 1180     		strh	r1, [r2]	@ unaligned
 1852 004a 9370     		strb	r3, [r2, #2]
1401:FreeRTOS/Source/tasks.c **** 
1402:FreeRTOS/Source/tasks.c **** 			uxQueue = uxTopUsedPriority + ( unsigned portBASE_TYPE ) 1U;
 1853              		.loc 1 1402 0
 1854 004c 40F20003 		movw	r3, #:lower16:uxTopUsedPriority
 1855 0050 C0F20003 		movt	r3, #:upper16:uxTopUsedPriority
 1856 0054 1B68     		ldr	r3, [r3]
 1857 0056 0133     		adds	r3, r3, #1
 1858 0058 FB60     		str	r3, [r7, #12]
 1859              	.L86:
1403:FreeRTOS/Source/tasks.c **** 
1404:FreeRTOS/Source/tasks.c **** 			do
1405:FreeRTOS/Source/tasks.c **** 			{
1406:FreeRTOS/Source/tasks.c **** 				uxQueue--;
 1860              		.loc 1 1406 0
 1861 005a FB68     		ldr	r3, [r7, #12]
 1862 005c 013B     		subs	r3, r3, #1
 1863 005e FB60     		str	r3, [r7, #12]
1407:FreeRTOS/Source/tasks.c **** 
1408:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxQueue ] ) ) == pdFALSE )
 1864              		.loc 1 1408 0
 1865 0060 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 1866 0064 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 1867 0068 F968     		ldr	r1, [r7, #12]
 1868 006a 0B46     		mov	r3, r1
 1869 006c 9B00     		lsls	r3, r3, #2
 1870 006e 0B44     		add	r3, r3, r1
 1871 0070 9B00     		lsls	r3, r3, #2
 1872 0072 1344     		add	r3, r3, r2
 1873 0074 1B68     		ldr	r3, [r3]
 1874 0076 002B     		cmp	r3, #0
 1875 0078 0FD0     		beq	.L85
1409:FreeRTOS/Source/tasks.c **** 				{
1410:FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) &( pxReadyTasksLists[ uxQueu
 1876              		.loc 1 1410 0
 1877 007a FA68     		ldr	r2, [r7, #12]
 1878 007c 1346     		mov	r3, r2
 1879 007e 9B00     		lsls	r3, r3, #2
 1880 0080 1344     		add	r3, r3, r2
 1881 0082 9B00     		lsls	r3, r3, #2
 1882 0084 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 1883 0088 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 1884 008c 1344     		add	r3, r3, r2
 1885 008e 7868     		ldr	r0, [r7, #4]
 1886 0090 1946     		mov	r1, r3
 1887 0092 BA68     		ldr	r2, [r7, #8]
 1888 0094 5223     		movs	r3, #82
 1889 0096 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1890              	.L85:
1411:FreeRTOS/Source/tasks.c **** 				}
1412:FreeRTOS/Source/tasks.c **** 			}while( uxQueue > ( unsigned short ) tskIDLE_PRIORITY );
 1891              		.loc 1 1412 0
 1892 009a FB68     		ldr	r3, [r7, #12]
 1893 009c 002B     		cmp	r3, #0
 1894 009e DCD1     		bne	.L86
1413:FreeRTOS/Source/tasks.c **** 
1414:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) == pdFALSE )
 1895              		.loc 1 1414 0
 1896 00a0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1897 00a4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1898 00a8 1B68     		ldr	r3, [r3]
 1899 00aa 1B68     		ldr	r3, [r3]
 1900 00ac 002B     		cmp	r3, #0
 1901 00ae 0AD0     		beq	.L87
1415:FreeRTOS/Source/tasks.c **** 			{
1416:FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxDelayedTaskList, ulTotalRun
 1902              		.loc 1 1416 0
 1903 00b0 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 1904 00b4 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 1905 00b8 1B68     		ldr	r3, [r3]
 1906 00ba 7868     		ldr	r0, [r7, #4]
 1907 00bc 1946     		mov	r1, r3
 1908 00be BA68     		ldr	r2, [r7, #8]
 1909 00c0 4223     		movs	r3, #66
 1910 00c2 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1911              	.L87:
1417:FreeRTOS/Source/tasks.c **** 			}
1418:FreeRTOS/Source/tasks.c **** 
1419:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxOverflowDelayedTaskList ) == pdFALSE )
 1912              		.loc 1 1419 0
 1913 00c6 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1914 00ca C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1915 00ce 1B68     		ldr	r3, [r3]
 1916 00d0 1B68     		ldr	r3, [r3]
 1917 00d2 002B     		cmp	r3, #0
 1918 00d4 0AD0     		beq	.L88
1420:FreeRTOS/Source/tasks.c **** 			{
1421:FreeRTOS/Source/tasks.c **** 				prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, ( xList * ) pxOverflowDelayedTaskList, ul
 1919              		.loc 1 1421 0
 1920 00d6 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 1921 00da C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 1922 00de 1B68     		ldr	r3, [r3]
 1923 00e0 7868     		ldr	r0, [r7, #4]
 1924 00e2 1946     		mov	r1, r3
 1925 00e4 BA68     		ldr	r2, [r7, #8]
 1926 00e6 4223     		movs	r3, #66
 1927 00e8 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1928              	.L88:
1422:FreeRTOS/Source/tasks.c **** 			}
1423:FreeRTOS/Source/tasks.c **** 
1424:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1425:FreeRTOS/Source/tasks.c **** 			{
1426:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xTasksWaitingTermination ) == pdFALSE )
 1929              		.loc 1 1426 0
 1930 00ec 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 1931 00f0 C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 1932 00f4 1B68     		ldr	r3, [r3]
 1933 00f6 002B     		cmp	r3, #0
 1934 00f8 08D0     		beq	.L89
1427:FreeRTOS/Source/tasks.c **** 				{
1428:FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xTasksWaitingTermination, ulTotalRunTim
 1935              		.loc 1 1428 0
 1936 00fa 7868     		ldr	r0, [r7, #4]
 1937 00fc 40F20001 		movw	r1, #:lower16:xTasksWaitingTermination
 1938 0100 C0F20001 		movt	r1, #:upper16:xTasksWaitingTermination
 1939 0104 BA68     		ldr	r2, [r7, #8]
 1940 0106 4423     		movs	r3, #68
 1941 0108 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1942              	.L89:
1429:FreeRTOS/Source/tasks.c **** 				}
1430:FreeRTOS/Source/tasks.c **** 			}
1431:FreeRTOS/Source/tasks.c **** 			#endif
1432:FreeRTOS/Source/tasks.c **** 
1433:FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1434:FreeRTOS/Source/tasks.c **** 			{
1435:FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( &xSuspendedTaskList ) == pdFALSE )
 1943              		.loc 1 1435 0
 1944 010c 40F20003 		movw	r3, #:lower16:xSuspendedTaskList
 1945 0110 C0F20003 		movt	r3, #:upper16:xSuspendedTaskList
 1946 0114 1B68     		ldr	r3, [r3]
 1947 0116 002B     		cmp	r3, #0
 1948 0118 08D0     		beq	.L90
1436:FreeRTOS/Source/tasks.c **** 				{
1437:FreeRTOS/Source/tasks.c **** 					prvGenerateRunTimeStatsForTasksInList( pcWriteBuffer, &xSuspendedTaskList, ulTotalRunTime, tsk
 1949              		.loc 1 1437 0
 1950 011a 7868     		ldr	r0, [r7, #4]
 1951 011c 40F20001 		movw	r1, #:lower16:xSuspendedTaskList
 1952 0120 C0F20001 		movt	r1, #:upper16:xSuspendedTaskList
 1953 0124 BA68     		ldr	r2, [r7, #8]
 1954 0126 5323     		movs	r3, #83
 1955 0128 FFF7FEFF 		bl	prvGenerateRunTimeStatsForTasksInList
 1956              	.L90:
1438:FreeRTOS/Source/tasks.c **** 				}
1439:FreeRTOS/Source/tasks.c **** 			}
1440:FreeRTOS/Source/tasks.c **** 			#endif
1441:FreeRTOS/Source/tasks.c **** 		}
1442:FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
 1957              		.loc 1 1442 0
 1958 012c FFF7FEFF 		bl	xTaskResumeAll
1443:FreeRTOS/Source/tasks.c **** 	}
 1959              		.loc 1 1443 0
 1960 0130 1437     		adds	r7, r7, #20
 1961 0132 BD46     		mov	sp, r7
 1962              		@ sp needed
 1963 0134 90BD     		pop	{r4, r7, pc}
 1964              		.cfi_endproc
 1965              	.LFE127:
 1967 0136 00BF     		.section	.text.xTaskGetIdleTaskHandle,"ax",%progbits
 1968              		.align	2
 1969              		.global	xTaskGetIdleTaskHandle
 1970              		.thumb
 1971              		.thumb_func
 1973              	xTaskGetIdleTaskHandle:
 1974              	.LFB128:
1444:FreeRTOS/Source/tasks.c **** 
1445:FreeRTOS/Source/tasks.c **** #endif
1446:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1447:FreeRTOS/Source/tasks.c **** 
1448:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1449:FreeRTOS/Source/tasks.c **** 
1450:FreeRTOS/Source/tasks.c **** 	void vTaskStartTrace( signed char * pcBuffer, unsigned long ulBufferSize )
1451:FreeRTOS/Source/tasks.c **** 	{
1452:FreeRTOS/Source/tasks.c **** 		configASSERT( pcBuffer );
1453:FreeRTOS/Source/tasks.c **** 		configASSERT( ulBufferSize );
1454:FreeRTOS/Source/tasks.c **** 
1455:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1456:FreeRTOS/Source/tasks.c **** 		{
1457:FreeRTOS/Source/tasks.c **** 			pcTraceBuffer = ( signed char * )pcBuffer;
1458:FreeRTOS/Source/tasks.c **** 			pcTraceBufferStart = pcBuffer;
1459:FreeRTOS/Source/tasks.c **** 			pcTraceBufferEnd = pcBuffer + ( ulBufferSize - tskSIZE_OF_EACH_TRACE_LINE );
1460:FreeRTOS/Source/tasks.c **** 			xTracing = pdTRUE;
1461:FreeRTOS/Source/tasks.c **** 		}
1462:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1463:FreeRTOS/Source/tasks.c **** 	}
1464:FreeRTOS/Source/tasks.c **** 
1465:FreeRTOS/Source/tasks.c **** #endif
1466:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1467:FreeRTOS/Source/tasks.c **** 
1468:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1469:FreeRTOS/Source/tasks.c **** 
1470:FreeRTOS/Source/tasks.c **** 	unsigned long ulTaskEndTrace( void )
1471:FreeRTOS/Source/tasks.c **** 	{
1472:FreeRTOS/Source/tasks.c **** 	unsigned long ulBufferLength;
1473:FreeRTOS/Source/tasks.c **** 
1474:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1475:FreeRTOS/Source/tasks.c **** 			xTracing = pdFALSE;
1476:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1477:FreeRTOS/Source/tasks.c **** 
1478:FreeRTOS/Source/tasks.c **** 		ulBufferLength = ( unsigned long ) ( pcTraceBuffer - pcTraceBufferStart );
1479:FreeRTOS/Source/tasks.c **** 
1480:FreeRTOS/Source/tasks.c **** 		return ulBufferLength;
1481:FreeRTOS/Source/tasks.c **** 	}
1482:FreeRTOS/Source/tasks.c **** 
1483:FreeRTOS/Source/tasks.c **** #endif
1484:FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1485:FreeRTOS/Source/tasks.c **** 
1486:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
1487:FreeRTOS/Source/tasks.c **** 
1488:FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetIdleTaskHandle( void )
1489:FreeRTOS/Source/tasks.c **** 	{
 1975              		.loc 1 1489 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 0
 1978              		@ frame_needed = 1, uses_anonymous_args = 0
 1979              		@ link register save eliminated.
 1980 0000 80B4     		push	{r7}
 1981              	.LCFI51:
 1982              		.cfi_def_cfa_offset 4
 1983              		.cfi_offset 7, -4
 1984 0002 00AF     		add	r7, sp, #0
 1985              	.LCFI52:
 1986              		.cfi_def_cfa_register 7
1490:FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
1491:FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
1492:FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
1493:FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
 1987              		.loc 1 1493 0
 1988 0004 40F20003 		movw	r3, #:lower16:xIdleTaskHandle
 1989 0008 C0F20003 		movt	r3, #:upper16:xIdleTaskHandle
 1990 000c 1B68     		ldr	r3, [r3]
1494:FreeRTOS/Source/tasks.c **** 	}
 1991              		.loc 1 1494 0
 1992 000e 1846     		mov	r0, r3
 1993 0010 BD46     		mov	sp, r7
 1994              		@ sp needed
 1995 0012 5DF8047B 		ldr	r7, [sp], #4
 1996 0016 7047     		bx	lr
 1997              		.cfi_endproc
 1998              	.LFE128:
 2000              		.section	.text.vTaskIncrementTick,"ax",%progbits
 2001              		.align	2
 2002              		.global	vTaskIncrementTick
 2003              		.thumb
 2004              		.thumb_func
 2006              	vTaskIncrementTick:
 2007              	.LFB129:
1495:FreeRTOS/Source/tasks.c **** 	
1496:FreeRTOS/Source/tasks.c **** #endif
1497:FreeRTOS/Source/tasks.c **** 
1498:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1499:FreeRTOS/Source/tasks.c ****  * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
1500:FreeRTOS/Source/tasks.c ****  * documented in task.h
1501:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1502:FreeRTOS/Source/tasks.c **** 
1503:FreeRTOS/Source/tasks.c **** void vTaskIncrementTick( void )
1504:FreeRTOS/Source/tasks.c **** {
 2008              		.loc 1 1504 0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 16
 2011              		@ frame_needed = 1, uses_anonymous_args = 0
 2012 0000 80B5     		push	{r7, lr}
 2013              	.LCFI53:
 2014              		.cfi_def_cfa_offset 8
 2015              		.cfi_offset 7, -8
 2016              		.cfi_offset 14, -4
 2017 0002 84B0     		sub	sp, sp, #16
 2018              	.LCFI54:
 2019              		.cfi_def_cfa_offset 24
 2020 0004 00AF     		add	r7, sp, #0
 2021              	.LCFI55:
 2022              		.cfi_def_cfa_register 7
1505:FreeRTOS/Source/tasks.c **** tskTCB * pxTCB;
1506:FreeRTOS/Source/tasks.c **** 
1507:FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
1508:FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
1509:FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
1510:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2023              		.loc 1 1510 0
 2024 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2025 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2026 000e 1B68     		ldr	r3, [r3]
 2027 0010 002B     		cmp	r3, #0
 2028 0012 40F0B980 		bne	.L94
1511:FreeRTOS/Source/tasks.c **** 	{
1512:FreeRTOS/Source/tasks.c **** 		++xTickCount;
 2029              		.loc 1 1512 0
 2030 0016 40F20003 		movw	r3, #:lower16:xTickCount
 2031 001a C0F20003 		movt	r3, #:upper16:xTickCount
 2032 001e 1B68     		ldr	r3, [r3]
 2033 0020 5A1C     		adds	r2, r3, #1
 2034 0022 40F20003 		movw	r3, #:lower16:xTickCount
 2035 0026 C0F20003 		movt	r3, #:upper16:xTickCount
 2036 002a 1A60     		str	r2, [r3]
1513:FreeRTOS/Source/tasks.c **** 		if( xTickCount == ( portTickType ) 0U )
 2037              		.loc 1 1513 0
 2038 002c 40F20003 		movw	r3, #:lower16:xTickCount
 2039 0030 C0F20003 		movt	r3, #:upper16:xTickCount
 2040 0034 1B68     		ldr	r3, [r3]
 2041 0036 002B     		cmp	r3, #0
 2042 0038 3FD1     		bne	.L95
 2043              	.LBB4:
1514:FreeRTOS/Source/tasks.c **** 		{
1515:FreeRTOS/Source/tasks.c **** 			xList *pxTemp;
1516:FreeRTOS/Source/tasks.c **** 
1517:FreeRTOS/Source/tasks.c **** 			/* Tick count has overflowed so we need to swap the delay lists.
1518:FreeRTOS/Source/tasks.c **** 			If there are any items in pxDelayedTaskList here then there is
1519:FreeRTOS/Source/tasks.c **** 			an error! */
1520:FreeRTOS/Source/tasks.c **** 			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
1521:FreeRTOS/Source/tasks.c **** 			
1522:FreeRTOS/Source/tasks.c **** 			pxTemp = pxDelayedTaskList;
 2044              		.loc 1 1522 0
 2045 003a 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2046 003e C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2047 0042 1B68     		ldr	r3, [r3]
 2048 0044 FB60     		str	r3, [r7, #12]
1523:FreeRTOS/Source/tasks.c **** 			pxDelayedTaskList = pxOverflowDelayedTaskList;
 2049              		.loc 1 1523 0
 2050 0046 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2051 004a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2052 004e 1A68     		ldr	r2, [r3]
 2053 0050 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2054 0054 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2055 0058 1A60     		str	r2, [r3]
1524:FreeRTOS/Source/tasks.c **** 			pxOverflowDelayedTaskList = pxTemp;
 2056              		.loc 1 1524 0
 2057 005a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 2058 005e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 2059 0062 FA68     		ldr	r2, [r7, #12]
 2060 0064 1A60     		str	r2, [r3]
1525:FreeRTOS/Source/tasks.c **** 			xNumOfOverflows++;
 2061              		.loc 1 1525 0
 2062 0066 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2063 006a C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2064 006e 1B68     		ldr	r3, [r3]
 2065 0070 5A1C     		adds	r2, r3, #1
 2066 0072 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2067 0076 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2068 007a 1A60     		str	r2, [r3]
1526:FreeRTOS/Source/tasks.c **** 	
1527:FreeRTOS/Source/tasks.c **** 			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2069              		.loc 1 1527 0
 2070 007c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2071 0080 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2072 0084 1B68     		ldr	r3, [r3]
 2073 0086 1B68     		ldr	r3, [r3]
 2074 0088 002B     		cmp	r3, #0
 2075 008a 07D1     		bne	.L96
1528:FreeRTOS/Source/tasks.c **** 			{
1529:FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is empty.  Set
1530:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime to the maximum possible value so it is
1531:FreeRTOS/Source/tasks.c **** 				extremely unlikely that the	
1532:FreeRTOS/Source/tasks.c **** 				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
1533:FreeRTOS/Source/tasks.c **** 				there is an item in the delayed list. */
1534:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = portMAX_DELAY;
 2076              		.loc 1 1534 0
 2077 008c 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2078 0090 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2079 0094 4FF0FF32 		mov	r2, #-1
 2080 0098 1A60     		str	r2, [r3]
 2081 009a 0EE0     		b	.L95
 2082              	.L96:
1535:FreeRTOS/Source/tasks.c **** 			}
1536:FreeRTOS/Source/tasks.c **** 			else
1537:FreeRTOS/Source/tasks.c **** 			{
1538:FreeRTOS/Source/tasks.c **** 				/* The new current delayed list is not empty, get the value of
1539:FreeRTOS/Source/tasks.c **** 				the item at the head of the delayed list.  This is the time at
1540:FreeRTOS/Source/tasks.c **** 				which the task at the head of the delayed list should be removed
1541:FreeRTOS/Source/tasks.c **** 				from the Blocked state. */
1542:FreeRTOS/Source/tasks.c **** 				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 2083              		.loc 1 1542 0
 2084 009c 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2085 00a0 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2086 00a4 1B68     		ldr	r3, [r3]
 2087 00a6 DB68     		ldr	r3, [r3, #12]
 2088 00a8 DB68     		ldr	r3, [r3, #12]
 2089 00aa BB60     		str	r3, [r7, #8]
1543:FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 2090              		.loc 1 1543 0
 2091 00ac BB68     		ldr	r3, [r7, #8]
 2092 00ae 5A68     		ldr	r2, [r3, #4]
 2093 00b0 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2094 00b4 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2095 00b8 1A60     		str	r2, [r3]
 2096              	.L95:
 2097              	.LBE4:
 2098              	.LBB5:
1544:FreeRTOS/Source/tasks.c **** 			}
1545:FreeRTOS/Source/tasks.c **** 		}
1546:FreeRTOS/Source/tasks.c **** 
1547:FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire. */
1548:FreeRTOS/Source/tasks.c **** 		prvCheckDelayedTasks();
 2099              		.loc 1 1548 0
 2100 00ba 40F20003 		movw	r3, #:lower16:xTickCount
 2101 00be C0F20003 		movt	r3, #:upper16:xTickCount
 2102 00c2 1A68     		ldr	r2, [r3]
 2103 00c4 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2104 00c8 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2105 00cc 1B68     		ldr	r3, [r3]
 2106 00ce 9A42     		cmp	r2, r3
 2107 00d0 59D3     		bcc	.L97
 2108              	.L102:
 2109              		.loc 1 1548 0 is_stmt 0 discriminator 1
 2110 00d2 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2111 00d6 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2112 00da 1B68     		ldr	r3, [r3]
 2113 00dc 1B68     		ldr	r3, [r3]
 2114 00de 002B     		cmp	r3, #0
 2115 00e0 07D1     		bne	.L98
 2116 00e2 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2117 00e6 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2118 00ea 4FF0FF32 		mov	r2, #-1
 2119 00ee 1A60     		str	r2, [r3]
 2120 00f0 49E0     		b	.L97
 2121              	.L98:
 2122              		.loc 1 1548 0 discriminator 2
 2123 00f2 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 2124 00f6 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 2125 00fa 1B68     		ldr	r3, [r3]
 2126 00fc DB68     		ldr	r3, [r3, #12]
 2127 00fe DB68     		ldr	r3, [r3, #12]
 2128 0100 BB60     		str	r3, [r7, #8]
 2129 0102 BB68     		ldr	r3, [r7, #8]
 2130 0104 5B68     		ldr	r3, [r3, #4]
 2131 0106 7B60     		str	r3, [r7, #4]
 2132 0108 40F20003 		movw	r3, #:lower16:xTickCount
 2133 010c C0F20003 		movt	r3, #:upper16:xTickCount
 2134 0110 1A68     		ldr	r2, [r3]
 2135 0112 7B68     		ldr	r3, [r7, #4]
 2136 0114 9A42     		cmp	r2, r3
 2137 0116 06D2     		bcs	.L99
 2138              		.loc 1 1548 0 discriminator 1
 2139 0118 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 2140 011c C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 2141 0120 7A68     		ldr	r2, [r7, #4]
 2142 0122 1A60     		str	r2, [r3]
 2143 0124 2FE0     		b	.L97
 2144              	.L99:
 2145              		.loc 1 1548 0 discriminator 2
 2146 0126 BB68     		ldr	r3, [r7, #8]
 2147 0128 0433     		adds	r3, r3, #4
 2148 012a 1846     		mov	r0, r3
 2149 012c FFF7FEFF 		bl	vListRemove
 2150 0130 BB68     		ldr	r3, [r7, #8]
 2151 0132 9B6A     		ldr	r3, [r3, #40]
 2152 0134 002B     		cmp	r3, #0
 2153 0136 04D0     		beq	.L100
 2154              		.loc 1 1548 0 discriminator 1
 2155 0138 BB68     		ldr	r3, [r7, #8]
 2156 013a 1833     		adds	r3, r3, #24
 2157 013c 1846     		mov	r0, r3
 2158 013e FFF7FEFF 		bl	vListRemove
 2159              	.L100:
 2160              		.loc 1 1548 0 discriminator 2
 2161 0142 BB68     		ldr	r3, [r7, #8]
 2162 0144 DA6A     		ldr	r2, [r3, #44]
 2163 0146 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2164 014a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2165 014e 1B68     		ldr	r3, [r3]
 2166 0150 9A42     		cmp	r2, r3
 2167 0152 06D9     		bls	.L101
 2168              		.loc 1 1548 0 discriminator 1
 2169 0154 BB68     		ldr	r3, [r7, #8]
 2170 0156 DA6A     		ldr	r2, [r3, #44]
 2171 0158 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2172 015c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2173 0160 1A60     		str	r2, [r3]
 2174              	.L101:
 2175              		.loc 1 1548 0 discriminator 2
 2176 0162 BB68     		ldr	r3, [r7, #8]
 2177 0164 DA6A     		ldr	r2, [r3, #44]
 2178 0166 1346     		mov	r3, r2
 2179 0168 9B00     		lsls	r3, r3, #2
 2180 016a 1344     		add	r3, r3, r2
 2181 016c 9B00     		lsls	r3, r3, #2
 2182 016e 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 2183 0172 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 2184 0176 1A44     		add	r2, r2, r3
 2185 0178 BB68     		ldr	r3, [r7, #8]
 2186 017a 0433     		adds	r3, r3, #4
 2187 017c 1046     		mov	r0, r2
 2188 017e 1946     		mov	r1, r3
 2189 0180 FFF7FEFF 		bl	vListInsertEnd
 2190 0184 A5E7     		b	.L102
 2191              	.L97:
 2192              	.LBE5:
 2193 0186 0AE0     		b	.L93
 2194              	.L94:
1549:FreeRTOS/Source/tasks.c **** 	}
1550:FreeRTOS/Source/tasks.c **** 	else
1551:FreeRTOS/Source/tasks.c **** 	{
1552:FreeRTOS/Source/tasks.c **** 		++uxMissedTicks;
 2195              		.loc 1 1552 0 is_stmt 1
 2196 0188 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2197 018c C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2198 0190 1B68     		ldr	r3, [r3]
 2199 0192 5A1C     		adds	r2, r3, #1
 2200 0194 40F20003 		movw	r3, #:lower16:uxMissedTicks
 2201 0198 C0F20003 		movt	r3, #:upper16:uxMissedTicks
 2202 019c 1A60     		str	r2, [r3]
 2203              	.L93:
1553:FreeRTOS/Source/tasks.c **** 
1554:FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
1555:FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
1556:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
1557:FreeRTOS/Source/tasks.c **** 		{
1558:FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1559:FreeRTOS/Source/tasks.c **** 		}
1560:FreeRTOS/Source/tasks.c **** 		#endif
1561:FreeRTOS/Source/tasks.c **** 	}
1562:FreeRTOS/Source/tasks.c **** 
1563:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TICK_HOOK == 1 )
1564:FreeRTOS/Source/tasks.c **** 	{
1565:FreeRTOS/Source/tasks.c **** 		/* Guard against the tick hook being called when the missed tick
1566:FreeRTOS/Source/tasks.c **** 		count is being unwound (when the scheduler is being unlocked. */
1567:FreeRTOS/Source/tasks.c **** 		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
1568:FreeRTOS/Source/tasks.c **** 		{
1569:FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
1570:FreeRTOS/Source/tasks.c **** 		}
1571:FreeRTOS/Source/tasks.c **** 	}
1572:FreeRTOS/Source/tasks.c **** 	#endif
1573:FreeRTOS/Source/tasks.c **** 
1574:FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
1575:FreeRTOS/Source/tasks.c **** }
 2204              		.loc 1 1575 0
 2205 019e 1037     		adds	r7, r7, #16
 2206 01a0 BD46     		mov	sp, r7
 2207              		@ sp needed
 2208 01a2 80BD     		pop	{r7, pc}
 2209              		.cfi_endproc
 2210              	.LFE129:
 2212              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 2213              		.align	2
 2214              		.global	vTaskSetApplicationTaskTag
 2215              		.thumb
 2216              		.thumb_func
 2218              	vTaskSetApplicationTaskTag:
 2219              	.LFB130:
1576:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1577:FreeRTOS/Source/tasks.c **** 
1578:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1579:FreeRTOS/Source/tasks.c **** 
1580:FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( xTaskHandle xTask, pdTASK_HOOK_CODE pxHookFunction )
1581:FreeRTOS/Source/tasks.c **** 	{
 2220              		.loc 1 1581 0
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 16
 2223              		@ frame_needed = 1, uses_anonymous_args = 0
 2224 0000 80B5     		push	{r7, lr}
 2225              	.LCFI56:
 2226              		.cfi_def_cfa_offset 8
 2227              		.cfi_offset 7, -8
 2228              		.cfi_offset 14, -4
 2229 0002 84B0     		sub	sp, sp, #16
 2230              	.LCFI57:
 2231              		.cfi_def_cfa_offset 24
 2232 0004 00AF     		add	r7, sp, #0
 2233              	.LCFI58:
 2234              		.cfi_def_cfa_register 7
 2235 0006 7860     		str	r0, [r7, #4]
 2236 0008 3960     		str	r1, [r7]
1582:FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1583:FreeRTOS/Source/tasks.c **** 
1584:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1585:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2237              		.loc 1 1585 0
 2238 000a 7B68     		ldr	r3, [r7, #4]
 2239 000c 002B     		cmp	r3, #0
 2240 000e 06D1     		bne	.L105
1586:FreeRTOS/Source/tasks.c **** 		{
1587:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2241              		.loc 1 1587 0
 2242 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2243 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2244 0018 1B68     		ldr	r3, [r3]
 2245 001a FB60     		str	r3, [r7, #12]
 2246 001c 01E0     		b	.L106
 2247              	.L105:
1588:FreeRTOS/Source/tasks.c **** 		}
1589:FreeRTOS/Source/tasks.c **** 		else
1590:FreeRTOS/Source/tasks.c **** 		{
1591:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2248              		.loc 1 1591 0
 2249 001e 7B68     		ldr	r3, [r7, #4]
 2250 0020 FB60     		str	r3, [r7, #12]
 2251              	.L106:
1592:FreeRTOS/Source/tasks.c **** 		}
1593:FreeRTOS/Source/tasks.c **** 
1594:FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1595:FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1596:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2252              		.loc 1 1596 0
 2253 0022 FFF7FEFF 		bl	vPortEnterCritical
1597:FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 2254              		.loc 1 1597 0
 2255 0026 FB68     		ldr	r3, [r7, #12]
 2256 0028 3A68     		ldr	r2, [r7]
 2257 002a 9A64     		str	r2, [r3, #72]
1598:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2258              		.loc 1 1598 0
 2259 002c FFF7FEFF 		bl	vPortExitCritical
1599:FreeRTOS/Source/tasks.c **** 	}
 2260              		.loc 1 1599 0
 2261 0030 1037     		adds	r7, r7, #16
 2262 0032 BD46     		mov	sp, r7
 2263              		@ sp needed
 2264 0034 80BD     		pop	{r7, pc}
 2265              		.cfi_endproc
 2266              	.LFE130:
 2268 0036 00BF     		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 2269              		.align	2
 2270              		.global	xTaskGetApplicationTaskTag
 2271              		.thumb
 2272              		.thumb_func
 2274              	xTaskGetApplicationTaskTag:
 2275              	.LFB131:
1600:FreeRTOS/Source/tasks.c **** 
1601:FreeRTOS/Source/tasks.c **** #endif
1602:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1603:FreeRTOS/Source/tasks.c **** 
1604:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1605:FreeRTOS/Source/tasks.c **** 
1606:FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xTaskGetApplicationTaskTag( xTaskHandle xTask )
1607:FreeRTOS/Source/tasks.c **** 	{
 2276              		.loc 1 1607 0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 16
 2279              		@ frame_needed = 1, uses_anonymous_args = 0
 2280 0000 80B5     		push	{r7, lr}
 2281              	.LCFI59:
 2282              		.cfi_def_cfa_offset 8
 2283              		.cfi_offset 7, -8
 2284              		.cfi_offset 14, -4
 2285 0002 84B0     		sub	sp, sp, #16
 2286              	.LCFI60:
 2287              		.cfi_def_cfa_offset 24
 2288 0004 00AF     		add	r7, sp, #0
 2289              	.LCFI61:
 2290              		.cfi_def_cfa_register 7
 2291 0006 7860     		str	r0, [r7, #4]
1608:FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1609:FreeRTOS/Source/tasks.c **** 	pdTASK_HOOK_CODE xReturn;
1610:FreeRTOS/Source/tasks.c **** 
1611:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
1612:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2292              		.loc 1 1612 0
 2293 0008 7B68     		ldr	r3, [r7, #4]
 2294 000a 002B     		cmp	r3, #0
 2295 000c 06D1     		bne	.L108
1613:FreeRTOS/Source/tasks.c **** 		{
1614:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2296              		.loc 1 1614 0
 2297 000e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2298 0012 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2299 0016 1B68     		ldr	r3, [r3]
 2300 0018 FB60     		str	r3, [r7, #12]
 2301 001a 01E0     		b	.L109
 2302              	.L108:
1615:FreeRTOS/Source/tasks.c **** 		}
1616:FreeRTOS/Source/tasks.c **** 		else
1617:FreeRTOS/Source/tasks.c **** 		{
1618:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2303              		.loc 1 1618 0
 2304 001c 7B68     		ldr	r3, [r7, #4]
 2305 001e FB60     		str	r3, [r7, #12]
 2306              	.L109:
1619:FreeRTOS/Source/tasks.c **** 		}
1620:FreeRTOS/Source/tasks.c **** 
1621:FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
1622:FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
1623:FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 2307              		.loc 1 1623 0
 2308 0020 FFF7FEFF 		bl	vPortEnterCritical
1624:FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
 2309              		.loc 1 1624 0
 2310 0024 FB68     		ldr	r3, [r7, #12]
 2311 0026 9B6C     		ldr	r3, [r3, #72]
 2312 0028 BB60     		str	r3, [r7, #8]
1625:FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 2313              		.loc 1 1625 0
 2314 002a FFF7FEFF 		bl	vPortExitCritical
1626:FreeRTOS/Source/tasks.c **** 
1627:FreeRTOS/Source/tasks.c **** 		return xReturn;
 2315              		.loc 1 1627 0
 2316 002e BB68     		ldr	r3, [r7, #8]
1628:FreeRTOS/Source/tasks.c **** 	}
 2317              		.loc 1 1628 0
 2318 0030 1846     		mov	r0, r3
 2319 0032 1037     		adds	r7, r7, #16
 2320 0034 BD46     		mov	sp, r7
 2321              		@ sp needed
 2322 0036 80BD     		pop	{r7, pc}
 2323              		.cfi_endproc
 2324              	.LFE131:
 2326              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 2327              		.align	2
 2328              		.global	xTaskCallApplicationTaskHook
 2329              		.thumb
 2330              		.thumb_func
 2332              	xTaskCallApplicationTaskHook:
 2333              	.LFB132:
1629:FreeRTOS/Source/tasks.c **** 
1630:FreeRTOS/Source/tasks.c **** #endif
1631:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1632:FreeRTOS/Source/tasks.c **** 
1633:FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
1634:FreeRTOS/Source/tasks.c **** 
1635:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskCallApplicationTaskHook( xTaskHandle xTask, void *pvParameter )
1636:FreeRTOS/Source/tasks.c **** 	{
 2334              		.loc 1 1636 0
 2335              		.cfi_startproc
 2336              		@ args = 0, pretend = 0, frame = 16
 2337              		@ frame_needed = 1, uses_anonymous_args = 0
 2338 0000 80B5     		push	{r7, lr}
 2339              	.LCFI62:
 2340              		.cfi_def_cfa_offset 8
 2341              		.cfi_offset 7, -8
 2342              		.cfi_offset 14, -4
 2343 0002 84B0     		sub	sp, sp, #16
 2344              	.LCFI63:
 2345              		.cfi_def_cfa_offset 24
 2346 0004 00AF     		add	r7, sp, #0
 2347              	.LCFI64:
 2348              		.cfi_def_cfa_register 7
 2349 0006 7860     		str	r0, [r7, #4]
 2350 0008 3960     		str	r1, [r7]
1637:FreeRTOS/Source/tasks.c **** 	tskTCB *xTCB;
1638:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
1639:FreeRTOS/Source/tasks.c **** 
1640:FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
1641:FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 2351              		.loc 1 1641 0
 2352 000a 7B68     		ldr	r3, [r7, #4]
 2353 000c 002B     		cmp	r3, #0
 2354 000e 06D1     		bne	.L112
1642:FreeRTOS/Source/tasks.c **** 		{
1643:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) pxCurrentTCB;
 2355              		.loc 1 1643 0
 2356 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2357 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2358 0018 1B68     		ldr	r3, [r3]
 2359 001a FB60     		str	r3, [r7, #12]
 2360 001c 01E0     		b	.L113
 2361              	.L112:
1644:FreeRTOS/Source/tasks.c **** 		}
1645:FreeRTOS/Source/tasks.c **** 		else
1646:FreeRTOS/Source/tasks.c **** 		{
1647:FreeRTOS/Source/tasks.c **** 			xTCB = ( tskTCB * ) xTask;
 2362              		.loc 1 1647 0
 2363 001e 7B68     		ldr	r3, [r7, #4]
 2364 0020 FB60     		str	r3, [r7, #12]
 2365              	.L113:
1648:FreeRTOS/Source/tasks.c **** 		}
1649:FreeRTOS/Source/tasks.c **** 
1650:FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 2366              		.loc 1 1650 0
 2367 0022 FB68     		ldr	r3, [r7, #12]
 2368 0024 9B6C     		ldr	r3, [r3, #72]
 2369 0026 002B     		cmp	r3, #0
 2370 0028 05D0     		beq	.L114
1651:FreeRTOS/Source/tasks.c **** 		{
1652:FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 2371              		.loc 1 1652 0
 2372 002a FB68     		ldr	r3, [r7, #12]
 2373 002c 9B6C     		ldr	r3, [r3, #72]
 2374 002e 3868     		ldr	r0, [r7]
 2375 0030 9847     		blx	r3
 2376 0032 B860     		str	r0, [r7, #8]
 2377 0034 01E0     		b	.L115
 2378              	.L114:
1653:FreeRTOS/Source/tasks.c **** 		}
1654:FreeRTOS/Source/tasks.c **** 		else
1655:FreeRTOS/Source/tasks.c **** 		{
1656:FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2379              		.loc 1 1656 0
 2380 0036 0023     		movs	r3, #0
 2381 0038 BB60     		str	r3, [r7, #8]
 2382              	.L115:
1657:FreeRTOS/Source/tasks.c **** 		}
1658:FreeRTOS/Source/tasks.c **** 
1659:FreeRTOS/Source/tasks.c **** 		return xReturn;
 2383              		.loc 1 1659 0
 2384 003a BB68     		ldr	r3, [r7, #8]
1660:FreeRTOS/Source/tasks.c **** 	}
 2385              		.loc 1 1660 0
 2386 003c 1846     		mov	r0, r3
 2387 003e 1037     		adds	r7, r7, #16
 2388 0040 BD46     		mov	sp, r7
 2389              		@ sp needed
 2390 0042 80BD     		pop	{r7, pc}
 2391              		.cfi_endproc
 2392              	.LFE132:
 2394              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2395              		.align	2
 2396              		.global	vTaskSwitchContext
 2397              		.thumb
 2398              		.thumb_func
 2400              	vTaskSwitchContext:
 2401              	.LFB133:
1661:FreeRTOS/Source/tasks.c **** 
1662:FreeRTOS/Source/tasks.c **** #endif
1663:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1664:FreeRTOS/Source/tasks.c **** 
1665:FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
1666:FreeRTOS/Source/tasks.c **** {
 2402              		.loc 1 1666 0
 2403              		.cfi_startproc
 2404              		@ args = 0, pretend = 0, frame = 8
 2405              		@ frame_needed = 1, uses_anonymous_args = 0
 2406 0000 80B5     		push	{r7, lr}
 2407              	.LCFI65:
 2408              		.cfi_def_cfa_offset 8
 2409              		.cfi_offset 7, -8
 2410              		.cfi_offset 14, -4
 2411 0002 82B0     		sub	sp, sp, #8
 2412              	.LCFI66:
 2413              		.cfi_def_cfa_offset 16
 2414 0004 00AF     		add	r7, sp, #0
 2415              	.LCFI67:
 2416              		.cfi_def_cfa_register 7
1667:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
 2417              		.loc 1 1667 0
 2418 0006 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2419 000a C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2420 000e 1B68     		ldr	r3, [r3]
 2421 0010 002B     		cmp	r3, #0
 2422 0012 06D0     		beq	.L118
1668:FreeRTOS/Source/tasks.c **** 	{
1669:FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
1670:FreeRTOS/Source/tasks.c **** 		switch. */
1671:FreeRTOS/Source/tasks.c **** 		xMissedYield = pdTRUE;
 2423              		.loc 1 1671 0
 2424 0014 40F20003 		movw	r3, #:lower16:xMissedYield
 2425 0018 C0F20003 		movt	r3, #:upper16:xMissedYield
 2426 001c 0122     		movs	r2, #1
 2427 001e 1A60     		str	r2, [r3]
 2428 0020 69E0     		b	.L117
 2429              	.L118:
 2430              	.LBB6:
1672:FreeRTOS/Source/tasks.c **** 	}
1673:FreeRTOS/Source/tasks.c **** 	else
1674:FreeRTOS/Source/tasks.c **** 	{
1675:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
1676:FreeRTOS/Source/tasks.c **** 	
1677:FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
1678:FreeRTOS/Source/tasks.c **** 		{
1679:FreeRTOS/Source/tasks.c **** 			unsigned long ulTempCounter;
1680:FreeRTOS/Source/tasks.c **** 			
1681:FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
1682:FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTempCounter );
1683:FreeRTOS/Source/tasks.c **** 				#else
1684:FreeRTOS/Source/tasks.c **** 					ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();
 2431              		.loc 1 1684 0
 2432 0022 FFF7FEFF 		bl	get_us_time
 2433 0026 0246     		mov	r2, r0
 2434 0028 0B46     		mov	r3, r1
 2435 002a 1346     		mov	r3, r2
 2436 002c 7B60     		str	r3, [r7, #4]
1685:FreeRTOS/Source/tasks.c **** 				#endif
1686:FreeRTOS/Source/tasks.c **** 	
1687:FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the accumulated
1688:FreeRTOS/Source/tasks.c **** 				time so far.  The time the task started running was stored in
1689:FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime.  Note that there is no overflow protection here
1690:FreeRTOS/Source/tasks.c **** 				so count values are only valid until the timer overflows.  Generally
1691:FreeRTOS/Source/tasks.c **** 				this will be about 1 hour assuming a 1uS timer increment. */
1692:FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTempCounter - ulTaskSwitchedInTime );
 2437              		.loc 1 1692 0
 2438 002e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2439 0032 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2440 0036 1A68     		ldr	r2, [r3]
 2441 0038 D16C     		ldr	r1, [r2, #76]
 2442 003a 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2443 003e C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2444 0042 1B68     		ldr	r3, [r3]
 2445 0044 7868     		ldr	r0, [r7, #4]
 2446 0046 C31A     		subs	r3, r0, r3
 2447 0048 0B44     		add	r3, r3, r1
 2448 004a D364     		str	r3, [r2, #76]
1693:FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTempCounter;
 2449              		.loc 1 1693 0
 2450 004c 40F20003 		movw	r3, #:lower16:ulTaskSwitchedInTime
 2451 0050 C0F20003 		movt	r3, #:upper16:ulTaskSwitchedInTime
 2452 0054 7A68     		ldr	r2, [r7, #4]
 2453 0056 1A60     		str	r2, [r3]
 2454              	.LBE6:
1694:FreeRTOS/Source/tasks.c **** 		}
1695:FreeRTOS/Source/tasks.c **** 		#endif
1696:FreeRTOS/Source/tasks.c **** 	
1697:FreeRTOS/Source/tasks.c **** 		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
1698:FreeRTOS/Source/tasks.c **** 		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
1699:FreeRTOS/Source/tasks.c **** 	
1700:FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */
1701:FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
 2455              		.loc 1 1701 0
 2456 0058 0AE0     		b	.L120
 2457              	.L121:
1702:FreeRTOS/Source/tasks.c **** 		{
1703:FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopReadyPriority );
1704:FreeRTOS/Source/tasks.c **** 			--uxTopReadyPriority;
 2458              		.loc 1 1704 0
 2459 005a 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2460 005e C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2461 0062 1B68     		ldr	r3, [r3]
 2462 0064 5A1E     		subs	r2, r3, #1
 2463 0066 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2464 006a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2465 006e 1A60     		str	r2, [r3]
 2466              	.L120:
1701:FreeRTOS/Source/tasks.c **** 		{
 2467              		.loc 1 1701 0 discriminator 1
 2468 0070 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2469 0074 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2470 0078 1968     		ldr	r1, [r3]
 2471 007a 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 2472 007e C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 2473 0082 0B46     		mov	r3, r1
 2474 0084 9B00     		lsls	r3, r3, #2
 2475 0086 0B44     		add	r3, r3, r1
 2476 0088 9B00     		lsls	r3, r3, #2
 2477 008a 1344     		add	r3, r3, r2
 2478 008c 1B68     		ldr	r3, [r3]
 2479 008e 002B     		cmp	r3, #0
 2480 0090 E3D0     		beq	.L121
 2481              	.LBB7:
1705:FreeRTOS/Source/tasks.c **** 		}
1706:FreeRTOS/Source/tasks.c **** 	
1707:FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
1708:FreeRTOS/Source/tasks.c **** 		same priority get an equal share of the processor time. */
1709:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
 2482              		.loc 1 1709 0
 2483 0092 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2484 0096 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2485 009a 1A68     		ldr	r2, [r3]
 2486 009c 1346     		mov	r3, r2
 2487 009e 9B00     		lsls	r3, r3, #2
 2488 00a0 1344     		add	r3, r3, r2
 2489 00a2 9B00     		lsls	r3, r3, #2
 2490 00a4 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 2491 00a8 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 2492 00ac 1344     		add	r3, r3, r2
 2493 00ae 3B60     		str	r3, [r7]
 2494 00b0 3B68     		ldr	r3, [r7]
 2495 00b2 5B68     		ldr	r3, [r3, #4]
 2496 00b4 5A68     		ldr	r2, [r3, #4]
 2497 00b6 3B68     		ldr	r3, [r7]
 2498 00b8 5A60     		str	r2, [r3, #4]
 2499 00ba 3B68     		ldr	r3, [r7]
 2500 00bc 5A68     		ldr	r2, [r3, #4]
 2501 00be 3B68     		ldr	r3, [r7]
 2502 00c0 0833     		adds	r3, r3, #8
 2503 00c2 9A42     		cmp	r2, r3
 2504 00c4 04D1     		bne	.L122
 2505              		.loc 1 1709 0 is_stmt 0 discriminator 1
 2506 00c6 3B68     		ldr	r3, [r7]
 2507 00c8 5B68     		ldr	r3, [r3, #4]
 2508 00ca 5A68     		ldr	r2, [r3, #4]
 2509 00cc 3B68     		ldr	r3, [r7]
 2510 00ce 5A60     		str	r2, [r3, #4]
 2511              	.L122:
 2512              		.loc 1 1709 0 discriminator 2
 2513 00d0 3B68     		ldr	r3, [r7]
 2514 00d2 5B68     		ldr	r3, [r3, #4]
 2515 00d4 DA68     		ldr	r2, [r3, #12]
 2516 00d6 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2517 00da C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2518 00de 1A60     		str	r2, [r3]
 2519              	.LBE7:
1710:FreeRTOS/Source/tasks.c **** 	
1711:FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2520              		.loc 1 1711 0 is_stmt 1 discriminator 2
 2521 00e0 4FF4E843 		mov	r3, #29696
 2522 00e4 C4F20003 		movt	r3, 16384
 2523 00e8 40F20002 		movw	r2, #:lower16:pxCurrentTCB
 2524 00ec C0F20002 		movt	r2, #:upper16:pxCurrentTCB
 2525 00f0 1268     		ldr	r2, [r2]
 2526 00f2 926C     		ldr	r2, [r2, #72]
 2527 00f4 DA60     		str	r2, [r3, #12]
 2528              	.L117:
1712:FreeRTOS/Source/tasks.c **** 		vWriteTraceToBuffer();
1713:FreeRTOS/Source/tasks.c **** 	}
1714:FreeRTOS/Source/tasks.c **** }
 2529              		.loc 1 1714 0
 2530 00f6 0837     		adds	r7, r7, #8
 2531 00f8 BD46     		mov	sp, r7
 2532              		@ sp needed
 2533 00fa 80BD     		pop	{r7, pc}
 2534              		.cfi_endproc
 2535              	.LFE133:
 2537              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2538              		.align	2
 2539              		.global	vTaskPlaceOnEventList
 2540              		.thumb
 2541              		.thumb_func
 2543              	vTaskPlaceOnEventList:
 2544              	.LFB134:
1715:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1716:FreeRTOS/Source/tasks.c **** 
1717:FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
1718:FreeRTOS/Source/tasks.c **** {
 2545              		.loc 1 1718 0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 16
 2548              		@ frame_needed = 1, uses_anonymous_args = 0
 2549 0000 80B5     		push	{r7, lr}
 2550              	.LCFI68:
 2551              		.cfi_def_cfa_offset 8
 2552              		.cfi_offset 7, -8
 2553              		.cfi_offset 14, -4
 2554 0002 84B0     		sub	sp, sp, #16
 2555              	.LCFI69:
 2556              		.cfi_def_cfa_offset 24
 2557 0004 00AF     		add	r7, sp, #0
 2558              	.LCFI70:
 2559              		.cfi_def_cfa_register 7
 2560 0006 7860     		str	r0, [r7, #4]
 2561 0008 3960     		str	r1, [r7]
1719:FreeRTOS/Source/tasks.c **** portTickType xTimeToWake;
1720:FreeRTOS/Source/tasks.c **** 
1721:FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
1722:FreeRTOS/Source/tasks.c **** 
1723:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1724:FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED. */
1725:FreeRTOS/Source/tasks.c **** 
1726:FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
1727:FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
1728:FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event. */
1729:FreeRTOS/Source/tasks.c **** 	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
 2562              		.loc 1 1729 0
 2563 000a 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2564 000e C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2565 0012 1B68     		ldr	r3, [r3]
 2566 0014 1833     		adds	r3, r3, #24
 2567 0016 7868     		ldr	r0, [r7, #4]
 2568 0018 1946     		mov	r1, r3
 2569 001a FFF7FEFF 		bl	vListInsert
1730:FreeRTOS/Source/tasks.c **** 
1731:FreeRTOS/Source/tasks.c **** 	/* We must remove ourselves from the ready list before adding ourselves
1732:FreeRTOS/Source/tasks.c **** 	to the blocked list as the same list item is used for both lists.  We have
1733:FreeRTOS/Source/tasks.c **** 	exclusive access to the ready lists as the scheduler is locked. */
1734:FreeRTOS/Source/tasks.c **** 	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
 2570              		.loc 1 1734 0
 2571 001e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2572 0022 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2573 0026 1B68     		ldr	r3, [r3]
 2574 0028 0433     		adds	r3, r3, #4
 2575 002a 1846     		mov	r0, r3
 2576 002c FFF7FEFF 		bl	vListRemove
1735:FreeRTOS/Source/tasks.c **** 
1736:FreeRTOS/Source/tasks.c **** 
1737:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
1738:FreeRTOS/Source/tasks.c **** 	{
1739:FreeRTOS/Source/tasks.c **** 		if( xTicksToWait == portMAX_DELAY )
 2577              		.loc 1 1739 0
 2578 0030 3B68     		ldr	r3, [r7]
 2579 0032 B3F1FF3F 		cmp	r3, #-1
 2580 0036 0DD1     		bne	.L124
1740:FreeRTOS/Source/tasks.c **** 		{
1741:FreeRTOS/Source/tasks.c **** 			/* Add ourselves to the suspended task list instead of a delayed task
1742:FreeRTOS/Source/tasks.c **** 			list to ensure we are not woken by a timing event.  We will block
1743:FreeRTOS/Source/tasks.c **** 			indefinitely. */
1744:FreeRTOS/Source/tasks.c **** 			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListIt
 2581              		.loc 1 1744 0
 2582 0038 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2583 003c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2584 0040 1B68     		ldr	r3, [r3]
 2585 0042 0433     		adds	r3, r3, #4
 2586 0044 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 2587 0048 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 2588 004c 1946     		mov	r1, r3
 2589 004e FFF7FEFF 		bl	vListInsertEnd
 2590 0052 0AE0     		b	.L123
 2591              	.L124:
1745:FreeRTOS/Source/tasks.c **** 		}
1746:FreeRTOS/Source/tasks.c **** 		else
1747:FreeRTOS/Source/tasks.c **** 		{
1748:FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1749:FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1750:FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
 2592              		.loc 1 1750 0
 2593 0054 40F20003 		movw	r3, #:lower16:xTickCount
 2594 0058 C0F20003 		movt	r3, #:upper16:xTickCount
 2595 005c 1A68     		ldr	r2, [r3]
 2596 005e 3B68     		ldr	r3, [r7]
 2597 0060 1344     		add	r3, r3, r2
 2598 0062 FB60     		str	r3, [r7, #12]
1751:FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
 2599              		.loc 1 1751 0
 2600 0064 F868     		ldr	r0, [r7, #12]
 2601 0066 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2602              	.L123:
1752:FreeRTOS/Source/tasks.c **** 		}
1753:FreeRTOS/Source/tasks.c **** 	}
1754:FreeRTOS/Source/tasks.c **** 	#else
1755:FreeRTOS/Source/tasks.c **** 	{
1756:FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event does
1757:FreeRTOS/Source/tasks.c **** 			not occur.  This may overflow but this doesn't matter. */
1758:FreeRTOS/Source/tasks.c **** 			xTimeToWake = xTickCount + xTicksToWait;
1759:FreeRTOS/Source/tasks.c **** 			prvAddCurrentTaskToDelayedList( xTimeToWake );
1760:FreeRTOS/Source/tasks.c **** 	}
1761:FreeRTOS/Source/tasks.c **** 	#endif
1762:FreeRTOS/Source/tasks.c **** }
 2603              		.loc 1 1762 0
 2604 006a 1037     		adds	r7, r7, #16
 2605 006c BD46     		mov	sp, r7
 2606              		@ sp needed
 2607 006e 80BD     		pop	{r7, pc}
 2608              		.cfi_endproc
 2609              	.LFE134:
 2611              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2612              		.align	2
 2613              		.global	xTaskRemoveFromEventList
 2614              		.thumb
 2615              		.thumb_func
 2617              	xTaskRemoveFromEventList:
 2618              	.LFB135:
1763:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1764:FreeRTOS/Source/tasks.c **** 
1765:FreeRTOS/Source/tasks.c **** #if configUSE_TIMERS == 1
1766:FreeRTOS/Source/tasks.c **** 
1767:FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
1768:FreeRTOS/Source/tasks.c **** 	{
1769:FreeRTOS/Source/tasks.c **** 	portTickType xTimeToWake;
1770:FreeRTOS/Source/tasks.c **** 
1771:FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
1772:FreeRTOS/Source/tasks.c **** 
1773:FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
1774:FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
1775:FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
1776:FreeRTOS/Source/tasks.c **** 		it should be called from a critical section. */
1777:FreeRTOS/Source/tasks.c **** 
1778:FreeRTOS/Source/tasks.c **** 	
1779:FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
1780:FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
1781:FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
1782:FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
1783:FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
1784:FreeRTOS/Source/tasks.c **** 
1785:FreeRTOS/Source/tasks.c **** 		/* We must remove this task from the ready list before adding it to the
1786:FreeRTOS/Source/tasks.c **** 		blocked list as the same list item is used for both lists.  This
1787:FreeRTOS/Source/tasks.c **** 		function is called form a critical section. */
1788:FreeRTOS/Source/tasks.c **** 		vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
1789:FreeRTOS/Source/tasks.c **** 
1790:FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event does
1791:FreeRTOS/Source/tasks.c **** 		not occur.  This may overflow but this doesn't matter. */
1792:FreeRTOS/Source/tasks.c **** 		xTimeToWake = xTickCount + xTicksToWait;
1793:FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTimeToWake );
1794:FreeRTOS/Source/tasks.c **** 	}
1795:FreeRTOS/Source/tasks.c **** 	
1796:FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
1797:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1798:FreeRTOS/Source/tasks.c **** 
1799:FreeRTOS/Source/tasks.c **** signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
1800:FreeRTOS/Source/tasks.c **** {
 2619              		.loc 1 1800 0
 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 16
 2622              		@ frame_needed = 1, uses_anonymous_args = 0
 2623 0000 80B5     		push	{r7, lr}
 2624              	.LCFI71:
 2625              		.cfi_def_cfa_offset 8
 2626              		.cfi_offset 7, -8
 2627              		.cfi_offset 14, -4
 2628 0002 84B0     		sub	sp, sp, #16
 2629              	.LCFI72:
 2630              		.cfi_def_cfa_offset 24
 2631 0004 00AF     		add	r7, sp, #0
 2632              	.LCFI73:
 2633              		.cfi_def_cfa_register 7
 2634 0006 7860     		str	r0, [r7, #4]
1801:FreeRTOS/Source/tasks.c **** tskTCB *pxUnblockedTCB;
1802:FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1803:FreeRTOS/Source/tasks.c **** 
1804:FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH INTERRUPTS DISABLED OR THE
1805:FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED.  It can also be called from within an ISR. */
1806:FreeRTOS/Source/tasks.c **** 
1807:FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so we can remove the
1808:FreeRTOS/Source/tasks.c **** 	first in the list, remove the TCB from the delayed list, and add
1809:FreeRTOS/Source/tasks.c **** 	it to the ready list.
1810:FreeRTOS/Source/tasks.c **** 
1811:FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
1812:FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
1813:FreeRTOS/Source/tasks.c **** 	means we can always expect exclusive access to the event list here.
1814:FreeRTOS/Source/tasks.c **** 	
1815:FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
1816:FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
1817:FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 2635              		.loc 1 1817 0
 2636 0008 7B68     		ldr	r3, [r7, #4]
 2637 000a DB68     		ldr	r3, [r3, #12]
 2638 000c DB68     		ldr	r3, [r3, #12]
 2639 000e BB60     		str	r3, [r7, #8]
1818:FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
1819:FreeRTOS/Source/tasks.c **** 	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2640              		.loc 1 1819 0
 2641 0010 BB68     		ldr	r3, [r7, #8]
 2642 0012 1833     		adds	r3, r3, #24
 2643 0014 1846     		mov	r0, r3
 2644 0016 FFF7FEFF 		bl	vListRemove
1820:FreeRTOS/Source/tasks.c **** 
1821:FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
 2645              		.loc 1 1821 0
 2646 001a 40F20003 		movw	r3, #:lower16:uxSchedulerSuspended
 2647 001e C0F20003 		movt	r3, #:upper16:uxSchedulerSuspended
 2648 0022 1B68     		ldr	r3, [r3]
 2649 0024 002B     		cmp	r3, #0
 2650 0026 26D1     		bne	.L127
1822:FreeRTOS/Source/tasks.c **** 	{
1823:FreeRTOS/Source/tasks.c **** 		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 2651              		.loc 1 1823 0
 2652 0028 BB68     		ldr	r3, [r7, #8]
 2653 002a 0433     		adds	r3, r3, #4
 2654 002c 1846     		mov	r0, r3
 2655 002e FFF7FEFF 		bl	vListRemove
1824:FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyQueue( pxUnblockedTCB );
 2656              		.loc 1 1824 0
 2657 0032 BB68     		ldr	r3, [r7, #8]
 2658 0034 DA6A     		ldr	r2, [r3, #44]
 2659 0036 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2660 003a C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2661 003e 1B68     		ldr	r3, [r3]
 2662 0040 9A42     		cmp	r2, r3
 2663 0042 06D9     		bls	.L128
 2664              		.loc 1 1824 0 is_stmt 0 discriminator 1
 2665 0044 BB68     		ldr	r3, [r7, #8]
 2666 0046 DA6A     		ldr	r2, [r3, #44]
 2667 0048 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 2668 004c C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 2669 0050 1A60     		str	r2, [r3]
 2670              	.L128:
 2671              		.loc 1 1824 0 discriminator 2
 2672 0052 BB68     		ldr	r3, [r7, #8]
 2673 0054 DA6A     		ldr	r2, [r3, #44]
 2674 0056 1346     		mov	r3, r2
 2675 0058 9B00     		lsls	r3, r3, #2
 2676 005a 1344     		add	r3, r3, r2
 2677 005c 9B00     		lsls	r3, r3, #2
 2678 005e 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 2679 0062 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 2680 0066 1A44     		add	r2, r2, r3
 2681 0068 BB68     		ldr	r3, [r7, #8]
 2682 006a 0433     		adds	r3, r3, #4
 2683 006c 1046     		mov	r0, r2
 2684 006e 1946     		mov	r1, r3
 2685 0070 FFF7FEFF 		bl	vListInsertEnd
 2686 0074 08E0     		b	.L129
 2687              	.L127:
1825:FreeRTOS/Source/tasks.c **** 	}
1826:FreeRTOS/Source/tasks.c **** 	else
1827:FreeRTOS/Source/tasks.c **** 	{
1828:FreeRTOS/Source/tasks.c **** 		/* We cannot access the delayed or ready lists, so will hold this
1829:FreeRTOS/Source/tasks.c **** 		task pending until the scheduler is resumed. */
1830:FreeRTOS/Source/tasks.c **** 		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2688              		.loc 1 1830 0 is_stmt 1
 2689 0076 BB68     		ldr	r3, [r7, #8]
 2690 0078 1833     		adds	r3, r3, #24
 2691 007a 40F20000 		movw	r0, #:lower16:xPendingReadyList
 2692 007e C0F20000 		movt	r0, #:upper16:xPendingReadyList
 2693 0082 1946     		mov	r1, r3
 2694 0084 FFF7FEFF 		bl	vListInsertEnd
 2695              	.L129:
1831:FreeRTOS/Source/tasks.c **** 	}
1832:FreeRTOS/Source/tasks.c **** 
1833:FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2696              		.loc 1 1833 0
 2697 0088 BB68     		ldr	r3, [r7, #8]
 2698 008a DA6A     		ldr	r2, [r3, #44]
 2699 008c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 2700 0090 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 2701 0094 1B68     		ldr	r3, [r3]
 2702 0096 DB6A     		ldr	r3, [r3, #44]
 2703 0098 9A42     		cmp	r2, r3
 2704 009a 02D3     		bcc	.L130
1834:FreeRTOS/Source/tasks.c **** 	{
1835:FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
1836:FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
1837:FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
1838:FreeRTOS/Source/tasks.c **** 		switch now. */
1839:FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 2705              		.loc 1 1839 0
 2706 009c 0123     		movs	r3, #1
 2707 009e FB60     		str	r3, [r7, #12]
 2708 00a0 01E0     		b	.L131
 2709              	.L130:
1840:FreeRTOS/Source/tasks.c **** 	}
1841:FreeRTOS/Source/tasks.c **** 	else
1842:FreeRTOS/Source/tasks.c **** 	{
1843:FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 2710              		.loc 1 1843 0
 2711 00a2 0023     		movs	r3, #0
 2712 00a4 FB60     		str	r3, [r7, #12]
 2713              	.L131:
1844:FreeRTOS/Source/tasks.c **** 	}
1845:FreeRTOS/Source/tasks.c **** 
1846:FreeRTOS/Source/tasks.c **** 	return xReturn;
 2714              		.loc 1 1846 0
 2715 00a6 FB68     		ldr	r3, [r7, #12]
1847:FreeRTOS/Source/tasks.c **** }
 2716              		.loc 1 1847 0
 2717 00a8 1846     		mov	r0, r3
 2718 00aa 1037     		adds	r7, r7, #16
 2719 00ac BD46     		mov	sp, r7
 2720              		@ sp needed
 2721 00ae 80BD     		pop	{r7, pc}
 2722              		.cfi_endproc
 2723              	.LFE135:
 2725              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 2726              		.align	2
 2727              		.global	vTaskSetTimeOutState
 2728              		.thumb
 2729              		.thumb_func
 2731              	vTaskSetTimeOutState:
 2732              	.LFB136:
1848:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1849:FreeRTOS/Source/tasks.c **** 
1850:FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
1851:FreeRTOS/Source/tasks.c **** {
 2733              		.loc 1 1851 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 8
 2736              		@ frame_needed = 1, uses_anonymous_args = 0
 2737              		@ link register save eliminated.
 2738 0000 80B4     		push	{r7}
 2739              	.LCFI74:
 2740              		.cfi_def_cfa_offset 4
 2741              		.cfi_offset 7, -4
 2742 0002 83B0     		sub	sp, sp, #12
 2743              	.LCFI75:
 2744              		.cfi_def_cfa_offset 16
 2745 0004 00AF     		add	r7, sp, #0
 2746              	.LCFI76:
 2747              		.cfi_def_cfa_register 7
 2748 0006 7860     		str	r0, [r7, #4]
1852:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1853:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 2749              		.loc 1 1853 0
 2750 0008 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2751 000c C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2752 0010 1A68     		ldr	r2, [r3]
 2753 0012 7B68     		ldr	r3, [r7, #4]
 2754 0014 1A60     		str	r2, [r3]
1854:FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 2755              		.loc 1 1854 0
 2756 0016 40F20003 		movw	r3, #:lower16:xTickCount
 2757 001a C0F20003 		movt	r3, #:upper16:xTickCount
 2758 001e 1A68     		ldr	r2, [r3]
 2759 0020 7B68     		ldr	r3, [r7, #4]
 2760 0022 5A60     		str	r2, [r3, #4]
1855:FreeRTOS/Source/tasks.c **** }
 2761              		.loc 1 1855 0
 2762 0024 0C37     		adds	r7, r7, #12
 2763 0026 BD46     		mov	sp, r7
 2764              		@ sp needed
 2765 0028 5DF8047B 		ldr	r7, [sp], #4
 2766 002c 7047     		bx	lr
 2767              		.cfi_endproc
 2768              	.LFE136:
 2770 002e 00BF     		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 2771              		.align	2
 2772              		.global	xTaskCheckForTimeOut
 2773              		.thumb
 2774              		.thumb_func
 2776              	xTaskCheckForTimeOut:
 2777              	.LFB137:
1856:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1857:FreeRTOS/Source/tasks.c **** 
1858:FreeRTOS/Source/tasks.c **** portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToW
1859:FreeRTOS/Source/tasks.c **** {
 2778              		.loc 1 1859 0
 2779              		.cfi_startproc
 2780              		@ args = 0, pretend = 0, frame = 16
 2781              		@ frame_needed = 1, uses_anonymous_args = 0
 2782 0000 80B5     		push	{r7, lr}
 2783              	.LCFI77:
 2784              		.cfi_def_cfa_offset 8
 2785              		.cfi_offset 7, -8
 2786              		.cfi_offset 14, -4
 2787 0002 84B0     		sub	sp, sp, #16
 2788              	.LCFI78:
 2789              		.cfi_def_cfa_offset 24
 2790 0004 00AF     		add	r7, sp, #0
 2791              	.LCFI79:
 2792              		.cfi_def_cfa_register 7
 2793 0006 7860     		str	r0, [r7, #4]
 2794 0008 3960     		str	r1, [r7]
1860:FreeRTOS/Source/tasks.c **** portBASE_TYPE xReturn;
1861:FreeRTOS/Source/tasks.c **** 
1862:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
1863:FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
1864:FreeRTOS/Source/tasks.c **** 
1865:FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2795              		.loc 1 1865 0
 2796 000a FFF7FEFF 		bl	vPortEnterCritical
1866:FreeRTOS/Source/tasks.c **** 	{
1867:FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
1868:FreeRTOS/Source/tasks.c **** 			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
1869:FreeRTOS/Source/tasks.c **** 			the maximum block time then the task should block indefinitely, and
1870:FreeRTOS/Source/tasks.c **** 			therefore never time out. */
1871:FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 2797              		.loc 1 1871 0
 2798 000e 3B68     		ldr	r3, [r7]
 2799 0010 1B68     		ldr	r3, [r3]
 2800 0012 B3F1FF3F 		cmp	r3, #-1
 2801 0016 02D1     		bne	.L135
1872:FreeRTOS/Source/tasks.c **** 			{
1873:FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 2802              		.loc 1 1873 0
 2803 0018 0023     		movs	r3, #0
 2804 001a FB60     		str	r3, [r7, #12]
 2805 001c 35E0     		b	.L136
 2806              	.L135:
1874:FreeRTOS/Source/tasks.c **** 			}
1875:FreeRTOS/Source/tasks.c **** 			else /* We are not blocking indefinitely, perform the checks below. */
1876:FreeRTOS/Source/tasks.c **** 		#endif
1877:FreeRTOS/Source/tasks.c **** 
1878:FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTi
 2807              		.loc 1 1878 0
 2808 001e 7B68     		ldr	r3, [r7, #4]
 2809 0020 1A68     		ldr	r2, [r3]
 2810 0022 40F20003 		movw	r3, #:lower16:xNumOfOverflows
 2811 0026 C0F20003 		movt	r3, #:upper16:xNumOfOverflows
 2812 002a 1B68     		ldr	r3, [r3]
 2813 002c 9A42     		cmp	r2, r3
 2814 002e 0BD0     		beq	.L137
 2815              		.loc 1 1878 0 is_stmt 0 discriminator 1
 2816 0030 7B68     		ldr	r3, [r7, #4]
 2817 0032 5A68     		ldr	r2, [r3, #4]
 2818 0034 40F20003 		movw	r3, #:lower16:xTickCount
 2819 0038 C0F20003 		movt	r3, #:upper16:xTickCount
 2820 003c 1B68     		ldr	r3, [r3]
 2821 003e 9A42     		cmp	r2, r3
 2822 0040 02D8     		bhi	.L137
1879:FreeRTOS/Source/tasks.c **** 		{
1880:FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which vTaskSetTimeout()
1881:FreeRTOS/Source/tasks.c **** 			was called, but has also overflowed since vTaskSetTimeOut() was called.
1882:FreeRTOS/Source/tasks.c **** 			It must have wrapped all the way around and gone past us again. This
1883:FreeRTOS/Source/tasks.c **** 			passed since vTaskSetTimeout() was called. */
1884:FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2823              		.loc 1 1884 0 is_stmt 1
 2824 0042 0123     		movs	r3, #1
 2825 0044 FB60     		str	r3, [r7, #12]
 2826 0046 20E0     		b	.L136
 2827              	.L137:
1885:FreeRTOS/Source/tasks.c **** 		}
1886:FreeRTOS/Source/tasks.c **** 		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEn
 2828              		.loc 1 1886 0
 2829 0048 40F20003 		movw	r3, #:lower16:xTickCount
 2830 004c C0F20003 		movt	r3, #:upper16:xTickCount
 2831 0050 1A68     		ldr	r2, [r3]
 2832 0052 7B68     		ldr	r3, [r7, #4]
 2833 0054 5B68     		ldr	r3, [r3, #4]
 2834 0056 D21A     		subs	r2, r2, r3
 2835 0058 3B68     		ldr	r3, [r7]
 2836 005a 1B68     		ldr	r3, [r3]
 2837 005c 9A42     		cmp	r2, r3
 2838 005e 12D2     		bcs	.L138
1887:FreeRTOS/Source/tasks.c **** 		{
1888:FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
1889:FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
 2839              		.loc 1 1889 0
 2840 0060 3B68     		ldr	r3, [r7]
 2841 0062 1A68     		ldr	r2, [r3]
 2842 0064 7B68     		ldr	r3, [r7, #4]
 2843 0066 5968     		ldr	r1, [r3, #4]
 2844 0068 40F20003 		movw	r3, #:lower16:xTickCount
 2845 006c C0F20003 		movt	r3, #:upper16:xTickCount
 2846 0070 1B68     		ldr	r3, [r3]
 2847 0072 CB1A     		subs	r3, r1, r3
 2848 0074 1A44     		add	r2, r2, r3
 2849 0076 3B68     		ldr	r3, [r7]
 2850 0078 1A60     		str	r2, [r3]
1890:FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 2851              		.loc 1 1890 0
 2852 007a 7868     		ldr	r0, [r7, #4]
 2853 007c FFF7FEFF 		bl	vTaskSetTimeOutState
1891:FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 2854              		.loc 1 1891 0
 2855 0080 0023     		movs	r3, #0
 2856 0082 FB60     		str	r3, [r7, #12]
 2857 0084 01E0     		b	.L136
 2858              	.L138:
1892:FreeRTOS/Source/tasks.c **** 		}
1893:FreeRTOS/Source/tasks.c **** 		else
1894:FreeRTOS/Source/tasks.c **** 		{
1895:FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 2859              		.loc 1 1895 0
 2860 0086 0123     		movs	r3, #1
 2861 0088 FB60     		str	r3, [r7, #12]
 2862              	.L136:
1896:FreeRTOS/Source/tasks.c **** 		}
1897:FreeRTOS/Source/tasks.c **** 	}
1898:FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 2863              		.loc 1 1898 0
 2864 008a FFF7FEFF 		bl	vPortExitCritical
1899:FreeRTOS/Source/tasks.c **** 
1900:FreeRTOS/Source/tasks.c **** 	return xReturn;
 2865              		.loc 1 1900 0
 2866 008e FB68     		ldr	r3, [r7, #12]
1901:FreeRTOS/Source/tasks.c **** }
 2867              		.loc 1 1901 0
 2868 0090 1846     		mov	r0, r3
 2869 0092 1037     		adds	r7, r7, #16
 2870 0094 BD46     		mov	sp, r7
 2871              		@ sp needed
 2872 0096 80BD     		pop	{r7, pc}
 2873              		.cfi_endproc
 2874              	.LFE137:
 2876              		.section	.text.vTaskMissedYield,"ax",%progbits
 2877              		.align	2
 2878              		.global	vTaskMissedYield
 2879              		.thumb
 2880              		.thumb_func
 2882              	vTaskMissedYield:
 2883              	.LFB138:
1902:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1903:FreeRTOS/Source/tasks.c **** 
1904:FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
1905:FreeRTOS/Source/tasks.c **** {
 2884              		.loc 1 1905 0
 2885              		.cfi_startproc
 2886              		@ args = 0, pretend = 0, frame = 0
 2887              		@ frame_needed = 1, uses_anonymous_args = 0
 2888              		@ link register save eliminated.
 2889 0000 80B4     		push	{r7}
 2890              	.LCFI80:
 2891              		.cfi_def_cfa_offset 4
 2892              		.cfi_offset 7, -4
 2893 0002 00AF     		add	r7, sp, #0
 2894              	.LCFI81:
 2895              		.cfi_def_cfa_register 7
1906:FreeRTOS/Source/tasks.c **** 	xMissedYield = pdTRUE;
 2896              		.loc 1 1906 0
 2897 0004 40F20003 		movw	r3, #:lower16:xMissedYield
 2898 0008 C0F20003 		movt	r3, #:upper16:xMissedYield
 2899 000c 0122     		movs	r2, #1
 2900 000e 1A60     		str	r2, [r3]
1907:FreeRTOS/Source/tasks.c **** }
 2901              		.loc 1 1907 0
 2902 0010 BD46     		mov	sp, r7
 2903              		@ sp needed
 2904 0012 5DF8047B 		ldr	r7, [sp], #4
 2905 0016 7047     		bx	lr
 2906              		.cfi_endproc
 2907              	.LFE138:
 2909              		.section	.text.prvIdleTask,"ax",%progbits
 2910              		.align	2
 2911              		.thumb
 2912              		.thumb_func
 2914              	prvIdleTask:
 2915              	.LFB139:
1908:FreeRTOS/Source/tasks.c **** 
1909:FreeRTOS/Source/tasks.c **** /*
1910:FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
1911:FreeRTOS/Source/tasks.c ****  * The Idle task.
1912:FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
1913:FreeRTOS/Source/tasks.c ****  *
1914:FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
1915:FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
1916:FreeRTOS/Source/tasks.c ****  *
1917:FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
1918:FreeRTOS/Source/tasks.c ****  *
1919:FreeRTOS/Source/tasks.c ****  */
1920:FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
1921:FreeRTOS/Source/tasks.c **** {
 2916              		.loc 1 1921 0
 2917              		.cfi_startproc
 2918              		@ args = 0, pretend = 0, frame = 8
 2919              		@ frame_needed = 1, uses_anonymous_args = 0
 2920 0000 80B5     		push	{r7, lr}
 2921              	.LCFI82:
 2922              		.cfi_def_cfa_offset 8
 2923              		.cfi_offset 7, -8
 2924              		.cfi_offset 14, -4
 2925 0002 82B0     		sub	sp, sp, #8
 2926              	.LCFI83:
 2927              		.cfi_def_cfa_offset 16
 2928 0004 00AF     		add	r7, sp, #0
 2929              	.LCFI84:
 2930              		.cfi_def_cfa_register 7
 2931 0006 7860     		str	r0, [r7, #4]
 2932              	.L143:
1922:FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
1923:FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
1924:FreeRTOS/Source/tasks.c **** 
1925:FreeRTOS/Source/tasks.c **** 	for( ;; )
1926:FreeRTOS/Source/tasks.c **** 	{
1927:FreeRTOS/Source/tasks.c **** 		/* See if any tasks have been deleted. */
1928:FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 2933              		.loc 1 1928 0
 2934 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
1929:FreeRTOS/Source/tasks.c **** 
1930:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
1931:FreeRTOS/Source/tasks.c **** 		{
1932:FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
1933:FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
1934:FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
1935:FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
1936:FreeRTOS/Source/tasks.c **** 			taskYIELD();
1937:FreeRTOS/Source/tasks.c **** 		}
1938:FreeRTOS/Source/tasks.c **** 		#endif
1939:FreeRTOS/Source/tasks.c **** 
1940:FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
1941:FreeRTOS/Source/tasks.c **** 		{
1942:FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
1943:FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
1944:FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
1945:FreeRTOS/Source/tasks.c **** 			timeslice.
1946:FreeRTOS/Source/tasks.c **** 
1947:FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
1948:FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
1949:FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
1950:FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
1951:FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_
 2935              		.loc 1 1951 0
 2936 000c 40F20003 		movw	r3, #:lower16:pxReadyTasksLists
 2937 0010 C0F20003 		movt	r3, #:upper16:pxReadyTasksLists
 2938 0014 1B68     		ldr	r3, [r3]
 2939 0016 012B     		cmp	r3, #1
 2940 0018 02D9     		bls	.L142
1952:FreeRTOS/Source/tasks.c **** 			{
1953:FreeRTOS/Source/tasks.c **** 				taskYIELD();
 2941              		.loc 1 1953 0
 2942 001a FFF7FEFF 		bl	vPortYieldFromISR
1954:FreeRTOS/Source/tasks.c **** 			}
1955:FreeRTOS/Source/tasks.c **** 		}
1956:FreeRTOS/Source/tasks.c **** 		#endif
1957:FreeRTOS/Source/tasks.c **** 
1958:FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
1959:FreeRTOS/Source/tasks.c **** 		{
1960:FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
1961:FreeRTOS/Source/tasks.c **** 
1962:FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
1963:FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
1964:FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
1965:FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
1966:FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
1967:FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
1968:FreeRTOS/Source/tasks.c **** 		}
1969:FreeRTOS/Source/tasks.c **** 		#endif
1970:FreeRTOS/Source/tasks.c **** 	}
 2943              		.loc 1 1970 0
 2944 001e F3E7     		b	.L143
 2945              	.L142:
 2946 0020 F2E7     		b	.L143
 2947              		.cfi_endproc
 2948              	.LFE139:
 2950 0022 00BF     		.section	.text.prvInitialiseTCBVariables,"ax",%progbits
 2951              		.align	2
 2952              		.thumb
 2953              		.thumb_func
 2955              	prvInitialiseTCBVariables:
 2956              	.LFB140:
1971:FreeRTOS/Source/tasks.c **** } /*lint !e715 pvParameters is not accessed but all task functions require the same prototype. */
1972:FreeRTOS/Source/tasks.c **** 
1973:FreeRTOS/Source/tasks.c **** 
1974:FreeRTOS/Source/tasks.c **** 
1975:FreeRTOS/Source/tasks.c **** 
1976:FreeRTOS/Source/tasks.c **** 
1977:FreeRTOS/Source/tasks.c **** 
1978:FreeRTOS/Source/tasks.c **** 
1979:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------
1980:FreeRTOS/Source/tasks.c ****  * File private functions documented at the top of the file.
1981:FreeRTOS/Source/tasks.c ****  *----------------------------------------------------------*/
1982:FreeRTOS/Source/tasks.c **** 
1983:FreeRTOS/Source/tasks.c **** 
1984:FreeRTOS/Source/tasks.c **** 
1985:FreeRTOS/Source/tasks.c **** static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned po
1986:FreeRTOS/Source/tasks.c **** {
 2957              		.loc 1 1986 0
 2958              		.cfi_startproc
 2959              		@ args = 4, pretend = 0, frame = 16
 2960              		@ frame_needed = 1, uses_anonymous_args = 0
 2961 0000 80B5     		push	{r7, lr}
 2962              	.LCFI85:
 2963              		.cfi_def_cfa_offset 8
 2964              		.cfi_offset 7, -8
 2965              		.cfi_offset 14, -4
 2966 0002 84B0     		sub	sp, sp, #16
 2967              	.LCFI86:
 2968              		.cfi_def_cfa_offset 24
 2969 0004 00AF     		add	r7, sp, #0
 2970              	.LCFI87:
 2971              		.cfi_def_cfa_register 7
 2972 0006 F860     		str	r0, [r7, #12]
 2973 0008 B960     		str	r1, [r7, #8]
 2974 000a 7A60     		str	r2, [r7, #4]
 2975 000c 3B60     		str	r3, [r7]
1987:FreeRTOS/Source/tasks.c **** 	/* Store the function name in the TCB. */
1988:FreeRTOS/Source/tasks.c **** 	#if configMAX_TASK_NAME_LEN > 1
1989:FreeRTOS/Source/tasks.c **** 	{
1990:FreeRTOS/Source/tasks.c **** 		/* Don't bring strncpy into the build unnecessarily. */
1991:FreeRTOS/Source/tasks.c **** 		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK
 2976              		.loc 1 1991 0
 2977 000e FB68     		ldr	r3, [r7, #12]
 2978 0010 3433     		adds	r3, r3, #52
 2979 0012 1846     		mov	r0, r3
 2980 0014 B968     		ldr	r1, [r7, #8]
 2981 0016 1022     		movs	r2, #16
 2982 0018 FFF7FEFF 		bl	strncpy
1992:FreeRTOS/Source/tasks.c **** 	}
1993:FreeRTOS/Source/tasks.c **** 	#endif
1994:FreeRTOS/Source/tasks.c **** 	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed 
 2983              		.loc 1 1994 0
 2984 001c FB68     		ldr	r3, [r7, #12]
 2985 001e 0022     		movs	r2, #0
 2986 0020 83F84320 		strb	r2, [r3, #67]
1995:FreeRTOS/Source/tasks.c **** 
1996:FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
1997:FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
1998:FreeRTOS/Source/tasks.c **** 	if( uxPriority >= configMAX_PRIORITIES )
 2987              		.loc 1 1998 0
 2988 0024 7B68     		ldr	r3, [r7, #4]
 2989 0026 042B     		cmp	r3, #4
 2990 0028 01D9     		bls	.L145
1999:FreeRTOS/Source/tasks.c **** 	{
2000:FreeRTOS/Source/tasks.c **** 		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
 2991              		.loc 1 2000 0
 2992 002a 0423     		movs	r3, #4
 2993 002c 7B60     		str	r3, [r7, #4]
 2994              	.L145:
2001:FreeRTOS/Source/tasks.c **** 	}
2002:FreeRTOS/Source/tasks.c **** 
2003:FreeRTOS/Source/tasks.c **** 	pxTCB->uxPriority = uxPriority;
 2995              		.loc 1 2003 0
 2996 002e FB68     		ldr	r3, [r7, #12]
 2997 0030 7A68     		ldr	r2, [r7, #4]
 2998 0032 DA62     		str	r2, [r3, #44]
2004:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
2005:FreeRTOS/Source/tasks.c **** 	{
2006:FreeRTOS/Source/tasks.c **** 		pxTCB->uxBasePriority = uxPriority;
 2999              		.loc 1 2006 0
 3000 0034 FB68     		ldr	r3, [r7, #12]
 3001 0036 7A68     		ldr	r2, [r7, #4]
 3002 0038 5A64     		str	r2, [r3, #68]
2007:FreeRTOS/Source/tasks.c **** 	}
2008:FreeRTOS/Source/tasks.c **** 	#endif
2009:FreeRTOS/Source/tasks.c **** 
2010:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 3003              		.loc 1 2010 0
 3004 003a FB68     		ldr	r3, [r7, #12]
 3005 003c 0433     		adds	r3, r3, #4
 3006 003e 1846     		mov	r0, r3
 3007 0040 FFF7FEFF 		bl	vListInitialiseItem
2011:FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 3008              		.loc 1 2011 0
 3009 0044 FB68     		ldr	r3, [r7, #12]
 3010 0046 1833     		adds	r3, r3, #24
 3011 0048 1846     		mov	r0, r3
 3012 004a FFF7FEFF 		bl	vListInitialiseItem
2012:FreeRTOS/Source/tasks.c **** 
2013:FreeRTOS/Source/tasks.c **** 	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
2014:FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
2015:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 3013              		.loc 1 2015 0
 3014 004e FB68     		ldr	r3, [r7, #12]
 3015 0050 FA68     		ldr	r2, [r7, #12]
 3016 0052 1A61     		str	r2, [r3, #16]
2016:FreeRTOS/Source/tasks.c **** 
2017:FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
2018:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPri
 3017              		.loc 1 2018 0
 3018 0054 7B68     		ldr	r3, [r7, #4]
 3019 0056 C3F10502 		rsb	r2, r3, #5
 3020 005a FB68     		ldr	r3, [r7, #12]
 3021 005c 9A61     		str	r2, [r3, #24]
2019:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 3022              		.loc 1 2019 0
 3023 005e FB68     		ldr	r3, [r7, #12]
 3024 0060 FA68     		ldr	r2, [r7, #12]
 3025 0062 5A62     		str	r2, [r3, #36]
2020:FreeRTOS/Source/tasks.c **** 
2021:FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
2022:FreeRTOS/Source/tasks.c **** 	{
2023:FreeRTOS/Source/tasks.c **** 		pxTCB->uxCriticalNesting = ( unsigned portBASE_TYPE ) 0U;
2024:FreeRTOS/Source/tasks.c **** 	}
2025:FreeRTOS/Source/tasks.c **** 	#endif
2026:FreeRTOS/Source/tasks.c **** 
2027:FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
2028:FreeRTOS/Source/tasks.c **** 	{
2029:FreeRTOS/Source/tasks.c **** 		pxTCB->pxTaskTag = NULL;
 3026              		.loc 1 2029 0
 3027 0064 FB68     		ldr	r3, [r7, #12]
 3028 0066 0022     		movs	r2, #0
 3029 0068 9A64     		str	r2, [r3, #72]
2030:FreeRTOS/Source/tasks.c **** 	}
2031:FreeRTOS/Source/tasks.c **** 	#endif
2032:FreeRTOS/Source/tasks.c **** 
2033:FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
2034:FreeRTOS/Source/tasks.c **** 	{
2035:FreeRTOS/Source/tasks.c **** 		pxTCB->ulRunTimeCounter = 0UL;
 3030              		.loc 1 2035 0
 3031 006a FB68     		ldr	r3, [r7, #12]
 3032 006c 0022     		movs	r2, #0
 3033 006e DA64     		str	r2, [r3, #76]
2036:FreeRTOS/Source/tasks.c **** 	}
2037:FreeRTOS/Source/tasks.c **** 	#endif
2038:FreeRTOS/Source/tasks.c **** 
2039:FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
2040:FreeRTOS/Source/tasks.c **** 	{
2041:FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
2042:FreeRTOS/Source/tasks.c **** 	}
2043:FreeRTOS/Source/tasks.c **** 	#else
2044:FreeRTOS/Source/tasks.c **** 	{
2045:FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
2046:FreeRTOS/Source/tasks.c **** 		( void ) usStackDepth;
2047:FreeRTOS/Source/tasks.c **** 	}
2048:FreeRTOS/Source/tasks.c **** 	#endif
2049:FreeRTOS/Source/tasks.c **** }
 3034              		.loc 1 2049 0
 3035 0070 1037     		adds	r7, r7, #16
 3036 0072 BD46     		mov	sp, r7
 3037              		@ sp needed
 3038 0074 80BD     		pop	{r7, pc}
 3039              		.cfi_endproc
 3040              	.LFE140:
 3042 0076 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3043              		.align	2
 3044              		.thumb
 3045              		.thumb_func
 3047              	prvInitialiseTaskLists:
 3048              	.LFB141:
2050:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2051:FreeRTOS/Source/tasks.c **** 
2052:FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
2053:FreeRTOS/Source/tasks.c **** 
2054:FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( xTaskHandle xTaskToModify, const xMemoryRegion * const xRegions )
2055:FreeRTOS/Source/tasks.c **** 	{
2056:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2057:FreeRTOS/Source/tasks.c **** 	
2058:FreeRTOS/Source/tasks.c **** 		if( xTaskToModify == pxCurrentTCB )
2059:FreeRTOS/Source/tasks.c **** 		{
2060:FreeRTOS/Source/tasks.c **** 			xTaskToModify = NULL;
2061:FreeRTOS/Source/tasks.c **** 		}
2062:FreeRTOS/Source/tasks.c **** 
2063:FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are deleting ourselves. */
2064:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
2065:FreeRTOS/Source/tasks.c **** 
2066:FreeRTOS/Source/tasks.c ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
2067:FreeRTOS/Source/tasks.c **** 	}
2068:FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
2069:FreeRTOS/Source/tasks.c **** #endif
2070:FreeRTOS/Source/tasks.c **** 
2071:FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
2072:FreeRTOS/Source/tasks.c **** {
 3049              		.loc 1 2072 0
 3050              		.cfi_startproc
 3051              		@ args = 0, pretend = 0, frame = 8
 3052              		@ frame_needed = 1, uses_anonymous_args = 0
 3053 0000 80B5     		push	{r7, lr}
 3054              	.LCFI88:
 3055              		.cfi_def_cfa_offset 8
 3056              		.cfi_offset 7, -8
 3057              		.cfi_offset 14, -4
 3058 0002 82B0     		sub	sp, sp, #8
 3059              	.LCFI89:
 3060              		.cfi_def_cfa_offset 16
 3061 0004 00AF     		add	r7, sp, #0
 3062              	.LCFI90:
 3063              		.cfi_def_cfa_register 7
2073:FreeRTOS/Source/tasks.c **** unsigned portBASE_TYPE uxPriority;
2074:FreeRTOS/Source/tasks.c **** 
2075:FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
 3064              		.loc 1 2075 0
 3065 0006 0023     		movs	r3, #0
 3066 0008 7B60     		str	r3, [r7, #4]
 3067 000a 0FE0     		b	.L147
 3068              	.L148:
2076:FreeRTOS/Source/tasks.c **** 	{
2077:FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
 3069              		.loc 1 2077 0 discriminator 2
 3070 000c 7A68     		ldr	r2, [r7, #4]
 3071 000e 1346     		mov	r3, r2
 3072 0010 9B00     		lsls	r3, r3, #2
 3073 0012 1344     		add	r3, r3, r2
 3074 0014 9B00     		lsls	r3, r3, #2
 3075 0016 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 3076 001a C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 3077 001e 1344     		add	r3, r3, r2
 3078 0020 1846     		mov	r0, r3
 3079 0022 FFF7FEFF 		bl	vListInitialise
2075:FreeRTOS/Source/tasks.c **** 	{
 3080              		.loc 1 2075 0 discriminator 2
 3081 0026 7B68     		ldr	r3, [r7, #4]
 3082 0028 0133     		adds	r3, r3, #1
 3083 002a 7B60     		str	r3, [r7, #4]
 3084              	.L147:
2075:FreeRTOS/Source/tasks.c **** 	{
 3085              		.loc 1 2075 0 is_stmt 0 discriminator 1
 3086 002c 7B68     		ldr	r3, [r7, #4]
 3087 002e 042B     		cmp	r3, #4
 3088 0030 ECD9     		bls	.L148
2078:FreeRTOS/Source/tasks.c **** 	}
2079:FreeRTOS/Source/tasks.c **** 
2080:FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList1 );
 3089              		.loc 1 2080 0 is_stmt 1
 3090 0032 40F20000 		movw	r0, #:lower16:xDelayedTaskList1
 3091 0036 C0F20000 		movt	r0, #:upper16:xDelayedTaskList1
 3092 003a FFF7FEFF 		bl	vListInitialise
2081:FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xDelayedTaskList2 );
 3093              		.loc 1 2081 0
 3094 003e 40F20000 		movw	r0, #:lower16:xDelayedTaskList2
 3095 0042 C0F20000 		movt	r0, #:upper16:xDelayedTaskList2
 3096 0046 FFF7FEFF 		bl	vListInitialise
2082:FreeRTOS/Source/tasks.c **** 	vListInitialise( ( xList * ) &xPendingReadyList );
 3097              		.loc 1 2082 0
 3098 004a 40F20000 		movw	r0, #:lower16:xPendingReadyList
 3099 004e C0F20000 		movt	r0, #:upper16:xPendingReadyList
 3100 0052 FFF7FEFF 		bl	vListInitialise
2083:FreeRTOS/Source/tasks.c **** 
2084:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2085:FreeRTOS/Source/tasks.c **** 	{
2086:FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xTasksWaitingTermination );
 3101              		.loc 1 2086 0
 3102 0056 40F20000 		movw	r0, #:lower16:xTasksWaitingTermination
 3103 005a C0F20000 		movt	r0, #:upper16:xTasksWaitingTermination
 3104 005e FFF7FEFF 		bl	vListInitialise
2087:FreeRTOS/Source/tasks.c **** 	}
2088:FreeRTOS/Source/tasks.c **** 	#endif
2089:FreeRTOS/Source/tasks.c **** 
2090:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
2091:FreeRTOS/Source/tasks.c **** 	{
2092:FreeRTOS/Source/tasks.c **** 		vListInitialise( ( xList * ) &xSuspendedTaskList );
 3105              		.loc 1 2092 0
 3106 0062 40F20000 		movw	r0, #:lower16:xSuspendedTaskList
 3107 0066 C0F20000 		movt	r0, #:upper16:xSuspendedTaskList
 3108 006a FFF7FEFF 		bl	vListInitialise
2093:FreeRTOS/Source/tasks.c **** 	}
2094:FreeRTOS/Source/tasks.c **** 	#endif
2095:FreeRTOS/Source/tasks.c **** 
2096:FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
2097:FreeRTOS/Source/tasks.c **** 	using list2. */
2098:FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3109              		.loc 1 2098 0
 3110 006e 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3111 0072 C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3112 0076 40F20002 		movw	r2, #:lower16:xDelayedTaskList1
 3113 007a C0F20002 		movt	r2, #:upper16:xDelayedTaskList1
 3114 007e 1A60     		str	r2, [r3]
2099:FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3115              		.loc 1 2099 0
 3116 0080 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3117 0084 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3118 0088 40F20002 		movw	r2, #:lower16:xDelayedTaskList2
 3119 008c C0F20002 		movt	r2, #:upper16:xDelayedTaskList2
 3120 0090 1A60     		str	r2, [r3]
2100:FreeRTOS/Source/tasks.c **** }
 3121              		.loc 1 2100 0
 3122 0092 0837     		adds	r7, r7, #8
 3123 0094 BD46     		mov	sp, r7
 3124              		@ sp needed
 3125 0096 80BD     		pop	{r7, pc}
 3126              		.cfi_endproc
 3127              	.LFE141:
 3129              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3130              		.align	2
 3131              		.thumb
 3132              		.thumb_func
 3134              	prvCheckTasksWaitingTermination:
 3135              	.LFB142:
2101:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2102:FreeRTOS/Source/tasks.c **** 
2103:FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
2104:FreeRTOS/Source/tasks.c **** {
 3136              		.loc 1 2104 0
 3137              		.cfi_startproc
 3138              		@ args = 0, pretend = 0, frame = 8
 3139              		@ frame_needed = 1, uses_anonymous_args = 0
 3140 0000 80B5     		push	{r7, lr}
 3141              	.LCFI91:
 3142              		.cfi_def_cfa_offset 8
 3143              		.cfi_offset 7, -8
 3144              		.cfi_offset 14, -4
 3145 0002 82B0     		sub	sp, sp, #8
 3146              	.LCFI92:
 3147              		.cfi_def_cfa_offset 16
 3148 0004 00AF     		add	r7, sp, #0
 3149              	.LCFI93:
 3150              		.cfi_def_cfa_register 7
 3151              	.LBB8:
2105:FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
2106:FreeRTOS/Source/tasks.c **** 	{
2107:FreeRTOS/Source/tasks.c **** 		portBASE_TYPE xListIsEmpty;
2108:FreeRTOS/Source/tasks.c **** 
2109:FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
2110:FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
2111:FreeRTOS/Source/tasks.c **** 		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
 3152              		.loc 1 2111 0
 3153 0006 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3154 000a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3155 000e 1B68     		ldr	r3, [r3]
 3156 0010 002B     		cmp	r3, #0
 3157 0012 3AD0     		beq	.L149
2112:FreeRTOS/Source/tasks.c **** 		{
2113:FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3158              		.loc 1 2113 0
 3159 0014 FFF7FEFF 		bl	vTaskSuspendAll
2114:FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 3160              		.loc 1 2114 0
 3161 0018 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3162 001c C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3163 0020 1B68     		ldr	r3, [r3]
 3164 0022 002B     		cmp	r3, #0
 3165 0024 14BF     		ite	ne
 3166 0026 0023     		movne	r3, #0
 3167 0028 0123     		moveq	r3, #1
 3168 002a DBB2     		uxtb	r3, r3
 3169 002c 7B60     		str	r3, [r7, #4]
2115:FreeRTOS/Source/tasks.c **** 			xTaskResumeAll();
 3170              		.loc 1 2115 0
 3171 002e FFF7FEFF 		bl	xTaskResumeAll
2116:FreeRTOS/Source/tasks.c **** 
2117:FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
 3172              		.loc 1 2117 0
 3173 0032 7B68     		ldr	r3, [r7, #4]
 3174 0034 002B     		cmp	r3, #0
 3175 0036 28D1     		bne	.L149
 3176              	.LBB9:
2118:FreeRTOS/Source/tasks.c **** 			{
2119:FreeRTOS/Source/tasks.c **** 				tskTCB *pxTCB;
2120:FreeRTOS/Source/tasks.c **** 
2121:FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
 3177              		.loc 1 2121 0
 3178 0038 FFF7FEFF 		bl	vPortEnterCritical
2122:FreeRTOS/Source/tasks.c **** 				{
2123:FreeRTOS/Source/tasks.c **** 					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
 3179              		.loc 1 2123 0
 3180 003c 40F20003 		movw	r3, #:lower16:xTasksWaitingTermination
 3181 0040 C0F20003 		movt	r3, #:upper16:xTasksWaitingTermination
 3182 0044 DB68     		ldr	r3, [r3, #12]
 3183 0046 DB68     		ldr	r3, [r3, #12]
 3184 0048 3B60     		str	r3, [r7]
2124:FreeRTOS/Source/tasks.c **** 					vListRemove( &( pxTCB->xGenericListItem ) );
 3185              		.loc 1 2124 0
 3186 004a 3B68     		ldr	r3, [r7]
 3187 004c 0433     		adds	r3, r3, #4
 3188 004e 1846     		mov	r0, r3
 3189 0050 FFF7FEFF 		bl	vListRemove
2125:FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 3190              		.loc 1 2125 0
 3191 0054 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3192 0058 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3193 005c 1B68     		ldr	r3, [r3]
 3194 005e 5A1E     		subs	r2, r3, #1
 3195 0060 40F20003 		movw	r3, #:lower16:uxCurrentNumberOfTasks
 3196 0064 C0F20003 		movt	r3, #:upper16:uxCurrentNumberOfTasks
 3197 0068 1A60     		str	r2, [r3]
2126:FreeRTOS/Source/tasks.c **** 					--uxTasksDeleted;
 3198              		.loc 1 2126 0
 3199 006a 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3200 006e C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3201 0072 1B68     		ldr	r3, [r3]
 3202 0074 5A1E     		subs	r2, r3, #1
 3203 0076 40F20003 		movw	r3, #:lower16:uxTasksDeleted
 3204 007a C0F20003 		movt	r3, #:upper16:uxTasksDeleted
 3205 007e 1A60     		str	r2, [r3]
2127:FreeRTOS/Source/tasks.c **** 				}
2128:FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
 3206              		.loc 1 2128 0
 3207 0080 FFF7FEFF 		bl	vPortExitCritical
2129:FreeRTOS/Source/tasks.c **** 
2130:FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 3208              		.loc 1 2130 0
 3209 0084 3868     		ldr	r0, [r7]
 3210 0086 FFF7FEFF 		bl	prvDeleteTCB
 3211              	.L149:
 3212              	.LBE9:
 3213              	.LBE8:
2131:FreeRTOS/Source/tasks.c **** 			}
2132:FreeRTOS/Source/tasks.c **** 		}
2133:FreeRTOS/Source/tasks.c **** 	}
2134:FreeRTOS/Source/tasks.c **** 	#endif
2135:FreeRTOS/Source/tasks.c **** }
 3214              		.loc 1 2135 0
 3215 008a 0837     		adds	r7, r7, #8
 3216 008c BD46     		mov	sp, r7
 3217              		@ sp needed
 3218 008e 80BD     		pop	{r7, pc}
 3219              		.cfi_endproc
 3220              	.LFE142:
 3222              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 3223              		.align	2
 3224              		.thumb
 3225              		.thumb_func
 3227              	prvAddCurrentTaskToDelayedList:
 3228              	.LFB143:
2136:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2137:FreeRTOS/Source/tasks.c **** 
2138:FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
2139:FreeRTOS/Source/tasks.c **** {
 3229              		.loc 1 2139 0
 3230              		.cfi_startproc
 3231              		@ args = 0, pretend = 0, frame = 8
 3232              		@ frame_needed = 1, uses_anonymous_args = 0
 3233 0000 80B5     		push	{r7, lr}
 3234              	.LCFI94:
 3235              		.cfi_def_cfa_offset 8
 3236              		.cfi_offset 7, -8
 3237              		.cfi_offset 14, -4
 3238 0002 82B0     		sub	sp, sp, #8
 3239              	.LCFI95:
 3240              		.cfi_def_cfa_offset 16
 3241 0004 00AF     		add	r7, sp, #0
 3242              	.LCFI96:
 3243              		.cfi_def_cfa_register 7
 3244 0006 7860     		str	r0, [r7, #4]
2140:FreeRTOS/Source/tasks.c **** 	/* The list item will be inserted in wake time order. */
2141:FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 3245              		.loc 1 2141 0
 3246 0008 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3247 000c C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3248 0010 1B68     		ldr	r3, [r3]
 3249 0012 7A68     		ldr	r2, [r7, #4]
 3250 0014 5A60     		str	r2, [r3, #4]
2142:FreeRTOS/Source/tasks.c **** 
2143:FreeRTOS/Source/tasks.c **** 	if( xTimeToWake < xTickCount )
 3251              		.loc 1 2143 0
 3252 0016 40F20003 		movw	r3, #:lower16:xTickCount
 3253 001a C0F20003 		movt	r3, #:upper16:xTickCount
 3254 001e 1B68     		ldr	r3, [r3]
 3255 0020 7A68     		ldr	r2, [r7, #4]
 3256 0022 9A42     		cmp	r2, r3
 3257 0024 0FD2     		bcs	.L152
2144:FreeRTOS/Source/tasks.c **** 	{
2145:FreeRTOS/Source/tasks.c **** 		/* Wake time has overflowed.  Place this item in the overflow list. */
2146:FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericList
 3258              		.loc 1 2146 0
 3259 0026 40F20003 		movw	r3, #:lower16:pxOverflowDelayedTaskList
 3260 002a C0F20003 		movt	r3, #:upper16:pxOverflowDelayedTaskList
 3261 002e 1A68     		ldr	r2, [r3]
 3262 0030 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3263 0034 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3264 0038 1B68     		ldr	r3, [r3]
 3265 003a 0433     		adds	r3, r3, #4
 3266 003c 1046     		mov	r0, r2
 3267 003e 1946     		mov	r1, r3
 3268 0040 FFF7FEFF 		bl	vListInsert
 3269 0044 1CE0     		b	.L151
 3270              	.L152:
2147:FreeRTOS/Source/tasks.c **** 	}
2148:FreeRTOS/Source/tasks.c **** 	else
2149:FreeRTOS/Source/tasks.c **** 	{
2150:FreeRTOS/Source/tasks.c **** 		/* The wake time has not overflowed, so we can use the current block list. */
2151:FreeRTOS/Source/tasks.c **** 		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) )
 3271              		.loc 1 2151 0
 3272 0046 40F20003 		movw	r3, #:lower16:pxDelayedTaskList
 3273 004a C0F20003 		movt	r3, #:upper16:pxDelayedTaskList
 3274 004e 1A68     		ldr	r2, [r3]
 3275 0050 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3276 0054 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3277 0058 1B68     		ldr	r3, [r3]
 3278 005a 0433     		adds	r3, r3, #4
 3279 005c 1046     		mov	r0, r2
 3280 005e 1946     		mov	r1, r3
 3281 0060 FFF7FEFF 		bl	vListInsert
2152:FreeRTOS/Source/tasks.c **** 
2153:FreeRTOS/Source/tasks.c **** 		/* If the task entering the blocked state was placed at the head of the
2154:FreeRTOS/Source/tasks.c **** 		list of blocked tasks then xNextTaskUnblockTime needs to be updated
2155:FreeRTOS/Source/tasks.c **** 		too. */
2156:FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xNextTaskUnblockTime )
 3282              		.loc 1 2156 0
 3283 0064 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3284 0068 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3285 006c 1B68     		ldr	r3, [r3]
 3286 006e 7A68     		ldr	r2, [r7, #4]
 3287 0070 9A42     		cmp	r2, r3
 3288 0072 05D2     		bcs	.L151
2157:FreeRTOS/Source/tasks.c **** 		{
2158:FreeRTOS/Source/tasks.c **** 			xNextTaskUnblockTime = xTimeToWake;
 3289              		.loc 1 2158 0
 3290 0074 40F20003 		movw	r3, #:lower16:xNextTaskUnblockTime
 3291 0078 C0F20003 		movt	r3, #:upper16:xNextTaskUnblockTime
 3292 007c 7A68     		ldr	r2, [r7, #4]
 3293 007e 1A60     		str	r2, [r3]
 3294              	.L151:
2159:FreeRTOS/Source/tasks.c **** 		}
2160:FreeRTOS/Source/tasks.c **** 	}
2161:FreeRTOS/Source/tasks.c **** }
 3295              		.loc 1 2161 0
 3296 0080 0837     		adds	r7, r7, #8
 3297 0082 BD46     		mov	sp, r7
 3298              		@ sp needed
 3299 0084 80BD     		pop	{r7, pc}
 3300              		.cfi_endproc
 3301              	.LFE143:
 3303 0086 00BF     		.section	.text.prvAllocateTCBAndStack,"ax",%progbits
 3304              		.align	2
 3305              		.thumb
 3306              		.thumb_func
 3308              	prvAllocateTCBAndStack:
 3309              	.LFB144:
2162:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2163:FreeRTOS/Source/tasks.c **** 
2164:FreeRTOS/Source/tasks.c **** static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer 
2165:FreeRTOS/Source/tasks.c **** {
 3310              		.loc 1 2165 0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 16
 3313              		@ frame_needed = 1, uses_anonymous_args = 0
 3314 0000 80B5     		push	{r7, lr}
 3315              	.LCFI97:
 3316              		.cfi_def_cfa_offset 8
 3317              		.cfi_offset 7, -8
 3318              		.cfi_offset 14, -4
 3319 0002 84B0     		sub	sp, sp, #16
 3320              	.LCFI98:
 3321              		.cfi_def_cfa_offset 24
 3322 0004 00AF     		add	r7, sp, #0
 3323              	.LCFI99:
 3324              		.cfi_def_cfa_register 7
 3325 0006 0346     		mov	r3, r0
 3326 0008 3960     		str	r1, [r7]
 3327 000a FB80     		strh	r3, [r7, #6]	@ movhi
2166:FreeRTOS/Source/tasks.c **** tskTCB *pxNewTCB;
2167:FreeRTOS/Source/tasks.c **** 
2168:FreeRTOS/Source/tasks.c **** 	/* Allocate space for the TCB.  Where the memory comes from depends on
2169:FreeRTOS/Source/tasks.c **** 	the implementation of the port malloc function. */
2170:FreeRTOS/Source/tasks.c **** 	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
 3328              		.loc 1 2170 0
 3329 000c 5020     		movs	r0, #80
 3330 000e FFF7FEFF 		bl	malloc
 3331 0012 0346     		mov	r3, r0
 3332 0014 FB60     		str	r3, [r7, #12]
2171:FreeRTOS/Source/tasks.c **** 
2172:FreeRTOS/Source/tasks.c **** 	if( pxNewTCB != NULL )
 3333              		.loc 1 2172 0
 3334 0016 FB68     		ldr	r3, [r7, #12]
 3335 0018 002B     		cmp	r3, #0
 3336 001a 1FD0     		beq	.L155
2173:FreeRTOS/Source/tasks.c **** 	{
2174:FreeRTOS/Source/tasks.c **** 		/* Allocate space for the stack used by the task being created.
2175:FreeRTOS/Source/tasks.c **** 		The base of the stack memory stored in the TCB so the task can
2176:FreeRTOS/Source/tasks.c **** 		be deleted later if required. */
2177:FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * size
 3337              		.loc 1 2177 0
 3338 001c 3B68     		ldr	r3, [r7]
 3339 001e 002B     		cmp	r3, #0
 3340 0020 06D1     		bne	.L156
 3341              		.loc 1 2177 0 is_stmt 0 discriminator 1
 3342 0022 FB88     		ldrh	r3, [r7, #6]
 3343 0024 9B00     		lsls	r3, r3, #2
 3344 0026 1846     		mov	r0, r3
 3345 0028 FFF7FEFF 		bl	malloc
 3346 002c 0346     		mov	r3, r0
 3347 002e 00E0     		b	.L157
 3348              	.L156:
 3349              		.loc 1 2177 0 discriminator 2
 3350 0030 3B68     		ldr	r3, [r7]
 3351              	.L157:
 3352              		.loc 1 2177 0 discriminator 3
 3353 0032 FA68     		ldr	r2, [r7, #12]
 3354 0034 1363     		str	r3, [r2, #48]
2178:FreeRTOS/Source/tasks.c **** 
2179:FreeRTOS/Source/tasks.c **** 		if( pxNewTCB->pxStack == NULL )
 3355              		.loc 1 2179 0 is_stmt 1 discriminator 3
 3356 0036 FB68     		ldr	r3, [r7, #12]
 3357 0038 1B6B     		ldr	r3, [r3, #48]
 3358 003a 002B     		cmp	r3, #0
 3359 003c 05D1     		bne	.L158
2180:FreeRTOS/Source/tasks.c **** 		{
2181:FreeRTOS/Source/tasks.c **** 			/* Could not allocate the stack.  Delete the allocated TCB. */
2182:FreeRTOS/Source/tasks.c **** 			vPortFree( pxNewTCB );
 3360              		.loc 1 2182 0
 3361 003e F868     		ldr	r0, [r7, #12]
 3362 0040 FFF7FEFF 		bl	free
2183:FreeRTOS/Source/tasks.c **** 			pxNewTCB = NULL;
 3363              		.loc 1 2183 0
 3364 0044 0023     		movs	r3, #0
 3365 0046 FB60     		str	r3, [r7, #12]
 3366 0048 08E0     		b	.L155
 3367              	.L158:
2184:FreeRTOS/Source/tasks.c **** 		}
2185:FreeRTOS/Source/tasks.c **** 		else
2186:FreeRTOS/Source/tasks.c **** 		{
2187:FreeRTOS/Source/tasks.c **** 			/* Just to help debugging. */
2188:FreeRTOS/Source/tasks.c **** 			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTA
 3368              		.loc 1 2188 0
 3369 004a FB68     		ldr	r3, [r7, #12]
 3370 004c 1A6B     		ldr	r2, [r3, #48]
 3371 004e FB88     		ldrh	r3, [r7, #6]
 3372 0050 9B00     		lsls	r3, r3, #2
 3373 0052 1046     		mov	r0, r2
 3374 0054 A521     		movs	r1, #165
 3375 0056 1A46     		mov	r2, r3
 3376 0058 FFF7FEFF 		bl	memset
 3377              	.L155:
2189:FreeRTOS/Source/tasks.c **** 		}
2190:FreeRTOS/Source/tasks.c **** 	}
2191:FreeRTOS/Source/tasks.c **** 
2192:FreeRTOS/Source/tasks.c **** 	return pxNewTCB;
 3378              		.loc 1 2192 0
 3379 005c FB68     		ldr	r3, [r7, #12]
2193:FreeRTOS/Source/tasks.c **** }
 3380              		.loc 1 2193 0
 3381 005e 1846     		mov	r0, r3
 3382 0060 1037     		adds	r7, r7, #16
 3383 0062 BD46     		mov	sp, r7
 3384              		@ sp needed
 3385 0064 80BD     		pop	{r7, pc}
 3386              		.cfi_endproc
 3387              	.LFE144:
 3389 0066 00BF     		.section	.rodata
 3390 000b 00       		.align	2
 3391              	.LC2:
 3392 000c 25752020 		.ascii	"%u  %c  %-16s          0   0%%  %5u\015\012\000"
 3392      25632020 
 3392      252D3136 
 3392      73202020 
 3392      20202020 
 3393 0032 0000     		.align	2
 3394              	.LC3:
 3395 0034 25752020 		.ascii	"%u  %c  %-16s %10u %3u%%  %5u\015\012\000"
 3395      25632020 
 3395      252D3136 
 3395      73202531 
 3395      30752025 
 3396              		.align	2
 3397              	.LC4:
 3398 0054 25752020 		.ascii	"%u  %c  %-16s %10u  <1%%  %5u\015\012\000"
 3398      25632020 
 3398      252D3136 
 3398      73202531 
 3398      30752020 
 3399              		.section	.text.prvGenerateRunTimeStatsForTasksInList,"ax",%progbits
 3400              		.align	2
 3401              		.thumb
 3402              		.thumb_func
 3404              	prvGenerateRunTimeStatsForTasksInList:
 3405              	.LFB145:
2194:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2195:FreeRTOS/Source/tasks.c **** 
2196:FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2197:FreeRTOS/Source/tasks.c **** 
2198:FreeRTOS/Source/tasks.c **** 	static void prvListTaskWithinSingleList( const signed char *pcWriteBuffer, xList *pxList, signed c
2199:FreeRTOS/Source/tasks.c **** 	{
2200:FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2201:FreeRTOS/Source/tasks.c **** 	unsigned short usStackRemaining;
2202:FreeRTOS/Source/tasks.c **** 
2203:FreeRTOS/Source/tasks.c **** 		/* Write the details of all the TCB's in pxList into the buffer. */
2204:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2205:FreeRTOS/Source/tasks.c **** 		do
2206:FreeRTOS/Source/tasks.c **** 		{
2207:FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2208:FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
2209:FreeRTOS/Source/tasks.c **** 			{
2210:FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxEndOfStack );
2211:FreeRTOS/Source/tasks.c **** 			}
2212:FreeRTOS/Source/tasks.c **** 			#else
2213:FreeRTOS/Source/tasks.c **** 			{
2214:FreeRTOS/Source/tasks.c **** 				usStackRemaining = usTaskCheckFreeStackSpace( ( unsigned char * ) pxNextTCB->pxStack );
2215:FreeRTOS/Source/tasks.c **** 			}
2216:FreeRTOS/Source/tasks.c **** 			#endif			
2217:FreeRTOS/Source/tasks.c **** 			
2218:FreeRTOS/Source/tasks.c **** 			sprintf( pcStatusString, ( char * ) "%s\t\t%c\t%u\t%u\t%u\r\n", pxNextTCB->pcTaskName, cStatus, 
2219:FreeRTOS/Source/tasks.c **** 			strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatusString );
2220:FreeRTOS/Source/tasks.c **** 
2221:FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
2222:FreeRTOS/Source/tasks.c **** 	}
2223:FreeRTOS/Source/tasks.c **** 
2224:FreeRTOS/Source/tasks.c **** #endif
2225:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2226:FreeRTOS/Source/tasks.c **** 
2227:FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
2228:FreeRTOS/Source/tasks.c **** 
2229:FreeRTOS/Source/tasks.c **** 	static void prvGenerateRunTimeStatsForTasksInList( const signed char *pcWriteBuffer, xList *pxList
2230:FreeRTOS/Source/tasks.c **** 	{
 3406              		.loc 1 2230 0
 3407              		.cfi_startproc
 3408              		@ args = 0, pretend = 0, frame = 40
 3409              		@ frame_needed = 1, uses_anonymous_args = 0
 3410 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3411              	.LCFI100:
 3412              		.cfi_def_cfa_offset 24
 3413              		.cfi_offset 4, -24
 3414              		.cfi_offset 5, -20
 3415              		.cfi_offset 6, -16
 3416              		.cfi_offset 7, -12
 3417              		.cfi_offset 8, -8
 3418              		.cfi_offset 14, -4
 3419 0004 8EB0     		sub	sp, sp, #56
 3420              	.LCFI101:
 3421              		.cfi_def_cfa_offset 80
 3422 0006 04AF     		add	r7, sp, #16
 3423              	.LCFI102:
 3424              		.cfi_def_cfa 7, 64
 3425 0008 F860     		str	r0, [r7, #12]
 3426 000a B960     		str	r1, [r7, #8]
 3427 000c 7A60     		str	r2, [r7, #4]
 3428 000e FB70     		strb	r3, [r7, #3]
 3429              	.LBB10:
2231:FreeRTOS/Source/tasks.c **** 	volatile tskTCB *pxNextTCB, *pxFirstTCB;
2232:FreeRTOS/Source/tasks.c **** 	unsigned long ulStatsAsPercentage;
2233:FreeRTOS/Source/tasks.c **** 
2234:FreeRTOS/Source/tasks.c **** 		/* Write the run time stats of all the TCB's in pxList into the buffer. */
2235:FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 3430              		.loc 1 2235 0
 3431 0010 BB68     		ldr	r3, [r7, #8]
 3432 0012 7B62     		str	r3, [r7, #36]
 3433 0014 7B6A     		ldr	r3, [r7, #36]
 3434 0016 5B68     		ldr	r3, [r3, #4]
 3435 0018 5A68     		ldr	r2, [r3, #4]
 3436 001a 7B6A     		ldr	r3, [r7, #36]
 3437 001c 5A60     		str	r2, [r3, #4]
 3438 001e 7B6A     		ldr	r3, [r7, #36]
 3439 0020 5A68     		ldr	r2, [r3, #4]
 3440 0022 7B6A     		ldr	r3, [r7, #36]
 3441 0024 0833     		adds	r3, r3, #8
 3442 0026 9A42     		cmp	r2, r3
 3443 0028 04D1     		bne	.L161
 3444              		.loc 1 2235 0 is_stmt 0 discriminator 1
 3445 002a 7B6A     		ldr	r3, [r7, #36]
 3446 002c 5B68     		ldr	r3, [r3, #4]
 3447 002e 5A68     		ldr	r2, [r3, #4]
 3448 0030 7B6A     		ldr	r3, [r7, #36]
 3449 0032 5A60     		str	r2, [r3, #4]
 3450              	.L161:
 3451              		.loc 1 2235 0 discriminator 2
 3452 0034 7B6A     		ldr	r3, [r7, #36]
 3453 0036 5B68     		ldr	r3, [r3, #4]
 3454 0038 DB68     		ldr	r3, [r3, #12]
 3455 003a 3B62     		str	r3, [r7, #32]
 3456              	.L167:
 3457              	.LBE10:
 3458              	.LBB11:
2236:FreeRTOS/Source/tasks.c **** 		do
2237:FreeRTOS/Source/tasks.c **** 		{
2238:FreeRTOS/Source/tasks.c **** 			/* Get next TCB in from the list. */
2239:FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 3459              		.loc 1 2239 0 is_stmt 1
 3460 003c BB68     		ldr	r3, [r7, #8]
 3461 003e FB61     		str	r3, [r7, #28]
 3462 0040 FB69     		ldr	r3, [r7, #28]
 3463 0042 5B68     		ldr	r3, [r3, #4]
 3464 0044 5A68     		ldr	r2, [r3, #4]
 3465 0046 FB69     		ldr	r3, [r7, #28]
 3466 0048 5A60     		str	r2, [r3, #4]
 3467 004a FB69     		ldr	r3, [r7, #28]
 3468 004c 5A68     		ldr	r2, [r3, #4]
 3469 004e FB69     		ldr	r3, [r7, #28]
 3470 0050 0833     		adds	r3, r3, #8
 3471 0052 9A42     		cmp	r2, r3
 3472 0054 04D1     		bne	.L162
 3473              		.loc 1 2239 0 is_stmt 0 discriminator 1
 3474 0056 FB69     		ldr	r3, [r7, #28]
 3475 0058 5B68     		ldr	r3, [r3, #4]
 3476 005a 5A68     		ldr	r2, [r3, #4]
 3477 005c FB69     		ldr	r3, [r7, #28]
 3478 005e 5A60     		str	r2, [r3, #4]
 3479              	.L162:
 3480              		.loc 1 2239 0 discriminator 2
 3481 0060 FB69     		ldr	r3, [r7, #28]
 3482 0062 5B68     		ldr	r3, [r3, #4]
 3483 0064 DB68     		ldr	r3, [r3, #12]
 3484 0066 BB61     		str	r3, [r7, #24]
 3485              	.LBE11:
2240:FreeRTOS/Source/tasks.c **** 
2241:FreeRTOS/Source/tasks.c **** 			/* Divide by zero check. */
2242:FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > 0UL )
 3486              		.loc 1 2242 0 is_stmt 1 discriminator 2
 3487 0068 7B68     		ldr	r3, [r7, #4]
 3488 006a 002B     		cmp	r3, #0
 3489 006c 70D0     		beq	.L163
2243:FreeRTOS/Source/tasks.c **** 			{
2244:FreeRTOS/Source/tasks.c **** 				/* Has the task run at all? */
2245:FreeRTOS/Source/tasks.c **** 				if( pxNextTCB->ulRunTimeCounter == 0UL )
 3490              		.loc 1 2245 0
 3491 006e BB69     		ldr	r3, [r7, #24]
 3492 0070 DB6C     		ldr	r3, [r3, #76]
 3493 0072 002B     		cmp	r3, #0
 3494 0074 1BD1     		bne	.L164
2246:FreeRTOS/Source/tasks.c **** 				{
2247:FreeRTOS/Source/tasks.c **** 					/* The task has used no CPU time at all. */
2248:FreeRTOS/Source/tasks.c **** 					sprintf( pcStatsString, ( char * ) "%u  %c  %-16s          0   0%%  %5u\r\n", (unsigned int) p
 3495              		.loc 1 2248 0
 3496 0076 BB69     		ldr	r3, [r7, #24]
 3497 0078 DD6A     		ldr	r5, [r3, #44]
 3498 007a 97F90340 		ldrsb	r4, [r7, #3]
 3499 007e BB69     		ldr	r3, [r7, #24]
 3500 0080 03F13406 		add	r6, r3, #52
 3501 0084 BB69     		ldr	r3, [r7, #24]
 3502 0086 1B6B     		ldr	r3, [r3, #48]
 3503 0088 1846     		mov	r0, r3
 3504 008a FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3505 008e 0346     		mov	r3, r0
 3506 0090 0096     		str	r6, [sp]
 3507 0092 0193     		str	r3, [sp, #4]
 3508 0094 40F20000 		movw	r0, #:lower16:pcStatsString
 3509 0098 C0F20000 		movt	r0, #:upper16:pcStatsString
 3510 009c 40F20001 		movw	r1, #:lower16:.LC2
 3511 00a0 C0F20001 		movt	r1, #:upper16:.LC2
 3512 00a4 2A46     		mov	r2, r5
 3513 00a6 2346     		mov	r3, r4
 3514 00a8 FFF7FEFF 		bl	sprintf
 3515 00ac 49E0     		b	.L165
 3516              	.L164:
2249:FreeRTOS/Source/tasks.c **** 				}
2250:FreeRTOS/Source/tasks.c **** 				else
2251:FreeRTOS/Source/tasks.c **** 				{
2252:FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
2253:FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
2254:FreeRTOS/Source/tasks.c **** 					ulTotalRunTime has already been divided by 100. */
2255:FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxNextTCB->ulRunTimeCounter / ulTotalRunTime;
 3517              		.loc 1 2255 0
 3518 00ae BB69     		ldr	r3, [r7, #24]
 3519 00b0 DA6C     		ldr	r2, [r3, #76]
 3520 00b2 7B68     		ldr	r3, [r7, #4]
 3521 00b4 B2FBF3F3 		udiv	r3, r2, r3
 3522 00b8 7B61     		str	r3, [r7, #20]
2256:FreeRTOS/Source/tasks.c **** 
2257:FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
 3523              		.loc 1 2257 0
 3524 00ba 7B69     		ldr	r3, [r7, #20]
 3525 00bc 002B     		cmp	r3, #0
 3526 00be 21D0     		beq	.L166
2258:FreeRTOS/Source/tasks.c **** 					{
2259:FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2260:FreeRTOS/Source/tasks.c **** 						{
2261:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t%lu%%\r\n", pxNextTCB->pcTaskName, pxNextTC
2262:FreeRTOS/Source/tasks.c **** 						}
2263:FreeRTOS/Source/tasks.c **** 						#else
2264:FreeRTOS/Source/tasks.c **** 						{
2265:FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2266:FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2267:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u %3u%%  %5u\r\n", (unsigned int) pxNex
 3527              		.loc 1 2267 0
 3528 00c0 BB69     		ldr	r3, [r7, #24]
 3529 00c2 DD6A     		ldr	r5, [r3, #44]
 3530 00c4 97F90340 		ldrsb	r4, [r7, #3]
 3531 00c8 BB69     		ldr	r3, [r7, #24]
 3532 00ca 03F13408 		add	r8, r3, #52
 3533 00ce BB69     		ldr	r3, [r7, #24]
 3534 00d0 DE6C     		ldr	r6, [r3, #76]
 3535 00d2 BB69     		ldr	r3, [r7, #24]
 3536 00d4 1B6B     		ldr	r3, [r3, #48]
 3537 00d6 1846     		mov	r0, r3
 3538 00d8 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3539 00dc 0346     		mov	r3, r0
 3540 00de CDF80080 		str	r8, [sp]
 3541 00e2 0196     		str	r6, [sp, #4]
 3542 00e4 7A69     		ldr	r2, [r7, #20]
 3543 00e6 0292     		str	r2, [sp, #8]
 3544 00e8 0393     		str	r3, [sp, #12]
 3545 00ea 40F20000 		movw	r0, #:lower16:pcStatsString
 3546 00ee C0F20000 		movt	r0, #:upper16:pcStatsString
 3547 00f2 40F20001 		movw	r1, #:lower16:.LC3
 3548 00f6 C0F20001 		movt	r1, #:upper16:.LC3
 3549 00fa 2A46     		mov	r2, r5
 3550 00fc 2346     		mov	r3, r4
 3551 00fe FFF7FEFF 		bl	sprintf
 3552 0102 1EE0     		b	.L165
 3553              	.L166:
2268:FreeRTOS/Source/tasks.c **** 						}
2269:FreeRTOS/Source/tasks.c **** 						#endif
2270:FreeRTOS/Source/tasks.c **** 					}
2271:FreeRTOS/Source/tasks.c **** 					else
2272:FreeRTOS/Source/tasks.c **** 					{
2273:FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
2274:FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
2275:FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
2276:FreeRTOS/Source/tasks.c **** 						{
2277:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%s\t\t%lu\t\t<1%%\r\n", pxNextTCB->pcTaskName, pxNextTCB
2278:FreeRTOS/Source/tasks.c **** 						}
2279:FreeRTOS/Source/tasks.c **** 						#else
2280:FreeRTOS/Source/tasks.c **** 						{
2281:FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
2282:FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
2283:FreeRTOS/Source/tasks.c **** 							sprintf( pcStatsString, ( char * ) "%u  %c  %-16s %10u  <1%%  %5u\r\n",  (unsigned int) pxNe
 3554              		.loc 1 2283 0
 3555 0104 BB69     		ldr	r3, [r7, #24]
 3556 0106 DD6A     		ldr	r5, [r3, #44]
 3557 0108 97F90340 		ldrsb	r4, [r7, #3]
 3558 010c BB69     		ldr	r3, [r7, #24]
 3559 010e 03F13408 		add	r8, r3, #52
 3560 0112 BB69     		ldr	r3, [r7, #24]
 3561 0114 DE6C     		ldr	r6, [r3, #76]
 3562 0116 BB69     		ldr	r3, [r7, #24]
 3563 0118 1B6B     		ldr	r3, [r3, #48]
 3564 011a 1846     		mov	r0, r3
 3565 011c FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3566 0120 0346     		mov	r3, r0
 3567 0122 CDF80080 		str	r8, [sp]
 3568 0126 0196     		str	r6, [sp, #4]
 3569 0128 0293     		str	r3, [sp, #8]
 3570 012a 40F20000 		movw	r0, #:lower16:pcStatsString
 3571 012e C0F20000 		movt	r0, #:upper16:pcStatsString
 3572 0132 40F20001 		movw	r1, #:lower16:.LC4
 3573 0136 C0F20001 		movt	r1, #:upper16:.LC4
 3574 013a 2A46     		mov	r2, r5
 3575 013c 2346     		mov	r3, r4
 3576 013e FFF7FEFF 		bl	sprintf
 3577              	.L165:
2284:FreeRTOS/Source/tasks.c **** 						}
2285:FreeRTOS/Source/tasks.c **** 						#endif
2286:FreeRTOS/Source/tasks.c **** 					}
2287:FreeRTOS/Source/tasks.c **** 				}
2288:FreeRTOS/Source/tasks.c **** 
2289:FreeRTOS/Source/tasks.c **** 				strcat( ( char * ) pcWriteBuffer, ( char * ) pcStatsString );
 3578              		.loc 1 2289 0
 3579 0142 F868     		ldr	r0, [r7, #12]
 3580 0144 40F20001 		movw	r1, #:lower16:pcStatsString
 3581 0148 C0F20001 		movt	r1, #:upper16:pcStatsString
 3582 014c FFF7FEFF 		bl	strcat
 3583              	.L163:
2290:FreeRTOS/Source/tasks.c **** 			}
2291:FreeRTOS/Source/tasks.c **** 
2292:FreeRTOS/Source/tasks.c **** 		} while( pxNextTCB != pxFirstTCB );
 3584              		.loc 1 2292 0
 3585 0150 BA69     		ldr	r2, [r7, #24]
 3586 0152 3B6A     		ldr	r3, [r7, #32]
 3587 0154 9A42     		cmp	r2, r3
 3588 0156 7FF471AF 		bne	.L167
2293:FreeRTOS/Source/tasks.c **** 	}
 3589              		.loc 1 2293 0
 3590 015a 2837     		adds	r7, r7, #40
 3591 015c BD46     		mov	sp, r7
 3592              		@ sp needed
 3593 015e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3594              		.cfi_endproc
 3595              	.LFE145:
 3597 0162 00BF     		.section	.text.usTaskCheckFreeStackSpace,"ax",%progbits
 3598              		.align	2
 3599              		.thumb
 3600              		.thumb_func
 3602              	usTaskCheckFreeStackSpace:
 3603              	.LFB146:
2294:FreeRTOS/Source/tasks.c **** 
2295:FreeRTOS/Source/tasks.c **** #endif
2296:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2297:FreeRTOS/Source/tasks.c **** 
2298:FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
2299:FreeRTOS/Source/tasks.c **** 
2300:FreeRTOS/Source/tasks.c **** 	static unsigned short usTaskCheckFreeStackSpace( const unsigned char * pucStackByte )
2301:FreeRTOS/Source/tasks.c **** 	{
 3604              		.loc 1 2301 0
 3605              		.cfi_startproc
 3606              		@ args = 0, pretend = 0, frame = 8
 3607              		@ frame_needed = 1, uses_anonymous_args = 0
 3608              		@ link register save eliminated.
 3609 0000 90B4     		push	{r4, r7}
 3610              	.LCFI103:
 3611              		.cfi_def_cfa_offset 8
 3612              		.cfi_offset 4, -8
 3613              		.cfi_offset 7, -4
 3614 0002 82B0     		sub	sp, sp, #8
 3615              	.LCFI104:
 3616              		.cfi_def_cfa_offset 16
 3617 0004 00AF     		add	r7, sp, #0
 3618              	.LCFI105:
 3619              		.cfi_def_cfa_register 7
 3620 0006 7860     		str	r0, [r7, #4]
2302:FreeRTOS/Source/tasks.c **** 	register unsigned short usCount = 0U;
 3621              		.loc 1 2302 0
 3622 0008 0024     		movs	r4, #0
2303:FreeRTOS/Source/tasks.c **** 
2304:FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == tskSTACK_FILL_BYTE )
 3623              		.loc 1 2304 0
 3624 000a 05E0     		b	.L169
 3625              	.L170:
2305:FreeRTOS/Source/tasks.c **** 		{
2306:FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3626              		.loc 1 2306 0
 3627 000c 7B68     		ldr	r3, [r7, #4]
 3628 000e 0133     		adds	r3, r3, #1
 3629 0010 7B60     		str	r3, [r7, #4]
2307:FreeRTOS/Source/tasks.c **** 			usCount++;
 3630              		.loc 1 2307 0
 3631 0012 2346     		mov	r3, r4
 3632 0014 0133     		adds	r3, r3, #1
 3633 0016 9CB2     		uxth	r4, r3
 3634              	.L169:
2304:FreeRTOS/Source/tasks.c **** 		{
 3635              		.loc 1 2304 0 discriminator 1
 3636 0018 7B68     		ldr	r3, [r7, #4]
 3637 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3638 001c A52B     		cmp	r3, #165
 3639 001e F5D0     		beq	.L170
2308:FreeRTOS/Source/tasks.c **** 		}
2309:FreeRTOS/Source/tasks.c **** 
2310:FreeRTOS/Source/tasks.c **** 		usCount /= sizeof( portSTACK_TYPE );
 3640              		.loc 1 2310 0
 3641 0020 A308     		lsrs	r3, r4, #2
 3642 0022 9CB2     		uxth	r4, r3
2311:FreeRTOS/Source/tasks.c **** 
2312:FreeRTOS/Source/tasks.c **** 		return usCount;
 3643              		.loc 1 2312 0
 3644 0024 2346     		mov	r3, r4
2313:FreeRTOS/Source/tasks.c **** 	}
 3645              		.loc 1 2313 0
 3646 0026 1846     		mov	r0, r3
 3647 0028 0837     		adds	r7, r7, #8
 3648 002a BD46     		mov	sp, r7
 3649              		@ sp needed
 3650 002c 90BC     		pop	{r4, r7}
 3651 002e 7047     		bx	lr
 3652              		.cfi_endproc
 3653              	.LFE146:
 3655              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3656              		.align	2
 3657              		.global	uxTaskGetStackHighWaterMark
 3658              		.thumb
 3659              		.thumb_func
 3661              	uxTaskGetStackHighWaterMark:
 3662              	.LFB147:
2314:FreeRTOS/Source/tasks.c **** 
2315:FreeRTOS/Source/tasks.c **** #endif
2316:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2317:FreeRTOS/Source/tasks.c **** 
2318:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
2319:FreeRTOS/Source/tasks.c **** 
2320:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxTaskGetStackHighWaterMark( xTaskHandle xTask )
2321:FreeRTOS/Source/tasks.c **** 	{
 3663              		.loc 1 2321 0
 3664              		.cfi_startproc
 3665              		@ args = 0, pretend = 0, frame = 24
 3666              		@ frame_needed = 1, uses_anonymous_args = 0
 3667 0000 80B5     		push	{r7, lr}
 3668              	.LCFI106:
 3669              		.cfi_def_cfa_offset 8
 3670              		.cfi_offset 7, -8
 3671              		.cfi_offset 14, -4
 3672 0002 86B0     		sub	sp, sp, #24
 3673              	.LCFI107:
 3674              		.cfi_def_cfa_offset 32
 3675 0004 00AF     		add	r7, sp, #0
 3676              	.LCFI108:
 3677              		.cfi_def_cfa_register 7
 3678 0006 7860     		str	r0, [r7, #4]
2322:FreeRTOS/Source/tasks.c **** 	tskTCB *pxTCB;
2323:FreeRTOS/Source/tasks.c **** 	unsigned char *pcEndOfStack;
2324:FreeRTOS/Source/tasks.c **** 	unsigned portBASE_TYPE uxReturn;
2325:FreeRTOS/Source/tasks.c **** 
2326:FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3679              		.loc 1 2326 0
 3680 0008 7B68     		ldr	r3, [r7, #4]
 3681 000a 002B     		cmp	r3, #0
 3682 000c 05D1     		bne	.L173
 3683              		.loc 1 2326 0 is_stmt 0 discriminator 1
 3684 000e 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3685 0012 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3686 0016 1B68     		ldr	r3, [r3]
 3687 0018 00E0     		b	.L174
 3688              	.L173:
 3689              		.loc 1 2326 0 discriminator 2
 3690 001a 7B68     		ldr	r3, [r7, #4]
 3691              	.L174:
 3692              		.loc 1 2326 0 discriminator 3
 3693 001c 7B61     		str	r3, [r7, #20]
2327:FreeRTOS/Source/tasks.c **** 
2328:FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
2329:FreeRTOS/Source/tasks.c **** 		{
2330:FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxStack;
 3694              		.loc 1 2330 0 is_stmt 1 discriminator 3
 3695 001e 7B69     		ldr	r3, [r7, #20]
 3696 0020 1B6B     		ldr	r3, [r3, #48]
 3697 0022 3B61     		str	r3, [r7, #16]
2331:FreeRTOS/Source/tasks.c **** 		}
2332:FreeRTOS/Source/tasks.c **** 		#else
2333:FreeRTOS/Source/tasks.c **** 		{
2334:FreeRTOS/Source/tasks.c **** 			pcEndOfStack = ( unsigned char * ) pxTCB->pxEndOfStack;
2335:FreeRTOS/Source/tasks.c **** 		}
2336:FreeRTOS/Source/tasks.c **** 		#endif
2337:FreeRTOS/Source/tasks.c **** 
2338:FreeRTOS/Source/tasks.c **** 		uxReturn = ( unsigned portBASE_TYPE ) usTaskCheckFreeStackSpace( pcEndOfStack );
 3698              		.loc 1 2338 0 discriminator 3
 3699 0024 3869     		ldr	r0, [r7, #16]
 3700 0026 FFF7FEFF 		bl	usTaskCheckFreeStackSpace
 3701 002a 0346     		mov	r3, r0
 3702 002c FB60     		str	r3, [r7, #12]
2339:FreeRTOS/Source/tasks.c **** 
2340:FreeRTOS/Source/tasks.c **** 		return uxReturn;
 3703              		.loc 1 2340 0 discriminator 3
 3704 002e FB68     		ldr	r3, [r7, #12]
2341:FreeRTOS/Source/tasks.c **** 	}
 3705              		.loc 1 2341 0 discriminator 3
 3706 0030 1846     		mov	r0, r3
 3707 0032 1837     		adds	r7, r7, #24
 3708 0034 BD46     		mov	sp, r7
 3709              		@ sp needed
 3710 0036 80BD     		pop	{r7, pc}
 3711              		.cfi_endproc
 3712              	.LFE147:
 3714              		.section	.text.prvDeleteTCB,"ax",%progbits
 3715              		.align	2
 3716              		.thumb
 3717              		.thumb_func
 3719              	prvDeleteTCB:
 3720              	.LFB148:
2342:FreeRTOS/Source/tasks.c **** 
2343:FreeRTOS/Source/tasks.c **** #endif
2344:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2345:FreeRTOS/Source/tasks.c **** 
2346:FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
2347:FreeRTOS/Source/tasks.c **** 
2348:FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( tskTCB *pxTCB )
2349:FreeRTOS/Source/tasks.c **** 	{
 3721              		.loc 1 2349 0
 3722              		.cfi_startproc
 3723              		@ args = 0, pretend = 0, frame = 8
 3724              		@ frame_needed = 1, uses_anonymous_args = 0
 3725 0000 80B5     		push	{r7, lr}
 3726              	.LCFI109:
 3727              		.cfi_def_cfa_offset 8
 3728              		.cfi_offset 7, -8
 3729              		.cfi_offset 14, -4
 3730 0002 82B0     		sub	sp, sp, #8
 3731              	.LCFI110:
 3732              		.cfi_def_cfa_offset 16
 3733 0004 00AF     		add	r7, sp, #0
 3734              	.LCFI111:
 3735              		.cfi_def_cfa_register 7
 3736 0006 7860     		str	r0, [r7, #4]
2350:FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up to
2351:FreeRTOS/Source/tasks.c **** 		the task to free any memory allocated at the application level. */
2352:FreeRTOS/Source/tasks.c **** 		vPortFreeAligned( pxTCB->pxStack );
 3737              		.loc 1 2352 0
 3738 0008 7B68     		ldr	r3, [r7, #4]
 3739 000a 1B6B     		ldr	r3, [r3, #48]
 3740 000c 1846     		mov	r0, r3
 3741 000e FFF7FEFF 		bl	free
2353:FreeRTOS/Source/tasks.c **** 		vPortFree( pxTCB );
 3742              		.loc 1 2353 0
 3743 0012 7868     		ldr	r0, [r7, #4]
 3744 0014 FFF7FEFF 		bl	free
2354:FreeRTOS/Source/tasks.c **** 	}
 3745              		.loc 1 2354 0
 3746 0018 0837     		adds	r7, r7, #8
 3747 001a BD46     		mov	sp, r7
 3748              		@ sp needed
 3749 001c 80BD     		pop	{r7, pc}
 3750              		.cfi_endproc
 3751              	.LFE148:
 3753 001e 00BF     		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3754              		.align	2
 3755              		.global	xTaskGetCurrentTaskHandle
 3756              		.thumb
 3757              		.thumb_func
 3759              	xTaskGetCurrentTaskHandle:
 3760              	.LFB149:
2355:FreeRTOS/Source/tasks.c **** 
2356:FreeRTOS/Source/tasks.c **** #endif
2357:FreeRTOS/Source/tasks.c **** 
2358:FreeRTOS/Source/tasks.c **** 
2359:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2360:FreeRTOS/Source/tasks.c **** 
2361:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
2362:FreeRTOS/Source/tasks.c **** 
2363:FreeRTOS/Source/tasks.c **** 	xTaskHandle xTaskGetCurrentTaskHandle( void )
2364:FreeRTOS/Source/tasks.c **** 	{
 3761              		.loc 1 2364 0
 3762              		.cfi_startproc
 3763              		@ args = 0, pretend = 0, frame = 8
 3764              		@ frame_needed = 1, uses_anonymous_args = 0
 3765              		@ link register save eliminated.
 3766 0000 80B4     		push	{r7}
 3767              	.LCFI112:
 3768              		.cfi_def_cfa_offset 4
 3769              		.cfi_offset 7, -4
 3770 0002 83B0     		sub	sp, sp, #12
 3771              	.LCFI113:
 3772              		.cfi_def_cfa_offset 16
 3773 0004 00AF     		add	r7, sp, #0
 3774              	.LCFI114:
 3775              		.cfi_def_cfa_register 7
2365:FreeRTOS/Source/tasks.c **** 	xTaskHandle xReturn;
2366:FreeRTOS/Source/tasks.c **** 
2367:FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
2368:FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
2369:FreeRTOS/Source/tasks.c **** 		individual execution thread. */
2370:FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3776              		.loc 1 2370 0
 3777 0006 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3778 000a C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3779 000e 1B68     		ldr	r3, [r3]
 3780 0010 7B60     		str	r3, [r7, #4]
2371:FreeRTOS/Source/tasks.c **** 
2372:FreeRTOS/Source/tasks.c **** 		return xReturn;
 3781              		.loc 1 2372 0
 3782 0012 7B68     		ldr	r3, [r7, #4]
2373:FreeRTOS/Source/tasks.c **** 	}
 3783              		.loc 1 2373 0
 3784 0014 1846     		mov	r0, r3
 3785 0016 0C37     		adds	r7, r7, #12
 3786 0018 BD46     		mov	sp, r7
 3787              		@ sp needed
 3788 001a 5DF8047B 		ldr	r7, [sp], #4
 3789 001e 7047     		bx	lr
 3790              		.cfi_endproc
 3791              	.LFE149:
 3793              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3794              		.align	2
 3795              		.global	vTaskPriorityInherit
 3796              		.thumb
 3797              		.thumb_func
 3799              	vTaskPriorityInherit:
 3800              	.LFB150:
2374:FreeRTOS/Source/tasks.c **** 
2375:FreeRTOS/Source/tasks.c **** #endif
2376:FreeRTOS/Source/tasks.c **** 
2377:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2378:FreeRTOS/Source/tasks.c **** 
2379:FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
2380:FreeRTOS/Source/tasks.c **** 
2381:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xTaskGetSchedulerState( void )
2382:FreeRTOS/Source/tasks.c **** 	{
2383:FreeRTOS/Source/tasks.c **** 	portBASE_TYPE xReturn;
2384:FreeRTOS/Source/tasks.c **** 
2385:FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
2386:FreeRTOS/Source/tasks.c **** 		{
2387:FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
2388:FreeRTOS/Source/tasks.c **** 		}
2389:FreeRTOS/Source/tasks.c **** 		else
2390:FreeRTOS/Source/tasks.c **** 		{
2391:FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
2392:FreeRTOS/Source/tasks.c **** 			{
2393:FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
2394:FreeRTOS/Source/tasks.c **** 			}
2395:FreeRTOS/Source/tasks.c **** 			else
2396:FreeRTOS/Source/tasks.c **** 			{
2397:FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
2398:FreeRTOS/Source/tasks.c **** 			}
2399:FreeRTOS/Source/tasks.c **** 		}
2400:FreeRTOS/Source/tasks.c **** 
2401:FreeRTOS/Source/tasks.c **** 		return xReturn;
2402:FreeRTOS/Source/tasks.c **** 	}
2403:FreeRTOS/Source/tasks.c **** 
2404:FreeRTOS/Source/tasks.c **** #endif
2405:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2406:FreeRTOS/Source/tasks.c **** 
2407:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2408:FreeRTOS/Source/tasks.c **** 
2409:FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
2410:FreeRTOS/Source/tasks.c **** 	{
 3801              		.loc 1 2410 0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 16
 3804              		@ frame_needed = 1, uses_anonymous_args = 0
 3805 0000 80B5     		push	{r7, lr}
 3806              	.LCFI115:
 3807              		.cfi_def_cfa_offset 8
 3808              		.cfi_offset 7, -8
 3809              		.cfi_offset 14, -4
 3810 0002 84B0     		sub	sp, sp, #16
 3811              	.LCFI116:
 3812              		.cfi_def_cfa_offset 24
 3813 0004 00AF     		add	r7, sp, #0
 3814              	.LCFI117:
 3815              		.cfi_def_cfa_register 7
 3816 0006 7860     		str	r0, [r7, #4]
2411:FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3817              		.loc 1 2411 0
 3818 0008 7B68     		ldr	r3, [r7, #4]
 3819 000a FB60     		str	r3, [r7, #12]
2412:FreeRTOS/Source/tasks.c **** 
2413:FreeRTOS/Source/tasks.c **** 		configASSERT( pxMutexHolder );
2414:FreeRTOS/Source/tasks.c **** 
2415:FreeRTOS/Source/tasks.c **** 		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 3820              		.loc 1 2415 0
 3821 000c FB68     		ldr	r3, [r7, #12]
 3822 000e DA6A     		ldr	r2, [r3, #44]
 3823 0010 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3824 0014 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3825 0018 1B68     		ldr	r3, [r3]
 3826 001a DB6A     		ldr	r3, [r3, #44]
 3827 001c 9A42     		cmp	r2, r3
 3828 001e 4FD2     		bcs	.L179
2416:FreeRTOS/Source/tasks.c **** 		{
2417:FreeRTOS/Source/tasks.c **** 			/* Adjust the mutex holder state to account for its new priority. */
2418:FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxC
 3829              		.loc 1 2418 0
 3830 0020 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3831 0024 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3832 0028 1B68     		ldr	r3, [r3]
 3833 002a DB6A     		ldr	r3, [r3, #44]
 3834 002c C3F10502 		rsb	r2, r3, #5
 3835 0030 FB68     		ldr	r3, [r7, #12]
 3836 0032 9A61     		str	r2, [r3, #24]
2419:FreeRTOS/Source/tasks.c **** 
2420:FreeRTOS/Source/tasks.c **** 			/* If the task being modified is in the ready state it will need to
2421:FreeRTOS/Source/tasks.c **** 			be moved in to a new list. */
2422:FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericList
 3837              		.loc 1 2422 0
 3838 0034 FB68     		ldr	r3, [r7, #12]
 3839 0036 5969     		ldr	r1, [r3, #20]
 3840 0038 FB68     		ldr	r3, [r7, #12]
 3841 003a DA6A     		ldr	r2, [r3, #44]
 3842 003c 1346     		mov	r3, r2
 3843 003e 9B00     		lsls	r3, r3, #2
 3844 0040 1344     		add	r3, r3, r2
 3845 0042 9B00     		lsls	r3, r3, #2
 3846 0044 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 3847 0048 C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 3848 004c 1344     		add	r3, r3, r2
 3849 004e 9942     		cmp	r1, r3
 3850 0050 2ED1     		bne	.L181
2423:FreeRTOS/Source/tasks.c **** 			{
2424:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3851              		.loc 1 2424 0
 3852 0052 FB68     		ldr	r3, [r7, #12]
 3853 0054 0433     		adds	r3, r3, #4
 3854 0056 1846     		mov	r0, r3
 3855 0058 FFF7FEFF 		bl	vListRemove
2425:FreeRTOS/Source/tasks.c **** 
2426:FreeRTOS/Source/tasks.c **** 				/* Inherit the priority before being moved into the new list. */
2427:FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3856              		.loc 1 2427 0
 3857 005c 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3858 0060 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3859 0064 1B68     		ldr	r3, [r3]
 3860 0066 DA6A     		ldr	r2, [r3, #44]
 3861 0068 FB68     		ldr	r3, [r7, #12]
 3862 006a DA62     		str	r2, [r3, #44]
2428:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3863              		.loc 1 2428 0
 3864 006c FB68     		ldr	r3, [r7, #12]
 3865 006e DA6A     		ldr	r2, [r3, #44]
 3866 0070 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3867 0074 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3868 0078 1B68     		ldr	r3, [r3]
 3869 007a 9A42     		cmp	r2, r3
 3870 007c 06D9     		bls	.L182
 3871              		.loc 1 2428 0 is_stmt 0 discriminator 1
 3872 007e FB68     		ldr	r3, [r7, #12]
 3873 0080 DA6A     		ldr	r2, [r3, #44]
 3874 0082 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3875 0086 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3876 008a 1A60     		str	r2, [r3]
 3877              	.L182:
 3878              		.loc 1 2428 0 discriminator 2
 3879 008c FB68     		ldr	r3, [r7, #12]
 3880 008e DA6A     		ldr	r2, [r3, #44]
 3881 0090 1346     		mov	r3, r2
 3882 0092 9B00     		lsls	r3, r3, #2
 3883 0094 1344     		add	r3, r3, r2
 3884 0096 9B00     		lsls	r3, r3, #2
 3885 0098 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 3886 009c C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 3887 00a0 1A44     		add	r2, r2, r3
 3888 00a2 FB68     		ldr	r3, [r7, #12]
 3889 00a4 0433     		adds	r3, r3, #4
 3890 00a6 1046     		mov	r0, r2
 3891 00a8 1946     		mov	r1, r3
 3892 00aa FFF7FEFF 		bl	vListInsertEnd
 3893 00ae 07E0     		b	.L179
 3894              	.L181:
2429:FreeRTOS/Source/tasks.c **** 			}
2430:FreeRTOS/Source/tasks.c **** 			else
2431:FreeRTOS/Source/tasks.c **** 			{
2432:FreeRTOS/Source/tasks.c **** 				/* Just inherit the priority. */
2433:FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 3895              		.loc 1 2433 0 is_stmt 1
 3896 00b0 40F20003 		movw	r3, #:lower16:pxCurrentTCB
 3897 00b4 C0F20003 		movt	r3, #:upper16:pxCurrentTCB
 3898 00b8 1B68     		ldr	r3, [r3]
 3899 00ba DA6A     		ldr	r2, [r3, #44]
 3900 00bc FB68     		ldr	r3, [r7, #12]
 3901 00be DA62     		str	r2, [r3, #44]
 3902              	.L179:
2434:FreeRTOS/Source/tasks.c **** 			}
2435:FreeRTOS/Source/tasks.c **** 		}
2436:FreeRTOS/Source/tasks.c **** 	}
 3903              		.loc 1 2436 0
 3904 00c0 1037     		adds	r7, r7, #16
 3905 00c2 BD46     		mov	sp, r7
 3906              		@ sp needed
 3907 00c4 80BD     		pop	{r7, pc}
 3908              		.cfi_endproc
 3909              	.LFE150:
 3911 00c6 00BF     		.section	.text.vTaskPriorityDisinherit,"ax",%progbits
 3912              		.align	2
 3913              		.global	vTaskPriorityDisinherit
 3914              		.thumb
 3915              		.thumb_func
 3917              	vTaskPriorityDisinherit:
 3918              	.LFB151:
2437:FreeRTOS/Source/tasks.c **** 
2438:FreeRTOS/Source/tasks.c **** #endif
2439:FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2440:FreeRTOS/Source/tasks.c **** 
2441:FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
2442:FreeRTOS/Source/tasks.c **** 
2443:FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
2444:FreeRTOS/Source/tasks.c **** 	{
 3919              		.loc 1 2444 0
 3920              		.cfi_startproc
 3921              		@ args = 0, pretend = 0, frame = 16
 3922              		@ frame_needed = 1, uses_anonymous_args = 0
 3923 0000 80B5     		push	{r7, lr}
 3924              	.LCFI118:
 3925              		.cfi_def_cfa_offset 8
 3926              		.cfi_offset 7, -8
 3927              		.cfi_offset 14, -4
 3928 0002 84B0     		sub	sp, sp, #16
 3929              	.LCFI119:
 3930              		.cfi_def_cfa_offset 24
 3931 0004 00AF     		add	r7, sp, #0
 3932              	.LCFI120:
 3933              		.cfi_def_cfa_register 7
 3934 0006 7860     		str	r0, [r7, #4]
2445:FreeRTOS/Source/tasks.c **** 	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
 3935              		.loc 1 2445 0
 3936 0008 7B68     		ldr	r3, [r7, #4]
 3937 000a FB60     		str	r3, [r7, #12]
2446:FreeRTOS/Source/tasks.c **** 
2447:FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3938              		.loc 1 2447 0
 3939 000c 7B68     		ldr	r3, [r7, #4]
 3940 000e 002B     		cmp	r3, #0
 3941 0010 35D0     		beq	.L183
2448:FreeRTOS/Source/tasks.c **** 		{
2449:FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 3942              		.loc 1 2449 0
 3943 0012 FB68     		ldr	r3, [r7, #12]
 3944 0014 DA6A     		ldr	r2, [r3, #44]
 3945 0016 FB68     		ldr	r3, [r7, #12]
 3946 0018 5B6C     		ldr	r3, [r3, #68]
 3947 001a 9A42     		cmp	r2, r3
 3948 001c 2FD0     		beq	.L183
2450:FreeRTOS/Source/tasks.c **** 			{
2451:FreeRTOS/Source/tasks.c **** 				/* We must be the running task to be able to give the mutex back.
2452:FreeRTOS/Source/tasks.c **** 				Remove ourselves from the ready list we currently appear in. */
2453:FreeRTOS/Source/tasks.c **** 				vListRemove( &( pxTCB->xGenericListItem ) );
 3949              		.loc 1 2453 0
 3950 001e FB68     		ldr	r3, [r7, #12]
 3951 0020 0433     		adds	r3, r3, #4
 3952 0022 1846     		mov	r0, r3
 3953 0024 FFF7FEFF 		bl	vListRemove
2454:FreeRTOS/Source/tasks.c **** 
2455:FreeRTOS/Source/tasks.c **** 				/* Disinherit the priority before adding ourselves into the new
2456:FreeRTOS/Source/tasks.c **** 				ready list. */
2457:FreeRTOS/Source/tasks.c **** 				pxTCB->uxPriority = pxTCB->uxBasePriority;
 3954              		.loc 1 2457 0
 3955 0028 FB68     		ldr	r3, [r7, #12]
 3956 002a 5A6C     		ldr	r2, [r3, #68]
 3957 002c FB68     		ldr	r3, [r7, #12]
 3958 002e DA62     		str	r2, [r3, #44]
2458:FreeRTOS/Source/tasks.c **** 				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) px
 3959              		.loc 1 2458 0
 3960 0030 FB68     		ldr	r3, [r7, #12]
 3961 0032 DB6A     		ldr	r3, [r3, #44]
 3962 0034 C3F10502 		rsb	r2, r3, #5
 3963 0038 FB68     		ldr	r3, [r7, #12]
 3964 003a 9A61     		str	r2, [r3, #24]
2459:FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyQueue( pxTCB );
 3965              		.loc 1 2459 0
 3966 003c FB68     		ldr	r3, [r7, #12]
 3967 003e DA6A     		ldr	r2, [r3, #44]
 3968 0040 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3969 0044 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3970 0048 1B68     		ldr	r3, [r3]
 3971 004a 9A42     		cmp	r2, r3
 3972 004c 06D9     		bls	.L185
 3973              		.loc 1 2459 0 is_stmt 0 discriminator 1
 3974 004e FB68     		ldr	r3, [r7, #12]
 3975 0050 DA6A     		ldr	r2, [r3, #44]
 3976 0052 40F20003 		movw	r3, #:lower16:uxTopReadyPriority
 3977 0056 C0F20003 		movt	r3, #:upper16:uxTopReadyPriority
 3978 005a 1A60     		str	r2, [r3]
 3979              	.L185:
 3980              		.loc 1 2459 0 discriminator 2
 3981 005c FB68     		ldr	r3, [r7, #12]
 3982 005e DA6A     		ldr	r2, [r3, #44]
 3983 0060 1346     		mov	r3, r2
 3984 0062 9B00     		lsls	r3, r3, #2
 3985 0064 1344     		add	r3, r3, r2
 3986 0066 9B00     		lsls	r3, r3, #2
 3987 0068 40F20002 		movw	r2, #:lower16:pxReadyTasksLists
 3988 006c C0F20002 		movt	r2, #:upper16:pxReadyTasksLists
 3989 0070 1A44     		add	r2, r2, r3
 3990 0072 FB68     		ldr	r3, [r7, #12]
 3991 0074 0433     		adds	r3, r3, #4
 3992 0076 1046     		mov	r0, r2
 3993 0078 1946     		mov	r1, r3
 3994 007a FFF7FEFF 		bl	vListInsertEnd
 3995              	.L183:
2460:FreeRTOS/Source/tasks.c **** 			}
2461:FreeRTOS/Source/tasks.c **** 		}
2462:FreeRTOS/Source/tasks.c **** 	}
 3996              		.loc 1 2462 0 is_stmt 1
 3997 007e 1037     		adds	r7, r7, #16
 3998 0080 BD46     		mov	sp, r7
 3999              		@ sp needed
 4000 0082 80BD     		pop	{r7, pc}
 4001              		.cfi_endproc
 4002              	.LFE151:
 4004              		.text
 4005              	.Letext0:
 4006              		.file 2 "/usr/lib/gcc/arm-none-eabi/4.8.2/include/stddef.h"
 4007              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 4008              		.file 4 "FreeRTOS/Source/include/projdefs.h"
 4009              		.file 5 "/usr/include/newlib/stdint.h"
 4010              		.file 6 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 4011              		.file 7 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 4012              		.file 8 "FreeRTOS/Source/include/FreeRTOS.h"
 4013              		.file 9 "FreeRTOS/Source/include/list.h"
 4014              		.file 10 "FreeRTOS/Source/include/task.h"
 4015              		.file 11 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccKD3fsg.s:24     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccKD3fsg.s:21     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccKD3fsg.s:27     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccKD3fsg.s:30     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccKD3fsg.s:33     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccKD3fsg.s:36     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccKD3fsg.s:39     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccKD3fsg.s:42     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccKD3fsg.s:45     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccKD3fsg.s:48     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccKD3fsg.s:51     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccKD3fsg.s:54     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccKD3fsg.s:57     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccKD3fsg.s:60     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccKD3fsg.s:63     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccKD3fsg.s:66     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccKD3fsg.s:69     .bss.uxTasksDeleted:0000000000000000 $d
     /tmp/ccKD3fsg.s:72     .bss.uxTasksDeleted:0000000000000000 uxTasksDeleted
     /tmp/ccKD3fsg.s:75     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccKD3fsg.s:78     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccKD3fsg.s:81     .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccKD3fsg.s:84     .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccKD3fsg.s:87     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccKD3fsg.s:90     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccKD3fsg.s:93     .bss.xTickCount:0000000000000000 $d
     /tmp/ccKD3fsg.s:96     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccKD3fsg.s:99     .bss.uxTopUsedPriority:0000000000000000 $d
     /tmp/ccKD3fsg.s:102    .bss.uxTopUsedPriority:0000000000000000 uxTopUsedPriority
     /tmp/ccKD3fsg.s:105    .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccKD3fsg.s:108    .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccKD3fsg.s:111    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccKD3fsg.s:114    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccKD3fsg.s:117    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccKD3fsg.s:120    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccKD3fsg.s:123    .bss.uxMissedTicks:0000000000000000 $d
     /tmp/ccKD3fsg.s:126    .bss.uxMissedTicks:0000000000000000 uxMissedTicks
     /tmp/ccKD3fsg.s:129    .bss.xMissedYield:0000000000000000 $d
     /tmp/ccKD3fsg.s:132    .bss.xMissedYield:0000000000000000 xMissedYield
     /tmp/ccKD3fsg.s:135    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccKD3fsg.s:138    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccKD3fsg.s:141    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccKD3fsg.s:144    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccKD3fsg.s:147    .data.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccKD3fsg.s:150    .data.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccKD3fsg.s:153    .bss.pcStatsString:0000000000000000 $d
     /tmp/ccKD3fsg.s:156    .bss.pcStatsString:0000000000000000 pcStatsString
     /tmp/ccKD3fsg.s:159    .bss.ulTaskSwitchedInTime:0000000000000000 $d
     /tmp/ccKD3fsg.s:162    .bss.ulTaskSwitchedInTime:0000000000000000 ulTaskSwitchedInTime
     /tmp/ccKD3fsg.s:165    .text.xTaskGenericCreate:0000000000000000 $t
     /tmp/ccKD3fsg.s:170    .text.xTaskGenericCreate:0000000000000000 xTaskGenericCreate
     /tmp/ccKD3fsg.s:3308   .text.prvAllocateTCBAndStack:0000000000000000 prvAllocateTCBAndStack
     /tmp/ccKD3fsg.s:2955   .text.prvInitialiseTCBVariables:0000000000000000 prvInitialiseTCBVariables
     /tmp/ccKD3fsg.s:3047   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccKD3fsg.s:391    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccKD3fsg.s:396    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccKD3fsg.s:505    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccKD3fsg.s:510    .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccKD3fsg.s:1452   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccKD3fsg.s:3227   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccKD3fsg.s:1488   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccKD3fsg.s:622    .text.vTaskDelay:0000000000000000 $t
     /tmp/ccKD3fsg.s:627    .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccKD3fsg.s:691    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccKD3fsg.s:696    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccKD3fsg.s:749    .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccKD3fsg.s:754    .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccKD3fsg.s:931    .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccKD3fsg.s:936    .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccKD3fsg.s:2400   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccKD3fsg.s:1049   .text.xTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccKD3fsg.s:1054   .text.xTaskIsTaskSuspended:0000000000000000 xTaskIsTaskSuspended
     /tmp/ccKD3fsg.s:1114   .text.vTaskResume:0000000000000000 $t
     /tmp/ccKD3fsg.s:1119   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccKD3fsg.s:1218   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccKD3fsg.s:1223   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccKD3fsg.s:1329   .rodata:0000000000000000 $d
     /tmp/ccKD3fsg.s:1330   .rodata:0000000000000000 .LC0
     /tmp/ccKD3fsg.s:1333   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccKD3fsg.s:1338   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccKD3fsg.s:2914   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccKD3fsg.s:1408   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccKD3fsg.s:1413   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccKD3fsg.s:1447   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccKD3fsg.s:1483   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccKD3fsg.s:2006   .text.vTaskIncrementTick:0000000000000000 vTaskIncrementTick
     /tmp/ccKD3fsg.s:1662   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccKD3fsg.s:1667   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccKD3fsg.s:1705   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccKD3fsg.s:1710   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccKD3fsg.s:1761   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccKD3fsg.s:1766   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccKD3fsg.s:1795   .rodata:0000000000000008 .LC1
     /tmp/ccKD3fsg.s:1798   .text.vTaskGetRunTimeStats:0000000000000000 $t
     /tmp/ccKD3fsg.s:1803   .text.vTaskGetRunTimeStats:0000000000000000 vTaskGetRunTimeStats
     /tmp/ccKD3fsg.s:3404   .text.prvGenerateRunTimeStatsForTasksInList:0000000000000000 prvGenerateRunTimeStatsForTasksInList
     /tmp/ccKD3fsg.s:1968   .text.xTaskGetIdleTaskHandle:0000000000000000 $t
     /tmp/ccKD3fsg.s:1973   .text.xTaskGetIdleTaskHandle:0000000000000000 xTaskGetIdleTaskHandle
     /tmp/ccKD3fsg.s:2001   .text.vTaskIncrementTick:0000000000000000 $t
     /tmp/ccKD3fsg.s:2213   .text.vTaskSetApplicationTaskTag:0000000000000000 $t
     /tmp/ccKD3fsg.s:2218   .text.vTaskSetApplicationTaskTag:0000000000000000 vTaskSetApplicationTaskTag
     /tmp/ccKD3fsg.s:2269   .text.xTaskGetApplicationTaskTag:0000000000000000 $t
     /tmp/ccKD3fsg.s:2274   .text.xTaskGetApplicationTaskTag:0000000000000000 xTaskGetApplicationTaskTag
     /tmp/ccKD3fsg.s:2327   .text.xTaskCallApplicationTaskHook:0000000000000000 $t
     /tmp/ccKD3fsg.s:2332   .text.xTaskCallApplicationTaskHook:0000000000000000 xTaskCallApplicationTaskHook
     /tmp/ccKD3fsg.s:2395   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccKD3fsg.s:2538   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccKD3fsg.s:2543   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccKD3fsg.s:2612   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccKD3fsg.s:2617   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccKD3fsg.s:2726   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccKD3fsg.s:2731   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccKD3fsg.s:2771   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccKD3fsg.s:2776   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccKD3fsg.s:2877   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccKD3fsg.s:2882   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccKD3fsg.s:2910   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccKD3fsg.s:3134   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccKD3fsg.s:2951   .text.prvInitialiseTCBVariables:0000000000000000 $t
     /tmp/ccKD3fsg.s:3043   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccKD3fsg.s:3130   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccKD3fsg.s:3719   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccKD3fsg.s:3223   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccKD3fsg.s:3304   .text.prvAllocateTCBAndStack:0000000000000000 $t
     /tmp/ccKD3fsg.s:3391   .rodata:000000000000000c .LC2
     /tmp/ccKD3fsg.s:3394   .rodata:0000000000000034 .LC3
     /tmp/ccKD3fsg.s:3397   .rodata:0000000000000054 .LC4
     /tmp/ccKD3fsg.s:3400   .text.prvGenerateRunTimeStatsForTasksInList:0000000000000000 $t
     /tmp/ccKD3fsg.s:3602   .text.usTaskCheckFreeStackSpace:0000000000000000 usTaskCheckFreeStackSpace
     /tmp/ccKD3fsg.s:3598   .text.usTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccKD3fsg.s:3656   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccKD3fsg.s:3661   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccKD3fsg.s:3715   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccKD3fsg.s:3754   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccKD3fsg.s:3759   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccKD3fsg.s:3794   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccKD3fsg.s:3799   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccKD3fsg.s:3912   .text.vTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccKD3fsg.s:3917   .text.vTaskPriorityDisinherit:0000000000000000 vTaskPriorityDisinherit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortYieldFromISR
vListRemove
init_us_timer
xPortStartScheduler
vPortEndScheduler
get_us_time
strlen
vListInsert
strncpy
vListInitialiseItem
vListInitialise
malloc
free
memset
sprintf
strcat
