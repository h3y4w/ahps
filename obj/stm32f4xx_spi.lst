   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	SPI_I2S_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	SPI_I2S_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================        
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *       
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    This driver supports only the I2S clock scheme available in Silicon
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RevisionB and RevisionY.
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  28              		.loc 1 223 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  38              		.loc 1 227 0
  39 0002 4FF44053 		mov	r3, #12288
  40 0006 C4F20103 		movt	r3, 16385
  41 000a 9842     		cmp	r0, r3
  42 000c 0AD1     		bne	.L2
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  43              		.loc 1 230 0
  44 000e 4FF48050 		mov	r0, #4096
  45              	.LVL1:
  46 0012 0121     		movs	r1, #1
  47 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  48              	.LVL2:
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  49              		.loc 1 232 0
  50 0018 4FF48050 		mov	r0, #4096
  51 001c 0021     		movs	r1, #0
  52 001e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  53              	.LVL3:
  54 0022 08BD     		pop	{r3, pc}
  55              	.LVL4:
  56              	.L2:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  57              		.loc 1 234 0
  58 0024 4FF46053 		mov	r3, #14336
  59 0028 C4F20003 		movt	r3, 16384
  60 002c 9842     		cmp	r0, r3
  61 002e 0AD1     		bne	.L4
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  62              		.loc 1 237 0
  63 0030 4FF48040 		mov	r0, #16384
  64              	.LVL5:
  65 0034 0121     		movs	r1, #1
  66 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              	.LVL6:
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  68              		.loc 1 239 0
  69 003a 4FF48040 		mov	r0, #16384
  70 003e 0021     		movs	r1, #0
  71 0040 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72              	.LVL7:
  73 0044 08BD     		pop	{r3, pc}
  74              	.LVL8:
  75              	.L4:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
  76              		.loc 1 243 0
  77 0046 4FF47053 		mov	r3, #15360
  78 004a C4F20003 		movt	r3, 16384
  79 004e 9842     		cmp	r0, r3
  80 0050 09D1     		bne	.L1
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  81              		.loc 1 246 0
  82 0052 4FF40040 		mov	r0, #32768
  83              	.LVL9:
  84 0056 0121     		movs	r1, #1
  85 0058 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  86              	.LVL10:
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  87              		.loc 1 248 0
  88 005c 4FF40040 		mov	r0, #32768
  89 0060 0021     		movs	r1, #0
  90 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL11:
  92              	.L1:
  93 0066 08BD     		pop	{r3, pc}
  94              		.cfi_endproc
  95              	.LFE110:
  97              		.section	.text.SPI_Init,"ax",%progbits
  98              		.align	2
  99              		.global	SPI_Init
 100              		.thumb
 101              		.thumb_func
 103              	SPI_Init:
 104              	.LFB111:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 105              		.loc 1 262 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 110              	.LVL12:
 111 0000 2DE9F003 		push	{r4, r5, r6, r7, r8, r9}
 112              	.LCFI1:
 113              		.cfi_def_cfa_offset 24
 114              		.cfi_offset 4, -24
 115              		.cfi_offset 5, -20
 116              		.cfi_offset 6, -16
 117              		.cfi_offset 7, -12
 118              		.cfi_offset 8, -8
 119              		.cfi_offset 9, -4
 120              	.LVL13:
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 121              		.loc 1 281 0
 122 0004 0288     		ldrh	r2, [r0]
 123              	.LVL14:
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 124              		.loc 1 283 0
 125 0006 02F44152 		and	r2, r2, #12352
 126              	.LVL15:
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 127              		.loc 1 292 0
 128 000a B1F80090 		ldrh	r9, [r1]
 129 000e 4B88     		ldrh	r3, [r1, #2]
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 130              		.loc 1 293 0
 131 0010 B1F80480 		ldrh	r8, [r1, #4]
 132 0014 B1F806C0 		ldrh	ip, [r1, #6]
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 133              		.loc 1 294 0
 134 0018 0F89     		ldrh	r7, [r1, #8]
 135 001a 4E89     		ldrh	r6, [r1, #10]
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 136              		.loc 1 295 0
 137 001c 8D89     		ldrh	r5, [r1, #12]
 138 001e CC89     		ldrh	r4, [r1, #14]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 139              		.loc 1 292 0
 140 0020 49EA0303 		orr	r3, r9, r3
 141 0024 48EA0303 		orr	r3, r8, r3
 142 0028 4CEA0303 		orr	r3, ip, r3
 143 002c 3B43     		orrs	r3, r3, r7
 144 002e 3343     		orrs	r3, r3, r6
 145 0030 2B43     		orrs	r3, r3, r5
 146 0032 2343     		orrs	r3, r3, r4
 147 0034 1343     		orrs	r3, r3, r2
 148              	.LVL16:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 149              		.loc 1 297 0
 150 0036 0380     		strh	r3, [r0]	@ movhi
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 151              		.loc 1 300 0
 152 0038 838B     		ldrh	r3, [r0, #28]
 153              	.LVL17:
 154 003a 23F40063 		bic	r3, r3, #2048
 155 003e 1B04     		lsls	r3, r3, #16
 156 0040 1B0C     		lsrs	r3, r3, #16
 157 0042 8383     		strh	r3, [r0, #28]	@ movhi
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 158              		.loc 1 303 0
 159 0044 0B8A     		ldrh	r3, [r1, #16]
 160 0046 0382     		strh	r3, [r0, #16]	@ movhi
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 161              		.loc 1 304 0
 162 0048 BDE8F003 		pop	{r4, r5, r6, r7, r8, r9}
 163 004c 7047     		bx	lr
 164              		.cfi_endproc
 165              	.LFE111:
 167 004e 00BF     		.section	.text.I2S_Init,"ax",%progbits
 168              		.align	2
 169              		.global	I2S_Init
 170              		.thumb
 171              		.thumb_func
 173              	I2S_Init:
 174              	.LFB112:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 175              		.loc 1 326 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180              	.LVL18:
 181 0000 F0B4     		push	{r4, r5, r6, r7}
 182              	.LCFI2:
 183              		.cfi_def_cfa_offset 16
 184              		.cfi_offset 4, -16
 185              		.cfi_offset 5, -12
 186              		.cfi_offset 6, -8
 187              		.cfi_offset 7, -4
 188              	.LVL19:
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 189              		.loc 1 344 0
 190 0002 838B     		ldrh	r3, [r0, #28]
 191 0004 23F47B63 		bic	r3, r3, #4016
 192 0008 23F00F03 		bic	r3, r3, #15
 193 000c 1B04     		lsls	r3, r3, #16
 194 000e 1B0C     		lsrs	r3, r3, #16
 195 0010 8383     		strh	r3, [r0, #28]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 196              		.loc 1 345 0
 197 0012 0223     		movs	r3, #2
 198 0014 0384     		strh	r3, [r0, #32]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 199              		.loc 1 348 0
 200 0016 858B     		ldrh	r5, [r0, #28]
 201 0018 ADB2     		uxth	r5, r5
 202              	.LVL20:
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 203              		.loc 1 351 0
 204 001a 8B68     		ldr	r3, [r1, #8]
 205 001c 022B     		cmp	r3, #2
 206 001e 4BD0     		beq	.L13
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 207              		.loc 1 360 0
 208 0020 8F88     		ldrh	r7, [r1, #4]
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 209              		.loc 1 363 0
 210 0022 002F     		cmp	r7, #0
 211 0024 14BF     		ite	ne
 212 0026 0227     		movne	r7, #2
 213 0028 0127     		moveq	r7, #1
 214              	.LVL21:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency (only in Silicon RevisionB and RevisionY) */
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 215              		.loc 1 387 0
 216 002a 4FF46053 		mov	r3, #14336
 217 002e C4F20203 		movt	r3, 16386
 218 0032 9B68     		ldr	r3, [r3, #8]
 219 0034 13F4000F 		tst	r3, #8388608
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 220              		.loc 1 389 0
 221 0038 1FBF     		itttt	ne
 222 003a 4FF46053 		movne	r3, #14336
 223 003e C4F20203 		movtne	r3, 16386
 224 0042 9A68     		ldrne	r2, [r3, #8]
 225 0044 22F40002 		bicne	r2, r2, #8388608
 226 0048 18BF     		it	ne
 227 004a 9A60     		strne	r2, [r3, #8]
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 228              		.loc 1 393 0
 229 004c 4FF46053 		mov	r3, #14336
 230 0050 C4F20203 		movt	r3, 16386
 231 0054 D3F88440 		ldr	r4, [r3, #132]
 232 0058 C4F38814 		ubfx	r4, r4, #6, #9
 233              	.LVL22:
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 234              		.loc 1 397 0
 235 005c D3F88420 		ldr	r2, [r3, #132]
 236 0060 C2F30272 		ubfx	r2, r2, #28, #3
 237              	.LVL23:
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 238              		.loc 1 401 0
 239 0064 5E68     		ldr	r6, [r3, #4]
 240 0066 06F03F06 		and	r6, r6, #63
 241              	.LVL24:
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 242              		.loc 1 404 0
 243 006a 4FF49053 		mov	r3, #4608
 244 006e C0F27A03 		movt	r3, 122
 245 0072 B3FBF6F3 		udiv	r3, r3, r6
 246 0076 04FB03F3 		mul	r3, r4, r3
 247 007a B3FBF2F3 		udiv	r3, r3, r2
 248              	.LVL25:
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 249              		.loc 1 408 0
 250 007e CA88     		ldrh	r2, [r1, #6]
 251              	.LVL26:
 252 0080 B2F5007F 		cmp	r2, #512
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 253              		.loc 1 411 0
 254 0084 0EBF     		itee	eq
 255 0086 1B0A     		lsreq	r3, r3, #8
 256              	.LVL27:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 257              		.loc 1 416 0
 258 0088 7F01     		lslne	r7, r7, #5
 259              	.LVL28:
 260 008a B3FBF7F3 		udivne	r3, r3, r7
 261 008e 03EB8303 		add	r3, r3, r3, lsl #2
 262 0092 5B00     		lsls	r3, r3, #1
 263 0094 8A68     		ldr	r2, [r1, #8]
 264 0096 B3FBF2F3 		udiv	r3, r3, r2
 265 009a 0533     		adds	r3, r3, #5
 266 009c 9BB2     		uxth	r3, r3
 267              	.LVL29:
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 268              		.loc 1 420 0
 269 009e 4CF6CD42 		movw	r2, #52429
 270 00a2 CCF6CC42 		movt	r2, 52428
 271 00a6 A2FB0343 		umull	r4, r3, r2, r3
 272              	.LVL30:
 273 00aa DB08     		lsrs	r3, r3, #3
 274              	.LVL31:
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 275              		.loc 1 426 0
 276 00ac 03F00102 		and	r2, r3, #1
 277 00b0 5B08     		lsrs	r3, r3, #1
 278              	.LVL32:
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 279              		.loc 1 429 0
 280 00b2 1202     		lsls	r2, r2, #8
 281 00b4 92B2     		uxth	r2, r2
 282              	.LVL33:
 283 00b6 01E0     		b	.L7
 284              	.LVL34:
 285              	.L13:
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 286              		.loc 1 353 0
 287 00b8 0022     		movs	r2, #0
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 288              		.loc 1 354 0
 289 00ba 0223     		movs	r3, #2
 290              	.LVL35:
 291              	.L7:
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 292              		.loc 1 433 0
 293 00bc 9C1E     		subs	r4, r3, #2
 294 00be A4B2     		uxth	r4, r4
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 295              		.loc 1 437 0
 296 00c0 FD2C     		cmp	r4, #253
 297 00c2 88BF     		it	hi
 298 00c4 0022     		movhi	r2, #0
 299              	.LVL36:
 300 00c6 FD2C     		cmp	r4, #253
 301 00c8 88BF     		it	hi
 302 00ca 0223     		movhi	r3, #2
 303              	.LVL37:
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 304              		.loc 1 441 0
 305 00cc CC88     		ldrh	r4, [r1, #6]
 306 00ce 2243     		orrs	r2, r2, r4
 307              	.LVL38:
 308 00d0 1343     		orrs	r3, r3, r2
 309              	.LVL39:
 310 00d2 9BB2     		uxth	r3, r3
 311 00d4 0384     		strh	r3, [r0, #32]	@ movhi
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 312              		.loc 1 444 0
 313 00d6 0A88     		ldrh	r2, [r1]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 314              		.loc 1 445 0
 315 00d8 4C88     		ldrh	r4, [r1, #2]
 316 00da 8E88     		ldrh	r6, [r1, #4]
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 317              		.loc 1 446 0
 318 00dc 8B89     		ldrh	r3, [r1, #12]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 319              		.loc 1 445 0
 320 00de 3343     		orrs	r3, r3, r6
 321 00e0 2343     		orrs	r3, r3, r4
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 322              		.loc 1 444 0
 323 00e2 1343     		orrs	r3, r3, r2
 324 00e4 2B43     		orrs	r3, r3, r5
 325 00e6 43F40063 		orr	r3, r3, #2048
 326              	.LVL40:
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 327              		.loc 1 449 0
 328 00ea 8383     		strh	r3, [r0, #28]	@ movhi
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 329              		.loc 1 450 0
 330 00ec F0BC     		pop	{r4, r5, r6, r7}
 331 00ee 7047     		bx	lr
 332              		.cfi_endproc
 333              	.LFE112:
 335              		.section	.text.SPI_StructInit,"ax",%progbits
 336              		.align	2
 337              		.global	SPI_StructInit
 338              		.thumb
 339              		.thumb_func
 341              	SPI_StructInit:
 342              	.LFB113:
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 343              		.loc 1 458 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348              	.LVL41:
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 349              		.loc 1 461 0
 350 0000 0023     		movs	r3, #0
 351 0002 0380     		strh	r3, [r0]	@ movhi
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 352              		.loc 1 463 0
 353 0004 4380     		strh	r3, [r0, #2]	@ movhi
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 354              		.loc 1 465 0
 355 0006 8380     		strh	r3, [r0, #4]	@ movhi
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 356              		.loc 1 467 0
 357 0008 C380     		strh	r3, [r0, #6]	@ movhi
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 358              		.loc 1 469 0
 359 000a 0381     		strh	r3, [r0, #8]	@ movhi
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 360              		.loc 1 471 0
 361 000c 4381     		strh	r3, [r0, #10]	@ movhi
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 362              		.loc 1 473 0
 363 000e 8381     		strh	r3, [r0, #12]	@ movhi
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 364              		.loc 1 475 0
 365 0010 C381     		strh	r3, [r0, #14]	@ movhi
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 366              		.loc 1 477 0
 367 0012 0723     		movs	r3, #7
 368 0014 0382     		strh	r3, [r0, #16]	@ movhi
 369 0016 7047     		bx	lr
 370              		.cfi_endproc
 371              	.LFE113:
 373              		.section	.text.I2S_StructInit,"ax",%progbits
 374              		.align	2
 375              		.global	I2S_StructInit
 376              		.thumb
 377              		.thumb_func
 379              	I2S_StructInit:
 380              	.LFB114:
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 381              		.loc 1 486 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 0, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386              	.LVL42:
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 387              		.loc 1 489 0
 388 0000 0023     		movs	r3, #0
 389 0002 0380     		strh	r3, [r0]	@ movhi
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 390              		.loc 1 492 0
 391 0004 4380     		strh	r3, [r0, #2]	@ movhi
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 392              		.loc 1 495 0
 393 0006 8380     		strh	r3, [r0, #4]	@ movhi
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 394              		.loc 1 498 0
 395 0008 C380     		strh	r3, [r0, #6]	@ movhi
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 396              		.loc 1 501 0
 397 000a 0222     		movs	r2, #2
 398 000c 8260     		str	r2, [r0, #8]
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 399              		.loc 1 504 0
 400 000e 8381     		strh	r3, [r0, #12]	@ movhi
 401 0010 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE114:
 405 0012 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 406              		.align	2
 407              		.global	SPI_Cmd
 408              		.thumb
 409              		.thumb_func
 411              	SPI_Cmd:
 412              	.LFB115:
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 413              		.loc 1 515 0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 418              	.LVL43:
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 419              		.loc 1 519 0
 420 0000 29B1     		cbz	r1, .L19
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 421              		.loc 1 522 0
 422 0002 0388     		ldrh	r3, [r0]
 423 0004 9BB2     		uxth	r3, r3
 424 0006 43F04003 		orr	r3, r3, #64
 425 000a 0380     		strh	r3, [r0]	@ movhi
 426 000c 7047     		bx	lr
 427              	.L19:
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 428              		.loc 1 527 0
 429 000e 0388     		ldrh	r3, [r0]
 430 0010 23F04003 		bic	r3, r3, #64
 431 0014 1B04     		lsls	r3, r3, #16
 432 0016 1B0C     		lsrs	r3, r3, #16
 433 0018 0380     		strh	r3, [r0]	@ movhi
 434 001a 7047     		bx	lr
 435              		.cfi_endproc
 436              	.LFE115:
 438              		.section	.text.I2S_Cmd,"ax",%progbits
 439              		.align	2
 440              		.global	I2S_Cmd
 441              		.thumb
 442              		.thumb_func
 444              	I2S_Cmd:
 445              	.LFB116:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 446              		.loc 1 540 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL44:
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 452              		.loc 1 545 0
 453 0000 29B1     		cbz	r1, .L22
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 454              		.loc 1 548 0
 455 0002 838B     		ldrh	r3, [r0, #28]
 456 0004 9BB2     		uxth	r3, r3
 457 0006 43F48063 		orr	r3, r3, #1024
 458 000a 8383     		strh	r3, [r0, #28]	@ movhi
 459 000c 7047     		bx	lr
 460              	.L22:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 461              		.loc 1 553 0
 462 000e 838B     		ldrh	r3, [r0, #28]
 463 0010 23F48063 		bic	r3, r3, #1024
 464 0014 1B04     		lsls	r3, r3, #16
 465 0016 1B0C     		lsrs	r3, r3, #16
 466 0018 8383     		strh	r3, [r0, #28]	@ movhi
 467 001a 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE116:
 471              		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 472              		.align	2
 473              		.global	SPI_DataSizeConfig
 474              		.thumb
 475              		.thumb_func
 477              	SPI_DataSizeConfig:
 478              	.LFB117:
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 479              		.loc 1 567 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484              	.LVL45:
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 485              		.loc 1 572 0
 486 0000 0388     		ldrh	r3, [r0]
 487 0002 23F40063 		bic	r3, r3, #2048
 488 0006 1B04     		lsls	r3, r3, #16
 489 0008 1B0C     		lsrs	r3, r3, #16
 490 000a 0380     		strh	r3, [r0]	@ movhi
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 491              		.loc 1 574 0
 492 000c 0388     		ldrh	r3, [r0]
 493 000e 9BB2     		uxth	r3, r3
 494 0010 1943     		orrs	r1, r1, r3
 495              	.LVL46:
 496 0012 0180     		strh	r1, [r0]	@ movhi
 497 0014 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE117:
 501 0016 00BF     		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 502              		.align	2
 503              		.global	SPI_BiDirectionalLineConfig
 504              		.thumb
 505              		.thumb_func
 507              	SPI_BiDirectionalLineConfig:
 508              	.LFB118:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 509              		.loc 1 587 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 0
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513              		@ link register save eliminated.
 514              	.LVL47:
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 515              		.loc 1 591 0
 516 0000 B1F5804F 		cmp	r1, #16384
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 517              		.loc 1 594 0
 518 0004 0388     		ldrh	r3, [r0]
 519 0006 07BF     		ittee	eq
 520 0008 9BB2     		uxtheq	r3, r3
 521 000a 43F48043 		orreq	r3, r3, #16384
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 522              		.loc 1 599 0
 523 000e 23F48043 		bicne	r3, r3, #16384
 524 0012 1B04     		lslne	r3, r3, #16
 525 0014 18BF     		it	ne
 526 0016 1B0C     		lsrne	r3, r3, #16
 527 0018 0380     		strh	r3, [r0]	@ movhi
 528 001a 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE118:
 532              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 533              		.align	2
 534              		.global	SPI_NSSInternalSoftwareConfig
 535              		.thumb
 536              		.thumb_func
 538              	SPI_NSSInternalSoftwareConfig:
 539              	.LFB119:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 540              		.loc 1 613 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545              	.LVL48:
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 546              		.loc 1 617 0
 547 0000 4FF6FF63 		movw	r3, #65279
 548 0004 9942     		cmp	r1, r3
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 549              		.loc 1 620 0
 550 0006 0388     		ldrh	r3, [r0]
 551 0008 19BF     		ittee	ne
 552 000a 9BB2     		uxthne	r3, r3
 553 000c 43F48073 		orrne	r3, r3, #256
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 554              		.loc 1 625 0
 555 0010 23F48073 		biceq	r3, r3, #256
 556 0014 1B04     		lsleq	r3, r3, #16
 557 0016 08BF     		it	eq
 558 0018 1B0C     		lsreq	r3, r3, #16
 559 001a 0380     		strh	r3, [r0]	@ movhi
 560 001c 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE119:
 564 001e 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 565              		.align	2
 566              		.global	SPI_SSOutputCmd
 567              		.thumb
 568              		.thumb_func
 570              	SPI_SSOutputCmd:
 571              	.LFB120:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 572              		.loc 1 637 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577              	.LVL49:
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 578              		.loc 1 641 0
 579 0000 29B1     		cbz	r1, .L32
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 580              		.loc 1 644 0
 581 0002 8388     		ldrh	r3, [r0, #4]
 582 0004 9BB2     		uxth	r3, r3
 583 0006 43F00403 		orr	r3, r3, #4
 584 000a 8380     		strh	r3, [r0, #4]	@ movhi
 585 000c 7047     		bx	lr
 586              	.L32:
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 587              		.loc 1 649 0
 588 000e 8388     		ldrh	r3, [r0, #4]
 589 0010 23F00403 		bic	r3, r3, #4
 590 0014 1B04     		lsls	r3, r3, #16
 591 0016 1B0C     		lsrs	r3, r3, #16
 592 0018 8380     		strh	r3, [r0, #4]	@ movhi
 593 001a 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE120:
 597              		.section	.text.SPI_TIModeCmd,"ax",%progbits
 598              		.align	2
 599              		.global	SPI_TIModeCmd
 600              		.thumb
 601              		.thumb_func
 603              	SPI_TIModeCmd:
 604              	.LFB121:
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 605              		.loc 1 668 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609              		@ link register save eliminated.
 610              	.LVL50:
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 611              		.loc 1 673 0
 612 0000 29B1     		cbz	r1, .L35
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 613              		.loc 1 676 0
 614 0002 8388     		ldrh	r3, [r0, #4]
 615 0004 9BB2     		uxth	r3, r3
 616 0006 43F01003 		orr	r3, r3, #16
 617 000a 8380     		strh	r3, [r0, #4]	@ movhi
 618 000c 7047     		bx	lr
 619              	.L35:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 620              		.loc 1 681 0
 621 000e 8388     		ldrh	r3, [r0, #4]
 622 0010 23F01003 		bic	r3, r3, #16
 623 0014 1B04     		lsls	r3, r3, #16
 624 0016 1B0C     		lsrs	r3, r3, #16
 625 0018 8380     		strh	r3, [r0, #4]	@ movhi
 626 001a 7047     		bx	lr
 627              		.cfi_endproc
 628              	.LFE121:
 630              		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 631              		.align	2
 632              		.global	I2S_FullDuplexConfig
 633              		.thumb
 634              		.thumb_func
 636              	I2S_FullDuplexConfig:
 637              	.LFB122:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 638              		.loc 1 705 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              		@ link register save eliminated.
 643              	.LVL51:
 644 0000 30B4     		push	{r4, r5}
 645              	.LCFI3:
 646              		.cfi_def_cfa_offset 8
 647              		.cfi_offset 4, -8
 648              		.cfi_offset 5, -4
 649              	.LVL52:
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 650              		.loc 1 717 0
 651 0002 838B     		ldrh	r3, [r0, #28]
 652 0004 23F47B63 		bic	r3, r3, #4016
 653 0008 23F00F03 		bic	r3, r3, #15
 654 000c 1B04     		lsls	r3, r3, #16
 655 000e 1B0C     		lsrs	r3, r3, #16
 656 0010 8383     		strh	r3, [r0, #28]	@ movhi
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 657              		.loc 1 718 0
 658 0012 0223     		movs	r3, #2
 659 0014 0384     		strh	r3, [r0, #32]	@ movhi
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 660              		.loc 1 721 0
 661 0016 828B     		ldrh	r2, [r0, #28]
 662 0018 92B2     		uxth	r2, r2
 663              	.LVL53:
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 664              		.loc 1 724 0
 665 001a 0B88     		ldrh	r3, [r1]
 666 001c 002B     		cmp	r3, #0
 667 001e 18BF     		it	ne
 668 0020 B3F5007F 		cmpne	r3, #512
 669 0024 14BF     		ite	ne
 670 0026 0023     		movne	r3, #0
 671 0028 0123     		moveq	r3, #1
 672              	.LVL54:
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 673              		.loc 1 739 0
 674 002a 4C88     		ldrh	r4, [r1, #2]
 675 002c 8D88     		ldrh	r5, [r1, #4]
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 676              		.loc 1 740 0
 677 002e 8989     		ldrh	r1, [r1, #12]
 678              	.LVL55:
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 679              		.loc 1 739 0
 680 0030 2943     		orrs	r1, r1, r5
 681 0032 2143     		orrs	r1, r1, r4
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 682              		.loc 1 738 0
 683 0034 41EA0323 		orr	r3, r1, r3, lsl #8
 684              	.LVL56:
 685 0038 1343     		orrs	r3, r3, r2
 686 003a 43F40063 		orr	r3, r3, #2048
 687              	.LVL57:
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 688              		.loc 1 743 0
 689 003e 8383     		strh	r3, [r0, #28]	@ movhi
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 690              		.loc 1 744 0
 691 0040 30BC     		pop	{r4, r5}
 692 0042 7047     		bx	lr
 693              		.cfi_endproc
 694              	.LFE122:
 696              		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 697              		.align	2
 698              		.global	SPI_I2S_ReceiveData
 699              		.thumb
 700              		.thumb_func
 702              	SPI_I2S_ReceiveData:
 703              	.LFB123:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 704              		.loc 1 780 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709              	.LVL58:
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 710              		.loc 1 785 0
 711 0000 8089     		ldrh	r0, [r0, #12]
 712              	.LVL59:
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 713              		.loc 1 786 0
 714 0002 80B2     		uxth	r0, r0
 715 0004 7047     		bx	lr
 716              		.cfi_endproc
 717              	.LFE123:
 719 0006 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 720              		.align	2
 721              		.global	SPI_I2S_SendData
 722              		.thumb
 723              		.thumb_func
 725              	SPI_I2S_SendData:
 726              	.LFB124:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 727              		.loc 1 796 0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 0
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732              	.LVL60:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 733              		.loc 1 801 0
 734 0000 8181     		strh	r1, [r0, #12]	@ movhi
 735 0002 7047     		bx	lr
 736              		.cfi_endproc
 737              	.LFE124:
 739              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 740              		.align	2
 741              		.global	SPI_CalculateCRC
 742              		.thumb
 743              		.thumb_func
 745              	SPI_CalculateCRC:
 746              	.LFB125:
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 747              		.loc 1 885 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752              	.LVL61:
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 753              		.loc 1 889 0
 754 0000 29B1     		cbz	r1, .L43
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 755              		.loc 1 892 0
 756 0002 0388     		ldrh	r3, [r0]
 757 0004 9BB2     		uxth	r3, r3
 758 0006 43F40053 		orr	r3, r3, #8192
 759 000a 0380     		strh	r3, [r0]	@ movhi
 760 000c 7047     		bx	lr
 761              	.L43:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 762              		.loc 1 897 0
 763 000e 0388     		ldrh	r3, [r0]
 764 0010 23F40053 		bic	r3, r3, #8192
 765 0014 1B04     		lsls	r3, r3, #16
 766 0016 1B0C     		lsrs	r3, r3, #16
 767 0018 0380     		strh	r3, [r0]	@ movhi
 768 001a 7047     		bx	lr
 769              		.cfi_endproc
 770              	.LFE125:
 772              		.section	.text.SPI_TransmitCRC,"ax",%progbits
 773              		.align	2
 774              		.global	SPI_TransmitCRC
 775              		.thumb
 776              		.thumb_func
 778              	SPI_TransmitCRC:
 779              	.LFB126:
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 780              		.loc 1 907 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 785              	.LVL62:
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 786              		.loc 1 912 0
 787 0000 0388     		ldrh	r3, [r0]
 788 0002 9BB2     		uxth	r3, r3
 789 0004 43F48053 		orr	r3, r3, #4096
 790 0008 0380     		strh	r3, [r0]	@ movhi
 791 000a 7047     		bx	lr
 792              		.cfi_endproc
 793              	.LFE126:
 795              		.section	.text.SPI_GetCRC,"ax",%progbits
 796              		.align	2
 797              		.global	SPI_GetCRC
 798              		.thumb
 799              		.thumb_func
 801              	SPI_GetCRC:
 802              	.LFB127:
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 803              		.loc 1 925 0
 804              		.cfi_startproc
 805              		@ args = 0, pretend = 0, frame = 0
 806              		@ frame_needed = 0, uses_anonymous_args = 0
 807              		@ link register save eliminated.
 808              	.LVL63:
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 809              		.loc 1 930 0
 810 0000 0129     		cmp	r1, #1
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 811              		.loc 1 933 0
 812 0002 14BF     		ite	ne
 813 0004 008B     		ldrhne	r0, [r0, #24]
 814              	.LVL64:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 815              		.loc 1 938 0
 816 0006 808A     		ldrheq	r0, [r0, #20]
 817 0008 80B2     		uxth	r0, r0
 818              	.LVL65:
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 819              		.loc 1 942 0
 820 000a 7047     		bx	lr
 821              		.cfi_endproc
 822              	.LFE127:
 824              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 825              		.align	2
 826              		.global	SPI_GetCRCPolynomial
 827              		.thumb
 828              		.thumb_func
 830              	SPI_GetCRCPolynomial:
 831              	.LFB128:
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 832              		.loc 1 950 0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 0
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 836              		@ link register save eliminated.
 837              	.LVL66:
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 838              		.loc 1 955 0
 839 0000 008A     		ldrh	r0, [r0, #16]
 840              	.LVL67:
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 841              		.loc 1 956 0
 842 0002 80B2     		uxth	r0, r0
 843 0004 7047     		bx	lr
 844              		.cfi_endproc
 845              	.LFE128:
 847 0006 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 848              		.align	2
 849              		.global	SPI_I2S_DMACmd
 850              		.thumb
 851              		.thumb_func
 853              	SPI_I2S_DMACmd:
 854              	.LFB129:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 855              		.loc 1 987 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 0
 858              		@ frame_needed = 0, uses_anonymous_args = 0
 859              		@ link register save eliminated.
 860              	.LVL68:
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 861              		.loc 1 993 0
 862 0000 22B1     		cbz	r2, .L51
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 863              		.loc 1 996 0
 864 0002 8388     		ldrh	r3, [r0, #4]
 865 0004 9BB2     		uxth	r3, r3
 866 0006 1943     		orrs	r1, r1, r3
 867              	.LVL69:
 868 0008 8180     		strh	r1, [r0, #4]	@ movhi
 869 000a 7047     		bx	lr
 870              	.LVL70:
 871              	.L51:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 872              		.loc 1 1001 0
 873 000c 8388     		ldrh	r3, [r0, #4]
 874 000e C943     		mvns	r1, r1
 875              	.LVL71:
 876 0010 89B2     		uxth	r1, r1
 877 0012 1940     		ands	r1, r1, r3
 878 0014 8180     		strh	r1, [r0, #4]	@ movhi
 879 0016 7047     		bx	lr
 880              		.cfi_endproc
 881              	.LFE129:
 883              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 884              		.align	2
 885              		.global	SPI_I2S_ITConfig
 886              		.thumb
 887              		.thumb_func
 889              	SPI_I2S_ITConfig:
 890              	.LFB130:
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 891              		.loc 1 1096 0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 0
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 896              	.LVL72:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 897              		.loc 1 1105 0
 898 0000 0909     		lsrs	r1, r1, #4
 899              	.LVL73:
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 900              		.loc 1 1108 0
 901 0002 0123     		movs	r3, #1
 902 0004 8B40     		lsls	r3, r3, r1
 903 0006 9BB2     		uxth	r3, r3
 904              	.LVL74:
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 905              		.loc 1 1110 0
 906 0008 22B1     		cbz	r2, .L54
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 907              		.loc 1 1113 0
 908 000a 8288     		ldrh	r2, [r0, #4]
 909              	.LVL75:
 910 000c 92B2     		uxth	r2, r2
 911 000e 1343     		orrs	r3, r3, r2
 912              	.LVL76:
 913 0010 8380     		strh	r3, [r0, #4]	@ movhi
 914 0012 7047     		bx	lr
 915              	.LVL77:
 916              	.L54:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 917              		.loc 1 1118 0
 918 0014 8288     		ldrh	r2, [r0, #4]
 919              	.LVL78:
 920 0016 DB43     		mvns	r3, r3
 921 0018 9BB2     		uxth	r3, r3
 922 001a 1340     		ands	r3, r3, r2
 923 001c 8380     		strh	r3, [r0, #4]	@ movhi
 924 001e 7047     		bx	lr
 925              		.cfi_endproc
 926              	.LFE130:
 928              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 929              		.align	2
 930              		.global	SPI_I2S_GetFlagStatus
 931              		.thumb
 932              		.thumb_func
 934              	SPI_I2S_GetFlagStatus:
 935              	.LFB131:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 936              		.loc 1 1140 0
 937              		.cfi_startproc
 938              		@ args = 0, pretend = 0, frame = 0
 939              		@ frame_needed = 0, uses_anonymous_args = 0
 940              		@ link register save eliminated.
 941              	.LVL79:
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 942              		.loc 1 1147 0
 943 0000 0089     		ldrh	r0, [r0, #8]
 944              	.LVL80:
 945 0002 0840     		ands	r0, r0, r1
 946              	.LVL81:
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 947              		.loc 1 1159 0
 948 0004 0030     		adds	r0, r0, #0
 949 0006 18BF     		it	ne
 950 0008 0120     		movne	r0, #1
 951              	.LVL82:
 952 000a 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE131:
 956              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 957              		.align	2
 958              		.global	SPI_I2S_ClearFlag
 959              		.thumb
 960              		.thumb_func
 962              	SPI_I2S_ClearFlag:
 963              	.LFB132:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 964              		.loc 1 1181 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		@ link register save eliminated.
 969              	.LVL83:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 970              		.loc 1 1187 0
 971 0000 C943     		mvns	r1, r1
 972              	.LVL84:
 973 0002 89B2     		uxth	r1, r1
 974 0004 0181     		strh	r1, [r0, #8]	@ movhi
 975 0006 7047     		bx	lr
 976              		.cfi_endproc
 977              	.LFE132:
 979              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 980              		.align	2
 981              		.global	SPI_I2S_GetITStatus
 982              		.thumb
 983              		.thumb_func
 985              	SPI_I2S_GetITStatus:
 986              	.LFB133:
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 987              		.loc 1 1206 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 0
 990              		@ frame_needed = 0, uses_anonymous_args = 0
 991              		@ link register save eliminated.
 992              	.LVL85:
 993 0000 10B4     		push	{r4}
 994              	.LCFI4:
 995              		.cfi_def_cfa_offset 4
 996              		.cfi_offset 4, -4
 997              	.LVL86:
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 998              		.loc 1 1215 0
 999 0002 01F00F04 		and	r4, r1, #15
 1000 0006 0123     		movs	r3, #1
 1001 0008 03FA04F4 		lsl	r4, r3, r4
 1002              	.LVL87:
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1003              		.loc 1 1218 0
 1004 000c 0909     		lsrs	r1, r1, #4
 1005              	.LVL88:
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1006              		.loc 1 1221 0
 1007 000e 8B40     		lsls	r3, r3, r1
 1008              	.LVL89:
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1009              		.loc 1 1224 0
 1010 0010 8288     		ldrh	r2, [r0, #4]
 1011 0012 92B2     		uxth	r2, r2
 1012 0014 1340     		ands	r3, r3, r2
 1013              	.LVL90:
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1014              		.loc 1 1227 0
 1015 0016 0289     		ldrh	r2, [r0, #8]
 1016 0018 92B2     		uxth	r2, r2
 1017 001a 1442     		tst	r4, r2
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1018              		.loc 1 1235 0
 1019 001c 08BF     		it	eq
 1020 001e 0020     		moveq	r0, #0
 1021              	.LVL91:
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 1022              		.loc 1 1227 0
 1023 0020 03D0     		beq	.L61
 1024              		.loc 1 1235 0 discriminator 1
 1025 0022 181C     		adds	r0, r3, #0
 1026 0024 18BF     		it	ne
 1027 0026 0120     		movne	r0, #1
 1028 0028 FFE7     		b	.L61
 1029              	.L61:
 1030              	.LVL92:
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1031              		.loc 1 1239 0
 1032 002a 5DF8044B 		ldr	r4, [sp], #4
 1033              	.LVL93:
 1034 002e 7047     		bx	lr
 1035              		.cfi_endproc
 1036              	.LFE133:
 1038              		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1039              		.align	2
 1040              		.global	SPI_I2S_ClearITPendingBit
 1041              		.thumb
 1042              		.thumb_func
 1044              	SPI_I2S_ClearITPendingBit:
 1045              	.LFB134:
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1046              		.loc 1 1261 0
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 0
 1049              		@ frame_needed = 0, uses_anonymous_args = 0
 1050              		@ link register save eliminated.
 1051              	.LVL94:
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1052              		.loc 1 1268 0
 1053 0000 01F00F01 		and	r1, r1, #15
 1054              	.LVL95:
 1055 0004 0123     		movs	r3, #1
 1056 0006 8B40     		lsls	r3, r3, r1
 1057              	.LVL96:
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1058              		.loc 1 1271 0
 1059 0008 DB43     		mvns	r3, r3
 1060              	.LVL97:
 1061 000a 9BB2     		uxth	r3, r3
 1062              	.LVL98:
 1063 000c 0381     		strh	r3, [r0, #8]	@ movhi
 1064 000e 7047     		bx	lr
 1065              		.cfi_endproc
 1066              	.LFE134:
 1068              		.text
 1069              	.Letext0:
 1070              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1071              		.file 3 "/usr/include/newlib/stdint.h"
 1072              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1073              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h"
 1074              		.file 6 "libs/CMSIS/Include/core_cm4.h"
 1075              		.file 7 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_spi.c
     /tmp/ccNDauTM.s:20     .text.SPI_I2S_DeInit:0000000000000000 $t
     /tmp/ccNDauTM.s:25     .text.SPI_I2S_DeInit:0000000000000000 SPI_I2S_DeInit
     /tmp/ccNDauTM.s:98     .text.SPI_Init:0000000000000000 $t
     /tmp/ccNDauTM.s:103    .text.SPI_Init:0000000000000000 SPI_Init
     /tmp/ccNDauTM.s:168    .text.I2S_Init:0000000000000000 $t
     /tmp/ccNDauTM.s:173    .text.I2S_Init:0000000000000000 I2S_Init
     /tmp/ccNDauTM.s:336    .text.SPI_StructInit:0000000000000000 $t
     /tmp/ccNDauTM.s:341    .text.SPI_StructInit:0000000000000000 SPI_StructInit
     /tmp/ccNDauTM.s:374    .text.I2S_StructInit:0000000000000000 $t
     /tmp/ccNDauTM.s:379    .text.I2S_StructInit:0000000000000000 I2S_StructInit
     /tmp/ccNDauTM.s:406    .text.SPI_Cmd:0000000000000000 $t
     /tmp/ccNDauTM.s:411    .text.SPI_Cmd:0000000000000000 SPI_Cmd
     /tmp/ccNDauTM.s:439    .text.I2S_Cmd:0000000000000000 $t
     /tmp/ccNDauTM.s:444    .text.I2S_Cmd:0000000000000000 I2S_Cmd
     /tmp/ccNDauTM.s:472    .text.SPI_DataSizeConfig:0000000000000000 $t
     /tmp/ccNDauTM.s:477    .text.SPI_DataSizeConfig:0000000000000000 SPI_DataSizeConfig
     /tmp/ccNDauTM.s:502    .text.SPI_BiDirectionalLineConfig:0000000000000000 $t
     /tmp/ccNDauTM.s:507    .text.SPI_BiDirectionalLineConfig:0000000000000000 SPI_BiDirectionalLineConfig
     /tmp/ccNDauTM.s:533    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 $t
     /tmp/ccNDauTM.s:538    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccNDauTM.s:565    .text.SPI_SSOutputCmd:0000000000000000 $t
     /tmp/ccNDauTM.s:570    .text.SPI_SSOutputCmd:0000000000000000 SPI_SSOutputCmd
     /tmp/ccNDauTM.s:598    .text.SPI_TIModeCmd:0000000000000000 $t
     /tmp/ccNDauTM.s:603    .text.SPI_TIModeCmd:0000000000000000 SPI_TIModeCmd
     /tmp/ccNDauTM.s:631    .text.I2S_FullDuplexConfig:0000000000000000 $t
     /tmp/ccNDauTM.s:636    .text.I2S_FullDuplexConfig:0000000000000000 I2S_FullDuplexConfig
     /tmp/ccNDauTM.s:697    .text.SPI_I2S_ReceiveData:0000000000000000 $t
     /tmp/ccNDauTM.s:702    .text.SPI_I2S_ReceiveData:0000000000000000 SPI_I2S_ReceiveData
     /tmp/ccNDauTM.s:720    .text.SPI_I2S_SendData:0000000000000000 $t
     /tmp/ccNDauTM.s:725    .text.SPI_I2S_SendData:0000000000000000 SPI_I2S_SendData
     /tmp/ccNDauTM.s:740    .text.SPI_CalculateCRC:0000000000000000 $t
     /tmp/ccNDauTM.s:745    .text.SPI_CalculateCRC:0000000000000000 SPI_CalculateCRC
     /tmp/ccNDauTM.s:773    .text.SPI_TransmitCRC:0000000000000000 $t
     /tmp/ccNDauTM.s:778    .text.SPI_TransmitCRC:0000000000000000 SPI_TransmitCRC
     /tmp/ccNDauTM.s:796    .text.SPI_GetCRC:0000000000000000 $t
     /tmp/ccNDauTM.s:801    .text.SPI_GetCRC:0000000000000000 SPI_GetCRC
     /tmp/ccNDauTM.s:825    .text.SPI_GetCRCPolynomial:0000000000000000 $t
     /tmp/ccNDauTM.s:830    .text.SPI_GetCRCPolynomial:0000000000000000 SPI_GetCRCPolynomial
     /tmp/ccNDauTM.s:848    .text.SPI_I2S_DMACmd:0000000000000000 $t
     /tmp/ccNDauTM.s:853    .text.SPI_I2S_DMACmd:0000000000000000 SPI_I2S_DMACmd
     /tmp/ccNDauTM.s:884    .text.SPI_I2S_ITConfig:0000000000000000 $t
     /tmp/ccNDauTM.s:889    .text.SPI_I2S_ITConfig:0000000000000000 SPI_I2S_ITConfig
     /tmp/ccNDauTM.s:929    .text.SPI_I2S_GetFlagStatus:0000000000000000 $t
     /tmp/ccNDauTM.s:934    .text.SPI_I2S_GetFlagStatus:0000000000000000 SPI_I2S_GetFlagStatus
     /tmp/ccNDauTM.s:957    .text.SPI_I2S_ClearFlag:0000000000000000 $t
     /tmp/ccNDauTM.s:962    .text.SPI_I2S_ClearFlag:0000000000000000 SPI_I2S_ClearFlag
     /tmp/ccNDauTM.s:980    .text.SPI_I2S_GetITStatus:0000000000000000 $t
     /tmp/ccNDauTM.s:985    .text.SPI_I2S_GetITStatus:0000000000000000 SPI_I2S_GetITStatus
     /tmp/ccNDauTM.s:1039   .text.SPI_I2S_ClearITPendingBit:0000000000000000 $t
     /tmp/ccNDauTM.s:1044   .text.SPI_I2S_ClearITPendingBit:0000000000000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.113.a88ba198befbcadfddddb0b890b0ec26

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
