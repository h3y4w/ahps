   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	SPI_I2S_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	SPI_I2S_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Data transfers functions
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Hardware CRC Calculation
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           - Interrupts and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                    
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                 How to use this driver
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ===================================================================        
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Enable peripheral clock using the following functions 
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, if an external clock source is used then the I2S CKIN pin GPIO
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             clock should also be enabled.
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Peripherals alternate function: 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Configure the desired pin in alternate function by:
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 - Call GPIO_Init() function
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              In I2S mode, if an external clock source is used then the I2S CKIN pin
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              should be also configured in Alternate function Push-pull pull-up mode. 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             function.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             frequency and Polarity using I2S_Init() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             For I2S mode, make sure that either:
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - I2S PLL is configured using the functions RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLL
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_PLLI2SCmd(ENABLE) and RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY).
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              or 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - External clock source is configured using the function 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly the define c
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             SPI_ITConfig() if you need to use interrupt mode. 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          6. When using the DMA mode 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Configure the DMA using DMA_Init() function
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                   - Active the needed channel Request using SPI_I2S_DMACmd() function
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          7. Enable the SPI using the SPI_Cmd() function or enable the I2S using
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          8. Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          9. Optionally, you can enable/configure the following parameters without
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             re-initialization (i.e there is no need to call again SPI_Init() function):
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                is programmed as Data direction parameter using the SPI_Init() function
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_BiDirectionalLineConfig() function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - When SPI_NSS_Soft is selected as Slave Select Management parameter 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                using the SPI_Init() function it can be possible to manage the 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Reconfigure the data size using the SPI_DataSizeConfig() function  
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              - Enable or disable the SS output using the SPI_SSOutputCmd() function  
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          10. To use the CRC Hardware calculation feature refer to the Peripheral 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              CRC hardware Calculation subsection.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          peripheral is able to manage sending and receiving data simultaneously
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          using two data lines. Each SPI peripheral has an extended block called I2Sxext
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          The extension block is not a full SPI IP, it is used only as I2S slave to
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          implement full duplex mode. The extension block uses the same clock sources
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          as its master.          
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          To configure I2S full duplex you have to:
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          1. Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          2. Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             I2S_Init() function.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          3. Call I2S_Cmd() for SPIx then for its extended block.
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          4. To configure interrupts or DMA requests and to get/clear flag status, 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             use I2Sxext instance for the extension block.
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Functions that can be called with I2Sxext instances are:
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(), I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), SPI_I2S_ClearFlag(),
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_StructInit(&I2SInitStruct);
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Init(SPI3, &I2SInitStruct);
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3, ENABLE);
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          I2S_Cmd(SPI3ext, ENABLE);
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_I2S_SendData(SPI3, txdata[i]);
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          {}
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          ...          
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *              
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *       
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *    
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    This driver supports only the I2S clock scheme available in Silicon
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          RevisionB and RevisionY.
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *     
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In I2S mode: if an external clock is used as source clock for the I2S,  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          be enabled and set to the value of the source clock frequency (in Hz).
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note    In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          just after calling the function SPI_Init().
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  @endverbatim  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   Initialization and Configuration functions
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to initialize the SPI Direction,
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS Management, SPI Baud
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The SPI_Init() function follows the SPI configuration procedures for Master mode
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and Slave mode (details for these procedures are available in reference manual
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (RM0090)).
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Deinitialize the SPIx peripheral registers to their default reset values.
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are deinitialized
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is deinitialized (the extended block's clock
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  28              		.loc 1 223 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  44              		.loc 1 227 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 4FF44053 		mov	r3, #12288
  47 000e C4F20103 		movt	r3, 16385
  48 0012 9A42     		cmp	r2, r3
  49 0014 0AD1     		bne	.L2
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  50              		.loc 1 230 0
  51 0016 4FF48050 		mov	r0, #4096
  52 001a 0121     		movs	r1, #1
  53 001c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  54              		.loc 1 232 0
  55 0020 4FF48050 		mov	r0, #4096
  56 0024 0021     		movs	r1, #0
  57 0026 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  58 002a 22E0     		b	.L1
  59              	.L2:
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  60              		.loc 1 234 0
  61 002c 7A68     		ldr	r2, [r7, #4]
  62 002e 4FF46053 		mov	r3, #14336
  63 0032 C4F20003 		movt	r3, 16384
  64 0036 9A42     		cmp	r2, r3
  65 0038 0AD1     		bne	.L4
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  66              		.loc 1 237 0
  67 003a 4FF48040 		mov	r0, #16384
  68 003e 0121     		movs	r1, #1
  69 0040 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  70              		.loc 1 239 0
  71 0044 4FF48040 		mov	r0, #16384
  72 0048 0021     		movs	r1, #0
  73 004a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  74 004e 10E0     		b	.L1
  75              	.L4:
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI3)
  76              		.loc 1 243 0
  77 0050 7A68     		ldr	r2, [r7, #4]
  78 0052 4FF47053 		mov	r3, #15360
  79 0056 C4F20003 		movt	r3, 16384
  80 005a 9A42     		cmp	r2, r3
  81 005c 09D1     		bne	.L1
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI3 reset state */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  82              		.loc 1 246 0
  83 005e 4FF40040 		mov	r0, #32768
  84 0062 0121     		movs	r1, #1
  85 0064 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI3 from reset state */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  86              		.loc 1 248 0
  87 0068 4FF40040 		mov	r0, #32768
  88 006c 0021     		movs	r1, #0
  89 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90              	.L1:
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
  91              		.loc 1 251 0
  92 0072 0837     		adds	r7, r7, #8
  93 0074 BD46     		mov	sp, r7
  94              		@ sp needed
  95 0076 80BD     		pop	{r7, pc}
  96              		.cfi_endproc
  97              	.LFE110:
  99              		.section	.text.SPI_Init,"ax",%progbits
 100              		.align	2
 101              		.global	SPI_Init
 102              		.thumb
 103              		.thumb_func
 105              	SPI_Init:
 106              	.LFB111:
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 107              		.loc 1 262 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 16
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111              		@ link register save eliminated.
 112 0000 80B4     		push	{r7}
 113              	.LCFI3:
 114              		.cfi_def_cfa_offset 4
 115              		.cfi_offset 7, -4
 116 0002 85B0     		sub	sp, sp, #20
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 24
 119 0004 00AF     		add	r7, sp, #0
 120              	.LCFI5:
 121              		.cfi_def_cfa_register 7
 122 0006 7860     		str	r0, [r7, #4]
 123 0008 3960     		str	r1, [r7]
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 124              		.loc 1 263 0
 125 000a 0023     		movs	r3, #0
 126 000c FB81     		strh	r3, [r7, #14]	@ movhi
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 127              		.loc 1 281 0
 128 000e 7B68     		ldr	r3, [r7, #4]
 129 0010 1B88     		ldrh	r3, [r3]	@ movhi
 130 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 131              		.loc 1 283 0
 132 0014 FB89     		ldrh	r3, [r7, #14]	@ movhi
 133 0016 03F44153 		and	r3, r3, #12352
 134 001a FB81     		strh	r3, [r7, #14]	@ movhi
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 135              		.loc 1 292 0
 136 001c 3B68     		ldr	r3, [r7]
 137 001e 1A88     		ldrh	r2, [r3]
 138 0020 3B68     		ldr	r3, [r7]
 139 0022 5B88     		ldrh	r3, [r3, #2]
 140 0024 1343     		orrs	r3, r3, r2
 141 0026 9AB2     		uxth	r2, r3
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 142              		.loc 1 293 0
 143 0028 3B68     		ldr	r3, [r7]
 144 002a 9B88     		ldrh	r3, [r3, #4]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 145              		.loc 1 292 0
 146 002c 1343     		orrs	r3, r3, r2
 147 002e 9AB2     		uxth	r2, r3
 148              		.loc 1 293 0
 149 0030 3B68     		ldr	r3, [r7]
 150 0032 DB88     		ldrh	r3, [r3, #6]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 151              		.loc 1 292 0
 152 0034 1343     		orrs	r3, r3, r2
 153 0036 9AB2     		uxth	r2, r3
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 154              		.loc 1 294 0
 155 0038 3B68     		ldr	r3, [r7]
 156 003a 1B89     		ldrh	r3, [r3, #8]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 157              		.loc 1 292 0
 158 003c 1343     		orrs	r3, r3, r2
 159 003e 9AB2     		uxth	r2, r3
 160              		.loc 1 294 0
 161 0040 3B68     		ldr	r3, [r7]
 162 0042 5B89     		ldrh	r3, [r3, #10]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 163              		.loc 1 292 0
 164 0044 1343     		orrs	r3, r3, r2
 165 0046 9AB2     		uxth	r2, r3
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 166              		.loc 1 295 0
 167 0048 3B68     		ldr	r3, [r7]
 168 004a 9B89     		ldrh	r3, [r3, #12]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 169              		.loc 1 292 0
 170 004c 1343     		orrs	r3, r3, r2
 171 004e 9AB2     		uxth	r2, r3
 172              		.loc 1 295 0
 173 0050 3B68     		ldr	r3, [r7]
 174 0052 DB89     		ldrh	r3, [r3, #14]
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 175              		.loc 1 292 0
 176 0054 1343     		orrs	r3, r3, r2
 177 0056 9AB2     		uxth	r2, r3
 178 0058 FB89     		ldrh	r3, [r7, #14]	@ movhi
 179 005a 1343     		orrs	r3, r3, r2
 180 005c FB81     		strh	r3, [r7, #14]	@ movhi
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 181              		.loc 1 297 0
 182 005e 7B68     		ldr	r3, [r7, #4]
 183 0060 FA89     		ldrh	r2, [r7, #14]	@ movhi
 184 0062 1A80     		strh	r2, [r3]	@ movhi
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 185              		.loc 1 300 0
 186 0064 7B68     		ldr	r3, [r7, #4]
 187 0066 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 188 0068 9BB2     		uxth	r3, r3
 189 006a 23F40063 		bic	r3, r3, #2048
 190 006e 9AB2     		uxth	r2, r3
 191 0070 7B68     		ldr	r3, [r7, #4]
 192 0072 9A83     		strh	r2, [r3, #28]	@ movhi
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 193              		.loc 1 303 0
 194 0074 3B68     		ldr	r3, [r7]
 195 0076 1A8A     		ldrh	r2, [r3, #16]
 196 0078 7B68     		ldr	r3, [r7, #4]
 197 007a 1A82     		strh	r2, [r3, #16]	@ movhi
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 198              		.loc 1 304 0
 199 007c 1437     		adds	r7, r7, #20
 200 007e BD46     		mov	sp, r7
 201              		@ sp needed
 202 0080 5DF8047B 		ldr	r7, [sp], #4
 203 0084 7047     		bx	lr
 204              		.cfi_endproc
 205              	.LFE111:
 207 0086 00BF     		.section	.text.I2S_Init,"ax",%progbits
 208              		.align	2
 209              		.global	I2S_Init
 210              		.thumb
 211              		.thumb_func
 213              	I2S_Init:
 214              	.LFB112:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 215              		.loc 1 326 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 40
 218              		@ frame_needed = 1, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220 0000 80B4     		push	{r7}
 221              	.LCFI6:
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 7, -4
 224 0002 8BB0     		sub	sp, sp, #44
 225              	.LCFI7:
 226              		.cfi_def_cfa_offset 48
 227 0004 00AF     		add	r7, sp, #0
 228              	.LCFI8:
 229              		.cfi_def_cfa_register 7
 230 0006 7860     		str	r0, [r7, #4]
 231 0008 3960     		str	r1, [r7]
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 232              		.loc 1 327 0
 233 000a 0023     		movs	r3, #0
 234 000c 7B83     		strh	r3, [r7, #26]	@ movhi
 235 000e 0223     		movs	r3, #2
 236 0010 FB84     		strh	r3, [r7, #38]	@ movhi
 237 0012 0023     		movs	r3, #0
 238 0014 BB84     		strh	r3, [r7, #36]	@ movhi
 239 0016 0123     		movs	r3, #1
 240 0018 7B84     		strh	r3, [r7, #34]	@ movhi
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 241              		.loc 1 328 0
 242 001a 0023     		movs	r3, #0
 243 001c FB61     		str	r3, [r7, #28]
 244 001e 0023     		movs	r3, #0
 245 0020 7B61     		str	r3, [r7, #20]
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 246              		.loc 1 330 0
 247 0022 0023     		movs	r3, #0
 248 0024 3B61     		str	r3, [r7, #16]
 249 0026 0023     		movs	r3, #0
 250 0028 FB60     		str	r3, [r7, #12]
 251 002a 0023     		movs	r3, #0
 252 002c BB60     		str	r3, [r7, #8]
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 253              		.loc 1 344 0
 254 002e 7B68     		ldr	r3, [r7, #4]
 255 0030 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 256 0032 9BB2     		uxth	r3, r3
 257 0034 23F47B63 		bic	r3, r3, #4016
 258 0038 23F00F03 		bic	r3, r3, #15
 259 003c 9AB2     		uxth	r2, r3
 260 003e 7B68     		ldr	r3, [r7, #4]
 261 0040 9A83     		strh	r2, [r3, #28]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 262              		.loc 1 345 0
 263 0042 7B68     		ldr	r3, [r7, #4]
 264 0044 0222     		movs	r2, #2
 265 0046 1A84     		strh	r2, [r3, #32]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 266              		.loc 1 348 0
 267 0048 7B68     		ldr	r3, [r7, #4]
 268 004a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 269 004c 7B83     		strh	r3, [r7, #26]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 270              		.loc 1 351 0
 271 004e 3B68     		ldr	r3, [r7]
 272 0050 9B68     		ldr	r3, [r3, #8]
 273 0052 022B     		cmp	r3, #2
 274 0054 04D1     		bne	.L7
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 275              		.loc 1 353 0
 276 0056 0023     		movs	r3, #0
 277 0058 BB84     		strh	r3, [r7, #36]	@ movhi
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 278              		.loc 1 354 0
 279 005a 0223     		movs	r3, #2
 280 005c FB84     		strh	r3, [r7, #38]	@ movhi
 281 005e 89E0     		b	.L8
 282              	.L7:
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 283              		.loc 1 360 0
 284 0060 3B68     		ldr	r3, [r7]
 285 0062 9B88     		ldrh	r3, [r3, #4]
 286 0064 002B     		cmp	r3, #0
 287 0066 02D1     		bne	.L9
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 288              		.loc 1 363 0
 289 0068 0123     		movs	r3, #1
 290 006a 7B84     		strh	r3, [r7, #34]	@ movhi
 291 006c 01E0     		b	.L10
 292              	.L9:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 293              		.loc 1 368 0
 294 006e 0223     		movs	r3, #2
 295 0070 7B84     		strh	r3, [r7, #34]	@ movhi
 296              	.L10:
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency (only in Silicon RevisionB and RevisionY) */
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 297              		.loc 1 387 0
 298 0072 4FF46053 		mov	r3, #14336
 299 0076 C4F20203 		movt	r3, 16386
 300 007a 9B68     		ldr	r3, [r3, #8]
 301 007c 03F40003 		and	r3, r3, #8388608
 302 0080 002B     		cmp	r3, #0
 303 0082 0BD0     		beq	.L11
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 304              		.loc 1 389 0
 305 0084 4FF46053 		mov	r3, #14336
 306 0088 C4F20203 		movt	r3, 16386
 307 008c 4FF46052 		mov	r2, #14336
 308 0090 C4F20202 		movt	r2, 16386
 309 0094 9268     		ldr	r2, [r2, #8]
 310 0096 22F40002 		bic	r2, r2, #8388608
 311 009a 9A60     		str	r2, [r3, #8]
 312              	.L11:
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 313              		.loc 1 393 0
 314 009c 4FF46053 		mov	r3, #14336
 315 00a0 C4F20203 		movt	r3, 16386
 316 00a4 D3F88420 		ldr	r2, [r3, #132]
 317 00a8 47F6C073 		movw	r3, #32704
 318 00ac 1340     		ands	r3, r3, r2
 319 00ae 9B09     		lsrs	r3, r3, #6
 320 00b0 C3F30803 		ubfx	r3, r3, #0, #9
 321 00b4 FB60     		str	r3, [r7, #12]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 322              		.loc 1 397 0
 323 00b6 4FF46053 		mov	r3, #14336
 324 00ba C4F20203 		movt	r3, 16386
 325 00be D3F88430 		ldr	r3, [r3, #132]
 326 00c2 03F0E043 		and	r3, r3, #1879048192
 327 00c6 1B0F     		lsrs	r3, r3, #28
 328 00c8 03F00703 		and	r3, r3, #7
 329 00cc BB60     		str	r3, [r7, #8]
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 330              		.loc 1 401 0
 331 00ce 4FF46053 		mov	r3, #14336
 332 00d2 C4F20203 		movt	r3, 16386
 333 00d6 5B68     		ldr	r3, [r3, #4]
 334 00d8 03F03F03 		and	r3, r3, #63
 335 00dc 3B61     		str	r3, [r7, #16]
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 336              		.loc 1 404 0
 337 00de 4FF49053 		mov	r3, #4608
 338 00e2 C0F27A03 		movt	r3, 122
 339 00e6 3A69     		ldr	r2, [r7, #16]
 340 00e8 B3FBF2F3 		udiv	r3, r3, r2
 341 00ec FA68     		ldr	r2, [r7, #12]
 342 00ee 02FB03F2 		mul	r2, r2, r3
 343 00f2 BB68     		ldr	r3, [r7, #8]
 344 00f4 B2FBF3F3 		udiv	r3, r2, r3
 345 00f8 7B61     		str	r3, [r7, #20]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 346              		.loc 1 408 0
 347 00fa 3B68     		ldr	r3, [r7]
 348 00fc DB88     		ldrh	r3, [r3, #6]
 349 00fe B3F5007F 		cmp	r3, #512
 350 0102 0FD1     		bne	.L12
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 351              		.loc 1 411 0
 352 0104 7B69     		ldr	r3, [r7, #20]
 353 0106 1A0A     		lsrs	r2, r3, #8
 354 0108 1346     		mov	r3, r2
 355 010a 9B00     		lsls	r3, r3, #2
 356 010c 1344     		add	r3, r3, r2
 357 010e 5B00     		lsls	r3, r3, #1
 358 0110 1A46     		mov	r2, r3
 359 0112 3B68     		ldr	r3, [r7]
 360 0114 9B68     		ldr	r3, [r3, #8]
 361 0116 B2FBF3F3 		udiv	r3, r2, r3
 362 011a 9BB2     		uxth	r3, r3
 363 011c 0533     		adds	r3, r3, #5
 364 011e 9BB2     		uxth	r3, r3
 365 0120 FB61     		str	r3, [r7, #28]
 366 0122 11E0     		b	.L13
 367              	.L12:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 368              		.loc 1 416 0
 369 0124 7B8C     		ldrh	r3, [r7, #34]
 370 0126 5B01     		lsls	r3, r3, #5
 371 0128 7A69     		ldr	r2, [r7, #20]
 372 012a B2FBF3F2 		udiv	r2, r2, r3
 373 012e 1346     		mov	r3, r2
 374 0130 9B00     		lsls	r3, r3, #2
 375 0132 1344     		add	r3, r3, r2
 376 0134 5B00     		lsls	r3, r3, #1
 377 0136 1A46     		mov	r2, r3
 378 0138 3B68     		ldr	r3, [r7]
 379 013a 9B68     		ldr	r3, [r3, #8]
 380 013c B2FBF3F3 		udiv	r3, r2, r3
 381 0140 9BB2     		uxth	r3, r3
 382 0142 0533     		adds	r3, r3, #5
 383 0144 9BB2     		uxth	r3, r3
 384 0146 FB61     		str	r3, [r7, #28]
 385              	.L13:
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 386              		.loc 1 420 0
 387 0148 FA69     		ldr	r2, [r7, #28]
 388 014a 4CF6CD43 		movw	r3, #52429
 389 014e CCF6CC43 		movt	r3, 52428
 390 0152 A3FB0213 		umull	r1, r3, r3, r2
 391 0156 DB08     		lsrs	r3, r3, #3
 392 0158 FB61     		str	r3, [r7, #28]
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 393              		.loc 1 423 0
 394 015a FB69     		ldr	r3, [r7, #28]
 395 015c 9BB2     		uxth	r3, r3
 396 015e 03F00103 		and	r3, r3, #1
 397 0162 BB84     		strh	r3, [r7, #36]	@ movhi
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 398              		.loc 1 426 0
 399 0164 BB8C     		ldrh	r3, [r7, #36]
 400 0166 FA69     		ldr	r2, [r7, #28]
 401 0168 D31A     		subs	r3, r2, r3
 402 016a 5B08     		lsrs	r3, r3, #1
 403 016c FB84     		strh	r3, [r7, #38]	@ movhi
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 404              		.loc 1 429 0
 405 016e BB8C     		ldrh	r3, [r7, #36]	@ movhi
 406 0170 1B02     		lsls	r3, r3, #8
 407 0172 BB84     		strh	r3, [r7, #36]	@ movhi
 408              	.L8:
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 409              		.loc 1 433 0
 410 0174 FB8C     		ldrh	r3, [r7, #38]
 411 0176 012B     		cmp	r3, #1
 412 0178 02D9     		bls	.L14
 413              		.loc 1 433 0 is_stmt 0 discriminator 1
 414 017a FB8C     		ldrh	r3, [r7, #38]
 415 017c FF2B     		cmp	r3, #255
 416 017e 03D9     		bls	.L15
 417              	.L14:
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 418              		.loc 1 436 0 is_stmt 1
 419 0180 0223     		movs	r3, #2
 420 0182 FB84     		strh	r3, [r7, #38]	@ movhi
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 421              		.loc 1 437 0
 422 0184 0023     		movs	r3, #0
 423 0186 BB84     		strh	r3, [r7, #36]	@ movhi
 424              	.L15:
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 425              		.loc 1 441 0
 426 0188 3B68     		ldr	r3, [r7]
 427 018a DA88     		ldrh	r2, [r3, #6]
 428 018c BB8C     		ldrh	r3, [r7, #36]	@ movhi
 429 018e 1343     		orrs	r3, r3, r2
 430 0190 9AB2     		uxth	r2, r3
 431 0192 FB8C     		ldrh	r3, [r7, #38]	@ movhi
 432 0194 1343     		orrs	r3, r3, r2
 433 0196 9AB2     		uxth	r2, r3
 434 0198 7B68     		ldr	r3, [r7, #4]
 435 019a 1A84     		strh	r2, [r3, #32]	@ movhi
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 436              		.loc 1 444 0
 437 019c 3B68     		ldr	r3, [r7]
 438 019e 1A88     		ldrh	r2, [r3]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 439              		.loc 1 445 0
 440 01a0 3B68     		ldr	r3, [r7]
 441 01a2 5988     		ldrh	r1, [r3, #2]
 442 01a4 3B68     		ldr	r3, [r7]
 443 01a6 9888     		ldrh	r0, [r3, #4]
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 444              		.loc 1 446 0
 445 01a8 3B68     		ldr	r3, [r7]
 446 01aa 9B89     		ldrh	r3, [r3, #12]
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 447              		.loc 1 445 0
 448 01ac 0343     		orrs	r3, r3, r0
 449 01ae 9BB2     		uxth	r3, r3
 450 01b0 0B43     		orrs	r3, r3, r1
 451 01b2 9BB2     		uxth	r3, r3
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 452              		.loc 1 444 0
 453 01b4 1343     		orrs	r3, r3, r2
 454 01b6 9AB2     		uxth	r2, r3
 455 01b8 7B8B     		ldrh	r3, [r7, #26]	@ movhi
 456 01ba 1343     		orrs	r3, r3, r2
 457 01bc 9BB2     		uxth	r3, r3
 458 01be 43F40063 		orr	r3, r3, #2048
 459 01c2 7B83     		strh	r3, [r7, #26]	@ movhi
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 460              		.loc 1 449 0
 461 01c4 7B68     		ldr	r3, [r7, #4]
 462 01c6 7A8B     		ldrh	r2, [r7, #26]	@ movhi
 463 01c8 9A83     		strh	r2, [r3, #28]	@ movhi
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 464              		.loc 1 450 0
 465 01ca 2C37     		adds	r7, r7, #44
 466 01cc BD46     		mov	sp, r7
 467              		@ sp needed
 468 01ce 5DF8047B 		ldr	r7, [sp], #4
 469 01d2 7047     		bx	lr
 470              		.cfi_endproc
 471              	.LFE112:
 473              		.section	.text.SPI_StructInit,"ax",%progbits
 474              		.align	2
 475              		.global	SPI_StructInit
 476              		.thumb
 477              		.thumb_func
 479              	SPI_StructInit:
 480              	.LFB113:
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 481              		.loc 1 458 0
 482              		.cfi_startproc
 483              		@ args = 0, pretend = 0, frame = 8
 484              		@ frame_needed = 1, uses_anonymous_args = 0
 485              		@ link register save eliminated.
 486 0000 80B4     		push	{r7}
 487              	.LCFI9:
 488              		.cfi_def_cfa_offset 4
 489              		.cfi_offset 7, -4
 490 0002 83B0     		sub	sp, sp, #12
 491              	.LCFI10:
 492              		.cfi_def_cfa_offset 16
 493 0004 00AF     		add	r7, sp, #0
 494              	.LCFI11:
 495              		.cfi_def_cfa_register 7
 496 0006 7860     		str	r0, [r7, #4]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 497              		.loc 1 461 0
 498 0008 7B68     		ldr	r3, [r7, #4]
 499 000a 0022     		movs	r2, #0
 500 000c 1A80     		strh	r2, [r3]	@ movhi
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 501              		.loc 1 463 0
 502 000e 7B68     		ldr	r3, [r7, #4]
 503 0010 0022     		movs	r2, #0
 504 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 505              		.loc 1 465 0
 506 0014 7B68     		ldr	r3, [r7, #4]
 507 0016 0022     		movs	r2, #0
 508 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 509              		.loc 1 467 0
 510 001a 7B68     		ldr	r3, [r7, #4]
 511 001c 0022     		movs	r2, #0
 512 001e DA80     		strh	r2, [r3, #6]	@ movhi
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 513              		.loc 1 469 0
 514 0020 7B68     		ldr	r3, [r7, #4]
 515 0022 0022     		movs	r2, #0
 516 0024 1A81     		strh	r2, [r3, #8]	@ movhi
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 517              		.loc 1 471 0
 518 0026 7B68     		ldr	r3, [r7, #4]
 519 0028 0022     		movs	r2, #0
 520 002a 5A81     		strh	r2, [r3, #10]	@ movhi
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 521              		.loc 1 473 0
 522 002c 7B68     		ldr	r3, [r7, #4]
 523 002e 0022     		movs	r2, #0
 524 0030 9A81     		strh	r2, [r3, #12]	@ movhi
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 525              		.loc 1 475 0
 526 0032 7B68     		ldr	r3, [r7, #4]
 527 0034 0022     		movs	r2, #0
 528 0036 DA81     		strh	r2, [r3, #14]	@ movhi
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 529              		.loc 1 477 0
 530 0038 7B68     		ldr	r3, [r7, #4]
 531 003a 0722     		movs	r2, #7
 532 003c 1A82     		strh	r2, [r3, #16]	@ movhi
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 533              		.loc 1 478 0
 534 003e 0C37     		adds	r7, r7, #12
 535 0040 BD46     		mov	sp, r7
 536              		@ sp needed
 537 0042 5DF8047B 		ldr	r7, [sp], #4
 538 0046 7047     		bx	lr
 539              		.cfi_endproc
 540              	.LFE113:
 542              		.section	.text.I2S_StructInit,"ax",%progbits
 543              		.align	2
 544              		.global	I2S_StructInit
 545              		.thumb
 546              		.thumb_func
 548              	I2S_StructInit:
 549              	.LFB114:
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 550              		.loc 1 486 0
 551              		.cfi_startproc
 552              		@ args = 0, pretend = 0, frame = 8
 553              		@ frame_needed = 1, uses_anonymous_args = 0
 554              		@ link register save eliminated.
 555 0000 80B4     		push	{r7}
 556              	.LCFI12:
 557              		.cfi_def_cfa_offset 4
 558              		.cfi_offset 7, -4
 559 0002 83B0     		sub	sp, sp, #12
 560              	.LCFI13:
 561              		.cfi_def_cfa_offset 16
 562 0004 00AF     		add	r7, sp, #0
 563              	.LCFI14:
 564              		.cfi_def_cfa_register 7
 565 0006 7860     		str	r0, [r7, #4]
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 566              		.loc 1 489 0
 567 0008 7B68     		ldr	r3, [r7, #4]
 568 000a 0022     		movs	r2, #0
 569 000c 1A80     		strh	r2, [r3]	@ movhi
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 570              		.loc 1 492 0
 571 000e 7B68     		ldr	r3, [r7, #4]
 572 0010 0022     		movs	r2, #0
 573 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 574              		.loc 1 495 0
 575 0014 7B68     		ldr	r3, [r7, #4]
 576 0016 0022     		movs	r2, #0
 577 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 578              		.loc 1 498 0
 579 001a 7B68     		ldr	r3, [r7, #4]
 580 001c 0022     		movs	r2, #0
 581 001e DA80     		strh	r2, [r3, #6]	@ movhi
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 582              		.loc 1 501 0
 583 0020 7B68     		ldr	r3, [r7, #4]
 584 0022 0222     		movs	r2, #2
 585 0024 9A60     		str	r2, [r3, #8]
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 586              		.loc 1 504 0
 587 0026 7B68     		ldr	r3, [r7, #4]
 588 0028 0022     		movs	r2, #0
 589 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 590              		.loc 1 505 0
 591 002c 0C37     		adds	r7, r7, #12
 592 002e BD46     		mov	sp, r7
 593              		@ sp needed
 594 0030 5DF8047B 		ldr	r7, [sp], #4
 595 0034 7047     		bx	lr
 596              		.cfi_endproc
 597              	.LFE114:
 599 0036 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 600              		.align	2
 601              		.global	SPI_Cmd
 602              		.thumb
 603              		.thumb_func
 605              	SPI_Cmd:
 606              	.LFB115:
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 607              		.loc 1 515 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 8
 610              		@ frame_needed = 1, uses_anonymous_args = 0
 611              		@ link register save eliminated.
 612 0000 80B4     		push	{r7}
 613              	.LCFI15:
 614              		.cfi_def_cfa_offset 4
 615              		.cfi_offset 7, -4
 616 0002 83B0     		sub	sp, sp, #12
 617              	.LCFI16:
 618              		.cfi_def_cfa_offset 16
 619 0004 00AF     		add	r7, sp, #0
 620              	.LCFI17:
 621              		.cfi_def_cfa_register 7
 622 0006 7860     		str	r0, [r7, #4]
 623 0008 0B46     		mov	r3, r1
 624 000a FB70     		strb	r3, [r7, #3]
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 625              		.loc 1 519 0
 626 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 627 000e 002B     		cmp	r3, #0
 628 0010 08D0     		beq	.L19
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 629              		.loc 1 522 0
 630 0012 7B68     		ldr	r3, [r7, #4]
 631 0014 1B88     		ldrh	r3, [r3]	@ movhi
 632 0016 9BB2     		uxth	r3, r3
 633 0018 43F04003 		orr	r3, r3, #64
 634 001c 9AB2     		uxth	r2, r3
 635 001e 7B68     		ldr	r3, [r7, #4]
 636 0020 1A80     		strh	r2, [r3]	@ movhi
 637 0022 07E0     		b	.L18
 638              	.L19:
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 639              		.loc 1 527 0
 640 0024 7B68     		ldr	r3, [r7, #4]
 641 0026 1B88     		ldrh	r3, [r3]	@ movhi
 642 0028 9BB2     		uxth	r3, r3
 643 002a 23F04003 		bic	r3, r3, #64
 644 002e 9AB2     		uxth	r2, r3
 645 0030 7B68     		ldr	r3, [r7, #4]
 646 0032 1A80     		strh	r2, [r3]	@ movhi
 647              	.L18:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 648              		.loc 1 529 0
 649 0034 0C37     		adds	r7, r7, #12
 650 0036 BD46     		mov	sp, r7
 651              		@ sp needed
 652 0038 5DF8047B 		ldr	r7, [sp], #4
 653 003c 7047     		bx	lr
 654              		.cfi_endproc
 655              	.LFE115:
 657 003e 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 658              		.align	2
 659              		.global	I2S_Cmd
 660              		.thumb
 661              		.thumb_func
 663              	I2S_Cmd:
 664              	.LFB116:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 665              		.loc 1 540 0
 666              		.cfi_startproc
 667              		@ args = 0, pretend = 0, frame = 8
 668              		@ frame_needed = 1, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 670 0000 80B4     		push	{r7}
 671              	.LCFI18:
 672              		.cfi_def_cfa_offset 4
 673              		.cfi_offset 7, -4
 674 0002 83B0     		sub	sp, sp, #12
 675              	.LCFI19:
 676              		.cfi_def_cfa_offset 16
 677 0004 00AF     		add	r7, sp, #0
 678              	.LCFI20:
 679              		.cfi_def_cfa_register 7
 680 0006 7860     		str	r0, [r7, #4]
 681 0008 0B46     		mov	r3, r1
 682 000a FB70     		strb	r3, [r7, #3]
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 683              		.loc 1 545 0
 684 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 685 000e 002B     		cmp	r3, #0
 686 0010 08D0     		beq	.L22
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 687              		.loc 1 548 0
 688 0012 7B68     		ldr	r3, [r7, #4]
 689 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 690 0016 9BB2     		uxth	r3, r3
 691 0018 43F48063 		orr	r3, r3, #1024
 692 001c 9AB2     		uxth	r2, r3
 693 001e 7B68     		ldr	r3, [r7, #4]
 694 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 695 0022 07E0     		b	.L21
 696              	.L22:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 697              		.loc 1 553 0
 698 0024 7B68     		ldr	r3, [r7, #4]
 699 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 700 0028 9BB2     		uxth	r3, r3
 701 002a 23F48063 		bic	r3, r3, #1024
 702 002e 9AB2     		uxth	r2, r3
 703 0030 7B68     		ldr	r3, [r7, #4]
 704 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 705              	.L21:
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 706              		.loc 1 555 0
 707 0034 0C37     		adds	r7, r7, #12
 708 0036 BD46     		mov	sp, r7
 709              		@ sp needed
 710 0038 5DF8047B 		ldr	r7, [sp], #4
 711 003c 7047     		bx	lr
 712              		.cfi_endproc
 713              	.LFE116:
 715 003e 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 716              		.align	2
 717              		.global	SPI_DataSizeConfig
 718              		.thumb
 719              		.thumb_func
 721              	SPI_DataSizeConfig:
 722              	.LFB117:
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 723              		.loc 1 567 0
 724              		.cfi_startproc
 725              		@ args = 0, pretend = 0, frame = 8
 726              		@ frame_needed = 1, uses_anonymous_args = 0
 727              		@ link register save eliminated.
 728 0000 80B4     		push	{r7}
 729              	.LCFI21:
 730              		.cfi_def_cfa_offset 4
 731              		.cfi_offset 7, -4
 732 0002 83B0     		sub	sp, sp, #12
 733              	.LCFI22:
 734              		.cfi_def_cfa_offset 16
 735 0004 00AF     		add	r7, sp, #0
 736              	.LCFI23:
 737              		.cfi_def_cfa_register 7
 738 0006 7860     		str	r0, [r7, #4]
 739 0008 0B46     		mov	r3, r1
 740 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 741              		.loc 1 572 0
 742 000c 7B68     		ldr	r3, [r7, #4]
 743 000e 1B88     		ldrh	r3, [r3]	@ movhi
 744 0010 9BB2     		uxth	r3, r3
 745 0012 23F40063 		bic	r3, r3, #2048
 746 0016 9AB2     		uxth	r2, r3
 747 0018 7B68     		ldr	r3, [r7, #4]
 748 001a 1A80     		strh	r2, [r3]	@ movhi
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 749              		.loc 1 574 0
 750 001c 7B68     		ldr	r3, [r7, #4]
 751 001e 1B88     		ldrh	r3, [r3]	@ movhi
 752 0020 9AB2     		uxth	r2, r3
 753 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 754 0024 1343     		orrs	r3, r3, r2
 755 0026 9AB2     		uxth	r2, r3
 756 0028 7B68     		ldr	r3, [r7, #4]
 757 002a 1A80     		strh	r2, [r3]	@ movhi
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 758              		.loc 1 575 0
 759 002c 0C37     		adds	r7, r7, #12
 760 002e BD46     		mov	sp, r7
 761              		@ sp needed
 762 0030 5DF8047B 		ldr	r7, [sp], #4
 763 0034 7047     		bx	lr
 764              		.cfi_endproc
 765              	.LFE117:
 767 0036 00BF     		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 768              		.align	2
 769              		.global	SPI_BiDirectionalLineConfig
 770              		.thumb
 771              		.thumb_func
 773              	SPI_BiDirectionalLineConfig:
 774              	.LFB118:
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 775              		.loc 1 587 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 8
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780 0000 80B4     		push	{r7}
 781              	.LCFI24:
 782              		.cfi_def_cfa_offset 4
 783              		.cfi_offset 7, -4
 784 0002 83B0     		sub	sp, sp, #12
 785              	.LCFI25:
 786              		.cfi_def_cfa_offset 16
 787 0004 00AF     		add	r7, sp, #0
 788              	.LCFI26:
 789              		.cfi_def_cfa_register 7
 790 0006 7860     		str	r0, [r7, #4]
 791 0008 0B46     		mov	r3, r1
 792 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 793              		.loc 1 591 0
 794 000c 7B88     		ldrh	r3, [r7, #2]
 795 000e B3F5804F 		cmp	r3, #16384
 796 0012 08D1     		bne	.L26
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 797              		.loc 1 594 0
 798 0014 7B68     		ldr	r3, [r7, #4]
 799 0016 1B88     		ldrh	r3, [r3]	@ movhi
 800 0018 9BB2     		uxth	r3, r3
 801 001a 43F48043 		orr	r3, r3, #16384
 802 001e 9AB2     		uxth	r2, r3
 803 0020 7B68     		ldr	r3, [r7, #4]
 804 0022 1A80     		strh	r2, [r3]	@ movhi
 805 0024 07E0     		b	.L25
 806              	.L26:
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 807              		.loc 1 599 0
 808 0026 7B68     		ldr	r3, [r7, #4]
 809 0028 1B88     		ldrh	r3, [r3]	@ movhi
 810 002a 9BB2     		uxth	r3, r3
 811 002c 23F48043 		bic	r3, r3, #16384
 812 0030 9AB2     		uxth	r2, r3
 813 0032 7B68     		ldr	r3, [r7, #4]
 814 0034 1A80     		strh	r2, [r3]	@ movhi
 815              	.L25:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 816              		.loc 1 601 0
 817 0036 0C37     		adds	r7, r7, #12
 818 0038 BD46     		mov	sp, r7
 819              		@ sp needed
 820 003a 5DF8047B 		ldr	r7, [sp], #4
 821 003e 7047     		bx	lr
 822              		.cfi_endproc
 823              	.LFE118:
 825              		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 826              		.align	2
 827              		.global	SPI_NSSInternalSoftwareConfig
 828              		.thumb
 829              		.thumb_func
 831              	SPI_NSSInternalSoftwareConfig:
 832              	.LFB119:
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 833              		.loc 1 613 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 8
 836              		@ frame_needed = 1, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 838 0000 80B4     		push	{r7}
 839              	.LCFI27:
 840              		.cfi_def_cfa_offset 4
 841              		.cfi_offset 7, -4
 842 0002 83B0     		sub	sp, sp, #12
 843              	.LCFI28:
 844              		.cfi_def_cfa_offset 16
 845 0004 00AF     		add	r7, sp, #0
 846              	.LCFI29:
 847              		.cfi_def_cfa_register 7
 848 0006 7860     		str	r0, [r7, #4]
 849 0008 0B46     		mov	r3, r1
 850 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 851              		.loc 1 617 0
 852 000c 7A88     		ldrh	r2, [r7, #2]
 853 000e 4FF6FF63 		movw	r3, #65279
 854 0012 9A42     		cmp	r2, r3
 855 0014 08D0     		beq	.L29
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 856              		.loc 1 620 0
 857 0016 7B68     		ldr	r3, [r7, #4]
 858 0018 1B88     		ldrh	r3, [r3]	@ movhi
 859 001a 9BB2     		uxth	r3, r3
 860 001c 43F48073 		orr	r3, r3, #256
 861 0020 9AB2     		uxth	r2, r3
 862 0022 7B68     		ldr	r3, [r7, #4]
 863 0024 1A80     		strh	r2, [r3]	@ movhi
 864 0026 07E0     		b	.L28
 865              	.L29:
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 866              		.loc 1 625 0
 867 0028 7B68     		ldr	r3, [r7, #4]
 868 002a 1B88     		ldrh	r3, [r3]	@ movhi
 869 002c 9BB2     		uxth	r3, r3
 870 002e 23F48073 		bic	r3, r3, #256
 871 0032 9AB2     		uxth	r2, r3
 872 0034 7B68     		ldr	r3, [r7, #4]
 873 0036 1A80     		strh	r2, [r3]	@ movhi
 874              	.L28:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 875              		.loc 1 627 0
 876 0038 0C37     		adds	r7, r7, #12
 877 003a BD46     		mov	sp, r7
 878              		@ sp needed
 879 003c 5DF8047B 		ldr	r7, [sp], #4
 880 0040 7047     		bx	lr
 881              		.cfi_endproc
 882              	.LFE119:
 884 0042 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 885              		.align	2
 886              		.global	SPI_SSOutputCmd
 887              		.thumb
 888              		.thumb_func
 890              	SPI_SSOutputCmd:
 891              	.LFB120:
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 892              		.loc 1 637 0
 893              		.cfi_startproc
 894              		@ args = 0, pretend = 0, frame = 8
 895              		@ frame_needed = 1, uses_anonymous_args = 0
 896              		@ link register save eliminated.
 897 0000 80B4     		push	{r7}
 898              	.LCFI30:
 899              		.cfi_def_cfa_offset 4
 900              		.cfi_offset 7, -4
 901 0002 83B0     		sub	sp, sp, #12
 902              	.LCFI31:
 903              		.cfi_def_cfa_offset 16
 904 0004 00AF     		add	r7, sp, #0
 905              	.LCFI32:
 906              		.cfi_def_cfa_register 7
 907 0006 7860     		str	r0, [r7, #4]
 908 0008 0B46     		mov	r3, r1
 909 000a FB70     		strb	r3, [r7, #3]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 910              		.loc 1 641 0
 911 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 912 000e 002B     		cmp	r3, #0
 913 0010 08D0     		beq	.L32
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 914              		.loc 1 644 0
 915 0012 7B68     		ldr	r3, [r7, #4]
 916 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 917 0016 9BB2     		uxth	r3, r3
 918 0018 43F00403 		orr	r3, r3, #4
 919 001c 9AB2     		uxth	r2, r3
 920 001e 7B68     		ldr	r3, [r7, #4]
 921 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 922 0022 07E0     		b	.L31
 923              	.L32:
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 924              		.loc 1 649 0
 925 0024 7B68     		ldr	r3, [r7, #4]
 926 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 927 0028 9BB2     		uxth	r3, r3
 928 002a 23F00403 		bic	r3, r3, #4
 929 002e 9AB2     		uxth	r2, r3
 930 0030 7B68     		ldr	r3, [r7, #4]
 931 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 932              	.L31:
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 933              		.loc 1 651 0
 934 0034 0C37     		adds	r7, r7, #12
 935 0036 BD46     		mov	sp, r7
 936              		@ sp needed
 937 0038 5DF8047B 		ldr	r7, [sp], #4
 938 003c 7047     		bx	lr
 939              		.cfi_endproc
 940              	.LFE120:
 942 003e 00BF     		.section	.text.SPI_TIModeCmd,"ax",%progbits
 943              		.align	2
 944              		.global	SPI_TIModeCmd
 945              		.thumb
 946              		.thumb_func
 948              	SPI_TIModeCmd:
 949              	.LFB121:
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 950              		.loc 1 668 0
 951              		.cfi_startproc
 952              		@ args = 0, pretend = 0, frame = 8
 953              		@ frame_needed = 1, uses_anonymous_args = 0
 954              		@ link register save eliminated.
 955 0000 80B4     		push	{r7}
 956              	.LCFI33:
 957              		.cfi_def_cfa_offset 4
 958              		.cfi_offset 7, -4
 959 0002 83B0     		sub	sp, sp, #12
 960              	.LCFI34:
 961              		.cfi_def_cfa_offset 16
 962 0004 00AF     		add	r7, sp, #0
 963              	.LCFI35:
 964              		.cfi_def_cfa_register 7
 965 0006 7860     		str	r0, [r7, #4]
 966 0008 0B46     		mov	r3, r1
 967 000a FB70     		strb	r3, [r7, #3]
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 968              		.loc 1 673 0
 969 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 970 000e 002B     		cmp	r3, #0
 971 0010 08D0     		beq	.L35
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 972              		.loc 1 676 0
 973 0012 7B68     		ldr	r3, [r7, #4]
 974 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 975 0016 9BB2     		uxth	r3, r3
 976 0018 43F01003 		orr	r3, r3, #16
 977 001c 9AB2     		uxth	r2, r3
 978 001e 7B68     		ldr	r3, [r7, #4]
 979 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 980 0022 07E0     		b	.L34
 981              	.L35:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 982              		.loc 1 681 0
 983 0024 7B68     		ldr	r3, [r7, #4]
 984 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 985 0028 9BB2     		uxth	r3, r3
 986 002a 23F01003 		bic	r3, r3, #16
 987 002e 9AB2     		uxth	r2, r3
 988 0030 7B68     		ldr	r3, [r7, #4]
 989 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 990              	.L34:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 991              		.loc 1 683 0
 992 0034 0C37     		adds	r7, r7, #12
 993 0036 BD46     		mov	sp, r7
 994              		@ sp needed
 995 0038 5DF8047B 		ldr	r7, [sp], #4
 996 003c 7047     		bx	lr
 997              		.cfi_endproc
 998              	.LFE121:
 1000 003e 00BF     		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 1001              		.align	2
 1002              		.global	I2S_FullDuplexConfig
 1003              		.thumb
 1004              		.thumb_func
 1006              	I2S_FullDuplexConfig:
 1007              	.LFB122:
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1008              		.loc 1 705 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 16
 1011              		@ frame_needed = 1, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 1013 0000 80B4     		push	{r7}
 1014              	.LCFI36:
 1015              		.cfi_def_cfa_offset 4
 1016              		.cfi_offset 7, -4
 1017 0002 85B0     		sub	sp, sp, #20
 1018              	.LCFI37:
 1019              		.cfi_def_cfa_offset 24
 1020 0004 00AF     		add	r7, sp, #0
 1021              	.LCFI38:
 1022              		.cfi_def_cfa_register 7
 1023 0006 7860     		str	r0, [r7, #4]
 1024 0008 3960     		str	r1, [r7]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 1025              		.loc 1 706 0
 1026 000a 0023     		movs	r3, #0
 1027 000c BB81     		strh	r3, [r7, #12]	@ movhi
 1028 000e 0023     		movs	r3, #0
 1029 0010 FB81     		strh	r3, [r7, #14]	@ movhi
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 1030              		.loc 1 717 0
 1031 0012 7B68     		ldr	r3, [r7, #4]
 1032 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1033 0016 9BB2     		uxth	r3, r3
 1034 0018 23F47B63 		bic	r3, r3, #4016
 1035 001c 23F00F03 		bic	r3, r3, #15
 1036 0020 9AB2     		uxth	r2, r3
 1037 0022 7B68     		ldr	r3, [r7, #4]
 1038 0024 9A83     		strh	r2, [r3, #28]	@ movhi
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 1039              		.loc 1 718 0
 1040 0026 7B68     		ldr	r3, [r7, #4]
 1041 0028 0222     		movs	r2, #2
 1042 002a 1A84     		strh	r2, [r3, #32]	@ movhi
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 1043              		.loc 1 721 0
 1044 002c 7B68     		ldr	r3, [r7, #4]
 1045 002e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1046 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 1047              		.loc 1 724 0
 1048 0032 3B68     		ldr	r3, [r7]
 1049 0034 1B88     		ldrh	r3, [r3]
 1050 0036 B3F5007F 		cmp	r3, #512
 1051 003a 03D0     		beq	.L38
 1052              		.loc 1 724 0 is_stmt 0 discriminator 1
 1053 003c 3B68     		ldr	r3, [r7]
 1054 003e 1B88     		ldrh	r3, [r3]
 1055 0040 002B     		cmp	r3, #0
 1056 0042 03D1     		bne	.L39
 1057              	.L38:
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 1058              		.loc 1 726 0 is_stmt 1
 1059 0044 4FF48073 		mov	r3, #256
 1060 0048 FB81     		strh	r3, [r7, #14]	@ movhi
 1061 004a 0BE0     		b	.L40
 1062              	.L39:
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 1063              		.loc 1 730 0
 1064 004c 3B68     		ldr	r3, [r7]
 1065 004e 1B88     		ldrh	r3, [r3]
 1066 0050 B3F5407F 		cmp	r3, #768
 1067 0054 04D0     		beq	.L41
 1068              		.loc 1 730 0 is_stmt 0 discriminator 1
 1069 0056 3B68     		ldr	r3, [r7]
 1070 0058 1B88     		ldrh	r3, [r3]
 1071 005a B3F5807F 		cmp	r3, #256
 1072 005e 01D1     		bne	.L40
 1073              	.L41:
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 1074              		.loc 1 732 0 is_stmt 1
 1075 0060 0023     		movs	r3, #0
 1076 0062 FB81     		strh	r3, [r7, #14]	@ movhi
 1077              	.L40:
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1078              		.loc 1 739 0
 1079 0064 3B68     		ldr	r3, [r7]
 1080 0066 5A88     		ldrh	r2, [r3, #2]
 1081 0068 3B68     		ldr	r3, [r7]
 1082 006a 9988     		ldrh	r1, [r3, #4]
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1083              		.loc 1 740 0
 1084 006c 3B68     		ldr	r3, [r7]
 1085 006e 9B89     		ldrh	r3, [r3, #12]
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 1086              		.loc 1 739 0
 1087 0070 0B43     		orrs	r3, r3, r1
 1088 0072 9BB2     		uxth	r3, r3
 1089 0074 1343     		orrs	r3, r3, r2
 1090 0076 9AB2     		uxth	r2, r3
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 1091              		.loc 1 738 0
 1092 0078 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1093 007a 1343     		orrs	r3, r3, r2
 1094 007c 9AB2     		uxth	r2, r3
 1095 007e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1096 0080 1343     		orrs	r3, r3, r2
 1097 0082 9BB2     		uxth	r3, r3
 1098 0084 43F40063 		orr	r3, r3, #2048
 1099 0088 BB81     		strh	r3, [r7, #12]	@ movhi
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 1100              		.loc 1 743 0
 1101 008a 7B68     		ldr	r3, [r7, #4]
 1102 008c BA89     		ldrh	r2, [r7, #12]	@ movhi
 1103 008e 9A83     		strh	r2, [r3, #28]	@ movhi
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1104              		.loc 1 744 0
 1105 0090 1437     		adds	r7, r7, #20
 1106 0092 BD46     		mov	sp, r7
 1107              		@ sp needed
 1108 0094 5DF8047B 		ldr	r7, [sp], #4
 1109 0098 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE122:
 1113 009a 00BF     		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 1114              		.align	2
 1115              		.global	SPI_I2S_ReceiveData
 1116              		.thumb
 1117              		.thumb_func
 1119              	SPI_I2S_ReceiveData:
 1120              	.LFB123:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Data transfers functions
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI data transfers
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In reception, data are received and then stored into an internal Rx buffer while 
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In transmission, data are first stored into an internal Tx buffer before being 
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   transmitted.
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   can be done using SPI_I2S_SendData() function and stores the written data into 
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Tx buffer.
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1121              		.loc 1 780 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 8
 1124              		@ frame_needed = 1, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126 0000 80B4     		push	{r7}
 1127              	.LCFI39:
 1128              		.cfi_def_cfa_offset 4
 1129              		.cfi_offset 7, -4
 1130 0002 83B0     		sub	sp, sp, #12
 1131              	.LCFI40:
 1132              		.cfi_def_cfa_offset 16
 1133 0004 00AF     		add	r7, sp, #0
 1134              	.LCFI41:
 1135              		.cfi_def_cfa_register 7
 1136 0006 7860     		str	r0, [r7, #4]
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 1137              		.loc 1 785 0
 1138 0008 7B68     		ldr	r3, [r7, #4]
 1139 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1140 000c 9BB2     		uxth	r3, r3
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1141              		.loc 1 786 0
 1142 000e 1846     		mov	r0, r3
 1143 0010 0C37     		adds	r7, r7, #12
 1144 0012 BD46     		mov	sp, r7
 1145              		@ sp needed
 1146 0014 5DF8047B 		ldr	r7, [sp], #4
 1147 0018 7047     		bx	lr
 1148              		.cfi_endproc
 1149              	.LFE123:
 1151 001a 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 1152              		.align	2
 1153              		.global	SPI_I2S_SendData
 1154              		.thumb
 1155              		.thumb_func
 1157              	SPI_I2S_SendData:
 1158              	.LFB124:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1159              		.loc 1 796 0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 8
 1162              		@ frame_needed = 1, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
 1164 0000 80B4     		push	{r7}
 1165              	.LCFI42:
 1166              		.cfi_def_cfa_offset 4
 1167              		.cfi_offset 7, -4
 1168 0002 83B0     		sub	sp, sp, #12
 1169              	.LCFI43:
 1170              		.cfi_def_cfa_offset 16
 1171 0004 00AF     		add	r7, sp, #0
 1172              	.LCFI44:
 1173              		.cfi_def_cfa_register 7
 1174 0006 7860     		str	r0, [r7, #4]
 1175 0008 0B46     		mov	r3, r1
 1176 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 1177              		.loc 1 801 0
 1178 000c 7B68     		ldr	r3, [r7, #4]
 1179 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1180 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1181              		.loc 1 802 0
 1182 0012 0C37     		adds	r7, r7, #12
 1183 0014 BD46     		mov	sp, r7
 1184              		@ sp needed
 1185 0016 5DF8047B 		ldr	r7, [sp], #4
 1186 001a 7047     		bx	lr
 1187              		.cfi_endproc
 1188              	.LFE124:
 1190              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 1191              		.align	2
 1192              		.global	SPI_CalculateCRC
 1193              		.thumb
 1194              		.thumb_func
 1196              	SPI_CalculateCRC:
 1197              	.LFB125:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Hardware CRC Calculation functions
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to manage the SPI CRC hardware 
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   calculation
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI communication using CRC is possible through the following procedure:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         function.
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. Enable the CRC calculation using the SPI_CalculateCRC() function.
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. Enable the SPI using the SPI_Cmd() function
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. Before writing the last data to the TX buffer, set the CRCNext bit using the 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_TransmitCRC() function to indicate that after transmission of the last 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       data, the CRC should be transmitted.
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note It is advised not to read the calculated CRC values during the communication.
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is in slave mode, be careful to enable CRC calculation only 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       when the clock is stable, that is, when the clock is in the steady state. 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the value of the SPE bit.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note With high bitrate frequencies, be careful when transmitting the CRC.
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       As the number of used CPU cycles has to be as low as possible in the CRC 
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfer phase, it is forbidden to call software functions in the CRC 
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transmission sequence to avoid errors in the last data and CRC reception. 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       of the last data.
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       degradation of the SPI speed performance due to CPU accesses impacting the 
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI bandwidth.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the STM32F4xx is configured as slave and the NSS hardware mode is 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       used, the NSS pin needs to be kept low between the data phase and the CRC 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       phase.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note When the SPI is configured in slave mode with the CRC feature enabled, CRC
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation takes place even if a high level is applied on the NSS pin. 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       This may happen for example in case of a multi-slave environment where the 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       communication master addresses slaves alternately.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Between a slave de-selection (high level on NSS) and a new slave selection 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (low level on NSS), the CRC value should be cleared on both master and slave
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sides in order to resynchronize the master and slave for their respective 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       CRC calculation.
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note To clear the CRC, follow the procedure below:
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         1. Disable SPI using the SPI_Cmd() function
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         2. Disable the CRC calculation using the SPI_CalculateCRC() function.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         3. Enable the CRC calculation using the SPI_CalculateCRC() function.
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         4. Enable SPI using the SPI_Cmd() function.
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1198              		.loc 1 885 0
 1199              		.cfi_startproc
 1200              		@ args = 0, pretend = 0, frame = 8
 1201              		@ frame_needed = 1, uses_anonymous_args = 0
 1202              		@ link register save eliminated.
 1203 0000 80B4     		push	{r7}
 1204              	.LCFI45:
 1205              		.cfi_def_cfa_offset 4
 1206              		.cfi_offset 7, -4
 1207 0002 83B0     		sub	sp, sp, #12
 1208              	.LCFI46:
 1209              		.cfi_def_cfa_offset 16
 1210 0004 00AF     		add	r7, sp, #0
 1211              	.LCFI47:
 1212              		.cfi_def_cfa_register 7
 1213 0006 7860     		str	r0, [r7, #4]
 1214 0008 0B46     		mov	r3, r1
 1215 000a FB70     		strb	r3, [r7, #3]
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1216              		.loc 1 889 0
 1217 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1218 000e 002B     		cmp	r3, #0
 1219 0010 08D0     		beq	.L46
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 1220              		.loc 1 892 0
 1221 0012 7B68     		ldr	r3, [r7, #4]
 1222 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1223 0016 9BB2     		uxth	r3, r3
 1224 0018 43F40053 		orr	r3, r3, #8192
 1225 001c 9AB2     		uxth	r2, r3
 1226 001e 7B68     		ldr	r3, [r7, #4]
 1227 0020 1A80     		strh	r2, [r3]	@ movhi
 1228 0022 07E0     		b	.L45
 1229              	.L46:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 1230              		.loc 1 897 0
 1231 0024 7B68     		ldr	r3, [r7, #4]
 1232 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1233 0028 9BB2     		uxth	r3, r3
 1234 002a 23F40053 		bic	r3, r3, #8192
 1235 002e 9AB2     		uxth	r2, r3
 1236 0030 7B68     		ldr	r3, [r7, #4]
 1237 0032 1A80     		strh	r2, [r3]	@ movhi
 1238              	.L45:
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1239              		.loc 1 899 0
 1240 0034 0C37     		adds	r7, r7, #12
 1241 0036 BD46     		mov	sp, r7
 1242              		@ sp needed
 1243 0038 5DF8047B 		ldr	r7, [sp], #4
 1244 003c 7047     		bx	lr
 1245              		.cfi_endproc
 1246              	.LFE125:
 1248 003e 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 1249              		.align	2
 1250              		.global	SPI_TransmitCRC
 1251              		.thumb
 1252              		.thumb_func
 1254              	SPI_TransmitCRC:
 1255              	.LFB126:
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1256              		.loc 1 907 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 8
 1259              		@ frame_needed = 1, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 1261 0000 80B4     		push	{r7}
 1262              	.LCFI48:
 1263              		.cfi_def_cfa_offset 4
 1264              		.cfi_offset 7, -4
 1265 0002 83B0     		sub	sp, sp, #12
 1266              	.LCFI49:
 1267              		.cfi_def_cfa_offset 16
 1268 0004 00AF     		add	r7, sp, #0
 1269              	.LCFI50:
 1270              		.cfi_def_cfa_register 7
 1271 0006 7860     		str	r0, [r7, #4]
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 1272              		.loc 1 912 0
 1273 0008 7B68     		ldr	r3, [r7, #4]
 1274 000a 1B88     		ldrh	r3, [r3]	@ movhi
 1275 000c 9BB2     		uxth	r3, r3
 1276 000e 43F48053 		orr	r3, r3, #4096
 1277 0012 9AB2     		uxth	r2, r3
 1278 0014 7B68     		ldr	r3, [r7, #4]
 1279 0016 1A80     		strh	r2, [r3]	@ movhi
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1280              		.loc 1 913 0
 1281 0018 0C37     		adds	r7, r7, #12
 1282 001a BD46     		mov	sp, r7
 1283              		@ sp needed
 1284 001c 5DF8047B 		ldr	r7, [sp], #4
 1285 0020 7047     		bx	lr
 1286              		.cfi_endproc
 1287              	.LFE126:
 1289 0022 00BF     		.section	.text.SPI_GetCRC,"ax",%progbits
 1290              		.align	2
 1291              		.global	SPI_GetCRC
 1292              		.thumb
 1293              		.thumb_func
 1295              	SPI_GetCRC:
 1296              	.LFB127:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1297              		.loc 1 925 0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 16
 1300              		@ frame_needed = 1, uses_anonymous_args = 0
 1301              		@ link register save eliminated.
 1302 0000 80B4     		push	{r7}
 1303              	.LCFI51:
 1304              		.cfi_def_cfa_offset 4
 1305              		.cfi_offset 7, -4
 1306 0002 85B0     		sub	sp, sp, #20
 1307              	.LCFI52:
 1308              		.cfi_def_cfa_offset 24
 1309 0004 00AF     		add	r7, sp, #0
 1310              	.LCFI53:
 1311              		.cfi_def_cfa_register 7
 1312 0006 7860     		str	r0, [r7, #4]
 1313 0008 0B46     		mov	r3, r1
 1314 000a FB70     		strb	r3, [r7, #3]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 1315              		.loc 1 926 0
 1316 000c 0023     		movs	r3, #0
 1317 000e FB81     		strh	r3, [r7, #14]	@ movhi
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1318              		.loc 1 930 0
 1319 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1320 0012 012B     		cmp	r3, #1
 1321 0014 03D0     		beq	.L50
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 1322              		.loc 1 933 0
 1323 0016 7B68     		ldr	r3, [r7, #4]
 1324 0018 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1325 001a FB81     		strh	r3, [r7, #14]	@ movhi
 1326 001c 02E0     		b	.L51
 1327              	.L50:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 1328              		.loc 1 938 0
 1329 001e 7B68     		ldr	r3, [r7, #4]
 1330 0020 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1331 0022 FB81     		strh	r3, [r7, #14]	@ movhi
 1332              	.L51:
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 1333              		.loc 1 941 0
 1334 0024 FB89     		ldrh	r3, [r7, #14]
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1335              		.loc 1 942 0
 1336 0026 1846     		mov	r0, r3
 1337 0028 1437     		adds	r7, r7, #20
 1338 002a BD46     		mov	sp, r7
 1339              		@ sp needed
 1340 002c 5DF8047B 		ldr	r7, [sp], #4
 1341 0030 7047     		bx	lr
 1342              		.cfi_endproc
 1343              	.LFE127:
 1345 0032 00BF     		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1346              		.align	2
 1347              		.global	SPI_GetCRCPolynomial
 1348              		.thumb
 1349              		.thumb_func
 1351              	SPI_GetCRCPolynomial:
 1352              	.LFB128:
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1353              		.loc 1 950 0
 1354              		.cfi_startproc
 1355              		@ args = 0, pretend = 0, frame = 8
 1356              		@ frame_needed = 1, uses_anonymous_args = 0
 1357              		@ link register save eliminated.
 1358 0000 80B4     		push	{r7}
 1359              	.LCFI54:
 1360              		.cfi_def_cfa_offset 4
 1361              		.cfi_offset 7, -4
 1362 0002 83B0     		sub	sp, sp, #12
 1363              	.LCFI55:
 1364              		.cfi_def_cfa_offset 16
 1365 0004 00AF     		add	r7, sp, #0
 1366              	.LCFI56:
 1367              		.cfi_def_cfa_register 7
 1368 0006 7860     		str	r0, [r7, #4]
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 1369              		.loc 1 955 0
 1370 0008 7B68     		ldr	r3, [r7, #4]
 1371 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1372 000c 9BB2     		uxth	r3, r3
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1373              		.loc 1 956 0
 1374 000e 1846     		mov	r0, r3
 1375 0010 0C37     		adds	r7, r7, #12
 1376 0012 BD46     		mov	sp, r7
 1377              		@ sp needed
 1378 0014 5DF8047B 		ldr	r7, [sp], #4
 1379 0018 7047     		bx	lr
 1380              		.cfi_endproc
 1381              	.LFE128:
 1383 001a 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 1384              		.align	2
 1385              		.global	SPI_I2S_DMACmd
 1386              		.thumb
 1387              		.thumb_func
 1389              	SPI_I2S_DMACmd:
 1390              	.LFB129:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          DMA transfers management functions
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1391              		.loc 1 987 0
 1392              		.cfi_startproc
 1393              		@ args = 0, pretend = 0, frame = 8
 1394              		@ frame_needed = 1, uses_anonymous_args = 0
 1395              		@ link register save eliminated.
 1396 0000 80B4     		push	{r7}
 1397              	.LCFI57:
 1398              		.cfi_def_cfa_offset 4
 1399              		.cfi_offset 7, -4
 1400 0002 83B0     		sub	sp, sp, #12
 1401              	.LCFI58:
 1402              		.cfi_def_cfa_offset 16
 1403 0004 00AF     		add	r7, sp, #0
 1404              	.LCFI59:
 1405              		.cfi_def_cfa_register 7
 1406 0006 7860     		str	r0, [r7, #4]
 1407 0008 1346     		mov	r3, r2
 1408 000a 0A46     		mov	r2, r1	@ movhi
 1409 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1410 000e 7B70     		strb	r3, [r7, #1]
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1411              		.loc 1 993 0
 1412 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1413 0012 002B     		cmp	r3, #0
 1414 0014 08D0     		beq	.L56
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1415              		.loc 1 996 0
 1416 0016 7B68     		ldr	r3, [r7, #4]
 1417 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1418 001a 9AB2     		uxth	r2, r3
 1419 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1420 001e 1343     		orrs	r3, r3, r2
 1421 0020 9AB2     		uxth	r2, r3
 1422 0022 7B68     		ldr	r3, [r7, #4]
 1423 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 1424 0026 09E0     		b	.L55
 1425              	.L56:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1426              		.loc 1 1001 0
 1427 0028 7B68     		ldr	r3, [r7, #4]
 1428 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1429 002c 9AB2     		uxth	r2, r3
 1430 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1431 0030 DB43     		mvns	r3, r3
 1432 0032 9BB2     		uxth	r3, r3
 1433 0034 1340     		ands	r3, r3, r2
 1434 0036 9AB2     		uxth	r2, r3
 1435 0038 7B68     		ldr	r3, [r7, #4]
 1436 003a 9A80     		strh	r2, [r3, #4]	@ movhi
 1437              	.L55:
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1438              		.loc 1 1003 0
 1439 003c 0C37     		adds	r7, r7, #12
 1440 003e BD46     		mov	sp, r7
 1441              		@ sp needed
 1442 0040 5DF8047B 		ldr	r7, [sp], #4
 1443 0044 7047     		bx	lr
 1444              		.cfi_endproc
 1445              	.LFE129:
 1447 0046 00BF     		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1448              		.align	2
 1449              		.global	SPI_I2S_ITConfig
 1450              		.thumb
 1451              		.thumb_func
 1453              	SPI_I2S_ITConfig:
 1454              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                          Interrupts and flags management functions
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   This section provides a set of functions allowing to configure the SPI Interrupts 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   sources and check or clear the flags or pending bits status.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   The user should identify which mode will be used in his application to manage 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Polling Mode
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   =============
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      8. I2S_FLAG_UDR: to indicate an Underrun error occurs.
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      9. I2S_FLAG_CHSIDE: to indicate Channel Side.
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @note Do not use the BSY flag to handle each data transmission or reception.  It is
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Mode
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ===============
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   and 7 pending bits: 
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Pending Bits:
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ------------- 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode only)  
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      4. SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      5. SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      6. I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      7. I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   Interrupt Source:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   -----------------
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                         interrupt.  
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                           empty interrupt.
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      3. SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following functions:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      - void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   DMA Mode
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ========
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      1. SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      2. SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   In this Mode it is advised to use the following function:
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     - void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState);
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1455              		.loc 1 1096 0
 1456              		.cfi_startproc
 1457              		@ args = 0, pretend = 0, frame = 16
 1458              		@ frame_needed = 1, uses_anonymous_args = 0
 1459              		@ link register save eliminated.
 1460 0000 80B4     		push	{r7}
 1461              	.LCFI60:
 1462              		.cfi_def_cfa_offset 4
 1463              		.cfi_offset 7, -4
 1464 0002 85B0     		sub	sp, sp, #20
 1465              	.LCFI61:
 1466              		.cfi_def_cfa_offset 24
 1467 0004 00AF     		add	r7, sp, #0
 1468              	.LCFI62:
 1469              		.cfi_def_cfa_register 7
 1470 0006 7860     		str	r0, [r7, #4]
 1471 0008 1346     		mov	r3, r2
 1472 000a 0A46     		mov	r2, r1
 1473 000c FA70     		strb	r2, [r7, #3]
 1474 000e BB70     		strb	r3, [r7, #2]
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 1475              		.loc 1 1097 0
 1476 0010 0023     		movs	r3, #0
 1477 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 1478 0014 0023     		movs	r3, #0
 1479 0016 BB81     		strh	r3, [r7, #12]	@ movhi
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
 1480              		.loc 1 1105 0
 1481 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1482 001a 1B09     		lsrs	r3, r3, #4
 1483 001c DBB2     		uxtb	r3, r3
 1484 001e FB81     		strh	r3, [r7, #14]	@ movhi
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1485              		.loc 1 1108 0
 1486 0020 FB89     		ldrh	r3, [r7, #14]
 1487 0022 0122     		movs	r2, #1
 1488 0024 02FA03F3 		lsl	r3, r2, r3
 1489 0028 BB81     		strh	r3, [r7, #12]	@ movhi
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1490              		.loc 1 1110 0
 1491 002a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 1492 002c 002B     		cmp	r3, #0
 1493 002e 08D0     		beq	.L59
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
 1494              		.loc 1 1113 0
 1495 0030 7B68     		ldr	r3, [r7, #4]
 1496 0032 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1497 0034 9AB2     		uxth	r2, r3
 1498 0036 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1499 0038 1343     		orrs	r3, r3, r2
 1500 003a 9AB2     		uxth	r2, r3
 1501 003c 7B68     		ldr	r3, [r7, #4]
 1502 003e 9A80     		strh	r2, [r3, #4]	@ movhi
 1503 0040 09E0     		b	.L58
 1504              	.L59:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1505              		.loc 1 1118 0
 1506 0042 7B68     		ldr	r3, [r7, #4]
 1507 0044 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1508 0046 9AB2     		uxth	r2, r3
 1509 0048 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1510 004a DB43     		mvns	r3, r3
 1511 004c 9BB2     		uxth	r3, r3
 1512 004e 1340     		ands	r3, r3, r2
 1513 0050 9AB2     		uxth	r2, r3
 1514 0052 7B68     		ldr	r3, [r7, #4]
 1515 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 1516              	.L58:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1517              		.loc 1 1120 0
 1518 0056 1437     		adds	r7, r7, #20
 1519 0058 BD46     		mov	sp, r7
 1520              		@ sp needed
 1521 005a 5DF8047B 		ldr	r7, [sp], #4
 1522 005e 7047     		bx	lr
 1523              		.cfi_endproc
 1524              	.LFE130:
 1526              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1527              		.align	2
 1528              		.global	SPI_I2S_GetFlagStatus
 1529              		.thumb
 1530              		.thumb_func
 1532              	SPI_I2S_GetFlagStatus:
 1533              	.LFB131:
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1534              		.loc 1 1140 0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 16
 1537              		@ frame_needed = 1, uses_anonymous_args = 0
 1538              		@ link register save eliminated.
 1539 0000 80B4     		push	{r7}
 1540              	.LCFI63:
 1541              		.cfi_def_cfa_offset 4
 1542              		.cfi_offset 7, -4
 1543 0002 85B0     		sub	sp, sp, #20
 1544              	.LCFI64:
 1545              		.cfi_def_cfa_offset 24
 1546 0004 00AF     		add	r7, sp, #0
 1547              	.LCFI65:
 1548              		.cfi_def_cfa_register 7
 1549 0006 7860     		str	r0, [r7, #4]
 1550 0008 0B46     		mov	r3, r1
 1551 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
 1552              		.loc 1 1141 0
 1553 000c 0023     		movs	r3, #0
 1554 000e FB73     		strb	r3, [r7, #15]
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1555              		.loc 1 1147 0
 1556 0010 7B68     		ldr	r3, [r7, #4]
 1557 0012 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1558 0014 9AB2     		uxth	r2, r3
 1559 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1560 0018 1340     		ands	r3, r3, r2
 1561 001a 9BB2     		uxth	r3, r3
 1562 001c 002B     		cmp	r3, #0
 1563 001e 02D0     		beq	.L62
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1564              		.loc 1 1150 0
 1565 0020 0123     		movs	r3, #1
 1566 0022 FB73     		strb	r3, [r7, #15]
 1567 0024 01E0     		b	.L63
 1568              	.L62:
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1569              		.loc 1 1155 0
 1570 0026 0023     		movs	r3, #0
 1571 0028 FB73     		strb	r3, [r7, #15]
 1572              	.L63:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
 1573              		.loc 1 1158 0
 1574 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1575              		.loc 1 1159 0
 1576 002c 1846     		mov	r0, r3
 1577 002e 1437     		adds	r7, r7, #20
 1578 0030 BD46     		mov	sp, r7
 1579              		@ sp needed
 1580 0032 5DF8047B 		ldr	r7, [sp], #4
 1581 0036 7047     		bx	lr
 1582              		.cfi_endproc
 1583              	.LFE131:
 1585              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1586              		.align	2
 1587              		.global	SPI_I2S_ClearFlag
 1588              		.thumb
 1589              		.thumb_func
 1591              	SPI_I2S_ClearFlag:
 1592              	.LFB132:
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1593              		.loc 1 1181 0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 8
 1596              		@ frame_needed = 1, uses_anonymous_args = 0
 1597              		@ link register save eliminated.
 1598 0000 80B4     		push	{r7}
 1599              	.LCFI66:
 1600              		.cfi_def_cfa_offset 4
 1601              		.cfi_offset 7, -4
 1602 0002 83B0     		sub	sp, sp, #12
 1603              	.LCFI67:
 1604              		.cfi_def_cfa_offset 16
 1605 0004 00AF     		add	r7, sp, #0
 1606              	.LCFI68:
 1607              		.cfi_def_cfa_register 7
 1608 0006 7860     		str	r0, [r7, #4]
 1609 0008 0B46     		mov	r3, r1
 1610 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1611              		.loc 1 1187 0
 1612 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1613 000e DB43     		mvns	r3, r3
 1614 0010 9AB2     		uxth	r2, r3
 1615 0012 7B68     		ldr	r3, [r7, #4]
 1616 0014 1A81     		strh	r2, [r3, #8]	@ movhi
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1617              		.loc 1 1188 0
 1618 0016 0C37     		adds	r7, r7, #12
 1619 0018 BD46     		mov	sp, r7
 1620              		@ sp needed
 1621 001a 5DF8047B 		ldr	r7, [sp], #4
 1622 001e 7047     		bx	lr
 1623              		.cfi_endproc
 1624              	.LFE132:
 1626              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1627              		.align	2
 1628              		.global	SPI_I2S_GetITStatus
 1629              		.thumb
 1630              		.thumb_func
 1632              	SPI_I2S_GetITStatus:
 1633              	.LFB133:
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1634              		.loc 1 1206 0
 1635              		.cfi_startproc
 1636              		@ args = 0, pretend = 0, frame = 16
 1637              		@ frame_needed = 1, uses_anonymous_args = 0
 1638              		@ link register save eliminated.
 1639 0000 80B4     		push	{r7}
 1640              	.LCFI69:
 1641              		.cfi_def_cfa_offset 4
 1642              		.cfi_offset 7, -4
 1643 0002 85B0     		sub	sp, sp, #20
 1644              	.LCFI70:
 1645              		.cfi_def_cfa_offset 24
 1646 0004 00AF     		add	r7, sp, #0
 1647              	.LCFI71:
 1648              		.cfi_def_cfa_register 7
 1649 0006 7860     		str	r0, [r7, #4]
 1650 0008 0B46     		mov	r3, r1
 1651 000a FB70     		strb	r3, [r7, #3]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
 1652              		.loc 1 1207 0
 1653 000c 0023     		movs	r3, #0
 1654 000e FB73     		strb	r3, [r7, #15]
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1655              		.loc 1 1208 0
 1656 0010 0023     		movs	r3, #0
 1657 0012 BB81     		strh	r3, [r7, #12]	@ movhi
 1658 0014 0023     		movs	r3, #0
 1659 0016 7B81     		strh	r3, [r7, #10]	@ movhi
 1660 0018 0023     		movs	r3, #0
 1661 001a 3B81     		strh	r3, [r7, #8]	@ movhi
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1662              		.loc 1 1215 0
 1663 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1664 001e 03F00F03 		and	r3, r3, #15
 1665 0022 0122     		movs	r2, #1
 1666 0024 02FA03F3 		lsl	r3, r2, r3
 1667 0028 BB81     		strh	r3, [r7, #12]	@ movhi
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1668              		.loc 1 1218 0
 1669 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1670 002c 1B09     		lsrs	r3, r3, #4
 1671 002e DBB2     		uxtb	r3, r3
 1672 0030 7B81     		strh	r3, [r7, #10]	@ movhi
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
 1673              		.loc 1 1221 0
 1674 0032 7B89     		ldrh	r3, [r7, #10]
 1675 0034 0122     		movs	r2, #1
 1676 0036 02FA03F3 		lsl	r3, r2, r3
 1677 003a 7B81     		strh	r3, [r7, #10]	@ movhi
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1678              		.loc 1 1224 0
 1679 003c 7B68     		ldr	r3, [r7, #4]
 1680 003e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1681 0040 9AB2     		uxth	r2, r3
 1682 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1683 0044 1340     		ands	r3, r3, r2
 1684 0046 3B81     		strh	r3, [r7, #8]	@ movhi
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1685              		.loc 1 1227 0
 1686 0048 7B68     		ldr	r3, [r7, #4]
 1687 004a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1688 004c 9AB2     		uxth	r2, r3
 1689 004e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1690 0050 1340     		ands	r3, r3, r2
 1691 0052 9BB2     		uxth	r3, r3
 1692 0054 002B     		cmp	r3, #0
 1693 0056 05D0     		beq	.L67
 1694              		.loc 1 1227 0 is_stmt 0 discriminator 1
 1695 0058 3B89     		ldrh	r3, [r7, #8]
 1696 005a 002B     		cmp	r3, #0
 1697 005c 02D0     		beq	.L67
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1698              		.loc 1 1230 0 is_stmt 1
 1699 005e 0123     		movs	r3, #1
 1700 0060 FB73     		strb	r3, [r7, #15]
 1701 0062 01E0     		b	.L68
 1702              	.L67:
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
 1703              		.loc 1 1235 0
 1704 0064 0023     		movs	r3, #0
 1705 0066 FB73     		strb	r3, [r7, #15]
 1706              	.L68:
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
 1707              		.loc 1 1238 0
 1708 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1709              		.loc 1 1239 0
 1710 006a 1846     		mov	r0, r3
 1711 006c 1437     		adds	r7, r7, #20
 1712 006e BD46     		mov	sp, r7
 1713              		@ sp needed
 1714 0070 5DF8047B 		ldr	r7, [sp], #4
 1715 0074 7047     		bx	lr
 1716              		.cfi_endproc
 1717              	.LFE133:
 1719 0076 00BF     		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1720              		.align	2
 1721              		.global	SPI_I2S_ClearITPendingBit
 1722              		.thumb
 1723              		.thumb_func
 1725              	SPI_I2S_ClearITPendingBit:
 1726              	.LFB134:
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1727              		.loc 1 1261 0
 1728              		.cfi_startproc
 1729              		@ args = 0, pretend = 0, frame = 16
 1730              		@ frame_needed = 1, uses_anonymous_args = 0
 1731              		@ link register save eliminated.
 1732 0000 80B4     		push	{r7}
 1733              	.LCFI72:
 1734              		.cfi_def_cfa_offset 4
 1735              		.cfi_offset 7, -4
 1736 0002 85B0     		sub	sp, sp, #20
 1737              	.LCFI73:
 1738              		.cfi_def_cfa_offset 24
 1739 0004 00AF     		add	r7, sp, #0
 1740              	.LCFI74:
 1741              		.cfi_def_cfa_register 7
 1742 0006 7860     		str	r0, [r7, #4]
 1743 0008 0B46     		mov	r3, r1
 1744 000a FB70     		strb	r3, [r7, #3]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
 1745              		.loc 1 1262 0
 1746 000c 0023     		movs	r3, #0
 1747 000e FB81     		strh	r3, [r7, #14]	@ movhi
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1748              		.loc 1 1268 0
 1749 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1750 0012 03F00F03 		and	r3, r3, #15
 1751 0016 0122     		movs	r2, #1
 1752 0018 02FA03F3 		lsl	r3, r2, r3
 1753 001c FB81     		strh	r3, [r7, #14]	@ movhi
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1754              		.loc 1 1271 0
 1755 001e FB89     		ldrh	r3, [r7, #14]	@ movhi
 1756 0020 DB43     		mvns	r3, r3
 1757 0022 9AB2     		uxth	r2, r3
 1758 0024 7B68     		ldr	r3, [r7, #4]
 1759 0026 1A81     		strh	r2, [r3, #8]	@ movhi
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1760              		.loc 1 1272 0
 1761 0028 1437     		adds	r7, r7, #20
 1762 002a BD46     		mov	sp, r7
 1763              		@ sp needed
 1764 002c 5DF8047B 		ldr	r7, [sp], #4
 1765 0030 7047     		bx	lr
 1766              		.cfi_endproc
 1767              	.LFE134:
 1769 0032 00BF     		.text
 1770              	.Letext0:
 1771              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1772              		.file 3 "/usr/include/newlib/stdint.h"
 1773              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1774              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h"
 1775              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_spi.c
     /tmp/ccJunk9q.s:20     .text.SPI_I2S_DeInit:0000000000000000 $t
     /tmp/ccJunk9q.s:25     .text.SPI_I2S_DeInit:0000000000000000 SPI_I2S_DeInit
     /tmp/ccJunk9q.s:100    .text.SPI_Init:0000000000000000 $t
     /tmp/ccJunk9q.s:105    .text.SPI_Init:0000000000000000 SPI_Init
     /tmp/ccJunk9q.s:208    .text.I2S_Init:0000000000000000 $t
     /tmp/ccJunk9q.s:213    .text.I2S_Init:0000000000000000 I2S_Init
     /tmp/ccJunk9q.s:474    .text.SPI_StructInit:0000000000000000 $t
     /tmp/ccJunk9q.s:479    .text.SPI_StructInit:0000000000000000 SPI_StructInit
     /tmp/ccJunk9q.s:543    .text.I2S_StructInit:0000000000000000 $t
     /tmp/ccJunk9q.s:548    .text.I2S_StructInit:0000000000000000 I2S_StructInit
     /tmp/ccJunk9q.s:600    .text.SPI_Cmd:0000000000000000 $t
     /tmp/ccJunk9q.s:605    .text.SPI_Cmd:0000000000000000 SPI_Cmd
     /tmp/ccJunk9q.s:658    .text.I2S_Cmd:0000000000000000 $t
     /tmp/ccJunk9q.s:663    .text.I2S_Cmd:0000000000000000 I2S_Cmd
     /tmp/ccJunk9q.s:716    .text.SPI_DataSizeConfig:0000000000000000 $t
     /tmp/ccJunk9q.s:721    .text.SPI_DataSizeConfig:0000000000000000 SPI_DataSizeConfig
     /tmp/ccJunk9q.s:768    .text.SPI_BiDirectionalLineConfig:0000000000000000 $t
     /tmp/ccJunk9q.s:773    .text.SPI_BiDirectionalLineConfig:0000000000000000 SPI_BiDirectionalLineConfig
     /tmp/ccJunk9q.s:826    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 $t
     /tmp/ccJunk9q.s:831    .text.SPI_NSSInternalSoftwareConfig:0000000000000000 SPI_NSSInternalSoftwareConfig
     /tmp/ccJunk9q.s:885    .text.SPI_SSOutputCmd:0000000000000000 $t
     /tmp/ccJunk9q.s:890    .text.SPI_SSOutputCmd:0000000000000000 SPI_SSOutputCmd
     /tmp/ccJunk9q.s:943    .text.SPI_TIModeCmd:0000000000000000 $t
     /tmp/ccJunk9q.s:948    .text.SPI_TIModeCmd:0000000000000000 SPI_TIModeCmd
     /tmp/ccJunk9q.s:1001   .text.I2S_FullDuplexConfig:0000000000000000 $t
     /tmp/ccJunk9q.s:1006   .text.I2S_FullDuplexConfig:0000000000000000 I2S_FullDuplexConfig
     /tmp/ccJunk9q.s:1114   .text.SPI_I2S_ReceiveData:0000000000000000 $t
     /tmp/ccJunk9q.s:1119   .text.SPI_I2S_ReceiveData:0000000000000000 SPI_I2S_ReceiveData
     /tmp/ccJunk9q.s:1152   .text.SPI_I2S_SendData:0000000000000000 $t
     /tmp/ccJunk9q.s:1157   .text.SPI_I2S_SendData:0000000000000000 SPI_I2S_SendData
     /tmp/ccJunk9q.s:1191   .text.SPI_CalculateCRC:0000000000000000 $t
     /tmp/ccJunk9q.s:1196   .text.SPI_CalculateCRC:0000000000000000 SPI_CalculateCRC
     /tmp/ccJunk9q.s:1249   .text.SPI_TransmitCRC:0000000000000000 $t
     /tmp/ccJunk9q.s:1254   .text.SPI_TransmitCRC:0000000000000000 SPI_TransmitCRC
     /tmp/ccJunk9q.s:1290   .text.SPI_GetCRC:0000000000000000 $t
     /tmp/ccJunk9q.s:1295   .text.SPI_GetCRC:0000000000000000 SPI_GetCRC
     /tmp/ccJunk9q.s:1346   .text.SPI_GetCRCPolynomial:0000000000000000 $t
     /tmp/ccJunk9q.s:1351   .text.SPI_GetCRCPolynomial:0000000000000000 SPI_GetCRCPolynomial
     /tmp/ccJunk9q.s:1384   .text.SPI_I2S_DMACmd:0000000000000000 $t
     /tmp/ccJunk9q.s:1389   .text.SPI_I2S_DMACmd:0000000000000000 SPI_I2S_DMACmd
     /tmp/ccJunk9q.s:1448   .text.SPI_I2S_ITConfig:0000000000000000 $t
     /tmp/ccJunk9q.s:1453   .text.SPI_I2S_ITConfig:0000000000000000 SPI_I2S_ITConfig
     /tmp/ccJunk9q.s:1527   .text.SPI_I2S_GetFlagStatus:0000000000000000 $t
     /tmp/ccJunk9q.s:1532   .text.SPI_I2S_GetFlagStatus:0000000000000000 SPI_I2S_GetFlagStatus
     /tmp/ccJunk9q.s:1586   .text.SPI_I2S_ClearFlag:0000000000000000 $t
     /tmp/ccJunk9q.s:1591   .text.SPI_I2S_ClearFlag:0000000000000000 SPI_I2S_ClearFlag
     /tmp/ccJunk9q.s:1627   .text.SPI_I2S_GetITStatus:0000000000000000 $t
     /tmp/ccJunk9q.s:1632   .text.SPI_I2S_GetITStatus:0000000000000000 SPI_I2S_GetITStatus
     /tmp/ccJunk9q.s:1720   .text.SPI_I2S_ClearITPendingBit:0000000000000000 $t
     /tmp/ccJunk9q.s:1725   .text.SPI_I2S_ClearITPendingBit:0000000000000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
