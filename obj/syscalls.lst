   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"syscalls.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._exit,"ax",%progbits
  20              		.align	2
  21              		.global	_exit
  22              		.thumb
  23              		.thumb_func
  25              	_exit:
  26              	.LFB110:
  27              		.file 1 "src/syscalls.c"
   1:src/syscalls.c **** #include "syscalls.h"
   2:src/syscalls.c **** #include "uart.h"
   3:src/syscalls.c **** #include "stm32f4xx.h"
   4:src/syscalls.c **** #include "FreeRTOS.h"
   5:src/syscalls.c **** #include <unistd.h>
   6:src/syscalls.c **** #include <stdlib.h>
   7:src/syscalls.c **** #include <errno.h>
   8:src/syscalls.c **** #include <string.h>
   9:src/syscalls.c **** #include <sys/stat.h>
  10:src/syscalls.c **** #include <sys/time.h>
  11:src/syscalls.c **** 
  12:src/syscalls.c **** size_t   __malloc_margin = 256;
  13:src/syscalls.c **** char    *__brkval;
  14:src/syscalls.c **** 
  15:src/syscalls.c **** void _exit(int code)
  16:src/syscalls.c **** {
  28              		.loc 1 16 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              	.L2:
  36 0000 FEE7     		b	.L2
  37              		.cfi_endproc
  38              	.LFE110:
  40 0002 00BF     		.section	.text._read_r,"ax",%progbits
  41              		.align	2
  42              		.global	_read_r
  43              		.thumb
  44              		.thumb_func
  46              	_read_r:
  47              	.LFB111:
  17:src/syscalls.c ****     for (;;);
  18:src/syscalls.c **** }
  19:src/syscalls.c **** 
  20:src/syscalls.c **** 
  21:src/syscalls.c **** ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
  22:src/syscalls.c **** {
  48              		.loc 1 22 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL1:
  53              		.loc 1 22 0
  54 0000 08B5     		push	{r3, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 8
  57              		.cfi_offset 3, -8
  58              		.cfi_offset 14, -4
  23:src/syscalls.c ****     return uart_read_r(r, fd, ptr, len);
  59              		.loc 1 23 0
  60 0002 FFF7FEFF 		bl	uart_read_r
  61              	.LVL2:
  24:src/syscalls.c **** }
  62              		.loc 1 24 0
  63 0006 08BD     		pop	{r3, pc}
  64              		.cfi_endproc
  65              	.LFE111:
  67              		.section	.text._write_r,"ax",%progbits
  68              		.align	2
  69              		.global	_write_r
  70              		.thumb
  71              		.thumb_func
  73              	_write_r:
  74              	.LFB112:
  25:src/syscalls.c **** 
  26:src/syscalls.c **** 
  27:src/syscalls.c **** ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
  28:src/syscalls.c **** {
  75              		.loc 1 28 0
  76              		.cfi_startproc
  77              		@ args = 0, pretend = 0, frame = 0
  78              		@ frame_needed = 0, uses_anonymous_args = 0
  79              	.LVL3:
  80 0000 08B5     		push	{r3, lr}
  81              	.LCFI1:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 3, -8
  84              		.cfi_offset 14, -4
  29:src/syscalls.c ****     return uart_write_r(r, fd, ptr, len);
  85              		.loc 1 29 0
  86 0002 FFF7FEFF 		bl	uart_write_r
  87              	.LVL4:
  30:src/syscalls.c **** }
  88              		.loc 1 30 0
  89 0006 08BD     		pop	{r3, pc}
  90              		.cfi_endproc
  91              	.LFE112:
  93              		.section	.text._lseek_r,"ax",%progbits
  94              		.align	2
  95              		.global	_lseek_r
  96              		.thumb
  97              		.thumb_func
  99              	_lseek_r:
 100              	.LFB113:
  31:src/syscalls.c **** 
  32:src/syscalls.c **** 
  33:src/syscalls.c **** off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
  34:src/syscalls.c **** {
 101              		.loc 1 34 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL5:
  35:src/syscalls.c ****     fd  = fd;
  36:src/syscalls.c ****     ptr = ptr;
  37:src/syscalls.c ****     dir = dir;
  38:src/syscalls.c ****     r->_errno = ENOSYS;
 107              		.loc 1 38 0
 108 0000 5823     		movs	r3, #88
 109              	.LVL6:
 110 0002 0360     		str	r3, [r0]
  39:src/syscalls.c ****     return -1;
  40:src/syscalls.c **** }
 111              		.loc 1 40 0
 112 0004 4FF0FF30 		mov	r0, #-1
 113              	.LVL7:
 114 0008 7047     		bx	lr
 115              		.cfi_endproc
 116              	.LFE113:
 118 000a 00BF     		.section	.text._close_r,"ax",%progbits
 119              		.align	2
 120              		.global	_close_r
 121              		.thumb
 122              		.thumb_func
 124              	_close_r:
 125              	.LFB114:
  41:src/syscalls.c **** 
  42:src/syscalls.c **** 
  43:src/syscalls.c **** int _close_r(struct _reent *r, int fd)
  44:src/syscalls.c **** {
 126              		.loc 1 44 0
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
 129              		@ frame_needed = 0, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131              	.LVL8:
  45:src/syscalls.c ****     fd = fd;
  46:src/syscalls.c ****     r->_errno = ENOSYS;
 132              		.loc 1 46 0
 133 0000 5823     		movs	r3, #88
 134 0002 0360     		str	r3, [r0]
  47:src/syscalls.c ****     return -1;
  48:src/syscalls.c **** }
 135              		.loc 1 48 0
 136 0004 4FF0FF30 		mov	r0, #-1
 137              	.LVL9:
 138 0008 7047     		bx	lr
 139              		.cfi_endproc
 140              	.LFE114:
 142 000a 00BF     		.section	.text._fstat_r,"ax",%progbits
 143              		.align	2
 144              		.global	_fstat_r
 145              		.thumb
 146              		.thumb_func
 148              	_fstat_r:
 149              	.LFB115:
  49:src/syscalls.c **** 
  50:src/syscalls.c **** 
  51:src/syscalls.c **** int _fstat_r(struct _reent *r, int fd, struct stat *st)
  52:src/syscalls.c **** {
 150              		.loc 1 52 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155              	.LVL10:
  53:src/syscalls.c ****     if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 156              		.loc 1 53 0
 157 0000 0229     		cmp	r1, #2
  54:src/syscalls.c ****       st->st_mode = S_IFCHR;
 158              		.loc 1 54 0
 159 0002 9DBF     		ittte	ls
 160 0004 4FF40053 		movls	r3, #8192
 161 0008 5360     		strls	r3, [r2, #4]
  55:src/syscalls.c ****       return 0;
 162              		.loc 1 55 0
 163 000a 0020     		movls	r0, #0
 164              	.LVL11:
  56:src/syscalls.c ****     }
  57:src/syscalls.c **** 
  58:src/syscalls.c ****     r->_errno = ENOSYS;
 165              		.loc 1 58 0
 166 000c 5823     		movhi	r3, #88
 167 000e 84BF     		itt	hi
 168 0010 0360     		strhi	r3, [r0]
  59:src/syscalls.c ****     return -1;
 169              		.loc 1 59 0
 170 0012 4FF0FF30 		movhi	r0, #-1
  60:src/syscalls.c **** }
 171              		.loc 1 60 0
 172 0016 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE115:
 176              		.section	.text._isatty_r,"ax",%progbits
 177              		.align	2
 178              		.global	_isatty_r
 179              		.thumb
 180              		.thumb_func
 182              	_isatty_r:
 183              	.LFB116:
  61:src/syscalls.c **** 
  62:src/syscalls.c **** 
  63:src/syscalls.c **** int _isatty_r(struct _reent *r, int fd)
  64:src/syscalls.c **** {
 184              		.loc 1 64 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL12:
  65:src/syscalls.c ****     r  = r;
  66:src/syscalls.c ****     fd = fd;
  67:src/syscalls.c ****     return 1;
  68:src/syscalls.c **** }
 190              		.loc 1 68 0
 191 0000 0120     		movs	r0, #1
 192              	.LVL13:
 193 0002 7047     		bx	lr
 194              		.cfi_endproc
 195              	.LFE116:
 197              		.section	.text._sbrk_r,"ax",%progbits
 198              		.align	2
 199              		.global	_sbrk_r
 200              		.thumb
 201              		.thumb_func
 203              	_sbrk_r:
 204              	.LFB117:
  69:src/syscalls.c **** 
  70:src/syscalls.c **** 
  71:src/syscalls.c **** void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
  72:src/syscalls.c **** {
 205              		.loc 1 72 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209              		@ link register save eliminated.
 210              	.LVL14:
 211 0000 30B4     		push	{r4, r5}
 212              	.LCFI2:
 213              		.cfi_def_cfa_offset 8
 214              		.cfi_offset 4, -8
 215              		.cfi_offset 5, -4
  73:src/syscalls.c ****     extern char end;   // provided by the linker script
  74:src/syscalls.c **** 
  75:src/syscalls.c ****     if (__brkval == 0)
 216              		.loc 1 75 0
 217 0002 40F20003 		movw	r3, #:lower16:__brkval
 218 0006 C0F20003 		movt	r3, #:upper16:__brkval
 219 000a 1B68     		ldr	r3, [r3]
 220 000c 43B9     		cbnz	r3, .L12
  76:src/syscalls.c ****         __brkval = &end;
 221              		.loc 1 76 0
 222 000e 40F20003 		movw	r3, #:lower16:__brkval
 223 0012 C0F20003 		movt	r3, #:upper16:__brkval
 224 0016 40F20002 		movw	r2, #:lower16:end
 225 001a C0F20002 		movt	r2, #:upper16:end
 226 001e 1A60     		str	r2, [r3]
 227              	.L12:
  77:src/syscalls.c **** 
  78:src/syscalls.c ****     if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 228              		.loc 1 78 0
 229 0020 40F20003 		movw	r3, #:lower16:__brkval
 230 0024 C0F20003 		movt	r3, #:upper16:__brkval
 231 0028 1A68     		ldr	r2, [r3]
 232 002a 1144     		add	r1, r1, r2
 233              	.LVL15:
 234              	.LBB4:
 235              	.LBB5:
 236              		.file 2 "libs/CMSIS/Include/core_cmFunc.h"
   1:libs/CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:libs/CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:libs/CMSIS/Include/core_cmFunc.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmFunc.h ****  * @date     26. July 2011
   6:libs/CMSIS/Include/core_cmFunc.h ****  *
   7:libs/CMSIS/Include/core_cmFunc.h ****  * @note
   8:libs/CMSIS/Include/core_cmFunc.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmFunc.h ****  *
  10:libs/CMSIS/Include/core_cmFunc.h ****  * @par
  11:libs/CMSIS/Include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmFunc.h ****  *
  15:libs/CMSIS/Include/core_cmFunc.h ****  * @par
  16:libs/CMSIS/Include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmFunc.h ****  *
  22:libs/CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmFunc.h **** 
  24:libs/CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:libs/CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:libs/CMSIS/Include/core_cmFunc.h **** 
  27:libs/CMSIS/Include/core_cmFunc.h **** 
  28:libs/CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:libs/CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:libs/CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:libs/CMSIS/Include/core_cmFunc.h ****   @{
  32:libs/CMSIS/Include/core_cmFunc.h ****  */
  33:libs/CMSIS/Include/core_cmFunc.h **** 
  34:libs/CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmFunc.h **** 
  37:libs/CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmFunc.h **** #endif
  40:libs/CMSIS/Include/core_cmFunc.h **** 
  41:libs/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:libs/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:libs/CMSIS/Include/core_cmFunc.h **** 
  44:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  45:libs/CMSIS/Include/core_cmFunc.h **** 
  46:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:libs/CMSIS/Include/core_cmFunc.h **** 
  48:libs/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  49:libs/CMSIS/Include/core_cmFunc.h ****  */
  50:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  51:libs/CMSIS/Include/core_cmFunc.h **** {
  52:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:libs/CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  54:libs/CMSIS/Include/core_cmFunc.h **** }
  55:libs/CMSIS/Include/core_cmFunc.h **** 
  56:libs/CMSIS/Include/core_cmFunc.h **** 
  57:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  58:libs/CMSIS/Include/core_cmFunc.h **** 
  59:libs/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:libs/CMSIS/Include/core_cmFunc.h **** 
  61:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:libs/CMSIS/Include/core_cmFunc.h ****  */
  63:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  64:libs/CMSIS/Include/core_cmFunc.h **** {
  65:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:libs/CMSIS/Include/core_cmFunc.h ****   __regControl = control;
  67:libs/CMSIS/Include/core_cmFunc.h **** }
  68:libs/CMSIS/Include/core_cmFunc.h **** 
  69:libs/CMSIS/Include/core_cmFunc.h **** 
  70:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get ISPR Register
  71:libs/CMSIS/Include/core_cmFunc.h **** 
  72:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the ISPR Register.
  73:libs/CMSIS/Include/core_cmFunc.h **** 
  74:libs/CMSIS/Include/core_cmFunc.h ****     \return               ISPR Register value
  75:libs/CMSIS/Include/core_cmFunc.h ****  */
  76:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  77:libs/CMSIS/Include/core_cmFunc.h **** {
  78:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:libs/CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  80:libs/CMSIS/Include/core_cmFunc.h **** }
  81:libs/CMSIS/Include/core_cmFunc.h **** 
  82:libs/CMSIS/Include/core_cmFunc.h **** 
  83:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  84:libs/CMSIS/Include/core_cmFunc.h **** 
  85:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:libs/CMSIS/Include/core_cmFunc.h **** 
  87:libs/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
  88:libs/CMSIS/Include/core_cmFunc.h ****  */
  89:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
  90:libs/CMSIS/Include/core_cmFunc.h **** {
  91:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:libs/CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
  93:libs/CMSIS/Include/core_cmFunc.h **** }
  94:libs/CMSIS/Include/core_cmFunc.h **** 
  95:libs/CMSIS/Include/core_cmFunc.h **** 
  96:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:libs/CMSIS/Include/core_cmFunc.h **** 
  98:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:libs/CMSIS/Include/core_cmFunc.h **** 
 100:libs/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 101:libs/CMSIS/Include/core_cmFunc.h ****  */
 102:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 103:libs/CMSIS/Include/core_cmFunc.h **** {
 104:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:libs/CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 106:libs/CMSIS/Include/core_cmFunc.h **** }
 107:libs/CMSIS/Include/core_cmFunc.h **** 
 108:libs/CMSIS/Include/core_cmFunc.h **** 
 109:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:libs/CMSIS/Include/core_cmFunc.h **** 
 111:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:libs/CMSIS/Include/core_cmFunc.h **** 
 113:libs/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 114:libs/CMSIS/Include/core_cmFunc.h ****  */
 115:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 116:libs/CMSIS/Include/core_cmFunc.h **** {
 117:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:libs/CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:libs/CMSIS/Include/core_cmFunc.h **** }
 120:libs/CMSIS/Include/core_cmFunc.h **** 
 121:libs/CMSIS/Include/core_cmFunc.h **** 
 122:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:libs/CMSIS/Include/core_cmFunc.h **** 
 124:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:libs/CMSIS/Include/core_cmFunc.h **** 
 126:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:libs/CMSIS/Include/core_cmFunc.h ****  */
 128:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 129:libs/CMSIS/Include/core_cmFunc.h **** {
 130:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:libs/CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:libs/CMSIS/Include/core_cmFunc.h **** }
 133:libs/CMSIS/Include/core_cmFunc.h **** 
 134:libs/CMSIS/Include/core_cmFunc.h **** 
 135:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:libs/CMSIS/Include/core_cmFunc.h **** 
 137:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:libs/CMSIS/Include/core_cmFunc.h **** 
 139:libs/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 140:libs/CMSIS/Include/core_cmFunc.h ****  */
 141:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 142:libs/CMSIS/Include/core_cmFunc.h **** {
 143:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:libs/CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 145:libs/CMSIS/Include/core_cmFunc.h **** }
 146:libs/CMSIS/Include/core_cmFunc.h **** 
 147:libs/CMSIS/Include/core_cmFunc.h **** 
 148:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:libs/CMSIS/Include/core_cmFunc.h **** 
 150:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:libs/CMSIS/Include/core_cmFunc.h **** 
 152:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:libs/CMSIS/Include/core_cmFunc.h ****  */
 154:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 155:libs/CMSIS/Include/core_cmFunc.h **** {
 156:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:libs/CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:libs/CMSIS/Include/core_cmFunc.h **** }
 159:libs/CMSIS/Include/core_cmFunc.h **** 
 160:libs/CMSIS/Include/core_cmFunc.h **** 
 161:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:libs/CMSIS/Include/core_cmFunc.h **** 
 163:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:libs/CMSIS/Include/core_cmFunc.h **** 
 165:libs/CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 166:libs/CMSIS/Include/core_cmFunc.h ****  */
 167:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 168:libs/CMSIS/Include/core_cmFunc.h **** {
 169:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:libs/CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 171:libs/CMSIS/Include/core_cmFunc.h **** }
 172:libs/CMSIS/Include/core_cmFunc.h **** 
 173:libs/CMSIS/Include/core_cmFunc.h **** 
 174:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:libs/CMSIS/Include/core_cmFunc.h **** 
 176:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:libs/CMSIS/Include/core_cmFunc.h **** 
 178:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:libs/CMSIS/Include/core_cmFunc.h ****  */
 180:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 181:libs/CMSIS/Include/core_cmFunc.h **** {
 182:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:libs/CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 184:libs/CMSIS/Include/core_cmFunc.h **** }
 185:libs/CMSIS/Include/core_cmFunc.h ****  
 186:libs/CMSIS/Include/core_cmFunc.h **** 
 187:libs/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:libs/CMSIS/Include/core_cmFunc.h **** 
 189:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 190:libs/CMSIS/Include/core_cmFunc.h **** 
 191:libs/CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:libs/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:libs/CMSIS/Include/core_cmFunc.h ****  */
 194:libs/CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:libs/CMSIS/Include/core_cmFunc.h **** 
 196:libs/CMSIS/Include/core_cmFunc.h **** 
 197:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 198:libs/CMSIS/Include/core_cmFunc.h **** 
 199:libs/CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:libs/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:libs/CMSIS/Include/core_cmFunc.h ****  */
 202:libs/CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:libs/CMSIS/Include/core_cmFunc.h **** 
 204:libs/CMSIS/Include/core_cmFunc.h **** 
 205:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 206:libs/CMSIS/Include/core_cmFunc.h **** 
 207:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:libs/CMSIS/Include/core_cmFunc.h **** 
 209:libs/CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 210:libs/CMSIS/Include/core_cmFunc.h ****  */
 211:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 212:libs/CMSIS/Include/core_cmFunc.h **** {
 213:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:libs/CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 215:libs/CMSIS/Include/core_cmFunc.h **** }
 216:libs/CMSIS/Include/core_cmFunc.h **** 
 217:libs/CMSIS/Include/core_cmFunc.h **** 
 218:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 219:libs/CMSIS/Include/core_cmFunc.h **** 
 220:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:libs/CMSIS/Include/core_cmFunc.h **** 
 222:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:libs/CMSIS/Include/core_cmFunc.h ****  */
 224:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 225:libs/CMSIS/Include/core_cmFunc.h **** {
 226:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:libs/CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:libs/CMSIS/Include/core_cmFunc.h **** }
 229:libs/CMSIS/Include/core_cmFunc.h ****  
 230:libs/CMSIS/Include/core_cmFunc.h **** 
 231:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:libs/CMSIS/Include/core_cmFunc.h **** 
 233:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:libs/CMSIS/Include/core_cmFunc.h **** 
 235:libs/CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 236:libs/CMSIS/Include/core_cmFunc.h ****  */
 237:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 238:libs/CMSIS/Include/core_cmFunc.h **** {
 239:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:libs/CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 241:libs/CMSIS/Include/core_cmFunc.h **** }
 242:libs/CMSIS/Include/core_cmFunc.h **** 
 243:libs/CMSIS/Include/core_cmFunc.h **** 
 244:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:libs/CMSIS/Include/core_cmFunc.h **** 
 246:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:libs/CMSIS/Include/core_cmFunc.h **** 
 248:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:libs/CMSIS/Include/core_cmFunc.h ****  */
 250:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:libs/CMSIS/Include/core_cmFunc.h **** {
 252:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:libs/CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:libs/CMSIS/Include/core_cmFunc.h **** }
 255:libs/CMSIS/Include/core_cmFunc.h **** 
 256:libs/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:libs/CMSIS/Include/core_cmFunc.h **** 
 258:libs/CMSIS/Include/core_cmFunc.h **** 
 259:libs/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:libs/CMSIS/Include/core_cmFunc.h **** 
 261:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 262:libs/CMSIS/Include/core_cmFunc.h **** 
 263:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:libs/CMSIS/Include/core_cmFunc.h **** 
 265:libs/CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:libs/CMSIS/Include/core_cmFunc.h ****  */
 267:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 268:libs/CMSIS/Include/core_cmFunc.h **** {
 269:libs/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:libs/CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 272:libs/CMSIS/Include/core_cmFunc.h **** #else
 273:libs/CMSIS/Include/core_cmFunc.h ****    return(0);
 274:libs/CMSIS/Include/core_cmFunc.h **** #endif
 275:libs/CMSIS/Include/core_cmFunc.h **** }
 276:libs/CMSIS/Include/core_cmFunc.h **** 
 277:libs/CMSIS/Include/core_cmFunc.h **** 
 278:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 279:libs/CMSIS/Include/core_cmFunc.h **** 
 280:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:libs/CMSIS/Include/core_cmFunc.h **** 
 282:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:libs/CMSIS/Include/core_cmFunc.h ****  */
 284:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 285:libs/CMSIS/Include/core_cmFunc.h **** {
 286:libs/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:libs/CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:libs/CMSIS/Include/core_cmFunc.h **** #endif
 290:libs/CMSIS/Include/core_cmFunc.h **** }
 291:libs/CMSIS/Include/core_cmFunc.h **** 
 292:libs/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:libs/CMSIS/Include/core_cmFunc.h **** 
 294:libs/CMSIS/Include/core_cmFunc.h **** 
 295:libs/CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:libs/CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:libs/CMSIS/Include/core_cmFunc.h **** 
 298:libs/CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 299:libs/CMSIS/Include/core_cmFunc.h **** 
 300:libs/CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 301:libs/CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 302:libs/CMSIS/Include/core_cmFunc.h **** 
 303:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 304:libs/CMSIS/Include/core_cmFunc.h **** 
 305:libs/CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 306:libs/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 307:libs/CMSIS/Include/core_cmFunc.h ****  */
 308:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 309:libs/CMSIS/Include/core_cmFunc.h **** {
 310:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 311:libs/CMSIS/Include/core_cmFunc.h **** }
 312:libs/CMSIS/Include/core_cmFunc.h **** 
 313:libs/CMSIS/Include/core_cmFunc.h **** 
 314:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 315:libs/CMSIS/Include/core_cmFunc.h **** 
 316:libs/CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 317:libs/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 318:libs/CMSIS/Include/core_cmFunc.h ****  */
 319:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 320:libs/CMSIS/Include/core_cmFunc.h **** {
 321:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 322:libs/CMSIS/Include/core_cmFunc.h **** }
 323:libs/CMSIS/Include/core_cmFunc.h **** 
 324:libs/CMSIS/Include/core_cmFunc.h **** 
 325:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
 326:libs/CMSIS/Include/core_cmFunc.h **** 
 327:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
 328:libs/CMSIS/Include/core_cmFunc.h **** 
 329:libs/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
 330:libs/CMSIS/Include/core_cmFunc.h ****  */
 331:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 332:libs/CMSIS/Include/core_cmFunc.h **** {
 333:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 334:libs/CMSIS/Include/core_cmFunc.h **** 
 335:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 336:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 337:libs/CMSIS/Include/core_cmFunc.h **** }
 338:libs/CMSIS/Include/core_cmFunc.h **** 
 339:libs/CMSIS/Include/core_cmFunc.h **** 
 340:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
 341:libs/CMSIS/Include/core_cmFunc.h **** 
 342:libs/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 343:libs/CMSIS/Include/core_cmFunc.h **** 
 344:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 345:libs/CMSIS/Include/core_cmFunc.h ****  */
 346:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 347:libs/CMSIS/Include/core_cmFunc.h **** {
 348:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 349:libs/CMSIS/Include/core_cmFunc.h **** }
 350:libs/CMSIS/Include/core_cmFunc.h **** 
 351:libs/CMSIS/Include/core_cmFunc.h **** 
 352:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get ISPR Register
 353:libs/CMSIS/Include/core_cmFunc.h **** 
 354:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 355:libs/CMSIS/Include/core_cmFunc.h **** 
 356:libs/CMSIS/Include/core_cmFunc.h ****     \return               ISPR Register value
 357:libs/CMSIS/Include/core_cmFunc.h ****  */
 358:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 359:libs/CMSIS/Include/core_cmFunc.h **** {
 360:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 361:libs/CMSIS/Include/core_cmFunc.h **** 
 362:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 363:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 364:libs/CMSIS/Include/core_cmFunc.h **** }
 365:libs/CMSIS/Include/core_cmFunc.h **** 
 366:libs/CMSIS/Include/core_cmFunc.h **** 
 367:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
 368:libs/CMSIS/Include/core_cmFunc.h **** 
 369:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 370:libs/CMSIS/Include/core_cmFunc.h **** 
 371:libs/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 372:libs/CMSIS/Include/core_cmFunc.h ****  */
 373:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
 374:libs/CMSIS/Include/core_cmFunc.h **** {
 375:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 376:libs/CMSIS/Include/core_cmFunc.h **** 
 377:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 378:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 379:libs/CMSIS/Include/core_cmFunc.h **** }
 380:libs/CMSIS/Include/core_cmFunc.h **** 
 381:libs/CMSIS/Include/core_cmFunc.h **** 
 382:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 383:libs/CMSIS/Include/core_cmFunc.h **** 
 384:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 385:libs/CMSIS/Include/core_cmFunc.h **** 
 386:libs/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 387:libs/CMSIS/Include/core_cmFunc.h ****  */
 388:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
 389:libs/CMSIS/Include/core_cmFunc.h **** {
 390:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 391:libs/CMSIS/Include/core_cmFunc.h **** 
 392:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 393:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 394:libs/CMSIS/Include/core_cmFunc.h **** }
 395:libs/CMSIS/Include/core_cmFunc.h **** 
 396:libs/CMSIS/Include/core_cmFunc.h **** 
 397:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 398:libs/CMSIS/Include/core_cmFunc.h **** 
 399:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 400:libs/CMSIS/Include/core_cmFunc.h **** 
 401:libs/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 402:libs/CMSIS/Include/core_cmFunc.h ****  */
 403:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
 404:libs/CMSIS/Include/core_cmFunc.h **** {
 405:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 406:libs/CMSIS/Include/core_cmFunc.h **** 
 407:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 408:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 409:libs/CMSIS/Include/core_cmFunc.h **** }
 410:libs/CMSIS/Include/core_cmFunc.h ****  
 411:libs/CMSIS/Include/core_cmFunc.h **** 
 412:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 413:libs/CMSIS/Include/core_cmFunc.h **** 
 414:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 415:libs/CMSIS/Include/core_cmFunc.h **** 
 416:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 417:libs/CMSIS/Include/core_cmFunc.h ****  */
 418:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
 419:libs/CMSIS/Include/core_cmFunc.h **** {
 420:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 421:libs/CMSIS/Include/core_cmFunc.h **** }
 422:libs/CMSIS/Include/core_cmFunc.h **** 
 423:libs/CMSIS/Include/core_cmFunc.h **** 
 424:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 425:libs/CMSIS/Include/core_cmFunc.h **** 
 426:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 427:libs/CMSIS/Include/core_cmFunc.h **** 
 428:libs/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 429:libs/CMSIS/Include/core_cmFunc.h ****  */
 430:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
 431:libs/CMSIS/Include/core_cmFunc.h **** {
 432:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 433:libs/CMSIS/Include/core_cmFunc.h **** 
 434:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 237              		.loc 2 434 0
 238              	@ 434 "libs/CMSIS/Include/core_cmFunc.h" 1
 239 002c EFF30885 		MRS r5, msp
 240              	
 241              	@ 0 "" 2
 242              		.thumb
 243              	.LBE5:
 244              	.LBE4:
 245              		.loc 1 78 0
 246 0030 40F20003 		movw	r3, #:lower16:.LANCHOR0
 247 0034 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 248 0038 1C68     		ldr	r4, [r3]
 249 003a 2B1B     		subs	r3, r5, r4
 250 003c 9942     		cmp	r1, r3
  79:src/syscalls.c ****         r->_errno = ENOMEM;
 251              		.loc 1 79 0
 252 003e 83BF     		ittte	hi
 253 0040 0C23     		movhi	r3, #12
 254 0042 0360     		strhi	r3, [r0]
  80:src/syscalls.c ****         return (void*)-1;
 255              		.loc 1 80 0
 256 0044 4FF0FF30 		movhi	r0, #-1
 257              	.LVL16:
  81:src/syscalls.c ****     }
  82:src/syscalls.c **** 
  83:src/syscalls.c ****     void *ret = __brkval;
  84:src/syscalls.c ****     __brkval += incr;
 258              		.loc 1 84 0
 259 0048 40F20003 		movwls	r3, #:lower16:__brkval
 260 004c 9EBF     		ittt	ls
 261 004e C0F20003 		movtls	r3, #:upper16:__brkval
 262 0052 1960     		strls	r1, [r3]
  85:src/syscalls.c **** 
  86:src/syscalls.c ****     return ret;
 263              		.loc 1 86 0
 264 0054 1046     		movls	r0, r2
  87:src/syscalls.c **** }
 265              		.loc 1 87 0
 266 0056 30BC     		pop	{r4, r5}
 267 0058 7047     		bx	lr
 268              		.cfi_endproc
 269              	.LFE117:
 271 005a 00BF     		.section	.text._kill_r,"ax",%progbits
 272              		.align	2
 273              		.global	_kill_r
 274              		.thumb
 275              		.thumb_func
 277              	_kill_r:
 278              	.LFB118:
  88:src/syscalls.c **** 
  89:src/syscalls.c **** 
  90:src/syscalls.c **** int _kill_r(struct _reent *r, int pid, int signal)
  91:src/syscalls.c **** {
 279              		.loc 1 91 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 284              	.LVL17:
  92:src/syscalls.c ****     r->_errno = ENOSYS;
 285              		.loc 1 92 0
 286 0000 5823     		movs	r3, #88
 287 0002 0360     		str	r3, [r0]
  93:src/syscalls.c ****     return -1;
  94:src/syscalls.c **** }
 288              		.loc 1 94 0
 289 0004 4FF0FF30 		mov	r0, #-1
 290              	.LVL18:
 291 0008 7047     		bx	lr
 292              		.cfi_endproc
 293              	.LFE118:
 295 000a 00BF     		.section	.text._getpid_r,"ax",%progbits
 296              		.align	2
 297              		.global	_getpid_r
 298              		.thumb
 299              		.thumb_func
 301              	_getpid_r:
 302              	.LFB119:
  95:src/syscalls.c **** 
  96:src/syscalls.c **** 
  97:src/syscalls.c **** int _getpid_r(struct _reent *r)
  98:src/syscalls.c **** {
 303              		.loc 1 98 0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 308              	.LVL19:
  99:src/syscalls.c ****     r->_errno = ENOSYS;
 309              		.loc 1 99 0
 310 0000 5823     		movs	r3, #88
 311 0002 0360     		str	r3, [r0]
 100:src/syscalls.c ****     return -1;
 101:src/syscalls.c **** }
 312              		.loc 1 101 0
 313 0004 4FF0FF30 		mov	r0, #-1
 314              	.LVL20:
 315 0008 7047     		bx	lr
 316              		.cfi_endproc
 317              	.LFE119:
 319 000a 00BF     		.section	.text.__malloc_lock,"ax",%progbits
 320              		.align	2
 321              		.global	__malloc_lock
 322              		.thumb
 323              		.thumb_func
 325              	__malloc_lock:
 326              	.LFB120:
 102:src/syscalls.c **** 
 103:src/syscalls.c **** 
 104:src/syscalls.c **** void __malloc_lock(struct _reent *r)
 105:src/syscalls.c **** {
 327              		.loc 1 105 0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331              	.LVL21:
 332 0000 08B5     		push	{r3, lr}
 333              	.LCFI3:
 334              		.cfi_def_cfa_offset 8
 335              		.cfi_offset 3, -8
 336              		.cfi_offset 14, -4
 106:src/syscalls.c ****     vPortEnterCritical();
 337              		.loc 1 106 0
 338 0002 FFF7FEFF 		bl	vPortEnterCritical
 339              	.LVL22:
 340 0006 08BD     		pop	{r3, pc}
 341              		.cfi_endproc
 342              	.LFE120:
 344              		.section	.text.__malloc_unlock,"ax",%progbits
 345              		.align	2
 346              		.global	__malloc_unlock
 347              		.thumb
 348              		.thumb_func
 350              	__malloc_unlock:
 351              	.LFB121:
 107:src/syscalls.c **** }
 108:src/syscalls.c **** 
 109:src/syscalls.c **** 
 110:src/syscalls.c **** void __malloc_unlock(struct _reent *r)
 111:src/syscalls.c **** {
 352              		.loc 1 111 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL23:
 357 0000 08B5     		push	{r3, lr}
 358              	.LCFI4:
 359              		.cfi_def_cfa_offset 8
 360              		.cfi_offset 3, -8
 361              		.cfi_offset 14, -4
 112:src/syscalls.c ****     vPortExitCritical();
 362              		.loc 1 112 0
 363 0002 FFF7FEFF 		bl	vPortExitCritical
 364              	.LVL24:
 365 0006 08BD     		pop	{r3, pc}
 366              		.cfi_endproc
 367              	.LFE121:
 369              		.comm	__brkval,4,4
 370              		.global	__malloc_margin
 371              		.section	.data.__malloc_margin,"aw",%progbits
 372              		.align	2
 373              		.set	.LANCHOR0,. + 0
 376              	__malloc_margin:
 377 0000 00010000 		.word	256
 378              		.text
 379              	.Letext0:
 380              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.8.2/include/stddef.h"
 381              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 382              		.file 5 "/usr/include/newlib/sys/lock.h"
 383              		.file 6 "/usr/include/newlib/sys/_types.h"
 384              		.file 7 "/usr/include/newlib/sys/reent.h"
 385              		.file 8 "/usr/include/newlib/sys/types.h"
 386              		.file 9 "/usr/include/newlib/stdint.h"
 387              		.file 10 "/usr/include/newlib/sys/stat.h"
 388              		.file 11 "/usr/include/newlib/reent.h"
 389              		.file 12 "/usr/include/newlib/sys/unistd.h"
 390              		.file 13 "libs/CMSIS/Include/core_cm4.h"
 391              		.file 14 "src/uart.h"
 392              		.file 15 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 syscalls.c
     /tmp/cctvi0BC.s:20     .text._exit:0000000000000000 $t
     /tmp/cctvi0BC.s:25     .text._exit:0000000000000000 _exit
     /tmp/cctvi0BC.s:41     .text._read_r:0000000000000000 $t
     /tmp/cctvi0BC.s:46     .text._read_r:0000000000000000 _read_r
     /tmp/cctvi0BC.s:68     .text._write_r:0000000000000000 $t
     /tmp/cctvi0BC.s:73     .text._write_r:0000000000000000 _write_r
     /tmp/cctvi0BC.s:94     .text._lseek_r:0000000000000000 $t
     /tmp/cctvi0BC.s:99     .text._lseek_r:0000000000000000 _lseek_r
     /tmp/cctvi0BC.s:119    .text._close_r:0000000000000000 $t
     /tmp/cctvi0BC.s:124    .text._close_r:0000000000000000 _close_r
     /tmp/cctvi0BC.s:143    .text._fstat_r:0000000000000000 $t
     /tmp/cctvi0BC.s:148    .text._fstat_r:0000000000000000 _fstat_r
     /tmp/cctvi0BC.s:177    .text._isatty_r:0000000000000000 $t
     /tmp/cctvi0BC.s:182    .text._isatty_r:0000000000000000 _isatty_r
     /tmp/cctvi0BC.s:198    .text._sbrk_r:0000000000000000 $t
     /tmp/cctvi0BC.s:203    .text._sbrk_r:0000000000000000 _sbrk_r
                            *COM*:0000000000000004 __brkval
     /tmp/cctvi0BC.s:373    .data.__malloc_margin:0000000000000000 .LANCHOR0
     /tmp/cctvi0BC.s:272    .text._kill_r:0000000000000000 $t
     /tmp/cctvi0BC.s:277    .text._kill_r:0000000000000000 _kill_r
     /tmp/cctvi0BC.s:296    .text._getpid_r:0000000000000000 $t
     /tmp/cctvi0BC.s:301    .text._getpid_r:0000000000000000 _getpid_r
     /tmp/cctvi0BC.s:320    .text.__malloc_lock:0000000000000000 $t
     /tmp/cctvi0BC.s:325    .text.__malloc_lock:0000000000000000 __malloc_lock
     /tmp/cctvi0BC.s:345    .text.__malloc_unlock:0000000000000000 $t
     /tmp/cctvi0BC.s:350    .text.__malloc_unlock:0000000000000000 __malloc_unlock
     /tmp/cctvi0BC.s:376    .data.__malloc_margin:0000000000000000 __malloc_margin
     /tmp/cctvi0BC.s:372    .data.__malloc_margin:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:0000000000000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.reent.h.97.2ae38345dababbc3acb159bb773d0e93
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:0000000000000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.stdint.h.10.d0f8e374834fcfc2e296d5d5fe82f02a
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.55.a343614a17c4367a6359a1f530d6d32b
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.74.fc794e36cd6c91c3b4695c74d78d9ccd
                           .group:0000000000000000 wm4.portmacro.h.69.a7e264ae32accd81a6ffb6f75a8356fe
                           .group:0000000000000000 wm4.portable.h.315.489c085dbd13c768c8594a7d23ef5545
                           .group:0000000000000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a1d4f27d190f434afd0502fdd510d30a
                           .group:0000000000000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:0000000000000000 wm4.unistd.h.259.3e3d3a4e9d73b9fe8a562fa63b167224
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02
                           .group:0000000000000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:0000000000000000 wm4.errno.h.9.1ecd7b1049497a0ab61da0f6cbd4b0c6
                           .group:0000000000000000 wm4.cdefs.h.47.62f534e9f325912d9007cf852ba0bf0d
                           .group:0000000000000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:0000000000000000 wm4.string.h.126.6ff3aa59129e7f66b2c273baf353e066
                           .group:0000000000000000 wm4.time.h.8.2930fe070f4a8096b07db9159698c8e3
                           .group:0000000000000000 wm4.time.h.2.9857e62ad6ac99431e29d58067232314
                           .group:0000000000000000 wm4.time.h.24.b2ed57ecf2f83bfb269ea55d03cd4600
                           .group:0000000000000000 wm4.stat.h.69.169a67369ef31f6ea38a12bc9ba4e5dd
                           .group:0000000000000000 wm4.time.h.6.45883bffa9c9968c5b4b5ace5f5b1c66

UNDEFINED SYMBOLS
uart_read_r
uart_write_r
end
vPortEnterCritical
vPortExitCritical
