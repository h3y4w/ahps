   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"croutine.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.bss.pxReadyCoRoutineLists,"aw",%nobits
  20              		.align	2
  23              	pxReadyCoRoutineLists:
  24 0000 00000000 		.space	40
  24      00000000 
  24      00000000 
  24      00000000 
  24      00000000 
  25              		.section	.bss.xDelayedCoRoutineList1,"aw",%nobits
  26              		.align	2
  29              	xDelayedCoRoutineList1:
  30 0000 00000000 		.space	20
  30      00000000 
  30      00000000 
  30      00000000 
  30      00000000 
  31              		.section	.bss.xDelayedCoRoutineList2,"aw",%nobits
  32              		.align	2
  35              	xDelayedCoRoutineList2:
  36 0000 00000000 		.space	20
  36      00000000 
  36      00000000 
  36      00000000 
  36      00000000 
  37              		.section	.bss.pxDelayedCoRoutineList,"aw",%nobits
  38              		.align	2
  41              	pxDelayedCoRoutineList:
  42 0000 00000000 		.space	4
  43              		.section	.bss.pxOverflowDelayedCoRoutineList,"aw",%nobits
  44              		.align	2
  47              	pxOverflowDelayedCoRoutineList:
  48 0000 00000000 		.space	4
  49              		.section	.bss.xPendingReadyCoRoutineList,"aw",%nobits
  50              		.align	2
  53              	xPendingReadyCoRoutineList:
  54 0000 00000000 		.space	20
  54      00000000 
  54      00000000 
  54      00000000 
  54      00000000 
  55              		.global	pxCurrentCoRoutine
  56              		.section	.bss.pxCurrentCoRoutine,"aw",%nobits
  57              		.align	2
  60              	pxCurrentCoRoutine:
  61 0000 00000000 		.space	4
  62              		.section	.bss.uxTopCoRoutineReadyPriority,"aw",%nobits
  63              		.align	2
  66              	uxTopCoRoutineReadyPriority:
  67 0000 00000000 		.space	4
  68              		.section	.bss.xCoRoutineTickCount,"aw",%nobits
  69              		.align	2
  72              	xCoRoutineTickCount:
  73 0000 00000000 		.space	4
  74              		.section	.bss.xLastTickCount,"aw",%nobits
  75              		.align	2
  78              	xLastTickCount:
  79 0000 00000000 		.space	4
  80              		.section	.bss.xPassedTicks,"aw",%nobits
  81              		.align	2
  84              	xPassedTicks:
  85 0000 00000000 		.space	4
  86              		.section	.text.xCoRoutineCreate,"ax",%progbits
  87              		.align	2
  88              		.global	xCoRoutineCreate
  89              		.thumb
  90              		.thumb_func
  92              	xCoRoutineCreate:
  93              	.LFB110:
  94              		.file 1 "FreeRTOS/Source/croutine.c"
   1:FreeRTOS/Source/croutine.c **** /*
   2:FreeRTOS/Source/croutine.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/croutine.c **** 
   4:FreeRTOS/Source/croutine.c **** 
   5:FreeRTOS/Source/croutine.c ****     ***************************************************************************
   6:FreeRTOS/Source/croutine.c ****      *                                                                       *
   7:FreeRTOS/Source/croutine.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/croutine.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/croutine.c ****      *    available.                                                         *
  10:FreeRTOS/Source/croutine.c ****      *                                                                       *
  11:FreeRTOS/Source/croutine.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/croutine.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/croutine.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/croutine.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/croutine.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/croutine.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/croutine.c ****      *                                                                       *
  18:FreeRTOS/Source/croutine.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/croutine.c ****      *                                                                       *
  20:FreeRTOS/Source/croutine.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/croutine.c ****      *                                                                       *
  22:FreeRTOS/Source/croutine.c ****     ***************************************************************************
  23:FreeRTOS/Source/croutine.c **** 
  24:FreeRTOS/Source/croutine.c **** 
  25:FreeRTOS/Source/croutine.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/croutine.c **** 
  27:FreeRTOS/Source/croutine.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/croutine.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/croutine.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/croutine.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/croutine.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/croutine.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/croutine.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/croutine.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/croutine.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/croutine.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/croutine.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/croutine.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/croutine.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/croutine.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/croutine.c **** 
  42:FreeRTOS/Source/croutine.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/croutine.c **** 
  44:FreeRTOS/Source/croutine.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/croutine.c ****     contact details.
  46:FreeRTOS/Source/croutine.c **** 
  47:FreeRTOS/Source/croutine.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/croutine.c ****     critical systems.
  49:FreeRTOS/Source/croutine.c **** 
  50:FreeRTOS/Source/croutine.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/croutine.c ****     licensing and training services.
  52:FreeRTOS/Source/croutine.c **** */
  53:FreeRTOS/Source/croutine.c **** 
  54:FreeRTOS/Source/croutine.c **** #include "FreeRTOS.h"
  55:FreeRTOS/Source/croutine.c **** #include "task.h"
  56:FreeRTOS/Source/croutine.c **** #include "croutine.h"
  57:FreeRTOS/Source/croutine.c **** 
  58:FreeRTOS/Source/croutine.c **** /*
  59:FreeRTOS/Source/croutine.c ****  * Some kernel aware debuggers require data to be viewed to be global, rather
  60:FreeRTOS/Source/croutine.c ****  * than file scope.
  61:FreeRTOS/Source/croutine.c ****  */
  62:FreeRTOS/Source/croutine.c **** #ifdef portREMOVE_STATIC_QUALIFIER
  63:FreeRTOS/Source/croutine.c **** 	#define static
  64:FreeRTOS/Source/croutine.c **** #endif
  65:FreeRTOS/Source/croutine.c **** 
  66:FreeRTOS/Source/croutine.c **** 
  67:FreeRTOS/Source/croutine.c **** /* Lists for ready and blocked co-routines. --------------------*/
  68:FreeRTOS/Source/croutine.c **** static xList pxReadyCoRoutineLists[ configMAX_CO_ROUTINE_PRIORITIES ];	/*< Prioritised ready co-rou
  69:FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList1;									/*< Delayed co-routines. */
  70:FreeRTOS/Source/croutine.c **** static xList xDelayedCoRoutineList2;									/*< Delayed co-routines (two lists are used - one for 
  71:FreeRTOS/Source/croutine.c **** static xList * pxDelayedCoRoutineList;									/*< Points to the delayed co-routine list currently 
  72:FreeRTOS/Source/croutine.c **** static xList * pxOverflowDelayedCoRoutineList;							/*< Points to the delayed co-routine list curr
  73:FreeRTOS/Source/croutine.c **** static xList xPendingReadyCoRoutineList;											/*< Holds co-routines that have been readied by 
  74:FreeRTOS/Source/croutine.c **** 
  75:FreeRTOS/Source/croutine.c **** /* Other file private variables. --------------------------------*/
  76:FreeRTOS/Source/croutine.c **** corCRCB * pxCurrentCoRoutine = NULL;
  77:FreeRTOS/Source/croutine.c **** static unsigned portBASE_TYPE uxTopCoRoutineReadyPriority = 0;
  78:FreeRTOS/Source/croutine.c **** static portTickType xCoRoutineTickCount = 0, xLastTickCount = 0, xPassedTicks = 0;
  79:FreeRTOS/Source/croutine.c **** 
  80:FreeRTOS/Source/croutine.c **** /* The initial state of the co-routine when it is created. */
  81:FreeRTOS/Source/croutine.c **** #define corINITIAL_STATE	( 0 )
  82:FreeRTOS/Source/croutine.c **** 
  83:FreeRTOS/Source/croutine.c **** /*
  84:FreeRTOS/Source/croutine.c ****  * Place the co-routine represented by pxCRCB into the appropriate ready queue
  85:FreeRTOS/Source/croutine.c ****  * for the priority.  It is inserted at the end of the list.
  86:FreeRTOS/Source/croutine.c ****  *
  87:FreeRTOS/Source/croutine.c ****  * This macro accesses the co-routine ready lists and therefore must not be
  88:FreeRTOS/Source/croutine.c ****  * used from within an ISR.
  89:FreeRTOS/Source/croutine.c ****  */
  90:FreeRTOS/Source/croutine.c **** #define prvAddCoRoutineToReadyQueue( pxCRCB )																		\
  91:FreeRTOS/Source/croutine.c **** {																													\
  92:FreeRTOS/Source/croutine.c **** 	if( pxCRCB->uxPriority > uxTopCoRoutineReadyPriority )															\
  93:FreeRTOS/Source/croutine.c **** 	{																												\
  94:FreeRTOS/Source/croutine.c **** 		uxTopCoRoutineReadyPriority = pxCRCB->uxPriority;															\
  95:FreeRTOS/Source/croutine.c **** 	}																												\
  96:FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( pxReadyCoRoutineLists[ pxCRCB->uxPriority ] ), &( pxCRCB->xGenericL
  97:FreeRTOS/Source/croutine.c **** }	
  98:FreeRTOS/Source/croutine.c **** 
  99:FreeRTOS/Source/croutine.c **** /*
 100:FreeRTOS/Source/croutine.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 101:FreeRTOS/Source/croutine.c ****  * automatically upon the creation of the first co-routine.
 102:FreeRTOS/Source/croutine.c ****  */
 103:FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void );
 104:FreeRTOS/Source/croutine.c **** 
 105:FreeRTOS/Source/croutine.c **** /*
 106:FreeRTOS/Source/croutine.c ****  * Co-routines that are readied by an interrupt cannot be placed directly into
 107:FreeRTOS/Source/croutine.c ****  * the ready lists (there is no mutual exclusion).  Instead they are placed in
 108:FreeRTOS/Source/croutine.c ****  * in the pending ready list in order that they can later be moved to the ready
 109:FreeRTOS/Source/croutine.c ****  * list by the co-routine scheduler.
 110:FreeRTOS/Source/croutine.c ****  */
 111:FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void );
 112:FreeRTOS/Source/croutine.c **** 
 113:FreeRTOS/Source/croutine.c **** /*
 114:FreeRTOS/Source/croutine.c ****  * Macro that looks at the list of co-routines that are currently delayed to
 115:FreeRTOS/Source/croutine.c ****  * see if any require waking.
 116:FreeRTOS/Source/croutine.c ****  *
 117:FreeRTOS/Source/croutine.c ****  * Co-routines are stored in the queue in the order of their wake time -
 118:FreeRTOS/Source/croutine.c ****  * meaning once one co-routine has been found whose timer has not expired
 119:FreeRTOS/Source/croutine.c ****  * we need not look any further down the list.
 120:FreeRTOS/Source/croutine.c ****  */
 121:FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void );
 122:FreeRTOS/Source/croutine.c **** 
 123:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 124:FreeRTOS/Source/croutine.c **** 
 125:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxP
 126:FreeRTOS/Source/croutine.c **** {
  95              		.loc 1 126 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 24
  98              		@ frame_needed = 1, uses_anonymous_args = 0
  99 0000 80B5     		push	{r7, lr}
 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 7, -8
 103              		.cfi_offset 14, -4
 104 0002 86B0     		sub	sp, sp, #24
 105              	.LCFI1:
 106              		.cfi_def_cfa_offset 32
 107 0004 00AF     		add	r7, sp, #0
 108              	.LCFI2:
 109              		.cfi_def_cfa_register 7
 110 0006 F860     		str	r0, [r7, #12]
 111 0008 B960     		str	r1, [r7, #8]
 112 000a 7A60     		str	r2, [r7, #4]
 127:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 128:FreeRTOS/Source/croutine.c **** corCRCB *pxCoRoutine;
 129:FreeRTOS/Source/croutine.c **** 
 130:FreeRTOS/Source/croutine.c **** 	/* Allocate the memory that will store the co-routine control block. */
 131:FreeRTOS/Source/croutine.c **** 	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
 113              		.loc 1 131 0
 114 000c 3820     		movs	r0, #56
 115 000e FFF7FEFF 		bl	malloc
 116 0012 0346     		mov	r3, r0
 117 0014 3B61     		str	r3, [r7, #16]
 132:FreeRTOS/Source/croutine.c **** 	if( pxCoRoutine )
 118              		.loc 1 132 0
 119 0016 3B69     		ldr	r3, [r7, #16]
 120 0018 002B     		cmp	r3, #0
 121 001a 58D0     		beq	.L2
 133:FreeRTOS/Source/croutine.c **** 	{
 134:FreeRTOS/Source/croutine.c **** 		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
 135:FreeRTOS/Source/croutine.c **** 		be created and the co-routine data structures need initialising. */
 136:FreeRTOS/Source/croutine.c **** 		if( pxCurrentCoRoutine == NULL )
 122              		.loc 1 136 0
 123 001c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 124 0020 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 125 0024 1B68     		ldr	r3, [r3]
 126 0026 002B     		cmp	r3, #0
 127 0028 07D1     		bne	.L3
 137:FreeRTOS/Source/croutine.c **** 		{
 138:FreeRTOS/Source/croutine.c **** 			pxCurrentCoRoutine = pxCoRoutine;
 128              		.loc 1 138 0
 129 002a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 130 002e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 131 0032 3A69     		ldr	r2, [r7, #16]
 132 0034 1A60     		str	r2, [r3]
 139:FreeRTOS/Source/croutine.c **** 			prvInitialiseCoRoutineLists();
 133              		.loc 1 139 0
 134 0036 FFF7FEFF 		bl	prvInitialiseCoRoutineLists
 135              	.L3:
 140:FreeRTOS/Source/croutine.c **** 		}
 141:FreeRTOS/Source/croutine.c **** 
 142:FreeRTOS/Source/croutine.c **** 		/* Check the priority is within limits. */
 143:FreeRTOS/Source/croutine.c **** 		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
 136              		.loc 1 143 0
 137 003a BB68     		ldr	r3, [r7, #8]
 138 003c 012B     		cmp	r3, #1
 139 003e 01D9     		bls	.L4
 144:FreeRTOS/Source/croutine.c **** 		{
 145:FreeRTOS/Source/croutine.c **** 			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
 140              		.loc 1 145 0
 141 0040 0123     		movs	r3, #1
 142 0042 BB60     		str	r3, [r7, #8]
 143              	.L4:
 146:FreeRTOS/Source/croutine.c **** 		}
 147:FreeRTOS/Source/croutine.c **** 
 148:FreeRTOS/Source/croutine.c **** 		/* Fill out the co-routine control block from the function parameters. */
 149:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxState = corINITIAL_STATE;
 144              		.loc 1 149 0
 145 0044 3B69     		ldr	r3, [r7, #16]
 146 0046 0022     		movs	r2, #0
 147 0048 9A86     		strh	r2, [r3, #52]	@ movhi
 150:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxPriority = uxPriority;
 148              		.loc 1 150 0
 149 004a 3B69     		ldr	r3, [r7, #16]
 150 004c BA68     		ldr	r2, [r7, #8]
 151 004e DA62     		str	r2, [r3, #44]
 151:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->uxIndex = uxIndex;
 152              		.loc 1 151 0
 153 0050 3B69     		ldr	r3, [r7, #16]
 154 0052 7A68     		ldr	r2, [r7, #4]
 155 0054 1A63     		str	r2, [r3, #48]
 152:FreeRTOS/Source/croutine.c **** 		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
 156              		.loc 1 152 0
 157 0056 3B69     		ldr	r3, [r7, #16]
 158 0058 FA68     		ldr	r2, [r7, #12]
 159 005a 1A60     		str	r2, [r3]
 153:FreeRTOS/Source/croutine.c **** 
 154:FreeRTOS/Source/croutine.c **** 		/* Initialise all the other co-routine control block parameters. */
 155:FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
 160              		.loc 1 155 0
 161 005c 3B69     		ldr	r3, [r7, #16]
 162 005e 0433     		adds	r3, r3, #4
 163 0060 1846     		mov	r0, r3
 164 0062 FFF7FEFF 		bl	vListInitialiseItem
 156:FreeRTOS/Source/croutine.c **** 		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
 165              		.loc 1 156 0
 166 0066 3B69     		ldr	r3, [r7, #16]
 167 0068 1833     		adds	r3, r3, #24
 168 006a 1846     		mov	r0, r3
 169 006c FFF7FEFF 		bl	vListInitialiseItem
 157:FreeRTOS/Source/croutine.c **** 
 158:FreeRTOS/Source/croutine.c **** 		/* Set the co-routine control block as a link back from the xListItem.
 159:FreeRTOS/Source/croutine.c **** 		This is so we can get back to the containing CRCB from a generic item
 160:FreeRTOS/Source/croutine.c **** 		in a list. */
 161:FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
 170              		.loc 1 161 0
 171 0070 3B69     		ldr	r3, [r7, #16]
 172 0072 3A69     		ldr	r2, [r7, #16]
 173 0074 1A61     		str	r2, [r3, #16]
 162:FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
 174              		.loc 1 162 0
 175 0076 3B69     		ldr	r3, [r7, #16]
 176 0078 3A69     		ldr	r2, [r7, #16]
 177 007a 5A62     		str	r2, [r3, #36]
 163:FreeRTOS/Source/croutine.c **** 	
 164:FreeRTOS/Source/croutine.c **** 		/* Event lists are always in priority order. */
 165:FreeRTOS/Source/croutine.c **** 		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType 
 178              		.loc 1 165 0
 179 007c BB68     		ldr	r3, [r7, #8]
 180 007e C3F10502 		rsb	r2, r3, #5
 181 0082 3B69     		ldr	r3, [r7, #16]
 182 0084 9A61     		str	r2, [r3, #24]
 166:FreeRTOS/Source/croutine.c **** 		
 167:FreeRTOS/Source/croutine.c **** 		/* Now the co-routine has been initialised it can be added to the ready
 168:FreeRTOS/Source/croutine.c **** 		list at the correct priority. */
 169:FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxCoRoutine );
 183              		.loc 1 169 0
 184 0086 3B69     		ldr	r3, [r7, #16]
 185 0088 DA6A     		ldr	r2, [r3, #44]
 186 008a 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 187 008e C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 188 0092 1B68     		ldr	r3, [r3]
 189 0094 9A42     		cmp	r2, r3
 190 0096 06D9     		bls	.L5
 191              		.loc 1 169 0 is_stmt 0 discriminator 1
 192 0098 3B69     		ldr	r3, [r7, #16]
 193 009a DA6A     		ldr	r2, [r3, #44]
 194 009c 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 195 00a0 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 196 00a4 1A60     		str	r2, [r3]
 197              	.L5:
 198              		.loc 1 169 0 discriminator 2
 199 00a6 3B69     		ldr	r3, [r7, #16]
 200 00a8 DA6A     		ldr	r2, [r3, #44]
 201 00aa 1346     		mov	r3, r2
 202 00ac 9B00     		lsls	r3, r3, #2
 203 00ae 1344     		add	r3, r3, r2
 204 00b0 9B00     		lsls	r3, r3, #2
 205 00b2 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 206 00b6 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 207 00ba 1A44     		add	r2, r2, r3
 208 00bc 3B69     		ldr	r3, [r7, #16]
 209 00be 0433     		adds	r3, r3, #4
 210 00c0 1046     		mov	r0, r2
 211 00c2 1946     		mov	r1, r3
 212 00c4 FFF7FEFF 		bl	vListInsertEnd
 170:FreeRTOS/Source/croutine.c **** 
 171:FreeRTOS/Source/croutine.c **** 		xReturn = pdPASS;
 213              		.loc 1 171 0 is_stmt 1 discriminator 2
 214 00c8 0123     		movs	r3, #1
 215 00ca 7B61     		str	r3, [r7, #20]
 216 00cc 02E0     		b	.L6
 217              	.L2:
 172:FreeRTOS/Source/croutine.c **** 	}
 173:FreeRTOS/Source/croutine.c **** 	else
 174:FreeRTOS/Source/croutine.c **** 	{		
 175:FreeRTOS/Source/croutine.c **** 		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 218              		.loc 1 175 0
 219 00ce 4FF0FF33 		mov	r3, #-1
 220 00d2 7B61     		str	r3, [r7, #20]
 221              	.L6:
 176:FreeRTOS/Source/croutine.c **** 	}
 177:FreeRTOS/Source/croutine.c **** 	
 178:FreeRTOS/Source/croutine.c **** 	return xReturn;	
 222              		.loc 1 178 0
 223 00d4 7B69     		ldr	r3, [r7, #20]
 179:FreeRTOS/Source/croutine.c **** }
 224              		.loc 1 179 0
 225 00d6 1846     		mov	r0, r3
 226 00d8 1837     		adds	r7, r7, #24
 227 00da BD46     		mov	sp, r7
 228              		@ sp needed
 229 00dc 80BD     		pop	{r7, pc}
 230              		.cfi_endproc
 231              	.LFE110:
 233 00de 00BF     		.section	.text.vCoRoutineAddToDelayedList,"ax",%progbits
 234              		.align	2
 235              		.global	vCoRoutineAddToDelayedList
 236              		.thumb
 237              		.thumb_func
 239              	vCoRoutineAddToDelayedList:
 240              	.LFB111:
 180:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 181:FreeRTOS/Source/croutine.c **** 
 182:FreeRTOS/Source/croutine.c **** void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
 183:FreeRTOS/Source/croutine.c **** {
 241              		.loc 1 183 0
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 16
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI3:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 84B0     		sub	sp, sp, #16
 251              	.LCFI4:
 252              		.cfi_def_cfa_offset 24
 253 0004 00AF     		add	r7, sp, #0
 254              	.LCFI5:
 255              		.cfi_def_cfa_register 7
 256 0006 7860     		str	r0, [r7, #4]
 257 0008 3960     		str	r1, [r7]
 184:FreeRTOS/Source/croutine.c **** portTickType xTimeToWake;
 185:FreeRTOS/Source/croutine.c **** 
 186:FreeRTOS/Source/croutine.c **** 	/* Calculate the time to wake - this may overflow but this is
 187:FreeRTOS/Source/croutine.c **** 	not a problem. */
 188:FreeRTOS/Source/croutine.c **** 	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
 258              		.loc 1 188 0
 259 000a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 260 000e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 261 0012 1A68     		ldr	r2, [r3]
 262 0014 7B68     		ldr	r3, [r7, #4]
 263 0016 1344     		add	r3, r3, r2
 264 0018 FB60     		str	r3, [r7, #12]
 189:FreeRTOS/Source/croutine.c **** 
 190:FreeRTOS/Source/croutine.c **** 	/* We must remove ourselves from the ready list before adding
 191:FreeRTOS/Source/croutine.c **** 	ourselves to the blocked list as the same list item is used for
 192:FreeRTOS/Source/croutine.c **** 	both lists. */
 193:FreeRTOS/Source/croutine.c **** 	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
 265              		.loc 1 193 0
 266 001a 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 267 001e C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 268 0022 1B68     		ldr	r3, [r3]
 269 0024 0433     		adds	r3, r3, #4
 270 0026 1846     		mov	r0, r3
 271 0028 FFF7FEFF 		bl	vListRemove
 194:FreeRTOS/Source/croutine.c **** 
 195:FreeRTOS/Source/croutine.c **** 	/* The list item will be inserted in wake time order. */
 196:FreeRTOS/Source/croutine.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
 272              		.loc 1 196 0
 273 002c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 274 0030 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 275 0034 1B68     		ldr	r3, [r3]
 276 0036 FA68     		ldr	r2, [r7, #12]
 277 0038 5A60     		str	r2, [r3, #4]
 197:FreeRTOS/Source/croutine.c **** 
 198:FreeRTOS/Source/croutine.c **** 	if( xTimeToWake < xCoRoutineTickCount )
 278              		.loc 1 198 0
 279 003a 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 280 003e C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 281 0042 1B68     		ldr	r3, [r3]
 282 0044 FA68     		ldr	r2, [r7, #12]
 283 0046 9A42     		cmp	r2, r3
 284 0048 0FD2     		bcs	.L9
 199:FreeRTOS/Source/croutine.c **** 	{
 200:FreeRTOS/Source/croutine.c **** 		/* Wake time has overflowed.  Place this item in the
 201:FreeRTOS/Source/croutine.c **** 		overflow list. */
 202:FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->x
 285              		.loc 1 202 0
 286 004a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 287 004e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 288 0052 1A68     		ldr	r2, [r3]
 289 0054 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 290 0058 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 291 005c 1B68     		ldr	r3, [r3]
 292 005e 0433     		adds	r3, r3, #4
 293 0060 1046     		mov	r0, r2
 294 0062 1946     		mov	r1, r3
 295 0064 FFF7FEFF 		bl	vListInsert
 296 0068 0EE0     		b	.L10
 297              	.L9:
 203:FreeRTOS/Source/croutine.c **** 	}
 204:FreeRTOS/Source/croutine.c **** 	else
 205:FreeRTOS/Source/croutine.c **** 	{
 206:FreeRTOS/Source/croutine.c **** 		/* The wake time has not overflowed, so we can use the
 207:FreeRTOS/Source/croutine.c **** 		current block list. */
 208:FreeRTOS/Source/croutine.c **** 		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericL
 298              		.loc 1 208 0
 299 006a 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 300 006e C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 301 0072 1A68     		ldr	r2, [r3]
 302 0074 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 303 0078 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 304 007c 1B68     		ldr	r3, [r3]
 305 007e 0433     		adds	r3, r3, #4
 306 0080 1046     		mov	r0, r2
 307 0082 1946     		mov	r1, r3
 308 0084 FFF7FEFF 		bl	vListInsert
 309              	.L10:
 209:FreeRTOS/Source/croutine.c **** 	}
 210:FreeRTOS/Source/croutine.c **** 
 211:FreeRTOS/Source/croutine.c **** 	if( pxEventList )
 310              		.loc 1 211 0
 311 0088 3B68     		ldr	r3, [r7]
 312 008a 002B     		cmp	r3, #0
 313 008c 09D0     		beq	.L8
 212:FreeRTOS/Source/croutine.c **** 	{
 213:FreeRTOS/Source/croutine.c **** 		/* Also add the co-routine to an event list.  If this is done then the
 214:FreeRTOS/Source/croutine.c **** 		function must be called with interrupts disabled. */
 215:FreeRTOS/Source/croutine.c **** 		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
 314              		.loc 1 215 0
 315 008e 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 316 0092 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 317 0096 1B68     		ldr	r3, [r3]
 318 0098 1833     		adds	r3, r3, #24
 319 009a 3868     		ldr	r0, [r7]
 320 009c 1946     		mov	r1, r3
 321 009e FFF7FEFF 		bl	vListInsert
 322              	.L8:
 216:FreeRTOS/Source/croutine.c **** 	}
 217:FreeRTOS/Source/croutine.c **** }
 323              		.loc 1 217 0
 324 00a2 1037     		adds	r7, r7, #16
 325 00a4 BD46     		mov	sp, r7
 326              		@ sp needed
 327 00a6 80BD     		pop	{r7, pc}
 328              		.cfi_endproc
 329              	.LFE111:
 331              		.section	.text.prvCheckPendingReadyList,"ax",%progbits
 332              		.align	2
 333              		.thumb
 334              		.thumb_func
 336              	prvCheckPendingReadyList:
 337              	.LFB112:
 218:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 219:FreeRTOS/Source/croutine.c **** 
 220:FreeRTOS/Source/croutine.c **** static void prvCheckPendingReadyList( void )
 221:FreeRTOS/Source/croutine.c **** {
 338              		.loc 1 221 0
 339              		.cfi_startproc
 340              		@ args = 0, pretend = 0, frame = 8
 341              		@ frame_needed = 1, uses_anonymous_args = 0
 342 0000 80B5     		push	{r7, lr}
 343              	.LCFI6:
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 7, -8
 346              		.cfi_offset 14, -4
 347 0002 82B0     		sub	sp, sp, #8
 348              	.LCFI7:
 349              		.cfi_def_cfa_offset 16
 350 0004 00AF     		add	r7, sp, #0
 351              	.LCFI8:
 352              		.cfi_def_cfa_register 7
 222:FreeRTOS/Source/croutine.c **** 	/* Are there any co-routines waiting to get moved to the ready list?  These
 223:FreeRTOS/Source/croutine.c **** 	are co-routines that have been readied by an ISR.  The ISR cannot access
 224:FreeRTOS/Source/croutine.c **** 	the	ready lists itself. */
 225:FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
 353              		.loc 1 225 0
 354 0006 39E0     		b	.L13
 355              	.L15:
 356              	.LBB2:
 226:FreeRTOS/Source/croutine.c **** 	{
 227:FreeRTOS/Source/croutine.c **** 		corCRCB *pxUnblockedCRCB;
 228:FreeRTOS/Source/croutine.c **** 
 229:FreeRTOS/Source/croutine.c **** 		/* The pending ready list can be accessed by an ISR. */
 230:FreeRTOS/Source/croutine.c **** 		portDISABLE_INTERRUPTS();
 357              		.loc 1 230 0
 358              	@ 230 "FreeRTOS/Source/croutine.c" 1
 359 0008 4FF0BF00 			mov r0, #191								
 360 000c 80F31188 		msr basepri, r0							
 361              	
 362              	@ 0 "" 2
 231:FreeRTOS/Source/croutine.c **** 		{	
 232:FreeRTOS/Source/croutine.c **** 			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
 363              		.loc 1 232 0
 364              		.thumb
 365 0010 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 366 0014 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 367 0018 DB68     		ldr	r3, [r3, #12]
 368 001a DB68     		ldr	r3, [r3, #12]
 369 001c 7B60     		str	r3, [r7, #4]
 233:FreeRTOS/Source/croutine.c **** 			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 370              		.loc 1 233 0
 371 001e 7B68     		ldr	r3, [r7, #4]
 372 0020 1833     		adds	r3, r3, #24
 373 0022 1846     		mov	r0, r3
 374 0024 FFF7FEFF 		bl	vListRemove
 234:FreeRTOS/Source/croutine.c **** 		}
 235:FreeRTOS/Source/croutine.c **** 		portENABLE_INTERRUPTS();
 375              		.loc 1 235 0
 376              	@ 235 "FreeRTOS/Source/croutine.c" 1
 377 0028 4FF00000 			mov r0, #0					
 378 002c 80F31188 		msr basepri, r0				
 379              	
 380              	@ 0 "" 2
 236:FreeRTOS/Source/croutine.c **** 
 237:FreeRTOS/Source/croutine.c **** 		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
 381              		.loc 1 237 0
 382              		.thumb
 383 0030 7B68     		ldr	r3, [r7, #4]
 384 0032 0433     		adds	r3, r3, #4
 385 0034 1846     		mov	r0, r3
 386 0036 FFF7FEFF 		bl	vListRemove
 238:FreeRTOS/Source/croutine.c **** 		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
 387              		.loc 1 238 0
 388 003a 7B68     		ldr	r3, [r7, #4]
 389 003c DA6A     		ldr	r2, [r3, #44]
 390 003e 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 391 0042 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 392 0046 1B68     		ldr	r3, [r3]
 393 0048 9A42     		cmp	r2, r3
 394 004a 06D9     		bls	.L14
 395              		.loc 1 238 0 is_stmt 0 discriminator 1
 396 004c 7B68     		ldr	r3, [r7, #4]
 397 004e DA6A     		ldr	r2, [r3, #44]
 398 0050 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 399 0054 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 400 0058 1A60     		str	r2, [r3]
 401              	.L14:
 402              		.loc 1 238 0 discriminator 2
 403 005a 7B68     		ldr	r3, [r7, #4]
 404 005c DA6A     		ldr	r2, [r3, #44]
 405 005e 1346     		mov	r3, r2
 406 0060 9B00     		lsls	r3, r3, #2
 407 0062 1344     		add	r3, r3, r2
 408 0064 9B00     		lsls	r3, r3, #2
 409 0066 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 410 006a C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 411 006e 1A44     		add	r2, r2, r3
 412 0070 7B68     		ldr	r3, [r7, #4]
 413 0072 0433     		adds	r3, r3, #4
 414 0074 1046     		mov	r0, r2
 415 0076 1946     		mov	r1, r3
 416 0078 FFF7FEFF 		bl	vListInsertEnd
 417              	.L13:
 418              	.LBE2:
 225:FreeRTOS/Source/croutine.c **** 	{
 419              		.loc 1 225 0 is_stmt 1 discriminator 1
 420 007c 40F20003 		movw	r3, #:lower16:xPendingReadyCoRoutineList
 421 0080 C0F20003 		movt	r3, #:upper16:xPendingReadyCoRoutineList
 422 0084 1B68     		ldr	r3, [r3]
 423 0086 002B     		cmp	r3, #0
 424 0088 BED1     		bne	.L15
 239:FreeRTOS/Source/croutine.c **** 	}
 240:FreeRTOS/Source/croutine.c **** }
 425              		.loc 1 240 0
 426 008a 0837     		adds	r7, r7, #8
 427 008c BD46     		mov	sp, r7
 428              		@ sp needed
 429 008e 80BD     		pop	{r7, pc}
 430              		.cfi_endproc
 431              	.LFE112:
 433              		.section	.text.prvCheckDelayedList,"ax",%progbits
 434              		.align	2
 435              		.thumb
 436              		.thumb_func
 438              	prvCheckDelayedList:
 439              	.LFB113:
 241:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 242:FreeRTOS/Source/croutine.c **** 
 243:FreeRTOS/Source/croutine.c **** static void prvCheckDelayedList( void )
 244:FreeRTOS/Source/croutine.c **** {
 440              		.loc 1 244 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 8
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444 0000 80B5     		push	{r7, lr}
 445              	.LCFI9:
 446              		.cfi_def_cfa_offset 8
 447              		.cfi_offset 7, -8
 448              		.cfi_offset 14, -4
 449 0002 82B0     		sub	sp, sp, #8
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 16
 452 0004 00AF     		add	r7, sp, #0
 453              	.LCFI11:
 454              		.cfi_def_cfa_register 7
 245:FreeRTOS/Source/croutine.c **** corCRCB *pxCRCB;
 246:FreeRTOS/Source/croutine.c **** 
 247:FreeRTOS/Source/croutine.c **** 	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
 455              		.loc 1 247 0
 456 0006 FFF7FEFF 		bl	xTaskGetTickCount
 457 000a 0246     		mov	r2, r0
 458 000c 40F20003 		movw	r3, #:lower16:xLastTickCount
 459 0010 C0F20003 		movt	r3, #:upper16:xLastTickCount
 460 0014 1B68     		ldr	r3, [r3]
 461 0016 D21A     		subs	r2, r2, r3
 462 0018 40F20003 		movw	r3, #:lower16:xPassedTicks
 463 001c C0F20003 		movt	r3, #:upper16:xPassedTicks
 464 0020 1A60     		str	r2, [r3]
 248:FreeRTOS/Source/croutine.c **** 	while( xPassedTicks )
 465              		.loc 1 248 0
 466 0022 85E0     		b	.L17
 467              	.L24:
 249:FreeRTOS/Source/croutine.c **** 	{
 250:FreeRTOS/Source/croutine.c **** 		xCoRoutineTickCount++;
 468              		.loc 1 250 0
 469 0024 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 470 0028 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 471 002c 1B68     		ldr	r3, [r3]
 472 002e 5A1C     		adds	r2, r3, #1
 473 0030 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 474 0034 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 475 0038 1A60     		str	r2, [r3]
 251:FreeRTOS/Source/croutine.c **** 		xPassedTicks--;
 476              		.loc 1 251 0
 477 003a 40F20003 		movw	r3, #:lower16:xPassedTicks
 478 003e C0F20003 		movt	r3, #:upper16:xPassedTicks
 479 0042 1B68     		ldr	r3, [r3]
 480 0044 5A1E     		subs	r2, r3, #1
 481 0046 40F20003 		movw	r3, #:lower16:xPassedTicks
 482 004a C0F20003 		movt	r3, #:upper16:xPassedTicks
 483 004e 1A60     		str	r2, [r3]
 252:FreeRTOS/Source/croutine.c **** 
 253:FreeRTOS/Source/croutine.c **** 		/* If the tick count has overflowed we need to swap the ready lists. */
 254:FreeRTOS/Source/croutine.c **** 		if( xCoRoutineTickCount == 0 )
 484              		.loc 1 254 0
 485 0050 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 486 0054 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 487 0058 1B68     		ldr	r3, [r3]
 488 005a 002B     		cmp	r3, #0
 489 005c 16D1     		bne	.L18
 490              	.LBB3:
 255:FreeRTOS/Source/croutine.c **** 		{
 256:FreeRTOS/Source/croutine.c **** 			xList * pxTemp;
 257:FreeRTOS/Source/croutine.c **** 
 258:FreeRTOS/Source/croutine.c **** 			/* Tick count has overflowed so we need to swap the delay lists.  If there are
 259:FreeRTOS/Source/croutine.c **** 			any items in pxDelayedCoRoutineList here then there is an error! */
 260:FreeRTOS/Source/croutine.c **** 			pxTemp = pxDelayedCoRoutineList;
 491              		.loc 1 260 0
 492 005e 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 493 0062 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 494 0066 1B68     		ldr	r3, [r3]
 495 0068 7B60     		str	r3, [r7, #4]
 261:FreeRTOS/Source/croutine.c **** 			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
 496              		.loc 1 261 0
 497 006a 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 498 006e C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 499 0072 1A68     		ldr	r2, [r3]
 500 0074 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 501 0078 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 502 007c 1A60     		str	r2, [r3]
 262:FreeRTOS/Source/croutine.c **** 			pxOverflowDelayedCoRoutineList = pxTemp;
 503              		.loc 1 262 0
 504 007e 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 505 0082 C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 506 0086 7A68     		ldr	r2, [r7, #4]
 507 0088 1A60     		str	r2, [r3]
 508              	.LBE3:
 263:FreeRTOS/Source/croutine.c **** 		}
 264:FreeRTOS/Source/croutine.c **** 
 265:FreeRTOS/Source/croutine.c **** 		/* See if this tick has made a timeout expire. */
 266:FreeRTOS/Source/croutine.c **** 		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
 509              		.loc 1 266 0
 510 008a 49E0     		b	.L19
 511              	.L18:
 512 008c 48E0     		b	.L19
 513              	.L23:
 267:FreeRTOS/Source/croutine.c **** 		{
 268:FreeRTOS/Source/croutine.c **** 			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
 514              		.loc 1 268 0
 515 008e 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 516 0092 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 517 0096 1B68     		ldr	r3, [r3]
 518 0098 DB68     		ldr	r3, [r3, #12]
 519 009a DB68     		ldr	r3, [r3, #12]
 520 009c 3B60     		str	r3, [r7]
 269:FreeRTOS/Source/croutine.c **** 
 270:FreeRTOS/Source/croutine.c **** 			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
 521              		.loc 1 270 0
 522 009e 3B68     		ldr	r3, [r7]
 523 00a0 5A68     		ldr	r2, [r3, #4]
 524 00a2 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 525 00a6 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 526 00aa 1B68     		ldr	r3, [r3]
 527 00ac 9A42     		cmp	r2, r3
 528 00ae 00D9     		bls	.L20
 271:FreeRTOS/Source/croutine.c **** 			{			
 272:FreeRTOS/Source/croutine.c **** 				/* Timeout not yet expired. */																			
 273:FreeRTOS/Source/croutine.c **** 				break;																				
 529              		.loc 1 273 0
 530 00b0 3EE0     		b	.L17
 531              	.L20:
 274:FreeRTOS/Source/croutine.c **** 			}																						
 275:FreeRTOS/Source/croutine.c **** 
 276:FreeRTOS/Source/croutine.c **** 			portDISABLE_INTERRUPTS();
 532              		.loc 1 276 0
 533              	@ 276 "FreeRTOS/Source/croutine.c" 1
 534 00b2 4FF0BF00 			mov r0, #191								
 535 00b6 80F31188 		msr basepri, r0							
 536              	
 537              	@ 0 "" 2
 277:FreeRTOS/Source/croutine.c **** 			{
 278:FreeRTOS/Source/croutine.c **** 				/* The event could have occurred just before this critical
 279:FreeRTOS/Source/croutine.c **** 				section.  If this is the case then the generic list item will
 280:FreeRTOS/Source/croutine.c **** 				have been moved to the pending ready list and the following
 281:FreeRTOS/Source/croutine.c **** 				line is still valid.  Also the pvContainer parameter will have
 282:FreeRTOS/Source/croutine.c **** 				been set to NULL so the following lines are also valid. */
 283:FreeRTOS/Source/croutine.c **** 				vListRemove( &( pxCRCB->xGenericListItem ) );											
 538              		.loc 1 283 0
 539              		.thumb
 540 00ba 3B68     		ldr	r3, [r7]
 541 00bc 0433     		adds	r3, r3, #4
 542 00be 1846     		mov	r0, r3
 543 00c0 FFF7FEFF 		bl	vListRemove
 284:FreeRTOS/Source/croutine.c **** 
 285:FreeRTOS/Source/croutine.c **** 				/* Is the co-routine waiting on an event also? */												
 286:FreeRTOS/Source/croutine.c **** 				if( pxCRCB->xEventListItem.pvContainer )													
 544              		.loc 1 286 0
 545 00c4 3B68     		ldr	r3, [r7]
 546 00c6 9B6A     		ldr	r3, [r3, #40]
 547 00c8 002B     		cmp	r3, #0
 548 00ca 04D0     		beq	.L21
 287:FreeRTOS/Source/croutine.c **** 				{															
 288:FreeRTOS/Source/croutine.c **** 					vListRemove( &( pxCRCB->xEventListItem ) );											
 549              		.loc 1 288 0
 550 00cc 3B68     		ldr	r3, [r7]
 551 00ce 1833     		adds	r3, r3, #24
 552 00d0 1846     		mov	r0, r3
 553 00d2 FFF7FEFF 		bl	vListRemove
 554              	.L21:
 289:FreeRTOS/Source/croutine.c **** 				}
 290:FreeRTOS/Source/croutine.c **** 			}
 291:FreeRTOS/Source/croutine.c **** 			portENABLE_INTERRUPTS();
 555              		.loc 1 291 0
 556              	@ 291 "FreeRTOS/Source/croutine.c" 1
 557 00d6 4FF00000 			mov r0, #0					
 558 00da 80F31188 		msr basepri, r0				
 559              	
 560              	@ 0 "" 2
 292:FreeRTOS/Source/croutine.c **** 
 293:FreeRTOS/Source/croutine.c **** 			prvAddCoRoutineToReadyQueue( pxCRCB );													
 561              		.loc 1 293 0
 562              		.thumb
 563 00de 3B68     		ldr	r3, [r7]
 564 00e0 DA6A     		ldr	r2, [r3, #44]
 565 00e2 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 566 00e6 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 567 00ea 1B68     		ldr	r3, [r3]
 568 00ec 9A42     		cmp	r2, r3
 569 00ee 06D9     		bls	.L22
 570              		.loc 1 293 0 is_stmt 0 discriminator 1
 571 00f0 3B68     		ldr	r3, [r7]
 572 00f2 DA6A     		ldr	r2, [r3, #44]
 573 00f4 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 574 00f8 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 575 00fc 1A60     		str	r2, [r3]
 576              	.L22:
 577              		.loc 1 293 0 discriminator 2
 578 00fe 3B68     		ldr	r3, [r7]
 579 0100 DA6A     		ldr	r2, [r3, #44]
 580 0102 1346     		mov	r3, r2
 581 0104 9B00     		lsls	r3, r3, #2
 582 0106 1344     		add	r3, r3, r2
 583 0108 9B00     		lsls	r3, r3, #2
 584 010a 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 585 010e C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 586 0112 1A44     		add	r2, r2, r3
 587 0114 3B68     		ldr	r3, [r7]
 588 0116 0433     		adds	r3, r3, #4
 589 0118 1046     		mov	r0, r2
 590 011a 1946     		mov	r1, r3
 591 011c FFF7FEFF 		bl	vListInsertEnd
 592              	.L19:
 266:FreeRTOS/Source/croutine.c **** 		{
 593              		.loc 1 266 0 is_stmt 1 discriminator 1
 594 0120 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 595 0124 C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 596 0128 1B68     		ldr	r3, [r3]
 597 012a 1B68     		ldr	r3, [r3]
 598 012c 002B     		cmp	r3, #0
 599 012e AED1     		bne	.L23
 600              	.L17:
 248:FreeRTOS/Source/croutine.c **** 	{
 601              		.loc 1 248 0 discriminator 1
 602 0130 40F20003 		movw	r3, #:lower16:xPassedTicks
 603 0134 C0F20003 		movt	r3, #:upper16:xPassedTicks
 604 0138 1B68     		ldr	r3, [r3]
 605 013a 002B     		cmp	r3, #0
 606 013c 7FF472AF 		bne	.L24
 294:FreeRTOS/Source/croutine.c **** 		}																									
 295:FreeRTOS/Source/croutine.c **** 	}
 296:FreeRTOS/Source/croutine.c **** 
 297:FreeRTOS/Source/croutine.c **** 	xLastTickCount = xCoRoutineTickCount;
 607              		.loc 1 297 0
 608 0140 40F20003 		movw	r3, #:lower16:xCoRoutineTickCount
 609 0144 C0F20003 		movt	r3, #:upper16:xCoRoutineTickCount
 610 0148 1A68     		ldr	r2, [r3]
 611 014a 40F20003 		movw	r3, #:lower16:xLastTickCount
 612 014e C0F20003 		movt	r3, #:upper16:xLastTickCount
 613 0152 1A60     		str	r2, [r3]
 298:FreeRTOS/Source/croutine.c **** }
 614              		.loc 1 298 0
 615 0154 0837     		adds	r7, r7, #8
 616 0156 BD46     		mov	sp, r7
 617              		@ sp needed
 618 0158 80BD     		pop	{r7, pc}
 619              		.cfi_endproc
 620              	.LFE113:
 622 015a 00BF     		.section	.text.vCoRoutineSchedule,"ax",%progbits
 623              		.align	2
 624              		.global	vCoRoutineSchedule
 625              		.thumb
 626              		.thumb_func
 628              	vCoRoutineSchedule:
 629              	.LFB114:
 299:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 300:FreeRTOS/Source/croutine.c **** 
 301:FreeRTOS/Source/croutine.c **** void vCoRoutineSchedule( void )
 302:FreeRTOS/Source/croutine.c **** {
 630              		.loc 1 302 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 8
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634 0000 80B5     		push	{r7, lr}
 635              	.LCFI12:
 636              		.cfi_def_cfa_offset 8
 637              		.cfi_offset 7, -8
 638              		.cfi_offset 14, -4
 639 0002 82B0     		sub	sp, sp, #8
 640              	.LCFI13:
 641              		.cfi_def_cfa_offset 16
 642 0004 00AF     		add	r7, sp, #0
 643              	.LCFI14:
 644              		.cfi_def_cfa_register 7
 303:FreeRTOS/Source/croutine.c **** 	/* See if any co-routines readied by events need moving to the ready lists. */
 304:FreeRTOS/Source/croutine.c **** 	prvCheckPendingReadyList();
 645              		.loc 1 304 0
 646 0006 FFF7FEFF 		bl	prvCheckPendingReadyList
 305:FreeRTOS/Source/croutine.c **** 
 306:FreeRTOS/Source/croutine.c **** 	/* See if any delayed co-routines have timed out. */
 307:FreeRTOS/Source/croutine.c **** 	prvCheckDelayedList();
 647              		.loc 1 307 0
 648 000a FFF7FEFF 		bl	prvCheckDelayedList
 308:FreeRTOS/Source/croutine.c **** 
 309:FreeRTOS/Source/croutine.c **** 	/* Find the highest priority queue that contains ready co-routines. */
 310:FreeRTOS/Source/croutine.c **** 	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
 649              		.loc 1 310 0
 650 000e 12E0     		b	.L26
 651              	.L29:
 311:FreeRTOS/Source/croutine.c **** 	{
 312:FreeRTOS/Source/croutine.c **** 		if( uxTopCoRoutineReadyPriority == 0 )
 652              		.loc 1 312 0
 653 0010 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 654 0014 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 655 0018 1B68     		ldr	r3, [r3]
 656 001a 002B     		cmp	r3, #0
 657 001c 00D1     		bne	.L27
 313:FreeRTOS/Source/croutine.c **** 		{
 314:FreeRTOS/Source/croutine.c **** 			/* No more co-routines to check. */
 315:FreeRTOS/Source/croutine.c **** 			return;
 658              		.loc 1 315 0
 659 001e 57E0     		b	.L25
 660              	.L27:
 316:FreeRTOS/Source/croutine.c **** 		}
 317:FreeRTOS/Source/croutine.c **** 		--uxTopCoRoutineReadyPriority;
 661              		.loc 1 317 0
 662 0020 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 663 0024 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 664 0028 1B68     		ldr	r3, [r3]
 665 002a 5A1E     		subs	r2, r3, #1
 666 002c 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 667 0030 C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 668 0034 1A60     		str	r2, [r3]
 669              	.L26:
 310:FreeRTOS/Source/croutine.c **** 	{
 670              		.loc 1 310 0 discriminator 1
 671 0036 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 672 003a C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 673 003e 1968     		ldr	r1, [r3]
 674 0040 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 675 0044 C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 676 0048 0B46     		mov	r3, r1
 677 004a 9B00     		lsls	r3, r3, #2
 678 004c 0B44     		add	r3, r3, r1
 679 004e 9B00     		lsls	r3, r3, #2
 680 0050 1344     		add	r3, r3, r2
 681 0052 1B68     		ldr	r3, [r3]
 682 0054 002B     		cmp	r3, #0
 683 0056 DBD0     		beq	.L29
 684              	.LBB4:
 318:FreeRTOS/Source/croutine.c **** 	}
 319:FreeRTOS/Source/croutine.c **** 
 320:FreeRTOS/Source/croutine.c **** 	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
 321:FreeRTOS/Source/croutine.c **** 	 of the	same priority get an equal share of the processor time. */
 322:FreeRTOS/Source/croutine.c **** 	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPrio
 685              		.loc 1 322 0
 686 0058 40F20003 		movw	r3, #:lower16:uxTopCoRoutineReadyPriority
 687 005c C0F20003 		movt	r3, #:upper16:uxTopCoRoutineReadyPriority
 688 0060 1A68     		ldr	r2, [r3]
 689 0062 1346     		mov	r3, r2
 690 0064 9B00     		lsls	r3, r3, #2
 691 0066 1344     		add	r3, r3, r2
 692 0068 9B00     		lsls	r3, r3, #2
 693 006a 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 694 006e C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 695 0072 1344     		add	r3, r3, r2
 696 0074 7B60     		str	r3, [r7, #4]
 697 0076 7B68     		ldr	r3, [r7, #4]
 698 0078 5B68     		ldr	r3, [r3, #4]
 699 007a 5A68     		ldr	r2, [r3, #4]
 700 007c 7B68     		ldr	r3, [r7, #4]
 701 007e 5A60     		str	r2, [r3, #4]
 702 0080 7B68     		ldr	r3, [r7, #4]
 703 0082 5A68     		ldr	r2, [r3, #4]
 704 0084 7B68     		ldr	r3, [r7, #4]
 705 0086 0833     		adds	r3, r3, #8
 706 0088 9A42     		cmp	r2, r3
 707 008a 04D1     		bne	.L30
 708              		.loc 1 322 0 is_stmt 0 discriminator 1
 709 008c 7B68     		ldr	r3, [r7, #4]
 710 008e 5B68     		ldr	r3, [r3, #4]
 711 0090 5A68     		ldr	r2, [r3, #4]
 712 0092 7B68     		ldr	r3, [r7, #4]
 713 0094 5A60     		str	r2, [r3, #4]
 714              	.L30:
 715              		.loc 1 322 0 discriminator 2
 716 0096 7B68     		ldr	r3, [r7, #4]
 717 0098 5B68     		ldr	r3, [r3, #4]
 718 009a DA68     		ldr	r2, [r3, #12]
 719 009c 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 720 00a0 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 721 00a4 1A60     		str	r2, [r3]
 722              	.LBE4:
 323:FreeRTOS/Source/croutine.c **** 
 324:FreeRTOS/Source/croutine.c **** 	/* Call the co-routine. */
 325:FreeRTOS/Source/croutine.c **** 	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
 723              		.loc 1 325 0 is_stmt 1 discriminator 2
 724 00a6 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 725 00aa C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 726 00ae 1B68     		ldr	r3, [r3]
 727 00b0 1A68     		ldr	r2, [r3]
 728 00b2 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 729 00b6 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 730 00ba 1968     		ldr	r1, [r3]
 731 00bc 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 732 00c0 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 733 00c4 1B68     		ldr	r3, [r3]
 734 00c6 1B6B     		ldr	r3, [r3, #48]
 735 00c8 0846     		mov	r0, r1
 736 00ca 1946     		mov	r1, r3
 737 00cc 9047     		blx	r2
 326:FreeRTOS/Source/croutine.c **** 
 327:FreeRTOS/Source/croutine.c **** 	return;
 738              		.loc 1 327 0 discriminator 2
 739 00ce 00BF     		nop
 740              	.L25:
 328:FreeRTOS/Source/croutine.c **** }
 741              		.loc 1 328 0
 742 00d0 0837     		adds	r7, r7, #8
 743 00d2 BD46     		mov	sp, r7
 744              		@ sp needed
 745 00d4 80BD     		pop	{r7, pc}
 746              		.cfi_endproc
 747              	.LFE114:
 749 00d6 00BF     		.section	.text.prvInitialiseCoRoutineLists,"ax",%progbits
 750              		.align	2
 751              		.thumb
 752              		.thumb_func
 754              	prvInitialiseCoRoutineLists:
 755              	.LFB115:
 329:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 330:FreeRTOS/Source/croutine.c **** 
 331:FreeRTOS/Source/croutine.c **** static void prvInitialiseCoRoutineLists( void )
 332:FreeRTOS/Source/croutine.c **** {
 756              		.loc 1 332 0
 757              		.cfi_startproc
 758              		@ args = 0, pretend = 0, frame = 8
 759              		@ frame_needed = 1, uses_anonymous_args = 0
 760 0000 80B5     		push	{r7, lr}
 761              	.LCFI15:
 762              		.cfi_def_cfa_offset 8
 763              		.cfi_offset 7, -8
 764              		.cfi_offset 14, -4
 765 0002 82B0     		sub	sp, sp, #8
 766              	.LCFI16:
 767              		.cfi_def_cfa_offset 16
 768 0004 00AF     		add	r7, sp, #0
 769              	.LCFI17:
 770              		.cfi_def_cfa_register 7
 333:FreeRTOS/Source/croutine.c **** unsigned portBASE_TYPE uxPriority;
 334:FreeRTOS/Source/croutine.c **** 
 335:FreeRTOS/Source/croutine.c **** 	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
 771              		.loc 1 335 0
 772 0006 0023     		movs	r3, #0
 773 0008 7B60     		str	r3, [r7, #4]
 774 000a 0FE0     		b	.L32
 775              	.L33:
 336:FreeRTOS/Source/croutine.c **** 	{
 337:FreeRTOS/Source/croutine.c **** 		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
 776              		.loc 1 337 0 discriminator 2
 777 000c 7A68     		ldr	r2, [r7, #4]
 778 000e 1346     		mov	r3, r2
 779 0010 9B00     		lsls	r3, r3, #2
 780 0012 1344     		add	r3, r3, r2
 781 0014 9B00     		lsls	r3, r3, #2
 782 0016 40F20002 		movw	r2, #:lower16:pxReadyCoRoutineLists
 783 001a C0F20002 		movt	r2, #:upper16:pxReadyCoRoutineLists
 784 001e 1344     		add	r3, r3, r2
 785 0020 1846     		mov	r0, r3
 786 0022 FFF7FEFF 		bl	vListInitialise
 335:FreeRTOS/Source/croutine.c **** 	{
 787              		.loc 1 335 0 discriminator 2
 788 0026 7B68     		ldr	r3, [r7, #4]
 789 0028 0133     		adds	r3, r3, #1
 790 002a 7B60     		str	r3, [r7, #4]
 791              	.L32:
 335:FreeRTOS/Source/croutine.c **** 	{
 792              		.loc 1 335 0 is_stmt 0 discriminator 1
 793 002c 7B68     		ldr	r3, [r7, #4]
 794 002e 012B     		cmp	r3, #1
 795 0030 ECD9     		bls	.L33
 338:FreeRTOS/Source/croutine.c **** 	}
 339:FreeRTOS/Source/croutine.c **** 
 340:FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
 796              		.loc 1 340 0 is_stmt 1
 797 0032 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList1
 798 0036 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList1
 799 003a FFF7FEFF 		bl	vListInitialise
 341:FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
 800              		.loc 1 341 0
 801 003e 40F20000 		movw	r0, #:lower16:xDelayedCoRoutineList2
 802 0042 C0F20000 		movt	r0, #:upper16:xDelayedCoRoutineList2
 803 0046 FFF7FEFF 		bl	vListInitialise
 342:FreeRTOS/Source/croutine.c **** 	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
 804              		.loc 1 342 0
 805 004a 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 806 004e C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 807 0052 FFF7FEFF 		bl	vListInitialise
 343:FreeRTOS/Source/croutine.c **** 
 344:FreeRTOS/Source/croutine.c **** 	/* Start with pxDelayedCoRoutineList using list1 and the
 345:FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList using list2. */
 346:FreeRTOS/Source/croutine.c **** 	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
 808              		.loc 1 346 0
 809 0056 40F20003 		movw	r3, #:lower16:pxDelayedCoRoutineList
 810 005a C0F20003 		movt	r3, #:upper16:pxDelayedCoRoutineList
 811 005e 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList1
 812 0062 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList1
 813 0066 1A60     		str	r2, [r3]
 347:FreeRTOS/Source/croutine.c **** 	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
 814              		.loc 1 347 0
 815 0068 40F20003 		movw	r3, #:lower16:pxOverflowDelayedCoRoutineList
 816 006c C0F20003 		movt	r3, #:upper16:pxOverflowDelayedCoRoutineList
 817 0070 40F20002 		movw	r2, #:lower16:xDelayedCoRoutineList2
 818 0074 C0F20002 		movt	r2, #:upper16:xDelayedCoRoutineList2
 819 0078 1A60     		str	r2, [r3]
 348:FreeRTOS/Source/croutine.c **** }
 820              		.loc 1 348 0
 821 007a 0837     		adds	r7, r7, #8
 822 007c BD46     		mov	sp, r7
 823              		@ sp needed
 824 007e 80BD     		pop	{r7, pc}
 825              		.cfi_endproc
 826              	.LFE115:
 828              		.section	.text.xCoRoutineRemoveFromEventList,"ax",%progbits
 829              		.align	2
 830              		.global	xCoRoutineRemoveFromEventList
 831              		.thumb
 832              		.thumb_func
 834              	xCoRoutineRemoveFromEventList:
 835              	.LFB116:
 349:FreeRTOS/Source/croutine.c **** /*-----------------------------------------------------------*/
 350:FreeRTOS/Source/croutine.c **** 
 351:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
 352:FreeRTOS/Source/croutine.c **** {
 836              		.loc 1 352 0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 16
 839              		@ frame_needed = 1, uses_anonymous_args = 0
 840 0000 80B5     		push	{r7, lr}
 841              	.LCFI18:
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 7, -8
 844              		.cfi_offset 14, -4
 845 0002 84B0     		sub	sp, sp, #16
 846              	.LCFI19:
 847              		.cfi_def_cfa_offset 24
 848 0004 00AF     		add	r7, sp, #0
 849              	.LCFI20:
 850              		.cfi_def_cfa_register 7
 851 0006 7860     		str	r0, [r7, #4]
 353:FreeRTOS/Source/croutine.c **** corCRCB *pxUnblockedCRCB;
 354:FreeRTOS/Source/croutine.c **** signed portBASE_TYPE xReturn;
 355:FreeRTOS/Source/croutine.c **** 
 356:FreeRTOS/Source/croutine.c **** 	/* This function is called from within an interrupt.  It can only access
 357:FreeRTOS/Source/croutine.c **** 	event lists and the pending ready list.  This function assumes that a
 358:FreeRTOS/Source/croutine.c **** 	check has already been made to ensure pxEventList is not empty. */
 359:FreeRTOS/Source/croutine.c **** 	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 852              		.loc 1 359 0
 853 0008 7B68     		ldr	r3, [r7, #4]
 854 000a DB68     		ldr	r3, [r3, #12]
 855 000c DB68     		ldr	r3, [r3, #12]
 856 000e BB60     		str	r3, [r7, #8]
 360:FreeRTOS/Source/croutine.c **** 	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
 857              		.loc 1 360 0
 858 0010 BB68     		ldr	r3, [r7, #8]
 859 0012 1833     		adds	r3, r3, #24
 860 0014 1846     		mov	r0, r3
 861 0016 FFF7FEFF 		bl	vListRemove
 361:FreeRTOS/Source/croutine.c **** 	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) 
 862              		.loc 1 361 0
 863 001a BB68     		ldr	r3, [r7, #8]
 864 001c 1833     		adds	r3, r3, #24
 865 001e 40F20000 		movw	r0, #:lower16:xPendingReadyCoRoutineList
 866 0022 C0F20000 		movt	r0, #:upper16:xPendingReadyCoRoutineList
 867 0026 1946     		mov	r1, r3
 868 0028 FFF7FEFF 		bl	vListInsertEnd
 362:FreeRTOS/Source/croutine.c **** 
 363:FreeRTOS/Source/croutine.c **** 	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
 869              		.loc 1 363 0
 870 002c BB68     		ldr	r3, [r7, #8]
 871 002e DA6A     		ldr	r2, [r3, #44]
 872 0030 40F20003 		movw	r3, #:lower16:pxCurrentCoRoutine
 873 0034 C0F20003 		movt	r3, #:upper16:pxCurrentCoRoutine
 874 0038 1B68     		ldr	r3, [r3]
 875 003a DB6A     		ldr	r3, [r3, #44]
 876 003c 9A42     		cmp	r2, r3
 877 003e 02D3     		bcc	.L35
 364:FreeRTOS/Source/croutine.c **** 	{
 365:FreeRTOS/Source/croutine.c **** 		xReturn = pdTRUE;
 878              		.loc 1 365 0
 879 0040 0123     		movs	r3, #1
 880 0042 FB60     		str	r3, [r7, #12]
 881 0044 01E0     		b	.L36
 882              	.L35:
 366:FreeRTOS/Source/croutine.c **** 	}
 367:FreeRTOS/Source/croutine.c **** 	else
 368:FreeRTOS/Source/croutine.c **** 	{
 369:FreeRTOS/Source/croutine.c **** 		xReturn = pdFALSE;
 883              		.loc 1 369 0
 884 0046 0023     		movs	r3, #0
 885 0048 FB60     		str	r3, [r7, #12]
 886              	.L36:
 370:FreeRTOS/Source/croutine.c **** 	}
 371:FreeRTOS/Source/croutine.c **** 
 372:FreeRTOS/Source/croutine.c **** 	return xReturn;
 887              		.loc 1 372 0
 888 004a FB68     		ldr	r3, [r7, #12]
 373:FreeRTOS/Source/croutine.c **** }
 889              		.loc 1 373 0
 890 004c 1846     		mov	r0, r3
 891 004e 1037     		adds	r7, r7, #16
 892 0050 BD46     		mov	sp, r7
 893              		@ sp needed
 894 0052 80BD     		pop	{r7, pc}
 895              		.cfi_endproc
 896              	.LFE116:
 898              		.text
 899              	.Letext0:
 900              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 901              		.file 3 "/usr/include/newlib/stdint.h"
 902              		.file 4 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 903              		.file 5 "FreeRTOS/Source/include/list.h"
 904              		.file 6 "FreeRTOS/Source/include/croutine.h"
 905              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 croutine.c
     /tmp/ccZs0xVz.s:20     .bss.pxReadyCoRoutineLists:0000000000000000 $d
     /tmp/ccZs0xVz.s:23     .bss.pxReadyCoRoutineLists:0000000000000000 pxReadyCoRoutineLists
     /tmp/ccZs0xVz.s:26     .bss.xDelayedCoRoutineList1:0000000000000000 $d
     /tmp/ccZs0xVz.s:29     .bss.xDelayedCoRoutineList1:0000000000000000 xDelayedCoRoutineList1
     /tmp/ccZs0xVz.s:32     .bss.xDelayedCoRoutineList2:0000000000000000 $d
     /tmp/ccZs0xVz.s:35     .bss.xDelayedCoRoutineList2:0000000000000000 xDelayedCoRoutineList2
     /tmp/ccZs0xVz.s:38     .bss.pxDelayedCoRoutineList:0000000000000000 $d
     /tmp/ccZs0xVz.s:41     .bss.pxDelayedCoRoutineList:0000000000000000 pxDelayedCoRoutineList
     /tmp/ccZs0xVz.s:44     .bss.pxOverflowDelayedCoRoutineList:0000000000000000 $d
     /tmp/ccZs0xVz.s:47     .bss.pxOverflowDelayedCoRoutineList:0000000000000000 pxOverflowDelayedCoRoutineList
     /tmp/ccZs0xVz.s:50     .bss.xPendingReadyCoRoutineList:0000000000000000 $d
     /tmp/ccZs0xVz.s:53     .bss.xPendingReadyCoRoutineList:0000000000000000 xPendingReadyCoRoutineList
     /tmp/ccZs0xVz.s:60     .bss.pxCurrentCoRoutine:0000000000000000 pxCurrentCoRoutine
     /tmp/ccZs0xVz.s:57     .bss.pxCurrentCoRoutine:0000000000000000 $d
     /tmp/ccZs0xVz.s:63     .bss.uxTopCoRoutineReadyPriority:0000000000000000 $d
     /tmp/ccZs0xVz.s:66     .bss.uxTopCoRoutineReadyPriority:0000000000000000 uxTopCoRoutineReadyPriority
     /tmp/ccZs0xVz.s:69     .bss.xCoRoutineTickCount:0000000000000000 $d
     /tmp/ccZs0xVz.s:72     .bss.xCoRoutineTickCount:0000000000000000 xCoRoutineTickCount
     /tmp/ccZs0xVz.s:75     .bss.xLastTickCount:0000000000000000 $d
     /tmp/ccZs0xVz.s:78     .bss.xLastTickCount:0000000000000000 xLastTickCount
     /tmp/ccZs0xVz.s:81     .bss.xPassedTicks:0000000000000000 $d
     /tmp/ccZs0xVz.s:84     .bss.xPassedTicks:0000000000000000 xPassedTicks
     /tmp/ccZs0xVz.s:87     .text.xCoRoutineCreate:0000000000000000 $t
     /tmp/ccZs0xVz.s:92     .text.xCoRoutineCreate:0000000000000000 xCoRoutineCreate
     /tmp/ccZs0xVz.s:754    .text.prvInitialiseCoRoutineLists:0000000000000000 prvInitialiseCoRoutineLists
     /tmp/ccZs0xVz.s:234    .text.vCoRoutineAddToDelayedList:0000000000000000 $t
     /tmp/ccZs0xVz.s:239    .text.vCoRoutineAddToDelayedList:0000000000000000 vCoRoutineAddToDelayedList
     /tmp/ccZs0xVz.s:332    .text.prvCheckPendingReadyList:0000000000000000 $t
     /tmp/ccZs0xVz.s:336    .text.prvCheckPendingReadyList:0000000000000000 prvCheckPendingReadyList
     /tmp/ccZs0xVz.s:434    .text.prvCheckDelayedList:0000000000000000 $t
     /tmp/ccZs0xVz.s:438    .text.prvCheckDelayedList:0000000000000000 prvCheckDelayedList
     /tmp/ccZs0xVz.s:623    .text.vCoRoutineSchedule:0000000000000000 $t
     /tmp/ccZs0xVz.s:628    .text.vCoRoutineSchedule:0000000000000000 vCoRoutineSchedule
     /tmp/ccZs0xVz.s:750    .text.prvInitialiseCoRoutineLists:0000000000000000 $t
     /tmp/ccZs0xVz.s:829    .text.xCoRoutineRemoveFromEventList:0000000000000000 $t
     /tmp/ccZs0xVz.s:834    .text.xCoRoutineRemoveFromEventList:0000000000000000 xCoRoutineRemoveFromEventList
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
malloc
vListInitialiseItem
vListInsertEnd
vListRemove
vListInsert
xTaskGetTickCount
vListInitialise
