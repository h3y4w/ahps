   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	RTC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	RTC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  28              		.loc 1 368 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 24
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  43              		.loc 1 369 0
  44 0006 0023     		movs	r3, #0
  45 0008 7B60     		str	r3, [r7, #4]
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  46              		.loc 1 370 0
  47 000a 0023     		movs	r3, #0
  48 000c BB60     		str	r3, [r7, #8]
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  49              		.loc 1 371 0
  50 000e 0023     		movs	r3, #0
  51 0010 FB73     		strb	r3, [r7, #15]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  52              		.loc 1 374 0
  53 0012 4FF42053 		mov	r3, #10240
  54 0016 C4F20003 		movt	r3, 16384
  55 001a CA22     		movs	r2, #202
  56 001c 5A62     		str	r2, [r3, #36]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  57              		.loc 1 375 0
  58 001e 4FF42053 		mov	r3, #10240
  59 0022 C4F20003 		movt	r3, 16384
  60 0026 5322     		movs	r2, #83
  61 0028 5A62     		str	r2, [r3, #36]
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  62              		.loc 1 378 0
  63 002a FFF7FEFF 		bl	RTC_EnterInitMode
  64 002e 0346     		mov	r3, r0
  65 0030 002B     		cmp	r3, #0
  66 0032 02D1     		bne	.L2
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  67              		.loc 1 380 0
  68 0034 0023     		movs	r3, #0
  69 0036 FB73     		strb	r3, [r7, #15]
  70 0038 78E0     		b	.L3
  71              	.L2:
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  72              		.loc 1 385 0
  73 003a 4FF42053 		mov	r3, #10240
  74 003e C4F20003 		movt	r3, 16384
  75 0042 0022     		movs	r2, #0
  76 0044 1A60     		str	r2, [r3]
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  77              		.loc 1 386 0
  78 0046 4FF42053 		mov	r3, #10240
  79 004a C4F20003 		movt	r3, 16384
  80 004e 42F20112 		movw	r2, #8449
  81 0052 5A60     		str	r2, [r3, #4]
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  82              		.loc 1 388 0
  83 0054 4FF42053 		mov	r3, #10240
  84 0058 C4F20003 		movt	r3, 16384
  85 005c 4FF42052 		mov	r2, #10240
  86 0060 C4F20002 		movt	r2, 16384
  87 0064 9268     		ldr	r2, [r2, #8]
  88 0066 02F00702 		and	r2, r2, #7
  89 006a 9A60     		str	r2, [r3, #8]
  90              	.L5:
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  91              		.loc 1 393 0 discriminator 1
  92 006c 4FF42053 		mov	r3, #10240
  93 0070 C4F20003 		movt	r3, 16384
  94 0074 DB68     		ldr	r3, [r3, #12]
  95 0076 03F00403 		and	r3, r3, #4
  96 007a BB60     		str	r3, [r7, #8]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  97              		.loc 1 394 0 discriminator 1
  98 007c 7B68     		ldr	r3, [r7, #4]
  99 007e 0133     		adds	r3, r3, #1
 100 0080 7B60     		str	r3, [r7, #4]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 101              		.loc 1 395 0 discriminator 1
 102 0082 7B68     		ldr	r3, [r7, #4]
 103 0084 B3F5803F 		cmp	r3, #65536
 104 0088 02D0     		beq	.L4
 105 008a BB68     		ldr	r3, [r7, #8]
 106 008c 002B     		cmp	r3, #0
 107 008e EDD0     		beq	.L5
 108              	.L4:
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 109              		.loc 1 397 0
 110 0090 4FF42053 		mov	r3, #10240
 111 0094 C4F20003 		movt	r3, 16384
 112 0098 DB68     		ldr	r3, [r3, #12]
 113 009a 03F00403 		and	r3, r3, #4
 114 009e 002B     		cmp	r3, #0
 115 00a0 02D1     		bne	.L6
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 116              		.loc 1 399 0
 117 00a2 0023     		movs	r3, #0
 118 00a4 FB73     		strb	r3, [r7, #15]
 119 00a6 41E0     		b	.L3
 120              	.L6:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 121              		.loc 1 404 0
 122 00a8 4FF42053 		mov	r3, #10240
 123 00ac C4F20003 		movt	r3, 16384
 124 00b0 9B68     		ldr	r3, [r3, #8]
 125 00b2 4FF42053 		mov	r3, #10240
 126 00b6 C4F20003 		movt	r3, 16384
 127 00ba 0022     		movs	r2, #0
 128 00bc 9A60     		str	r2, [r3, #8]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 129              		.loc 1 405 0
 130 00be 4FF42053 		mov	r3, #10240
 131 00c2 C4F20003 		movt	r3, 16384
 132 00c6 4FF6FF72 		movw	r2, #65535
 133 00ca 5A61     		str	r2, [r3, #20]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 134              		.loc 1 406 0
 135 00cc 4FF42053 		mov	r3, #10240
 136 00d0 C4F20003 		movt	r3, 16384
 137 00d4 FF22     		movs	r2, #255
 138 00d6 C0F27F02 		movt	r2, 127
 139 00da 1A61     		str	r2, [r3, #16]
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 140              		.loc 1 407 0
 141 00dc 4FF42053 		mov	r3, #10240
 142 00e0 C4F20003 		movt	r3, 16384
 143 00e4 0022     		movs	r2, #0
 144 00e6 9A61     		str	r2, [r3, #24]
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 145              		.loc 1 408 0
 146 00e8 4FF42053 		mov	r3, #10240
 147 00ec C4F20003 		movt	r3, 16384
 148 00f0 0022     		movs	r2, #0
 149 00f2 DA61     		str	r2, [r3, #28]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 150              		.loc 1 409 0
 151 00f4 4FF42053 		mov	r3, #10240
 152 00f8 C4F20003 		movt	r3, 16384
 153 00fc 0022     		movs	r2, #0
 154 00fe 1A62     		str	r2, [r3, #32]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 155              		.loc 1 412 0
 156 0100 4FF42053 		mov	r3, #10240
 157 0104 C4F20003 		movt	r3, 16384
 158 0108 0022     		movs	r2, #0
 159 010a DA60     		str	r2, [r3, #12]
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 160              		.loc 1 415 0
 161 010c 4FF42053 		mov	r3, #10240
 162 0110 C4F20003 		movt	r3, 16384
 163 0114 0022     		movs	r2, #0
 164 0116 1A64     		str	r2, [r3, #64]
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 165              		.loc 1 417 0
 166 0118 FFF7FEFF 		bl	RTC_WaitForSynchro
 167 011c 0346     		mov	r3, r0
 168 011e 002B     		cmp	r3, #0
 169 0120 02D1     		bne	.L7
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 170              		.loc 1 419 0
 171 0122 0023     		movs	r3, #0
 172 0124 FB73     		strb	r3, [r7, #15]
 173 0126 01E0     		b	.L3
 174              	.L7:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 175              		.loc 1 423 0
 176 0128 0123     		movs	r3, #1
 177 012a FB73     		strb	r3, [r7, #15]
 178              	.L3:
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 179              		.loc 1 429 0
 180 012c 4FF42053 		mov	r3, #10240
 181 0130 C4F20003 		movt	r3, 16384
 182 0134 FF22     		movs	r2, #255
 183 0136 5A62     		str	r2, [r3, #36]
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 184              		.loc 1 431 0
 185 0138 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 186              		.loc 1 432 0
 187 013a 1846     		mov	r0, r3
 188 013c 1037     		adds	r7, r7, #16
 189 013e BD46     		mov	sp, r7
 190              		@ sp needed
 191 0140 80BD     		pop	{r7, pc}
 192              		.cfi_endproc
 193              	.LFE110:
 195 0142 00BF     		.section	.text.RTC_Init,"ax",%progbits
 196              		.align	2
 197              		.global	RTC_Init
 198              		.thumb
 199              		.thumb_func
 201              	RTC_Init:
 202              	.LFB111:
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 203              		.loc 1 446 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 16
 206              		@ frame_needed = 1, uses_anonymous_args = 0
 207 0000 80B5     		push	{r7, lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 7, -8
 211              		.cfi_offset 14, -4
 212 0002 84B0     		sub	sp, sp, #16
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 24
 215 0004 00AF     		add	r7, sp, #0
 216              	.LCFI5:
 217              		.cfi_def_cfa_register 7
 218 0006 7860     		str	r0, [r7, #4]
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 219              		.loc 1 447 0
 220 0008 0023     		movs	r3, #0
 221 000a FB73     		strb	r3, [r7, #15]
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 222              		.loc 1 455 0
 223 000c 4FF42053 		mov	r3, #10240
 224 0010 C4F20003 		movt	r3, 16384
 225 0014 CA22     		movs	r2, #202
 226 0016 5A62     		str	r2, [r3, #36]
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 227              		.loc 1 456 0
 228 0018 4FF42053 		mov	r3, #10240
 229 001c C4F20003 		movt	r3, 16384
 230 0020 5322     		movs	r2, #83
 231 0022 5A62     		str	r2, [r3, #36]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 232              		.loc 1 459 0
 233 0024 FFF7FEFF 		bl	RTC_EnterInitMode
 234 0028 0346     		mov	r3, r0
 235 002a 002B     		cmp	r3, #0
 236 002c 02D1     		bne	.L10
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 237              		.loc 1 461 0
 238 002e 0023     		movs	r3, #0
 239 0030 FB73     		strb	r3, [r7, #15]
 240 0032 31E0     		b	.L11
 241              	.L10:
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 242              		.loc 1 466 0
 243 0034 4FF42053 		mov	r3, #10240
 244 0038 C4F20003 		movt	r3, 16384
 245 003c 4FF42052 		mov	r2, #10240
 246 0040 C4F20002 		movt	r2, 16384
 247 0044 9268     		ldr	r2, [r2, #8]
 248 0046 22F04002 		bic	r2, r2, #64
 249 004a 9A60     		str	r2, [r3, #8]
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 250              		.loc 1 468 0
 251 004c 4FF42053 		mov	r3, #10240
 252 0050 C4F20003 		movt	r3, 16384
 253 0054 4FF42052 		mov	r2, #10240
 254 0058 C4F20002 		movt	r2, 16384
 255 005c 9168     		ldr	r1, [r2, #8]
 256 005e 7A68     		ldr	r2, [r7, #4]
 257 0060 1268     		ldr	r2, [r2]
 258 0062 0A43     		orrs	r2, r2, r1
 259 0064 9A60     		str	r2, [r3, #8]
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 260              		.loc 1 471 0
 261 0066 4FF42053 		mov	r3, #10240
 262 006a C4F20003 		movt	r3, 16384
 263 006e 7A68     		ldr	r2, [r7, #4]
 264 0070 9268     		ldr	r2, [r2, #8]
 265 0072 1A61     		str	r2, [r3, #16]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 266              		.loc 1 472 0
 267 0074 4FF42053 		mov	r3, #10240
 268 0078 C4F20003 		movt	r3, 16384
 269 007c 4FF42052 		mov	r2, #10240
 270 0080 C4F20002 		movt	r2, 16384
 271 0084 1169     		ldr	r1, [r2, #16]
 272 0086 7A68     		ldr	r2, [r7, #4]
 273 0088 5268     		ldr	r2, [r2, #4]
 274 008a 1204     		lsls	r2, r2, #16
 275 008c 0A43     		orrs	r2, r2, r1
 276 008e 1A61     		str	r2, [r3, #16]
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 277              		.loc 1 475 0
 278 0090 FFF7FEFF 		bl	RTC_ExitInitMode
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 279              		.loc 1 477 0
 280 0094 0123     		movs	r3, #1
 281 0096 FB73     		strb	r3, [r7, #15]
 282              	.L11:
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 283              		.loc 1 480 0
 284 0098 4FF42053 		mov	r3, #10240
 285 009c C4F20003 		movt	r3, 16384
 286 00a0 FF22     		movs	r2, #255
 287 00a2 5A62     		str	r2, [r3, #36]
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 288              		.loc 1 482 0
 289 00a4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 290              		.loc 1 483 0
 291 00a6 1846     		mov	r0, r3
 292 00a8 1037     		adds	r7, r7, #16
 293 00aa BD46     		mov	sp, r7
 294              		@ sp needed
 295 00ac 80BD     		pop	{r7, pc}
 296              		.cfi_endproc
 297              	.LFE111:
 299 00ae 00BF     		.section	.text.RTC_StructInit,"ax",%progbits
 300              		.align	2
 301              		.global	RTC_StructInit
 302              		.thumb
 303              		.thumb_func
 305              	RTC_StructInit:
 306              	.LFB112:
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 307              		.loc 1 492 0
 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 8
 310              		@ frame_needed = 1, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 312 0000 80B4     		push	{r7}
 313              	.LCFI6:
 314              		.cfi_def_cfa_offset 4
 315              		.cfi_offset 7, -4
 316 0002 83B0     		sub	sp, sp, #12
 317              	.LCFI7:
 318              		.cfi_def_cfa_offset 16
 319 0004 00AF     		add	r7, sp, #0
 320              	.LCFI8:
 321              		.cfi_def_cfa_register 7
 322 0006 7860     		str	r0, [r7, #4]
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 323              		.loc 1 494 0
 324 0008 7B68     		ldr	r3, [r7, #4]
 325 000a 0022     		movs	r2, #0
 326 000c 1A60     		str	r2, [r3]
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 327              		.loc 1 497 0
 328 000e 7B68     		ldr	r3, [r7, #4]
 329 0010 7F22     		movs	r2, #127
 330 0012 5A60     		str	r2, [r3, #4]
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 331              		.loc 1 500 0
 332 0014 7B68     		ldr	r3, [r7, #4]
 333 0016 FF22     		movs	r2, #255
 334 0018 9A60     		str	r2, [r3, #8]
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 335              		.loc 1 501 0
 336 001a 0C37     		adds	r7, r7, #12
 337 001c BD46     		mov	sp, r7
 338              		@ sp needed
 339 001e 5DF8047B 		ldr	r7, [sp], #4
 340 0022 7047     		bx	lr
 341              		.cfi_endproc
 342              	.LFE112:
 344              		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 345              		.align	2
 346              		.global	RTC_WriteProtectionCmd
 347              		.thumb
 348              		.thumb_func
 350              	RTC_WriteProtectionCmd:
 351              	.LFB113:
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 352              		.loc 1 514 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 8
 355              		@ frame_needed = 1, uses_anonymous_args = 0
 356              		@ link register save eliminated.
 357 0000 80B4     		push	{r7}
 358              	.LCFI9:
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 0002 83B0     		sub	sp, sp, #12
 362              	.LCFI10:
 363              		.cfi_def_cfa_offset 16
 364 0004 00AF     		add	r7, sp, #0
 365              	.LCFI11:
 366              		.cfi_def_cfa_register 7
 367 0006 0346     		mov	r3, r0
 368 0008 FB71     		strb	r3, [r7, #7]
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 369              		.loc 1 518 0
 370 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 371 000c 002B     		cmp	r3, #0
 372 000e 06D0     		beq	.L15
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 373              		.loc 1 521 0
 374 0010 4FF42053 		mov	r3, #10240
 375 0014 C4F20003 		movt	r3, 16384
 376 0018 FF22     		movs	r2, #255
 377 001a 5A62     		str	r2, [r3, #36]
 378 001c 0BE0     		b	.L14
 379              	.L15:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 380              		.loc 1 526 0
 381 001e 4FF42053 		mov	r3, #10240
 382 0022 C4F20003 		movt	r3, 16384
 383 0026 CA22     		movs	r2, #202
 384 0028 5A62     		str	r2, [r3, #36]
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 385              		.loc 1 527 0
 386 002a 4FF42053 		mov	r3, #10240
 387 002e C4F20003 		movt	r3, 16384
 388 0032 5322     		movs	r2, #83
 389 0034 5A62     		str	r2, [r3, #36]
 390              	.L14:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 391              		.loc 1 529 0
 392 0036 0C37     		adds	r7, r7, #12
 393 0038 BD46     		mov	sp, r7
 394              		@ sp needed
 395 003a 5DF8047B 		ldr	r7, [sp], #4
 396 003e 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE113:
 400              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 401              		.align	2
 402              		.global	RTC_EnterInitMode
 403              		.thumb
 404              		.thumb_func
 406              	RTC_EnterInitMode:
 407              	.LFB114:
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 408              		.loc 1 541 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 16
 411              		@ frame_needed = 1, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413 0000 80B4     		push	{r7}
 414              	.LCFI12:
 415              		.cfi_def_cfa_offset 4
 416              		.cfi_offset 7, -4
 417 0002 85B0     		sub	sp, sp, #20
 418              	.LCFI13:
 419              		.cfi_def_cfa_offset 24
 420 0004 00AF     		add	r7, sp, #0
 421              	.LCFI14:
 422              		.cfi_def_cfa_register 7
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 423              		.loc 1 542 0
 424 0006 0023     		movs	r3, #0
 425 0008 7B60     		str	r3, [r7, #4]
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 426              		.loc 1 543 0
 427 000a 0023     		movs	r3, #0
 428 000c FB73     		strb	r3, [r7, #15]
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 429              		.loc 1 544 0
 430 000e 0023     		movs	r3, #0
 431 0010 BB60     		str	r3, [r7, #8]
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 432              		.loc 1 547 0
 433 0012 4FF42053 		mov	r3, #10240
 434 0016 C4F20003 		movt	r3, 16384
 435 001a DB68     		ldr	r3, [r3, #12]
 436 001c 03F04003 		and	r3, r3, #64
 437 0020 002B     		cmp	r3, #0
 438 0022 27D1     		bne	.L18
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 439              		.loc 1 550 0
 440 0024 4FF42053 		mov	r3, #10240
 441 0028 C4F20003 		movt	r3, 16384
 442 002c 4FF0FF32 		mov	r2, #-1
 443 0030 DA60     		str	r2, [r3, #12]
 444              	.L20:
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 445              		.loc 1 555 0 discriminator 1
 446 0032 4FF42053 		mov	r3, #10240
 447 0036 C4F20003 		movt	r3, 16384
 448 003a DB68     		ldr	r3, [r3, #12]
 449 003c 03F04003 		and	r3, r3, #64
 450 0040 BB60     		str	r3, [r7, #8]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 451              		.loc 1 556 0 discriminator 1
 452 0042 7B68     		ldr	r3, [r7, #4]
 453 0044 0133     		adds	r3, r3, #1
 454 0046 7B60     		str	r3, [r7, #4]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 455              		.loc 1 557 0 discriminator 1
 456 0048 7B68     		ldr	r3, [r7, #4]
 457 004a B3F5803F 		cmp	r3, #65536
 458 004e 02D0     		beq	.L19
 459 0050 BB68     		ldr	r3, [r7, #8]
 460 0052 002B     		cmp	r3, #0
 461 0054 EDD0     		beq	.L20
 462              	.L19:
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 463              		.loc 1 559 0
 464 0056 4FF42053 		mov	r3, #10240
 465 005a C4F20003 		movt	r3, 16384
 466 005e DB68     		ldr	r3, [r3, #12]
 467 0060 03F04003 		and	r3, r3, #64
 468 0064 002B     		cmp	r3, #0
 469 0066 02D0     		beq	.L21
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 470              		.loc 1 561 0
 471 0068 0123     		movs	r3, #1
 472 006a FB73     		strb	r3, [r7, #15]
 473 006c 04E0     		b	.L23
 474              	.L21:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 475              		.loc 1 565 0
 476 006e 0023     		movs	r3, #0
 477 0070 FB73     		strb	r3, [r7, #15]
 478 0072 01E0     		b	.L23
 479              	.L18:
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 480              		.loc 1 570 0
 481 0074 0123     		movs	r3, #1
 482 0076 FB73     		strb	r3, [r7, #15]
 483              	.L23:
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 484              		.loc 1 573 0
 485 0078 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 486              		.loc 1 574 0
 487 007a 1846     		mov	r0, r3
 488 007c 1437     		adds	r7, r7, #20
 489 007e BD46     		mov	sp, r7
 490              		@ sp needed
 491 0080 5DF8047B 		ldr	r7, [sp], #4
 492 0084 7047     		bx	lr
 493              		.cfi_endproc
 494              	.LFE114:
 496 0086 00BF     		.section	.text.RTC_ExitInitMode,"ax",%progbits
 497              		.align	2
 498              		.global	RTC_ExitInitMode
 499              		.thumb
 500              		.thumb_func
 502              	RTC_ExitInitMode:
 503              	.LFB115:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 504              		.loc 1 586 0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 1, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509 0000 80B4     		push	{r7}
 510              	.LCFI15:
 511              		.cfi_def_cfa_offset 4
 512              		.cfi_offset 7, -4
 513 0002 00AF     		add	r7, sp, #0
 514              	.LCFI16:
 515              		.cfi_def_cfa_register 7
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 516              		.loc 1 588 0
 517 0004 4FF42053 		mov	r3, #10240
 518 0008 C4F20003 		movt	r3, 16384
 519 000c 4FF42052 		mov	r2, #10240
 520 0010 C4F20002 		movt	r2, 16384
 521 0014 D268     		ldr	r2, [r2, #12]
 522 0016 22F08002 		bic	r2, r2, #128
 523 001a DA60     		str	r2, [r3, #12]
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 524              		.loc 1 589 0
 525 001c BD46     		mov	sp, r7
 526              		@ sp needed
 527 001e 5DF8047B 		ldr	r7, [sp], #4
 528 0022 7047     		bx	lr
 529              		.cfi_endproc
 530              	.LFE115:
 532              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 533              		.align	2
 534              		.global	RTC_WaitForSynchro
 535              		.thumb
 536              		.thumb_func
 538              	RTC_WaitForSynchro:
 539              	.LFB116:
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 540              		.loc 1 608 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 16
 543              		@ frame_needed = 1, uses_anonymous_args = 0
 544              		@ link register save eliminated.
 545 0000 80B4     		push	{r7}
 546              	.LCFI17:
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 7, -4
 549 0002 85B0     		sub	sp, sp, #20
 550              	.LCFI18:
 551              		.cfi_def_cfa_offset 24
 552 0004 00AF     		add	r7, sp, #0
 553              	.LCFI19:
 554              		.cfi_def_cfa_register 7
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 555              		.loc 1 609 0
 556 0006 0023     		movs	r3, #0
 557 0008 7B60     		str	r3, [r7, #4]
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 558              		.loc 1 610 0
 559 000a 0023     		movs	r3, #0
 560 000c FB73     		strb	r3, [r7, #15]
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 561              		.loc 1 611 0
 562 000e 0023     		movs	r3, #0
 563 0010 BB60     		str	r3, [r7, #8]
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 564              		.loc 1 614 0
 565 0012 4FF42053 		mov	r3, #10240
 566 0016 C4F20003 		movt	r3, 16384
 567 001a CA22     		movs	r2, #202
 568 001c 5A62     		str	r2, [r3, #36]
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 569              		.loc 1 615 0
 570 001e 4FF42053 		mov	r3, #10240
 571 0022 C4F20003 		movt	r3, 16384
 572 0026 5322     		movs	r2, #83
 573 0028 5A62     		str	r2, [r3, #36]
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 574              		.loc 1 618 0
 575 002a 4FF42053 		mov	r3, #10240
 576 002e C4F20003 		movt	r3, 16384
 577 0032 4FF42052 		mov	r2, #10240
 578 0036 C4F20002 		movt	r2, 16384
 579 003a D268     		ldr	r2, [r2, #12]
 580 003c 22F0A002 		bic	r2, r2, #160
 581 0040 DA60     		str	r2, [r3, #12]
 582              	.L28:
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 583              		.loc 1 623 0 discriminator 1
 584 0042 4FF42053 		mov	r3, #10240
 585 0046 C4F20003 		movt	r3, 16384
 586 004a DB68     		ldr	r3, [r3, #12]
 587 004c 03F02003 		and	r3, r3, #32
 588 0050 BB60     		str	r3, [r7, #8]
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 589              		.loc 1 624 0 discriminator 1
 590 0052 7B68     		ldr	r3, [r7, #4]
 591 0054 0133     		adds	r3, r3, #1
 592 0056 7B60     		str	r3, [r7, #4]
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 593              		.loc 1 625 0 discriminator 1
 594 0058 7B68     		ldr	r3, [r7, #4]
 595 005a B3F5003F 		cmp	r3, #131072
 596 005e 02D0     		beq	.L27
 597 0060 BB68     		ldr	r3, [r7, #8]
 598 0062 002B     		cmp	r3, #0
 599 0064 EDD0     		beq	.L28
 600              	.L27:
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 601              		.loc 1 627 0
 602 0066 4FF42053 		mov	r3, #10240
 603 006a C4F20003 		movt	r3, 16384
 604 006e DB68     		ldr	r3, [r3, #12]
 605 0070 03F02003 		and	r3, r3, #32
 606 0074 002B     		cmp	r3, #0
 607 0076 02D0     		beq	.L29
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 608              		.loc 1 629 0
 609 0078 0123     		movs	r3, #1
 610 007a FB73     		strb	r3, [r7, #15]
 611 007c 01E0     		b	.L30
 612              	.L29:
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 613              		.loc 1 633 0
 614 007e 0023     		movs	r3, #0
 615 0080 FB73     		strb	r3, [r7, #15]
 616              	.L30:
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 617              		.loc 1 637 0
 618 0082 4FF42053 		mov	r3, #10240
 619 0086 C4F20003 		movt	r3, 16384
 620 008a FF22     		movs	r2, #255
 621 008c 5A62     		str	r2, [r3, #36]
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 622              		.loc 1 639 0
 623 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 624              		.loc 1 640 0
 625 0090 1846     		mov	r0, r3
 626 0092 1437     		adds	r7, r7, #20
 627 0094 BD46     		mov	sp, r7
 628              		@ sp needed
 629 0096 5DF8047B 		ldr	r7, [sp], #4
 630 009a 7047     		bx	lr
 631              		.cfi_endproc
 632              	.LFE116:
 634              		.section	.text.RTC_RefClockCmd,"ax",%progbits
 635              		.align	2
 636              		.global	RTC_RefClockCmd
 637              		.thumb
 638              		.thumb_func
 640              	RTC_RefClockCmd:
 641              	.LFB117:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 642              		.loc 1 651 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 16
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646 0000 80B5     		push	{r7, lr}
 647              	.LCFI20:
 648              		.cfi_def_cfa_offset 8
 649              		.cfi_offset 7, -8
 650              		.cfi_offset 14, -4
 651 0002 84B0     		sub	sp, sp, #16
 652              	.LCFI21:
 653              		.cfi_def_cfa_offset 24
 654 0004 00AF     		add	r7, sp, #0
 655              	.LCFI22:
 656              		.cfi_def_cfa_register 7
 657 0006 0346     		mov	r3, r0
 658 0008 FB71     		strb	r3, [r7, #7]
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 659              		.loc 1 652 0
 660 000a 0023     		movs	r3, #0
 661 000c FB73     		strb	r3, [r7, #15]
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 662              		.loc 1 658 0
 663 000e 4FF42053 		mov	r3, #10240
 664 0012 C4F20003 		movt	r3, 16384
 665 0016 CA22     		movs	r2, #202
 666 0018 5A62     		str	r2, [r3, #36]
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 667              		.loc 1 659 0
 668 001a 4FF42053 		mov	r3, #10240
 669 001e C4F20003 		movt	r3, 16384
 670 0022 5322     		movs	r2, #83
 671 0024 5A62     		str	r2, [r3, #36]
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 672              		.loc 1 662 0
 673 0026 FFF7FEFF 		bl	RTC_EnterInitMode
 674 002a 0346     		mov	r3, r0
 675 002c 002B     		cmp	r3, #0
 676 002e 02D1     		bne	.L33
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 677              		.loc 1 664 0
 678 0030 0023     		movs	r3, #0
 679 0032 FB73     		strb	r3, [r7, #15]
 680 0034 1FE0     		b	.L34
 681              	.L33:
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 682              		.loc 1 668 0
 683 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 684 0038 002B     		cmp	r3, #0
 685 003a 0CD0     		beq	.L35
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 686              		.loc 1 671 0
 687 003c 4FF42053 		mov	r3, #10240
 688 0040 C4F20003 		movt	r3, 16384
 689 0044 4FF42052 		mov	r2, #10240
 690 0048 C4F20002 		movt	r2, 16384
 691 004c 9268     		ldr	r2, [r2, #8]
 692 004e 42F01002 		orr	r2, r2, #16
 693 0052 9A60     		str	r2, [r3, #8]
 694 0054 0BE0     		b	.L36
 695              	.L35:
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 696              		.loc 1 676 0
 697 0056 4FF42053 		mov	r3, #10240
 698 005a C4F20003 		movt	r3, 16384
 699 005e 4FF42052 		mov	r2, #10240
 700 0062 C4F20002 		movt	r2, 16384
 701 0066 9268     		ldr	r2, [r2, #8]
 702 0068 22F01002 		bic	r2, r2, #16
 703 006c 9A60     		str	r2, [r3, #8]
 704              	.L36:
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 705              		.loc 1 679 0
 706 006e FFF7FEFF 		bl	RTC_ExitInitMode
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 707              		.loc 1 681 0
 708 0072 0123     		movs	r3, #1
 709 0074 FB73     		strb	r3, [r7, #15]
 710              	.L34:
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 711              		.loc 1 685 0
 712 0076 4FF42053 		mov	r3, #10240
 713 007a C4F20003 		movt	r3, 16384
 714 007e FF22     		movs	r2, #255
 715 0080 5A62     		str	r2, [r3, #36]
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 716              		.loc 1 687 0
 717 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 718              		.loc 1 688 0
 719 0084 1846     		mov	r0, r3
 720 0086 1037     		adds	r7, r7, #16
 721 0088 BD46     		mov	sp, r7
 722              		@ sp needed
 723 008a 80BD     		pop	{r7, pc}
 724              		.cfi_endproc
 725              	.LFE117:
 727              		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 728              		.align	2
 729              		.global	RTC_BypassShadowCmd
 730              		.thumb
 731              		.thumb_func
 733              	RTC_BypassShadowCmd:
 734              	.LFB118:
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 735              		.loc 1 699 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 8
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739              		@ link register save eliminated.
 740 0000 80B4     		push	{r7}
 741              	.LCFI23:
 742              		.cfi_def_cfa_offset 4
 743              		.cfi_offset 7, -4
 744 0002 83B0     		sub	sp, sp, #12
 745              	.LCFI24:
 746              		.cfi_def_cfa_offset 16
 747 0004 00AF     		add	r7, sp, #0
 748              	.LCFI25:
 749              		.cfi_def_cfa_register 7
 750 0006 0346     		mov	r3, r0
 751 0008 FB71     		strb	r3, [r7, #7]
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 752              		.loc 1 704 0
 753 000a 4FF42053 		mov	r3, #10240
 754 000e C4F20003 		movt	r3, 16384
 755 0012 CA22     		movs	r2, #202
 756 0014 5A62     		str	r2, [r3, #36]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 757              		.loc 1 705 0
 758 0016 4FF42053 		mov	r3, #10240
 759 001a C4F20003 		movt	r3, 16384
 760 001e 5322     		movs	r2, #83
 761 0020 5A62     		str	r2, [r3, #36]
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 762              		.loc 1 707 0
 763 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 764 0024 002B     		cmp	r3, #0
 765 0026 0CD0     		beq	.L39
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 766              		.loc 1 710 0
 767 0028 4FF42053 		mov	r3, #10240
 768 002c C4F20003 		movt	r3, 16384
 769 0030 4FF42052 		mov	r2, #10240
 770 0034 C4F20002 		movt	r2, 16384
 771 0038 9268     		ldr	r2, [r2, #8]
 772 003a 42F02002 		orr	r2, r2, #32
 773 003e 9A60     		str	r2, [r3, #8]
 774 0040 0BE0     		b	.L40
 775              	.L39:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 776              		.loc 1 715 0
 777 0042 4FF42053 		mov	r3, #10240
 778 0046 C4F20003 		movt	r3, 16384
 779 004a 4FF42052 		mov	r2, #10240
 780 004e C4F20002 		movt	r2, 16384
 781 0052 9268     		ldr	r2, [r2, #8]
 782 0054 02F0DF02 		and	r2, r2, #223
 783 0058 9A60     		str	r2, [r3, #8]
 784              	.L40:
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 785              		.loc 1 719 0
 786 005a 4FF42053 		mov	r3, #10240
 787 005e C4F20003 		movt	r3, 16384
 788 0062 FF22     		movs	r2, #255
 789 0064 5A62     		str	r2, [r3, #36]
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 790              		.loc 1 720 0
 791 0066 0C37     		adds	r7, r7, #12
 792 0068 BD46     		mov	sp, r7
 793              		@ sp needed
 794 006a 5DF8047B 		ldr	r7, [sp], #4
 795 006e 7047     		bx	lr
 796              		.cfi_endproc
 797              	.LFE118:
 799              		.section	.text.RTC_SetTime,"ax",%progbits
 800              		.align	2
 801              		.global	RTC_SetTime
 802              		.thumb
 803              		.thumb_func
 805              	RTC_SetTime:
 806              	.LFB119:
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 807              		.loc 1 754 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 16
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811 0000 90B5     		push	{r4, r7, lr}
 812              	.LCFI26:
 813              		.cfi_def_cfa_offset 12
 814              		.cfi_offset 4, -12
 815              		.cfi_offset 7, -8
 816              		.cfi_offset 14, -4
 817 0002 85B0     		sub	sp, sp, #20
 818              	.LCFI27:
 819              		.cfi_def_cfa_offset 32
 820 0004 00AF     		add	r7, sp, #0
 821              	.LCFI28:
 822              		.cfi_def_cfa_register 7
 823 0006 7860     		str	r0, [r7, #4]
 824 0008 3960     		str	r1, [r7]
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 825              		.loc 1 755 0
 826 000a 0023     		movs	r3, #0
 827 000c FB60     		str	r3, [r7, #12]
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 828              		.loc 1 756 0
 829 000e 0023     		movs	r3, #0
 830 0010 FB72     		strb	r3, [r7, #11]
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 831              		.loc 1 761 0
 832 0012 7B68     		ldr	r3, [r7, #4]
 833 0014 002B     		cmp	r3, #0
 834 0016 0CD1     		bne	.L42
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 835              		.loc 1 763 0
 836 0018 4FF42053 		mov	r3, #10240
 837 001c C4F20003 		movt	r3, 16384
 838 0020 9B68     		ldr	r3, [r3, #8]
 839 0022 03F04003 		and	r3, r3, #64
 840 0026 002B     		cmp	r3, #0
 841 0028 17D1     		bne	.L44
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 842              		.loc 1 770 0
 843 002a 3B68     		ldr	r3, [r7]
 844 002c 0022     		movs	r2, #0
 845 002e DA70     		strb	r2, [r3, #3]
 846 0030 13E0     		b	.L44
 847              	.L42:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 848              		.loc 1 778 0
 849 0032 4FF42053 		mov	r3, #10240
 850 0036 C4F20003 		movt	r3, 16384
 851 003a 9B68     		ldr	r3, [r3, #8]
 852 003c 03F04003 		and	r3, r3, #64
 853 0040 002B     		cmp	r3, #0
 854 0042 07D0     		beq	.L45
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 855              		.loc 1 780 0
 856 0044 3B68     		ldr	r3, [r7]
 857 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 858 0048 1846     		mov	r0, r3
 859 004a FFF7FEFF 		bl	RTC_Bcd2ToByte
 860 004e 0346     		mov	r3, r0
 861 0050 FB60     		str	r3, [r7, #12]
 862 0052 02E0     		b	.L44
 863              	.L45:
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 864              		.loc 1 786 0
 865 0054 3B68     		ldr	r3, [r7]
 866 0056 0022     		movs	r2, #0
 867 0058 DA70     		strb	r2, [r3, #3]
 868              	.L44:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 869              		.loc 1 794 0
 870 005a 7B68     		ldr	r3, [r7, #4]
 871 005c 002B     		cmp	r3, #0
 872 005e 0FD0     		beq	.L46
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 873              		.loc 1 796 0
 874 0060 3B68     		ldr	r3, [r7]
 875 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 876 0064 1A04     		lsls	r2, r3, #16
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 877              		.loc 1 797 0
 878 0066 3B68     		ldr	r3, [r7]
 879 0068 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 880 006a 1B02     		lsls	r3, r3, #8
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 881              		.loc 1 796 0
 882 006c 1A43     		orrs	r2, r2, r3
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 883              		.loc 1 798 0
 884 006e 3B68     		ldr	r3, [r7]
 885 0070 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 886              		.loc 1 797 0
 887 0072 1A43     		orrs	r2, r2, r3
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 888              		.loc 1 799 0
 889 0074 3B68     		ldr	r3, [r7]
 890 0076 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 891 0078 1B04     		lsls	r3, r3, #16
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 892              		.loc 1 796 0
 893 007a 1343     		orrs	r3, r3, r2
 894 007c FB60     		str	r3, [r7, #12]
 895 007e 1BE0     		b	.L47
 896              	.L46:
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 897              		.loc 1 803 0
 898 0080 3B68     		ldr	r3, [r7]
 899 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 900 0084 1846     		mov	r0, r3
 901 0086 FFF7FEFF 		bl	RTC_ByteToBcd2
 902 008a 0346     		mov	r3, r0
 903 008c 1C04     		lsls	r4, r3, #16
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 904              		.loc 1 804 0
 905 008e 3B68     		ldr	r3, [r7]
 906 0090 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 907 0092 1846     		mov	r0, r3
 908 0094 FFF7FEFF 		bl	RTC_ByteToBcd2
 909 0098 0346     		mov	r3, r0
 910 009a 1B02     		lsls	r3, r3, #8
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 911              		.loc 1 803 0
 912 009c 1C43     		orrs	r4, r4, r3
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 913              		.loc 1 805 0
 914 009e 3B68     		ldr	r3, [r7]
 915 00a0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 916 00a2 1846     		mov	r0, r3
 917 00a4 FFF7FEFF 		bl	RTC_ByteToBcd2
 918 00a8 0346     		mov	r3, r0
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 919              		.loc 1 804 0
 920 00aa 44EA0302 		orr	r2, r4, r3
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 921              		.loc 1 806 0
 922 00ae 3B68     		ldr	r3, [r7]
 923 00b0 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 924 00b2 1B04     		lsls	r3, r3, #16
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 925              		.loc 1 803 0
 926 00b4 1343     		orrs	r3, r3, r2
 927 00b6 FB60     		str	r3, [r7, #12]
 928              	.L47:
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 929              		.loc 1 810 0
 930 00b8 4FF42053 		mov	r3, #10240
 931 00bc C4F20003 		movt	r3, 16384
 932 00c0 CA22     		movs	r2, #202
 933 00c2 5A62     		str	r2, [r3, #36]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 934              		.loc 1 811 0
 935 00c4 4FF42053 		mov	r3, #10240
 936 00c8 C4F20003 		movt	r3, 16384
 937 00cc 5322     		movs	r2, #83
 938 00ce 5A62     		str	r2, [r3, #36]
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 939              		.loc 1 814 0
 940 00d0 FFF7FEFF 		bl	RTC_EnterInitMode
 941 00d4 0346     		mov	r3, r0
 942 00d6 002B     		cmp	r3, #0
 943 00d8 02D1     		bne	.L48
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 944              		.loc 1 816 0
 945 00da 0023     		movs	r3, #0
 946 00dc FB72     		strb	r3, [r7, #11]
 947 00de 15E0     		b	.L49
 948              	.L48:
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 949              		.loc 1 821 0
 950 00e0 4FF42053 		mov	r3, #10240
 951 00e4 C4F20003 		movt	r3, 16384
 952 00e8 FA68     		ldr	r2, [r7, #12]
 953 00ea 02F07F32 		and	r2, r2, #2139062143
 954 00ee 22F0FE42 		bic	r2, r2, #2130706432
 955 00f2 1A60     		str	r2, [r3]
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 956              		.loc 1 824 0
 957 00f4 FFF7FEFF 		bl	RTC_ExitInitMode
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 958              		.loc 1 826 0
 959 00f8 FFF7FEFF 		bl	RTC_WaitForSynchro
 960 00fc 0346     		mov	r3, r0
 961 00fe 002B     		cmp	r3, #0
 962 0100 02D1     		bne	.L50
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 963              		.loc 1 828 0
 964 0102 0023     		movs	r3, #0
 965 0104 FB72     		strb	r3, [r7, #11]
 966 0106 01E0     		b	.L49
 967              	.L50:
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 968              		.loc 1 832 0
 969 0108 0123     		movs	r3, #1
 970 010a FB72     		strb	r3, [r7, #11]
 971              	.L49:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 972              		.loc 1 837 0
 973 010c 4FF42053 		mov	r3, #10240
 974 0110 C4F20003 		movt	r3, 16384
 975 0114 FF22     		movs	r2, #255
 976 0116 5A62     		str	r2, [r3, #36]
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 977              		.loc 1 839 0
 978 0118 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 979              		.loc 1 840 0
 980 011a 1846     		mov	r0, r3
 981 011c 1437     		adds	r7, r7, #20
 982 011e BD46     		mov	sp, r7
 983              		@ sp needed
 984 0120 90BD     		pop	{r4, r7, pc}
 985              		.cfi_endproc
 986              	.LFE119:
 988 0122 00BF     		.section	.text.RTC_TimeStructInit,"ax",%progbits
 989              		.align	2
 990              		.global	RTC_TimeStructInit
 991              		.thumb
 992              		.thumb_func
 994              	RTC_TimeStructInit:
 995              	.LFB120:
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 996              		.loc 1 850 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 8
 999              		@ frame_needed = 1, uses_anonymous_args = 0
 1000              		@ link register save eliminated.
 1001 0000 80B4     		push	{r7}
 1002              	.LCFI29:
 1003              		.cfi_def_cfa_offset 4
 1004              		.cfi_offset 7, -4
 1005 0002 83B0     		sub	sp, sp, #12
 1006              	.LCFI30:
 1007              		.cfi_def_cfa_offset 16
 1008 0004 00AF     		add	r7, sp, #0
 1009              	.LCFI31:
 1010              		.cfi_def_cfa_register 7
 1011 0006 7860     		str	r0, [r7, #4]
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1012              		.loc 1 852 0
 1013 0008 7B68     		ldr	r3, [r7, #4]
 1014 000a 0022     		movs	r2, #0
 1015 000c DA70     		strb	r2, [r3, #3]
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1016              		.loc 1 853 0
 1017 000e 7B68     		ldr	r3, [r7, #4]
 1018 0010 0022     		movs	r2, #0
 1019 0012 1A70     		strb	r2, [r3]
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1020              		.loc 1 854 0
 1021 0014 7B68     		ldr	r3, [r7, #4]
 1022 0016 0022     		movs	r2, #0
 1023 0018 5A70     		strb	r2, [r3, #1]
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1024              		.loc 1 855 0
 1025 001a 7B68     		ldr	r3, [r7, #4]
 1026 001c 0022     		movs	r2, #0
 1027 001e 9A70     		strb	r2, [r3, #2]
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1028              		.loc 1 856 0
 1029 0020 0C37     		adds	r7, r7, #12
 1030 0022 BD46     		mov	sp, r7
 1031              		@ sp needed
 1032 0024 5DF8047B 		ldr	r7, [sp], #4
 1033 0028 7047     		bx	lr
 1034              		.cfi_endproc
 1035              	.LFE120:
 1037 002a 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 1038              		.align	2
 1039              		.global	RTC_GetTime
 1040              		.thumb
 1041              		.thumb_func
 1043              	RTC_GetTime:
 1044              	.LFB121:
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1045              		.loc 1 869 0
 1046              		.cfi_startproc
 1047              		@ args = 0, pretend = 0, frame = 16
 1048              		@ frame_needed = 1, uses_anonymous_args = 0
 1049 0000 80B5     		push	{r7, lr}
 1050              	.LCFI32:
 1051              		.cfi_def_cfa_offset 8
 1052              		.cfi_offset 7, -8
 1053              		.cfi_offset 14, -4
 1054 0002 84B0     		sub	sp, sp, #16
 1055              	.LCFI33:
 1056              		.cfi_def_cfa_offset 24
 1057 0004 00AF     		add	r7, sp, #0
 1058              	.LCFI34:
 1059              		.cfi_def_cfa_register 7
 1060 0006 7860     		str	r0, [r7, #4]
 1061 0008 3960     		str	r1, [r7]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1062              		.loc 1 870 0
 1063 000a 0023     		movs	r3, #0
 1064 000c FB60     		str	r3, [r7, #12]
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1065              		.loc 1 876 0
 1066 000e 4FF42053 		mov	r3, #10240
 1067 0012 C4F20003 		movt	r3, 16384
 1068 0016 1B68     		ldr	r3, [r3]
 1069 0018 03F07F33 		and	r3, r3, #2139062143
 1070 001c 23F0FE43 		bic	r3, r3, #2130706432
 1071 0020 FB60     		str	r3, [r7, #12]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1072              		.loc 1 879 0
 1073 0022 FB68     		ldr	r3, [r7, #12]
 1074 0024 03F47C13 		and	r3, r3, #4128768
 1075 0028 1B0C     		lsrs	r3, r3, #16
 1076 002a DAB2     		uxtb	r2, r3
 1077 002c 3B68     		ldr	r3, [r7]
 1078 002e 1A70     		strb	r2, [r3]
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1079              		.loc 1 880 0
 1080 0030 FB68     		ldr	r3, [r7, #12]
 1081 0032 03F4FE43 		and	r3, r3, #32512
 1082 0036 1B0A     		lsrs	r3, r3, #8
 1083 0038 DAB2     		uxtb	r2, r3
 1084 003a 3B68     		ldr	r3, [r7]
 1085 003c 5A70     		strb	r2, [r3, #1]
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1086              		.loc 1 881 0
 1087 003e FB68     		ldr	r3, [r7, #12]
 1088 0040 DBB2     		uxtb	r3, r3
 1089 0042 03F07F03 		and	r3, r3, #127
 1090 0046 DAB2     		uxtb	r2, r3
 1091 0048 3B68     		ldr	r3, [r7]
 1092 004a 9A70     		strb	r2, [r3, #2]
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1093              		.loc 1 882 0
 1094 004c FB68     		ldr	r3, [r7, #12]
 1095 004e 03F48003 		and	r3, r3, #4194304
 1096 0052 1B0C     		lsrs	r3, r3, #16
 1097 0054 DAB2     		uxtb	r2, r3
 1098 0056 3B68     		ldr	r3, [r7]
 1099 0058 DA70     		strb	r2, [r3, #3]
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1100              		.loc 1 885 0
 1101 005a 7B68     		ldr	r3, [r7, #4]
 1102 005c 002B     		cmp	r3, #0
 1103 005e 1AD1     		bne	.L53
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1104              		.loc 1 888 0
 1105 0060 3B68     		ldr	r3, [r7]
 1106 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1107 0064 1846     		mov	r0, r3
 1108 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1109 006a 0346     		mov	r3, r0
 1110 006c 1A46     		mov	r2, r3
 1111 006e 3B68     		ldr	r3, [r7]
 1112 0070 1A70     		strb	r2, [r3]
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1113              		.loc 1 889 0
 1114 0072 3B68     		ldr	r3, [r7]
 1115 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1116 0076 1846     		mov	r0, r3
 1117 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1118 007c 0346     		mov	r3, r0
 1119 007e 1A46     		mov	r2, r3
 1120 0080 3B68     		ldr	r3, [r7]
 1121 0082 5A70     		strb	r2, [r3, #1]
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1122              		.loc 1 890 0
 1123 0084 3B68     		ldr	r3, [r7]
 1124 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1125 0088 1846     		mov	r0, r3
 1126 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1127 008e 0346     		mov	r3, r0
 1128 0090 1A46     		mov	r2, r3
 1129 0092 3B68     		ldr	r3, [r7]
 1130 0094 9A70     		strb	r2, [r3, #2]
 1131              	.L53:
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1132              		.loc 1 892 0
 1133 0096 1037     		adds	r7, r7, #16
 1134 0098 BD46     		mov	sp, r7
 1135              		@ sp needed
 1136 009a 80BD     		pop	{r7, pc}
 1137              		.cfi_endproc
 1138              	.LFE121:
 1140              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1141              		.align	2
 1142              		.global	RTC_GetSubSecond
 1143              		.thumb
 1144              		.thumb_func
 1146              	RTC_GetSubSecond:
 1147              	.LFB122:
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1148              		.loc 1 902 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 8
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152              		@ link register save eliminated.
 1153 0000 80B4     		push	{r7}
 1154              	.LCFI35:
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 7, -4
 1157 0002 83B0     		sub	sp, sp, #12
 1158              	.LCFI36:
 1159              		.cfi_def_cfa_offset 16
 1160 0004 00AF     		add	r7, sp, #0
 1161              	.LCFI37:
 1162              		.cfi_def_cfa_register 7
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1163              		.loc 1 903 0
 1164 0006 0023     		movs	r3, #0
 1165 0008 7B60     		str	r3, [r7, #4]
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1166              		.loc 1 906 0
 1167 000a 4FF42053 		mov	r3, #10240
 1168 000e C4F20003 		movt	r3, 16384
 1169 0012 9B6A     		ldr	r3, [r3, #40]
 1170 0014 7B60     		str	r3, [r7, #4]
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1171              		.loc 1 909 0
 1172 0016 4FF42053 		mov	r3, #10240
 1173 001a C4F20003 		movt	r3, 16384
 1174 001e 5B68     		ldr	r3, [r3, #4]
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1175              		.loc 1 911 0
 1176 0020 7B68     		ldr	r3, [r7, #4]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1177              		.loc 1 912 0
 1178 0022 1846     		mov	r0, r3
 1179 0024 0C37     		adds	r7, r7, #12
 1180 0026 BD46     		mov	sp, r7
 1181              		@ sp needed
 1182 0028 5DF8047B 		ldr	r7, [sp], #4
 1183 002c 7047     		bx	lr
 1184              		.cfi_endproc
 1185              	.LFE122:
 1187 002e 00BF     		.section	.text.RTC_SetDate,"ax",%progbits
 1188              		.align	2
 1189              		.global	RTC_SetDate
 1190              		.thumb
 1191              		.thumb_func
 1193              	RTC_SetDate:
 1194              	.LFB123:
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1195              		.loc 1 927 0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 16
 1198              		@ frame_needed = 1, uses_anonymous_args = 0
 1199 0000 90B5     		push	{r4, r7, lr}
 1200              	.LCFI38:
 1201              		.cfi_def_cfa_offset 12
 1202              		.cfi_offset 4, -12
 1203              		.cfi_offset 7, -8
 1204              		.cfi_offset 14, -4
 1205 0002 85B0     		sub	sp, sp, #20
 1206              	.LCFI39:
 1207              		.cfi_def_cfa_offset 32
 1208 0004 00AF     		add	r7, sp, #0
 1209              	.LCFI40:
 1210              		.cfi_def_cfa_register 7
 1211 0006 7860     		str	r0, [r7, #4]
 1212 0008 3960     		str	r1, [r7]
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1213              		.loc 1 928 0
 1214 000a 0023     		movs	r3, #0
 1215 000c FB60     		str	r3, [r7, #12]
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1216              		.loc 1 929 0
 1217 000e 0023     		movs	r3, #0
 1218 0010 FB72     		strb	r3, [r7, #11]
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1219              		.loc 1 934 0
 1220 0012 7B68     		ldr	r3, [r7, #4]
 1221 0014 002B     		cmp	r3, #0
 1222 0016 0ED1     		bne	.L58
 1223              		.loc 1 934 0 is_stmt 0 discriminator 1
 1224 0018 3B68     		ldr	r3, [r7]
 1225 001a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1226 001c 03F01003 		and	r3, r3, #16
 1227 0020 002B     		cmp	r3, #0
 1228 0022 08D0     		beq	.L58
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1229              		.loc 1 936 0 is_stmt 1
 1230 0024 3B68     		ldr	r3, [r7]
 1231 0026 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1232 0028 23F01003 		bic	r3, r3, #16
 1233 002c DBB2     		uxtb	r3, r3
 1234 002e 0A33     		adds	r3, r3, #10
 1235 0030 DAB2     		uxtb	r2, r3
 1236 0032 3B68     		ldr	r3, [r7]
 1237 0034 5A70     		strb	r2, [r3, #1]
 1238              	.L58:
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1239              		.loc 1 938 0
 1240 0036 7B68     		ldr	r3, [r7, #4]
 1241 0038 002B     		cmp	r3, #0
 1242 003a 0DD0     		beq	.L59
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1243              		.loc 1 947 0
 1244 003c 3B68     		ldr	r3, [r7]
 1245 003e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1246 0040 1846     		mov	r0, r3
 1247 0042 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1248 0046 0346     		mov	r3, r0
 1249 0048 FB60     		str	r3, [r7, #12]
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1250              		.loc 1 949 0
 1251 004a 3B68     		ldr	r3, [r7]
 1252 004c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1253 004e 1846     		mov	r0, r3
 1254 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1255 0054 0346     		mov	r3, r0
 1256 0056 FB60     		str	r3, [r7, #12]
 1257              	.L59:
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1258              		.loc 1 955 0
 1259 0058 7B68     		ldr	r3, [r7, #4]
 1260 005a 002B     		cmp	r3, #0
 1261 005c 0FD0     		beq	.L60
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1262              		.loc 1 957 0
 1263 005e 3B68     		ldr	r3, [r7]
 1264 0060 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1265 0062 1A04     		lsls	r2, r3, #16
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1266              		.loc 1 958 0
 1267 0064 3B68     		ldr	r3, [r7]
 1268 0066 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1269 0068 1B02     		lsls	r3, r3, #8
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1270              		.loc 1 957 0
 1271 006a 1A43     		orrs	r2, r2, r3
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1272              		.loc 1 959 0
 1273 006c 3B68     		ldr	r3, [r7]
 1274 006e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1275              		.loc 1 958 0
 1276 0070 1A43     		orrs	r2, r2, r3
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1277              		.loc 1 960 0
 1278 0072 3B68     		ldr	r3, [r7]
 1279 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1280 0076 5B03     		lsls	r3, r3, #13
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1281              		.loc 1 957 0
 1282 0078 1343     		orrs	r3, r3, r2
 1283 007a FB60     		str	r3, [r7, #12]
 1284 007c 1BE0     		b	.L61
 1285              	.L60:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1286              		.loc 1 964 0
 1287 007e 3B68     		ldr	r3, [r7]
 1288 0080 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1289 0082 1846     		mov	r0, r3
 1290 0084 FFF7FEFF 		bl	RTC_ByteToBcd2
 1291 0088 0346     		mov	r3, r0
 1292 008a 1C04     		lsls	r4, r3, #16
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1293              		.loc 1 965 0
 1294 008c 3B68     		ldr	r3, [r7]
 1295 008e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1296 0090 1846     		mov	r0, r3
 1297 0092 FFF7FEFF 		bl	RTC_ByteToBcd2
 1298 0096 0346     		mov	r3, r0
 1299 0098 1B02     		lsls	r3, r3, #8
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1300              		.loc 1 964 0
 1301 009a 1C43     		orrs	r4, r4, r3
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1302              		.loc 1 966 0
 1303 009c 3B68     		ldr	r3, [r7]
 1304 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1305 00a0 1846     		mov	r0, r3
 1306 00a2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1307 00a6 0346     		mov	r3, r0
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1308              		.loc 1 965 0
 1309 00a8 44EA0302 		orr	r2, r4, r3
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1310              		.loc 1 967 0
 1311 00ac 3B68     		ldr	r3, [r7]
 1312 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1313 00b0 5B03     		lsls	r3, r3, #13
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1314              		.loc 1 964 0
 1315 00b2 1343     		orrs	r3, r3, r2
 1316 00b4 FB60     		str	r3, [r7, #12]
 1317              	.L61:
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1318              		.loc 1 971 0
 1319 00b6 4FF42053 		mov	r3, #10240
 1320 00ba C4F20003 		movt	r3, 16384
 1321 00be CA22     		movs	r2, #202
 1322 00c0 5A62     		str	r2, [r3, #36]
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1323              		.loc 1 972 0
 1324 00c2 4FF42053 		mov	r3, #10240
 1325 00c6 C4F20003 		movt	r3, 16384
 1326 00ca 5322     		movs	r2, #83
 1327 00cc 5A62     		str	r2, [r3, #36]
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1328              		.loc 1 975 0
 1329 00ce FFF7FEFF 		bl	RTC_EnterInitMode
 1330 00d2 0346     		mov	r3, r0
 1331 00d4 002B     		cmp	r3, #0
 1332 00d6 02D1     		bne	.L62
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1333              		.loc 1 977 0
 1334 00d8 0023     		movs	r3, #0
 1335 00da FB72     		strb	r3, [r7, #11]
 1336 00dc 15E0     		b	.L63
 1337              	.L62:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1338              		.loc 1 982 0
 1339 00de 4FF42053 		mov	r3, #10240
 1340 00e2 C4F20003 		movt	r3, 16384
 1341 00e6 FA68     		ldr	r2, [r7, #12]
 1342 00e8 22F07F42 		bic	r2, r2, #-16777216
 1343 00ec 22F0C002 		bic	r2, r2, #192
 1344 00f0 5A60     		str	r2, [r3, #4]
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1345              		.loc 1 985 0
 1346 00f2 FFF7FEFF 		bl	RTC_ExitInitMode
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1347              		.loc 1 987 0
 1348 00f6 FFF7FEFF 		bl	RTC_WaitForSynchro
 1349 00fa 0346     		mov	r3, r0
 1350 00fc 002B     		cmp	r3, #0
 1351 00fe 02D1     		bne	.L64
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1352              		.loc 1 989 0
 1353 0100 0023     		movs	r3, #0
 1354 0102 FB72     		strb	r3, [r7, #11]
 1355 0104 01E0     		b	.L63
 1356              	.L64:
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1357              		.loc 1 993 0
 1358 0106 0123     		movs	r3, #1
 1359 0108 FB72     		strb	r3, [r7, #11]
 1360              	.L63:
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1361              		.loc 1 997 0
 1362 010a 4FF42053 		mov	r3, #10240
 1363 010e C4F20003 		movt	r3, 16384
 1364 0112 FF22     		movs	r2, #255
 1365 0114 5A62     		str	r2, [r3, #36]
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1366              		.loc 1 999 0
 1367 0116 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1368              		.loc 1 1000 0
 1369 0118 1846     		mov	r0, r3
 1370 011a 1437     		adds	r7, r7, #20
 1371 011c BD46     		mov	sp, r7
 1372              		@ sp needed
 1373 011e 90BD     		pop	{r4, r7, pc}
 1374              		.cfi_endproc
 1375              	.LFE123:
 1377              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1378              		.align	2
 1379              		.global	RTC_DateStructInit
 1380              		.thumb
 1381              		.thumb_func
 1383              	RTC_DateStructInit:
 1384              	.LFB124:
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1385              		.loc 1 1010 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 8
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
 1390 0000 80B4     		push	{r7}
 1391              	.LCFI41:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 7, -4
 1394 0002 83B0     		sub	sp, sp, #12
 1395              	.LCFI42:
 1396              		.cfi_def_cfa_offset 16
 1397 0004 00AF     		add	r7, sp, #0
 1398              	.LCFI43:
 1399              		.cfi_def_cfa_register 7
 1400 0006 7860     		str	r0, [r7, #4]
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1401              		.loc 1 1012 0
 1402 0008 7B68     		ldr	r3, [r7, #4]
 1403 000a 0122     		movs	r2, #1
 1404 000c 1A70     		strb	r2, [r3]
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1405              		.loc 1 1013 0
 1406 000e 7B68     		ldr	r3, [r7, #4]
 1407 0010 0122     		movs	r2, #1
 1408 0012 9A70     		strb	r2, [r3, #2]
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1409              		.loc 1 1014 0
 1410 0014 7B68     		ldr	r3, [r7, #4]
 1411 0016 0122     		movs	r2, #1
 1412 0018 5A70     		strb	r2, [r3, #1]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1413              		.loc 1 1015 0
 1414 001a 7B68     		ldr	r3, [r7, #4]
 1415 001c 0022     		movs	r2, #0
 1416 001e DA70     		strb	r2, [r3, #3]
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1417              		.loc 1 1016 0
 1418 0020 0C37     		adds	r7, r7, #12
 1419 0022 BD46     		mov	sp, r7
 1420              		@ sp needed
 1421 0024 5DF8047B 		ldr	r7, [sp], #4
 1422 0028 7047     		bx	lr
 1423              		.cfi_endproc
 1424              	.LFE124:
 1426 002a 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1427              		.align	2
 1428              		.global	RTC_GetDate
 1429              		.thumb
 1430              		.thumb_func
 1432              	RTC_GetDate:
 1433              	.LFB125:
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1434              		.loc 1 1029 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 16
 1437              		@ frame_needed = 1, uses_anonymous_args = 0
 1438 0000 80B5     		push	{r7, lr}
 1439              	.LCFI44:
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 7, -8
 1442              		.cfi_offset 14, -4
 1443 0002 84B0     		sub	sp, sp, #16
 1444              	.LCFI45:
 1445              		.cfi_def_cfa_offset 24
 1446 0004 00AF     		add	r7, sp, #0
 1447              	.LCFI46:
 1448              		.cfi_def_cfa_register 7
 1449 0006 7860     		str	r0, [r7, #4]
 1450 0008 3960     		str	r1, [r7]
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1451              		.loc 1 1030 0
 1452 000a 0023     		movs	r3, #0
 1453 000c FB60     		str	r3, [r7, #12]
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1454              		.loc 1 1036 0
 1455 000e 4FF42053 		mov	r3, #10240
 1456 0012 C4F20003 		movt	r3, 16384
 1457 0016 5B68     		ldr	r3, [r3, #4]
 1458 0018 23F07F43 		bic	r3, r3, #-16777216
 1459 001c 23F0C003 		bic	r3, r3, #192
 1460 0020 FB60     		str	r3, [r7, #12]
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1461              		.loc 1 1039 0
 1462 0022 FB68     		ldr	r3, [r7, #12]
 1463 0024 03F47F03 		and	r3, r3, #16711680
 1464 0028 1B0C     		lsrs	r3, r3, #16
 1465 002a DAB2     		uxtb	r2, r3
 1466 002c 3B68     		ldr	r3, [r7]
 1467 002e DA70     		strb	r2, [r3, #3]
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1468              		.loc 1 1040 0
 1469 0030 FB68     		ldr	r3, [r7, #12]
 1470 0032 03F4F853 		and	r3, r3, #7936
 1471 0036 1B0A     		lsrs	r3, r3, #8
 1472 0038 DAB2     		uxtb	r2, r3
 1473 003a 3B68     		ldr	r3, [r7]
 1474 003c 5A70     		strb	r2, [r3, #1]
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1475              		.loc 1 1041 0
 1476 003e FB68     		ldr	r3, [r7, #12]
 1477 0040 DBB2     		uxtb	r3, r3
 1478 0042 03F03F03 		and	r3, r3, #63
 1479 0046 DAB2     		uxtb	r2, r3
 1480 0048 3B68     		ldr	r3, [r7]
 1481 004a 9A70     		strb	r2, [r3, #2]
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1482              		.loc 1 1042 0
 1483 004c FB68     		ldr	r3, [r7, #12]
 1484 004e 03F46043 		and	r3, r3, #57344
 1485 0052 5B0B     		lsrs	r3, r3, #13
 1486 0054 DAB2     		uxtb	r2, r3
 1487 0056 3B68     		ldr	r3, [r7]
 1488 0058 1A70     		strb	r2, [r3]
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1489              		.loc 1 1045 0
 1490 005a 7B68     		ldr	r3, [r7, #4]
 1491 005c 002B     		cmp	r3, #0
 1492 005e 1ED1     		bne	.L67
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1493              		.loc 1 1048 0
 1494 0060 3B68     		ldr	r3, [r7]
 1495 0062 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1496 0064 1846     		mov	r0, r3
 1497 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1498 006a 0346     		mov	r3, r0
 1499 006c 1A46     		mov	r2, r3
 1500 006e 3B68     		ldr	r3, [r7]
 1501 0070 DA70     		strb	r2, [r3, #3]
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1502              		.loc 1 1049 0
 1503 0072 3B68     		ldr	r3, [r7]
 1504 0074 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1505 0076 1846     		mov	r0, r3
 1506 0078 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1507 007c 0346     		mov	r3, r0
 1508 007e 1A46     		mov	r2, r3
 1509 0080 3B68     		ldr	r3, [r7]
 1510 0082 5A70     		strb	r2, [r3, #1]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1511              		.loc 1 1050 0
 1512 0084 3B68     		ldr	r3, [r7]
 1513 0086 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1514 0088 1846     		mov	r0, r3
 1515 008a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1516 008e 0346     		mov	r3, r0
 1517 0090 1A46     		mov	r2, r3
 1518 0092 3B68     		ldr	r3, [r7]
 1519 0094 9A70     		strb	r2, [r3, #2]
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1520              		.loc 1 1051 0
 1521 0096 3B68     		ldr	r3, [r7]
 1522 0098 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1523 009a 3B68     		ldr	r3, [r7]
 1524 009c 1A70     		strb	r2, [r3]
 1525              	.L67:
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1526              		.loc 1 1053 0
 1527 009e 1037     		adds	r7, r7, #16
 1528 00a0 BD46     		mov	sp, r7
 1529              		@ sp needed
 1530 00a2 80BD     		pop	{r7, pc}
 1531              		.cfi_endproc
 1532              	.LFE125:
 1534              		.section	.text.RTC_SetAlarm,"ax",%progbits
 1535              		.align	2
 1536              		.global	RTC_SetAlarm
 1537              		.thumb
 1538              		.thumb_func
 1540              	RTC_SetAlarm:
 1541              	.LFB126:
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1542              		.loc 1 1090 0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 24
 1545              		@ frame_needed = 1, uses_anonymous_args = 0
 1546 0000 90B5     		push	{r4, r7, lr}
 1547              	.LCFI47:
 1548              		.cfi_def_cfa_offset 12
 1549              		.cfi_offset 4, -12
 1550              		.cfi_offset 7, -8
 1551              		.cfi_offset 14, -4
 1552 0002 87B0     		sub	sp, sp, #28
 1553              	.LCFI48:
 1554              		.cfi_def_cfa_offset 40
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI49:
 1557              		.cfi_def_cfa_register 7
 1558 0006 F860     		str	r0, [r7, #12]
 1559 0008 B960     		str	r1, [r7, #8]
 1560 000a 7A60     		str	r2, [r7, #4]
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1561              		.loc 1 1091 0
 1562 000c 0023     		movs	r3, #0
 1563 000e 7B61     		str	r3, [r7, #20]
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1564              		.loc 1 1099 0
 1565 0010 FB68     		ldr	r3, [r7, #12]
 1566 0012 002B     		cmp	r3, #0
 1567 0014 0CD1     		bne	.L70
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1568              		.loc 1 1101 0
 1569 0016 4FF42053 		mov	r3, #10240
 1570 001a C4F20003 		movt	r3, 16384
 1571 001e 9B68     		ldr	r3, [r3, #8]
 1572 0020 03F04003 		and	r3, r3, #64
 1573 0024 002B     		cmp	r3, #0
 1574 0026 2AD1     		bne	.L72
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1575              		.loc 1 1108 0
 1576 0028 7B68     		ldr	r3, [r7, #4]
 1577 002a 0022     		movs	r2, #0
 1578 002c DA70     		strb	r2, [r3, #3]
 1579 002e 26E0     		b	.L72
 1580              	.L70:
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1581              		.loc 1 1125 0
 1582 0030 4FF42053 		mov	r3, #10240
 1583 0034 C4F20003 		movt	r3, 16384
 1584 0038 9B68     		ldr	r3, [r3, #8]
 1585 003a 03F04003 		and	r3, r3, #64
 1586 003e 002B     		cmp	r3, #0
 1587 0040 07D0     		beq	.L73
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1588              		.loc 1 1127 0
 1589 0042 7B68     		ldr	r3, [r7, #4]
 1590 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1591 0046 1846     		mov	r0, r3
 1592 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1593 004c 0346     		mov	r3, r0
 1594 004e 7B61     		str	r3, [r7, #20]
 1595 0050 02E0     		b	.L74
 1596              	.L73:
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1597              		.loc 1 1133 0
 1598 0052 7B68     		ldr	r3, [r7, #4]
 1599 0054 0022     		movs	r2, #0
 1600 0056 DA70     		strb	r2, [r3, #3]
 1601              	.L74:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1602              		.loc 1 1140 0
 1603 0058 7B68     		ldr	r3, [r7, #4]
 1604 005a 9B68     		ldr	r3, [r3, #8]
 1605 005c 002B     		cmp	r3, #0
 1606 005e 07D1     		bne	.L75
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1607              		.loc 1 1142 0
 1608 0060 7B68     		ldr	r3, [r7, #4]
 1609 0062 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1610 0064 1846     		mov	r0, r3
 1611 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1612 006a 0346     		mov	r3, r0
 1613 006c 7B61     		str	r3, [r7, #20]
 1614 006e 06E0     		b	.L72
 1615              	.L75:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1616              		.loc 1 1147 0
 1617 0070 7B68     		ldr	r3, [r7, #4]
 1618 0072 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1619 0074 1846     		mov	r0, r3
 1620 0076 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1621 007a 0346     		mov	r3, r0
 1622 007c 7B61     		str	r3, [r7, #20]
 1623              	.L72:
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1624              		.loc 1 1153 0
 1625 007e FB68     		ldr	r3, [r7, #12]
 1626 0080 002B     		cmp	r3, #0
 1627 0082 19D0     		beq	.L76
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1628              		.loc 1 1155 0
 1629 0084 7B68     		ldr	r3, [r7, #4]
 1630 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1631 0088 1A04     		lsls	r2, r3, #16
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1632              		.loc 1 1156 0
 1633 008a 7B68     		ldr	r3, [r7, #4]
 1634 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1635 008e 1B02     		lsls	r3, r3, #8
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1636              		.loc 1 1155 0
 1637 0090 1A43     		orrs	r2, r2, r3
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1638              		.loc 1 1157 0
 1639 0092 7B68     		ldr	r3, [r7, #4]
 1640 0094 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1641              		.loc 1 1156 0
 1642 0096 1A43     		orrs	r2, r2, r3
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1643              		.loc 1 1158 0
 1644 0098 7B68     		ldr	r3, [r7, #4]
 1645 009a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1646 009c 1B04     		lsls	r3, r3, #16
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1647              		.loc 1 1157 0
 1648 009e 1A43     		orrs	r2, r2, r3
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1649              		.loc 1 1159 0
 1650 00a0 7B68     		ldr	r3, [r7, #4]
 1651 00a2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1652 00a4 1B06     		lsls	r3, r3, #24
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1653              		.loc 1 1158 0
 1654 00a6 1A43     		orrs	r2, r2, r3
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1655              		.loc 1 1160 0
 1656 00a8 7B68     		ldr	r3, [r7, #4]
 1657 00aa 9B68     		ldr	r3, [r3, #8]
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1658              		.loc 1 1159 0
 1659 00ac 1A43     		orrs	r2, r2, r3
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1660              		.loc 1 1161 0
 1661 00ae 7B68     		ldr	r3, [r7, #4]
 1662 00b0 5B68     		ldr	r3, [r3, #4]
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1663              		.loc 1 1155 0
 1664 00b2 1343     		orrs	r3, r3, r2
 1665 00b4 7B61     		str	r3, [r7, #20]
 1666 00b6 2BE0     		b	.L77
 1667              	.L76:
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1668              		.loc 1 1165 0
 1669 00b8 7B68     		ldr	r3, [r7, #4]
 1670 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1671 00bc 1846     		mov	r0, r3
 1672 00be FFF7FEFF 		bl	RTC_ByteToBcd2
 1673 00c2 0346     		mov	r3, r0
 1674 00c4 1C04     		lsls	r4, r3, #16
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1675              		.loc 1 1166 0
 1676 00c6 7B68     		ldr	r3, [r7, #4]
 1677 00c8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1678 00ca 1846     		mov	r0, r3
 1679 00cc FFF7FEFF 		bl	RTC_ByteToBcd2
 1680 00d0 0346     		mov	r3, r0
 1681 00d2 1B02     		lsls	r3, r3, #8
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1682              		.loc 1 1165 0
 1683 00d4 1C43     		orrs	r4, r4, r3
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1684              		.loc 1 1167 0
 1685 00d6 7B68     		ldr	r3, [r7, #4]
 1686 00d8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1687 00da 1846     		mov	r0, r3
 1688 00dc FFF7FEFF 		bl	RTC_ByteToBcd2
 1689 00e0 0346     		mov	r3, r0
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1690              		.loc 1 1166 0
 1691 00e2 44EA0302 		orr	r2, r4, r3
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1692              		.loc 1 1168 0
 1693 00e6 7B68     		ldr	r3, [r7, #4]
 1694 00e8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1695 00ea 1B04     		lsls	r3, r3, #16
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1696              		.loc 1 1167 0
 1697 00ec 42EA0304 		orr	r4, r2, r3
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1698              		.loc 1 1169 0
 1699 00f0 7B68     		ldr	r3, [r7, #4]
 1700 00f2 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1701 00f4 1846     		mov	r0, r3
 1702 00f6 FFF7FEFF 		bl	RTC_ByteToBcd2
 1703 00fa 0346     		mov	r3, r0
 1704 00fc 1B06     		lsls	r3, r3, #24
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1705              		.loc 1 1168 0
 1706 00fe 44EA0302 		orr	r2, r4, r3
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1707              		.loc 1 1170 0
 1708 0102 7B68     		ldr	r3, [r7, #4]
 1709 0104 9B68     		ldr	r3, [r3, #8]
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1710              		.loc 1 1169 0
 1711 0106 1A43     		orrs	r2, r2, r3
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1712              		.loc 1 1171 0
 1713 0108 7B68     		ldr	r3, [r7, #4]
 1714 010a 5B68     		ldr	r3, [r3, #4]
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1715              		.loc 1 1165 0
 1716 010c 1343     		orrs	r3, r3, r2
 1717 010e 7B61     		str	r3, [r7, #20]
 1718              	.L77:
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1719              		.loc 1 1175 0
 1720 0110 4FF42053 		mov	r3, #10240
 1721 0114 C4F20003 		movt	r3, 16384
 1722 0118 CA22     		movs	r2, #202
 1723 011a 5A62     		str	r2, [r3, #36]
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1724              		.loc 1 1176 0
 1725 011c 4FF42053 		mov	r3, #10240
 1726 0120 C4F20003 		movt	r3, 16384
 1727 0124 5322     		movs	r2, #83
 1728 0126 5A62     		str	r2, [r3, #36]
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1729              		.loc 1 1179 0
 1730 0128 BB68     		ldr	r3, [r7, #8]
 1731 012a B3F5807F 		cmp	r3, #256
 1732 012e 06D1     		bne	.L78
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1733              		.loc 1 1181 0
 1734 0130 4FF42053 		mov	r3, #10240
 1735 0134 C4F20003 		movt	r3, 16384
 1736 0138 7A69     		ldr	r2, [r7, #20]
 1737 013a DA61     		str	r2, [r3, #28]
 1738 013c 05E0     		b	.L79
 1739              	.L78:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1740              		.loc 1 1185 0
 1741 013e 4FF42053 		mov	r3, #10240
 1742 0142 C4F20003 		movt	r3, 16384
 1743 0146 7A69     		ldr	r2, [r7, #20]
 1744 0148 1A62     		str	r2, [r3, #32]
 1745              	.L79:
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1746              		.loc 1 1189 0
 1747 014a 4FF42053 		mov	r3, #10240
 1748 014e C4F20003 		movt	r3, 16384
 1749 0152 FF22     		movs	r2, #255
 1750 0154 5A62     		str	r2, [r3, #36]
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1751              		.loc 1 1190 0
 1752 0156 1C37     		adds	r7, r7, #28
 1753 0158 BD46     		mov	sp, r7
 1754              		@ sp needed
 1755 015a 90BD     		pop	{r4, r7, pc}
 1756              		.cfi_endproc
 1757              	.LFE126:
 1759              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1760              		.align	2
 1761              		.global	RTC_AlarmStructInit
 1762              		.thumb
 1763              		.thumb_func
 1765              	RTC_AlarmStructInit:
 1766              	.LFB127:
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1767              		.loc 1 1201 0
 1768              		.cfi_startproc
 1769              		@ args = 0, pretend = 0, frame = 8
 1770              		@ frame_needed = 1, uses_anonymous_args = 0
 1771              		@ link register save eliminated.
 1772 0000 80B4     		push	{r7}
 1773              	.LCFI50:
 1774              		.cfi_def_cfa_offset 4
 1775              		.cfi_offset 7, -4
 1776 0002 83B0     		sub	sp, sp, #12
 1777              	.LCFI51:
 1778              		.cfi_def_cfa_offset 16
 1779 0004 00AF     		add	r7, sp, #0
 1780              	.LCFI52:
 1781              		.cfi_def_cfa_register 7
 1782 0006 7860     		str	r0, [r7, #4]
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1783              		.loc 1 1203 0
 1784 0008 7B68     		ldr	r3, [r7, #4]
 1785 000a 0022     		movs	r2, #0
 1786 000c DA70     		strb	r2, [r3, #3]
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1787              		.loc 1 1204 0
 1788 000e 7B68     		ldr	r3, [r7, #4]
 1789 0010 0022     		movs	r2, #0
 1790 0012 1A70     		strb	r2, [r3]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1791              		.loc 1 1205 0
 1792 0014 7B68     		ldr	r3, [r7, #4]
 1793 0016 0022     		movs	r2, #0
 1794 0018 5A70     		strb	r2, [r3, #1]
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1795              		.loc 1 1206 0
 1796 001a 7B68     		ldr	r3, [r7, #4]
 1797 001c 0022     		movs	r2, #0
 1798 001e 9A70     		strb	r2, [r3, #2]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1799              		.loc 1 1209 0
 1800 0020 7B68     		ldr	r3, [r7, #4]
 1801 0022 0022     		movs	r2, #0
 1802 0024 9A60     		str	r2, [r3, #8]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1803              		.loc 1 1210 0
 1804 0026 7B68     		ldr	r3, [r7, #4]
 1805 0028 0122     		movs	r2, #1
 1806 002a 1A73     		strb	r2, [r3, #12]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1807              		.loc 1 1213 0
 1808 002c 7B68     		ldr	r3, [r7, #4]
 1809 002e 0022     		movs	r2, #0
 1810 0030 5A60     		str	r2, [r3, #4]
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1811              		.loc 1 1214 0
 1812 0032 0C37     		adds	r7, r7, #12
 1813 0034 BD46     		mov	sp, r7
 1814              		@ sp needed
 1815 0036 5DF8047B 		ldr	r7, [sp], #4
 1816 003a 7047     		bx	lr
 1817              		.cfi_endproc
 1818              	.LFE127:
 1820              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1821              		.align	2
 1822              		.global	RTC_GetAlarm
 1823              		.thumb
 1824              		.thumb_func
 1826              	RTC_GetAlarm:
 1827              	.LFB128:
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1828              		.loc 1 1231 0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 24
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832 0000 80B5     		push	{r7, lr}
 1833              	.LCFI53:
 1834              		.cfi_def_cfa_offset 8
 1835              		.cfi_offset 7, -8
 1836              		.cfi_offset 14, -4
 1837 0002 86B0     		sub	sp, sp, #24
 1838              	.LCFI54:
 1839              		.cfi_def_cfa_offset 32
 1840 0004 00AF     		add	r7, sp, #0
 1841              	.LCFI55:
 1842              		.cfi_def_cfa_register 7
 1843 0006 F860     		str	r0, [r7, #12]
 1844 0008 B960     		str	r1, [r7, #8]
 1845 000a 7A60     		str	r2, [r7, #4]
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1846              		.loc 1 1232 0
 1847 000c 0023     		movs	r3, #0
 1848 000e 7B61     		str	r3, [r7, #20]
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1849              		.loc 1 1239 0
 1850 0010 BB68     		ldr	r3, [r7, #8]
 1851 0012 B3F5807F 		cmp	r3, #256
 1852 0016 06D1     		bne	.L82
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1853              		.loc 1 1241 0
 1854 0018 4FF42053 		mov	r3, #10240
 1855 001c C4F20003 		movt	r3, 16384
 1856 0020 DB69     		ldr	r3, [r3, #28]
 1857 0022 7B61     		str	r3, [r7, #20]
 1858 0024 05E0     		b	.L83
 1859              	.L82:
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1860              		.loc 1 1245 0
 1861 0026 4FF42053 		mov	r3, #10240
 1862 002a C4F20003 		movt	r3, 16384
 1863 002e 1B6A     		ldr	r3, [r3, #32]
 1864 0030 7B61     		str	r3, [r7, #20]
 1865              	.L83:
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1866              		.loc 1 1249 0
 1867 0032 7B69     		ldr	r3, [r7, #20]
 1868 0034 03F47C13 		and	r3, r3, #4128768
 1869 0038 1B0C     		lsrs	r3, r3, #16
 1870 003a DAB2     		uxtb	r2, r3
 1871 003c 7B68     		ldr	r3, [r7, #4]
 1872 003e 1A70     		strb	r2, [r3]
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1873              		.loc 1 1251 0
 1874 0040 7B69     		ldr	r3, [r7, #20]
 1875 0042 03F4FE43 		and	r3, r3, #32512
 1876 0046 1B0A     		lsrs	r3, r3, #8
 1877 0048 DAB2     		uxtb	r2, r3
 1878 004a 7B68     		ldr	r3, [r7, #4]
 1879 004c 5A70     		strb	r2, [r3, #1]
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1880              		.loc 1 1253 0
 1881 004e 7B69     		ldr	r3, [r7, #20]
 1882 0050 DBB2     		uxtb	r3, r3
 1883 0052 03F07F03 		and	r3, r3, #127
 1884 0056 DAB2     		uxtb	r2, r3
 1885 0058 7B68     		ldr	r3, [r7, #4]
 1886 005a 9A70     		strb	r2, [r3, #2]
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1887              		.loc 1 1255 0
 1888 005c 7B69     		ldr	r3, [r7, #20]
 1889 005e 03F48003 		and	r3, r3, #4194304
 1890 0062 1B0C     		lsrs	r3, r3, #16
 1891 0064 DAB2     		uxtb	r2, r3
 1892 0066 7B68     		ldr	r3, [r7, #4]
 1893 0068 DA70     		strb	r2, [r3, #3]
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1894              		.loc 1 1256 0
 1895 006a 7B69     		ldr	r3, [r7, #20]
 1896 006c 03F07C53 		and	r3, r3, #1056964608
 1897 0070 1B0E     		lsrs	r3, r3, #24
 1898 0072 DAB2     		uxtb	r2, r3
 1899 0074 7B68     		ldr	r3, [r7, #4]
 1900 0076 1A73     		strb	r2, [r3, #12]
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1901              		.loc 1 1257 0
 1902 0078 7B69     		ldr	r3, [r7, #20]
 1903 007a 03F08042 		and	r2, r3, #1073741824
 1904 007e 7B68     		ldr	r3, [r7, #4]
 1905 0080 9A60     		str	r2, [r3, #8]
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1906              		.loc 1 1258 0
 1907 0082 7B69     		ldr	r3, [r7, #20]
 1908 0084 03F08032 		and	r2, r3, #-2139062144
 1909 0088 7B68     		ldr	r3, [r7, #4]
 1910 008a 5A60     		str	r2, [r3, #4]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1911              		.loc 1 1260 0
 1912 008c FB68     		ldr	r3, [r7, #12]
 1913 008e 002B     		cmp	r3, #0
 1914 0090 23D1     		bne	.L81
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1915              		.loc 1 1262 0
 1916 0092 7B68     		ldr	r3, [r7, #4]
 1917 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1918 0096 1846     		mov	r0, r3
 1919 0098 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1920 009c 0346     		mov	r3, r0
 1921 009e 1A46     		mov	r2, r3
 1922 00a0 7B68     		ldr	r3, [r7, #4]
 1923 00a2 1A70     		strb	r2, [r3]
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1924              		.loc 1 1264 0
 1925 00a4 7B68     		ldr	r3, [r7, #4]
 1926 00a6 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1927 00a8 1846     		mov	r0, r3
 1928 00aa FFF7FEFF 		bl	RTC_Bcd2ToByte
 1929 00ae 0346     		mov	r3, r0
 1930 00b0 1A46     		mov	r2, r3
 1931 00b2 7B68     		ldr	r3, [r7, #4]
 1932 00b4 5A70     		strb	r2, [r3, #1]
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1933              		.loc 1 1266 0
 1934 00b6 7B68     		ldr	r3, [r7, #4]
 1935 00b8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1936 00ba 1846     		mov	r0, r3
 1937 00bc FFF7FEFF 		bl	RTC_Bcd2ToByte
 1938 00c0 0346     		mov	r3, r0
 1939 00c2 1A46     		mov	r2, r3
 1940 00c4 7B68     		ldr	r3, [r7, #4]
 1941 00c6 9A70     		strb	r2, [r3, #2]
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1942              		.loc 1 1268 0
 1943 00c8 7B68     		ldr	r3, [r7, #4]
 1944 00ca 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1945 00cc 1846     		mov	r0, r3
 1946 00ce FFF7FEFF 		bl	RTC_Bcd2ToByte
 1947 00d2 0346     		mov	r3, r0
 1948 00d4 1A46     		mov	r2, r3
 1949 00d6 7B68     		ldr	r3, [r7, #4]
 1950 00d8 1A73     		strb	r2, [r3, #12]
 1951              	.L81:
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1952              		.loc 1 1270 0
 1953 00da 1837     		adds	r7, r7, #24
 1954 00dc BD46     		mov	sp, r7
 1955              		@ sp needed
 1956 00de 80BD     		pop	{r7, pc}
 1957              		.cfi_endproc
 1958              	.LFE128:
 1960              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1961              		.align	2
 1962              		.global	RTC_AlarmCmd
 1963              		.thumb
 1964              		.thumb_func
 1966              	RTC_AlarmCmd:
 1967              	.LFB129:
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1968              		.loc 1 1285 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 24
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972              		@ link register save eliminated.
 1973 0000 80B4     		push	{r7}
 1974              	.LCFI56:
 1975              		.cfi_def_cfa_offset 4
 1976              		.cfi_offset 7, -4
 1977 0002 87B0     		sub	sp, sp, #28
 1978              	.LCFI57:
 1979              		.cfi_def_cfa_offset 32
 1980 0004 00AF     		add	r7, sp, #0
 1981              	.LCFI58:
 1982              		.cfi_def_cfa_register 7
 1983 0006 7860     		str	r0, [r7, #4]
 1984 0008 0B46     		mov	r3, r1
 1985 000a FB70     		strb	r3, [r7, #3]
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1986              		.loc 1 1286 0
 1987 000c 0023     		movs	r3, #0
 1988 000e FB60     		str	r3, [r7, #12]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1989              		.loc 1 1287 0
 1990 0010 0023     		movs	r3, #0
 1991 0012 3B61     		str	r3, [r7, #16]
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1992              		.loc 1 1288 0
 1993 0014 0023     		movs	r3, #0
 1994 0016 FB75     		strb	r3, [r7, #23]
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1995              		.loc 1 1295 0
 1996 0018 4FF42053 		mov	r3, #10240
 1997 001c C4F20003 		movt	r3, 16384
 1998 0020 CA22     		movs	r2, #202
 1999 0022 5A62     		str	r2, [r3, #36]
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2000              		.loc 1 1296 0
 2001 0024 4FF42053 		mov	r3, #10240
 2002 0028 C4F20003 		movt	r3, 16384
 2003 002c 5322     		movs	r2, #83
 2004 002e 5A62     		str	r2, [r3, #36]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2005              		.loc 1 1299 0
 2006 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2007 0032 002B     		cmp	r3, #0
 2008 0034 0ED0     		beq	.L86
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 2009              		.loc 1 1301 0
 2010 0036 4FF42053 		mov	r3, #10240
 2011 003a C4F20003 		movt	r3, 16384
 2012 003e 4FF42052 		mov	r2, #10240
 2013 0042 C4F20002 		movt	r2, 16384
 2014 0046 9168     		ldr	r1, [r2, #8]
 2015 0048 7A68     		ldr	r2, [r7, #4]
 2016 004a 0A43     		orrs	r2, r2, r1
 2017 004c 9A60     		str	r2, [r3, #8]
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2018              		.loc 1 1303 0
 2019 004e 0123     		movs	r3, #1
 2020 0050 FB75     		strb	r3, [r7, #23]
 2021 0052 2EE0     		b	.L87
 2022              	.L86:
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2023              		.loc 1 1308 0
 2024 0054 4FF42053 		mov	r3, #10240
 2025 0058 C4F20003 		movt	r3, 16384
 2026 005c 4FF42052 		mov	r2, #10240
 2027 0060 C4F20002 		movt	r2, 16384
 2028 0064 9168     		ldr	r1, [r2, #8]
 2029 0066 7A68     		ldr	r2, [r7, #4]
 2030 0068 D243     		mvns	r2, r2
 2031 006a 0A40     		ands	r2, r2, r1
 2032 006c 9A60     		str	r2, [r3, #8]
 2033              	.L89:
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2034              		.loc 1 1313 0 discriminator 1
 2035 006e 4FF42053 		mov	r3, #10240
 2036 0072 C4F20003 		movt	r3, 16384
 2037 0076 DA68     		ldr	r2, [r3, #12]
 2038 0078 7B68     		ldr	r3, [r7, #4]
 2039 007a 1B0A     		lsrs	r3, r3, #8
 2040 007c 1340     		ands	r3, r3, r2
 2041 007e 3B61     		str	r3, [r7, #16]
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2042              		.loc 1 1314 0 discriminator 1
 2043 0080 FB68     		ldr	r3, [r7, #12]
 2044 0082 0133     		adds	r3, r3, #1
 2045 0084 FB60     		str	r3, [r7, #12]
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2046              		.loc 1 1315 0 discriminator 1
 2047 0086 FB68     		ldr	r3, [r7, #12]
 2048 0088 B3F5803F 		cmp	r3, #65536
 2049 008c 02D0     		beq	.L88
 2050 008e 3B69     		ldr	r3, [r7, #16]
 2051 0090 002B     		cmp	r3, #0
 2052 0092 ECD0     		beq	.L89
 2053              	.L88:
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2054              		.loc 1 1317 0
 2055 0094 4FF42053 		mov	r3, #10240
 2056 0098 C4F20003 		movt	r3, 16384
 2057 009c DA68     		ldr	r2, [r3, #12]
 2058 009e 7B68     		ldr	r3, [r7, #4]
 2059 00a0 1B0A     		lsrs	r3, r3, #8
 2060 00a2 1340     		ands	r3, r3, r2
 2061 00a4 002B     		cmp	r3, #0
 2062 00a6 02D1     		bne	.L90
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2063              		.loc 1 1319 0
 2064 00a8 0023     		movs	r3, #0
 2065 00aa FB75     		strb	r3, [r7, #23]
 2066 00ac 01E0     		b	.L87
 2067              	.L90:
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2068              		.loc 1 1323 0
 2069 00ae 0123     		movs	r3, #1
 2070 00b0 FB75     		strb	r3, [r7, #23]
 2071              	.L87:
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2072              		.loc 1 1328 0
 2073 00b2 4FF42053 		mov	r3, #10240
 2074 00b6 C4F20003 		movt	r3, 16384
 2075 00ba FF22     		movs	r2, #255
 2076 00bc 5A62     		str	r2, [r3, #36]
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2077              		.loc 1 1330 0
 2078 00be FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2079              		.loc 1 1331 0
 2080 00c0 1846     		mov	r0, r3
 2081 00c2 1C37     		adds	r7, r7, #28
 2082 00c4 BD46     		mov	sp, r7
 2083              		@ sp needed
 2084 00c6 5DF8047B 		ldr	r7, [sp], #4
 2085 00ca 7047     		bx	lr
 2086              		.cfi_endproc
 2087              	.LFE129:
 2089              		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2090              		.align	2
 2091              		.global	RTC_AlarmSubSecondConfig
 2092              		.thumb
 2093              		.thumb_func
 2095              	RTC_AlarmSubSecondConfig:
 2096              	.LFB130:
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2097              		.loc 1 1379 0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 24
 2100              		@ frame_needed = 1, uses_anonymous_args = 0
 2101              		@ link register save eliminated.
 2102 0000 80B4     		push	{r7}
 2103              	.LCFI59:
 2104              		.cfi_def_cfa_offset 4
 2105              		.cfi_offset 7, -4
 2106 0002 87B0     		sub	sp, sp, #28
 2107              	.LCFI60:
 2108              		.cfi_def_cfa_offset 32
 2109 0004 00AF     		add	r7, sp, #0
 2110              	.LCFI61:
 2111              		.cfi_def_cfa_register 7
 2112 0006 F860     		str	r0, [r7, #12]
 2113 0008 B960     		str	r1, [r7, #8]
 2114 000a 7A60     		str	r2, [r7, #4]
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2115              		.loc 1 1380 0
 2116 000c 0023     		movs	r3, #0
 2117 000e 7B61     		str	r3, [r7, #20]
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2118              		.loc 1 1388 0
 2119 0010 4FF42053 		mov	r3, #10240
 2120 0014 C4F20003 		movt	r3, 16384
 2121 0018 CA22     		movs	r2, #202
 2122 001a 5A62     		str	r2, [r3, #36]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2123              		.loc 1 1389 0
 2124 001c 4FF42053 		mov	r3, #10240
 2125 0020 C4F20003 		movt	r3, 16384
 2126 0024 5322     		movs	r2, #83
 2127 0026 5A62     		str	r2, [r3, #36]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2128              		.loc 1 1392 0
 2129 0028 BA68     		ldr	r2, [r7, #8]
 2130 002a 7B68     		ldr	r3, [r7, #4]
 2131 002c 1343     		orrs	r3, r3, r2
 2132 002e 7B61     		str	r3, [r7, #20]
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2133              		.loc 1 1394 0
 2134 0030 FB68     		ldr	r3, [r7, #12]
 2135 0032 B3F5807F 		cmp	r3, #256
 2136 0036 06D1     		bne	.L93
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2137              		.loc 1 1397 0
 2138 0038 4FF42053 		mov	r3, #10240
 2139 003c C4F20003 		movt	r3, 16384
 2140 0040 7A69     		ldr	r2, [r7, #20]
 2141 0042 5A64     		str	r2, [r3, #68]
 2142 0044 05E0     		b	.L94
 2143              	.L93:
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2144              		.loc 1 1402 0
 2145 0046 4FF42053 		mov	r3, #10240
 2146 004a C4F20003 		movt	r3, 16384
 2147 004e 7A69     		ldr	r2, [r7, #20]
 2148 0050 9A64     		str	r2, [r3, #72]
 2149              	.L94:
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2150              		.loc 1 1406 0
 2151 0052 4FF42053 		mov	r3, #10240
 2152 0056 C4F20003 		movt	r3, 16384
 2153 005a FF22     		movs	r2, #255
 2154 005c 5A62     		str	r2, [r3, #36]
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2155              		.loc 1 1408 0
 2156 005e 1C37     		adds	r7, r7, #28
 2157 0060 BD46     		mov	sp, r7
 2158              		@ sp needed
 2159 0062 5DF8047B 		ldr	r7, [sp], #4
 2160 0066 7047     		bx	lr
 2161              		.cfi_endproc
 2162              	.LFE130:
 2164              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2165              		.align	2
 2166              		.global	RTC_GetAlarmSubSecond
 2167              		.thumb
 2168              		.thumb_func
 2170              	RTC_GetAlarmSubSecond:
 2171              	.LFB131:
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2172              		.loc 1 1420 0
 2173              		.cfi_startproc
 2174              		@ args = 0, pretend = 0, frame = 16
 2175              		@ frame_needed = 1, uses_anonymous_args = 0
 2176              		@ link register save eliminated.
 2177 0000 80B4     		push	{r7}
 2178              	.LCFI62:
 2179              		.cfi_def_cfa_offset 4
 2180              		.cfi_offset 7, -4
 2181 0002 85B0     		sub	sp, sp, #20
 2182              	.LCFI63:
 2183              		.cfi_def_cfa_offset 24
 2184 0004 00AF     		add	r7, sp, #0
 2185              	.LCFI64:
 2186              		.cfi_def_cfa_register 7
 2187 0006 7860     		str	r0, [r7, #4]
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2188              		.loc 1 1421 0
 2189 0008 0023     		movs	r3, #0
 2190 000a FB60     		str	r3, [r7, #12]
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2191              		.loc 1 1424 0
 2192 000c 7B68     		ldr	r3, [r7, #4]
 2193 000e B3F5807F 		cmp	r3, #256
 2194 0012 08D1     		bne	.L96
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2195              		.loc 1 1426 0
 2196 0014 4FF42053 		mov	r3, #10240
 2197 0018 C4F20003 		movt	r3, 16384
 2198 001c 5B6C     		ldr	r3, [r3, #68]
 2199 001e C3F30E03 		ubfx	r3, r3, #0, #15
 2200 0022 FB60     		str	r3, [r7, #12]
 2201 0024 07E0     		b	.L97
 2202              	.L96:
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2203              		.loc 1 1430 0
 2204 0026 4FF42053 		mov	r3, #10240
 2205 002a C4F20003 		movt	r3, 16384
 2206 002e 9B6C     		ldr	r3, [r3, #72]
 2207 0030 C3F30E03 		ubfx	r3, r3, #0, #15
 2208 0034 FB60     		str	r3, [r7, #12]
 2209              	.L97:
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2210              		.loc 1 1433 0
 2211 0036 FB68     		ldr	r3, [r7, #12]
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2212              		.loc 1 1434 0
 2213 0038 1846     		mov	r0, r3
 2214 003a 1437     		adds	r7, r7, #20
 2215 003c BD46     		mov	sp, r7
 2216              		@ sp needed
 2217 003e 5DF8047B 		ldr	r7, [sp], #4
 2218 0042 7047     		bx	lr
 2219              		.cfi_endproc
 2220              	.LFE131:
 2222              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2223              		.align	2
 2224              		.global	RTC_WakeUpClockConfig
 2225              		.thumb
 2226              		.thumb_func
 2228              	RTC_WakeUpClockConfig:
 2229              	.LFB132:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2230              		.loc 1 1469 0
 2231              		.cfi_startproc
 2232              		@ args = 0, pretend = 0, frame = 8
 2233              		@ frame_needed = 1, uses_anonymous_args = 0
 2234              		@ link register save eliminated.
 2235 0000 80B4     		push	{r7}
 2236              	.LCFI65:
 2237              		.cfi_def_cfa_offset 4
 2238              		.cfi_offset 7, -4
 2239 0002 83B0     		sub	sp, sp, #12
 2240              	.LCFI66:
 2241              		.cfi_def_cfa_offset 16
 2242 0004 00AF     		add	r7, sp, #0
 2243              	.LCFI67:
 2244              		.cfi_def_cfa_register 7
 2245 0006 7860     		str	r0, [r7, #4]
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2246              		.loc 1 1474 0
 2247 0008 4FF42053 		mov	r3, #10240
 2248 000c C4F20003 		movt	r3, 16384
 2249 0010 CA22     		movs	r2, #202
 2250 0012 5A62     		str	r2, [r3, #36]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2251              		.loc 1 1475 0
 2252 0014 4FF42053 		mov	r3, #10240
 2253 0018 C4F20003 		movt	r3, 16384
 2254 001c 5322     		movs	r2, #83
 2255 001e 5A62     		str	r2, [r3, #36]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2256              		.loc 1 1478 0
 2257 0020 4FF42053 		mov	r3, #10240
 2258 0024 C4F20003 		movt	r3, 16384
 2259 0028 4FF42052 		mov	r2, #10240
 2260 002c C4F20002 		movt	r2, 16384
 2261 0030 9268     		ldr	r2, [r2, #8]
 2262 0032 22F00702 		bic	r2, r2, #7
 2263 0036 9A60     		str	r2, [r3, #8]
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2264              		.loc 1 1481 0
 2265 0038 4FF42053 		mov	r3, #10240
 2266 003c C4F20003 		movt	r3, 16384
 2267 0040 4FF42052 		mov	r2, #10240
 2268 0044 C4F20002 		movt	r2, 16384
 2269 0048 9168     		ldr	r1, [r2, #8]
 2270 004a 7A68     		ldr	r2, [r7, #4]
 2271 004c 0A43     		orrs	r2, r2, r1
 2272 004e 9A60     		str	r2, [r3, #8]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2273              		.loc 1 1484 0
 2274 0050 4FF42053 		mov	r3, #10240
 2275 0054 C4F20003 		movt	r3, 16384
 2276 0058 FF22     		movs	r2, #255
 2277 005a 5A62     		str	r2, [r3, #36]
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2278              		.loc 1 1485 0
 2279 005c 0C37     		adds	r7, r7, #12
 2280 005e BD46     		mov	sp, r7
 2281              		@ sp needed
 2282 0060 5DF8047B 		ldr	r7, [sp], #4
 2283 0064 7047     		bx	lr
 2284              		.cfi_endproc
 2285              	.LFE132:
 2287 0066 00BF     		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2288              		.align	2
 2289              		.global	RTC_SetWakeUpCounter
 2290              		.thumb
 2291              		.thumb_func
 2293              	RTC_SetWakeUpCounter:
 2294              	.LFB133:
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2295              		.loc 1 1496 0
 2296              		.cfi_startproc
 2297              		@ args = 0, pretend = 0, frame = 8
 2298              		@ frame_needed = 1, uses_anonymous_args = 0
 2299              		@ link register save eliminated.
 2300 0000 80B4     		push	{r7}
 2301              	.LCFI68:
 2302              		.cfi_def_cfa_offset 4
 2303              		.cfi_offset 7, -4
 2304 0002 83B0     		sub	sp, sp, #12
 2305              	.LCFI69:
 2306              		.cfi_def_cfa_offset 16
 2307 0004 00AF     		add	r7, sp, #0
 2308              	.LCFI70:
 2309              		.cfi_def_cfa_register 7
 2310 0006 7860     		str	r0, [r7, #4]
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2311              		.loc 1 1501 0
 2312 0008 4FF42053 		mov	r3, #10240
 2313 000c C4F20003 		movt	r3, 16384
 2314 0010 CA22     		movs	r2, #202
 2315 0012 5A62     		str	r2, [r3, #36]
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2316              		.loc 1 1502 0
 2317 0014 4FF42053 		mov	r3, #10240
 2318 0018 C4F20003 		movt	r3, 16384
 2319 001c 5322     		movs	r2, #83
 2320 001e 5A62     		str	r2, [r3, #36]
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2321              		.loc 1 1505 0
 2322 0020 4FF42053 		mov	r3, #10240
 2323 0024 C4F20003 		movt	r3, 16384
 2324 0028 7A68     		ldr	r2, [r7, #4]
 2325 002a 5A61     		str	r2, [r3, #20]
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2326              		.loc 1 1508 0
 2327 002c 4FF42053 		mov	r3, #10240
 2328 0030 C4F20003 		movt	r3, 16384
 2329 0034 FF22     		movs	r2, #255
 2330 0036 5A62     		str	r2, [r3, #36]
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2331              		.loc 1 1509 0
 2332 0038 0C37     		adds	r7, r7, #12
 2333 003a BD46     		mov	sp, r7
 2334              		@ sp needed
 2335 003c 5DF8047B 		ldr	r7, [sp], #4
 2336 0040 7047     		bx	lr
 2337              		.cfi_endproc
 2338              	.LFE133:
 2340 0042 00BF     		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2341              		.align	2
 2342              		.global	RTC_GetWakeUpCounter
 2343              		.thumb
 2344              		.thumb_func
 2346              	RTC_GetWakeUpCounter:
 2347              	.LFB134:
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2348              		.loc 1 1517 0
 2349              		.cfi_startproc
 2350              		@ args = 0, pretend = 0, frame = 0
 2351              		@ frame_needed = 1, uses_anonymous_args = 0
 2352              		@ link register save eliminated.
 2353 0000 80B4     		push	{r7}
 2354              	.LCFI71:
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 7, -4
 2357 0002 00AF     		add	r7, sp, #0
 2358              	.LCFI72:
 2359              		.cfi_def_cfa_register 7
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2360              		.loc 1 1519 0
 2361 0004 4FF42053 		mov	r3, #10240
 2362 0008 C4F20003 		movt	r3, 16384
 2363 000c 5B69     		ldr	r3, [r3, #20]
 2364 000e 9BB2     		uxth	r3, r3
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2365              		.loc 1 1520 0
 2366 0010 1846     		mov	r0, r3
 2367 0012 BD46     		mov	sp, r7
 2368              		@ sp needed
 2369 0014 5DF8047B 		ldr	r7, [sp], #4
 2370 0018 7047     		bx	lr
 2371              		.cfi_endproc
 2372              	.LFE134:
 2374 001a 00BF     		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2375              		.align	2
 2376              		.global	RTC_WakeUpCmd
 2377              		.thumb
 2378              		.thumb_func
 2380              	RTC_WakeUpCmd:
 2381              	.LFB135:
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2382              		.loc 1 1529 0
 2383              		.cfi_startproc
 2384              		@ args = 0, pretend = 0, frame = 24
 2385              		@ frame_needed = 1, uses_anonymous_args = 0
 2386              		@ link register save eliminated.
 2387 0000 80B4     		push	{r7}
 2388              	.LCFI73:
 2389              		.cfi_def_cfa_offset 4
 2390              		.cfi_offset 7, -4
 2391 0002 87B0     		sub	sp, sp, #28
 2392              	.LCFI74:
 2393              		.cfi_def_cfa_offset 32
 2394 0004 00AF     		add	r7, sp, #0
 2395              	.LCFI75:
 2396              		.cfi_def_cfa_register 7
 2397 0006 0346     		mov	r3, r0
 2398 0008 FB71     		strb	r3, [r7, #7]
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2399              		.loc 1 1530 0
 2400 000a 0023     		movs	r3, #0
 2401 000c FB60     		str	r3, [r7, #12]
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2402              		.loc 1 1531 0
 2403 000e 0023     		movs	r3, #0
 2404 0010 3B61     		str	r3, [r7, #16]
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2405              		.loc 1 1532 0
 2406 0012 0023     		movs	r3, #0
 2407 0014 FB75     		strb	r3, [r7, #23]
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2408              		.loc 1 1538 0
 2409 0016 4FF42053 		mov	r3, #10240
 2410 001a C4F20003 		movt	r3, 16384
 2411 001e CA22     		movs	r2, #202
 2412 0020 5A62     		str	r2, [r3, #36]
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2413              		.loc 1 1539 0
 2414 0022 4FF42053 		mov	r3, #10240
 2415 0026 C4F20003 		movt	r3, 16384
 2416 002a 5322     		movs	r2, #83
 2417 002c 5A62     		str	r2, [r3, #36]
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2418              		.loc 1 1541 0
 2419 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2420 0030 002B     		cmp	r3, #0
 2421 0032 0ED0     		beq	.L104
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2422              		.loc 1 1544 0
 2423 0034 4FF42053 		mov	r3, #10240
 2424 0038 C4F20003 		movt	r3, 16384
 2425 003c 4FF42052 		mov	r2, #10240
 2426 0040 C4F20002 		movt	r2, 16384
 2427 0044 9268     		ldr	r2, [r2, #8]
 2428 0046 42F48062 		orr	r2, r2, #1024
 2429 004a 9A60     		str	r2, [r3, #8]
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2430              		.loc 1 1545 0
 2431 004c 0123     		movs	r3, #1
 2432 004e FB75     		strb	r3, [r7, #23]
 2433 0050 2BE0     		b	.L105
 2434              	.L104:
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2435              		.loc 1 1550 0
 2436 0052 4FF42053 		mov	r3, #10240
 2437 0056 C4F20003 		movt	r3, 16384
 2438 005a 4FF42052 		mov	r2, #10240
 2439 005e C4F20002 		movt	r2, 16384
 2440 0062 9268     		ldr	r2, [r2, #8]
 2441 0064 22F48062 		bic	r2, r2, #1024
 2442 0068 9A60     		str	r2, [r3, #8]
 2443              	.L107:
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2444              		.loc 1 1554 0 discriminator 1
 2445 006a 4FF42053 		mov	r3, #10240
 2446 006e C4F20003 		movt	r3, 16384
 2447 0072 DB68     		ldr	r3, [r3, #12]
 2448 0074 03F00403 		and	r3, r3, #4
 2449 0078 3B61     		str	r3, [r7, #16]
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2450              		.loc 1 1555 0 discriminator 1
 2451 007a FB68     		ldr	r3, [r7, #12]
 2452 007c 0133     		adds	r3, r3, #1
 2453 007e FB60     		str	r3, [r7, #12]
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2454              		.loc 1 1556 0 discriminator 1
 2455 0080 FB68     		ldr	r3, [r7, #12]
 2456 0082 B3F5803F 		cmp	r3, #65536
 2457 0086 02D0     		beq	.L106
 2458 0088 3B69     		ldr	r3, [r7, #16]
 2459 008a 002B     		cmp	r3, #0
 2460 008c EDD0     		beq	.L107
 2461              	.L106:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2462              		.loc 1 1558 0
 2463 008e 4FF42053 		mov	r3, #10240
 2464 0092 C4F20003 		movt	r3, 16384
 2465 0096 DB68     		ldr	r3, [r3, #12]
 2466 0098 03F00403 		and	r3, r3, #4
 2467 009c 002B     		cmp	r3, #0
 2468 009e 02D1     		bne	.L108
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2469              		.loc 1 1560 0
 2470 00a0 0023     		movs	r3, #0
 2471 00a2 FB75     		strb	r3, [r7, #23]
 2472 00a4 01E0     		b	.L105
 2473              	.L108:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2474              		.loc 1 1564 0
 2475 00a6 0123     		movs	r3, #1
 2476 00a8 FB75     		strb	r3, [r7, #23]
 2477              	.L105:
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2478              		.loc 1 1569 0
 2479 00aa 4FF42053 		mov	r3, #10240
 2480 00ae C4F20003 		movt	r3, 16384
 2481 00b2 FF22     		movs	r2, #255
 2482 00b4 5A62     		str	r2, [r3, #36]
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2483              		.loc 1 1571 0
 2484 00b6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2485              		.loc 1 1572 0
 2486 00b8 1846     		mov	r0, r3
 2487 00ba 1C37     		adds	r7, r7, #28
 2488 00bc BD46     		mov	sp, r7
 2489              		@ sp needed
 2490 00be 5DF8047B 		ldr	r7, [sp], #4
 2491 00c2 7047     		bx	lr
 2492              		.cfi_endproc
 2493              	.LFE135:
 2495              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2496              		.align	2
 2497              		.global	RTC_DayLightSavingConfig
 2498              		.thumb
 2499              		.thumb_func
 2501              	RTC_DayLightSavingConfig:
 2502              	.LFB136:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2503              		.loc 1 1606 0
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 8
 2506              		@ frame_needed = 1, uses_anonymous_args = 0
 2507              		@ link register save eliminated.
 2508 0000 80B4     		push	{r7}
 2509              	.LCFI76:
 2510              		.cfi_def_cfa_offset 4
 2511              		.cfi_offset 7, -4
 2512 0002 83B0     		sub	sp, sp, #12
 2513              	.LCFI77:
 2514              		.cfi_def_cfa_offset 16
 2515 0004 00AF     		add	r7, sp, #0
 2516              	.LCFI78:
 2517              		.cfi_def_cfa_register 7
 2518 0006 7860     		str	r0, [r7, #4]
 2519 0008 3960     		str	r1, [r7]
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2520              		.loc 1 1612 0
 2521 000a 4FF42053 		mov	r3, #10240
 2522 000e C4F20003 		movt	r3, 16384
 2523 0012 CA22     		movs	r2, #202
 2524 0014 5A62     		str	r2, [r3, #36]
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2525              		.loc 1 1613 0
 2526 0016 4FF42053 		mov	r3, #10240
 2527 001a C4F20003 		movt	r3, 16384
 2528 001e 5322     		movs	r2, #83
 2529 0020 5A62     		str	r2, [r3, #36]
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2530              		.loc 1 1616 0
 2531 0022 4FF42053 		mov	r3, #10240
 2532 0026 C4F20003 		movt	r3, 16384
 2533 002a 4FF42052 		mov	r2, #10240
 2534 002e C4F20002 		movt	r2, 16384
 2535 0032 9268     		ldr	r2, [r2, #8]
 2536 0034 22F48022 		bic	r2, r2, #262144
 2537 0038 9A60     		str	r2, [r3, #8]
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2538              		.loc 1 1619 0
 2539 003a 4FF42053 		mov	r3, #10240
 2540 003e C4F20003 		movt	r3, 16384
 2541 0042 4FF42052 		mov	r2, #10240
 2542 0046 C4F20002 		movt	r2, 16384
 2543 004a 9168     		ldr	r1, [r2, #8]
 2544 004c 7868     		ldr	r0, [r7, #4]
 2545 004e 3A68     		ldr	r2, [r7]
 2546 0050 0243     		orrs	r2, r2, r0
 2547 0052 0A43     		orrs	r2, r2, r1
 2548 0054 9A60     		str	r2, [r3, #8]
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2549              		.loc 1 1622 0
 2550 0056 4FF42053 		mov	r3, #10240
 2551 005a C4F20003 		movt	r3, 16384
 2552 005e FF22     		movs	r2, #255
 2553 0060 5A62     		str	r2, [r3, #36]
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2554              		.loc 1 1623 0
 2555 0062 0C37     		adds	r7, r7, #12
 2556 0064 BD46     		mov	sp, r7
 2557              		@ sp needed
 2558 0066 5DF8047B 		ldr	r7, [sp], #4
 2559 006a 7047     		bx	lr
 2560              		.cfi_endproc
 2561              	.LFE136:
 2563              		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2564              		.align	2
 2565              		.global	RTC_GetStoreOperation
 2566              		.thumb
 2567              		.thumb_func
 2569              	RTC_GetStoreOperation:
 2570              	.LFB137:
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2571              		.loc 1 1633 0
 2572              		.cfi_startproc
 2573              		@ args = 0, pretend = 0, frame = 0
 2574              		@ frame_needed = 1, uses_anonymous_args = 0
 2575              		@ link register save eliminated.
 2576 0000 80B4     		push	{r7}
 2577              	.LCFI79:
 2578              		.cfi_def_cfa_offset 4
 2579              		.cfi_offset 7, -4
 2580 0002 00AF     		add	r7, sp, #0
 2581              	.LCFI80:
 2582              		.cfi_def_cfa_register 7
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2583              		.loc 1 1634 0
 2584 0004 4FF42053 		mov	r3, #10240
 2585 0008 C4F20003 		movt	r3, 16384
 2586 000c 9B68     		ldr	r3, [r3, #8]
 2587 000e 03F48023 		and	r3, r3, #262144
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2588              		.loc 1 1635 0
 2589 0012 1846     		mov	r0, r3
 2590 0014 BD46     		mov	sp, r7
 2591              		@ sp needed
 2592 0016 5DF8047B 		ldr	r7, [sp], #4
 2593 001a 7047     		bx	lr
 2594              		.cfi_endproc
 2595              	.LFE137:
 2597              		.section	.text.RTC_OutputConfig,"ax",%progbits
 2598              		.align	2
 2599              		.global	RTC_OutputConfig
 2600              		.thumb
 2601              		.thumb_func
 2603              	RTC_OutputConfig:
 2604              	.LFB138:
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2605              		.loc 1 1672 0
 2606              		.cfi_startproc
 2607              		@ args = 0, pretend = 0, frame = 8
 2608              		@ frame_needed = 1, uses_anonymous_args = 0
 2609              		@ link register save eliminated.
 2610 0000 80B4     		push	{r7}
 2611              	.LCFI81:
 2612              		.cfi_def_cfa_offset 4
 2613              		.cfi_offset 7, -4
 2614 0002 83B0     		sub	sp, sp, #12
 2615              	.LCFI82:
 2616              		.cfi_def_cfa_offset 16
 2617 0004 00AF     		add	r7, sp, #0
 2618              	.LCFI83:
 2619              		.cfi_def_cfa_register 7
 2620 0006 7860     		str	r0, [r7, #4]
 2621 0008 3960     		str	r1, [r7]
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2622              		.loc 1 1678 0
 2623 000a 4FF42053 		mov	r3, #10240
 2624 000e C4F20003 		movt	r3, 16384
 2625 0012 CA22     		movs	r2, #202
 2626 0014 5A62     		str	r2, [r3, #36]
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2627              		.loc 1 1679 0
 2628 0016 4FF42053 		mov	r3, #10240
 2629 001a C4F20003 		movt	r3, 16384
 2630 001e 5322     		movs	r2, #83
 2631 0020 5A62     		str	r2, [r3, #36]
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2632              		.loc 1 1682 0
 2633 0022 4FF42053 		mov	r3, #10240
 2634 0026 C4F20003 		movt	r3, 16384
 2635 002a 4FF42052 		mov	r2, #10240
 2636 002e C4F20002 		movt	r2, 16384
 2637 0032 9268     		ldr	r2, [r2, #8]
 2638 0034 22F4E002 		bic	r2, r2, #7340032
 2639 0038 9A60     		str	r2, [r3, #8]
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2640              		.loc 1 1685 0
 2641 003a 4FF42053 		mov	r3, #10240
 2642 003e C4F20003 		movt	r3, 16384
 2643 0042 4FF42052 		mov	r2, #10240
 2644 0046 C4F20002 		movt	r2, 16384
 2645 004a 9168     		ldr	r1, [r2, #8]
 2646 004c 7868     		ldr	r0, [r7, #4]
 2647 004e 3A68     		ldr	r2, [r7]
 2648 0050 0243     		orrs	r2, r2, r0
 2649 0052 0A43     		orrs	r2, r2, r1
 2650 0054 9A60     		str	r2, [r3, #8]
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2651              		.loc 1 1688 0
 2652 0056 4FF42053 		mov	r3, #10240
 2653 005a C4F20003 		movt	r3, 16384
 2654 005e FF22     		movs	r2, #255
 2655 0060 5A62     		str	r2, [r3, #36]
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2656              		.loc 1 1689 0
 2657 0062 0C37     		adds	r7, r7, #12
 2658 0064 BD46     		mov	sp, r7
 2659              		@ sp needed
 2660 0066 5DF8047B 		ldr	r7, [sp], #4
 2661 006a 7047     		bx	lr
 2662              		.cfi_endproc
 2663              	.LFE138:
 2665              		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2666              		.align	2
 2667              		.global	RTC_CoarseCalibConfig
 2668              		.thumb
 2669              		.thumb_func
 2671              	RTC_CoarseCalibConfig:
 2672              	.LFB139:
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2673              		.loc 1 1726 0
 2674              		.cfi_startproc
 2675              		@ args = 0, pretend = 0, frame = 16
 2676              		@ frame_needed = 1, uses_anonymous_args = 0
 2677 0000 80B5     		push	{r7, lr}
 2678              	.LCFI84:
 2679              		.cfi_def_cfa_offset 8
 2680              		.cfi_offset 7, -8
 2681              		.cfi_offset 14, -4
 2682 0002 84B0     		sub	sp, sp, #16
 2683              	.LCFI85:
 2684              		.cfi_def_cfa_offset 24
 2685 0004 00AF     		add	r7, sp, #0
 2686              	.LCFI86:
 2687              		.cfi_def_cfa_register 7
 2688 0006 7860     		str	r0, [r7, #4]
 2689 0008 3960     		str	r1, [r7]
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2690              		.loc 1 1727 0
 2691 000a 0023     		movs	r3, #0
 2692 000c FB73     		strb	r3, [r7, #15]
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2693              		.loc 1 1734 0
 2694 000e 4FF42053 		mov	r3, #10240
 2695 0012 C4F20003 		movt	r3, 16384
 2696 0016 CA22     		movs	r2, #202
 2697 0018 5A62     		str	r2, [r3, #36]
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2698              		.loc 1 1735 0
 2699 001a 4FF42053 		mov	r3, #10240
 2700 001e C4F20003 		movt	r3, 16384
 2701 0022 5322     		movs	r2, #83
 2702 0024 5A62     		str	r2, [r3, #36]
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2703              		.loc 1 1738 0
 2704 0026 FFF7FEFF 		bl	RTC_EnterInitMode
 2705 002a 0346     		mov	r3, r0
 2706 002c 002B     		cmp	r3, #0
 2707 002e 02D1     		bne	.L115
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2708              		.loc 1 1740 0
 2709 0030 0023     		movs	r3, #0
 2710 0032 FB73     		strb	r3, [r7, #15]
 2711 0034 0BE0     		b	.L116
 2712              	.L115:
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2713              		.loc 1 1745 0
 2714 0036 4FF42053 		mov	r3, #10240
 2715 003a C4F20003 		movt	r3, 16384
 2716 003e 7968     		ldr	r1, [r7, #4]
 2717 0040 3A68     		ldr	r2, [r7]
 2718 0042 0A43     		orrs	r2, r2, r1
 2719 0044 9A61     		str	r2, [r3, #24]
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2720              		.loc 1 1747 0
 2721 0046 FFF7FEFF 		bl	RTC_ExitInitMode
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2722              		.loc 1 1749 0
 2723 004a 0123     		movs	r3, #1
 2724 004c FB73     		strb	r3, [r7, #15]
 2725              	.L116:
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2726              		.loc 1 1753 0
 2727 004e 4FF42053 		mov	r3, #10240
 2728 0052 C4F20003 		movt	r3, 16384
 2729 0056 FF22     		movs	r2, #255
 2730 0058 5A62     		str	r2, [r3, #36]
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2731              		.loc 1 1755 0
 2732 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2733              		.loc 1 1756 0
 2734 005c 1846     		mov	r0, r3
 2735 005e 1037     		adds	r7, r7, #16
 2736 0060 BD46     		mov	sp, r7
 2737              		@ sp needed
 2738 0062 80BD     		pop	{r7, pc}
 2739              		.cfi_endproc
 2740              	.LFE139:
 2742              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2743              		.align	2
 2744              		.global	RTC_CoarseCalibCmd
 2745              		.thumb
 2746              		.thumb_func
 2748              	RTC_CoarseCalibCmd:
 2749              	.LFB140:
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2750              		.loc 1 1767 0
 2751              		.cfi_startproc
 2752              		@ args = 0, pretend = 0, frame = 16
 2753              		@ frame_needed = 1, uses_anonymous_args = 0
 2754 0000 80B5     		push	{r7, lr}
 2755              	.LCFI87:
 2756              		.cfi_def_cfa_offset 8
 2757              		.cfi_offset 7, -8
 2758              		.cfi_offset 14, -4
 2759 0002 84B0     		sub	sp, sp, #16
 2760              	.LCFI88:
 2761              		.cfi_def_cfa_offset 24
 2762 0004 00AF     		add	r7, sp, #0
 2763              	.LCFI89:
 2764              		.cfi_def_cfa_register 7
 2765 0006 0346     		mov	r3, r0
 2766 0008 FB71     		strb	r3, [r7, #7]
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2767              		.loc 1 1768 0
 2768 000a 0023     		movs	r3, #0
 2769 000c FB73     		strb	r3, [r7, #15]
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2770              		.loc 1 1774 0
 2771 000e 4FF42053 		mov	r3, #10240
 2772 0012 C4F20003 		movt	r3, 16384
 2773 0016 CA22     		movs	r2, #202
 2774 0018 5A62     		str	r2, [r3, #36]
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2775              		.loc 1 1775 0
 2776 001a 4FF42053 		mov	r3, #10240
 2777 001e C4F20003 		movt	r3, 16384
 2778 0022 5322     		movs	r2, #83
 2779 0024 5A62     		str	r2, [r3, #36]
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2780              		.loc 1 1778 0
 2781 0026 FFF7FEFF 		bl	RTC_EnterInitMode
 2782 002a 0346     		mov	r3, r0
 2783 002c 002B     		cmp	r3, #0
 2784 002e 02D1     		bne	.L119
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2785              		.loc 1 1780 0
 2786 0030 0023     		movs	r3, #0
 2787 0032 FB73     		strb	r3, [r7, #15]
 2788 0034 1FE0     		b	.L120
 2789              	.L119:
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2790              		.loc 1 1784 0
 2791 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2792 0038 002B     		cmp	r3, #0
 2793 003a 0CD0     		beq	.L121
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2794              		.loc 1 1787 0
 2795 003c 4FF42053 		mov	r3, #10240
 2796 0040 C4F20003 		movt	r3, 16384
 2797 0044 4FF42052 		mov	r2, #10240
 2798 0048 C4F20002 		movt	r2, 16384
 2799 004c 9268     		ldr	r2, [r2, #8]
 2800 004e 42F08002 		orr	r2, r2, #128
 2801 0052 9A60     		str	r2, [r3, #8]
 2802 0054 0BE0     		b	.L122
 2803              	.L121:
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2804              		.loc 1 1792 0
 2805 0056 4FF42053 		mov	r3, #10240
 2806 005a C4F20003 		movt	r3, 16384
 2807 005e 4FF42052 		mov	r2, #10240
 2808 0062 C4F20002 		movt	r2, 16384
 2809 0066 9268     		ldr	r2, [r2, #8]
 2810 0068 22F08002 		bic	r2, r2, #128
 2811 006c 9A60     		str	r2, [r3, #8]
 2812              	.L122:
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2813              		.loc 1 1795 0
 2814 006e FFF7FEFF 		bl	RTC_ExitInitMode
1796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2815              		.loc 1 1797 0
 2816 0072 0123     		movs	r3, #1
 2817 0074 FB73     		strb	r3, [r7, #15]
 2818              	.L120:
1798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2819              		.loc 1 1801 0
 2820 0076 4FF42053 		mov	r3, #10240
 2821 007a C4F20003 		movt	r3, 16384
 2822 007e FF22     		movs	r2, #255
 2823 0080 5A62     		str	r2, [r3, #36]
1802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2824              		.loc 1 1803 0
 2825 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2826              		.loc 1 1804 0
 2827 0084 1846     		mov	r0, r3
 2828 0086 1037     		adds	r7, r7, #16
 2829 0088 BD46     		mov	sp, r7
 2830              		@ sp needed
 2831 008a 80BD     		pop	{r7, pc}
 2832              		.cfi_endproc
 2833              	.LFE140:
 2835              		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2836              		.align	2
 2837              		.global	RTC_CalibOutputCmd
 2838              		.thumb
 2839              		.thumb_func
 2841              	RTC_CalibOutputCmd:
 2842              	.LFB141:
1805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2843              		.loc 1 1813 0
 2844              		.cfi_startproc
 2845              		@ args = 0, pretend = 0, frame = 8
 2846              		@ frame_needed = 1, uses_anonymous_args = 0
 2847              		@ link register save eliminated.
 2848 0000 80B4     		push	{r7}
 2849              	.LCFI90:
 2850              		.cfi_def_cfa_offset 4
 2851              		.cfi_offset 7, -4
 2852 0002 83B0     		sub	sp, sp, #12
 2853              	.LCFI91:
 2854              		.cfi_def_cfa_offset 16
 2855 0004 00AF     		add	r7, sp, #0
 2856              	.LCFI92:
 2857              		.cfi_def_cfa_register 7
 2858 0006 0346     		mov	r3, r0
 2859 0008 FB71     		strb	r3, [r7, #7]
1814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2860              		.loc 1 1818 0
 2861 000a 4FF42053 		mov	r3, #10240
 2862 000e C4F20003 		movt	r3, 16384
 2863 0012 CA22     		movs	r2, #202
 2864 0014 5A62     		str	r2, [r3, #36]
1819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2865              		.loc 1 1819 0
 2866 0016 4FF42053 		mov	r3, #10240
 2867 001a C4F20003 		movt	r3, 16384
 2868 001e 5322     		movs	r2, #83
 2869 0020 5A62     		str	r2, [r3, #36]
1820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2870              		.loc 1 1821 0
 2871 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2872 0024 002B     		cmp	r3, #0
 2873 0026 0CD0     		beq	.L125
1822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2874              		.loc 1 1824 0
 2875 0028 4FF42053 		mov	r3, #10240
 2876 002c C4F20003 		movt	r3, 16384
 2877 0030 4FF42052 		mov	r2, #10240
 2878 0034 C4F20002 		movt	r2, 16384
 2879 0038 9268     		ldr	r2, [r2, #8]
 2880 003a 42F40002 		orr	r2, r2, #8388608
 2881 003e 9A60     		str	r2, [r3, #8]
 2882 0040 0BE0     		b	.L126
 2883              	.L125:
1825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2884              		.loc 1 1829 0
 2885 0042 4FF42053 		mov	r3, #10240
 2886 0046 C4F20003 		movt	r3, 16384
 2887 004a 4FF42052 		mov	r2, #10240
 2888 004e C4F20002 		movt	r2, 16384
 2889 0052 9268     		ldr	r2, [r2, #8]
 2890 0054 22F40002 		bic	r2, r2, #8388608
 2891 0058 9A60     		str	r2, [r3, #8]
 2892              	.L126:
1830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2893              		.loc 1 1833 0
 2894 005a 4FF42053 		mov	r3, #10240
 2895 005e C4F20003 		movt	r3, 16384
 2896 0062 FF22     		movs	r2, #255
 2897 0064 5A62     		str	r2, [r3, #36]
1834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2898              		.loc 1 1834 0
 2899 0066 0C37     		adds	r7, r7, #12
 2900 0068 BD46     		mov	sp, r7
 2901              		@ sp needed
 2902 006a 5DF8047B 		ldr	r7, [sp], #4
 2903 006e 7047     		bx	lr
 2904              		.cfi_endproc
 2905              	.LFE141:
 2907              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2908              		.align	2
 2909              		.global	RTC_CalibOutputConfig
 2910              		.thumb
 2911              		.thumb_func
 2913              	RTC_CalibOutputConfig:
 2914              	.LFB142:
1835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2915              		.loc 1 1845 0
 2916              		.cfi_startproc
 2917              		@ args = 0, pretend = 0, frame = 8
 2918              		@ frame_needed = 1, uses_anonymous_args = 0
 2919              		@ link register save eliminated.
 2920 0000 80B4     		push	{r7}
 2921              	.LCFI93:
 2922              		.cfi_def_cfa_offset 4
 2923              		.cfi_offset 7, -4
 2924 0002 83B0     		sub	sp, sp, #12
 2925              	.LCFI94:
 2926              		.cfi_def_cfa_offset 16
 2927 0004 00AF     		add	r7, sp, #0
 2928              	.LCFI95:
 2929              		.cfi_def_cfa_register 7
 2930 0006 7860     		str	r0, [r7, #4]
1846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2931              		.loc 1 1850 0
 2932 0008 4FF42053 		mov	r3, #10240
 2933 000c C4F20003 		movt	r3, 16384
 2934 0010 CA22     		movs	r2, #202
 2935 0012 5A62     		str	r2, [r3, #36]
1851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2936              		.loc 1 1851 0
 2937 0014 4FF42053 		mov	r3, #10240
 2938 0018 C4F20003 		movt	r3, 16384
 2939 001c 5322     		movs	r2, #83
 2940 001e 5A62     		str	r2, [r3, #36]
1852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2941              		.loc 1 1854 0
 2942 0020 4FF42053 		mov	r3, #10240
 2943 0024 C4F20003 		movt	r3, 16384
 2944 0028 4FF42052 		mov	r2, #10240
 2945 002c C4F20002 		movt	r2, 16384
 2946 0030 9268     		ldr	r2, [r2, #8]
 2947 0032 22F40022 		bic	r2, r2, #524288
 2948 0036 9A60     		str	r2, [r3, #8]
1855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2949              		.loc 1 1857 0
 2950 0038 4FF42053 		mov	r3, #10240
 2951 003c C4F20003 		movt	r3, 16384
 2952 0040 4FF42052 		mov	r2, #10240
 2953 0044 C4F20002 		movt	r2, 16384
 2954 0048 9168     		ldr	r1, [r2, #8]
 2955 004a 7A68     		ldr	r2, [r7, #4]
 2956 004c 0A43     		orrs	r2, r2, r1
 2957 004e 9A60     		str	r2, [r3, #8]
1858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2958              		.loc 1 1860 0
 2959 0050 4FF42053 		mov	r3, #10240
 2960 0054 C4F20003 		movt	r3, 16384
 2961 0058 FF22     		movs	r2, #255
 2962 005a 5A62     		str	r2, [r3, #36]
1861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2963              		.loc 1 1861 0
 2964 005c 0C37     		adds	r7, r7, #12
 2965 005e BD46     		mov	sp, r7
 2966              		@ sp needed
 2967 0060 5DF8047B 		ldr	r7, [sp], #4
 2968 0064 7047     		bx	lr
 2969              		.cfi_endproc
 2970              	.LFE142:
 2972 0066 00BF     		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2973              		.align	2
 2974              		.global	RTC_SmoothCalibConfig
 2975              		.thumb
 2976              		.thumb_func
 2978              	RTC_SmoothCalibConfig:
 2979              	.LFB143:
1862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2980              		.loc 1 1883 0
 2981              		.cfi_startproc
 2982              		@ args = 0, pretend = 0, frame = 24
 2983              		@ frame_needed = 1, uses_anonymous_args = 0
 2984              		@ link register save eliminated.
 2985 0000 80B4     		push	{r7}
 2986              	.LCFI96:
 2987              		.cfi_def_cfa_offset 4
 2988              		.cfi_offset 7, -4
 2989 0002 87B0     		sub	sp, sp, #28
 2990              	.LCFI97:
 2991              		.cfi_def_cfa_offset 32
 2992 0004 00AF     		add	r7, sp, #0
 2993              	.LCFI98:
 2994              		.cfi_def_cfa_register 7
 2995 0006 F860     		str	r0, [r7, #12]
 2996 0008 B960     		str	r1, [r7, #8]
 2997 000a 7A60     		str	r2, [r7, #4]
1884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2998              		.loc 1 1884 0
 2999 000c 0023     		movs	r3, #0
 3000 000e FB75     		strb	r3, [r7, #23]
1885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 3001              		.loc 1 1885 0
 3002 0010 0023     		movs	r3, #0
 3003 0012 3B61     		str	r3, [r7, #16]
1886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3004              		.loc 1 1893 0
 3005 0014 4FF42053 		mov	r3, #10240
 3006 0018 C4F20003 		movt	r3, 16384
 3007 001c CA22     		movs	r2, #202
 3008 001e 5A62     		str	r2, [r3, #36]
1894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3009              		.loc 1 1894 0
 3010 0020 4FF42053 		mov	r3, #10240
 3011 0024 C4F20003 		movt	r3, 16384
 3012 0028 5322     		movs	r2, #83
 3013 002a 5A62     		str	r2, [r3, #36]
1895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 3014              		.loc 1 1897 0
 3015 002c 4FF42053 		mov	r3, #10240
 3016 0030 C4F20003 		movt	r3, 16384
 3017 0034 DB68     		ldr	r3, [r3, #12]
 3018 0036 03F48033 		and	r3, r3, #65536
 3019 003a 002B     		cmp	r3, #0
 3020 003c 10D0     		beq	.L129
1898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3021              		.loc 1 1900 0
 3022 003e 02E0     		b	.L130
 3023              	.L131:
1901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 3024              		.loc 1 1902 0
 3025 0040 3B69     		ldr	r3, [r7, #16]
 3026 0042 0133     		adds	r3, r3, #1
 3027 0044 3B61     		str	r3, [r7, #16]
 3028              	.L130:
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 3029              		.loc 1 1900 0 discriminator 1
 3030 0046 4FF42053 		mov	r3, #10240
 3031 004a C4F20003 		movt	r3, 16384
 3032 004e DB68     		ldr	r3, [r3, #12]
 3033 0050 03F48033 		and	r3, r3, #65536
 3034 0054 002B     		cmp	r3, #0
 3035 0056 03D0     		beq	.L129
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 3036              		.loc 1 1900 0 is_stmt 0 discriminator 2
 3037 0058 3B69     		ldr	r3, [r7, #16]
 3038 005a B3F5003F 		cmp	r3, #131072
 3039 005e EFD1     		bne	.L131
 3040              	.L129:
1903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3041              		.loc 1 1907 0 is_stmt 1
 3042 0060 4FF42053 		mov	r3, #10240
 3043 0064 C4F20003 		movt	r3, 16384
 3044 0068 DB68     		ldr	r3, [r3, #12]
 3045 006a 03F48033 		and	r3, r3, #65536
 3046 006e 002B     		cmp	r3, #0
 3047 0070 0CD1     		bne	.L132
1908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3048              		.loc 1 1910 0
 3049 0072 4FF42053 		mov	r3, #10240
 3050 0076 C4F20003 		movt	r3, 16384
 3051 007a F968     		ldr	r1, [r7, #12]
 3052 007c BA68     		ldr	r2, [r7, #8]
 3053 007e 1143     		orrs	r1, r1, r2
 3054 0080 7A68     		ldr	r2, [r7, #4]
 3055 0082 0A43     		orrs	r2, r2, r1
 3056 0084 DA63     		str	r2, [r3, #60]
1911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3057              		.loc 1 1912 0
 3058 0086 0123     		movs	r3, #1
 3059 0088 FB75     		strb	r3, [r7, #23]
 3060 008a 01E0     		b	.L133
 3061              	.L132:
1913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3062              		.loc 1 1916 0
 3063 008c 0023     		movs	r3, #0
 3064 008e FB75     		strb	r3, [r7, #23]
 3065              	.L133:
1917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3066              		.loc 1 1920 0
 3067 0090 4FF42053 		mov	r3, #10240
 3068 0094 C4F20003 		movt	r3, 16384
 3069 0098 FF22     		movs	r2, #255
 3070 009a 5A62     		str	r2, [r3, #36]
1921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3071              		.loc 1 1922 0
 3072 009c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3073              		.loc 1 1923 0
 3074 009e 1846     		mov	r0, r3
 3075 00a0 1C37     		adds	r7, r7, #28
 3076 00a2 BD46     		mov	sp, r7
 3077              		@ sp needed
 3078 00a4 5DF8047B 		ldr	r7, [sp], #4
 3079 00a8 7047     		bx	lr
 3080              		.cfi_endproc
 3081              	.LFE143:
 3083 00aa 00BF     		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3084              		.align	2
 3085              		.global	RTC_TimeStampCmd
 3086              		.thumb
 3087              		.thumb_func
 3089              	RTC_TimeStampCmd:
 3090              	.LFB144:
1924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3091              		.loc 1 1957 0
 3092              		.cfi_startproc
 3093              		@ args = 0, pretend = 0, frame = 16
 3094              		@ frame_needed = 1, uses_anonymous_args = 0
 3095              		@ link register save eliminated.
 3096 0000 80B4     		push	{r7}
 3097              	.LCFI99:
 3098              		.cfi_def_cfa_offset 4
 3099              		.cfi_offset 7, -4
 3100 0002 85B0     		sub	sp, sp, #20
 3101              	.LCFI100:
 3102              		.cfi_def_cfa_offset 24
 3103 0004 00AF     		add	r7, sp, #0
 3104              	.LCFI101:
 3105              		.cfi_def_cfa_register 7
 3106 0006 7860     		str	r0, [r7, #4]
 3107 0008 0B46     		mov	r3, r1
 3108 000a FB70     		strb	r3, [r7, #3]
1958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3109              		.loc 1 1958 0
 3110 000c 0023     		movs	r3, #0
 3111 000e FB60     		str	r3, [r7, #12]
1959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3112              		.loc 1 1965 0
 3113 0010 4FF42053 		mov	r3, #10240
 3114 0014 C4F20003 		movt	r3, 16384
 3115 0018 9B68     		ldr	r3, [r3, #8]
 3116 001a 23F40063 		bic	r3, r3, #2048
 3117 001e 23F00803 		bic	r3, r3, #8
 3118 0022 FB60     		str	r3, [r7, #12]
1966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3119              		.loc 1 1968 0
 3120 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3121 0026 002B     		cmp	r3, #0
 3122 0028 06D0     		beq	.L136
1969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3123              		.loc 1 1970 0
 3124 002a 7A68     		ldr	r2, [r7, #4]
 3125 002c FB68     		ldr	r3, [r7, #12]
 3126 002e 1343     		orrs	r3, r3, r2
 3127 0030 43F40063 		orr	r3, r3, #2048
 3128 0034 FB60     		str	r3, [r7, #12]
 3129 0036 03E0     		b	.L137
 3130              	.L136:
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3131              		.loc 1 1974 0
 3132 0038 FA68     		ldr	r2, [r7, #12]
 3133 003a 7B68     		ldr	r3, [r7, #4]
 3134 003c 1343     		orrs	r3, r3, r2
 3135 003e FB60     		str	r3, [r7, #12]
 3136              	.L137:
1975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3137              		.loc 1 1978 0
 3138 0040 4FF42053 		mov	r3, #10240
 3139 0044 C4F20003 		movt	r3, 16384
 3140 0048 CA22     		movs	r2, #202
 3141 004a 5A62     		str	r2, [r3, #36]
1979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3142              		.loc 1 1979 0
 3143 004c 4FF42053 		mov	r3, #10240
 3144 0050 C4F20003 		movt	r3, 16384
 3145 0054 5322     		movs	r2, #83
 3146 0056 5A62     		str	r2, [r3, #36]
1980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3147              		.loc 1 1982 0
 3148 0058 4FF42053 		mov	r3, #10240
 3149 005c C4F20003 		movt	r3, 16384
 3150 0060 FA68     		ldr	r2, [r7, #12]
 3151 0062 9A60     		str	r2, [r3, #8]
1983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3152              		.loc 1 1985 0
 3153 0064 4FF42053 		mov	r3, #10240
 3154 0068 C4F20003 		movt	r3, 16384
 3155 006c FF22     		movs	r2, #255
 3156 006e 5A62     		str	r2, [r3, #36]
1986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3157              		.loc 1 1986 0
 3158 0070 1437     		adds	r7, r7, #20
 3159 0072 BD46     		mov	sp, r7
 3160              		@ sp needed
 3161 0074 5DF8047B 		ldr	r7, [sp], #4
 3162 0078 7047     		bx	lr
 3163              		.cfi_endproc
 3164              	.LFE144:
 3166              		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3167              		.align	2
 3168              		.global	RTC_GetTimeStamp
 3169              		.thumb
 3170              		.thumb_func
 3172              	RTC_GetTimeStamp:
 3173              	.LFB145:
1987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3174              		.loc 1 2002 0
 3175              		.cfi_startproc
 3176              		@ args = 0, pretend = 0, frame = 24
 3177              		@ frame_needed = 1, uses_anonymous_args = 0
 3178 0000 80B5     		push	{r7, lr}
 3179              	.LCFI102:
 3180              		.cfi_def_cfa_offset 8
 3181              		.cfi_offset 7, -8
 3182              		.cfi_offset 14, -4
 3183 0002 86B0     		sub	sp, sp, #24
 3184              	.LCFI103:
 3185              		.cfi_def_cfa_offset 32
 3186 0004 00AF     		add	r7, sp, #0
 3187              	.LCFI104:
 3188              		.cfi_def_cfa_register 7
 3189 0006 F860     		str	r0, [r7, #12]
 3190 0008 B960     		str	r1, [r7, #8]
 3191 000a 7A60     		str	r2, [r7, #4]
2003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3192              		.loc 1 2003 0
 3193 000c 0023     		movs	r3, #0
 3194 000e 7B61     		str	r3, [r7, #20]
 3195 0010 0023     		movs	r3, #0
 3196 0012 3B61     		str	r3, [r7, #16]
2004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3197              		.loc 1 2009 0
 3198 0014 4FF42053 		mov	r3, #10240
 3199 0018 C4F20003 		movt	r3, 16384
 3200 001c 1B6B     		ldr	r3, [r3, #48]
 3201 001e 03F07F33 		and	r3, r3, #2139062143
 3202 0022 23F0FE43 		bic	r3, r3, #2130706432
 3203 0026 7B61     		str	r3, [r7, #20]
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3204              		.loc 1 2010 0
 3205 0028 4FF42053 		mov	r3, #10240
 3206 002c C4F20003 		movt	r3, 16384
 3207 0030 5B6B     		ldr	r3, [r3, #52]
 3208 0032 23F07F43 		bic	r3, r3, #-16777216
 3209 0036 23F0C003 		bic	r3, r3, #192
 3210 003a 3B61     		str	r3, [r7, #16]
2011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3211              		.loc 1 2013 0
 3212 003c 7B69     		ldr	r3, [r7, #20]
 3213 003e 03F47C13 		and	r3, r3, #4128768
 3214 0042 1B0C     		lsrs	r3, r3, #16
 3215 0044 DAB2     		uxtb	r2, r3
 3216 0046 BB68     		ldr	r3, [r7, #8]
 3217 0048 1A70     		strb	r2, [r3]
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3218              		.loc 1 2014 0
 3219 004a 7B69     		ldr	r3, [r7, #20]
 3220 004c 03F4FE43 		and	r3, r3, #32512
 3221 0050 1B0A     		lsrs	r3, r3, #8
 3222 0052 DAB2     		uxtb	r2, r3
 3223 0054 BB68     		ldr	r3, [r7, #8]
 3224 0056 5A70     		strb	r2, [r3, #1]
2015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3225              		.loc 1 2015 0
 3226 0058 7B69     		ldr	r3, [r7, #20]
 3227 005a DBB2     		uxtb	r3, r3
 3228 005c 03F07F03 		and	r3, r3, #127
 3229 0060 DAB2     		uxtb	r2, r3
 3230 0062 BB68     		ldr	r3, [r7, #8]
 3231 0064 9A70     		strb	r2, [r3, #2]
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3232              		.loc 1 2016 0
 3233 0066 7B69     		ldr	r3, [r7, #20]
 3234 0068 03F48003 		and	r3, r3, #4194304
 3235 006c 1B0C     		lsrs	r3, r3, #16
 3236 006e DAB2     		uxtb	r2, r3
 3237 0070 BB68     		ldr	r3, [r7, #8]
 3238 0072 DA70     		strb	r2, [r3, #3]
2017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3239              		.loc 1 2019 0
 3240 0074 7B68     		ldr	r3, [r7, #4]
 3241 0076 0022     		movs	r2, #0
 3242 0078 DA70     		strb	r2, [r3, #3]
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3243              		.loc 1 2020 0
 3244 007a 3B69     		ldr	r3, [r7, #16]
 3245 007c 03F4F853 		and	r3, r3, #7936
 3246 0080 1B0A     		lsrs	r3, r3, #8
 3247 0082 DAB2     		uxtb	r2, r3
 3248 0084 7B68     		ldr	r3, [r7, #4]
 3249 0086 5A70     		strb	r2, [r3, #1]
2021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3250              		.loc 1 2021 0
 3251 0088 3B69     		ldr	r3, [r7, #16]
 3252 008a DBB2     		uxtb	r3, r3
 3253 008c 03F03F03 		and	r3, r3, #63
 3254 0090 DAB2     		uxtb	r2, r3
 3255 0092 7B68     		ldr	r3, [r7, #4]
 3256 0094 9A70     		strb	r2, [r3, #2]
2022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3257              		.loc 1 2022 0
 3258 0096 3B69     		ldr	r3, [r7, #16]
 3259 0098 03F46043 		and	r3, r3, #57344
 3260 009c 5B0B     		lsrs	r3, r3, #13
 3261 009e DAB2     		uxtb	r2, r3
 3262 00a0 7B68     		ldr	r3, [r7, #4]
 3263 00a2 1A70     		strb	r2, [r3]
2023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3264              		.loc 1 2025 0
 3265 00a4 FB68     		ldr	r3, [r7, #12]
 3266 00a6 002B     		cmp	r3, #0
 3267 00a8 35D1     		bne	.L138
2026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3268              		.loc 1 2028 0
 3269 00aa BB68     		ldr	r3, [r7, #8]
 3270 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3271 00ae 1846     		mov	r0, r3
 3272 00b0 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3273 00b4 0346     		mov	r3, r0
 3274 00b6 1A46     		mov	r2, r3
 3275 00b8 BB68     		ldr	r3, [r7, #8]
 3276 00ba 1A70     		strb	r2, [r3]
2029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3277              		.loc 1 2029 0
 3278 00bc BB68     		ldr	r3, [r7, #8]
 3279 00be 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3280 00c0 1846     		mov	r0, r3
 3281 00c2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3282 00c6 0346     		mov	r3, r0
 3283 00c8 1A46     		mov	r2, r3
 3284 00ca BB68     		ldr	r3, [r7, #8]
 3285 00cc 5A70     		strb	r2, [r3, #1]
2030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3286              		.loc 1 2030 0
 3287 00ce BB68     		ldr	r3, [r7, #8]
 3288 00d0 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3289 00d2 1846     		mov	r0, r3
 3290 00d4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3291 00d8 0346     		mov	r3, r0
 3292 00da 1A46     		mov	r2, r3
 3293 00dc BB68     		ldr	r3, [r7, #8]
 3294 00de 9A70     		strb	r2, [r3, #2]
2031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3295              		.loc 1 2033 0
 3296 00e0 7B68     		ldr	r3, [r7, #4]
 3297 00e2 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3298 00e4 1846     		mov	r0, r3
 3299 00e6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3300 00ea 0346     		mov	r3, r0
 3301 00ec 1A46     		mov	r2, r3
 3302 00ee 7B68     		ldr	r3, [r7, #4]
 3303 00f0 5A70     		strb	r2, [r3, #1]
2034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3304              		.loc 1 2034 0
 3305 00f2 7B68     		ldr	r3, [r7, #4]
 3306 00f4 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3307 00f6 1846     		mov	r0, r3
 3308 00f8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3309 00fc 0346     		mov	r3, r0
 3310 00fe 1A46     		mov	r2, r3
 3311 0100 7B68     		ldr	r3, [r7, #4]
 3312 0102 9A70     		strb	r2, [r3, #2]
2035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3313              		.loc 1 2035 0
 3314 0104 7B68     		ldr	r3, [r7, #4]
 3315 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3316 0108 1846     		mov	r0, r3
 3317 010a FFF7FEFF 		bl	RTC_Bcd2ToByte
 3318 010e 0346     		mov	r3, r0
 3319 0110 1A46     		mov	r2, r3
 3320 0112 7B68     		ldr	r3, [r7, #4]
 3321 0114 1A70     		strb	r2, [r3]
 3322              	.L138:
2036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3323              		.loc 1 2037 0
 3324 0116 1837     		adds	r7, r7, #24
 3325 0118 BD46     		mov	sp, r7
 3326              		@ sp needed
 3327 011a 80BD     		pop	{r7, pc}
 3328              		.cfi_endproc
 3329              	.LFE145:
 3331              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3332              		.align	2
 3333              		.global	RTC_GetTimeStampSubSecond
 3334              		.thumb
 3335              		.thumb_func
 3337              	RTC_GetTimeStampSubSecond:
 3338              	.LFB146:
2038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3339              		.loc 1 2045 0
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 0
 3342              		@ frame_needed = 1, uses_anonymous_args = 0
 3343              		@ link register save eliminated.
 3344 0000 80B4     		push	{r7}
 3345              	.LCFI105:
 3346              		.cfi_def_cfa_offset 4
 3347              		.cfi_offset 7, -4
 3348 0002 00AF     		add	r7, sp, #0
 3349              	.LCFI106:
 3350              		.cfi_def_cfa_register 7
2046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3351              		.loc 1 2047 0
 3352 0004 4FF42053 		mov	r3, #10240
 3353 0008 C4F20003 		movt	r3, 16384
 3354 000c 9B6B     		ldr	r3, [r3, #56]
2048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3355              		.loc 1 2048 0
 3356 000e 1846     		mov	r0, r3
 3357 0010 BD46     		mov	sp, r7
 3358              		@ sp needed
 3359 0012 5DF8047B 		ldr	r7, [sp], #4
 3360 0016 7047     		bx	lr
 3361              		.cfi_endproc
 3362              	.LFE146:
 3364              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3365              		.align	2
 3366              		.global	RTC_TamperTriggerConfig
 3367              		.thumb
 3368              		.thumb_func
 3370              	RTC_TamperTriggerConfig:
 3371              	.LFB147:
2049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3372              		.loc 1 2080 0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 1, uses_anonymous_args = 0
 3376              		@ link register save eliminated.
 3377 0000 80B4     		push	{r7}
 3378              	.LCFI107:
 3379              		.cfi_def_cfa_offset 4
 3380              		.cfi_offset 7, -4
 3381 0002 83B0     		sub	sp, sp, #12
 3382              	.LCFI108:
 3383              		.cfi_def_cfa_offset 16
 3384 0004 00AF     		add	r7, sp, #0
 3385              	.LCFI109:
 3386              		.cfi_def_cfa_register 7
 3387 0006 7860     		str	r0, [r7, #4]
 3388 0008 3960     		str	r1, [r7]
2081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3389              		.loc 1 2085 0
 3390 000a 3B68     		ldr	r3, [r7]
 3391 000c 002B     		cmp	r3, #0
 3392 000e 0ED1     		bne	.L143
2086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3393              		.loc 1 2088 0
 3394 0010 4FF42053 		mov	r3, #10240
 3395 0014 C4F20003 		movt	r3, 16384
 3396 0018 4FF42052 		mov	r2, #10240
 3397 001c C4F20002 		movt	r2, 16384
 3398 0020 116C     		ldr	r1, [r2, #64]
 3399 0022 7A68     		ldr	r2, [r7, #4]
 3400 0024 5200     		lsls	r2, r2, #1
 3401 0026 D243     		mvns	r2, r2
 3402 0028 0A40     		ands	r2, r2, r1
 3403 002a 1A64     		str	r2, [r3, #64]
 3404 002c 0CE0     		b	.L142
 3405              	.L143:
2089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3406              		.loc 1 2093 0
 3407 002e 4FF42053 		mov	r3, #10240
 3408 0032 C4F20003 		movt	r3, 16384
 3409 0036 4FF42052 		mov	r2, #10240
 3410 003a C4F20002 		movt	r2, 16384
 3411 003e 116C     		ldr	r1, [r2, #64]
 3412 0040 7A68     		ldr	r2, [r7, #4]
 3413 0042 5200     		lsls	r2, r2, #1
 3414 0044 0A43     		orrs	r2, r2, r1
 3415 0046 1A64     		str	r2, [r3, #64]
 3416              	.L142:
2094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3417              		.loc 1 2095 0
 3418 0048 0C37     		adds	r7, r7, #12
 3419 004a BD46     		mov	sp, r7
 3420              		@ sp needed
 3421 004c 5DF8047B 		ldr	r7, [sp], #4
 3422 0050 7047     		bx	lr
 3423              		.cfi_endproc
 3424              	.LFE147:
 3426 0052 00BF     		.section	.text.RTC_TamperCmd,"ax",%progbits
 3427              		.align	2
 3428              		.global	RTC_TamperCmd
 3429              		.thumb
 3430              		.thumb_func
 3432              	RTC_TamperCmd:
 3433              	.LFB148:
2096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3434              		.loc 1 2106 0
 3435              		.cfi_startproc
 3436              		@ args = 0, pretend = 0, frame = 8
 3437              		@ frame_needed = 1, uses_anonymous_args = 0
 3438              		@ link register save eliminated.
 3439 0000 80B4     		push	{r7}
 3440              	.LCFI110:
 3441              		.cfi_def_cfa_offset 4
 3442              		.cfi_offset 7, -4
 3443 0002 83B0     		sub	sp, sp, #12
 3444              	.LCFI111:
 3445              		.cfi_def_cfa_offset 16
 3446 0004 00AF     		add	r7, sp, #0
 3447              	.LCFI112:
 3448              		.cfi_def_cfa_register 7
 3449 0006 7860     		str	r0, [r7, #4]
 3450 0008 0B46     		mov	r3, r1
 3451 000a FB70     		strb	r3, [r7, #3]
2107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3452              		.loc 1 2111 0
 3453 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3454 000e 002B     		cmp	r3, #0
 3455 0010 0CD0     		beq	.L146
2112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3456              		.loc 1 2114 0
 3457 0012 4FF42053 		mov	r3, #10240
 3458 0016 C4F20003 		movt	r3, 16384
 3459 001a 4FF42052 		mov	r2, #10240
 3460 001e C4F20002 		movt	r2, 16384
 3461 0022 116C     		ldr	r1, [r2, #64]
 3462 0024 7A68     		ldr	r2, [r7, #4]
 3463 0026 0A43     		orrs	r2, r2, r1
 3464 0028 1A64     		str	r2, [r3, #64]
 3465 002a 0CE0     		b	.L145
 3466              	.L146:
2115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3467              		.loc 1 2119 0
 3468 002c 4FF42053 		mov	r3, #10240
 3469 0030 C4F20003 		movt	r3, 16384
 3470 0034 4FF42052 		mov	r2, #10240
 3471 0038 C4F20002 		movt	r2, 16384
 3472 003c 116C     		ldr	r1, [r2, #64]
 3473 003e 7A68     		ldr	r2, [r7, #4]
 3474 0040 D243     		mvns	r2, r2
 3475 0042 0A40     		ands	r2, r2, r1
 3476 0044 1A64     		str	r2, [r3, #64]
 3477              	.L145:
2120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3478              		.loc 1 2121 0
 3479 0046 0C37     		adds	r7, r7, #12
 3480 0048 BD46     		mov	sp, r7
 3481              		@ sp needed
 3482 004a 5DF8047B 		ldr	r7, [sp], #4
 3483 004e 7047     		bx	lr
 3484              		.cfi_endproc
 3485              	.LFE148:
 3487              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3488              		.align	2
 3489              		.global	RTC_TamperFilterConfig
 3490              		.thumb
 3491              		.thumb_func
 3493              	RTC_TamperFilterConfig:
 3494              	.LFB149:
2122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3495              		.loc 1 2137 0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 8
 3498              		@ frame_needed = 1, uses_anonymous_args = 0
 3499              		@ link register save eliminated.
 3500 0000 80B4     		push	{r7}
 3501              	.LCFI113:
 3502              		.cfi_def_cfa_offset 4
 3503              		.cfi_offset 7, -4
 3504 0002 83B0     		sub	sp, sp, #12
 3505              	.LCFI114:
 3506              		.cfi_def_cfa_offset 16
 3507 0004 00AF     		add	r7, sp, #0
 3508              	.LCFI115:
 3509              		.cfi_def_cfa_register 7
 3510 0006 7860     		str	r0, [r7, #4]
2138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3511              		.loc 1 2142 0
 3512 0008 4FF42053 		mov	r3, #10240
 3513 000c C4F20003 		movt	r3, 16384
 3514 0010 4FF42052 		mov	r2, #10240
 3515 0014 C4F20002 		movt	r2, 16384
 3516 0018 126C     		ldr	r2, [r2, #64]
 3517 001a 22F4C052 		bic	r2, r2, #6144
 3518 001e 1A64     		str	r2, [r3, #64]
2143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3519              		.loc 1 2145 0
 3520 0020 4FF42053 		mov	r3, #10240
 3521 0024 C4F20003 		movt	r3, 16384
 3522 0028 4FF42052 		mov	r2, #10240
 3523 002c C4F20002 		movt	r2, 16384
 3524 0030 116C     		ldr	r1, [r2, #64]
 3525 0032 7A68     		ldr	r2, [r7, #4]
 3526 0034 0A43     		orrs	r2, r2, r1
 3527 0036 1A64     		str	r2, [r3, #64]
2146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3528              		.loc 1 2146 0
 3529 0038 0C37     		adds	r7, r7, #12
 3530 003a BD46     		mov	sp, r7
 3531              		@ sp needed
 3532 003c 5DF8047B 		ldr	r7, [sp], #4
 3533 0040 7047     		bx	lr
 3534              		.cfi_endproc
 3535              	.LFE149:
 3537 0042 00BF     		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3538              		.align	2
 3539              		.global	RTC_TamperSamplingFreqConfig
 3540              		.thumb
 3541              		.thumb_func
 3543              	RTC_TamperSamplingFreqConfig:
 3544              	.LFB150:
2147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3545              		.loc 1 2171 0
 3546              		.cfi_startproc
 3547              		@ args = 0, pretend = 0, frame = 8
 3548              		@ frame_needed = 1, uses_anonymous_args = 0
 3549              		@ link register save eliminated.
 3550 0000 80B4     		push	{r7}
 3551              	.LCFI116:
 3552              		.cfi_def_cfa_offset 4
 3553              		.cfi_offset 7, -4
 3554 0002 83B0     		sub	sp, sp, #12
 3555              	.LCFI117:
 3556              		.cfi_def_cfa_offset 16
 3557 0004 00AF     		add	r7, sp, #0
 3558              	.LCFI118:
 3559              		.cfi_def_cfa_register 7
 3560 0006 7860     		str	r0, [r7, #4]
2172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3561              		.loc 1 2176 0
 3562 0008 4FF42053 		mov	r3, #10240
 3563 000c C4F20003 		movt	r3, 16384
 3564 0010 4FF42052 		mov	r2, #10240
 3565 0014 C4F20002 		movt	r2, 16384
 3566 0018 126C     		ldr	r2, [r2, #64]
 3567 001a 22F4E062 		bic	r2, r2, #1792
 3568 001e 1A64     		str	r2, [r3, #64]
2177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3569              		.loc 1 2179 0
 3570 0020 4FF42053 		mov	r3, #10240
 3571 0024 C4F20003 		movt	r3, 16384
 3572 0028 4FF42052 		mov	r2, #10240
 3573 002c C4F20002 		movt	r2, 16384
 3574 0030 116C     		ldr	r1, [r2, #64]
 3575 0032 7A68     		ldr	r2, [r7, #4]
 3576 0034 0A43     		orrs	r2, r2, r1
 3577 0036 1A64     		str	r2, [r3, #64]
2180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3578              		.loc 1 2180 0
 3579 0038 0C37     		adds	r7, r7, #12
 3580 003a BD46     		mov	sp, r7
 3581              		@ sp needed
 3582 003c 5DF8047B 		ldr	r7, [sp], #4
 3583 0040 7047     		bx	lr
 3584              		.cfi_endproc
 3585              	.LFE150:
 3587 0042 00BF     		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3588              		.align	2
 3589              		.global	RTC_TamperPinsPrechargeDuration
 3590              		.thumb
 3591              		.thumb_func
 3593              	RTC_TamperPinsPrechargeDuration:
 3594              	.LFB151:
2181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3595              		.loc 1 2194 0
 3596              		.cfi_startproc
 3597              		@ args = 0, pretend = 0, frame = 8
 3598              		@ frame_needed = 1, uses_anonymous_args = 0
 3599              		@ link register save eliminated.
 3600 0000 80B4     		push	{r7}
 3601              	.LCFI119:
 3602              		.cfi_def_cfa_offset 4
 3603              		.cfi_offset 7, -4
 3604 0002 83B0     		sub	sp, sp, #12
 3605              	.LCFI120:
 3606              		.cfi_def_cfa_offset 16
 3607 0004 00AF     		add	r7, sp, #0
 3608              	.LCFI121:
 3609              		.cfi_def_cfa_register 7
 3610 0006 7860     		str	r0, [r7, #4]
2195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3611              		.loc 1 2199 0
 3612 0008 4FF42053 		mov	r3, #10240
 3613 000c C4F20003 		movt	r3, 16384
 3614 0010 4FF42052 		mov	r2, #10240
 3615 0014 C4F20002 		movt	r2, 16384
 3616 0018 126C     		ldr	r2, [r2, #64]
 3617 001a 22F4C042 		bic	r2, r2, #24576
 3618 001e 1A64     		str	r2, [r3, #64]
2200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3619              		.loc 1 2202 0
 3620 0020 4FF42053 		mov	r3, #10240
 3621 0024 C4F20003 		movt	r3, 16384
 3622 0028 4FF42052 		mov	r2, #10240
 3623 002c C4F20002 		movt	r2, 16384
 3624 0030 116C     		ldr	r1, [r2, #64]
 3625 0032 7A68     		ldr	r2, [r7, #4]
 3626 0034 0A43     		orrs	r2, r2, r1
 3627 0036 1A64     		str	r2, [r3, #64]
2203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3628              		.loc 1 2203 0
 3629 0038 0C37     		adds	r7, r7, #12
 3630 003a BD46     		mov	sp, r7
 3631              		@ sp needed
 3632 003c 5DF8047B 		ldr	r7, [sp], #4
 3633 0040 7047     		bx	lr
 3634              		.cfi_endproc
 3635              	.LFE151:
 3637 0042 00BF     		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3638              		.align	2
 3639              		.global	RTC_TimeStampOnTamperDetectionCmd
 3640              		.thumb
 3641              		.thumb_func
 3643              	RTC_TimeStampOnTamperDetectionCmd:
 3644              	.LFB152:
2204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3645              		.loc 1 2214 0
 3646              		.cfi_startproc
 3647              		@ args = 0, pretend = 0, frame = 8
 3648              		@ frame_needed = 1, uses_anonymous_args = 0
 3649              		@ link register save eliminated.
 3650 0000 80B4     		push	{r7}
 3651              	.LCFI122:
 3652              		.cfi_def_cfa_offset 4
 3653              		.cfi_offset 7, -4
 3654 0002 83B0     		sub	sp, sp, #12
 3655              	.LCFI123:
 3656              		.cfi_def_cfa_offset 16
 3657 0004 00AF     		add	r7, sp, #0
 3658              	.LCFI124:
 3659              		.cfi_def_cfa_register 7
 3660 0006 0346     		mov	r3, r0
 3661 0008 FB71     		strb	r3, [r7, #7]
2215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3662              		.loc 1 2218 0
 3663 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3664 000c 002B     		cmp	r3, #0
 3665 000e 0CD0     		beq	.L152
2219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3666              		.loc 1 2221 0
 3667 0010 4FF42053 		mov	r3, #10240
 3668 0014 C4F20003 		movt	r3, 16384
 3669 0018 4FF42052 		mov	r2, #10240
 3670 001c C4F20002 		movt	r2, 16384
 3671 0020 126C     		ldr	r2, [r2, #64]
 3672 0022 42F08002 		orr	r2, r2, #128
 3673 0026 1A64     		str	r2, [r3, #64]
 3674 0028 0BE0     		b	.L151
 3675              	.L152:
2222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3676              		.loc 1 2226 0
 3677 002a 4FF42053 		mov	r3, #10240
 3678 002e C4F20003 		movt	r3, 16384
 3679 0032 4FF42052 		mov	r2, #10240
 3680 0036 C4F20002 		movt	r2, 16384
 3681 003a 126C     		ldr	r2, [r2, #64]
 3682 003c 22F08002 		bic	r2, r2, #128
 3683 0040 1A64     		str	r2, [r3, #64]
 3684              	.L151:
2227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3685              		.loc 1 2228 0
 3686 0042 0C37     		adds	r7, r7, #12
 3687 0044 BD46     		mov	sp, r7
 3688              		@ sp needed
 3689 0046 5DF8047B 		ldr	r7, [sp], #4
 3690 004a 7047     		bx	lr
 3691              		.cfi_endproc
 3692              	.LFE152:
 3694              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3695              		.align	2
 3696              		.global	RTC_TamperPullUpCmd
 3697              		.thumb
 3698              		.thumb_func
 3700              	RTC_TamperPullUpCmd:
 3701              	.LFB153:
2229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3702              		.loc 1 2237 0
 3703              		.cfi_startproc
 3704              		@ args = 0, pretend = 0, frame = 8
 3705              		@ frame_needed = 1, uses_anonymous_args = 0
 3706              		@ link register save eliminated.
 3707 0000 80B4     		push	{r7}
 3708              	.LCFI125:
 3709              		.cfi_def_cfa_offset 4
 3710              		.cfi_offset 7, -4
 3711 0002 83B0     		sub	sp, sp, #12
 3712              	.LCFI126:
 3713              		.cfi_def_cfa_offset 16
 3714 0004 00AF     		add	r7, sp, #0
 3715              	.LCFI127:
 3716              		.cfi_def_cfa_register 7
 3717 0006 0346     		mov	r3, r0
 3718 0008 FB71     		strb	r3, [r7, #7]
2238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3719              		.loc 1 2241 0
 3720 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3721 000c 002B     		cmp	r3, #0
 3722 000e 0CD0     		beq	.L155
2242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3723              		.loc 1 2244 0
 3724 0010 4FF42053 		mov	r3, #10240
 3725 0014 C4F20003 		movt	r3, 16384
 3726 0018 4FF42052 		mov	r2, #10240
 3727 001c C4F20002 		movt	r2, 16384
 3728 0020 126C     		ldr	r2, [r2, #64]
 3729 0022 22F40042 		bic	r2, r2, #32768
 3730 0026 1A64     		str	r2, [r3, #64]
 3731 0028 0BE0     		b	.L154
 3732              	.L155:
2245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3733              		.loc 1 2249 0
 3734 002a 4FF42053 		mov	r3, #10240
 3735 002e C4F20003 		movt	r3, 16384
 3736 0032 4FF42052 		mov	r2, #10240
 3737 0036 C4F20002 		movt	r2, 16384
 3738 003a 126C     		ldr	r2, [r2, #64]
 3739 003c 42F40042 		orr	r2, r2, #32768
 3740 0040 1A64     		str	r2, [r3, #64]
 3741              	.L154:
2250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3742              		.loc 1 2251 0
 3743 0042 0C37     		adds	r7, r7, #12
 3744 0044 BD46     		mov	sp, r7
 3745              		@ sp needed
 3746 0046 5DF8047B 		ldr	r7, [sp], #4
 3747 004a 7047     		bx	lr
 3748              		.cfi_endproc
 3749              	.LFE153:
 3751              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3752              		.align	2
 3753              		.global	RTC_WriteBackupRegister
 3754              		.thumb
 3755              		.thumb_func
 3757              	RTC_WriteBackupRegister:
 3758              	.LFB154:
2252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3759              		.loc 1 2278 0
 3760              		.cfi_startproc
 3761              		@ args = 0, pretend = 0, frame = 16
 3762              		@ frame_needed = 1, uses_anonymous_args = 0
 3763              		@ link register save eliminated.
 3764 0000 80B4     		push	{r7}
 3765              	.LCFI128:
 3766              		.cfi_def_cfa_offset 4
 3767              		.cfi_offset 7, -4
 3768 0002 85B0     		sub	sp, sp, #20
 3769              	.LCFI129:
 3770              		.cfi_def_cfa_offset 24
 3771 0004 00AF     		add	r7, sp, #0
 3772              	.LCFI130:
 3773              		.cfi_def_cfa_register 7
 3774 0006 7860     		str	r0, [r7, #4]
 3775 0008 3960     		str	r1, [r7]
2279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3776              		.loc 1 2279 0
 3777 000a 0023     		movs	r3, #0
 3778 000c FB60     		str	r3, [r7, #12]
2280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3779              		.loc 1 2284 0
 3780 000e 42F65003 		movw	r3, #10320
 3781 0012 C4F20003 		movt	r3, 16384
 3782 0016 FB60     		str	r3, [r7, #12]
2285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3783              		.loc 1 2285 0
 3784 0018 7B68     		ldr	r3, [r7, #4]
 3785 001a 9A00     		lsls	r2, r3, #2
 3786 001c FB68     		ldr	r3, [r7, #12]
 3787 001e 1344     		add	r3, r3, r2
 3788 0020 FB60     		str	r3, [r7, #12]
2286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3789              		.loc 1 2288 0
 3790 0022 FB68     		ldr	r3, [r7, #12]
 3791 0024 3A68     		ldr	r2, [r7]
 3792 0026 1A60     		str	r2, [r3]
2289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3793              		.loc 1 2289 0
 3794 0028 1437     		adds	r7, r7, #20
 3795 002a BD46     		mov	sp, r7
 3796              		@ sp needed
 3797 002c 5DF8047B 		ldr	r7, [sp], #4
 3798 0030 7047     		bx	lr
 3799              		.cfi_endproc
 3800              	.LFE154:
 3802 0032 00BF     		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3803              		.align	2
 3804              		.global	RTC_ReadBackupRegister
 3805              		.thumb
 3806              		.thumb_func
 3808              	RTC_ReadBackupRegister:
 3809              	.LFB155:
2290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3810              		.loc 1 2299 0
 3811              		.cfi_startproc
 3812              		@ args = 0, pretend = 0, frame = 16
 3813              		@ frame_needed = 1, uses_anonymous_args = 0
 3814              		@ link register save eliminated.
 3815 0000 80B4     		push	{r7}
 3816              	.LCFI131:
 3817              		.cfi_def_cfa_offset 4
 3818              		.cfi_offset 7, -4
 3819 0002 85B0     		sub	sp, sp, #20
 3820              	.LCFI132:
 3821              		.cfi_def_cfa_offset 24
 3822 0004 00AF     		add	r7, sp, #0
 3823              	.LCFI133:
 3824              		.cfi_def_cfa_register 7
 3825 0006 7860     		str	r0, [r7, #4]
2300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3826              		.loc 1 2300 0
 3827 0008 0023     		movs	r3, #0
 3828 000a FB60     		str	r3, [r7, #12]
2301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3829              		.loc 1 2305 0
 3830 000c 42F65003 		movw	r3, #10320
 3831 0010 C4F20003 		movt	r3, 16384
 3832 0014 FB60     		str	r3, [r7, #12]
2306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3833              		.loc 1 2306 0
 3834 0016 7B68     		ldr	r3, [r7, #4]
 3835 0018 9A00     		lsls	r2, r3, #2
 3836 001a FB68     		ldr	r3, [r7, #12]
 3837 001c 1344     		add	r3, r3, r2
 3838 001e FB60     		str	r3, [r7, #12]
2307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3839              		.loc 1 2309 0
 3840 0020 FB68     		ldr	r3, [r7, #12]
 3841 0022 1B68     		ldr	r3, [r3]
2310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3842              		.loc 1 2310 0
 3843 0024 1846     		mov	r0, r3
 3844 0026 1437     		adds	r7, r7, #20
 3845 0028 BD46     		mov	sp, r7
 3846              		@ sp needed
 3847 002a 5DF8047B 		ldr	r7, [sp], #4
 3848 002e 7047     		bx	lr
 3849              		.cfi_endproc
 3850              	.LFE155:
 3852              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3853              		.align	2
 3854              		.global	RTC_TamperPinSelection
 3855              		.thumb
 3856              		.thumb_func
 3858              	RTC_TamperPinSelection:
 3859              	.LFB156:
2311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3860              		.loc 1 2339 0
 3861              		.cfi_startproc
 3862              		@ args = 0, pretend = 0, frame = 8
 3863              		@ frame_needed = 1, uses_anonymous_args = 0
 3864              		@ link register save eliminated.
 3865 0000 80B4     		push	{r7}
 3866              	.LCFI134:
 3867              		.cfi_def_cfa_offset 4
 3868              		.cfi_offset 7, -4
 3869 0002 83B0     		sub	sp, sp, #12
 3870              	.LCFI135:
 3871              		.cfi_def_cfa_offset 16
 3872 0004 00AF     		add	r7, sp, #0
 3873              	.LCFI136:
 3874              		.cfi_def_cfa_register 7
 3875 0006 7860     		str	r0, [r7, #4]
2340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3876              		.loc 1 2343 0
 3877 0008 4FF42053 		mov	r3, #10240
 3878 000c C4F20003 		movt	r3, 16384
 3879 0010 4FF42052 		mov	r2, #10240
 3880 0014 C4F20002 		movt	r2, 16384
 3881 0018 126C     		ldr	r2, [r2, #64]
 3882 001a 22F48032 		bic	r2, r2, #65536
 3883 001e 1A64     		str	r2, [r3, #64]
2344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3884              		.loc 1 2344 0
 3885 0020 4FF42053 		mov	r3, #10240
 3886 0024 C4F20003 		movt	r3, 16384
 3887 0028 4FF42052 		mov	r2, #10240
 3888 002c C4F20002 		movt	r2, 16384
 3889 0030 116C     		ldr	r1, [r2, #64]
 3890 0032 7A68     		ldr	r2, [r7, #4]
 3891 0034 0A43     		orrs	r2, r2, r1
 3892 0036 1A64     		str	r2, [r3, #64]
2345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3893              		.loc 1 2345 0
 3894 0038 0C37     		adds	r7, r7, #12
 3895 003a BD46     		mov	sp, r7
 3896              		@ sp needed
 3897 003c 5DF8047B 		ldr	r7, [sp], #4
 3898 0040 7047     		bx	lr
 3899              		.cfi_endproc
 3900              	.LFE156:
 3902 0042 00BF     		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3903              		.align	2
 3904              		.global	RTC_TimeStampPinSelection
 3905              		.thumb
 3906              		.thumb_func
 3908              	RTC_TimeStampPinSelection:
 3909              	.LFB157:
2346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3910              		.loc 1 2356 0
 3911              		.cfi_startproc
 3912              		@ args = 0, pretend = 0, frame = 8
 3913              		@ frame_needed = 1, uses_anonymous_args = 0
 3914              		@ link register save eliminated.
 3915 0000 80B4     		push	{r7}
 3916              	.LCFI137:
 3917              		.cfi_def_cfa_offset 4
 3918              		.cfi_offset 7, -4
 3919 0002 83B0     		sub	sp, sp, #12
 3920              	.LCFI138:
 3921              		.cfi_def_cfa_offset 16
 3922 0004 00AF     		add	r7, sp, #0
 3923              	.LCFI139:
 3924              		.cfi_def_cfa_register 7
 3925 0006 7860     		str	r0, [r7, #4]
2357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3926              		.loc 1 2360 0
 3927 0008 4FF42053 		mov	r3, #10240
 3928 000c C4F20003 		movt	r3, 16384
 3929 0010 4FF42052 		mov	r2, #10240
 3930 0014 C4F20002 		movt	r2, 16384
 3931 0018 126C     		ldr	r2, [r2, #64]
 3932 001a 22F40032 		bic	r2, r2, #131072
 3933 001e 1A64     		str	r2, [r3, #64]
2361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3934              		.loc 1 2361 0
 3935 0020 4FF42053 		mov	r3, #10240
 3936 0024 C4F20003 		movt	r3, 16384
 3937 0028 4FF42052 		mov	r2, #10240
 3938 002c C4F20002 		movt	r2, 16384
 3939 0030 116C     		ldr	r1, [r2, #64]
 3940 0032 7A68     		ldr	r2, [r7, #4]
 3941 0034 0A43     		orrs	r2, r2, r1
 3942 0036 1A64     		str	r2, [r3, #64]
2362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3943              		.loc 1 2362 0
 3944 0038 0C37     		adds	r7, r7, #12
 3945 003a BD46     		mov	sp, r7
 3946              		@ sp needed
 3947 003c 5DF8047B 		ldr	r7, [sp], #4
 3948 0040 7047     		bx	lr
 3949              		.cfi_endproc
 3950              	.LFE157:
 3952 0042 00BF     		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3953              		.align	2
 3954              		.global	RTC_OutputTypeConfig
 3955              		.thumb
 3956              		.thumb_func
 3958              	RTC_OutputTypeConfig:
 3959              	.LFB158:
2363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3960              		.loc 1 2375 0
 3961              		.cfi_startproc
 3962              		@ args = 0, pretend = 0, frame = 8
 3963              		@ frame_needed = 1, uses_anonymous_args = 0
 3964              		@ link register save eliminated.
 3965 0000 80B4     		push	{r7}
 3966              	.LCFI140:
 3967              		.cfi_def_cfa_offset 4
 3968              		.cfi_offset 7, -4
 3969 0002 83B0     		sub	sp, sp, #12
 3970              	.LCFI141:
 3971              		.cfi_def_cfa_offset 16
 3972 0004 00AF     		add	r7, sp, #0
 3973              	.LCFI142:
 3974              		.cfi_def_cfa_register 7
 3975 0006 7860     		str	r0, [r7, #4]
2376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3976              		.loc 1 2379 0
 3977 0008 4FF42053 		mov	r3, #10240
 3978 000c C4F20003 		movt	r3, 16384
 3979 0010 4FF42052 		mov	r2, #10240
 3980 0014 C4F20002 		movt	r2, 16384
 3981 0018 126C     		ldr	r2, [r2, #64]
 3982 001a 22F48022 		bic	r2, r2, #262144
 3983 001e 1A64     		str	r2, [r3, #64]
2380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3984              		.loc 1 2380 0
 3985 0020 4FF42053 		mov	r3, #10240
 3986 0024 C4F20003 		movt	r3, 16384
 3987 0028 4FF42052 		mov	r2, #10240
 3988 002c C4F20002 		movt	r2, 16384
 3989 0030 116C     		ldr	r1, [r2, #64]
 3990 0032 7A68     		ldr	r2, [r7, #4]
 3991 0034 0A43     		orrs	r2, r2, r1
 3992 0036 1A64     		str	r2, [r3, #64]
2381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3993              		.loc 1 2381 0
 3994 0038 0C37     		adds	r7, r7, #12
 3995 003a BD46     		mov	sp, r7
 3996              		@ sp needed
 3997 003c 5DF8047B 		ldr	r7, [sp], #4
 3998 0040 7047     		bx	lr
 3999              		.cfi_endproc
 4000              	.LFE158:
 4002 0042 00BF     		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 4003              		.align	2
 4004              		.global	RTC_SynchroShiftConfig
 4005              		.thumb
 4006              		.thumb_func
 4008              	RTC_SynchroShiftConfig:
 4009              	.LFB159:
2382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4010              		.loc 1 2413 0
 4011              		.cfi_startproc
 4012              		@ args = 0, pretend = 0, frame = 16
 4013              		@ frame_needed = 1, uses_anonymous_args = 0
 4014 0000 80B5     		push	{r7, lr}
 4015              	.LCFI143:
 4016              		.cfi_def_cfa_offset 8
 4017              		.cfi_offset 7, -8
 4018              		.cfi_offset 14, -4
 4019 0002 84B0     		sub	sp, sp, #16
 4020              	.LCFI144:
 4021              		.cfi_def_cfa_offset 24
 4022 0004 00AF     		add	r7, sp, #0
 4023              	.LCFI145:
 4024              		.cfi_def_cfa_register 7
 4025 0006 7860     		str	r0, [r7, #4]
 4026 0008 3960     		str	r1, [r7]
2414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 4027              		.loc 1 2414 0
 4028 000a 0023     		movs	r3, #0
 4029 000c FB73     		strb	r3, [r7, #15]
2415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 4030              		.loc 1 2415 0
 4031 000e 0023     		movs	r3, #0
 4032 0010 BB60     		str	r3, [r7, #8]
2416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4033              		.loc 1 2422 0
 4034 0012 4FF42053 		mov	r3, #10240
 4035 0016 C4F20003 		movt	r3, 16384
 4036 001a CA22     		movs	r2, #202
 4037 001c 5A62     		str	r2, [r3, #36]
2423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4038              		.loc 1 2423 0
 4039 001e 4FF42053 		mov	r3, #10240
 4040 0022 C4F20003 		movt	r3, 16384
 4041 0026 5322     		movs	r2, #83
 4042 0028 5A62     		str	r2, [r3, #36]
2424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 4043              		.loc 1 2426 0
 4044 002a 4FF42053 		mov	r3, #10240
 4045 002e C4F20003 		movt	r3, 16384
 4046 0032 DB68     		ldr	r3, [r3, #12]
 4047 0034 03F00803 		and	r3, r3, #8
 4048 0038 002B     		cmp	r3, #0
 4049 003a 10D0     		beq	.L164
2427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4050              		.loc 1 2429 0
 4051 003c 02E0     		b	.L165
 4052              	.L166:
2430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 4053              		.loc 1 2431 0
 4054 003e BB68     		ldr	r3, [r7, #8]
 4055 0040 0133     		adds	r3, r3, #1
 4056 0042 BB60     		str	r3, [r7, #8]
 4057              	.L165:
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 4058              		.loc 1 2429 0 discriminator 1
 4059 0044 4FF42053 		mov	r3, #10240
 4060 0048 C4F20003 		movt	r3, 16384
 4061 004c DB68     		ldr	r3, [r3, #12]
 4062 004e 03F00803 		and	r3, r3, #8
 4063 0052 002B     		cmp	r3, #0
 4064 0054 03D0     		beq	.L164
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 4065              		.loc 1 2429 0 is_stmt 0 discriminator 2
 4066 0056 BB68     		ldr	r3, [r7, #8]
 4067 0058 B3F5805F 		cmp	r3, #4096
 4068 005c EFD1     		bne	.L166
 4069              	.L164:
2432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4070              		.loc 1 2436 0 is_stmt 1
 4071 005e 4FF42053 		mov	r3, #10240
 4072 0062 C4F20003 		movt	r3, 16384
 4073 0066 DB68     		ldr	r3, [r3, #12]
 4074 0068 03F00803 		and	r3, r3, #8
 4075 006c 002B     		cmp	r3, #0
 4076 006e 1ED1     		bne	.L167
2437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4077              		.loc 1 2439 0
 4078 0070 4FF42053 		mov	r3, #10240
 4079 0074 C4F20003 		movt	r3, 16384
 4080 0078 9B68     		ldr	r3, [r3, #8]
 4081 007a 03F01003 		and	r3, r3, #16
 4082 007e 002B     		cmp	r3, #0
 4083 0080 12D1     		bne	.L168
2440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4084              		.loc 1 2442 0
 4085 0082 4FF42053 		mov	r3, #10240
 4086 0086 C4F20003 		movt	r3, 16384
 4087 008a 3968     		ldr	r1, [r7]
 4088 008c 7A68     		ldr	r2, [r7, #4]
 4089 008e 0A43     		orrs	r2, r2, r1
 4090 0090 DA62     		str	r2, [r3, #44]
2443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4091              		.loc 1 2444 0
 4092 0092 FFF7FEFF 		bl	RTC_WaitForSynchro
 4093 0096 0346     		mov	r3, r0
 4094 0098 002B     		cmp	r3, #0
 4095 009a 02D1     		bne	.L169
2445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4096              		.loc 1 2446 0
 4097 009c 0023     		movs	r3, #0
 4098 009e FB73     		strb	r3, [r7, #15]
 4099 00a0 07E0     		b	.L172
 4100              	.L169:
2447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4101              		.loc 1 2450 0
 4102 00a2 0123     		movs	r3, #1
 4103 00a4 FB73     		strb	r3, [r7, #15]
 4104 00a6 04E0     		b	.L172
 4105              	.L168:
2451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4106              		.loc 1 2455 0
 4107 00a8 0023     		movs	r3, #0
 4108 00aa FB73     		strb	r3, [r7, #15]
 4109 00ac 01E0     		b	.L172
 4110              	.L167:
2456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4111              		.loc 1 2460 0
 4112 00ae 0023     		movs	r3, #0
 4113 00b0 FB73     		strb	r3, [r7, #15]
 4114              	.L172:
2461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4115              		.loc 1 2464 0
 4116 00b2 4FF42053 		mov	r3, #10240
 4117 00b6 C4F20003 		movt	r3, 16384
 4118 00ba FF22     		movs	r2, #255
 4119 00bc 5A62     		str	r2, [r3, #36]
2465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4120              		.loc 1 2466 0
 4121 00be FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4122              		.loc 1 2467 0
 4123 00c0 1846     		mov	r0, r3
 4124 00c2 1037     		adds	r7, r7, #16
 4125 00c4 BD46     		mov	sp, r7
 4126              		@ sp needed
 4127 00c6 80BD     		pop	{r7, pc}
 4128              		.cfi_endproc
 4129              	.LFE159:
 4131              		.section	.text.RTC_ITConfig,"ax",%progbits
 4132              		.align	2
 4133              		.global	RTC_ITConfig
 4134              		.thumb
 4135              		.thumb_func
 4137              	RTC_ITConfig:
 4138              	.LFB160:
2468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4139              		.loc 1 2532 0
 4140              		.cfi_startproc
 4141              		@ args = 0, pretend = 0, frame = 8
 4142              		@ frame_needed = 1, uses_anonymous_args = 0
 4143              		@ link register save eliminated.
 4144 0000 80B4     		push	{r7}
 4145              	.LCFI146:
 4146              		.cfi_def_cfa_offset 4
 4147              		.cfi_offset 7, -4
 4148 0002 83B0     		sub	sp, sp, #12
 4149              	.LCFI147:
 4150              		.cfi_def_cfa_offset 16
 4151 0004 00AF     		add	r7, sp, #0
 4152              	.LCFI148:
 4153              		.cfi_def_cfa_register 7
 4154 0006 7860     		str	r0, [r7, #4]
 4155 0008 0B46     		mov	r3, r1
 4156 000a FB70     		strb	r3, [r7, #3]
2533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4157              		.loc 1 2538 0
 4158 000c 4FF42053 		mov	r3, #10240
 4159 0010 C4F20003 		movt	r3, 16384
 4160 0014 CA22     		movs	r2, #202
 4161 0016 5A62     		str	r2, [r3, #36]
2539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4162              		.loc 1 2539 0
 4163 0018 4FF42053 		mov	r3, #10240
 4164 001c C4F20003 		movt	r3, 16384
 4165 0020 5322     		movs	r2, #83
 4166 0022 5A62     		str	r2, [r3, #36]
2540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4167              		.loc 1 2541 0
 4168 0024 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4169 0026 002B     		cmp	r3, #0
 4170 0028 1CD0     		beq	.L175
2542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4171              		.loc 1 2544 0
 4172 002a 4FF42053 		mov	r3, #10240
 4173 002e C4F20003 		movt	r3, 16384
 4174 0032 4FF42052 		mov	r2, #10240
 4175 0036 C4F20002 		movt	r2, 16384
 4176 003a 9168     		ldr	r1, [r2, #8]
 4177 003c 7A68     		ldr	r2, [r7, #4]
 4178 003e 22F00402 		bic	r2, r2, #4
 4179 0042 0A43     		orrs	r2, r2, r1
 4180 0044 9A60     		str	r2, [r3, #8]
2545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4181              		.loc 1 2546 0
 4182 0046 4FF42053 		mov	r3, #10240
 4183 004a C4F20003 		movt	r3, 16384
 4184 004e 4FF42052 		mov	r2, #10240
 4185 0052 C4F20002 		movt	r2, 16384
 4186 0056 116C     		ldr	r1, [r2, #64]
 4187 0058 7A68     		ldr	r2, [r7, #4]
 4188 005a 02F00402 		and	r2, r2, #4
 4189 005e 0A43     		orrs	r2, r2, r1
 4190 0060 1A64     		str	r2, [r3, #64]
 4191 0062 1DE0     		b	.L176
 4192              	.L175:
2547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4193              		.loc 1 2551 0
 4194 0064 4FF42053 		mov	r3, #10240
 4195 0068 C4F20003 		movt	r3, 16384
 4196 006c 4FF42052 		mov	r2, #10240
 4197 0070 C4F20002 		movt	r2, 16384
 4198 0074 9168     		ldr	r1, [r2, #8]
 4199 0076 7A68     		ldr	r2, [r7, #4]
 4200 0078 22F00402 		bic	r2, r2, #4
 4201 007c D243     		mvns	r2, r2
 4202 007e 0A40     		ands	r2, r2, r1
 4203 0080 9A60     		str	r2, [r3, #8]
2552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4204              		.loc 1 2553 0
 4205 0082 4FF42053 		mov	r3, #10240
 4206 0086 C4F20003 		movt	r3, 16384
 4207 008a 4FF42052 		mov	r2, #10240
 4208 008e C4F20002 		movt	r2, 16384
 4209 0092 116C     		ldr	r1, [r2, #64]
 4210 0094 7A68     		ldr	r2, [r7, #4]
 4211 0096 02F00402 		and	r2, r2, #4
 4212 009a D243     		mvns	r2, r2
 4213 009c 0A40     		ands	r2, r2, r1
 4214 009e 1A64     		str	r2, [r3, #64]
 4215              	.L176:
2554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4216              		.loc 1 2556 0
 4217 00a0 4FF42053 		mov	r3, #10240
 4218 00a4 C4F20003 		movt	r3, 16384
 4219 00a8 FF22     		movs	r2, #255
 4220 00aa 5A62     		str	r2, [r3, #36]
2557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4221              		.loc 1 2557 0
 4222 00ac 0C37     		adds	r7, r7, #12
 4223 00ae BD46     		mov	sp, r7
 4224              		@ sp needed
 4225 00b0 5DF8047B 		ldr	r7, [sp], #4
 4226 00b4 7047     		bx	lr
 4227              		.cfi_endproc
 4228              	.LFE160:
 4230 00b6 00BF     		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4231              		.align	2
 4232              		.global	RTC_GetFlagStatus
 4233              		.thumb
 4234              		.thumb_func
 4236              	RTC_GetFlagStatus:
 4237              	.LFB161:
2558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4238              		.loc 1 2578 0
 4239              		.cfi_startproc
 4240              		@ args = 0, pretend = 0, frame = 16
 4241              		@ frame_needed = 1, uses_anonymous_args = 0
 4242              		@ link register save eliminated.
 4243 0000 80B4     		push	{r7}
 4244              	.LCFI149:
 4245              		.cfi_def_cfa_offset 4
 4246              		.cfi_offset 7, -4
 4247 0002 85B0     		sub	sp, sp, #20
 4248              	.LCFI150:
 4249              		.cfi_def_cfa_offset 24
 4250 0004 00AF     		add	r7, sp, #0
 4251              	.LCFI151:
 4252              		.cfi_def_cfa_register 7
 4253 0006 7860     		str	r0, [r7, #4]
2579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4254              		.loc 1 2579 0
 4255 0008 0023     		movs	r3, #0
 4256 000a FB73     		strb	r3, [r7, #15]
2580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4257              		.loc 1 2580 0
 4258 000c 0023     		movs	r3, #0
 4259 000e BB60     		str	r3, [r7, #8]
2581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4260              		.loc 1 2586 0
 4261 0010 4FF42053 		mov	r3, #10240
 4262 0014 C4F20003 		movt	r3, 16384
 4263 0018 DA68     		ldr	r2, [r3, #12]
 4264 001a 43F67773 		movw	r3, #16247
 4265 001e 1340     		ands	r3, r3, r2
 4266 0020 BB60     		str	r3, [r7, #8]
2587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4267              		.loc 1 2589 0
 4268 0022 BA68     		ldr	r2, [r7, #8]
 4269 0024 7B68     		ldr	r3, [r7, #4]
 4270 0026 1340     		ands	r3, r3, r2
 4271 0028 002B     		cmp	r3, #0
 4272 002a 02D0     		beq	.L178
2590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4273              		.loc 1 2591 0
 4274 002c 0123     		movs	r3, #1
 4275 002e FB73     		strb	r3, [r7, #15]
 4276 0030 01E0     		b	.L179
 4277              	.L178:
2592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4278              		.loc 1 2595 0
 4279 0032 0023     		movs	r3, #0
 4280 0034 FB73     		strb	r3, [r7, #15]
 4281              	.L179:
2596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4282              		.loc 1 2597 0
 4283 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4284              		.loc 1 2598 0
 4285 0038 1846     		mov	r0, r3
 4286 003a 1437     		adds	r7, r7, #20
 4287 003c BD46     		mov	sp, r7
 4288              		@ sp needed
 4289 003e 5DF8047B 		ldr	r7, [sp], #4
 4290 0042 7047     		bx	lr
 4291              		.cfi_endproc
 4292              	.LFE161:
 4294              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4295              		.align	2
 4296              		.global	RTC_ClearFlag
 4297              		.thumb
 4298              		.thumb_func
 4300              	RTC_ClearFlag:
 4301              	.LFB162:
2599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4302              		.loc 1 2614 0
 4303              		.cfi_startproc
 4304              		@ args = 0, pretend = 0, frame = 8
 4305              		@ frame_needed = 1, uses_anonymous_args = 0
 4306              		@ link register save eliminated.
 4307 0000 80B4     		push	{r7}
 4308              	.LCFI152:
 4309              		.cfi_def_cfa_offset 4
 4310              		.cfi_offset 7, -4
 4311 0002 83B0     		sub	sp, sp, #12
 4312              	.LCFI153:
 4313              		.cfi_def_cfa_offset 16
 4314 0004 00AF     		add	r7, sp, #0
 4315              	.LCFI154:
 4316              		.cfi_def_cfa_register 7
 4317 0006 7860     		str	r0, [r7, #4]
2615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4318              		.loc 1 2619 0
 4319 0008 4FF42053 		mov	r3, #10240
 4320 000c C4F20003 		movt	r3, 16384
 4321 0010 7A68     		ldr	r2, [r7, #4]
 4322 0012 92B2     		uxth	r2, r2
 4323 0014 42F08002 		orr	r2, r2, #128
 4324 0018 D143     		mvns	r1, r2
 4325 001a 4FF42052 		mov	r2, #10240
 4326 001e C4F20002 		movt	r2, 16384
 4327 0022 D268     		ldr	r2, [r2, #12]
 4328 0024 02F08002 		and	r2, r2, #128
 4329 0028 0A43     		orrs	r2, r2, r1
 4330 002a DA60     		str	r2, [r3, #12]
2620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4331              		.loc 1 2620 0
 4332 002c 0C37     		adds	r7, r7, #12
 4333 002e BD46     		mov	sp, r7
 4334              		@ sp needed
 4335 0030 5DF8047B 		ldr	r7, [sp], #4
 4336 0034 7047     		bx	lr
 4337              		.cfi_endproc
 4338              	.LFE162:
 4340 0036 00BF     		.section	.text.RTC_GetITStatus,"ax",%progbits
 4341              		.align	2
 4342              		.global	RTC_GetITStatus
 4343              		.thumb
 4344              		.thumb_func
 4346              	RTC_GetITStatus:
 4347              	.LFB163:
2621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4348              		.loc 1 2634 0
 4349              		.cfi_startproc
 4350              		@ args = 0, pretend = 0, frame = 24
 4351              		@ frame_needed = 1, uses_anonymous_args = 0
 4352              		@ link register save eliminated.
 4353 0000 80B4     		push	{r7}
 4354              	.LCFI155:
 4355              		.cfi_def_cfa_offset 4
 4356              		.cfi_offset 7, -4
 4357 0002 87B0     		sub	sp, sp, #28
 4358              	.LCFI156:
 4359              		.cfi_def_cfa_offset 32
 4360 0004 00AF     		add	r7, sp, #0
 4361              	.LCFI157:
 4362              		.cfi_def_cfa_register 7
 4363 0006 7860     		str	r0, [r7, #4]
2635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4364              		.loc 1 2635 0
 4365 0008 0023     		movs	r3, #0
 4366 000a FB75     		strb	r3, [r7, #23]
2636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4367              		.loc 1 2636 0
 4368 000c 0023     		movs	r3, #0
 4369 000e 3B61     		str	r3, [r7, #16]
 4370 0010 0023     		movs	r3, #0
 4371 0012 FB60     		str	r3, [r7, #12]
2637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4372              		.loc 1 2642 0
 4373 0014 4FF42053 		mov	r3, #10240
 4374 0018 C4F20003 		movt	r3, 16384
 4375 001c 1B6C     		ldr	r3, [r3, #64]
 4376 001e 03F00403 		and	r3, r3, #4
 4377 0022 3B61     		str	r3, [r7, #16]
2643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4378              		.loc 1 2645 0
 4379 0024 4FF42053 		mov	r3, #10240
 4380 0028 C4F20003 		movt	r3, 16384
 4381 002c 9A68     		ldr	r2, [r3, #8]
 4382 002e 7B68     		ldr	r3, [r7, #4]
 4383 0030 1A40     		ands	r2, r2, r3
 4384 0032 7B68     		ldr	r3, [r7, #4]
 4385 0034 D90B     		lsrs	r1, r3, #15
 4386 0036 3B69     		ldr	r3, [r7, #16]
 4387 0038 0B40     		ands	r3, r3, r1
 4388 003a 1343     		orrs	r3, r3, r2
 4389 003c FB60     		str	r3, [r7, #12]
2646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4390              		.loc 1 2648 0
 4391 003e 4FF42053 		mov	r3, #10240
 4392 0042 C4F20003 		movt	r3, 16384
 4393 0046 DA68     		ldr	r2, [r3, #12]
 4394 0048 7B68     		ldr	r3, [r7, #4]
 4395 004a 1B09     		lsrs	r3, r3, #4
 4396 004c 1340     		ands	r3, r3, r2
 4397 004e 3B61     		str	r3, [r7, #16]
2649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4398              		.loc 1 2651 0
 4399 0050 FB68     		ldr	r3, [r7, #12]
 4400 0052 002B     		cmp	r3, #0
 4401 0054 06D0     		beq	.L183
 4402              		.loc 1 2651 0 is_stmt 0 discriminator 1
 4403 0056 3B69     		ldr	r3, [r7, #16]
 4404 0058 9BB2     		uxth	r3, r3
 4405 005a 002B     		cmp	r3, #0
 4406 005c 02D0     		beq	.L183
2652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4407              		.loc 1 2653 0 is_stmt 1
 4408 005e 0123     		movs	r3, #1
 4409 0060 FB75     		strb	r3, [r7, #23]
 4410 0062 01E0     		b	.L184
 4411              	.L183:
2654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4412              		.loc 1 2657 0
 4413 0064 0023     		movs	r3, #0
 4414 0066 FB75     		strb	r3, [r7, #23]
 4415              	.L184:
2658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4416              		.loc 1 2659 0
 4417 0068 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4418              		.loc 1 2660 0
 4419 006a 1846     		mov	r0, r3
 4420 006c 1C37     		adds	r7, r7, #28
 4421 006e BD46     		mov	sp, r7
 4422              		@ sp needed
 4423 0070 5DF8047B 		ldr	r7, [sp], #4
 4424 0074 7047     		bx	lr
 4425              		.cfi_endproc
 4426              	.LFE163:
 4428 0076 00BF     		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4429              		.align	2
 4430              		.global	RTC_ClearITPendingBit
 4431              		.thumb
 4432              		.thumb_func
 4434              	RTC_ClearITPendingBit:
 4435              	.LFB164:
2661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4436              		.loc 1 2674 0
 4437              		.cfi_startproc
 4438              		@ args = 0, pretend = 0, frame = 16
 4439              		@ frame_needed = 1, uses_anonymous_args = 0
 4440              		@ link register save eliminated.
 4441 0000 80B4     		push	{r7}
 4442              	.LCFI158:
 4443              		.cfi_def_cfa_offset 4
 4444              		.cfi_offset 7, -4
 4445 0002 85B0     		sub	sp, sp, #20
 4446              	.LCFI159:
 4447              		.cfi_def_cfa_offset 24
 4448 0004 00AF     		add	r7, sp, #0
 4449              	.LCFI160:
 4450              		.cfi_def_cfa_register 7
 4451 0006 7860     		str	r0, [r7, #4]
2675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4452              		.loc 1 2675 0
 4453 0008 0023     		movs	r3, #0
 4454 000a FB60     		str	r3, [r7, #12]
2676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4455              		.loc 1 2681 0
 4456 000c 7B68     		ldr	r3, [r7, #4]
 4457 000e 1B09     		lsrs	r3, r3, #4
 4458 0010 FB60     		str	r3, [r7, #12]
2682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4459              		.loc 1 2684 0
 4460 0012 4FF42053 		mov	r3, #10240
 4461 0016 C4F20003 		movt	r3, 16384
 4462 001a FA68     		ldr	r2, [r7, #12]
 4463 001c 92B2     		uxth	r2, r2
 4464 001e 42F08002 		orr	r2, r2, #128
 4465 0022 D143     		mvns	r1, r2
 4466 0024 4FF42052 		mov	r2, #10240
 4467 0028 C4F20002 		movt	r2, 16384
 4468 002c D268     		ldr	r2, [r2, #12]
 4469 002e 02F08002 		and	r2, r2, #128
 4470 0032 0A43     		orrs	r2, r2, r1
 4471 0034 DA60     		str	r2, [r3, #12]
2685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4472              		.loc 1 2685 0
 4473 0036 1437     		adds	r7, r7, #20
 4474 0038 BD46     		mov	sp, r7
 4475              		@ sp needed
 4476 003a 5DF8047B 		ldr	r7, [sp], #4
 4477 003e 7047     		bx	lr
 4478              		.cfi_endproc
 4479              	.LFE164:
 4481              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4482              		.align	2
 4483              		.thumb
 4484              		.thumb_func
 4486              	RTC_ByteToBcd2:
 4487              	.LFB165:
2686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4488              		.loc 1 2697 0
 4489              		.cfi_startproc
 4490              		@ args = 0, pretend = 0, frame = 16
 4491              		@ frame_needed = 1, uses_anonymous_args = 0
 4492              		@ link register save eliminated.
 4493 0000 80B4     		push	{r7}
 4494              	.LCFI161:
 4495              		.cfi_def_cfa_offset 4
 4496              		.cfi_offset 7, -4
 4497 0002 85B0     		sub	sp, sp, #20
 4498              	.LCFI162:
 4499              		.cfi_def_cfa_offset 24
 4500 0004 00AF     		add	r7, sp, #0
 4501              	.LCFI163:
 4502              		.cfi_def_cfa_register 7
 4503 0006 0346     		mov	r3, r0
 4504 0008 FB71     		strb	r3, [r7, #7]
2698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4505              		.loc 1 2698 0
 4506 000a 0023     		movs	r3, #0
 4507 000c FB73     		strb	r3, [r7, #15]
2699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4508              		.loc 1 2700 0
 4509 000e 05E0     		b	.L188
 4510              	.L189:
2701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4511              		.loc 1 2702 0
 4512 0010 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 4513 0012 0133     		adds	r3, r3, #1
 4514 0014 FB73     		strb	r3, [r7, #15]
2703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4515              		.loc 1 2703 0
 4516 0016 FB79     		ldrb	r3, [r7, #7]
 4517 0018 0A3B     		subs	r3, r3, #10
 4518 001a FB71     		strb	r3, [r7, #7]
 4519              	.L188:
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 4520              		.loc 1 2700 0 discriminator 1
 4521 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4522 001e 092B     		cmp	r3, #9
 4523 0020 F6D8     		bhi	.L189
2704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4524              		.loc 1 2706 0
 4525 0022 FB7B     		ldrb	r3, [r7, #15]
 4526 0024 1B01     		lsls	r3, r3, #4
 4527 0026 DAB2     		uxtb	r2, r3
 4528 0028 FB79     		ldrb	r3, [r7, #7]
 4529 002a 1343     		orrs	r3, r3, r2
 4530 002c DBB2     		uxtb	r3, r3
2707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4531              		.loc 1 2707 0
 4532 002e 1846     		mov	r0, r3
 4533 0030 1437     		adds	r7, r7, #20
 4534 0032 BD46     		mov	sp, r7
 4535              		@ sp needed
 4536 0034 5DF8047B 		ldr	r7, [sp], #4
 4537 0038 7047     		bx	lr
 4538              		.cfi_endproc
 4539              	.LFE165:
 4541 003a 00BF     		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 4542              		.align	2
 4543              		.thumb
 4544              		.thumb_func
 4546              	RTC_Bcd2ToByte:
 4547              	.LFB166:
2708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4548              		.loc 1 2715 0
 4549              		.cfi_startproc
 4550              		@ args = 0, pretend = 0, frame = 16
 4551              		@ frame_needed = 1, uses_anonymous_args = 0
 4552              		@ link register save eliminated.
 4553 0000 80B4     		push	{r7}
 4554              	.LCFI164:
 4555              		.cfi_def_cfa_offset 4
 4556              		.cfi_offset 7, -4
 4557 0002 85B0     		sub	sp, sp, #20
 4558              	.LCFI165:
 4559              		.cfi_def_cfa_offset 24
 4560 0004 00AF     		add	r7, sp, #0
 4561              	.LCFI166:
 4562              		.cfi_def_cfa_register 7
 4563 0006 0346     		mov	r3, r0
 4564 0008 FB71     		strb	r3, [r7, #7]
2716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4565              		.loc 1 2716 0
 4566 000a 0023     		movs	r3, #0
 4567 000c FB73     		strb	r3, [r7, #15]
2717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4568              		.loc 1 2717 0
 4569 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4570 0010 1B09     		lsrs	r3, r3, #4
 4571 0012 DBB2     		uxtb	r3, r3
 4572 0014 1A46     		mov	r2, r3
 4573 0016 9200     		lsls	r2, r2, #2
 4574 0018 1344     		add	r3, r3, r2
 4575 001a 5B00     		lsls	r3, r3, #1
 4576 001c FB73     		strb	r3, [r7, #15]
2718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4577              		.loc 1 2718 0
 4578 001e FB79     		ldrb	r3, [r7, #7]
 4579 0020 03F00F03 		and	r3, r3, #15
 4580 0024 DAB2     		uxtb	r2, r3
 4581 0026 FB7B     		ldrb	r3, [r7, #15]
 4582 0028 1344     		add	r3, r3, r2
 4583 002a DBB2     		uxtb	r3, r3
2719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4584              		.loc 1 2719 0
 4585 002c 1846     		mov	r0, r3
 4586 002e 1437     		adds	r7, r7, #20
 4587 0030 BD46     		mov	sp, r7
 4588              		@ sp needed
 4589 0032 5DF8047B 		ldr	r7, [sp], #4
 4590 0036 7047     		bx	lr
 4591              		.cfi_endproc
 4592              	.LFE166:
 4594              		.text
 4595              	.Letext0:
 4596              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4597              		.file 3 "/usr/include/newlib/stdint.h"
 4598              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 4599              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h"
 4600              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/ccVyFaQd.s:20     .text.RTC_DeInit:0000000000000000 $t
     /tmp/ccVyFaQd.s:25     .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/ccVyFaQd.s:406    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccVyFaQd.s:538    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/ccVyFaQd.s:196    .text.RTC_Init:0000000000000000 $t
     /tmp/ccVyFaQd.s:201    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/ccVyFaQd.s:502    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccVyFaQd.s:300    .text.RTC_StructInit:0000000000000000 $t
     /tmp/ccVyFaQd.s:305    .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/ccVyFaQd.s:345    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:350    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/ccVyFaQd.s:401    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccVyFaQd.s:497    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccVyFaQd.s:533    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccVyFaQd.s:635    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:640    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/ccVyFaQd.s:728    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:733    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/ccVyFaQd.s:800    .text.RTC_SetTime:0000000000000000 $t
     /tmp/ccVyFaQd.s:805    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/ccVyFaQd.s:4546   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccVyFaQd.s:4486   .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccVyFaQd.s:989    .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/ccVyFaQd.s:994    .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/ccVyFaQd.s:1038   .text.RTC_GetTime:0000000000000000 $t
     /tmp/ccVyFaQd.s:1043   .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/ccVyFaQd.s:1141   .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/ccVyFaQd.s:1146   .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/ccVyFaQd.s:1188   .text.RTC_SetDate:0000000000000000 $t
     /tmp/ccVyFaQd.s:1193   .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/ccVyFaQd.s:1378   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/ccVyFaQd.s:1383   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/ccVyFaQd.s:1427   .text.RTC_GetDate:0000000000000000 $t
     /tmp/ccVyFaQd.s:1432   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/ccVyFaQd.s:1535   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/ccVyFaQd.s:1540   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/ccVyFaQd.s:1760   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/ccVyFaQd.s:1765   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/ccVyFaQd.s:1821   .text.RTC_GetAlarm:0000000000000000 $t
     /tmp/ccVyFaQd.s:1826   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/ccVyFaQd.s:1961   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:1966   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/ccVyFaQd.s:2090   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2095   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/ccVyFaQd.s:2165   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/ccVyFaQd.s:2170   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/ccVyFaQd.s:2223   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2228   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/ccVyFaQd.s:2288   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/ccVyFaQd.s:2293   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/ccVyFaQd.s:2341   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/ccVyFaQd.s:2346   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/ccVyFaQd.s:2375   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:2380   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/ccVyFaQd.s:2496   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2501   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/ccVyFaQd.s:2564   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/ccVyFaQd.s:2569   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/ccVyFaQd.s:2598   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2603   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/ccVyFaQd.s:2666   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2671   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/ccVyFaQd.s:2743   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:2748   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/ccVyFaQd.s:2836   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:2841   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/ccVyFaQd.s:2908   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2913   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/ccVyFaQd.s:2973   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:2978   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/ccVyFaQd.s:3084   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:3089   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/ccVyFaQd.s:3167   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/ccVyFaQd.s:3172   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/ccVyFaQd.s:3332   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/ccVyFaQd.s:3337   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/ccVyFaQd.s:3365   .text.RTC_TamperTriggerConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:3370   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/ccVyFaQd.s:3427   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:3432   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/ccVyFaQd.s:3488   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:3493   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/ccVyFaQd.s:3538   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:3543   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/ccVyFaQd.s:3588   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/ccVyFaQd.s:3593   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccVyFaQd.s:3638   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:3643   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccVyFaQd.s:3695   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/ccVyFaQd.s:3700   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/ccVyFaQd.s:3752   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/ccVyFaQd.s:3757   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/ccVyFaQd.s:3803   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/ccVyFaQd.s:3808   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/ccVyFaQd.s:3853   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/ccVyFaQd.s:3858   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/ccVyFaQd.s:3903   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/ccVyFaQd.s:3908   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/ccVyFaQd.s:3953   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:3958   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/ccVyFaQd.s:4003   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:4008   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/ccVyFaQd.s:4132   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/ccVyFaQd.s:4137   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/ccVyFaQd.s:4231   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/ccVyFaQd.s:4236   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/ccVyFaQd.s:4295   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/ccVyFaQd.s:4300   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/ccVyFaQd.s:4341   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/ccVyFaQd.s:4346   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/ccVyFaQd.s:4429   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccVyFaQd.s:4434   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
     /tmp/ccVyFaQd.s:4482   .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccVyFaQd.s:4542   .text.RTC_Bcd2ToByte:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
