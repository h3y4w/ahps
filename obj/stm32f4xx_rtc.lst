   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rtc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	RTC_ByteToBcd2:
  25              	.LFB165:
  26              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
1796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
1825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
1830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
1855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
1858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
1885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
1886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
1898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
1901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
1903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
1908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
1911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
1913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
1917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
1921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
1958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
1959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
1966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
1969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
1975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
1979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
1980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
1983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
1986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
1987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
2004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
2011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
2015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
2017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
2021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
2022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
2023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
2026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
2029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
2030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
2031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
2034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
2035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
2036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
2048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
2086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
2089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
2094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
2115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
2120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
2143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
2146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
2177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
2180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
2200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
2203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
2222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
2227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
2242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
2245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
2250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
2289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
2301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
2306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
2307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
2310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
2344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
2345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
2361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
2362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
2380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
2381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
2415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
2416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
2427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
2430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
2432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
2437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
2440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
2443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
2445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
2447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
2451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
2456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
2461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
2465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
2467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
2539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
2540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
2542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
2545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
2547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
2552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
2554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
2557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
2580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
2587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
2590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
2620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
2636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
2637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
2643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
2646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
2649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
2652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
2654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
2658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
2660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
2675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
2676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
2682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
2685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
2686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 2697 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
  33              		.loc 1 2698 0
  34 0000 0023     		movs	r3, #0
2699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
  35              		.loc 1 2700 0
  36 0002 03E0     		b	.L2
  37              	.LVL1:
  38              	.L3:
2701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
  39              		.loc 1 2702 0
  40 0004 0133     		adds	r3, r3, #1
  41              	.LVL2:
  42 0006 DBB2     		uxtb	r3, r3
  43              	.LVL3:
2703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
  44              		.loc 1 2703 0
  45 0008 0A38     		subs	r0, r0, #10
  46              	.LVL4:
  47 000a C0B2     		uxtb	r0, r0
  48              	.LVL5:
  49              	.L2:
2700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
  50              		.loc 1 2700 0 discriminator 1
  51 000c 0928     		cmp	r0, #9
  52 000e F9D8     		bhi	.L3
2704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
  53              		.loc 1 2706 0
  54 0010 1B01     		lsls	r3, r3, #4
  55              	.LVL6:
  56 0012 DBB2     		uxtb	r3, r3
2707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  57              		.loc 1 2707 0
  58 0014 1843     		orrs	r0, r0, r3
  59              	.LVL7:
  60 0016 7047     		bx	lr
  61              		.cfi_endproc
  62              	.LFE165:
  64              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
  65              		.align	2
  66              		.thumb
  67              		.thumb_func
  69              	RTC_Bcd2ToByte:
  70              	.LFB166:
2708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  71              		.loc 1 2715 0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  76              	.LVL8:
2716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
2717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
  77              		.loc 1 2717 0
  78 0000 0309     		lsrs	r3, r0, #4
  79 0002 03EB8303 		add	r3, r3, r3, lsl #2
  80 0006 5B00     		lsls	r3, r3, #1
  81 0008 DBB2     		uxtb	r3, r3
  82              	.LVL9:
2718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
  83              		.loc 1 2718 0
  84 000a 00F00F00 		and	r0, r0, #15
  85              	.LVL10:
  86 000e 1844     		add	r0, r0, r3
2719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
  87              		.loc 1 2719 0
  88 0010 C0B2     		uxtb	r0, r0
  89 0012 7047     		bx	lr
  90              		.cfi_endproc
  91              	.LFE166:
  93              		.section	.text.RTC_StructInit,"ax",%progbits
  94              		.align	2
  95              		.global	RTC_StructInit
  96              		.thumb
  97              		.thumb_func
  99              	RTC_StructInit:
 100              	.LFB112:
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 101              		.loc 1 492 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL11:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 107              		.loc 1 494 0
 108 0000 0023     		movs	r3, #0
 109 0002 0360     		str	r3, [r0]
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 110              		.loc 1 497 0
 111 0004 7F23     		movs	r3, #127
 112 0006 4360     		str	r3, [r0, #4]
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 113              		.loc 1 500 0
 114 0008 FF23     		movs	r3, #255
 115 000a 8360     		str	r3, [r0, #8]
 116 000c 7047     		bx	lr
 117              		.cfi_endproc
 118              	.LFE112:
 120 000e 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 121              		.align	2
 122              		.global	RTC_WriteProtectionCmd
 123              		.thumb
 124              		.thumb_func
 126              	RTC_WriteProtectionCmd:
 127              	.LFB113:
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 128              		.loc 1 514 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              		@ link register save eliminated.
 133              	.LVL12:
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 134              		.loc 1 518 0
 135 0000 30B1     		cbz	r0, .L7
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 136              		.loc 1 521 0
 137 0002 4FF42053 		mov	r3, #10240
 138 0006 C4F20003 		movt	r3, 16384
 139 000a FF22     		movs	r2, #255
 140 000c 5A62     		str	r2, [r3, #36]
 141 000e 7047     		bx	lr
 142              	.L7:
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 143              		.loc 1 526 0
 144 0010 4FF42053 		mov	r3, #10240
 145 0014 C4F20003 		movt	r3, 16384
 146 0018 CA22     		movs	r2, #202
 147 001a 5A62     		str	r2, [r3, #36]
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 148              		.loc 1 527 0
 149 001c 5322     		movs	r2, #83
 150 001e 5A62     		str	r2, [r3, #36]
 151 0020 7047     		bx	lr
 152              		.cfi_endproc
 153              	.LFE113:
 155 0022 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 156              		.align	2
 157              		.global	RTC_EnterInitMode
 158              		.thumb
 159              		.thumb_func
 161              	RTC_EnterInitMode:
 162              	.LFB114:
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 163              		.loc 1 541 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 8
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168 0000 82B0     		sub	sp, sp, #8
 169              	.LCFI0:
 170              		.cfi_def_cfa_offset 8
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 171              		.loc 1 542 0
 172 0002 0023     		movs	r3, #0
 173 0004 0193     		str	r3, [sp, #4]
 174              	.LVL13:
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 175              		.loc 1 547 0
 176 0006 4FF42053 		mov	r3, #10240
 177 000a C4F20003 		movt	r3, 16384
 178 000e DB68     		ldr	r3, [r3, #12]
 179 0010 13F0400F 		tst	r3, #64
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 180              		.loc 1 570 0
 181 0014 18BF     		it	ne
 182 0016 0120     		movne	r0, #1
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 183              		.loc 1 547 0
 184 0018 21D1     		bne	.L10
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 185              		.loc 1 550 0
 186 001a 4FF42053 		mov	r3, #10240
 187 001e C4F20003 		movt	r3, 16384
 188 0022 4FF0FF32 		mov	r2, #-1
 189 0026 DA60     		str	r2, [r3, #12]
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 190              		.loc 1 555 0
 191 0028 4FF42051 		mov	r1, #10240
 192 002c C4F20001 		movt	r1, 16384
 193              	.LVL14:
 194              	.L12:
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 195              		.loc 1 555 0 is_stmt 0 discriminator 1
 196 0030 CB68     		ldr	r3, [r1, #12]
 197 0032 03F04002 		and	r2, r3, #64
 198              	.LVL15:
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 199              		.loc 1 556 0 is_stmt 1 discriminator 1
 200 0036 019B     		ldr	r3, [sp, #4]
 201 0038 0133     		adds	r3, r3, #1
 202 003a 0193     		str	r3, [sp, #4]
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 203              		.loc 1 557 0 discriminator 1
 204 003c 019B     		ldr	r3, [sp, #4]
 205 003e B3F5803F 		cmp	r3, #65536
 206 0042 01D0     		beq	.L11
 207 0044 002A     		cmp	r2, #0
 208 0046 F3D0     		beq	.L12
 209              	.L11:
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 210              		.loc 1 559 0
 211 0048 4FF42053 		mov	r3, #10240
 212 004c C4F20003 		movt	r3, 16384
 213 0050 D868     		ldr	r0, [r3, #12]
 214 0052 00F04000 		and	r0, r0, #64
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 215              		.loc 1 561 0
 216 0056 0030     		adds	r0, r0, #0
 217 0058 18BF     		it	ne
 218 005a 0120     		movne	r0, #1
 219 005c FFE7     		b	.L10
 220              	.LVL16:
 221              	.L10:
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 222              		.loc 1 574 0
 223 005e 02B0     		add	sp, sp, #8
 224              		@ sp needed
 225 0060 7047     		bx	lr
 226              		.cfi_endproc
 227              	.LFE114:
 229 0062 00BF     		.section	.text.RTC_ExitInitMode,"ax",%progbits
 230              		.align	2
 231              		.global	RTC_ExitInitMode
 232              		.thumb
 233              		.thumb_func
 235              	RTC_ExitInitMode:
 236              	.LFB115:
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 237              		.loc 1 586 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              		@ link register save eliminated.
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 242              		.loc 1 588 0
 243 0000 4FF42053 		mov	r3, #10240
 244 0004 C4F20003 		movt	r3, 16384
 245 0008 DA68     		ldr	r2, [r3, #12]
 246 000a 22F08002 		bic	r2, r2, #128
 247 000e DA60     		str	r2, [r3, #12]
 248 0010 7047     		bx	lr
 249              		.cfi_endproc
 250              	.LFE115:
 252 0012 00BF     		.section	.text.RTC_Init,"ax",%progbits
 253              		.align	2
 254              		.global	RTC_Init
 255              		.thumb
 256              		.thumb_func
 258              	RTC_Init:
 259              	.LFB111:
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 260              		.loc 1 446 0
 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              	.LVL17:
 265 0000 10B5     		push	{r4, lr}
 266              	.LCFI1:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 4, -8
 269              		.cfi_offset 14, -4
 270 0002 0446     		mov	r4, r0
 271              	.LVL18:
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 272              		.loc 1 455 0
 273 0004 4FF42053 		mov	r3, #10240
 274 0008 C4F20003 		movt	r3, 16384
 275 000c CA22     		movs	r2, #202
 276 000e 5A62     		str	r2, [r3, #36]
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 277              		.loc 1 456 0
 278 0010 5322     		movs	r2, #83
 279 0012 5A62     		str	r2, [r3, #36]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 280              		.loc 1 459 0
 281 0014 FFF7FEFF 		bl	RTC_EnterInitMode
 282              	.LVL19:
 283 0018 B0B1     		cbz	r0, .L19
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 284              		.loc 1 466 0
 285 001a 4FF42053 		mov	r3, #10240
 286 001e C4F20003 		movt	r3, 16384
 287 0022 9A68     		ldr	r2, [r3, #8]
 288 0024 22F04002 		bic	r2, r2, #64
 289 0028 9A60     		str	r2, [r3, #8]
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 290              		.loc 1 468 0
 291 002a 9968     		ldr	r1, [r3, #8]
 292 002c 2268     		ldr	r2, [r4]
 293 002e 0A43     		orrs	r2, r2, r1
 294 0030 9A60     		str	r2, [r3, #8]
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 295              		.loc 1 471 0
 296 0032 A268     		ldr	r2, [r4, #8]
 297 0034 1A61     		str	r2, [r3, #16]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 298              		.loc 1 472 0
 299 0036 1A69     		ldr	r2, [r3, #16]
 300 0038 6168     		ldr	r1, [r4, #4]
 301 003a 42EA0142 		orr	r2, r2, r1, lsl #16
 302 003e 1A61     		str	r2, [r3, #16]
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 303              		.loc 1 475 0
 304 0040 FFF7FEFF 		bl	RTC_ExitInitMode
 305              	.LVL20:
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 306              		.loc 1 477 0
 307 0044 0120     		movs	r0, #1
 308 0046 00E0     		b	.L18
 309              	.LVL21:
 310              	.L19:
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 311              		.loc 1 461 0
 312 0048 0020     		movs	r0, #0
 313              	.LVL22:
 314              	.L18:
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 315              		.loc 1 480 0
 316 004a 4FF42053 		mov	r3, #10240
 317 004e C4F20003 		movt	r3, 16384
 318 0052 FF22     		movs	r2, #255
 319 0054 5A62     		str	r2, [r3, #36]
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 320              		.loc 1 483 0
 321 0056 10BD     		pop	{r4, pc}
 322              		.cfi_endproc
 323              	.LFE111:
 325              		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 326              		.align	2
 327              		.global	RTC_WaitForSynchro
 328              		.thumb
 329              		.thumb_func
 331              	RTC_WaitForSynchro:
 332              	.LFB116:
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 333              		.loc 1 608 0
 334              		.cfi_startproc
 335              		@ args = 0, pretend = 0, frame = 8
 336              		@ frame_needed = 0, uses_anonymous_args = 0
 337              		@ link register save eliminated.
 338 0000 82B0     		sub	sp, sp, #8
 339              	.LCFI2:
 340              		.cfi_def_cfa_offset 8
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 341              		.loc 1 609 0
 342 0002 0023     		movs	r3, #0
 343 0004 0193     		str	r3, [sp, #4]
 344              	.LVL23:
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 345              		.loc 1 614 0
 346 0006 4FF42053 		mov	r3, #10240
 347 000a C4F20003 		movt	r3, 16384
 348 000e CA22     		movs	r2, #202
 349 0010 5A62     		str	r2, [r3, #36]
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 350              		.loc 1 615 0
 351 0012 5322     		movs	r2, #83
 352 0014 5A62     		str	r2, [r3, #36]
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 353              		.loc 1 618 0
 354 0016 DA68     		ldr	r2, [r3, #12]
 355 0018 22F0A002 		bic	r2, r2, #160
 356 001c DA60     		str	r2, [r3, #12]
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 357              		.loc 1 623 0
 358 001e 4FF42051 		mov	r1, #10240
 359 0022 C4F20001 		movt	r1, 16384
 360              	.LVL24:
 361              	.L22:
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 362              		.loc 1 623 0 is_stmt 0 discriminator 1
 363 0026 CB68     		ldr	r3, [r1, #12]
 364 0028 03F02002 		and	r2, r3, #32
 365              	.LVL25:
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 366              		.loc 1 624 0 is_stmt 1 discriminator 1
 367 002c 019B     		ldr	r3, [sp, #4]
 368 002e 0133     		adds	r3, r3, #1
 369 0030 0193     		str	r3, [sp, #4]
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 370              		.loc 1 625 0 discriminator 1
 371 0032 019B     		ldr	r3, [sp, #4]
 372 0034 B3F5003F 		cmp	r3, #131072
 373 0038 01D0     		beq	.L21
 374 003a 002A     		cmp	r2, #0
 375 003c F3D0     		beq	.L22
 376              	.L21:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 377              		.loc 1 627 0
 378 003e 4FF42053 		mov	r3, #10240
 379 0042 C4F20003 		movt	r3, 16384
 380 0046 D868     		ldr	r0, [r3, #12]
 381 0048 00F02000 		and	r0, r0, #32
 382              	.LVL26:
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 383              		.loc 1 637 0
 384 004c 4FF42053 		mov	r3, #10240
 385 0050 C4F20003 		movt	r3, 16384
 386 0054 FF22     		movs	r2, #255
 387              	.LVL27:
 388 0056 5A62     		str	r2, [r3, #36]
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 389              		.loc 1 640 0
 390 0058 0030     		adds	r0, r0, #0
 391 005a 18BF     		it	ne
 392 005c 0120     		movne	r0, #1
 393              	.LVL28:
 394 005e 02B0     		add	sp, sp, #8
 395              		@ sp needed
 396 0060 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE116:
 400 0062 00BF     		.section	.text.RTC_DeInit,"ax",%progbits
 401              		.align	2
 402              		.global	RTC_DeInit
 403              		.thumb
 404              		.thumb_func
 406              	RTC_DeInit:
 407              	.LFB110:
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 408              		.loc 1 368 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 8
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412 0000 00B5     		push	{lr}
 413              	.LCFI3:
 414              		.cfi_def_cfa_offset 4
 415              		.cfi_offset 14, -4
 416 0002 83B0     		sub	sp, sp, #12
 417              	.LCFI4:
 418              		.cfi_def_cfa_offset 16
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 419              		.loc 1 369 0
 420 0004 0023     		movs	r3, #0
 421 0006 0193     		str	r3, [sp, #4]
 422              	.LVL29:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 423              		.loc 1 374 0
 424 0008 4FF42053 		mov	r3, #10240
 425 000c C4F20003 		movt	r3, 16384
 426 0010 CA22     		movs	r2, #202
 427 0012 5A62     		str	r2, [r3, #36]
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 428              		.loc 1 375 0
 429 0014 5322     		movs	r2, #83
 430 0016 5A62     		str	r2, [r3, #36]
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 431              		.loc 1 378 0
 432 0018 FFF7FEFF 		bl	RTC_EnterInitMode
 433              	.LVL30:
 434 001c 0028     		cmp	r0, #0
 435 001e 3FD0     		beq	.L30
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
 436              		.loc 1 385 0
 437 0020 4FF42053 		mov	r3, #10240
 438 0024 C4F20003 		movt	r3, 16384
 439 0028 0022     		movs	r2, #0
 440 002a 1A60     		str	r2, [r3]
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 441              		.loc 1 386 0
 442 002c 42F20112 		movw	r2, #8449
 443 0030 5A60     		str	r2, [r3, #4]
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 444              		.loc 1 388 0
 445 0032 9A68     		ldr	r2, [r3, #8]
 446 0034 02F00702 		and	r2, r2, #7
 447 0038 9A60     		str	r2, [r3, #8]
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 448              		.loc 1 393 0
 449 003a 4FF42051 		mov	r1, #10240
 450 003e C4F20001 		movt	r1, 16384
 451              	.LVL31:
 452              	.L29:
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 453              		.loc 1 393 0 is_stmt 0 discriminator 1
 454 0042 CB68     		ldr	r3, [r1, #12]
 455 0044 03F00402 		and	r2, r3, #4
 456              	.LVL32:
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 457              		.loc 1 394 0 is_stmt 1 discriminator 1
 458 0048 019B     		ldr	r3, [sp, #4]
 459 004a 0133     		adds	r3, r3, #1
 460 004c 0193     		str	r3, [sp, #4]
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 461              		.loc 1 395 0 discriminator 1
 462 004e 019B     		ldr	r3, [sp, #4]
 463 0050 B3F5803F 		cmp	r3, #65536
 464 0054 01D0     		beq	.L28
 465 0056 002A     		cmp	r2, #0
 466 0058 F3D0     		beq	.L29
 467              	.L28:
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 468              		.loc 1 397 0
 469 005a 4FF42053 		mov	r3, #10240
 470 005e C4F20003 		movt	r3, 16384
 471 0062 DB68     		ldr	r3, [r3, #12]
 472 0064 13F0040F 		tst	r3, #4
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 473              		.loc 1 399 0
 474 0068 08BF     		it	eq
 475 006a 0020     		moveq	r0, #0
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 476              		.loc 1 397 0
 477 006c 1AD0     		beq	.L27
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 478              		.loc 1 404 0
 479 006e 4FF42053 		mov	r3, #10240
 480 0072 C4F20003 		movt	r3, 16384
 481 0076 9A68     		ldr	r2, [r3, #8]
 482              	.LVL33:
 483 0078 0022     		movs	r2, #0
 484 007a 9A60     		str	r2, [r3, #8]
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 485              		.loc 1 405 0
 486 007c 4FF6FF71 		movw	r1, #65535
 487 0080 5961     		str	r1, [r3, #20]
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 488              		.loc 1 406 0
 489 0082 FF21     		movs	r1, #255
 490 0084 C0F27F01 		movt	r1, 127
 491 0088 1961     		str	r1, [r3, #16]
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 492              		.loc 1 407 0
 493 008a 9A61     		str	r2, [r3, #24]
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 494              		.loc 1 408 0
 495 008c DA61     		str	r2, [r3, #28]
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 496              		.loc 1 409 0
 497 008e 1A62     		str	r2, [r3, #32]
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 498              		.loc 1 412 0
 499 0090 DA60     		str	r2, [r3, #12]
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 500              		.loc 1 415 0
 501 0092 1A64     		str	r2, [r3, #64]
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 502              		.loc 1 417 0
 503 0094 FFF7FEFF 		bl	RTC_WaitForSynchro
 504              	.LVL34:
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 505              		.loc 1 419 0
 506 0098 0030     		adds	r0, r0, #0
 507 009a 18BF     		it	ne
 508 009c 0120     		movne	r0, #1
 509 009e 01E0     		b	.L27
 510              	.LVL35:
 511              	.L30:
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 512              		.loc 1 380 0
 513 00a0 0020     		movs	r0, #0
 514 00a2 FFE7     		b	.L27
 515              	.LVL36:
 516              	.L27:
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 517              		.loc 1 429 0
 518 00a4 4FF42053 		mov	r3, #10240
 519 00a8 C4F20003 		movt	r3, 16384
 520 00ac FF22     		movs	r2, #255
 521 00ae 5A62     		str	r2, [r3, #36]
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 522              		.loc 1 432 0
 523 00b0 03B0     		add	sp, sp, #12
 524              		@ sp needed
 525 00b2 5DF804FB 		ldr	pc, [sp], #4
 526              		.cfi_endproc
 527              	.LFE110:
 529 00b6 00BF     		.section	.text.RTC_RefClockCmd,"ax",%progbits
 530              		.align	2
 531              		.global	RTC_RefClockCmd
 532              		.thumb
 533              		.thumb_func
 535              	RTC_RefClockCmd:
 536              	.LFB117:
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 537              		.loc 1 651 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL37:
 542 0000 10B5     		push	{r4, lr}
 543              	.LCFI5:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 4, -8
 546              		.cfi_offset 14, -4
 547 0002 0446     		mov	r4, r0
 548              	.LVL38:
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 549              		.loc 1 658 0
 550 0004 4FF42053 		mov	r3, #10240
 551 0008 C4F20003 		movt	r3, 16384
 552 000c CA22     		movs	r2, #202
 553 000e 5A62     		str	r2, [r3, #36]
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 554              		.loc 1 659 0
 555 0010 5322     		movs	r2, #83
 556 0012 5A62     		str	r2, [r3, #36]
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 557              		.loc 1 662 0
 558 0014 FFF7FEFF 		bl	RTC_EnterInitMode
 559              	.LVL39:
 560 0018 A8B1     		cbz	r0, .L38
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561              		.loc 1 668 0
 562 001a 44B1     		cbz	r4, .L36
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563              		.loc 1 671 0
 564 001c 4FF42053 		mov	r3, #10240
 565 0020 C4F20003 		movt	r3, 16384
 566 0024 9A68     		ldr	r2, [r3, #8]
 567 0026 42F01002 		orr	r2, r2, #16
 568 002a 9A60     		str	r2, [r3, #8]
 569 002c 07E0     		b	.L37
 570              	.L36:
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 571              		.loc 1 676 0
 572 002e 4FF42053 		mov	r3, #10240
 573 0032 C4F20003 		movt	r3, 16384
 574 0036 9A68     		ldr	r2, [r3, #8]
 575 0038 22F01002 		bic	r2, r2, #16
 576 003c 9A60     		str	r2, [r3, #8]
 577              	.L37:
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 578              		.loc 1 679 0
 579 003e FFF7FEFF 		bl	RTC_ExitInitMode
 580              	.LVL40:
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 581              		.loc 1 681 0
 582 0042 0120     		movs	r0, #1
 583 0044 00E0     		b	.L35
 584              	.LVL41:
 585              	.L38:
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 586              		.loc 1 664 0
 587 0046 0020     		movs	r0, #0
 588              	.LVL42:
 589              	.L35:
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 590              		.loc 1 685 0
 591 0048 4FF42053 		mov	r3, #10240
 592 004c C4F20003 		movt	r3, 16384
 593 0050 FF22     		movs	r2, #255
 594 0052 5A62     		str	r2, [r3, #36]
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 595              		.loc 1 688 0
 596 0054 10BD     		pop	{r4, pc}
 597              		.cfi_endproc
 598              	.LFE117:
 600 0056 00BF     		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 601              		.align	2
 602              		.global	RTC_BypassShadowCmd
 603              		.thumb
 604              		.thumb_func
 606              	RTC_BypassShadowCmd:
 607              	.LFB118:
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 608              		.loc 1 699 0
 609              		.cfi_startproc
 610              		@ args = 0, pretend = 0, frame = 0
 611              		@ frame_needed = 0, uses_anonymous_args = 0
 612              		@ link register save eliminated.
 613              	.LVL43:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 614              		.loc 1 704 0
 615 0000 4FF42053 		mov	r3, #10240
 616 0004 C4F20003 		movt	r3, 16384
 617 0008 CA22     		movs	r2, #202
 618 000a 5A62     		str	r2, [r3, #36]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 619              		.loc 1 705 0
 620 000c 5322     		movs	r2, #83
 621 000e 5A62     		str	r2, [r3, #36]
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 622              		.loc 1 707 0
 623 0010 40B1     		cbz	r0, .L40
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 624              		.loc 1 710 0
 625 0012 4FF42053 		mov	r3, #10240
 626 0016 C4F20003 		movt	r3, 16384
 627 001a 9A68     		ldr	r2, [r3, #8]
 628 001c 42F02002 		orr	r2, r2, #32
 629 0020 9A60     		str	r2, [r3, #8]
 630 0022 07E0     		b	.L41
 631              	.L40:
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 632              		.loc 1 715 0
 633 0024 4FF42053 		mov	r3, #10240
 634 0028 C4F20003 		movt	r3, 16384
 635 002c 9A68     		ldr	r2, [r3, #8]
 636 002e 02F0DF02 		and	r2, r2, #223
 637 0032 9A60     		str	r2, [r3, #8]
 638              	.L41:
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 639              		.loc 1 719 0
 640 0034 4FF42053 		mov	r3, #10240
 641 0038 C4F20003 		movt	r3, 16384
 642 003c FF22     		movs	r2, #255
 643 003e 5A62     		str	r2, [r3, #36]
 644 0040 7047     		bx	lr
 645              		.cfi_endproc
 646              	.LFE118:
 648 0042 00BF     		.section	.text.RTC_SetTime,"ax",%progbits
 649              		.align	2
 650              		.global	RTC_SetTime
 651              		.thumb
 652              		.thumb_func
 654              	RTC_SetTime:
 655              	.LFB119:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 656              		.loc 1 754 0
 657              		.cfi_startproc
 658              		@ args = 0, pretend = 0, frame = 0
 659              		@ frame_needed = 0, uses_anonymous_args = 0
 660              	.LVL44:
 661 0000 38B5     		push	{r3, r4, r5, lr}
 662              	.LCFI6:
 663              		.cfi_def_cfa_offset 16
 664              		.cfi_offset 3, -16
 665              		.cfi_offset 4, -12
 666              		.cfi_offset 5, -8
 667              		.cfi_offset 14, -4
 668 0002 0C46     		mov	r4, r1
 669              	.LVL45:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670              		.loc 1 778 0
 671 0004 4FF42052 		mov	r2, #10240
 672 0008 C4F20002 		movt	r2, 16384
 673 000c 9268     		ldr	r2, [r2, #8]
 674 000e 12F0400F 		tst	r2, #64
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 675              		.loc 1 786 0
 676 0012 04BF     		itt	eq
 677 0014 0022     		moveq	r2, #0
 678 0016 CA70     		strbeq	r2, [r1, #3]
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 679              		.loc 1 794 0
 680 0018 50B1     		cbz	r0, .L45
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 681              		.loc 1 796 0
 682 001a 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 683              		.loc 1 797 0
 684 001c 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 685 001e 1B02     		lsls	r3, r3, #8
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 686              		.loc 1 796 0
 687 0020 43EA0243 		orr	r3, r3, r2, lsl #16
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 688              		.loc 1 798 0
 689 0024 8A78     		ldrb	r2, [r1, #2]	@ zero_extendqisi2
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 690              		.loc 1 797 0
 691 0026 1343     		orrs	r3, r3, r2
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 692              		.loc 1 799 0
 693 0028 CC78     		ldrb	r4, [r1, #3]	@ zero_extendqisi2
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 694              		.loc 1 796 0
 695 002a 43EA0444 		orr	r4, r3, r4, lsl #16
 696              	.LVL46:
 697 002e 0FE0     		b	.L46
 698              	.LVL47:
 699              	.L45:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 700              		.loc 1 803 0
 701 0030 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 702              	.LVL48:
 703 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 704              	.LVL49:
 705 0036 0504     		lsls	r5, r0, #16
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 706              		.loc 1 804 0
 707 0038 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 708 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 709              	.LVL50:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 710              		.loc 1 803 0
 711 003e 45EA0025 		orr	r5, r5, r0, lsl #8
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 712              		.loc 1 805 0
 713 0042 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 714 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 715              	.LVL51:
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 716              		.loc 1 804 0
 717 0048 2843     		orrs	r0, r0, r5
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 718              		.loc 1 806 0
 719 004a E478     		ldrb	r4, [r4, #3]	@ zero_extendqisi2
 720              	.LVL52:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 721              		.loc 1 803 0
 722 004c 40EA0444 		orr	r4, r0, r4, lsl #16
 723              	.LVL53:
 724              	.L46:
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 725              		.loc 1 810 0
 726 0050 4FF42053 		mov	r3, #10240
 727 0054 C4F20003 		movt	r3, 16384
 728 0058 CA22     		movs	r2, #202
 729 005a 5A62     		str	r2, [r3, #36]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 730              		.loc 1 811 0
 731 005c 5322     		movs	r2, #83
 732 005e 5A62     		str	r2, [r3, #36]
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 733              		.loc 1 814 0
 734 0060 FFF7FEFF 		bl	RTC_EnterInitMode
 735              	.LVL54:
 736 0064 80B1     		cbz	r0, .L48
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737              		.loc 1 821 0
 738 0066 04F07F34 		and	r4, r4, #2139062143
 739              	.LVL55:
 740 006a 24F0FE44 		bic	r4, r4, #2130706432
 741 006e 4FF42053 		mov	r3, #10240
 742 0072 C4F20003 		movt	r3, 16384
 743 0076 1C60     		str	r4, [r3]
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 744              		.loc 1 824 0
 745 0078 FFF7FEFF 		bl	RTC_ExitInitMode
 746              	.LVL56:
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 747              		.loc 1 826 0
 748 007c FFF7FEFF 		bl	RTC_WaitForSynchro
 749              	.LVL57:
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 750              		.loc 1 828 0
 751 0080 0030     		adds	r0, r0, #0
 752 0082 18BF     		it	ne
 753 0084 0120     		movne	r0, #1
 754 0086 00E0     		b	.L47
 755              	.LVL58:
 756              	.L48:
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 757              		.loc 1 816 0
 758 0088 0020     		movs	r0, #0
 759              	.LVL59:
 760              	.L47:
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 761              		.loc 1 837 0
 762 008a 4FF42053 		mov	r3, #10240
 763 008e C4F20003 		movt	r3, 16384
 764 0092 FF22     		movs	r2, #255
 765 0094 5A62     		str	r2, [r3, #36]
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 766              		.loc 1 840 0
 767 0096 38BD     		pop	{r3, r4, r5, pc}
 768              		.cfi_endproc
 769              	.LFE119:
 771              		.section	.text.RTC_TimeStructInit,"ax",%progbits
 772              		.align	2
 773              		.global	RTC_TimeStructInit
 774              		.thumb
 775              		.thumb_func
 777              	RTC_TimeStructInit:
 778              	.LFB120:
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 779              		.loc 1 850 0
 780              		.cfi_startproc
 781              		@ args = 0, pretend = 0, frame = 0
 782              		@ frame_needed = 0, uses_anonymous_args = 0
 783              		@ link register save eliminated.
 784              	.LVL60:
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 785              		.loc 1 852 0
 786 0000 0023     		movs	r3, #0
 787 0002 C370     		strb	r3, [r0, #3]
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 788              		.loc 1 853 0
 789 0004 0370     		strb	r3, [r0]
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 790              		.loc 1 854 0
 791 0006 4370     		strb	r3, [r0, #1]
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 792              		.loc 1 855 0
 793 0008 8370     		strb	r3, [r0, #2]
 794 000a 7047     		bx	lr
 795              		.cfi_endproc
 796              	.LFE120:
 798              		.section	.text.RTC_GetTime,"ax",%progbits
 799              		.align	2
 800              		.global	RTC_GetTime
 801              		.thumb
 802              		.thumb_func
 804              	RTC_GetTime:
 805              	.LFB121:
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 806              		.loc 1 869 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              	.LVL61:
 811 0000 70B5     		push	{r4, r5, r6, lr}
 812              	.LCFI7:
 813              		.cfi_def_cfa_offset 16
 814              		.cfi_offset 4, -16
 815              		.cfi_offset 5, -12
 816              		.cfi_offset 6, -8
 817              		.cfi_offset 14, -4
 818 0002 0C46     		mov	r4, r1
 819              	.LVL62:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 820              		.loc 1 876 0
 821 0004 4FF42053 		mov	r3, #10240
 822 0008 C4F20003 		movt	r3, 16384
 823 000c 1B68     		ldr	r3, [r3]
 824              	.LVL63:
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 825              		.loc 1 879 0
 826 000e C3F30542 		ubfx	r2, r3, #16, #6
 827 0012 0A70     		strb	r2, [r1]
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 828              		.loc 1 880 0
 829 0014 C3F30626 		ubfx	r6, r3, #8, #7
 830 0018 4E70     		strb	r6, [r1, #1]
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 831              		.loc 1 881 0
 832 001a 03F07F05 		and	r5, r3, #127
 833 001e 8D70     		strb	r5, [r1, #2]
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 834              		.loc 1 882 0
 835 0020 03F48003 		and	r3, r3, #4194304
 836              	.LVL64:
 837 0024 1B0C     		lsrs	r3, r3, #16
 838 0026 CB70     		strb	r3, [r1, #3]
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 839              		.loc 1 885 0
 840 0028 58B9     		cbnz	r0, .L51
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 841              		.loc 1 888 0
 842 002a 1046     		mov	r0, r2
 843              	.LVL65:
 844 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 845              	.LVL66:
 846 0030 2070     		strb	r0, [r4]
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 847              		.loc 1 889 0
 848 0032 3046     		mov	r0, r6
 849 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 850              	.LVL67:
 851 0038 6070     		strb	r0, [r4, #1]
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 852              		.loc 1 890 0
 853 003a 2846     		mov	r0, r5
 854 003c FFF7FEFF 		bl	RTC_Bcd2ToByte
 855              	.LVL68:
 856 0040 A070     		strb	r0, [r4, #2]
 857              	.L51:
 858 0042 70BD     		pop	{r4, r5, r6, pc}
 859              		.cfi_endproc
 860              	.LFE121:
 862              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 863              		.align	2
 864              		.global	RTC_GetSubSecond
 865              		.thumb
 866              		.thumb_func
 868              	RTC_GetSubSecond:
 869              	.LFB122:
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 870              		.loc 1 902 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875              	.LVL69:
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 876              		.loc 1 906 0
 877 0000 4FF42053 		mov	r3, #10240
 878 0004 C4F20003 		movt	r3, 16384
 879 0008 986A     		ldr	r0, [r3, #40]
 880              	.LVL70:
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 881              		.loc 1 909 0
 882 000a 5B68     		ldr	r3, [r3, #4]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 883              		.loc 1 912 0
 884 000c 7047     		bx	lr
 885              		.cfi_endproc
 886              	.LFE122:
 888 000e 00BF     		.section	.text.RTC_SetDate,"ax",%progbits
 889              		.align	2
 890              		.global	RTC_SetDate
 891              		.thumb
 892              		.thumb_func
 894              	RTC_SetDate:
 895              	.LFB123:
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 896              		.loc 1 927 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 0
 899              		@ frame_needed = 0, uses_anonymous_args = 0
 900              	.LVL71:
 901 0000 38B5     		push	{r3, r4, r5, lr}
 902              	.LCFI8:
 903              		.cfi_def_cfa_offset 16
 904              		.cfi_offset 3, -16
 905              		.cfi_offset 4, -12
 906              		.cfi_offset 5, -8
 907              		.cfi_offset 14, -4
 908 0002 0C46     		mov	r4, r1
 909              	.LVL72:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 910              		.loc 1 934 0
 911 0004 0346     		mov	r3, r0
 912 0006 38B9     		cbnz	r0, .L55
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 913              		.loc 1 934 0 is_stmt 0 discriminator 1
 914 0008 4A78     		ldrb	r2, [r1, #1]	@ zero_extendqisi2
 915 000a 12F0100F 		tst	r2, #16
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 916              		.loc 1 936 0 is_stmt 1 discriminator 1
 917 000e 1EBF     		ittt	ne
 918 0010 22F01002 		bicne	r2, r2, #16
 919 0014 0A32     		addne	r2, r2, #10
 920 0016 4A70     		strbne	r2, [r1, #1]
 921              	.L55:
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 922              		.loc 1 955 0
 923 0018 53B1     		cbz	r3, .L56
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 924              		.loc 1 957 0
 925 001a E278     		ldrb	r2, [r4, #3]	@ zero_extendqisi2
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 926              		.loc 1 958 0
 927 001c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 928 001e 1B02     		lsls	r3, r3, #8
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 929              		.loc 1 957 0
 930 0020 43EA0243 		orr	r3, r3, r2, lsl #16
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 931              		.loc 1 959 0
 932 0024 A278     		ldrb	r2, [r4, #2]	@ zero_extendqisi2
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 933              		.loc 1 958 0
 934 0026 1343     		orrs	r3, r3, r2
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 935              		.loc 1 960 0
 936 0028 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 937              		.loc 1 957 0
 938 002a 43EA4434 		orr	r4, r3, r4, lsl #13
 939              	.LVL73:
 940 002e 0FE0     		b	.L57
 941              	.LVL74:
 942              	.L56:
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 943              		.loc 1 964 0
 944 0030 E078     		ldrb	r0, [r4, #3]	@ zero_extendqisi2
 945              	.LVL75:
 946 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 947              	.LVL76:
 948 0036 0504     		lsls	r5, r0, #16
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 949              		.loc 1 965 0
 950 0038 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 951 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 952              	.LVL77:
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 953              		.loc 1 964 0
 954 003e 45EA0025 		orr	r5, r5, r0, lsl #8
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 955              		.loc 1 966 0
 956 0042 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 957 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 958              	.LVL78:
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 959              		.loc 1 965 0
 960 0048 2843     		orrs	r0, r0, r5
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 961              		.loc 1 967 0
 962 004a 2478     		ldrb	r4, [r4]	@ zero_extendqisi2
 963              	.LVL79:
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 964              		.loc 1 964 0
 965 004c 40EA4434 		orr	r4, r0, r4, lsl #13
 966              	.LVL80:
 967              	.L57:
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 968              		.loc 1 971 0
 969 0050 4FF42053 		mov	r3, #10240
 970 0054 C4F20003 		movt	r3, 16384
 971 0058 CA22     		movs	r2, #202
 972 005a 5A62     		str	r2, [r3, #36]
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 973              		.loc 1 972 0
 974 005c 5322     		movs	r2, #83
 975 005e 5A62     		str	r2, [r3, #36]
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 976              		.loc 1 975 0
 977 0060 FFF7FEFF 		bl	RTC_EnterInitMode
 978              	.LVL81:
 979 0064 80B1     		cbz	r0, .L59
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 980              		.loc 1 982 0
 981 0066 24F07F44 		bic	r4, r4, #-16777216
 982              	.LVL82:
 983 006a 24F0C004 		bic	r4, r4, #192
 984 006e 4FF42053 		mov	r3, #10240
 985 0072 C4F20003 		movt	r3, 16384
 986 0076 5C60     		str	r4, [r3, #4]
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987              		.loc 1 985 0
 988 0078 FFF7FEFF 		bl	RTC_ExitInitMode
 989              	.LVL83:
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 990              		.loc 1 987 0
 991 007c FFF7FEFF 		bl	RTC_WaitForSynchro
 992              	.LVL84:
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 993              		.loc 1 989 0
 994 0080 0030     		adds	r0, r0, #0
 995 0082 18BF     		it	ne
 996 0084 0120     		movne	r0, #1
 997 0086 00E0     		b	.L58
 998              	.LVL85:
 999              	.L59:
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 1000              		.loc 1 977 0
 1001 0088 0020     		movs	r0, #0
 1002              	.LVL86:
 1003              	.L58:
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1004              		.loc 1 997 0
 1005 008a 4FF42053 		mov	r3, #10240
 1006 008e C4F20003 		movt	r3, 16384
 1007 0092 FF22     		movs	r2, #255
 1008 0094 5A62     		str	r2, [r3, #36]
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1009              		.loc 1 1000 0
 1010 0096 38BD     		pop	{r3, r4, r5, pc}
 1011              		.cfi_endproc
 1012              	.LFE123:
 1014              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1015              		.align	2
 1016              		.global	RTC_DateStructInit
 1017              		.thumb
 1018              		.thumb_func
 1020              	RTC_DateStructInit:
 1021              	.LFB124:
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
 1022              		.loc 1 1010 0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 1026              		@ link register save eliminated.
 1027              	.LVL87:
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1028              		.loc 1 1012 0
 1029 0000 0123     		movs	r3, #1
 1030 0002 0370     		strb	r3, [r0]
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1031              		.loc 1 1013 0
 1032 0004 8370     		strb	r3, [r0, #2]
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1033              		.loc 1 1014 0
 1034 0006 4370     		strb	r3, [r0, #1]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1035              		.loc 1 1015 0
 1036 0008 0023     		movs	r3, #0
 1037 000a C370     		strb	r3, [r0, #3]
 1038 000c 7047     		bx	lr
 1039              		.cfi_endproc
 1040              	.LFE124:
 1042 000e 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1043              		.align	2
 1044              		.global	RTC_GetDate
 1045              		.thumb
 1046              		.thumb_func
 1048              	RTC_GetDate:
 1049              	.LFB125:
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1050              		.loc 1 1029 0
 1051              		.cfi_startproc
 1052              		@ args = 0, pretend = 0, frame = 0
 1053              		@ frame_needed = 0, uses_anonymous_args = 0
 1054              	.LVL88:
 1055 0000 70B5     		push	{r4, r5, r6, lr}
 1056              	.LCFI9:
 1057              		.cfi_def_cfa_offset 16
 1058              		.cfi_offset 4, -16
 1059              		.cfi_offset 5, -12
 1060              		.cfi_offset 6, -8
 1061              		.cfi_offset 14, -4
 1062 0002 0C46     		mov	r4, r1
 1063              	.LVL89:
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1064              		.loc 1 1036 0
 1065 0004 4FF42053 		mov	r3, #10240
 1066 0008 C4F20003 		movt	r3, 16384
 1067 000c 5B68     		ldr	r3, [r3, #4]
 1068              	.LVL90:
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1069              		.loc 1 1039 0
 1070 000e C3F30742 		ubfx	r2, r3, #16, #8
 1071 0012 CA70     		strb	r2, [r1, #3]
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1072              		.loc 1 1040 0
 1073 0014 C3F30426 		ubfx	r6, r3, #8, #5
 1074 0018 4E70     		strb	r6, [r1, #1]
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1075              		.loc 1 1041 0
 1076 001a 03F03F05 		and	r5, r3, #63
 1077 001e 8D70     		strb	r5, [r1, #2]
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1078              		.loc 1 1042 0
 1079 0020 C3F34233 		ubfx	r3, r3, #13, #3
 1080              	.LVL91:
 1081 0024 0B70     		strb	r3, [r1]
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1082              		.loc 1 1045 0
 1083 0026 58B9     		cbnz	r0, .L62
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1084              		.loc 1 1048 0
 1085 0028 1046     		mov	r0, r2
 1086              	.LVL92:
 1087 002a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1088              	.LVL93:
 1089 002e E070     		strb	r0, [r4, #3]
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1090              		.loc 1 1049 0
 1091 0030 3046     		mov	r0, r6
 1092 0032 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1093              	.LVL94:
 1094 0036 6070     		strb	r0, [r4, #1]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1095              		.loc 1 1050 0
 1096 0038 2846     		mov	r0, r5
 1097 003a FFF7FEFF 		bl	RTC_Bcd2ToByte
 1098              	.LVL95:
 1099 003e A070     		strb	r0, [r4, #2]
 1100              	.L62:
 1101 0040 70BD     		pop	{r4, r5, r6, pc}
 1102              		.cfi_endproc
 1103              	.LFE125:
 1105 0042 00BF     		.section	.text.RTC_SetAlarm,"ax",%progbits
 1106              		.align	2
 1107              		.global	RTC_SetAlarm
 1108              		.thumb
 1109              		.thumb_func
 1111              	RTC_SetAlarm:
 1112              	.LFB126:
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1113              		.loc 1 1090 0
 1114              		.cfi_startproc
 1115              		@ args = 0, pretend = 0, frame = 0
 1116              		@ frame_needed = 0, uses_anonymous_args = 0
 1117              	.LVL96:
 1118 0000 70B5     		push	{r4, r5, r6, lr}
 1119              	.LCFI10:
 1120              		.cfi_def_cfa_offset 16
 1121              		.cfi_offset 4, -16
 1122              		.cfi_offset 5, -12
 1123              		.cfi_offset 6, -8
 1124              		.cfi_offset 14, -4
 1125 0002 0D46     		mov	r5, r1
 1126 0004 1446     		mov	r4, r2
 1127              	.LVL97:
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 1128              		.loc 1 1125 0
 1129 0006 4FF42052 		mov	r2, #10240
 1130              	.LVL98:
 1131 000a C4F20002 		movt	r2, 16384
 1132 000e 9268     		ldr	r2, [r2, #8]
 1133 0010 12F0400F 		tst	r2, #64
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
 1134              		.loc 1 1133 0
 1135 0014 04BF     		itt	eq
 1136 0016 0022     		moveq	r2, #0
 1137 0018 E270     		strbeq	r2, [r4, #3]
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1138              		.loc 1 1153 0
 1139 001a 88B1     		cbz	r0, .L67
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1140              		.loc 1 1155 0
 1141 001c 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1142              		.loc 1 1156 0
 1143 001e 6178     		ldrb	r1, [r4, #1]	@ zero_extendqisi2
 1144              	.LVL99:
 1145 0020 0902     		lsls	r1, r1, #8
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1146              		.loc 1 1155 0
 1147 0022 41EA0341 		orr	r1, r1, r3, lsl #16
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1148              		.loc 1 1157 0
 1149 0026 A378     		ldrb	r3, [r4, #2]	@ zero_extendqisi2
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1150              		.loc 1 1156 0
 1151 0028 1943     		orrs	r1, r1, r3
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1152              		.loc 1 1158 0
 1153 002a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1154              		.loc 1 1157 0
 1155 002c 41EA0341 		orr	r1, r1, r3, lsl #16
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1156              		.loc 1 1159 0
 1157 0030 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1158              		.loc 1 1158 0
 1159 0032 41EA0361 		orr	r1, r1, r3, lsl #24
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1160              		.loc 1 1160 0
 1161 0036 A368     		ldr	r3, [r4, #8]
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1162              		.loc 1 1159 0
 1163 0038 1943     		orrs	r1, r1, r3
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 1164              		.loc 1 1161 0
 1165 003a 6268     		ldr	r2, [r4, #4]
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1166              		.loc 1 1155 0
 1167 003c 1143     		orrs	r1, r1, r2
 1168              	.LVL100:
 1169 003e 19E0     		b	.L68
 1170              	.LVL101:
 1171              	.L67:
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1172              		.loc 1 1165 0
 1173 0040 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 1174              	.LVL102:
 1175 0042 FFF7FEFF 		bl	RTC_ByteToBcd2
 1176              	.LVL103:
 1177 0046 0604     		lsls	r6, r0, #16
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1178              		.loc 1 1166 0
 1179 0048 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1180 004a FFF7FEFF 		bl	RTC_ByteToBcd2
 1181              	.LVL104:
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1182              		.loc 1 1165 0
 1183 004e 46EA0026 		orr	r6, r6, r0, lsl #8
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1184              		.loc 1 1167 0
 1185 0052 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 1186 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1187              	.LVL105:
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1188              		.loc 1 1166 0
 1189 0058 3043     		orrs	r0, r0, r6
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1190              		.loc 1 1168 0
 1191 005a E378     		ldrb	r3, [r4, #3]	@ zero_extendqisi2
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1192              		.loc 1 1167 0
 1193 005c 40EA0346 		orr	r6, r0, r3, lsl #16
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1194              		.loc 1 1169 0
 1195 0060 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 1196 0062 FFF7FEFF 		bl	RTC_ByteToBcd2
 1197              	.LVL106:
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1198              		.loc 1 1168 0
 1199 0066 46EA0060 		orr	r0, r6, r0, lsl #24
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1200              		.loc 1 1170 0
 1201 006a A368     		ldr	r3, [r4, #8]
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1202              		.loc 1 1169 0
 1203 006c 40EA0301 		orr	r1, r0, r3
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 1204              		.loc 1 1171 0
 1205 0070 6268     		ldr	r2, [r4, #4]
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1206              		.loc 1 1165 0
 1207 0072 1143     		orrs	r1, r1, r2
 1208              	.LVL107:
 1209              	.L68:
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1210              		.loc 1 1175 0
 1211 0074 4FF42053 		mov	r3, #10240
 1212 0078 C4F20003 		movt	r3, 16384
 1213 007c CA22     		movs	r2, #202
 1214 007e 5A62     		str	r2, [r3, #36]
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1215              		.loc 1 1176 0
 1216 0080 5322     		movs	r2, #83
 1217 0082 5A62     		str	r2, [r3, #36]
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1218              		.loc 1 1179 0
 1219 0084 B5F5807F 		cmp	r5, #256
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1220              		.loc 1 1181 0
 1221 0088 4FF42053 		mov	r3, #10240
 1222 008c C4F20003 		movt	r3, 16384
 1223 0090 0CBF     		ite	eq
 1224 0092 D961     		streq	r1, [r3, #28]
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1225              		.loc 1 1185 0
 1226 0094 1962     		strne	r1, [r3, #32]
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1227              		.loc 1 1189 0
 1228 0096 4FF42053 		mov	r3, #10240
 1229 009a C4F20003 		movt	r3, 16384
 1230 009e FF22     		movs	r2, #255
 1231 00a0 5A62     		str	r2, [r3, #36]
 1232 00a2 70BD     		pop	{r4, r5, r6, pc}
 1233              		.cfi_endproc
 1234              	.LFE126:
 1236              		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1237              		.align	2
 1238              		.global	RTC_AlarmStructInit
 1239              		.thumb
 1240              		.thumb_func
 1242              	RTC_AlarmStructInit:
 1243              	.LFB127:
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
 1244              		.loc 1 1201 0
 1245              		.cfi_startproc
 1246              		@ args = 0, pretend = 0, frame = 0
 1247              		@ frame_needed = 0, uses_anonymous_args = 0
 1248              		@ link register save eliminated.
 1249              	.LVL108:
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1250              		.loc 1 1203 0
 1251 0000 0023     		movs	r3, #0
 1252 0002 C370     		strb	r3, [r0, #3]
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1253              		.loc 1 1204 0
 1254 0004 0370     		strb	r3, [r0]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1255              		.loc 1 1205 0
 1256 0006 4370     		strb	r3, [r0, #1]
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1257              		.loc 1 1206 0
 1258 0008 8370     		strb	r3, [r0, #2]
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1259              		.loc 1 1209 0
 1260 000a 8360     		str	r3, [r0, #8]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1261              		.loc 1 1210 0
 1262 000c 0122     		movs	r2, #1
 1263 000e 0273     		strb	r2, [r0, #12]
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1264              		.loc 1 1213 0
 1265 0010 4360     		str	r3, [r0, #4]
 1266 0012 7047     		bx	lr
 1267              		.cfi_endproc
 1268              	.LFE127:
 1270              		.section	.text.RTC_GetAlarm,"ax",%progbits
 1271              		.align	2
 1272              		.global	RTC_GetAlarm
 1273              		.thumb
 1274              		.thumb_func
 1276              	RTC_GetAlarm:
 1277              	.LFB128:
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1278              		.loc 1 1231 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 0
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282              	.LVL109:
 1283 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1284              	.LCFI11:
 1285              		.cfi_def_cfa_offset 24
 1286              		.cfi_offset 3, -24
 1287              		.cfi_offset 4, -20
 1288              		.cfi_offset 5, -16
 1289              		.cfi_offset 6, -12
 1290              		.cfi_offset 7, -8
 1291              		.cfi_offset 14, -4
 1292 0002 1446     		mov	r4, r2
 1293              	.LVL110:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1294              		.loc 1 1239 0
 1295 0004 B1F5807F 		cmp	r1, #256
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1296              		.loc 1 1241 0
 1297 0008 4FF42053 		mov	r3, #10240
 1298 000c C4F20003 		movt	r3, 16384
 1299 0010 0CBF     		ite	eq
 1300 0012 DB69     		ldreq	r3, [r3, #28]
 1301              	.LVL111:
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1302              		.loc 1 1245 0
 1303 0014 1B6A     		ldrne	r3, [r3, #32]
 1304              	.LVL112:
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
 1305              		.loc 1 1249 0
 1306 0016 C3F30542 		ubfx	r2, r3, #16, #6
 1307              	.LVL113:
 1308 001a 2270     		strb	r2, [r4]
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
 1309              		.loc 1 1251 0
 1310 001c C3F30627 		ubfx	r7, r3, #8, #7
 1311 0020 6770     		strb	r7, [r4, #1]
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
 1312              		.loc 1 1253 0
 1313 0022 03F07F06 		and	r6, r3, #127
 1314 0026 A670     		strb	r6, [r4, #2]
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1315              		.loc 1 1255 0
 1316 0028 03F48001 		and	r1, r3, #4194304
 1317              	.LVL114:
 1318 002c 090C     		lsrs	r1, r1, #16
 1319 002e E170     		strb	r1, [r4, #3]
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1320              		.loc 1 1256 0
 1321 0030 C3F30565 		ubfx	r5, r3, #24, #6
 1322 0034 2573     		strb	r5, [r4, #12]
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1323              		.loc 1 1257 0
 1324 0036 03F08041 		and	r1, r3, #1073741824
 1325 003a A160     		str	r1, [r4, #8]
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1326              		.loc 1 1258 0
 1327 003c 03F08033 		and	r3, r3, #-2139062144
 1328              	.LVL115:
 1329 0040 6360     		str	r3, [r4, #4]
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1330              		.loc 1 1260 0
 1331 0042 78B9     		cbnz	r0, .L72
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
 1332              		.loc 1 1262 0
 1333 0044 1046     		mov	r0, r2
 1334              	.LVL116:
 1335 0046 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1336              	.LVL117:
 1337 004a 2070     		strb	r0, [r4]
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
 1338              		.loc 1 1264 0
 1339 004c 3846     		mov	r0, r7
 1340 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1341              	.LVL118:
 1342 0052 6070     		strb	r0, [r4, #1]
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
 1343              		.loc 1 1266 0
 1344 0054 3046     		mov	r0, r6
 1345 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1346              	.LVL119:
 1347 005a A070     		strb	r0, [r4, #2]
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 1348              		.loc 1 1268 0
 1349 005c 2846     		mov	r0, r5
 1350 005e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1351              	.LVL120:
 1352 0062 2073     		strb	r0, [r4, #12]
 1353              	.L72:
 1354 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1355              		.cfi_endproc
 1356              	.LFE128:
 1358 0066 00BF     		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1359              		.align	2
 1360              		.global	RTC_AlarmCmd
 1361              		.thumb
 1362              		.thumb_func
 1364              	RTC_AlarmCmd:
 1365              	.LFB129:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1366              		.loc 1 1285 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 8
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370              		@ link register save eliminated.
 1371              	.LVL121:
 1372 0000 10B4     		push	{r4}
 1373              	.LCFI12:
 1374              		.cfi_def_cfa_offset 4
 1375              		.cfi_offset 4, -4
 1376 0002 83B0     		sub	sp, sp, #12
 1377              	.LCFI13:
 1378              		.cfi_def_cfa_offset 16
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1379              		.loc 1 1286 0
 1380 0004 0023     		movs	r3, #0
 1381 0006 0193     		str	r3, [sp, #4]
 1382              	.LVL122:
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1383              		.loc 1 1295 0
 1384 0008 4FF42053 		mov	r3, #10240
 1385 000c C4F20003 		movt	r3, 16384
 1386 0010 CA22     		movs	r2, #202
 1387 0012 5A62     		str	r2, [r3, #36]
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1388              		.loc 1 1296 0
 1389 0014 5322     		movs	r2, #83
 1390 0016 5A62     		str	r2, [r3, #36]
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1391              		.loc 1 1299 0
 1392 0018 41B1     		cbz	r1, .L77
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1393              		.loc 1 1301 0
 1394 001a 4FF42053 		mov	r3, #10240
 1395 001e C4F20003 		movt	r3, 16384
 1396 0022 9A68     		ldr	r2, [r3, #8]
 1397 0024 1043     		orrs	r0, r0, r2
 1398              	.LVL123:
 1399 0026 9860     		str	r0, [r3, #8]
 1400              	.LVL124:
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1401              		.loc 1 1303 0
 1402 0028 0120     		movs	r0, #1
 1403 002a 22E0     		b	.L78
 1404              	.LVL125:
 1405              	.L77:
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
 1406              		.loc 1 1308 0
 1407 002c 4FF42053 		mov	r3, #10240
 1408 0030 C4F20003 		movt	r3, 16384
 1409 0034 9A68     		ldr	r2, [r3, #8]
 1410 0036 22EA0002 		bic	r2, r2, r0
 1411 003a 9A60     		str	r2, [r3, #8]
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1412              		.loc 1 1313 0
 1413 003c 4FF42051 		mov	r1, #10240
 1414              	.LVL126:
 1415 0040 C4F20001 		movt	r1, 16384
 1416 0044 000A     		lsrs	r0, r0, #8
 1417              	.LVL127:
 1418              	.L80:
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 1419              		.loc 1 1313 0 is_stmt 0 discriminator 1
 1420 0046 CB68     		ldr	r3, [r1, #12]
 1421 0048 0446     		mov	r4, r0
 1422 004a 03EA0002 		and	r2, r3, r0
 1423              	.LVL128:
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 1424              		.loc 1 1314 0 is_stmt 1 discriminator 1
 1425 004e 019B     		ldr	r3, [sp, #4]
 1426 0050 0133     		adds	r3, r3, #1
 1427 0052 0193     		str	r3, [sp, #4]
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 1428              		.loc 1 1315 0 discriminator 1
 1429 0054 019B     		ldr	r3, [sp, #4]
 1430 0056 B3F5803F 		cmp	r3, #65536
 1431 005a 01D0     		beq	.L79
 1432 005c 002A     		cmp	r2, #0
 1433 005e F2D0     		beq	.L80
 1434              	.L79:
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 1435              		.loc 1 1317 0
 1436 0060 4FF42053 		mov	r3, #10240
 1437 0064 C4F20003 		movt	r3, 16384
 1438 0068 D868     		ldr	r0, [r3, #12]
 1439 006a 0440     		ands	r4, r4, r0
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 1440              		.loc 1 1319 0
 1441 006c 201C     		adds	r0, r4, #0
 1442 006e 18BF     		it	ne
 1443 0070 0120     		movne	r0, #1
 1444              	.LVL129:
 1445              	.L78:
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1446              		.loc 1 1328 0
 1447 0072 4FF42053 		mov	r3, #10240
 1448 0076 C4F20003 		movt	r3, 16384
 1449 007a FF22     		movs	r2, #255
 1450 007c 5A62     		str	r2, [r3, #36]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1451              		.loc 1 1331 0
 1452 007e 03B0     		add	sp, sp, #12
 1453              		@ sp needed
 1454 0080 5DF8044B 		ldr	r4, [sp], #4
 1455 0084 7047     		bx	lr
 1456              		.cfi_endproc
 1457              	.LFE129:
 1459 0086 00BF     		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 1460              		.align	2
 1461              		.global	RTC_AlarmSubSecondConfig
 1462              		.thumb
 1463              		.thumb_func
 1465              	RTC_AlarmSubSecondConfig:
 1466              	.LFB130:
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1467              		.loc 1 1379 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 0
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471              		@ link register save eliminated.
 1472              	.LVL130:
 1473 0000 10B4     		push	{r4}
 1474              	.LCFI14:
 1475              		.cfi_def_cfa_offset 4
 1476              		.cfi_offset 4, -4
 1477              	.LVL131:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1478              		.loc 1 1388 0
 1479 0002 4FF42053 		mov	r3, #10240
 1480 0006 C4F20003 		movt	r3, 16384
 1481 000a CA24     		movs	r4, #202
 1482 000c 5C62     		str	r4, [r3, #36]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1483              		.loc 1 1389 0
 1484 000e 5324     		movs	r4, #83
 1485 0010 5C62     		str	r4, [r3, #36]
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1486              		.loc 1 1392 0
 1487 0012 0A43     		orrs	r2, r2, r1
 1488              	.LVL132:
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1489              		.loc 1 1394 0
 1490 0014 B0F5807F 		cmp	r0, #256
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1491              		.loc 1 1397 0
 1492 0018 4FF42053 		mov	r3, #10240
 1493 001c C4F20003 		movt	r3, 16384
 1494 0020 0CBF     		ite	eq
 1495 0022 5A64     		streq	r2, [r3, #68]
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1496              		.loc 1 1402 0
 1497 0024 9A64     		strne	r2, [r3, #72]
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1498              		.loc 1 1406 0
 1499 0026 4FF42053 		mov	r3, #10240
 1500 002a C4F20003 		movt	r3, 16384
 1501 002e FF22     		movs	r2, #255
 1502              	.LVL133:
 1503 0030 5A62     		str	r2, [r3, #36]
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1504              		.loc 1 1408 0
 1505 0032 5DF8044B 		ldr	r4, [sp], #4
 1506 0036 7047     		bx	lr
 1507              		.cfi_endproc
 1508              	.LFE130:
 1510              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 1511              		.align	2
 1512              		.global	RTC_GetAlarmSubSecond
 1513              		.thumb
 1514              		.thumb_func
 1516              	RTC_GetAlarmSubSecond:
 1517              	.LFB131:
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1518              		.loc 1 1420 0
 1519              		.cfi_startproc
 1520              		@ args = 0, pretend = 0, frame = 0
 1521              		@ frame_needed = 0, uses_anonymous_args = 0
 1522              		@ link register save eliminated.
 1523              	.LVL134:
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1524              		.loc 1 1424 0
 1525 0000 B0F5807F 		cmp	r0, #256
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1526              		.loc 1 1426 0
 1527 0004 4FF42053 		mov	r3, #10240
 1528 0008 C4F20003 		movt	r3, 16384
 1529 000c 0CBF     		ite	eq
 1530 000e 586C     		ldreq	r0, [r3, #68]
 1531              	.LVL135:
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 1532              		.loc 1 1430 0
 1533 0010 986C     		ldrne	r0, [r3, #72]
 1534 0012 C0F30E00 		ubfx	r0, r0, #0, #15
 1535              	.LVL136:
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1536              		.loc 1 1434 0
 1537 0016 7047     		bx	lr
 1538              		.cfi_endproc
 1539              	.LFE131:
 1541              		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 1542              		.align	2
 1543              		.global	RTC_WakeUpClockConfig
 1544              		.thumb
 1545              		.thumb_func
 1547              	RTC_WakeUpClockConfig:
 1548              	.LFB132:
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1549              		.loc 1 1469 0
 1550              		.cfi_startproc
 1551              		@ args = 0, pretend = 0, frame = 0
 1552              		@ frame_needed = 0, uses_anonymous_args = 0
 1553              		@ link register save eliminated.
 1554              	.LVL137:
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1555              		.loc 1 1474 0
 1556 0000 4FF42053 		mov	r3, #10240
 1557 0004 C4F20003 		movt	r3, 16384
 1558 0008 CA22     		movs	r2, #202
 1559 000a 5A62     		str	r2, [r3, #36]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1560              		.loc 1 1475 0
 1561 000c 5322     		movs	r2, #83
 1562 000e 5A62     		str	r2, [r3, #36]
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1563              		.loc 1 1478 0
 1564 0010 9A68     		ldr	r2, [r3, #8]
 1565 0012 22F00702 		bic	r2, r2, #7
 1566 0016 9A60     		str	r2, [r3, #8]
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1567              		.loc 1 1481 0
 1568 0018 9A68     		ldr	r2, [r3, #8]
 1569 001a 1043     		orrs	r0, r0, r2
 1570              	.LVL138:
 1571 001c 9860     		str	r0, [r3, #8]
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1572              		.loc 1 1484 0
 1573 001e FF22     		movs	r2, #255
 1574 0020 5A62     		str	r2, [r3, #36]
 1575 0022 7047     		bx	lr
 1576              		.cfi_endproc
 1577              	.LFE132:
 1579              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 1580              		.align	2
 1581              		.global	RTC_SetWakeUpCounter
 1582              		.thumb
 1583              		.thumb_func
 1585              	RTC_SetWakeUpCounter:
 1586              	.LFB133:
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1587              		.loc 1 1496 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 0
 1590              		@ frame_needed = 0, uses_anonymous_args = 0
 1591              		@ link register save eliminated.
 1592              	.LVL139:
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1593              		.loc 1 1501 0
 1594 0000 4FF42053 		mov	r3, #10240
 1595 0004 C4F20003 		movt	r3, 16384
 1596 0008 CA22     		movs	r2, #202
 1597 000a 5A62     		str	r2, [r3, #36]
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1598              		.loc 1 1502 0
 1599 000c 5322     		movs	r2, #83
 1600 000e 5A62     		str	r2, [r3, #36]
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1601              		.loc 1 1505 0
 1602 0010 5861     		str	r0, [r3, #20]
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1603              		.loc 1 1508 0
 1604 0012 FF22     		movs	r2, #255
 1605 0014 5A62     		str	r2, [r3, #36]
 1606 0016 7047     		bx	lr
 1607              		.cfi_endproc
 1608              	.LFE133:
 1610              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 1611              		.align	2
 1612              		.global	RTC_GetWakeUpCounter
 1613              		.thumb
 1614              		.thumb_func
 1616              	RTC_GetWakeUpCounter:
 1617              	.LFB134:
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
 1618              		.loc 1 1517 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622              		@ link register save eliminated.
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1623              		.loc 1 1519 0
 1624 0000 4FF42053 		mov	r3, #10240
 1625 0004 C4F20003 		movt	r3, 16384
 1626 0008 5869     		ldr	r0, [r3, #20]
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1627              		.loc 1 1520 0
 1628 000a 80B2     		uxth	r0, r0
 1629 000c 7047     		bx	lr
 1630              		.cfi_endproc
 1631              	.LFE134:
 1633 000e 00BF     		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 1634              		.align	2
 1635              		.global	RTC_WakeUpCmd
 1636              		.thumb
 1637              		.thumb_func
 1639              	RTC_WakeUpCmd:
 1640              	.LFB135:
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 1641              		.loc 1 1529 0
 1642              		.cfi_startproc
 1643              		@ args = 0, pretend = 0, frame = 8
 1644              		@ frame_needed = 0, uses_anonymous_args = 0
 1645              		@ link register save eliminated.
 1646              	.LVL140:
 1647 0000 82B0     		sub	sp, sp, #8
 1648              	.LCFI15:
 1649              		.cfi_def_cfa_offset 8
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 1650              		.loc 1 1530 0
 1651 0002 0023     		movs	r3, #0
 1652 0004 0193     		str	r3, [sp, #4]
 1653              	.LVL141:
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1654              		.loc 1 1538 0
 1655 0006 4FF42053 		mov	r3, #10240
 1656 000a C4F20003 		movt	r3, 16384
 1657 000e CA22     		movs	r2, #202
 1658 0010 5A62     		str	r2, [r3, #36]
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1659              		.loc 1 1539 0
 1660 0012 5322     		movs	r2, #83
 1661 0014 5A62     		str	r2, [r3, #36]
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1662              		.loc 1 1541 0
 1663 0016 48B1     		cbz	r0, .L93
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1664              		.loc 1 1544 0
 1665 0018 4FF42053 		mov	r3, #10240
 1666 001c C4F20003 		movt	r3, 16384
 1667 0020 9A68     		ldr	r2, [r3, #8]
 1668 0022 42F48062 		orr	r2, r2, #1024
 1669 0026 9A60     		str	r2, [r3, #8]
 1670              	.LVL142:
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1671              		.loc 1 1545 0
 1672 0028 0120     		movs	r0, #1
 1673              	.LVL143:
 1674 002a 21E0     		b	.L94
 1675              	.LVL144:
 1676              	.L93:
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 1677              		.loc 1 1550 0
 1678 002c 4FF42053 		mov	r3, #10240
 1679 0030 C4F20003 		movt	r3, 16384
 1680 0034 9A68     		ldr	r2, [r3, #8]
 1681 0036 22F48062 		bic	r2, r2, #1024
 1682 003a 9A60     		str	r2, [r3, #8]
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1683              		.loc 1 1554 0
 1684 003c 4FF42051 		mov	r1, #10240
 1685 0040 C4F20001 		movt	r1, 16384
 1686              	.LVL145:
 1687              	.L96:
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 1688              		.loc 1 1554 0 is_stmt 0 discriminator 1
 1689 0044 CB68     		ldr	r3, [r1, #12]
 1690 0046 03F00402 		and	r2, r3, #4
 1691              	.LVL146:
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 1692              		.loc 1 1555 0 is_stmt 1 discriminator 1
 1693 004a 019B     		ldr	r3, [sp, #4]
 1694 004c 0133     		adds	r3, r3, #1
 1695 004e 0193     		str	r3, [sp, #4]
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 1696              		.loc 1 1556 0 discriminator 1
 1697 0050 019B     		ldr	r3, [sp, #4]
 1698 0052 B3F5803F 		cmp	r3, #65536
 1699 0056 01D0     		beq	.L95
 1700 0058 002A     		cmp	r2, #0
 1701 005a F3D0     		beq	.L96
 1702              	.L95:
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 1703              		.loc 1 1558 0
 1704 005c 4FF42053 		mov	r3, #10240
 1705 0060 C4F20003 		movt	r3, 16384
 1706 0064 D868     		ldr	r0, [r3, #12]
 1707              	.LVL147:
 1708 0066 00F00400 		and	r0, r0, #4
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 1709              		.loc 1 1560 0
 1710 006a 0030     		adds	r0, r0, #0
 1711 006c 18BF     		it	ne
 1712 006e 0120     		movne	r0, #1
 1713              	.LVL148:
 1714              	.L94:
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1715              		.loc 1 1569 0
 1716 0070 4FF42053 		mov	r3, #10240
 1717 0074 C4F20003 		movt	r3, 16384
 1718 0078 FF22     		movs	r2, #255
 1719 007a 5A62     		str	r2, [r3, #36]
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1720              		.loc 1 1572 0
 1721 007c 02B0     		add	sp, sp, #8
 1722              		@ sp needed
 1723 007e 7047     		bx	lr
 1724              		.cfi_endproc
 1725              	.LFE135:
 1727              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 1728              		.align	2
 1729              		.global	RTC_DayLightSavingConfig
 1730              		.thumb
 1731              		.thumb_func
 1733              	RTC_DayLightSavingConfig:
 1734              	.LFB136:
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1735              		.loc 1 1606 0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 0
 1738              		@ frame_needed = 0, uses_anonymous_args = 0
 1739              		@ link register save eliminated.
 1740              	.LVL149:
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1741              		.loc 1 1612 0
 1742 0000 4FF42053 		mov	r3, #10240
 1743 0004 C4F20003 		movt	r3, 16384
 1744 0008 CA22     		movs	r2, #202
 1745 000a 5A62     		str	r2, [r3, #36]
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1746              		.loc 1 1613 0
 1747 000c 5322     		movs	r2, #83
 1748 000e 5A62     		str	r2, [r3, #36]
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1749              		.loc 1 1616 0
 1750 0010 9A68     		ldr	r2, [r3, #8]
 1751 0012 22F48022 		bic	r2, r2, #262144
 1752 0016 9A60     		str	r2, [r3, #8]
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1753              		.loc 1 1619 0
 1754 0018 9A68     		ldr	r2, [r3, #8]
 1755 001a 0143     		orrs	r1, r1, r0
 1756              	.LVL150:
 1757 001c 0A43     		orrs	r2, r2, r1
 1758 001e 9A60     		str	r2, [r3, #8]
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1759              		.loc 1 1622 0
 1760 0020 FF22     		movs	r2, #255
 1761 0022 5A62     		str	r2, [r3, #36]
 1762 0024 7047     		bx	lr
 1763              		.cfi_endproc
 1764              	.LFE136:
 1766 0026 00BF     		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 1767              		.align	2
 1768              		.global	RTC_GetStoreOperation
 1769              		.thumb
 1770              		.thumb_func
 1772              	RTC_GetStoreOperation:
 1773              	.LFB137:
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 1774              		.loc 1 1633 0
 1775              		.cfi_startproc
 1776              		@ args = 0, pretend = 0, frame = 0
 1777              		@ frame_needed = 0, uses_anonymous_args = 0
 1778              		@ link register save eliminated.
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1779              		.loc 1 1634 0
 1780 0000 4FF42053 		mov	r3, #10240
 1781 0004 C4F20003 		movt	r3, 16384
 1782 0008 9868     		ldr	r0, [r3, #8]
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1783              		.loc 1 1635 0
 1784 000a 00F48020 		and	r0, r0, #262144
 1785 000e 7047     		bx	lr
 1786              		.cfi_endproc
 1787              	.LFE137:
 1789              		.section	.text.RTC_OutputConfig,"ax",%progbits
 1790              		.align	2
 1791              		.global	RTC_OutputConfig
 1792              		.thumb
 1793              		.thumb_func
 1795              	RTC_OutputConfig:
 1796              	.LFB138:
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1797              		.loc 1 1672 0
 1798              		.cfi_startproc
 1799              		@ args = 0, pretend = 0, frame = 0
 1800              		@ frame_needed = 0, uses_anonymous_args = 0
 1801              		@ link register save eliminated.
 1802              	.LVL151:
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1803              		.loc 1 1678 0
 1804 0000 4FF42053 		mov	r3, #10240
 1805 0004 C4F20003 		movt	r3, 16384
 1806 0008 CA22     		movs	r2, #202
 1807 000a 5A62     		str	r2, [r3, #36]
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1808              		.loc 1 1679 0
 1809 000c 5322     		movs	r2, #83
 1810 000e 5A62     		str	r2, [r3, #36]
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1811              		.loc 1 1682 0
 1812 0010 9A68     		ldr	r2, [r3, #8]
 1813 0012 22F4E002 		bic	r2, r2, #7340032
 1814 0016 9A60     		str	r2, [r3, #8]
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1815              		.loc 1 1685 0
 1816 0018 9A68     		ldr	r2, [r3, #8]
 1817 001a 0143     		orrs	r1, r1, r0
 1818              	.LVL152:
 1819 001c 0A43     		orrs	r2, r2, r1
 1820 001e 9A60     		str	r2, [r3, #8]
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1821              		.loc 1 1688 0
 1822 0020 FF22     		movs	r2, #255
 1823 0022 5A62     		str	r2, [r3, #36]
 1824 0024 7047     		bx	lr
 1825              		.cfi_endproc
 1826              	.LFE138:
 1828 0026 00BF     		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 1829              		.align	2
 1830              		.global	RTC_CoarseCalibConfig
 1831              		.thumb
 1832              		.thumb_func
 1834              	RTC_CoarseCalibConfig:
 1835              	.LFB139:
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1836              		.loc 1 1726 0
 1837              		.cfi_startproc
 1838              		@ args = 0, pretend = 0, frame = 0
 1839              		@ frame_needed = 0, uses_anonymous_args = 0
 1840              	.LVL153:
 1841 0000 38B5     		push	{r3, r4, r5, lr}
 1842              	.LCFI16:
 1843              		.cfi_def_cfa_offset 16
 1844              		.cfi_offset 3, -16
 1845              		.cfi_offset 4, -12
 1846              		.cfi_offset 5, -8
 1847              		.cfi_offset 14, -4
 1848 0002 0546     		mov	r5, r0
 1849 0004 0C46     		mov	r4, r1
 1850              	.LVL154:
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1851              		.loc 1 1734 0
 1852 0006 4FF42053 		mov	r3, #10240
 1853 000a C4F20003 		movt	r3, 16384
 1854 000e CA22     		movs	r2, #202
 1855 0010 5A62     		str	r2, [r3, #36]
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1856              		.loc 1 1735 0
 1857 0012 5322     		movs	r2, #83
 1858 0014 5A62     		str	r2, [r3, #36]
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1859              		.loc 1 1738 0
 1860 0016 FFF7FEFF 		bl	RTC_EnterInitMode
 1861              	.LVL155:
 1862 001a 48B1     		cbz	r0, .L104
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 1863              		.loc 1 1745 0
 1864 001c 2C43     		orrs	r4, r4, r5
 1865              	.LVL156:
 1866 001e 4FF42053 		mov	r3, #10240
 1867 0022 C4F20003 		movt	r3, 16384
 1868 0026 9C61     		str	r4, [r3, #24]
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 1869              		.loc 1 1747 0
 1870 0028 FFF7FEFF 		bl	RTC_ExitInitMode
 1871              	.LVL157:
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 1872              		.loc 1 1749 0
 1873 002c 0120     		movs	r0, #1
 1874 002e 00E0     		b	.L103
 1875              	.LVL158:
 1876              	.L104:
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 1877              		.loc 1 1740 0
 1878 0030 0020     		movs	r0, #0
 1879              	.LVL159:
 1880              	.L103:
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1881              		.loc 1 1753 0
 1882 0032 4FF42053 		mov	r3, #10240
 1883 0036 C4F20003 		movt	r3, 16384
 1884 003a FF22     		movs	r2, #255
 1885 003c 5A62     		str	r2, [r3, #36]
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1886              		.loc 1 1756 0
 1887 003e 38BD     		pop	{r3, r4, r5, pc}
 1888              		.cfi_endproc
 1889              	.LFE139:
 1891              		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 1892              		.align	2
 1893              		.global	RTC_CoarseCalibCmd
 1894              		.thumb
 1895              		.thumb_func
 1897              	RTC_CoarseCalibCmd:
 1898              	.LFB140:
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1899              		.loc 1 1767 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 0
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              	.LVL160:
 1904 0000 10B5     		push	{r4, lr}
 1905              	.LCFI17:
 1906              		.cfi_def_cfa_offset 8
 1907              		.cfi_offset 4, -8
 1908              		.cfi_offset 14, -4
 1909 0002 0446     		mov	r4, r0
 1910              	.LVL161:
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1911              		.loc 1 1774 0
 1912 0004 4FF42053 		mov	r3, #10240
 1913 0008 C4F20003 		movt	r3, 16384
 1914 000c CA22     		movs	r2, #202
 1915 000e 5A62     		str	r2, [r3, #36]
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1916              		.loc 1 1775 0
 1917 0010 5322     		movs	r2, #83
 1918 0012 5A62     		str	r2, [r3, #36]
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1919              		.loc 1 1778 0
 1920 0014 FFF7FEFF 		bl	RTC_EnterInitMode
 1921              	.LVL162:
 1922 0018 A8B1     		cbz	r0, .L109
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 1923              		.loc 1 1784 0
 1924 001a 44B1     		cbz	r4, .L107
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 1925              		.loc 1 1787 0
 1926 001c 4FF42053 		mov	r3, #10240
 1927 0020 C4F20003 		movt	r3, 16384
 1928 0024 9A68     		ldr	r2, [r3, #8]
 1929 0026 42F08002 		orr	r2, r2, #128
 1930 002a 9A60     		str	r2, [r3, #8]
 1931 002c 07E0     		b	.L108
 1932              	.L107:
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 1933              		.loc 1 1792 0
 1934 002e 4FF42053 		mov	r3, #10240
 1935 0032 C4F20003 		movt	r3, 16384
 1936 0036 9A68     		ldr	r2, [r3, #8]
 1937 0038 22F08002 		bic	r2, r2, #128
 1938 003c 9A60     		str	r2, [r3, #8]
 1939              	.L108:
1795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 1940              		.loc 1 1795 0
 1941 003e FFF7FEFF 		bl	RTC_ExitInitMode
 1942              	.LVL163:
1797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 1943              		.loc 1 1797 0
 1944 0042 0120     		movs	r0, #1
 1945 0044 00E0     		b	.L106
 1946              	.LVL164:
 1947              	.L109:
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1948              		.loc 1 1780 0
 1949 0046 0020     		movs	r0, #0
 1950              	.LVL165:
 1951              	.L106:
1801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1952              		.loc 1 1801 0
 1953 0048 4FF42053 		mov	r3, #10240
 1954 004c C4F20003 		movt	r3, 16384
 1955 0050 FF22     		movs	r2, #255
 1956 0052 5A62     		str	r2, [r3, #36]
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 1957              		.loc 1 1804 0
 1958 0054 10BD     		pop	{r4, pc}
 1959              		.cfi_endproc
 1960              	.LFE140:
 1962 0056 00BF     		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 1963              		.align	2
 1964              		.global	RTC_CalibOutputCmd
 1965              		.thumb
 1966              		.thumb_func
 1968              	RTC_CalibOutputCmd:
 1969              	.LFB141:
1813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 1970              		.loc 1 1813 0
 1971              		.cfi_startproc
 1972              		@ args = 0, pretend = 0, frame = 0
 1973              		@ frame_needed = 0, uses_anonymous_args = 0
 1974              		@ link register save eliminated.
 1975              	.LVL166:
1818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1976              		.loc 1 1818 0
 1977 0000 4FF42053 		mov	r3, #10240
 1978 0004 C4F20003 		movt	r3, 16384
 1979 0008 CA22     		movs	r2, #202
 1980 000a 5A62     		str	r2, [r3, #36]
1819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 1981              		.loc 1 1819 0
 1982 000c 5322     		movs	r2, #83
 1983 000e 5A62     		str	r2, [r3, #36]
1821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 1984              		.loc 1 1821 0
 1985 0010 40B1     		cbz	r0, .L111
1824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1986              		.loc 1 1824 0
 1987 0012 4FF42053 		mov	r3, #10240
 1988 0016 C4F20003 		movt	r3, 16384
 1989 001a 9A68     		ldr	r2, [r3, #8]
 1990 001c 42F40002 		orr	r2, r2, #8388608
 1991 0020 9A60     		str	r2, [r3, #8]
 1992 0022 07E0     		b	.L112
 1993              	.L111:
1829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 1994              		.loc 1 1829 0
 1995 0024 4FF42053 		mov	r3, #10240
 1996 0028 C4F20003 		movt	r3, 16384
 1997 002c 9A68     		ldr	r2, [r3, #8]
 1998 002e 22F40002 		bic	r2, r2, #8388608
 1999 0032 9A60     		str	r2, [r3, #8]
 2000              	.L112:
1833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2001              		.loc 1 1833 0
 2002 0034 4FF42053 		mov	r3, #10240
 2003 0038 C4F20003 		movt	r3, 16384
 2004 003c FF22     		movs	r2, #255
 2005 003e 5A62     		str	r2, [r3, #36]
 2006 0040 7047     		bx	lr
 2007              		.cfi_endproc
 2008              	.LFE141:
 2010 0042 00BF     		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2011              		.align	2
 2012              		.global	RTC_CalibOutputConfig
 2013              		.thumb
 2014              		.thumb_func
 2016              	RTC_CalibOutputConfig:
 2017              	.LFB142:
1845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2018              		.loc 1 1845 0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022              		@ link register save eliminated.
 2023              	.LVL167:
1850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2024              		.loc 1 1850 0
 2025 0000 4FF42053 		mov	r3, #10240
 2026 0004 C4F20003 		movt	r3, 16384
 2027 0008 CA22     		movs	r2, #202
 2028 000a 5A62     		str	r2, [r3, #36]
1851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2029              		.loc 1 1851 0
 2030 000c 5322     		movs	r2, #83
 2031 000e 5A62     		str	r2, [r3, #36]
1854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2032              		.loc 1 1854 0
 2033 0010 9A68     		ldr	r2, [r3, #8]
 2034 0012 22F40022 		bic	r2, r2, #524288
 2035 0016 9A60     		str	r2, [r3, #8]
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2036              		.loc 1 1857 0
 2037 0018 9A68     		ldr	r2, [r3, #8]
 2038 001a 1043     		orrs	r0, r0, r2
 2039              	.LVL168:
 2040 001c 9860     		str	r0, [r3, #8]
1860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2041              		.loc 1 1860 0
 2042 001e FF22     		movs	r2, #255
 2043 0020 5A62     		str	r2, [r3, #36]
 2044 0022 7047     		bx	lr
 2045              		.cfi_endproc
 2046              	.LFE142:
 2048              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2049              		.align	2
 2050              		.global	RTC_SmoothCalibConfig
 2051              		.thumb
 2052              		.thumb_func
 2054              	RTC_SmoothCalibConfig:
 2055              	.LFB143:
1883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2056              		.loc 1 1883 0
 2057              		.cfi_startproc
 2058              		@ args = 0, pretend = 0, frame = 0
 2059              		@ frame_needed = 0, uses_anonymous_args = 0
 2060              		@ link register save eliminated.
 2061              	.LVL169:
 2062 0000 30B4     		push	{r4, r5}
 2063              	.LCFI18:
 2064              		.cfi_def_cfa_offset 8
 2065              		.cfi_offset 4, -8
 2066              		.cfi_offset 5, -4
 2067              	.LVL170:
1893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2068              		.loc 1 1893 0
 2069 0002 4FF42053 		mov	r3, #10240
 2070 0006 C4F20003 		movt	r3, 16384
 2071 000a CA24     		movs	r4, #202
 2072 000c 5C62     		str	r4, [r3, #36]
1894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2073              		.loc 1 1894 0
 2074 000e 5324     		movs	r4, #83
 2075 0010 5C62     		str	r4, [r3, #36]
1897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2076              		.loc 1 1897 0
 2077 0012 DB68     		ldr	r3, [r3, #12]
 2078 0014 13F4803F 		tst	r3, #65536
 2079 0018 02D1     		bne	.L119
 2080 001a 0DE0     		b	.L116
 2081              	.LVL171:
 2082              	.L117:
1902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 2083              		.loc 1 1902 0
 2084 001c 0133     		adds	r3, r3, #1
 2085              	.LVL172:
 2086 001e 04E0     		b	.L115
 2087              	.LVL173:
 2088              	.L119:
 2089 0020 0023     		movs	r3, #0
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2090              		.loc 1 1900 0
 2091 0022 4FF42055 		mov	r5, #10240
 2092 0026 C4F20005 		movt	r5, 16384
 2093              	.LVL174:
 2094              	.L115:
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2095              		.loc 1 1900 0 is_stmt 0 discriminator 1
 2096 002a EC68     		ldr	r4, [r5, #12]
 2097 002c 14F4803F 		tst	r4, #65536
 2098 0030 02D0     		beq	.L116
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2099              		.loc 1 1900 0 discriminator 2
 2100 0032 B3F5003F 		cmp	r3, #131072
 2101 0036 F1D1     		bne	.L117
 2102              	.LVL175:
 2103              	.L116:
1907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2104              		.loc 1 1907 0 is_stmt 1
 2105 0038 4FF42053 		mov	r3, #10240
 2106 003c C4F20003 		movt	r3, 16384
 2107 0040 DB68     		ldr	r3, [r3, #12]
 2108 0042 13F4803F 		tst	r3, #65536
1910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2109              		.loc 1 1910 0
 2110 0046 01BF     		itttt	eq
 2111 0048 0843     		orreq	r0, r0, r1
 2112              	.LVL176:
 2113 004a 0243     		orreq	r2, r0, r2
 2114              	.LVL177:
 2115 004c 4FF42053 		moveq	r3, #10240
 2116 0050 C4F20003 		movteq	r3, 16384
 2117 0054 06BF     		itte	eq
 2118 0056 DA63     		streq	r2, [r3, #60]
 2119              	.LVL178:
1912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2120              		.loc 1 1912 0
 2121 0058 0120     		moveq	r0, #1
1916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2122              		.loc 1 1916 0
 2123 005a 0020     		movne	r0, #0
 2124              	.LVL179:
1920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2125              		.loc 1 1920 0
 2126 005c 4FF42053 		mov	r3, #10240
 2127 0060 C4F20003 		movt	r3, 16384
 2128 0064 FF22     		movs	r2, #255
 2129 0066 5A62     		str	r2, [r3, #36]
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2130              		.loc 1 1923 0
 2131 0068 30BC     		pop	{r4, r5}
 2132 006a 7047     		bx	lr
 2133              		.cfi_endproc
 2134              	.LFE143:
 2136              		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 2137              		.align	2
 2138              		.global	RTC_TimeStampCmd
 2139              		.thumb
 2140              		.thumb_func
 2142              	RTC_TimeStampCmd:
 2143              	.LFB144:
1957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2144              		.loc 1 1957 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
 2149              	.LVL180:
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2150              		.loc 1 1965 0
 2151 0000 4FF42053 		mov	r3, #10240
 2152 0004 C4F20003 		movt	r3, 16384
 2153 0008 9B68     		ldr	r3, [r3, #8]
 2154 000a 23F40063 		bic	r3, r3, #2048
 2155 000e 23F00803 		bic	r3, r3, #8
 2156              	.LVL181:
1968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2157              		.loc 1 1968 0
 2158 0012 19B1     		cbz	r1, .L122
1970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2159              		.loc 1 1970 0
 2160 0014 1843     		orrs	r0, r0, r3
 2161              	.LVL182:
 2162 0016 40F40060 		orr	r0, r0, #2048
 2163              	.LVL183:
 2164 001a 00E0     		b	.L123
 2165              	.LVL184:
 2166              	.L122:
1974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2167              		.loc 1 1974 0
 2168 001c 1843     		orrs	r0, r0, r3
 2169              	.LVL185:
 2170              	.L123:
1978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2171              		.loc 1 1978 0
 2172 001e 4FF42053 		mov	r3, #10240
 2173 0022 C4F20003 		movt	r3, 16384
 2174 0026 CA22     		movs	r2, #202
 2175 0028 5A62     		str	r2, [r3, #36]
1979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2176              		.loc 1 1979 0
 2177 002a 5322     		movs	r2, #83
 2178 002c 5A62     		str	r2, [r3, #36]
1982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2179              		.loc 1 1982 0
 2180 002e 9860     		str	r0, [r3, #8]
1985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2181              		.loc 1 1985 0
 2182 0030 FF22     		movs	r2, #255
 2183 0032 5A62     		str	r2, [r3, #36]
 2184 0034 7047     		bx	lr
 2185              		.cfi_endproc
 2186              	.LFE144:
 2188 0036 00BF     		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 2189              		.align	2
 2190              		.global	RTC_GetTimeStamp
 2191              		.thumb
 2192              		.thumb_func
 2194              	RTC_GetTimeStamp:
 2195              	.LFB145:
2002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 2196              		.loc 1 2002 0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
 2200              	.LVL186:
 2201 0000 38B5     		push	{r3, r4, r5, lr}
 2202              	.LCFI19:
 2203              		.cfi_def_cfa_offset 16
 2204              		.cfi_offset 3, -16
 2205              		.cfi_offset 4, -12
 2206              		.cfi_offset 5, -8
 2207              		.cfi_offset 14, -4
 2208 0002 0D46     		mov	r5, r1
 2209 0004 1446     		mov	r4, r2
 2210              	.LVL187:
2009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 2211              		.loc 1 2009 0
 2212 0006 4FF42052 		mov	r2, #10240
 2213              	.LVL188:
 2214 000a C4F20002 		movt	r2, 16384
 2215 000e 136B     		ldr	r3, [r2, #48]
 2216              	.LVL189:
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2217              		.loc 1 2010 0
 2218 0010 526B     		ldr	r2, [r2, #52]
 2219              	.LVL190:
2013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 2220              		.loc 1 2013 0
 2221 0012 C3F30541 		ubfx	r1, r3, #16, #6
 2222              	.LVL191:
 2223 0016 2970     		strb	r1, [r5]
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 2224              		.loc 1 2014 0
 2225 0018 C3F30621 		ubfx	r1, r3, #8, #7
 2226 001c 6970     		strb	r1, [r5, #1]
2015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 2227              		.loc 1 2015 0
 2228 001e 03F07F01 		and	r1, r3, #127
 2229 0022 A970     		strb	r1, [r5, #2]
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2230              		.loc 1 2016 0
 2231 0024 03F48003 		and	r3, r3, #4194304
 2232              	.LVL192:
 2233 0028 1B0C     		lsrs	r3, r3, #16
 2234 002a EB70     		strb	r3, [r5, #3]
2019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 2235              		.loc 1 2019 0
 2236 002c 0023     		movs	r3, #0
 2237 002e E370     		strb	r3, [r4, #3]
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 2238              		.loc 1 2020 0
 2239 0030 C2F30423 		ubfx	r3, r2, #8, #5
 2240 0034 6370     		strb	r3, [r4, #1]
2021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 2241              		.loc 1 2021 0
 2242 0036 02F03F03 		and	r3, r2, #63
 2243 003a A370     		strb	r3, [r4, #2]
2022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2244              		.loc 1 2022 0
 2245 003c C2F34232 		ubfx	r2, r2, #13, #3
 2246              	.LVL193:
 2247 0040 2270     		strb	r2, [r4]
2025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2248              		.loc 1 2025 0
 2249 0042 B8B9     		cbnz	r0, .L124
2028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 2250              		.loc 1 2028 0
 2251 0044 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 2252              	.LVL194:
 2253 0046 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2254              	.LVL195:
 2255 004a 2870     		strb	r0, [r5]
2029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 2256              		.loc 1 2029 0
 2257 004c 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 2258 004e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2259              	.LVL196:
 2260 0052 6870     		strb	r0, [r5, #1]
2030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2261              		.loc 1 2030 0
 2262 0054 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 2263 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2264              	.LVL197:
 2265 005a A870     		strb	r0, [r5, #2]
2033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 2266              		.loc 1 2033 0
 2267 005c 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2268 005e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2269              	.LVL198:
 2270 0062 6070     		strb	r0, [r4, #1]
2034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 2271              		.loc 1 2034 0
 2272 0064 A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2273 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2274              	.LVL199:
 2275 006a A070     		strb	r0, [r4, #2]
2035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2276              		.loc 1 2035 0
 2277 006c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
 2278 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 2279              	.LVL200:
 2280 0072 2070     		strb	r0, [r4]
 2281              	.L124:
 2282 0074 38BD     		pop	{r3, r4, r5, pc}
 2283              		.cfi_endproc
 2284              	.LFE145:
 2286 0076 00BF     		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 2287              		.align	2
 2288              		.global	RTC_GetTimeStampSubSecond
 2289              		.thumb
 2290              		.thumb_func
 2292              	RTC_GetTimeStampSubSecond:
 2293              	.LFB146:
2045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
 2294              		.loc 1 2045 0
 2295              		.cfi_startproc
 2296              		@ args = 0, pretend = 0, frame = 0
 2297              		@ frame_needed = 0, uses_anonymous_args = 0
 2298              		@ link register save eliminated.
2047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2299              		.loc 1 2047 0
 2300 0000 4FF42053 		mov	r3, #10240
 2301 0004 C4F20003 		movt	r3, 16384
 2302 0008 986B     		ldr	r0, [r3, #56]
2048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2303              		.loc 1 2048 0
 2304 000a 7047     		bx	lr
 2305              		.cfi_endproc
 2306              	.LFE146:
 2308              		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 2309              		.align	2
 2310              		.global	RTC_TamperTriggerConfig
 2311              		.thumb
 2312              		.thumb_func
 2314              	RTC_TamperTriggerConfig:
 2315              	.LFB147:
2080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2316              		.loc 1 2080 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320              		@ link register save eliminated.
 2321              	.LVL201:
2085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 2322              		.loc 1 2085 0
 2323 0000 41B9     		cbnz	r1, .L128
2088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2324              		.loc 1 2088 0
 2325 0002 4FF42053 		mov	r3, #10240
 2326 0006 C4F20003 		movt	r3, 16384
 2327 000a 1A6C     		ldr	r2, [r3, #64]
 2328 000c 22EA4000 		bic	r0, r2, r0, lsl #1
 2329              	.LVL202:
 2330 0010 1864     		str	r0, [r3, #64]
 2331 0012 7047     		bx	lr
 2332              	.LVL203:
 2333              	.L128:
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 2334              		.loc 1 2093 0
 2335 0014 4FF42053 		mov	r3, #10240
 2336 0018 C4F20003 		movt	r3, 16384
 2337 001c 1A6C     		ldr	r2, [r3, #64]
 2338 001e 42EA4000 		orr	r0, r2, r0, lsl #1
 2339              	.LVL204:
 2340 0022 1864     		str	r0, [r3, #64]
 2341 0024 7047     		bx	lr
 2342              		.cfi_endproc
 2343              	.LFE147:
 2345 0026 00BF     		.section	.text.RTC_TamperCmd,"ax",%progbits
 2346              		.align	2
 2347              		.global	RTC_TamperCmd
 2348              		.thumb
 2349              		.thumb_func
 2351              	RTC_TamperCmd:
 2352              	.LFB148:
2106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2353              		.loc 1 2106 0
 2354              		.cfi_startproc
 2355              		@ args = 0, pretend = 0, frame = 0
 2356              		@ frame_needed = 0, uses_anonymous_args = 0
 2357              		@ link register save eliminated.
 2358              	.LVL205:
2111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2359              		.loc 1 2111 0
 2360 0000 39B1     		cbz	r1, .L131
2114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2361              		.loc 1 2114 0
 2362 0002 4FF42053 		mov	r3, #10240
 2363 0006 C4F20003 		movt	r3, 16384
 2364 000a 1A6C     		ldr	r2, [r3, #64]
 2365 000c 1043     		orrs	r0, r0, r2
 2366              	.LVL206:
 2367 000e 1864     		str	r0, [r3, #64]
 2368 0010 7047     		bx	lr
 2369              	.LVL207:
 2370              	.L131:
2119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 2371              		.loc 1 2119 0
 2372 0012 4FF42053 		mov	r3, #10240
 2373 0016 C4F20003 		movt	r3, 16384
 2374 001a 1A6C     		ldr	r2, [r3, #64]
 2375 001c 22EA0000 		bic	r0, r2, r0
 2376              	.LVL208:
 2377 0020 1864     		str	r0, [r3, #64]
 2378 0022 7047     		bx	lr
 2379              		.cfi_endproc
 2380              	.LFE148:
 2382              		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 2383              		.align	2
 2384              		.global	RTC_TamperFilterConfig
 2385              		.thumb
 2386              		.thumb_func
 2388              	RTC_TamperFilterConfig:
 2389              	.LFB149:
2137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2390              		.loc 1 2137 0
 2391              		.cfi_startproc
 2392              		@ args = 0, pretend = 0, frame = 0
 2393              		@ frame_needed = 0, uses_anonymous_args = 0
 2394              		@ link register save eliminated.
 2395              	.LVL209:
2142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2396              		.loc 1 2142 0
 2397 0000 4FF42053 		mov	r3, #10240
 2398 0004 C4F20003 		movt	r3, 16384
 2399 0008 1A6C     		ldr	r2, [r3, #64]
 2400 000a 22F4C052 		bic	r2, r2, #6144
 2401 000e 1A64     		str	r2, [r3, #64]
2145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2402              		.loc 1 2145 0
 2403 0010 1A6C     		ldr	r2, [r3, #64]
 2404 0012 1043     		orrs	r0, r0, r2
 2405              	.LVL210:
 2406 0014 1864     		str	r0, [r3, #64]
 2407 0016 7047     		bx	lr
 2408              		.cfi_endproc
 2409              	.LFE149:
 2411              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 2412              		.align	2
 2413              		.global	RTC_TamperSamplingFreqConfig
 2414              		.thumb
 2415              		.thumb_func
 2417              	RTC_TamperSamplingFreqConfig:
 2418              	.LFB150:
2171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2419              		.loc 1 2171 0
 2420              		.cfi_startproc
 2421              		@ args = 0, pretend = 0, frame = 0
 2422              		@ frame_needed = 0, uses_anonymous_args = 0
 2423              		@ link register save eliminated.
 2424              	.LVL211:
2176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2425              		.loc 1 2176 0
 2426 0000 4FF42053 		mov	r3, #10240
 2427 0004 C4F20003 		movt	r3, 16384
 2428 0008 1A6C     		ldr	r2, [r3, #64]
 2429 000a 22F4E062 		bic	r2, r2, #1792
 2430 000e 1A64     		str	r2, [r3, #64]
2179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2431              		.loc 1 2179 0
 2432 0010 1A6C     		ldr	r2, [r3, #64]
 2433 0012 1043     		orrs	r0, r0, r2
 2434              	.LVL212:
 2435 0014 1864     		str	r0, [r3, #64]
 2436 0016 7047     		bx	lr
 2437              		.cfi_endproc
 2438              	.LFE150:
 2440              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 2441              		.align	2
 2442              		.global	RTC_TamperPinsPrechargeDuration
 2443              		.thumb
 2444              		.thumb_func
 2446              	RTC_TamperPinsPrechargeDuration:
 2447              	.LFB151:
2194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2448              		.loc 1 2194 0
 2449              		.cfi_startproc
 2450              		@ args = 0, pretend = 0, frame = 0
 2451              		@ frame_needed = 0, uses_anonymous_args = 0
 2452              		@ link register save eliminated.
 2453              	.LVL213:
2199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2454              		.loc 1 2199 0
 2455 0000 4FF42053 		mov	r3, #10240
 2456 0004 C4F20003 		movt	r3, 16384
 2457 0008 1A6C     		ldr	r2, [r3, #64]
 2458 000a 22F4C042 		bic	r2, r2, #24576
 2459 000e 1A64     		str	r2, [r3, #64]
2202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2460              		.loc 1 2202 0
 2461 0010 1A6C     		ldr	r2, [r3, #64]
 2462 0012 1043     		orrs	r0, r0, r2
 2463              	.LVL214:
 2464 0014 1864     		str	r0, [r3, #64]
 2465 0016 7047     		bx	lr
 2466              		.cfi_endproc
 2467              	.LFE151:
 2469              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 2470              		.align	2
 2471              		.global	RTC_TimeStampOnTamperDetectionCmd
 2472              		.thumb
 2473              		.thumb_func
 2475              	RTC_TimeStampOnTamperDetectionCmd:
 2476              	.LFB152:
2214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2477              		.loc 1 2214 0
 2478              		.cfi_startproc
 2479              		@ args = 0, pretend = 0, frame = 0
 2480              		@ frame_needed = 0, uses_anonymous_args = 0
 2481              		@ link register save eliminated.
 2482              	.LVL215:
2218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2483              		.loc 1 2218 0
 2484 0000 40B1     		cbz	r0, .L137
2221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2485              		.loc 1 2221 0
 2486 0002 4FF42053 		mov	r3, #10240
 2487 0006 C4F20003 		movt	r3, 16384
 2488 000a 1A6C     		ldr	r2, [r3, #64]
 2489 000c 42F08002 		orr	r2, r2, #128
 2490 0010 1A64     		str	r2, [r3, #64]
 2491 0012 7047     		bx	lr
 2492              	.L137:
2226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2493              		.loc 1 2226 0
 2494 0014 4FF42053 		mov	r3, #10240
 2495 0018 C4F20003 		movt	r3, 16384
 2496 001c 1A6C     		ldr	r2, [r3, #64]
 2497 001e 22F08002 		bic	r2, r2, #128
 2498 0022 1A64     		str	r2, [r3, #64]
 2499 0024 7047     		bx	lr
 2500              		.cfi_endproc
 2501              	.LFE152:
 2503 0026 00BF     		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 2504              		.align	2
 2505              		.global	RTC_TamperPullUpCmd
 2506              		.thumb
 2507              		.thumb_func
 2509              	RTC_TamperPullUpCmd:
 2510              	.LFB153:
2237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2511              		.loc 1 2237 0
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 0
 2514              		@ frame_needed = 0, uses_anonymous_args = 0
 2515              		@ link register save eliminated.
 2516              	.LVL216:
2241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2517              		.loc 1 2241 0
 2518 0000 40B1     		cbz	r0, .L140
2244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2519              		.loc 1 2244 0
 2520 0002 4FF42053 		mov	r3, #10240
 2521 0006 C4F20003 		movt	r3, 16384
 2522 000a 1A6C     		ldr	r2, [r3, #64]
 2523 000c 22F40042 		bic	r2, r2, #32768
 2524 0010 1A64     		str	r2, [r3, #64]
 2525 0012 7047     		bx	lr
 2526              	.L140:
2249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 2527              		.loc 1 2249 0
 2528 0014 4FF42053 		mov	r3, #10240
 2529 0018 C4F20003 		movt	r3, 16384
 2530 001c 1A6C     		ldr	r2, [r3, #64]
 2531 001e 42F40042 		orr	r2, r2, #32768
 2532 0022 1A64     		str	r2, [r3, #64]
 2533 0024 7047     		bx	lr
 2534              		.cfi_endproc
 2535              	.LFE153:
 2537 0026 00BF     		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 2538              		.align	2
 2539              		.global	RTC_WriteBackupRegister
 2540              		.thumb
 2541              		.thumb_func
 2543              	RTC_WriteBackupRegister:
 2544              	.LFB154:
2278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2545              		.loc 1 2278 0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 8
 2548              		@ frame_needed = 0, uses_anonymous_args = 0
 2549              		@ link register save eliminated.
 2550              	.LVL217:
 2551 0000 82B0     		sub	sp, sp, #8
 2552              	.LCFI20:
 2553              		.cfi_def_cfa_offset 8
2279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2554              		.loc 1 2279 0
 2555 0002 0023     		movs	r3, #0
 2556 0004 0193     		str	r3, [sp, #4]
2284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2557              		.loc 1 2284 0
 2558 0006 42F65003 		movw	r3, #10320
 2559 000a C4F20003 		movt	r3, 16384
 2560 000e 0193     		str	r3, [sp, #4]
2285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2561              		.loc 1 2285 0
 2562 0010 019B     		ldr	r3, [sp, #4]
 2563 0012 03EB8000 		add	r0, r3, r0, lsl #2
 2564              	.LVL218:
 2565 0016 0190     		str	r0, [sp, #4]
2288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2566              		.loc 1 2288 0
 2567 0018 019B     		ldr	r3, [sp, #4]
 2568 001a 1960     		str	r1, [r3]
2289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2569              		.loc 1 2289 0
 2570 001c 02B0     		add	sp, sp, #8
 2571              		@ sp needed
 2572 001e 7047     		bx	lr
 2573              		.cfi_endproc
 2574              	.LFE154:
 2576              		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 2577              		.align	2
 2578              		.global	RTC_ReadBackupRegister
 2579              		.thumb
 2580              		.thumb_func
 2582              	RTC_ReadBackupRegister:
 2583              	.LFB155:
2299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 2584              		.loc 1 2299 0
 2585              		.cfi_startproc
 2586              		@ args = 0, pretend = 0, frame = 8
 2587              		@ frame_needed = 0, uses_anonymous_args = 0
 2588              		@ link register save eliminated.
 2589              	.LVL219:
 2590 0000 82B0     		sub	sp, sp, #8
 2591              	.LCFI21:
 2592              		.cfi_def_cfa_offset 8
2300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2593              		.loc 1 2300 0
 2594 0002 0023     		movs	r3, #0
 2595 0004 0193     		str	r3, [sp, #4]
2305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 2596              		.loc 1 2305 0
 2597 0006 42F65003 		movw	r3, #10320
 2598 000a C4F20003 		movt	r3, 16384
 2599 000e 0193     		str	r3, [sp, #4]
2306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2600              		.loc 1 2306 0
 2601 0010 019B     		ldr	r3, [sp, #4]
 2602 0012 03EB8000 		add	r0, r3, r0, lsl #2
 2603              	.LVL220:
 2604 0016 0190     		str	r0, [sp, #4]
2309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2605              		.loc 1 2309 0
 2606 0018 019B     		ldr	r3, [sp, #4]
 2607 001a 1868     		ldr	r0, [r3]
2310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2608              		.loc 1 2310 0
 2609 001c 02B0     		add	sp, sp, #8
 2610              		@ sp needed
 2611 001e 7047     		bx	lr
 2612              		.cfi_endproc
 2613              	.LFE155:
 2615              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 2616              		.align	2
 2617              		.global	RTC_TamperPinSelection
 2618              		.thumb
 2619              		.thumb_func
 2621              	RTC_TamperPinSelection:
 2622              	.LFB156:
2339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2623              		.loc 1 2339 0
 2624              		.cfi_startproc
 2625              		@ args = 0, pretend = 0, frame = 0
 2626              		@ frame_needed = 0, uses_anonymous_args = 0
 2627              		@ link register save eliminated.
 2628              	.LVL221:
2343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 2629              		.loc 1 2343 0
 2630 0000 4FF42053 		mov	r3, #10240
 2631 0004 C4F20003 		movt	r3, 16384
 2632 0008 1A6C     		ldr	r2, [r3, #64]
 2633 000a 22F48032 		bic	r2, r2, #65536
 2634 000e 1A64     		str	r2, [r3, #64]
2344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2635              		.loc 1 2344 0
 2636 0010 1A6C     		ldr	r2, [r3, #64]
 2637 0012 1043     		orrs	r0, r0, r2
 2638              	.LVL222:
 2639 0014 1864     		str	r0, [r3, #64]
 2640 0016 7047     		bx	lr
 2641              		.cfi_endproc
 2642              	.LFE156:
 2644              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 2645              		.align	2
 2646              		.global	RTC_TimeStampPinSelection
 2647              		.thumb
 2648              		.thumb_func
 2650              	RTC_TimeStampPinSelection:
 2651              	.LFB157:
2356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2652              		.loc 1 2356 0
 2653              		.cfi_startproc
 2654              		@ args = 0, pretend = 0, frame = 0
 2655              		@ frame_needed = 0, uses_anonymous_args = 0
 2656              		@ link register save eliminated.
 2657              	.LVL223:
2360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 2658              		.loc 1 2360 0
 2659 0000 4FF42053 		mov	r3, #10240
 2660 0004 C4F20003 		movt	r3, 16384
 2661 0008 1A6C     		ldr	r2, [r3, #64]
 2662 000a 22F40032 		bic	r2, r2, #131072
 2663 000e 1A64     		str	r2, [r3, #64]
2361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2664              		.loc 1 2361 0
 2665 0010 1A6C     		ldr	r2, [r3, #64]
 2666 0012 1043     		orrs	r0, r0, r2
 2667              	.LVL224:
 2668 0014 1864     		str	r0, [r3, #64]
 2669 0016 7047     		bx	lr
 2670              		.cfi_endproc
 2671              	.LFE157:
 2673              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 2674              		.align	2
 2675              		.global	RTC_OutputTypeConfig
 2676              		.thumb
 2677              		.thumb_func
 2679              	RTC_OutputTypeConfig:
 2680              	.LFB158:
2375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2681              		.loc 1 2375 0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 0
 2684              		@ frame_needed = 0, uses_anonymous_args = 0
 2685              		@ link register save eliminated.
 2686              	.LVL225:
2379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 2687              		.loc 1 2379 0
 2688 0000 4FF42053 		mov	r3, #10240
 2689 0004 C4F20003 		movt	r3, 16384
 2690 0008 1A6C     		ldr	r2, [r3, #64]
 2691 000a 22F48022 		bic	r2, r2, #262144
 2692 000e 1A64     		str	r2, [r3, #64]
2380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2693              		.loc 1 2380 0
 2694 0010 1A6C     		ldr	r2, [r3, #64]
 2695 0012 1043     		orrs	r0, r0, r2
 2696              	.LVL226:
 2697 0014 1864     		str	r0, [r3, #64]
 2698 0016 7047     		bx	lr
 2699              		.cfi_endproc
 2700              	.LFE158:
 2702              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 2703              		.align	2
 2704              		.global	RTC_SynchroShiftConfig
 2705              		.thumb
 2706              		.thumb_func
 2708              	RTC_SynchroShiftConfig:
 2709              	.LFB159:
2413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2710              		.loc 1 2413 0
 2711              		.cfi_startproc
 2712              		@ args = 0, pretend = 0, frame = 0
 2713              		@ frame_needed = 0, uses_anonymous_args = 0
 2714              	.LVL227:
 2715 0000 10B5     		push	{r4, lr}
 2716              	.LCFI22:
 2717              		.cfi_def_cfa_offset 8
 2718              		.cfi_offset 4, -8
 2719              		.cfi_offset 14, -4
 2720              	.LVL228:
2422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2721              		.loc 1 2422 0
 2722 0002 4FF42053 		mov	r3, #10240
 2723 0006 C4F20003 		movt	r3, 16384
 2724 000a CA22     		movs	r2, #202
 2725 000c 5A62     		str	r2, [r3, #36]
2423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2726              		.loc 1 2423 0
 2727 000e 5322     		movs	r2, #83
 2728 0010 5A62     		str	r2, [r3, #36]
2426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2729              		.loc 1 2426 0
 2730 0012 DB68     		ldr	r3, [r3, #12]
 2731 0014 13F0080F 		tst	r3, #8
 2732 0018 02D1     		bne	.L152
 2733 001a 0DE0     		b	.L149
 2734              	.LVL229:
 2735              	.L150:
2431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 2736              		.loc 1 2431 0
 2737 001c 0133     		adds	r3, r3, #1
 2738              	.LVL230:
 2739 001e 04E0     		b	.L148
 2740              	.LVL231:
 2741              	.L152:
 2742 0020 0023     		movs	r3, #0
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2743              		.loc 1 2429 0
 2744 0022 4FF42054 		mov	r4, #10240
 2745 0026 C4F20004 		movt	r4, 16384
 2746              	.LVL232:
 2747              	.L148:
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2748              		.loc 1 2429 0 is_stmt 0 discriminator 1
 2749 002a E268     		ldr	r2, [r4, #12]
 2750 002c 12F0080F 		tst	r2, #8
 2751 0030 02D0     		beq	.L149
2429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2752              		.loc 1 2429 0 discriminator 2
 2753 0032 B3F5805F 		cmp	r3, #4096
 2754 0036 F1D1     		bne	.L150
 2755              	.LVL233:
 2756              	.L149:
2436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2757              		.loc 1 2436 0 is_stmt 1
 2758 0038 4FF42053 		mov	r3, #10240
 2759 003c C4F20003 		movt	r3, 16384
 2760 0040 DB68     		ldr	r3, [r3, #12]
 2761 0042 13F0080F 		tst	r3, #8
2460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2762              		.loc 1 2460 0
 2763 0046 18BF     		it	ne
 2764 0048 0020     		movne	r0, #0
 2765              	.LVL234:
2436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2766              		.loc 1 2436 0
 2767 004a 15D1     		bne	.L151
2439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2768              		.loc 1 2439 0
 2769 004c 4FF42053 		mov	r3, #10240
 2770 0050 C4F20003 		movt	r3, 16384
 2771 0054 9B68     		ldr	r3, [r3, #8]
 2772 0056 13F0100F 		tst	r3, #16
2455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 2773              		.loc 1 2455 0
 2774 005a 18BF     		it	ne
 2775 005c 0020     		movne	r0, #0
2439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 2776              		.loc 1 2439 0
 2777 005e 0BD1     		bne	.L151
2442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 2778              		.loc 1 2442 0
 2779 0060 0143     		orrs	r1, r1, r0
 2780              	.LVL235:
 2781 0062 4FF42053 		mov	r3, #10240
 2782 0066 C4F20003 		movt	r3, 16384
 2783 006a D962     		str	r1, [r3, #44]
2444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 2784              		.loc 1 2444 0
 2785 006c FFF7FEFF 		bl	RTC_WaitForSynchro
 2786              	.LVL236:
2446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 2787              		.loc 1 2446 0
 2788 0070 0030     		adds	r0, r0, #0
 2789 0072 18BF     		it	ne
 2790 0074 0120     		movne	r0, #1
 2791 0076 FFE7     		b	.L151
 2792              	.L151:
 2793              	.LVL237:
2464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2794              		.loc 1 2464 0
 2795 0078 4FF42053 		mov	r3, #10240
 2796 007c C4F20003 		movt	r3, 16384
 2797 0080 FF22     		movs	r2, #255
 2798 0082 5A62     		str	r2, [r3, #36]
2467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2799              		.loc 1 2467 0
 2800 0084 10BD     		pop	{r4, pc}
 2801              		.cfi_endproc
 2802              	.LFE159:
 2804 0086 00BF     		.section	.text.RTC_ITConfig,"ax",%progbits
 2805              		.align	2
 2806              		.global	RTC_ITConfig
 2807              		.thumb
 2808              		.thumb_func
 2810              	RTC_ITConfig:
 2811              	.LFB160:
2532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2812              		.loc 1 2532 0
 2813              		.cfi_startproc
 2814              		@ args = 0, pretend = 0, frame = 0
 2815              		@ frame_needed = 0, uses_anonymous_args = 0
 2816              		@ link register save eliminated.
 2817              	.LVL238:
2538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2818              		.loc 1 2538 0
 2819 0000 4FF42053 		mov	r3, #10240
 2820 0004 C4F20003 		movt	r3, 16384
 2821 0008 CA22     		movs	r2, #202
 2822 000a 5A62     		str	r2, [r3, #36]
2539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2823              		.loc 1 2539 0
 2824 000c 5322     		movs	r2, #83
 2825 000e 5A62     		str	r2, [r3, #36]
2541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2826              		.loc 1 2541 0
 2827 0010 71B1     		cbz	r1, .L157
2544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 2828              		.loc 1 2544 0
 2829 0012 4FF42053 		mov	r3, #10240
 2830 0016 C4F20003 		movt	r3, 16384
 2831 001a 9968     		ldr	r1, [r3, #8]
 2832              	.LVL239:
 2833 001c 20F00402 		bic	r2, r0, #4
 2834 0020 0A43     		orrs	r2, r2, r1
 2835 0022 9A60     		str	r2, [r3, #8]
2546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2836              		.loc 1 2546 0
 2837 0024 1A6C     		ldr	r2, [r3, #64]
 2838 0026 00F00400 		and	r0, r0, #4
 2839              	.LVL240:
 2840 002a 1043     		orrs	r0, r0, r2
 2841 002c 1864     		str	r0, [r3, #64]
 2842 002e 0FE0     		b	.L158
 2843              	.LVL241:
 2844              	.L157:
2551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
 2845              		.loc 1 2551 0
 2846 0030 4FF42053 		mov	r3, #10240
 2847 0034 C4F20003 		movt	r3, 16384
 2848 0038 9A68     		ldr	r2, [r3, #8]
 2849 003a 20F00401 		bic	r1, r0, #4
 2850              	.LVL242:
 2851 003e 22EA0102 		bic	r2, r2, r1
 2852 0042 9A60     		str	r2, [r3, #8]
2553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2853              		.loc 1 2553 0
 2854 0044 1A6C     		ldr	r2, [r3, #64]
 2855 0046 00F00400 		and	r0, r0, #4
 2856              	.LVL243:
 2857 004a 22EA0000 		bic	r0, r2, r0
 2858 004e 1864     		str	r0, [r3, #64]
 2859              	.L158:
2556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2860              		.loc 1 2556 0
 2861 0050 4FF42053 		mov	r3, #10240
 2862 0054 C4F20003 		movt	r3, 16384
 2863 0058 FF22     		movs	r2, #255
 2864 005a 5A62     		str	r2, [r3, #36]
 2865 005c 7047     		bx	lr
 2866              		.cfi_endproc
 2867              	.LFE160:
 2869 005e 00BF     		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 2870              		.align	2
 2871              		.global	RTC_GetFlagStatus
 2872              		.thumb
 2873              		.thumb_func
 2875              	RTC_GetFlagStatus:
 2876              	.LFB161:
2578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 2877              		.loc 1 2578 0
 2878              		.cfi_startproc
 2879              		@ args = 0, pretend = 0, frame = 0
 2880              		@ frame_needed = 0, uses_anonymous_args = 0
 2881              		@ link register save eliminated.
 2882              	.LVL244:
2586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2883              		.loc 1 2586 0
 2884 0000 4FF42053 		mov	r3, #10240
 2885 0004 C4F20003 		movt	r3, 16384
 2886 0008 DB68     		ldr	r3, [r3, #12]
 2887              	.LVL245:
2589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2888              		.loc 1 2589 0
 2889 000a 1840     		ands	r0, r0, r3
 2890              	.LVL246:
 2891 000c 20F08800 		bic	r0, r0, #136
 2892 0010 8004     		lsls	r0, r0, #18
 2893 0012 800C     		lsrs	r0, r0, #18
 2894              	.LVL247:
2598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2895              		.loc 1 2598 0
 2896 0014 0030     		adds	r0, r0, #0
 2897 0016 18BF     		it	ne
 2898 0018 0120     		movne	r0, #1
 2899              	.LVL248:
 2900 001a 7047     		bx	lr
 2901              		.cfi_endproc
 2902              	.LFE161:
 2904              		.section	.text.RTC_ClearFlag,"ax",%progbits
 2905              		.align	2
 2906              		.global	RTC_ClearFlag
 2907              		.thumb
 2908              		.thumb_func
 2910              	RTC_ClearFlag:
 2911              	.LFB162:
2614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 2912              		.loc 1 2614 0
 2913              		.cfi_startproc
 2914              		@ args = 0, pretend = 0, frame = 0
 2915              		@ frame_needed = 0, uses_anonymous_args = 0
 2916              		@ link register save eliminated.
 2917              	.LVL249:
2619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2918              		.loc 1 2619 0
 2919 0000 80B2     		uxth	r0, r0
 2920              	.LVL250:
 2921 0002 40F08002 		orr	r2, r0, #128
 2922 0006 4FF42053 		mov	r3, #10240
 2923 000a C4F20003 		movt	r3, 16384
 2924 000e D968     		ldr	r1, [r3, #12]
 2925 0010 01F08001 		and	r1, r1, #128
 2926 0014 61EA0202 		orn	r2, r1, r2
 2927 0018 DA60     		str	r2, [r3, #12]
 2928 001a 7047     		bx	lr
 2929              		.cfi_endproc
 2930              	.LFE162:
 2932              		.section	.text.RTC_GetITStatus,"ax",%progbits
 2933              		.align	2
 2934              		.global	RTC_GetITStatus
 2935              		.thumb
 2936              		.thumb_func
 2938              	RTC_GetITStatus:
 2939              	.LFB163:
2634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 2940              		.loc 1 2634 0
 2941              		.cfi_startproc
 2942              		@ args = 0, pretend = 0, frame = 0
 2943              		@ frame_needed = 0, uses_anonymous_args = 0
 2944              		@ link register save eliminated.
 2945              	.LVL251:
2642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
 2946              		.loc 1 2642 0
 2947 0000 4FF42053 		mov	r3, #10240
 2948 0004 C4F20003 		movt	r3, 16384
 2949 0008 1A6C     		ldr	r2, [r3, #64]
 2950 000a 02F00402 		and	r2, r2, #4
 2951              	.LVL252:
2645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2952              		.loc 1 2645 0
 2953 000e 9968     		ldr	r1, [r3, #8]
 2954 0010 0140     		ands	r1, r1, r0
 2955 0012 02EAD032 		and	r2, r2, r0, lsr #15
 2956              	.LVL253:
2648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 2957              		.loc 1 2648 0
 2958 0016 DB68     		ldr	r3, [r3, #12]
 2959 0018 03EA1010 		and	r0, r3, r0, lsr #4
 2960              	.LVL254:
2651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2961              		.loc 1 2651 0
 2962 001c 0A43     		orrs	r2, r1, r2
 2963              	.LVL255:
 2964 001e 04D0     		beq	.L165
2651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 2965              		.loc 1 2651 0 is_stmt 0 discriminator 1
 2966 0020 80B2     		uxth	r0, r0
 2967              	.LVL256:
2657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2968              		.loc 1 2657 0 is_stmt 1 discriminator 1
 2969 0022 0030     		adds	r0, r0, #0
 2970 0024 18BF     		it	ne
 2971 0026 0120     		movne	r0, #1
 2972 0028 7047     		bx	lr
 2973              	.LVL257:
 2974              	.L165:
2657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 2975              		.loc 1 2657 0 is_stmt 0
 2976 002a 0020     		movs	r0, #0
 2977              	.LVL258:
2660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 2978              		.loc 1 2660 0 is_stmt 1
 2979 002c 7047     		bx	lr
 2980              		.cfi_endproc
 2981              	.LFE163:
 2983 002e 00BF     		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 2984              		.align	2
 2985              		.global	RTC_ClearITPendingBit
 2986              		.thumb
 2987              		.thumb_func
 2989              	RTC_ClearITPendingBit:
 2990              	.LFB164:
2674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2991              		.loc 1 2674 0
 2992              		.cfi_startproc
 2993              		@ args = 0, pretend = 0, frame = 0
 2994              		@ frame_needed = 0, uses_anonymous_args = 0
 2995              		@ link register save eliminated.
 2996              	.LVL259:
2684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2997              		.loc 1 2684 0
 2998 0000 C0F30F10 		ubfx	r0, r0, #4, #16
 2999              	.LVL260:
 3000 0004 40F08002 		orr	r2, r0, #128
 3001 0008 4FF42053 		mov	r3, #10240
 3002 000c C4F20003 		movt	r3, 16384
 3003 0010 D968     		ldr	r1, [r3, #12]
 3004 0012 01F08001 		and	r1, r1, #128
 3005 0016 61EA0202 		orn	r2, r1, r2
 3006 001a DA60     		str	r2, [r3, #12]
 3007 001c 7047     		bx	lr
 3008              		.cfi_endproc
 3009              	.LFE164:
 3011 001e 00BF     		.text
 3012              	.Letext0:
 3013              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3014              		.file 3 "/usr/include/newlib/stdint.h"
 3015              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 3016              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h"
 3017              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_rtc.c
     /tmp/ccbK2VeZ.s:20     .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccbK2VeZ.s:24     .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccbK2VeZ.s:65     .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccbK2VeZ.s:69     .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccbK2VeZ.s:94     .text.RTC_StructInit:0000000000000000 $t
     /tmp/ccbK2VeZ.s:99     .text.RTC_StructInit:0000000000000000 RTC_StructInit
     /tmp/ccbK2VeZ.s:121    .text.RTC_WriteProtectionCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:126    .text.RTC_WriteProtectionCmd:0000000000000000 RTC_WriteProtectionCmd
     /tmp/ccbK2VeZ.s:156    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccbK2VeZ.s:161    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccbK2VeZ.s:230    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccbK2VeZ.s:235    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccbK2VeZ.s:253    .text.RTC_Init:0000000000000000 $t
     /tmp/ccbK2VeZ.s:258    .text.RTC_Init:0000000000000000 RTC_Init
     /tmp/ccbK2VeZ.s:326    .text.RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccbK2VeZ.s:331    .text.RTC_WaitForSynchro:0000000000000000 RTC_WaitForSynchro
     /tmp/ccbK2VeZ.s:401    .text.RTC_DeInit:0000000000000000 $t
     /tmp/ccbK2VeZ.s:406    .text.RTC_DeInit:0000000000000000 RTC_DeInit
     /tmp/ccbK2VeZ.s:530    .text.RTC_RefClockCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:535    .text.RTC_RefClockCmd:0000000000000000 RTC_RefClockCmd
     /tmp/ccbK2VeZ.s:601    .text.RTC_BypassShadowCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:606    .text.RTC_BypassShadowCmd:0000000000000000 RTC_BypassShadowCmd
     /tmp/ccbK2VeZ.s:649    .text.RTC_SetTime:0000000000000000 $t
     /tmp/ccbK2VeZ.s:654    .text.RTC_SetTime:0000000000000000 RTC_SetTime
     /tmp/ccbK2VeZ.s:772    .text.RTC_TimeStructInit:0000000000000000 $t
     /tmp/ccbK2VeZ.s:777    .text.RTC_TimeStructInit:0000000000000000 RTC_TimeStructInit
     /tmp/ccbK2VeZ.s:799    .text.RTC_GetTime:0000000000000000 $t
     /tmp/ccbK2VeZ.s:804    .text.RTC_GetTime:0000000000000000 RTC_GetTime
     /tmp/ccbK2VeZ.s:863    .text.RTC_GetSubSecond:0000000000000000 $t
     /tmp/ccbK2VeZ.s:868    .text.RTC_GetSubSecond:0000000000000000 RTC_GetSubSecond
     /tmp/ccbK2VeZ.s:889    .text.RTC_SetDate:0000000000000000 $t
     /tmp/ccbK2VeZ.s:894    .text.RTC_SetDate:0000000000000000 RTC_SetDate
     /tmp/ccbK2VeZ.s:1015   .text.RTC_DateStructInit:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1020   .text.RTC_DateStructInit:0000000000000000 RTC_DateStructInit
     /tmp/ccbK2VeZ.s:1043   .text.RTC_GetDate:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1048   .text.RTC_GetDate:0000000000000000 RTC_GetDate
     /tmp/ccbK2VeZ.s:1106   .text.RTC_SetAlarm:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1111   .text.RTC_SetAlarm:0000000000000000 RTC_SetAlarm
     /tmp/ccbK2VeZ.s:1237   .text.RTC_AlarmStructInit:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1242   .text.RTC_AlarmStructInit:0000000000000000 RTC_AlarmStructInit
     /tmp/ccbK2VeZ.s:1271   .text.RTC_GetAlarm:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1276   .text.RTC_GetAlarm:0000000000000000 RTC_GetAlarm
     /tmp/ccbK2VeZ.s:1359   .text.RTC_AlarmCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1364   .text.RTC_AlarmCmd:0000000000000000 RTC_AlarmCmd
     /tmp/ccbK2VeZ.s:1460   .text.RTC_AlarmSubSecondConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1465   .text.RTC_AlarmSubSecondConfig:0000000000000000 RTC_AlarmSubSecondConfig
     /tmp/ccbK2VeZ.s:1511   .text.RTC_GetAlarmSubSecond:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1516   .text.RTC_GetAlarmSubSecond:0000000000000000 RTC_GetAlarmSubSecond
     /tmp/ccbK2VeZ.s:1542   .text.RTC_WakeUpClockConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1547   .text.RTC_WakeUpClockConfig:0000000000000000 RTC_WakeUpClockConfig
     /tmp/ccbK2VeZ.s:1580   .text.RTC_SetWakeUpCounter:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1585   .text.RTC_SetWakeUpCounter:0000000000000000 RTC_SetWakeUpCounter
     /tmp/ccbK2VeZ.s:1611   .text.RTC_GetWakeUpCounter:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1616   .text.RTC_GetWakeUpCounter:0000000000000000 RTC_GetWakeUpCounter
     /tmp/ccbK2VeZ.s:1634   .text.RTC_WakeUpCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1639   .text.RTC_WakeUpCmd:0000000000000000 RTC_WakeUpCmd
     /tmp/ccbK2VeZ.s:1728   .text.RTC_DayLightSavingConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1733   .text.RTC_DayLightSavingConfig:0000000000000000 RTC_DayLightSavingConfig
     /tmp/ccbK2VeZ.s:1767   .text.RTC_GetStoreOperation:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1772   .text.RTC_GetStoreOperation:0000000000000000 RTC_GetStoreOperation
     /tmp/ccbK2VeZ.s:1790   .text.RTC_OutputConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1795   .text.RTC_OutputConfig:0000000000000000 RTC_OutputConfig
     /tmp/ccbK2VeZ.s:1829   .text.RTC_CoarseCalibConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1834   .text.RTC_CoarseCalibConfig:0000000000000000 RTC_CoarseCalibConfig
     /tmp/ccbK2VeZ.s:1892   .text.RTC_CoarseCalibCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1897   .text.RTC_CoarseCalibCmd:0000000000000000 RTC_CoarseCalibCmd
     /tmp/ccbK2VeZ.s:1963   .text.RTC_CalibOutputCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:1968   .text.RTC_CalibOutputCmd:0000000000000000 RTC_CalibOutputCmd
     /tmp/ccbK2VeZ.s:2011   .text.RTC_CalibOutputConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2016   .text.RTC_CalibOutputConfig:0000000000000000 RTC_CalibOutputConfig
     /tmp/ccbK2VeZ.s:2049   .text.RTC_SmoothCalibConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2054   .text.RTC_SmoothCalibConfig:0000000000000000 RTC_SmoothCalibConfig
     /tmp/ccbK2VeZ.s:2137   .text.RTC_TimeStampCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2142   .text.RTC_TimeStampCmd:0000000000000000 RTC_TimeStampCmd
     /tmp/ccbK2VeZ.s:2189   .text.RTC_GetTimeStamp:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2194   .text.RTC_GetTimeStamp:0000000000000000 RTC_GetTimeStamp
     /tmp/ccbK2VeZ.s:2287   .text.RTC_GetTimeStampSubSecond:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2292   .text.RTC_GetTimeStampSubSecond:0000000000000000 RTC_GetTimeStampSubSecond
     /tmp/ccbK2VeZ.s:2309   .text.RTC_TamperTriggerConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2314   .text.RTC_TamperTriggerConfig:0000000000000000 RTC_TamperTriggerConfig
     /tmp/ccbK2VeZ.s:2346   .text.RTC_TamperCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2351   .text.RTC_TamperCmd:0000000000000000 RTC_TamperCmd
     /tmp/ccbK2VeZ.s:2383   .text.RTC_TamperFilterConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2388   .text.RTC_TamperFilterConfig:0000000000000000 RTC_TamperFilterConfig
     /tmp/ccbK2VeZ.s:2412   .text.RTC_TamperSamplingFreqConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2417   .text.RTC_TamperSamplingFreqConfig:0000000000000000 RTC_TamperSamplingFreqConfig
     /tmp/ccbK2VeZ.s:2441   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2446   .text.RTC_TamperPinsPrechargeDuration:0000000000000000 RTC_TamperPinsPrechargeDuration
     /tmp/ccbK2VeZ.s:2470   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2475   .text.RTC_TimeStampOnTamperDetectionCmd:0000000000000000 RTC_TimeStampOnTamperDetectionCmd
     /tmp/ccbK2VeZ.s:2504   .text.RTC_TamperPullUpCmd:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2509   .text.RTC_TamperPullUpCmd:0000000000000000 RTC_TamperPullUpCmd
     /tmp/ccbK2VeZ.s:2538   .text.RTC_WriteBackupRegister:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2543   .text.RTC_WriteBackupRegister:0000000000000000 RTC_WriteBackupRegister
     /tmp/ccbK2VeZ.s:2577   .text.RTC_ReadBackupRegister:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2582   .text.RTC_ReadBackupRegister:0000000000000000 RTC_ReadBackupRegister
     /tmp/ccbK2VeZ.s:2616   .text.RTC_TamperPinSelection:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2621   .text.RTC_TamperPinSelection:0000000000000000 RTC_TamperPinSelection
     /tmp/ccbK2VeZ.s:2645   .text.RTC_TimeStampPinSelection:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2650   .text.RTC_TimeStampPinSelection:0000000000000000 RTC_TimeStampPinSelection
     /tmp/ccbK2VeZ.s:2674   .text.RTC_OutputTypeConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2679   .text.RTC_OutputTypeConfig:0000000000000000 RTC_OutputTypeConfig
     /tmp/ccbK2VeZ.s:2703   .text.RTC_SynchroShiftConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2708   .text.RTC_SynchroShiftConfig:0000000000000000 RTC_SynchroShiftConfig
     /tmp/ccbK2VeZ.s:2805   .text.RTC_ITConfig:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2810   .text.RTC_ITConfig:0000000000000000 RTC_ITConfig
     /tmp/ccbK2VeZ.s:2870   .text.RTC_GetFlagStatus:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2875   .text.RTC_GetFlagStatus:0000000000000000 RTC_GetFlagStatus
     /tmp/ccbK2VeZ.s:2905   .text.RTC_ClearFlag:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2910   .text.RTC_ClearFlag:0000000000000000 RTC_ClearFlag
     /tmp/ccbK2VeZ.s:2933   .text.RTC_GetITStatus:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2938   .text.RTC_GetITStatus:0000000000000000 RTC_GetITStatus
     /tmp/ccbK2VeZ.s:2984   .text.RTC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccbK2VeZ.s:2989   .text.RTC_ClearITPendingBit:0000000000000000 RTC_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.127.d971ab18652a46b4e6f2fc10767eacb7

NO UNDEFINED SYMBOLS
