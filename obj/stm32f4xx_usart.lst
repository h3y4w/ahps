   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	USART_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	USART_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  28              		.loc 1 179 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 8
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 82B0     		sub	sp, sp, #8
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 16
  40 0004 00AF     		add	r7, sp, #0
  41              	.LCFI2:
  42              		.cfi_def_cfa_register 7
  43 0006 7860     		str	r0, [r7, #4]
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  44              		.loc 1 183 0
  45 0008 7A68     		ldr	r2, [r7, #4]
  46 000a 4FF48053 		mov	r3, #4096
  47 000e C4F20103 		movt	r3, 16385
  48 0012 9A42     		cmp	r2, r3
  49 0014 08D1     		bne	.L2
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  50              		.loc 1 185 0
  51 0016 1020     		movs	r0, #16
  52 0018 0121     		movs	r1, #1
  53 001a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  54              		.loc 1 186 0
  55 001e 1020     		movs	r0, #16
  56 0020 0021     		movs	r1, #0
  57 0022 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  58 0026 56E0     		b	.L1
  59              	.L2:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  60              		.loc 1 188 0
  61 0028 7A68     		ldr	r2, [r7, #4]
  62 002a 4FF48843 		mov	r3, #17408
  63 002e C4F20003 		movt	r3, 16384
  64 0032 9A42     		cmp	r2, r3
  65 0034 0AD1     		bne	.L4
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  66              		.loc 1 190 0
  67 0036 4FF40030 		mov	r0, #131072
  68 003a 0121     		movs	r1, #1
  69 003c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  70              		.loc 1 191 0
  71 0040 4FF40030 		mov	r0, #131072
  72 0044 0021     		movs	r1, #0
  73 0046 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  74 004a 44E0     		b	.L1
  75              	.L4:
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  76              		.loc 1 193 0
  77 004c 7A68     		ldr	r2, [r7, #4]
  78 004e 4FF49043 		mov	r3, #18432
  79 0052 C4F20003 		movt	r3, 16384
  80 0056 9A42     		cmp	r2, r3
  81 0058 0AD1     		bne	.L5
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  82              		.loc 1 195 0
  83 005a 4FF48020 		mov	r0, #262144
  84 005e 0121     		movs	r1, #1
  85 0060 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  86              		.loc 1 196 0
  87 0064 4FF48020 		mov	r0, #262144
  88 0068 0021     		movs	r1, #0
  89 006a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  90 006e 32E0     		b	.L1
  91              	.L5:
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  92              		.loc 1 198 0
  93 0070 7A68     		ldr	r2, [r7, #4]
  94 0072 4FF49843 		mov	r3, #19456
  95 0076 C4F20003 		movt	r3, 16384
  96 007a 9A42     		cmp	r2, r3
  97 007c 0AD1     		bne	.L6
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
  98              		.loc 1 200 0
  99 007e 4FF40020 		mov	r0, #524288
 100 0082 0121     		movs	r1, #1
 101 0084 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 102              		.loc 1 201 0
 103 0088 4FF40020 		mov	r0, #524288
 104 008c 0021     		movs	r1, #0
 105 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 106 0092 20E0     		b	.L1
 107              	.L6:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 108              		.loc 1 203 0
 109 0094 7A68     		ldr	r2, [r7, #4]
 110 0096 4FF4A043 		mov	r3, #20480
 111 009a C4F20003 		movt	r3, 16384
 112 009e 9A42     		cmp	r2, r3
 113 00a0 0AD1     		bne	.L7
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 114              		.loc 1 205 0
 115 00a2 4FF48010 		mov	r0, #1048576
 116 00a6 0121     		movs	r1, #1
 117 00a8 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 118              		.loc 1 206 0
 119 00ac 4FF48010 		mov	r0, #1048576
 120 00b0 0021     		movs	r1, #0
 121 00b2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 122 00b6 0EE0     		b	.L1
 123              	.L7:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 124              		.loc 1 210 0
 125 00b8 7A68     		ldr	r2, [r7, #4]
 126 00ba 4FF4A053 		mov	r3, #5120
 127 00be C4F20103 		movt	r3, 16385
 128 00c2 9A42     		cmp	r2, r3
 129 00c4 07D1     		bne	.L1
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 130              		.loc 1 212 0
 131 00c6 2020     		movs	r0, #32
 132 00c8 0121     		movs	r1, #1
 133 00ca FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 134              		.loc 1 213 0
 135 00ce 2020     		movs	r0, #32
 136 00d0 0021     		movs	r1, #0
 137 00d2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 138              	.L1:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 139              		.loc 1 216 0
 140 00d6 0837     		adds	r7, r7, #8
 141 00d8 BD46     		mov	sp, r7
 142              		@ sp needed
 143 00da 80BD     		pop	{r7, pc}
 144              		.cfi_endproc
 145              	.LFE110:
 147              		.section	.text.USART_Init,"ax",%progbits
 148              		.align	2
 149              		.global	USART_Init
 150              		.thumb
 151              		.thumb_func
 153              	USART_Init:
 154              	.LFB111:
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 155              		.loc 1 228 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 40
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              	.LCFI3:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 7, -8
 163              		.cfi_offset 14, -4
 164 0002 8AB0     		sub	sp, sp, #40
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 48
 167 0004 00AF     		add	r7, sp, #0
 168              	.LCFI5:
 169              		.cfi_def_cfa_register 7
 170 0006 7860     		str	r0, [r7, #4]
 171 0008 3960     		str	r1, [r7]
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 172              		.loc 1 229 0
 173 000a 0023     		movs	r3, #0
 174 000c 7B62     		str	r3, [r7, #36]
 175 000e 0023     		movs	r3, #0
 176 0010 3B62     		str	r3, [r7, #32]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 177              		.loc 1 230 0
 178 0012 0023     		movs	r3, #0
 179 0014 FB61     		str	r3, [r7, #28]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 180              		.loc 1 231 0
 181 0016 0023     		movs	r3, #0
 182 0018 BB61     		str	r3, [r7, #24]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 183              		.loc 1 250 0
 184 001a 7B68     		ldr	r3, [r7, #4]
 185 001c 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 186 001e 9BB2     		uxth	r3, r3
 187 0020 7B62     		str	r3, [r7, #36]
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 188              		.loc 1 253 0
 189 0022 7B6A     		ldr	r3, [r7, #36]
 190 0024 23F44053 		bic	r3, r3, #12288
 191 0028 7B62     		str	r3, [r7, #36]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 192              		.loc 1 257 0
 193 002a 3B68     		ldr	r3, [r7]
 194 002c DB88     		ldrh	r3, [r3, #6]
 195 002e 7A6A     		ldr	r2, [r7, #36]
 196 0030 1343     		orrs	r3, r3, r2
 197 0032 7B62     		str	r3, [r7, #36]
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 198              		.loc 1 260 0
 199 0034 7B6A     		ldr	r3, [r7, #36]
 200 0036 9AB2     		uxth	r2, r3
 201 0038 7B68     		ldr	r3, [r7, #4]
 202 003a 1A82     		strh	r2, [r3, #16]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 203              		.loc 1 263 0
 204 003c 7B68     		ldr	r3, [r7, #4]
 205 003e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 206 0040 9BB2     		uxth	r3, r3
 207 0042 7B62     		str	r3, [r7, #36]
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 208              		.loc 1 266 0
 209 0044 7B6A     		ldr	r3, [r7, #36]
 210 0046 23F4B053 		bic	r3, r3, #5632
 211 004a 23F00C03 		bic	r3, r3, #12
 212 004e 7B62     		str	r3, [r7, #36]
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 213              		.loc 1 272 0
 214 0050 3B68     		ldr	r3, [r7]
 215 0052 9A88     		ldrh	r2, [r3, #4]
 216 0054 3B68     		ldr	r3, [r7]
 217 0056 1B89     		ldrh	r3, [r3, #8]
 218 0058 1343     		orrs	r3, r3, r2
 219 005a 9AB2     		uxth	r2, r3
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 220              		.loc 1 273 0
 221 005c 3B68     		ldr	r3, [r7]
 222 005e 5B89     		ldrh	r3, [r3, #10]
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 223              		.loc 1 272 0
 224 0060 1343     		orrs	r3, r3, r2
 225 0062 9BB2     		uxth	r3, r3
 226 0064 7A6A     		ldr	r2, [r7, #36]
 227 0066 1343     		orrs	r3, r3, r2
 228 0068 7B62     		str	r3, [r7, #36]
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 229              		.loc 1 276 0
 230 006a 7B6A     		ldr	r3, [r7, #36]
 231 006c 9AB2     		uxth	r2, r3
 232 006e 7B68     		ldr	r3, [r7, #4]
 233 0070 9A81     		strh	r2, [r3, #12]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 234              		.loc 1 279 0
 235 0072 7B68     		ldr	r3, [r7, #4]
 236 0074 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 237 0076 9BB2     		uxth	r3, r3
 238 0078 7B62     		str	r3, [r7, #36]
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 239              		.loc 1 282 0
 240 007a 7B6A     		ldr	r3, [r7, #36]
 241 007c 23F44073 		bic	r3, r3, #768
 242 0080 7B62     		str	r3, [r7, #36]
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 243              		.loc 1 286 0
 244 0082 3B68     		ldr	r3, [r7]
 245 0084 9B89     		ldrh	r3, [r3, #12]
 246 0086 7A6A     		ldr	r2, [r7, #36]
 247 0088 1343     		orrs	r3, r3, r2
 248 008a 7B62     		str	r3, [r7, #36]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 249              		.loc 1 289 0
 250 008c 7B6A     		ldr	r3, [r7, #36]
 251 008e 9AB2     		uxth	r2, r3
 252 0090 7B68     		ldr	r3, [r7, #4]
 253 0092 9A82     		strh	r2, [r3, #20]	@ movhi
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 254              		.loc 1 293 0
 255 0094 07F10803 		add	r3, r7, #8
 256 0098 1846     		mov	r0, r3
 257 009a FFF7FEFF 		bl	RCC_GetClocksFreq
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 258              		.loc 1 295 0
 259 009e 7A68     		ldr	r2, [r7, #4]
 260 00a0 4FF48053 		mov	r3, #4096
 261 00a4 C4F20103 		movt	r3, 16385
 262 00a8 9A42     		cmp	r2, r3
 263 00aa 06D0     		beq	.L9
 264              		.loc 1 295 0 is_stmt 0 discriminator 1
 265 00ac 7A68     		ldr	r2, [r7, #4]
 266 00ae 4FF4A053 		mov	r3, #5120
 267 00b2 C4F20103 		movt	r3, 16385
 268 00b6 9A42     		cmp	r2, r3
 269 00b8 02D1     		bne	.L10
 270              	.L9:
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 271              		.loc 1 297 0 is_stmt 1
 272 00ba 7B69     		ldr	r3, [r7, #20]
 273 00bc 3B62     		str	r3, [r7, #32]
 274 00be 01E0     		b	.L11
 275              	.L10:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 276              		.loc 1 301 0
 277 00c0 3B69     		ldr	r3, [r7, #16]
 278 00c2 3B62     		str	r3, [r7, #32]
 279              	.L11:
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 280              		.loc 1 305 0
 281 00c4 7B68     		ldr	r3, [r7, #4]
 282 00c6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 283 00c8 9BB2     		uxth	r3, r3
 284 00ca 9BB2     		uxth	r3, r3
 285 00cc 1BB2     		sxth	r3, r3
 286 00ce 002B     		cmp	r3, #0
 287 00d0 0CDA     		bge	.L12
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 288              		.loc 1 308 0
 289 00d2 3A6A     		ldr	r2, [r7, #32]
 290 00d4 1346     		mov	r3, r2
 291 00d6 9B00     		lsls	r3, r3, #2
 292 00d8 1344     		add	r3, r3, r2
 293 00da 9A00     		lsls	r2, r3, #2
 294 00dc 1A44     		add	r2, r2, r3
 295 00de 3B68     		ldr	r3, [r7]
 296 00e0 1B68     		ldr	r3, [r3]
 297 00e2 5B00     		lsls	r3, r3, #1
 298 00e4 B2FBF3F3 		udiv	r3, r2, r3
 299 00e8 FB61     		str	r3, [r7, #28]
 300 00ea 0BE0     		b	.L13
 301              	.L12:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 302              		.loc 1 313 0
 303 00ec 3A6A     		ldr	r2, [r7, #32]
 304 00ee 1346     		mov	r3, r2
 305 00f0 9B00     		lsls	r3, r3, #2
 306 00f2 1344     		add	r3, r3, r2
 307 00f4 9A00     		lsls	r2, r3, #2
 308 00f6 1A44     		add	r2, r2, r3
 309 00f8 3B68     		ldr	r3, [r7]
 310 00fa 1B68     		ldr	r3, [r3]
 311 00fc 9B00     		lsls	r3, r3, #2
 312 00fe B2FBF3F3 		udiv	r3, r2, r3
 313 0102 FB61     		str	r3, [r7, #28]
 314              	.L13:
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 315              		.loc 1 315 0
 316 0104 FA69     		ldr	r2, [r7, #28]
 317 0106 48F21F53 		movw	r3, #34079
 318 010a C5F2EB13 		movt	r3, 20971
 319 010e A3FB0213 		umull	r1, r3, r3, r2
 320 0112 5B09     		lsrs	r3, r3, #5
 321 0114 1B01     		lsls	r3, r3, #4
 322 0116 7B62     		str	r3, [r7, #36]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 323              		.loc 1 318 0
 324 0118 7B6A     		ldr	r3, [r7, #36]
 325 011a 1B09     		lsrs	r3, r3, #4
 326 011c 6422     		movs	r2, #100
 327 011e 02FB03F3 		mul	r3, r2, r3
 328 0122 FA69     		ldr	r2, [r7, #28]
 329 0124 D31A     		subs	r3, r2, r3
 330 0126 BB61     		str	r3, [r7, #24]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 331              		.loc 1 321 0
 332 0128 7B68     		ldr	r3, [r7, #4]
 333 012a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 334 012c 9BB2     		uxth	r3, r3
 335 012e 9BB2     		uxth	r3, r3
 336 0130 1BB2     		sxth	r3, r3
 337 0132 002B     		cmp	r3, #0
 338 0134 10DA     		bge	.L14
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 339              		.loc 1 323 0
 340 0136 BB69     		ldr	r3, [r7, #24]
 341 0138 DB00     		lsls	r3, r3, #3
 342 013a 03F13202 		add	r2, r3, #50
 343 013e 48F21F53 		movw	r3, #34079
 344 0142 C5F2EB13 		movt	r3, 20971
 345 0146 A3FB0213 		umull	r1, r3, r3, r2
 346 014a 5B09     		lsrs	r3, r3, #5
 347 014c 03F00703 		and	r3, r3, #7
 348 0150 7A6A     		ldr	r2, [r7, #36]
 349 0152 1343     		orrs	r3, r3, r2
 350 0154 7B62     		str	r3, [r7, #36]
 351 0156 0FE0     		b	.L15
 352              	.L14:
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 353              		.loc 1 327 0
 354 0158 BB69     		ldr	r3, [r7, #24]
 355 015a 1B01     		lsls	r3, r3, #4
 356 015c 03F13202 		add	r2, r3, #50
 357 0160 48F21F53 		movw	r3, #34079
 358 0164 C5F2EB13 		movt	r3, 20971
 359 0168 A3FB0213 		umull	r1, r3, r3, r2
 360 016c 5B09     		lsrs	r3, r3, #5
 361 016e 03F00F03 		and	r3, r3, #15
 362 0172 7A6A     		ldr	r2, [r7, #36]
 363 0174 1343     		orrs	r3, r3, r2
 364 0176 7B62     		str	r3, [r7, #36]
 365              	.L15:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 366              		.loc 1 331 0
 367 0178 7B6A     		ldr	r3, [r7, #36]
 368 017a 9AB2     		uxth	r2, r3
 369 017c 7B68     		ldr	r3, [r7, #4]
 370 017e 1A81     		strh	r2, [r3, #8]	@ movhi
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 371              		.loc 1 332 0
 372 0180 2837     		adds	r7, r7, #40
 373 0182 BD46     		mov	sp, r7
 374              		@ sp needed
 375 0184 80BD     		pop	{r7, pc}
 376              		.cfi_endproc
 377              	.LFE111:
 379 0186 00BF     		.section	.text.USART_StructInit,"ax",%progbits
 380              		.align	2
 381              		.global	USART_StructInit
 382              		.thumb
 383              		.thumb_func
 385              	USART_StructInit:
 386              	.LFB112:
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 387              		.loc 1 341 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 8
 390              		@ frame_needed = 1, uses_anonymous_args = 0
 391              		@ link register save eliminated.
 392 0000 80B4     		push	{r7}
 393              	.LCFI6:
 394              		.cfi_def_cfa_offset 4
 395              		.cfi_offset 7, -4
 396 0002 83B0     		sub	sp, sp, #12
 397              	.LCFI7:
 398              		.cfi_def_cfa_offset 16
 399 0004 00AF     		add	r7, sp, #0
 400              	.LCFI8:
 401              		.cfi_def_cfa_register 7
 402 0006 7860     		str	r0, [r7, #4]
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 403              		.loc 1 343 0
 404 0008 7B68     		ldr	r3, [r7, #4]
 405 000a 4FF41652 		mov	r2, #9600
 406 000e 1A60     		str	r2, [r3]
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 407              		.loc 1 344 0
 408 0010 7B68     		ldr	r3, [r7, #4]
 409 0012 0022     		movs	r2, #0
 410 0014 9A80     		strh	r2, [r3, #4]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 411              		.loc 1 345 0
 412 0016 7B68     		ldr	r3, [r7, #4]
 413 0018 0022     		movs	r2, #0
 414 001a DA80     		strh	r2, [r3, #6]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 415              		.loc 1 346 0
 416 001c 7B68     		ldr	r3, [r7, #4]
 417 001e 0022     		movs	r2, #0
 418 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 419              		.loc 1 347 0
 420 0022 7B68     		ldr	r3, [r7, #4]
 421 0024 0C22     		movs	r2, #12
 422 0026 5A81     		strh	r2, [r3, #10]	@ movhi
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 423              		.loc 1 348 0
 424 0028 7B68     		ldr	r3, [r7, #4]
 425 002a 0022     		movs	r2, #0
 426 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 427              		.loc 1 349 0
 428 002e 0C37     		adds	r7, r7, #12
 429 0030 BD46     		mov	sp, r7
 430              		@ sp needed
 431 0032 5DF8047B 		ldr	r7, [sp], #4
 432 0036 7047     		bx	lr
 433              		.cfi_endproc
 434              	.LFE112:
 436              		.section	.text.USART_ClockInit,"ax",%progbits
 437              		.align	2
 438              		.global	USART_ClockInit
 439              		.thumb
 440              		.thumb_func
 442              	USART_ClockInit:
 443              	.LFB113:
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 444              		.loc 1 361 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 16
 447              		@ frame_needed = 1, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449 0000 80B4     		push	{r7}
 450              	.LCFI9:
 451              		.cfi_def_cfa_offset 4
 452              		.cfi_offset 7, -4
 453 0002 85B0     		sub	sp, sp, #20
 454              	.LCFI10:
 455              		.cfi_def_cfa_offset 24
 456 0004 00AF     		add	r7, sp, #0
 457              	.LCFI11:
 458              		.cfi_def_cfa_register 7
 459 0006 7860     		str	r0, [r7, #4]
 460 0008 3960     		str	r1, [r7]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 461              		.loc 1 362 0
 462 000a 0023     		movs	r3, #0
 463 000c FB60     		str	r3, [r7, #12]
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 464              		.loc 1 371 0
 465 000e 7B68     		ldr	r3, [r7, #4]
 466 0010 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 467 0012 9BB2     		uxth	r3, r3
 468 0014 FB60     		str	r3, [r7, #12]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 469              		.loc 1 373 0
 470 0016 FB68     		ldr	r3, [r7, #12]
 471 0018 23F47063 		bic	r3, r3, #3840
 472 001c FB60     		str	r3, [r7, #12]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 473              		.loc 1 379 0
 474 001e 3B68     		ldr	r3, [r7]
 475 0020 1A88     		ldrh	r2, [r3]
 476 0022 3B68     		ldr	r3, [r7]
 477 0024 5B88     		ldrh	r3, [r3, #2]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 478              		.loc 1 380 0
 479 0026 1343     		orrs	r3, r3, r2
 480 0028 9AB2     		uxth	r2, r3
 481 002a 3B68     		ldr	r3, [r7]
 482 002c 9B88     		ldrh	r3, [r3, #4]
 483 002e 1343     		orrs	r3, r3, r2
 484 0030 9AB2     		uxth	r2, r3
 485 0032 3B68     		ldr	r3, [r7]
 486 0034 DB88     		ldrh	r3, [r3, #6]
 487 0036 1343     		orrs	r3, r3, r2
 488 0038 9BB2     		uxth	r3, r3
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 489              		.loc 1 379 0
 490 003a FA68     		ldr	r2, [r7, #12]
 491 003c 1343     		orrs	r3, r3, r2
 492 003e FB60     		str	r3, [r7, #12]
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 493              		.loc 1 382 0
 494 0040 FB68     		ldr	r3, [r7, #12]
 495 0042 9AB2     		uxth	r2, r3
 496 0044 7B68     		ldr	r3, [r7, #4]
 497 0046 1A82     		strh	r2, [r3, #16]	@ movhi
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 498              		.loc 1 383 0
 499 0048 1437     		adds	r7, r7, #20
 500 004a BD46     		mov	sp, r7
 501              		@ sp needed
 502 004c 5DF8047B 		ldr	r7, [sp], #4
 503 0050 7047     		bx	lr
 504              		.cfi_endproc
 505              	.LFE113:
 507 0052 00BF     		.section	.text.USART_ClockStructInit,"ax",%progbits
 508              		.align	2
 509              		.global	USART_ClockStructInit
 510              		.thumb
 511              		.thumb_func
 513              	USART_ClockStructInit:
 514              	.LFB114:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 515              		.loc 1 392 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 8
 518              		@ frame_needed = 1, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520 0000 80B4     		push	{r7}
 521              	.LCFI12:
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 0002 83B0     		sub	sp, sp, #12
 525              	.LCFI13:
 526              		.cfi_def_cfa_offset 16
 527 0004 00AF     		add	r7, sp, #0
 528              	.LCFI14:
 529              		.cfi_def_cfa_register 7
 530 0006 7860     		str	r0, [r7, #4]
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 531              		.loc 1 394 0
 532 0008 7B68     		ldr	r3, [r7, #4]
 533 000a 0022     		movs	r2, #0
 534 000c 1A80     		strh	r2, [r3]	@ movhi
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 535              		.loc 1 395 0
 536 000e 7B68     		ldr	r3, [r7, #4]
 537 0010 0022     		movs	r2, #0
 538 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 539              		.loc 1 396 0
 540 0014 7B68     		ldr	r3, [r7, #4]
 541 0016 0022     		movs	r2, #0
 542 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 543              		.loc 1 397 0
 544 001a 7B68     		ldr	r3, [r7, #4]
 545 001c 0022     		movs	r2, #0
 546 001e DA80     		strh	r2, [r3, #6]	@ movhi
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 547              		.loc 1 398 0
 548 0020 0C37     		adds	r7, r7, #12
 549 0022 BD46     		mov	sp, r7
 550              		@ sp needed
 551 0024 5DF8047B 		ldr	r7, [sp], #4
 552 0028 7047     		bx	lr
 553              		.cfi_endproc
 554              	.LFE114:
 556 002a 00BF     		.section	.text.USART_Cmd,"ax",%progbits
 557              		.align	2
 558              		.global	USART_Cmd
 559              		.thumb
 560              		.thumb_func
 562              	USART_Cmd:
 563              	.LFB115:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 564              		.loc 1 409 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 8
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568              		@ link register save eliminated.
 569 0000 80B4     		push	{r7}
 570              	.LCFI15:
 571              		.cfi_def_cfa_offset 4
 572              		.cfi_offset 7, -4
 573 0002 83B0     		sub	sp, sp, #12
 574              	.LCFI16:
 575              		.cfi_def_cfa_offset 16
 576 0004 00AF     		add	r7, sp, #0
 577              	.LCFI17:
 578              		.cfi_def_cfa_register 7
 579 0006 7860     		str	r0, [r7, #4]
 580 0008 0B46     		mov	r3, r1
 581 000a FB70     		strb	r3, [r7, #3]
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 582              		.loc 1 414 0
 583 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 584 000e 002B     		cmp	r3, #0
 585 0010 08D0     		beq	.L20
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 586              		.loc 1 417 0
 587 0012 7B68     		ldr	r3, [r7, #4]
 588 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 589 0016 9BB2     		uxth	r3, r3
 590 0018 43F40053 		orr	r3, r3, #8192
 591 001c 9AB2     		uxth	r2, r3
 592 001e 7B68     		ldr	r3, [r7, #4]
 593 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 594 0022 07E0     		b	.L19
 595              	.L20:
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 596              		.loc 1 422 0
 597 0024 7B68     		ldr	r3, [r7, #4]
 598 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 599 0028 9BB2     		uxth	r3, r3
 600 002a 23F40053 		bic	r3, r3, #8192
 601 002e 9AB2     		uxth	r2, r3
 602 0030 7B68     		ldr	r3, [r7, #4]
 603 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 604              	.L19:
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 605              		.loc 1 424 0
 606 0034 0C37     		adds	r7, r7, #12
 607 0036 BD46     		mov	sp, r7
 608              		@ sp needed
 609 0038 5DF8047B 		ldr	r7, [sp], #4
 610 003c 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE115:
 614 003e 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 615              		.align	2
 616              		.global	USART_SetPrescaler
 617              		.thumb
 618              		.thumb_func
 620              	USART_SetPrescaler:
 621              	.LFB116:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 622              		.loc 1 435 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 8
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627 0000 80B4     		push	{r7}
 628              	.LCFI18:
 629              		.cfi_def_cfa_offset 4
 630              		.cfi_offset 7, -4
 631 0002 83B0     		sub	sp, sp, #12
 632              	.LCFI19:
 633              		.cfi_def_cfa_offset 16
 634 0004 00AF     		add	r7, sp, #0
 635              	.LCFI20:
 636              		.cfi_def_cfa_register 7
 637 0006 7860     		str	r0, [r7, #4]
 638 0008 0B46     		mov	r3, r1
 639 000a FB70     		strb	r3, [r7, #3]
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 640              		.loc 1 440 0
 641 000c 7B68     		ldr	r3, [r7, #4]
 642 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 643 0010 9BB2     		uxth	r3, r3
 644 0012 23F0FF03 		bic	r3, r3, #255
 645 0016 9AB2     		uxth	r2, r3
 646 0018 7B68     		ldr	r3, [r7, #4]
 647 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 648              		.loc 1 442 0
 649 001c 7B68     		ldr	r3, [r7, #4]
 650 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 651 0020 9AB2     		uxth	r2, r3
 652 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 653 0024 9BB2     		uxth	r3, r3
 654 0026 1343     		orrs	r3, r3, r2
 655 0028 9AB2     		uxth	r2, r3
 656 002a 7B68     		ldr	r3, [r7, #4]
 657 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 658              		.loc 1 443 0
 659 002e 0C37     		adds	r7, r7, #12
 660 0030 BD46     		mov	sp, r7
 661              		@ sp needed
 662 0032 5DF8047B 		ldr	r7, [sp], #4
 663 0036 7047     		bx	lr
 664              		.cfi_endproc
 665              	.LFE116:
 667              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 668              		.align	2
 669              		.global	USART_OverSampling8Cmd
 670              		.thumb
 671              		.thumb_func
 673              	USART_OverSampling8Cmd:
 674              	.LFB117:
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 675              		.loc 1 456 0
 676              		.cfi_startproc
 677              		@ args = 0, pretend = 0, frame = 8
 678              		@ frame_needed = 1, uses_anonymous_args = 0
 679              		@ link register save eliminated.
 680 0000 80B4     		push	{r7}
 681              	.LCFI21:
 682              		.cfi_def_cfa_offset 4
 683              		.cfi_offset 7, -4
 684 0002 83B0     		sub	sp, sp, #12
 685              	.LCFI22:
 686              		.cfi_def_cfa_offset 16
 687 0004 00AF     		add	r7, sp, #0
 688              	.LCFI23:
 689              		.cfi_def_cfa_register 7
 690 0006 7860     		str	r0, [r7, #4]
 691 0008 0B46     		mov	r3, r1
 692 000a FB70     		strb	r3, [r7, #3]
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 693              		.loc 1 461 0
 694 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 695 000e 002B     		cmp	r3, #0
 696 0010 0AD0     		beq	.L24
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 697              		.loc 1 464 0
 698 0012 7B68     		ldr	r3, [r7, #4]
 699 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 700 0016 9BB2     		uxth	r3, r3
 701 0018 6FEA4343 		mvn	r3, r3, lsl #17
 702 001c 6FEA5343 		mvn	r3, r3, lsr #17
 703 0020 9AB2     		uxth	r2, r3
 704 0022 7B68     		ldr	r3, [r7, #4]
 705 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 706 0026 07E0     		b	.L23
 707              	.L24:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 708              		.loc 1 469 0
 709 0028 7B68     		ldr	r3, [r7, #4]
 710 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 711 002c 9BB2     		uxth	r3, r3
 712 002e C3F30E03 		ubfx	r3, r3, #0, #15
 713 0032 9AB2     		uxth	r2, r3
 714 0034 7B68     		ldr	r3, [r7, #4]
 715 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 716              	.L23:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 717              		.loc 1 471 0
 718 0038 0C37     		adds	r7, r7, #12
 719 003a BD46     		mov	sp, r7
 720              		@ sp needed
 721 003c 5DF8047B 		ldr	r7, [sp], #4
 722 0040 7047     		bx	lr
 723              		.cfi_endproc
 724              	.LFE117:
 726 0042 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 727              		.align	2
 728              		.global	USART_OneBitMethodCmd
 729              		.thumb
 730              		.thumb_func
 732              	USART_OneBitMethodCmd:
 733              	.LFB118:
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 734              		.loc 1 482 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 8
 737              		@ frame_needed = 1, uses_anonymous_args = 0
 738              		@ link register save eliminated.
 739 0000 80B4     		push	{r7}
 740              	.LCFI24:
 741              		.cfi_def_cfa_offset 4
 742              		.cfi_offset 7, -4
 743 0002 83B0     		sub	sp, sp, #12
 744              	.LCFI25:
 745              		.cfi_def_cfa_offset 16
 746 0004 00AF     		add	r7, sp, #0
 747              	.LCFI26:
 748              		.cfi_def_cfa_register 7
 749 0006 7860     		str	r0, [r7, #4]
 750 0008 0B46     		mov	r3, r1
 751 000a FB70     		strb	r3, [r7, #3]
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 752              		.loc 1 487 0
 753 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 754 000e 002B     		cmp	r3, #0
 755 0010 08D0     		beq	.L27
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 756              		.loc 1 490 0
 757 0012 7B68     		ldr	r3, [r7, #4]
 758 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 759 0016 9BB2     		uxth	r3, r3
 760 0018 43F40063 		orr	r3, r3, #2048
 761 001c 9AB2     		uxth	r2, r3
 762 001e 7B68     		ldr	r3, [r7, #4]
 763 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 764 0022 07E0     		b	.L26
 765              	.L27:
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 766              		.loc 1 495 0
 767 0024 7B68     		ldr	r3, [r7, #4]
 768 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 769 0028 9BB2     		uxth	r3, r3
 770 002a 23F40063 		bic	r3, r3, #2048
 771 002e 9AB2     		uxth	r2, r3
 772 0030 7B68     		ldr	r3, [r7, #4]
 773 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 774              	.L26:
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 775              		.loc 1 497 0
 776 0034 0C37     		adds	r7, r7, #12
 777 0036 BD46     		mov	sp, r7
 778              		@ sp needed
 779 0038 5DF8047B 		ldr	r7, [sp], #4
 780 003c 7047     		bx	lr
 781              		.cfi_endproc
 782              	.LFE118:
 784 003e 00BF     		.section	.text.USART_SendData,"ax",%progbits
 785              		.align	2
 786              		.global	USART_SendData
 787              		.thumb
 788              		.thumb_func
 790              	USART_SendData:
 791              	.LFB119:
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 792              		.loc 1 539 0
 793              		.cfi_startproc
 794              		@ args = 0, pretend = 0, frame = 8
 795              		@ frame_needed = 1, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797 0000 80B4     		push	{r7}
 798              	.LCFI27:
 799              		.cfi_def_cfa_offset 4
 800              		.cfi_offset 7, -4
 801 0002 83B0     		sub	sp, sp, #12
 802              	.LCFI28:
 803              		.cfi_def_cfa_offset 16
 804 0004 00AF     		add	r7, sp, #0
 805              	.LCFI29:
 806              		.cfi_def_cfa_register 7
 807 0006 7860     		str	r0, [r7, #4]
 808 0008 0B46     		mov	r3, r1
 809 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 810              		.loc 1 545 0
 811 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 812 000e C3F30803 		ubfx	r3, r3, #0, #9
 813 0012 9AB2     		uxth	r2, r3
 814 0014 7B68     		ldr	r3, [r7, #4]
 815 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 816              		.loc 1 546 0
 817 0018 0C37     		adds	r7, r7, #12
 818 001a BD46     		mov	sp, r7
 819              		@ sp needed
 820 001c 5DF8047B 		ldr	r7, [sp], #4
 821 0020 7047     		bx	lr
 822              		.cfi_endproc
 823              	.LFE119:
 825 0022 00BF     		.section	.text.USART_ReceiveData,"ax",%progbits
 826              		.align	2
 827              		.global	USART_ReceiveData
 828              		.thumb
 829              		.thumb_func
 831              	USART_ReceiveData:
 832              	.LFB120:
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 833              		.loc 1 555 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 8
 836              		@ frame_needed = 1, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 838 0000 80B4     		push	{r7}
 839              	.LCFI30:
 840              		.cfi_def_cfa_offset 4
 841              		.cfi_offset 7, -4
 842 0002 83B0     		sub	sp, sp, #12
 843              	.LCFI31:
 844              		.cfi_def_cfa_offset 16
 845 0004 00AF     		add	r7, sp, #0
 846              	.LCFI32:
 847              		.cfi_def_cfa_register 7
 848 0006 7860     		str	r0, [r7, #4]
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 849              		.loc 1 560 0
 850 0008 7B68     		ldr	r3, [r7, #4]
 851 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 852 000c 9BB2     		uxth	r3, r3
 853 000e C3F30803 		ubfx	r3, r3, #0, #9
 854 0012 9BB2     		uxth	r3, r3
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 855              		.loc 1 561 0
 856 0014 1846     		mov	r0, r3
 857 0016 0C37     		adds	r7, r7, #12
 858 0018 BD46     		mov	sp, r7
 859              		@ sp needed
 860 001a 5DF8047B 		ldr	r7, [sp], #4
 861 001e 7047     		bx	lr
 862              		.cfi_endproc
 863              	.LFE120:
 865              		.section	.text.USART_SetAddress,"ax",%progbits
 866              		.align	2
 867              		.global	USART_SetAddress
 868              		.thumb
 869              		.thumb_func
 871              	USART_SetAddress:
 872              	.LFB121:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 873              		.loc 1 606 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 8
 876              		@ frame_needed = 1, uses_anonymous_args = 0
 877              		@ link register save eliminated.
 878 0000 80B4     		push	{r7}
 879              	.LCFI33:
 880              		.cfi_def_cfa_offset 4
 881              		.cfi_offset 7, -4
 882 0002 83B0     		sub	sp, sp, #12
 883              	.LCFI34:
 884              		.cfi_def_cfa_offset 16
 885 0004 00AF     		add	r7, sp, #0
 886              	.LCFI35:
 887              		.cfi_def_cfa_register 7
 888 0006 7860     		str	r0, [r7, #4]
 889 0008 0B46     		mov	r3, r1
 890 000a FB70     		strb	r3, [r7, #3]
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 891              		.loc 1 612 0
 892 000c 7B68     		ldr	r3, [r7, #4]
 893 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 894 0010 9BB2     		uxth	r3, r3
 895 0012 23F00F03 		bic	r3, r3, #15
 896 0016 9AB2     		uxth	r2, r3
 897 0018 7B68     		ldr	r3, [r7, #4]
 898 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 899              		.loc 1 614 0
 900 001c 7B68     		ldr	r3, [r7, #4]
 901 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 902 0020 9AB2     		uxth	r2, r3
 903 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 904 0024 9BB2     		uxth	r3, r3
 905 0026 1343     		orrs	r3, r3, r2
 906 0028 9AB2     		uxth	r2, r3
 907 002a 7B68     		ldr	r3, [r7, #4]
 908 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 909              		.loc 1 615 0
 910 002e 0C37     		adds	r7, r7, #12
 911 0030 BD46     		mov	sp, r7
 912              		@ sp needed
 913 0032 5DF8047B 		ldr	r7, [sp], #4
 914 0036 7047     		bx	lr
 915              		.cfi_endproc
 916              	.LFE121:
 918              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 919              		.align	2
 920              		.global	USART_ReceiverWakeUpCmd
 921              		.thumb
 922              		.thumb_func
 924              	USART_ReceiverWakeUpCmd:
 925              	.LFB122:
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 926              		.loc 1 626 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 8
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931 0000 80B4     		push	{r7}
 932              	.LCFI36:
 933              		.cfi_def_cfa_offset 4
 934              		.cfi_offset 7, -4
 935 0002 83B0     		sub	sp, sp, #12
 936              	.LCFI37:
 937              		.cfi_def_cfa_offset 16
 938 0004 00AF     		add	r7, sp, #0
 939              	.LCFI38:
 940              		.cfi_def_cfa_register 7
 941 0006 7860     		str	r0, [r7, #4]
 942 0008 0B46     		mov	r3, r1
 943 000a FB70     		strb	r3, [r7, #3]
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 944              		.loc 1 631 0
 945 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 946 000e 002B     		cmp	r3, #0
 947 0010 08D0     		beq	.L34
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 948              		.loc 1 634 0
 949 0012 7B68     		ldr	r3, [r7, #4]
 950 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 951 0016 9BB2     		uxth	r3, r3
 952 0018 43F00203 		orr	r3, r3, #2
 953 001c 9AB2     		uxth	r2, r3
 954 001e 7B68     		ldr	r3, [r7, #4]
 955 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 956 0022 07E0     		b	.L33
 957              	.L34:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 958              		.loc 1 639 0
 959 0024 7B68     		ldr	r3, [r7, #4]
 960 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 961 0028 9BB2     		uxth	r3, r3
 962 002a 23F00203 		bic	r3, r3, #2
 963 002e 9AB2     		uxth	r2, r3
 964 0030 7B68     		ldr	r3, [r7, #4]
 965 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 966              	.L33:
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 967              		.loc 1 641 0
 968 0034 0C37     		adds	r7, r7, #12
 969 0036 BD46     		mov	sp, r7
 970              		@ sp needed
 971 0038 5DF8047B 		ldr	r7, [sp], #4
 972 003c 7047     		bx	lr
 973              		.cfi_endproc
 974              	.LFE122:
 976 003e 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 977              		.align	2
 978              		.global	USART_WakeUpConfig
 979              		.thumb
 980              		.thumb_func
 982              	USART_WakeUpConfig:
 983              	.LFB123:
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 984              		.loc 1 653 0
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 8
 987              		@ frame_needed = 1, uses_anonymous_args = 0
 988              		@ link register save eliminated.
 989 0000 80B4     		push	{r7}
 990              	.LCFI39:
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 7, -4
 993 0002 83B0     		sub	sp, sp, #12
 994              	.LCFI40:
 995              		.cfi_def_cfa_offset 16
 996 0004 00AF     		add	r7, sp, #0
 997              	.LCFI41:
 998              		.cfi_def_cfa_register 7
 999 0006 7860     		str	r0, [r7, #4]
 1000 0008 0B46     		mov	r3, r1
 1001 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 1002              		.loc 1 658 0
 1003 000c 7B68     		ldr	r3, [r7, #4]
 1004 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1005 0010 9BB2     		uxth	r3, r3
 1006 0012 23F40063 		bic	r3, r3, #2048
 1007 0016 9AB2     		uxth	r2, r3
 1008 0018 7B68     		ldr	r3, [r7, #4]
 1009 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1010              		.loc 1 659 0
 1011 001c 7B68     		ldr	r3, [r7, #4]
 1012 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1013 0020 9AB2     		uxth	r2, r3
 1014 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1015 0024 1343     		orrs	r3, r3, r2
 1016 0026 9AB2     		uxth	r2, r3
 1017 0028 7B68     		ldr	r3, [r7, #4]
 1018 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1019              		.loc 1 660 0
 1020 002c 0C37     		adds	r7, r7, #12
 1021 002e BD46     		mov	sp, r7
 1022              		@ sp needed
 1023 0030 5DF8047B 		ldr	r7, [sp], #4
 1024 0034 7047     		bx	lr
 1025              		.cfi_endproc
 1026              	.LFE123:
 1028 0036 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1029              		.align	2
 1030              		.global	USART_LINBreakDetectLengthConfig
 1031              		.thumb
 1032              		.thumb_func
 1034              	USART_LINBreakDetectLengthConfig:
 1035              	.LFB124:
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1036              		.loc 1 722 0
 1037              		.cfi_startproc
 1038              		@ args = 0, pretend = 0, frame = 8
 1039              		@ frame_needed = 1, uses_anonymous_args = 0
 1040              		@ link register save eliminated.
 1041 0000 80B4     		push	{r7}
 1042              	.LCFI42:
 1043              		.cfi_def_cfa_offset 4
 1044              		.cfi_offset 7, -4
 1045 0002 83B0     		sub	sp, sp, #12
 1046              	.LCFI43:
 1047              		.cfi_def_cfa_offset 16
 1048 0004 00AF     		add	r7, sp, #0
 1049              	.LCFI44:
 1050              		.cfi_def_cfa_register 7
 1051 0006 7860     		str	r0, [r7, #4]
 1052 0008 0B46     		mov	r3, r1
 1053 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 1054              		.loc 1 727 0
 1055 000c 7B68     		ldr	r3, [r7, #4]
 1056 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1057 0010 9BB2     		uxth	r3, r3
 1058 0012 23F02003 		bic	r3, r3, #32
 1059 0016 9AB2     		uxth	r2, r3
 1060 0018 7B68     		ldr	r3, [r7, #4]
 1061 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1062              		.loc 1 728 0
 1063 001c 7B68     		ldr	r3, [r7, #4]
 1064 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1065 0020 9AB2     		uxth	r2, r3
 1066 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1067 0024 1343     		orrs	r3, r3, r2
 1068 0026 9AB2     		uxth	r2, r3
 1069 0028 7B68     		ldr	r3, [r7, #4]
 1070 002a 1A82     		strh	r2, [r3, #16]	@ movhi
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1071              		.loc 1 729 0
 1072 002c 0C37     		adds	r7, r7, #12
 1073 002e BD46     		mov	sp, r7
 1074              		@ sp needed
 1075 0030 5DF8047B 		ldr	r7, [sp], #4
 1076 0034 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE124:
 1080 0036 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 1081              		.align	2
 1082              		.global	USART_LINCmd
 1083              		.thumb
 1084              		.thumb_func
 1086              	USART_LINCmd:
 1087              	.LFB125:
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1088              		.loc 1 740 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 8
 1091              		@ frame_needed = 1, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 1093 0000 80B4     		push	{r7}
 1094              	.LCFI45:
 1095              		.cfi_def_cfa_offset 4
 1096              		.cfi_offset 7, -4
 1097 0002 83B0     		sub	sp, sp, #12
 1098              	.LCFI46:
 1099              		.cfi_def_cfa_offset 16
 1100 0004 00AF     		add	r7, sp, #0
 1101              	.LCFI47:
 1102              		.cfi_def_cfa_register 7
 1103 0006 7860     		str	r0, [r7, #4]
 1104 0008 0B46     		mov	r3, r1
 1105 000a FB70     		strb	r3, [r7, #3]
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1106              		.loc 1 745 0
 1107 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1108 000e 002B     		cmp	r3, #0
 1109 0010 08D0     		beq	.L39
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 1110              		.loc 1 748 0
 1111 0012 7B68     		ldr	r3, [r7, #4]
 1112 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1113 0016 9BB2     		uxth	r3, r3
 1114 0018 43F48043 		orr	r3, r3, #16384
 1115 001c 9AB2     		uxth	r2, r3
 1116 001e 7B68     		ldr	r3, [r7, #4]
 1117 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 1118 0022 07E0     		b	.L38
 1119              	.L39:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 1120              		.loc 1 753 0
 1121 0024 7B68     		ldr	r3, [r7, #4]
 1122 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1123 0028 9BB2     		uxth	r3, r3
 1124 002a 23F48043 		bic	r3, r3, #16384
 1125 002e 9AB2     		uxth	r2, r3
 1126 0030 7B68     		ldr	r3, [r7, #4]
 1127 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1128              	.L38:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1129              		.loc 1 755 0
 1130 0034 0C37     		adds	r7, r7, #12
 1131 0036 BD46     		mov	sp, r7
 1132              		@ sp needed
 1133 0038 5DF8047B 		ldr	r7, [sp], #4
 1134 003c 7047     		bx	lr
 1135              		.cfi_endproc
 1136              	.LFE125:
 1138 003e 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 1139              		.align	2
 1140              		.global	USART_SendBreak
 1141              		.thumb
 1142              		.thumb_func
 1144              	USART_SendBreak:
 1145              	.LFB126:
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1146              		.loc 1 764 0
 1147              		.cfi_startproc
 1148              		@ args = 0, pretend = 0, frame = 8
 1149              		@ frame_needed = 1, uses_anonymous_args = 0
 1150              		@ link register save eliminated.
 1151 0000 80B4     		push	{r7}
 1152              	.LCFI48:
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 7, -4
 1155 0002 83B0     		sub	sp, sp, #12
 1156              	.LCFI49:
 1157              		.cfi_def_cfa_offset 16
 1158 0004 00AF     		add	r7, sp, #0
 1159              	.LCFI50:
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 1162              		.loc 1 769 0
 1163 0008 7B68     		ldr	r3, [r7, #4]
 1164 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1165 000c 9BB2     		uxth	r3, r3
 1166 000e 43F00103 		orr	r3, r3, #1
 1167 0012 9AB2     		uxth	r2, r3
 1168 0014 7B68     		ldr	r3, [r7, #4]
 1169 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1170              		.loc 1 770 0
 1171 0018 0C37     		adds	r7, r7, #12
 1172 001a BD46     		mov	sp, r7
 1173              		@ sp needed
 1174 001c 5DF8047B 		ldr	r7, [sp], #4
 1175 0020 7047     		bx	lr
 1176              		.cfi_endproc
 1177              	.LFE126:
 1179 0022 00BF     		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1180              		.align	2
 1181              		.global	USART_HalfDuplexCmd
 1182              		.thumb
 1183              		.thumb_func
 1185              	USART_HalfDuplexCmd:
 1186              	.LFB127:
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1187              		.loc 1 817 0
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 8
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191              		@ link register save eliminated.
 1192 0000 80B4     		push	{r7}
 1193              	.LCFI51:
 1194              		.cfi_def_cfa_offset 4
 1195              		.cfi_offset 7, -4
 1196 0002 83B0     		sub	sp, sp, #12
 1197              	.LCFI52:
 1198              		.cfi_def_cfa_offset 16
 1199 0004 00AF     		add	r7, sp, #0
 1200              	.LCFI53:
 1201              		.cfi_def_cfa_register 7
 1202 0006 7860     		str	r0, [r7, #4]
 1203 0008 0B46     		mov	r3, r1
 1204 000a FB70     		strb	r3, [r7, #3]
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1205              		.loc 1 822 0
 1206 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1207 000e 002B     		cmp	r3, #0
 1208 0010 08D0     		beq	.L43
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 1209              		.loc 1 825 0
 1210 0012 7B68     		ldr	r3, [r7, #4]
 1211 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1212 0016 9BB2     		uxth	r3, r3
 1213 0018 43F00803 		orr	r3, r3, #8
 1214 001c 9AB2     		uxth	r2, r3
 1215 001e 7B68     		ldr	r3, [r7, #4]
 1216 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1217 0022 07E0     		b	.L42
 1218              	.L43:
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 1219              		.loc 1 830 0
 1220 0024 7B68     		ldr	r3, [r7, #4]
 1221 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1222 0028 9BB2     		uxth	r3, r3
 1223 002a 23F00803 		bic	r3, r3, #8
 1224 002e 9AB2     		uxth	r2, r3
 1225 0030 7B68     		ldr	r3, [r7, #4]
 1226 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1227              	.L42:
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1228              		.loc 1 832 0
 1229 0034 0C37     		adds	r7, r7, #12
 1230 0036 BD46     		mov	sp, r7
 1231              		@ sp needed
 1232 0038 5DF8047B 		ldr	r7, [sp], #4
 1233 003c 7047     		bx	lr
 1234              		.cfi_endproc
 1235              	.LFE127:
 1237 003e 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 1238              		.align	2
 1239              		.global	USART_SetGuardTime
 1240              		.thumb
 1241              		.thumb_func
 1243              	USART_SetGuardTime:
 1244              	.LFB128:
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 1245              		.loc 1 902 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 8
 1248              		@ frame_needed = 1, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
 1250 0000 80B4     		push	{r7}
 1251              	.LCFI54:
 1252              		.cfi_def_cfa_offset 4
 1253              		.cfi_offset 7, -4
 1254 0002 83B0     		sub	sp, sp, #12
 1255              	.LCFI55:
 1256              		.cfi_def_cfa_offset 16
 1257 0004 00AF     		add	r7, sp, #0
 1258              	.LCFI56:
 1259              		.cfi_def_cfa_register 7
 1260 0006 7860     		str	r0, [r7, #4]
 1261 0008 0B46     		mov	r3, r1
 1262 000a FB70     		strb	r3, [r7, #3]
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 1263              		.loc 1 907 0
 1264 000c 7B68     		ldr	r3, [r7, #4]
 1265 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1266 0010 9BB2     		uxth	r3, r3
 1267 0012 DBB2     		uxtb	r3, r3
 1268 0014 9AB2     		uxth	r2, r3
 1269 0016 7B68     		ldr	r3, [r7, #4]
 1270 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1271              		.loc 1 909 0
 1272 001a 7B68     		ldr	r3, [r7, #4]
 1273 001c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1274 001e 9AB2     		uxth	r2, r3
 1275 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1276 0022 9BB2     		uxth	r3, r3
 1277 0024 1B02     		lsls	r3, r3, #8
 1278 0026 9BB2     		uxth	r3, r3
 1279 0028 1343     		orrs	r3, r3, r2
 1280 002a 9AB2     		uxth	r2, r3
 1281 002c 7B68     		ldr	r3, [r7, #4]
 1282 002e 1A83     		strh	r2, [r3, #24]	@ movhi
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1283              		.loc 1 910 0
 1284 0030 0C37     		adds	r7, r7, #12
 1285 0032 BD46     		mov	sp, r7
 1286              		@ sp needed
 1287 0034 5DF8047B 		ldr	r7, [sp], #4
 1288 0038 7047     		bx	lr
 1289              		.cfi_endproc
 1290              	.LFE128:
 1292 003a 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1293              		.align	2
 1294              		.global	USART_SmartCardCmd
 1295              		.thumb
 1296              		.thumb_func
 1298              	USART_SmartCardCmd:
 1299              	.LFB129:
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1300              		.loc 1 921 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 8
 1303              		@ frame_needed = 1, uses_anonymous_args = 0
 1304              		@ link register save eliminated.
 1305 0000 80B4     		push	{r7}
 1306              	.LCFI57:
 1307              		.cfi_def_cfa_offset 4
 1308              		.cfi_offset 7, -4
 1309 0002 83B0     		sub	sp, sp, #12
 1310              	.LCFI58:
 1311              		.cfi_def_cfa_offset 16
 1312 0004 00AF     		add	r7, sp, #0
 1313              	.LCFI59:
 1314              		.cfi_def_cfa_register 7
 1315 0006 7860     		str	r0, [r7, #4]
 1316 0008 0B46     		mov	r3, r1
 1317 000a FB70     		strb	r3, [r7, #3]
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1318              		.loc 1 925 0
 1319 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1320 000e 002B     		cmp	r3, #0
 1321 0010 08D0     		beq	.L47
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 1322              		.loc 1 928 0
 1323 0012 7B68     		ldr	r3, [r7, #4]
 1324 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1325 0016 9BB2     		uxth	r3, r3
 1326 0018 43F02003 		orr	r3, r3, #32
 1327 001c 9AB2     		uxth	r2, r3
 1328 001e 7B68     		ldr	r3, [r7, #4]
 1329 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1330 0022 07E0     		b	.L46
 1331              	.L47:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1332              		.loc 1 933 0
 1333 0024 7B68     		ldr	r3, [r7, #4]
 1334 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1335 0028 9BB2     		uxth	r3, r3
 1336 002a 23F02003 		bic	r3, r3, #32
 1337 002e 9AB2     		uxth	r2, r3
 1338 0030 7B68     		ldr	r3, [r7, #4]
 1339 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1340              	.L46:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1341              		.loc 1 935 0
 1342 0034 0C37     		adds	r7, r7, #12
 1343 0036 BD46     		mov	sp, r7
 1344              		@ sp needed
 1345 0038 5DF8047B 		ldr	r7, [sp], #4
 1346 003c 7047     		bx	lr
 1347              		.cfi_endproc
 1348              	.LFE129:
 1350 003e 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1351              		.align	2
 1352              		.global	USART_SmartCardNACKCmd
 1353              		.thumb
 1354              		.thumb_func
 1356              	USART_SmartCardNACKCmd:
 1357              	.LFB130:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1358              		.loc 1 946 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 8
 1361              		@ frame_needed = 1, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 1363 0000 80B4     		push	{r7}
 1364              	.LCFI60:
 1365              		.cfi_def_cfa_offset 4
 1366              		.cfi_offset 7, -4
 1367 0002 83B0     		sub	sp, sp, #12
 1368              	.LCFI61:
 1369              		.cfi_def_cfa_offset 16
 1370 0004 00AF     		add	r7, sp, #0
 1371              	.LCFI62:
 1372              		.cfi_def_cfa_register 7
 1373 0006 7860     		str	r0, [r7, #4]
 1374 0008 0B46     		mov	r3, r1
 1375 000a FB70     		strb	r3, [r7, #3]
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1376              		.loc 1 950 0
 1377 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1378 000e 002B     		cmp	r3, #0
 1379 0010 08D0     		beq	.L50
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1380              		.loc 1 953 0
 1381 0012 7B68     		ldr	r3, [r7, #4]
 1382 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1383 0016 9BB2     		uxth	r3, r3
 1384 0018 43F01003 		orr	r3, r3, #16
 1385 001c 9AB2     		uxth	r2, r3
 1386 001e 7B68     		ldr	r3, [r7, #4]
 1387 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1388 0022 07E0     		b	.L49
 1389              	.L50:
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1390              		.loc 1 958 0
 1391 0024 7B68     		ldr	r3, [r7, #4]
 1392 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1393 0028 9BB2     		uxth	r3, r3
 1394 002a 23F01003 		bic	r3, r3, #16
 1395 002e 9AB2     		uxth	r2, r3
 1396 0030 7B68     		ldr	r3, [r7, #4]
 1397 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1398              	.L49:
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1399              		.loc 1 960 0
 1400 0034 0C37     		adds	r7, r7, #12
 1401 0036 BD46     		mov	sp, r7
 1402              		@ sp needed
 1403 0038 5DF8047B 		ldr	r7, [sp], #4
 1404 003c 7047     		bx	lr
 1405              		.cfi_endproc
 1406              	.LFE130:
 1408 003e 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1409              		.align	2
 1410              		.global	USART_IrDAConfig
 1411              		.thumb
 1412              		.thumb_func
 1414              	USART_IrDAConfig:
 1415              	.LFB131:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1416              		.loc 1 1017 0
 1417              		.cfi_startproc
 1418              		@ args = 0, pretend = 0, frame = 8
 1419              		@ frame_needed = 1, uses_anonymous_args = 0
 1420              		@ link register save eliminated.
 1421 0000 80B4     		push	{r7}
 1422              	.LCFI63:
 1423              		.cfi_def_cfa_offset 4
 1424              		.cfi_offset 7, -4
 1425 0002 83B0     		sub	sp, sp, #12
 1426              	.LCFI64:
 1427              		.cfi_def_cfa_offset 16
 1428 0004 00AF     		add	r7, sp, #0
 1429              	.LCFI65:
 1430              		.cfi_def_cfa_register 7
 1431 0006 7860     		str	r0, [r7, #4]
 1432 0008 0B46     		mov	r3, r1
 1433 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1434              		.loc 1 1022 0
 1435 000c 7B68     		ldr	r3, [r7, #4]
 1436 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1437 0010 9BB2     		uxth	r3, r3
 1438 0012 23F00403 		bic	r3, r3, #4
 1439 0016 9AB2     		uxth	r2, r3
 1440 0018 7B68     		ldr	r3, [r7, #4]
 1441 001a 9A82     		strh	r2, [r3, #20]	@ movhi
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1442              		.loc 1 1023 0
 1443 001c 7B68     		ldr	r3, [r7, #4]
 1444 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1445 0020 9AB2     		uxth	r2, r3
 1446 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1447 0024 1343     		orrs	r3, r3, r2
 1448 0026 9AB2     		uxth	r2, r3
 1449 0028 7B68     		ldr	r3, [r7, #4]
 1450 002a 9A82     		strh	r2, [r3, #20]	@ movhi
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1451              		.loc 1 1024 0
 1452 002c 0C37     		adds	r7, r7, #12
 1453 002e BD46     		mov	sp, r7
 1454              		@ sp needed
 1455 0030 5DF8047B 		ldr	r7, [sp], #4
 1456 0034 7047     		bx	lr
 1457              		.cfi_endproc
 1458              	.LFE131:
 1460 0036 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 1461              		.align	2
 1462              		.global	USART_IrDACmd
 1463              		.thumb
 1464              		.thumb_func
 1466              	USART_IrDACmd:
 1467              	.LFB132:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1468              		.loc 1 1035 0
 1469              		.cfi_startproc
 1470              		@ args = 0, pretend = 0, frame = 8
 1471              		@ frame_needed = 1, uses_anonymous_args = 0
 1472              		@ link register save eliminated.
 1473 0000 80B4     		push	{r7}
 1474              	.LCFI66:
 1475              		.cfi_def_cfa_offset 4
 1476              		.cfi_offset 7, -4
 1477 0002 83B0     		sub	sp, sp, #12
 1478              	.LCFI67:
 1479              		.cfi_def_cfa_offset 16
 1480 0004 00AF     		add	r7, sp, #0
 1481              	.LCFI68:
 1482              		.cfi_def_cfa_register 7
 1483 0006 7860     		str	r0, [r7, #4]
 1484 0008 0B46     		mov	r3, r1
 1485 000a FB70     		strb	r3, [r7, #3]
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1486              		.loc 1 1040 0
 1487 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1488 000e 002B     		cmp	r3, #0
 1489 0010 08D0     		beq	.L54
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1490              		.loc 1 1043 0
 1491 0012 7B68     		ldr	r3, [r7, #4]
 1492 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1493 0016 9BB2     		uxth	r3, r3
 1494 0018 43F00203 		orr	r3, r3, #2
 1495 001c 9AB2     		uxth	r2, r3
 1496 001e 7B68     		ldr	r3, [r7, #4]
 1497 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 1498 0022 07E0     		b	.L53
 1499              	.L54:
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1500              		.loc 1 1048 0
 1501 0024 7B68     		ldr	r3, [r7, #4]
 1502 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1503 0028 9BB2     		uxth	r3, r3
 1504 002a 23F00203 		bic	r3, r3, #2
 1505 002e 9AB2     		uxth	r2, r3
 1506 0030 7B68     		ldr	r3, [r7, #4]
 1507 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1508              	.L53:
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1509              		.loc 1 1050 0
 1510 0034 0C37     		adds	r7, r7, #12
 1511 0036 BD46     		mov	sp, r7
 1512              		@ sp needed
 1513 0038 5DF8047B 		ldr	r7, [sp], #4
 1514 003c 7047     		bx	lr
 1515              		.cfi_endproc
 1516              	.LFE132:
 1518 003e 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1519              		.align	2
 1520              		.global	USART_DMACmd
 1521              		.thumb
 1522              		.thumb_func
 1524              	USART_DMACmd:
 1525              	.LFB133:
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1526              		.loc 1 1081 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 8
 1529              		@ frame_needed = 1, uses_anonymous_args = 0
 1530              		@ link register save eliminated.
 1531 0000 80B4     		push	{r7}
 1532              	.LCFI69:
 1533              		.cfi_def_cfa_offset 4
 1534              		.cfi_offset 7, -4
 1535 0002 83B0     		sub	sp, sp, #12
 1536              	.LCFI70:
 1537              		.cfi_def_cfa_offset 16
 1538 0004 00AF     		add	r7, sp, #0
 1539              	.LCFI71:
 1540              		.cfi_def_cfa_register 7
 1541 0006 7860     		str	r0, [r7, #4]
 1542 0008 1346     		mov	r3, r2
 1543 000a 0A46     		mov	r2, r1	@ movhi
 1544 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1545 000e 7B70     		strb	r3, [r7, #1]
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1546              		.loc 1 1087 0
 1547 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1548 0012 002B     		cmp	r3, #0
 1549 0014 08D0     		beq	.L57
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1550              		.loc 1 1091 0
 1551 0016 7B68     		ldr	r3, [r7, #4]
 1552 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1553 001a 9AB2     		uxth	r2, r3
 1554 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1555 001e 1343     		orrs	r3, r3, r2
 1556 0020 9AB2     		uxth	r2, r3
 1557 0022 7B68     		ldr	r3, [r7, #4]
 1558 0024 9A82     		strh	r2, [r3, #20]	@ movhi
 1559 0026 09E0     		b	.L56
 1560              	.L57:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1561              		.loc 1 1097 0
 1562 0028 7B68     		ldr	r3, [r7, #4]
 1563 002a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1564 002c 9AB2     		uxth	r2, r3
 1565 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1566 0030 DB43     		mvns	r3, r3
 1567 0032 9BB2     		uxth	r3, r3
 1568 0034 1340     		ands	r3, r3, r2
 1569 0036 9AB2     		uxth	r2, r3
 1570 0038 7B68     		ldr	r3, [r7, #4]
 1571 003a 9A82     		strh	r2, [r3, #20]	@ movhi
 1572              	.L56:
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1573              		.loc 1 1099 0
 1574 003c 0C37     		adds	r7, r7, #12
 1575 003e BD46     		mov	sp, r7
 1576              		@ sp needed
 1577 0040 5DF8047B 		ldr	r7, [sp], #4
 1578 0044 7047     		bx	lr
 1579              		.cfi_endproc
 1580              	.LFE133:
 1582 0046 00BF     		.section	.text.USART_ITConfig,"ax",%progbits
 1583              		.align	2
 1584              		.global	USART_ITConfig
 1585              		.thumb
 1586              		.thumb_func
 1588              	USART_ITConfig:
 1589              	.LFB134:
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1590              		.loc 1 1209 0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 24
 1593              		@ frame_needed = 1, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 1595 0000 80B4     		push	{r7}
 1596              	.LCFI72:
 1597              		.cfi_def_cfa_offset 4
 1598              		.cfi_offset 7, -4
 1599 0002 87B0     		sub	sp, sp, #28
 1600              	.LCFI73:
 1601              		.cfi_def_cfa_offset 32
 1602 0004 00AF     		add	r7, sp, #0
 1603              	.LCFI74:
 1604              		.cfi_def_cfa_register 7
 1605 0006 7860     		str	r0, [r7, #4]
 1606 0008 1346     		mov	r3, r2
 1607 000a 0A46     		mov	r2, r1	@ movhi
 1608 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 1609 000e 7B70     		strb	r3, [r7, #1]
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 1610              		.loc 1 1210 0
 1611 0010 0023     		movs	r3, #0
 1612 0012 3B61     		str	r3, [r7, #16]
 1613 0014 0023     		movs	r3, #0
 1614 0016 FB60     		str	r3, [r7, #12]
 1615 0018 0023     		movs	r3, #0
 1616 001a BB60     		str	r3, [r7, #8]
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
 1617              		.loc 1 1211 0
 1618 001c 0023     		movs	r3, #0
 1619 001e 7B61     		str	r3, [r7, #20]
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
 1620              		.loc 1 1223 0
 1621 0020 7B68     		ldr	r3, [r7, #4]
 1622 0022 7B61     		str	r3, [r7, #20]
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1623              		.loc 1 1226 0
 1624 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1625 0026 DBB2     		uxtb	r3, r3
 1626 0028 5B09     		lsrs	r3, r3, #5
 1627 002a DBB2     		uxtb	r3, r3
 1628 002c 3B61     		str	r3, [r7, #16]
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1629              		.loc 1 1229 0
 1630 002e 7B88     		ldrh	r3, [r7, #2]
 1631 0030 03F01F03 		and	r3, r3, #31
 1632 0034 FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1633              		.loc 1 1230 0
 1634 0036 FB68     		ldr	r3, [r7, #12]
 1635 0038 0122     		movs	r2, #1
 1636 003a 02FA03F3 		lsl	r3, r2, r3
 1637 003e BB60     		str	r3, [r7, #8]
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1638              		.loc 1 1232 0
 1639 0040 3B69     		ldr	r3, [r7, #16]
 1640 0042 012B     		cmp	r3, #1
 1641 0044 03D1     		bne	.L60
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1642              		.loc 1 1234 0
 1643 0046 7B69     		ldr	r3, [r7, #20]
 1644 0048 0C33     		adds	r3, r3, #12
 1645 004a 7B61     		str	r3, [r7, #20]
 1646 004c 09E0     		b	.L61
 1647              	.L60:
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1648              		.loc 1 1236 0
 1649 004e 3B69     		ldr	r3, [r7, #16]
 1650 0050 022B     		cmp	r3, #2
 1651 0052 03D1     		bne	.L62
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1652              		.loc 1 1238 0
 1653 0054 7B69     		ldr	r3, [r7, #20]
 1654 0056 1033     		adds	r3, r3, #16
 1655 0058 7B61     		str	r3, [r7, #20]
 1656 005a 02E0     		b	.L61
 1657              	.L62:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1658              		.loc 1 1242 0
 1659 005c 7B69     		ldr	r3, [r7, #20]
 1660 005e 1433     		adds	r3, r3, #20
 1661 0060 7B61     		str	r3, [r7, #20]
 1662              	.L61:
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1663              		.loc 1 1244 0
 1664 0062 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1665 0064 002B     		cmp	r3, #0
 1666 0066 06D0     		beq	.L63
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1667              		.loc 1 1246 0
 1668 0068 7B69     		ldr	r3, [r7, #20]
 1669 006a 7A69     		ldr	r2, [r7, #20]
 1670 006c 1168     		ldr	r1, [r2]
 1671 006e BA68     		ldr	r2, [r7, #8]
 1672 0070 0A43     		orrs	r2, r2, r1
 1673 0072 1A60     		str	r2, [r3]
 1674 0074 06E0     		b	.L59
 1675              	.L63:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1676              		.loc 1 1250 0
 1677 0076 7B69     		ldr	r3, [r7, #20]
 1678 0078 7A69     		ldr	r2, [r7, #20]
 1679 007a 1168     		ldr	r1, [r2]
 1680 007c BA68     		ldr	r2, [r7, #8]
 1681 007e D243     		mvns	r2, r2
 1682 0080 0A40     		ands	r2, r2, r1
 1683 0082 1A60     		str	r2, [r3]
 1684              	.L59:
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1685              		.loc 1 1252 0
 1686 0084 1C37     		adds	r7, r7, #28
 1687 0086 BD46     		mov	sp, r7
 1688              		@ sp needed
 1689 0088 5DF8047B 		ldr	r7, [sp], #4
 1690 008c 7047     		bx	lr
 1691              		.cfi_endproc
 1692              	.LFE134:
 1694 008e 00BF     		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1695              		.align	2
 1696              		.global	USART_GetFlagStatus
 1697              		.thumb
 1698              		.thumb_func
 1700              	USART_GetFlagStatus:
 1701              	.LFB135:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1702              		.loc 1 1273 0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 16
 1705              		@ frame_needed = 1, uses_anonymous_args = 0
 1706              		@ link register save eliminated.
 1707 0000 80B4     		push	{r7}
 1708              	.LCFI75:
 1709              		.cfi_def_cfa_offset 4
 1710              		.cfi_offset 7, -4
 1711 0002 85B0     		sub	sp, sp, #20
 1712              	.LCFI76:
 1713              		.cfi_def_cfa_offset 24
 1714 0004 00AF     		add	r7, sp, #0
 1715              	.LCFI77:
 1716              		.cfi_def_cfa_register 7
 1717 0006 7860     		str	r0, [r7, #4]
 1718 0008 0B46     		mov	r3, r1
 1719 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
 1720              		.loc 1 1274 0
 1721 000c 0023     		movs	r3, #0
 1722 000e FB73     		strb	r3, [r7, #15]
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1723              		.loc 1 1285 0
 1724 0010 7B68     		ldr	r3, [r7, #4]
 1725 0012 1B88     		ldrh	r3, [r3]	@ movhi
 1726 0014 9AB2     		uxth	r2, r3
 1727 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1728 0018 1340     		ands	r3, r3, r2
 1729 001a 9BB2     		uxth	r3, r3
 1730 001c 002B     		cmp	r3, #0
 1731 001e 02D0     		beq	.L66
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1732              		.loc 1 1287 0
 1733 0020 0123     		movs	r3, #1
 1734 0022 FB73     		strb	r3, [r7, #15]
 1735 0024 01E0     		b	.L67
 1736              	.L66:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1737              		.loc 1 1291 0
 1738 0026 0023     		movs	r3, #0
 1739 0028 FB73     		strb	r3, [r7, #15]
 1740              	.L67:
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
 1741              		.loc 1 1293 0
 1742 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1743              		.loc 1 1294 0
 1744 002c 1846     		mov	r0, r3
 1745 002e 1437     		adds	r7, r7, #20
 1746 0030 BD46     		mov	sp, r7
 1747              		@ sp needed
 1748 0032 5DF8047B 		ldr	r7, [sp], #4
 1749 0036 7047     		bx	lr
 1750              		.cfi_endproc
 1751              	.LFE135:
 1753              		.section	.text.USART_ClearFlag,"ax",%progbits
 1754              		.align	2
 1755              		.global	USART_ClearFlag
 1756              		.thumb
 1757              		.thumb_func
 1759              	USART_ClearFlag:
 1760              	.LFB136:
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1761              		.loc 1 1322 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 8
 1764              		@ frame_needed = 1, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 1766 0000 80B4     		push	{r7}
 1767              	.LCFI78:
 1768              		.cfi_def_cfa_offset 4
 1769              		.cfi_offset 7, -4
 1770 0002 83B0     		sub	sp, sp, #12
 1771              	.LCFI79:
 1772              		.cfi_def_cfa_offset 16
 1773 0004 00AF     		add	r7, sp, #0
 1774              	.LCFI80:
 1775              		.cfi_def_cfa_register 7
 1776 0006 7860     		str	r0, [r7, #4]
 1777 0008 0B46     		mov	r3, r1
 1778 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1779              		.loc 1 1333 0
 1780 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1781 000e DB43     		mvns	r3, r3
 1782 0010 9AB2     		uxth	r2, r3
 1783 0012 7B68     		ldr	r3, [r7, #4]
 1784 0014 1A80     		strh	r2, [r3]	@ movhi
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1785              		.loc 1 1334 0
 1786 0016 0C37     		adds	r7, r7, #12
 1787 0018 BD46     		mov	sp, r7
 1788              		@ sp needed
 1789 001a 5DF8047B 		ldr	r7, [sp], #4
 1790 001e 7047     		bx	lr
 1791              		.cfi_endproc
 1792              	.LFE136:
 1794              		.section	.text.USART_GetITStatus,"ax",%progbits
 1795              		.align	2
 1796              		.global	USART_GetITStatus
 1797              		.thumb
 1798              		.thumb_func
 1800              	USART_GetITStatus:
 1801              	.LFB137:
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1802              		.loc 1 1355 0
 1803              		.cfi_startproc
 1804              		@ args = 0, pretend = 0, frame = 24
 1805              		@ frame_needed = 1, uses_anonymous_args = 0
 1806              		@ link register save eliminated.
 1807 0000 80B4     		push	{r7}
 1808              	.LCFI81:
 1809              		.cfi_def_cfa_offset 4
 1810              		.cfi_offset 7, -4
 1811 0002 87B0     		sub	sp, sp, #28
 1812              	.LCFI82:
 1813              		.cfi_def_cfa_offset 32
 1814 0004 00AF     		add	r7, sp, #0
 1815              	.LCFI83:
 1816              		.cfi_def_cfa_register 7
 1817 0006 7860     		str	r0, [r7, #4]
 1818 0008 0B46     		mov	r3, r1
 1819 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1820              		.loc 1 1356 0
 1821 000c 0023     		movs	r3, #0
 1822 000e FB60     		str	r3, [r7, #12]
 1823 0010 0023     		movs	r3, #0
 1824 0012 7B61     		str	r3, [r7, #20]
 1825 0014 0023     		movs	r3, #0
 1826 0016 BB60     		str	r3, [r7, #8]
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
 1827              		.loc 1 1357 0
 1828 0018 0023     		movs	r3, #0
 1829 001a FB74     		strb	r3, [r7, #19]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1830              		.loc 1 1369 0
 1831 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1832 001e DBB2     		uxtb	r3, r3
 1833 0020 5B09     		lsrs	r3, r3, #5
 1834 0022 DBB2     		uxtb	r3, r3
 1835 0024 BB60     		str	r3, [r7, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1836              		.loc 1 1371 0
 1837 0026 7B88     		ldrh	r3, [r7, #2]
 1838 0028 03F01F03 		and	r3, r3, #31
 1839 002c 7B61     		str	r3, [r7, #20]
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1840              		.loc 1 1372 0
 1841 002e 7B69     		ldr	r3, [r7, #20]
 1842 0030 0122     		movs	r2, #1
 1843 0032 02FA03F3 		lsl	r3, r2, r3
 1844 0036 7B61     		str	r3, [r7, #20]
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1845              		.loc 1 1374 0
 1846 0038 BB68     		ldr	r3, [r7, #8]
 1847 003a 012B     		cmp	r3, #1
 1848 003c 06D1     		bne	.L71
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1849              		.loc 1 1376 0
 1850 003e 7B68     		ldr	r3, [r7, #4]
 1851 0040 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1852 0042 9BB2     		uxth	r3, r3
 1853 0044 7A69     		ldr	r2, [r7, #20]
 1854 0046 1340     		ands	r3, r3, r2
 1855 0048 7B61     		str	r3, [r7, #20]
 1856 004a 0FE0     		b	.L72
 1857              	.L71:
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1858              		.loc 1 1378 0
 1859 004c BB68     		ldr	r3, [r7, #8]
 1860 004e 022B     		cmp	r3, #2
 1861 0050 06D1     		bne	.L73
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1862              		.loc 1 1380 0
 1863 0052 7B68     		ldr	r3, [r7, #4]
 1864 0054 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1865 0056 9BB2     		uxth	r3, r3
 1866 0058 7A69     		ldr	r2, [r7, #20]
 1867 005a 1340     		ands	r3, r3, r2
 1868 005c 7B61     		str	r3, [r7, #20]
 1869 005e 05E0     		b	.L72
 1870              	.L73:
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1871              		.loc 1 1384 0
 1872 0060 7B68     		ldr	r3, [r7, #4]
 1873 0062 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1874 0064 9BB2     		uxth	r3, r3
 1875 0066 7A69     		ldr	r2, [r7, #20]
 1876 0068 1340     		ands	r3, r3, r2
 1877 006a 7B61     		str	r3, [r7, #20]
 1878              	.L72:
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1879              		.loc 1 1387 0
 1880 006c 7B88     		ldrh	r3, [r7, #2]
 1881 006e 1B0A     		lsrs	r3, r3, #8
 1882 0070 9BB2     		uxth	r3, r3
 1883 0072 FB60     		str	r3, [r7, #12]
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1884              		.loc 1 1388 0
 1885 0074 FB68     		ldr	r3, [r7, #12]
 1886 0076 0122     		movs	r2, #1
 1887 0078 02FA03F3 		lsl	r3, r2, r3
 1888 007c FB60     		str	r3, [r7, #12]
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1889              		.loc 1 1389 0
 1890 007e 7B68     		ldr	r3, [r7, #4]
 1891 0080 1B88     		ldrh	r3, [r3]	@ movhi
 1892 0082 9BB2     		uxth	r3, r3
 1893 0084 FA68     		ldr	r2, [r7, #12]
 1894 0086 1340     		ands	r3, r3, r2
 1895 0088 FB60     		str	r3, [r7, #12]
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1896              		.loc 1 1390 0
 1897 008a 7B69     		ldr	r3, [r7, #20]
 1898 008c 002B     		cmp	r3, #0
 1899 008e 05D0     		beq	.L74
 1900              		.loc 1 1390 0 is_stmt 0 discriminator 1
 1901 0090 FB68     		ldr	r3, [r7, #12]
 1902 0092 002B     		cmp	r3, #0
 1903 0094 02D0     		beq	.L74
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1904              		.loc 1 1392 0 is_stmt 1
 1905 0096 0123     		movs	r3, #1
 1906 0098 FB74     		strb	r3, [r7, #19]
 1907 009a 01E0     		b	.L75
 1908              	.L74:
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
 1909              		.loc 1 1396 0
 1910 009c 0023     		movs	r3, #0
 1911 009e FB74     		strb	r3, [r7, #19]
 1912              	.L75:
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
 1913              		.loc 1 1399 0
 1914 00a0 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1915              		.loc 1 1400 0
 1916 00a2 1846     		mov	r0, r3
 1917 00a4 1C37     		adds	r7, r7, #28
 1918 00a6 BD46     		mov	sp, r7
 1919              		@ sp needed
 1920 00a8 5DF8047B 		ldr	r7, [sp], #4
 1921 00ac 7047     		bx	lr
 1922              		.cfi_endproc
 1923              	.LFE137:
 1925 00ae 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1926              		.align	2
 1927              		.global	USART_ClearITPendingBit
 1928              		.thumb
 1929              		.thumb_func
 1931              	USART_ClearITPendingBit:
 1932              	.LFB138:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1933              		.loc 1 1429 0
 1934              		.cfi_startproc
 1935              		@ args = 0, pretend = 0, frame = 16
 1936              		@ frame_needed = 1, uses_anonymous_args = 0
 1937              		@ link register save eliminated.
 1938 0000 80B4     		push	{r7}
 1939              	.LCFI84:
 1940              		.cfi_def_cfa_offset 4
 1941              		.cfi_offset 7, -4
 1942 0002 85B0     		sub	sp, sp, #20
 1943              	.LCFI85:
 1944              		.cfi_def_cfa_offset 24
 1945 0004 00AF     		add	r7, sp, #0
 1946              	.LCFI86:
 1947              		.cfi_def_cfa_register 7
 1948 0006 7860     		str	r0, [r7, #4]
 1949 0008 0B46     		mov	r3, r1
 1950 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 1951              		.loc 1 1430 0
 1952 000c 0023     		movs	r3, #0
 1953 000e FB81     		strh	r3, [r7, #14]	@ movhi
 1954 0010 0023     		movs	r3, #0
 1955 0012 BB81     		strh	r3, [r7, #12]	@ movhi
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1956              		.loc 1 1441 0
 1957 0014 7B88     		ldrh	r3, [r7, #2]
 1958 0016 1B0A     		lsrs	r3, r3, #8
 1959 0018 FB81     		strh	r3, [r7, #14]	@ movhi
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1960              		.loc 1 1442 0
 1961 001a FB89     		ldrh	r3, [r7, #14]
 1962 001c 0122     		movs	r2, #1
 1963 001e 02FA03F3 		lsl	r3, r2, r3
 1964 0022 BB81     		strh	r3, [r7, #12]	@ movhi
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1965              		.loc 1 1443 0
 1966 0024 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1967 0026 DB43     		mvns	r3, r3
 1968 0028 9AB2     		uxth	r2, r3
 1969 002a 7B68     		ldr	r3, [r7, #4]
 1970 002c 1A80     		strh	r2, [r3]	@ movhi
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1971              		.loc 1 1444 0
 1972 002e 1437     		adds	r7, r7, #20
 1973 0030 BD46     		mov	sp, r7
 1974              		@ sp needed
 1975 0032 5DF8047B 		ldr	r7, [sp], #4
 1976 0036 7047     		bx	lr
 1977              		.cfi_endproc
 1978              	.LFE138:
 1980              		.text
 1981              	.Letext0:
 1982              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1983              		.file 3 "/usr/include/newlib/stdint.h"
 1984              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1985              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1986              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 1987              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_usart.c
     /tmp/ccXUBADK.s:20     .text.USART_DeInit:0000000000000000 $t
     /tmp/ccXUBADK.s:25     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/ccXUBADK.s:148    .text.USART_Init:0000000000000000 $t
     /tmp/ccXUBADK.s:153    .text.USART_Init:0000000000000000 USART_Init
     /tmp/ccXUBADK.s:380    .text.USART_StructInit:0000000000000000 $t
     /tmp/ccXUBADK.s:385    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/ccXUBADK.s:437    .text.USART_ClockInit:0000000000000000 $t
     /tmp/ccXUBADK.s:442    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/ccXUBADK.s:508    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/ccXUBADK.s:513    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/ccXUBADK.s:557    .text.USART_Cmd:0000000000000000 $t
     /tmp/ccXUBADK.s:562    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/ccXUBADK.s:615    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/ccXUBADK.s:620    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/ccXUBADK.s:668    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/ccXUBADK.s:673    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/ccXUBADK.s:727    .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/ccXUBADK.s:732    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/ccXUBADK.s:785    .text.USART_SendData:0000000000000000 $t
     /tmp/ccXUBADK.s:790    .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/ccXUBADK.s:826    .text.USART_ReceiveData:0000000000000000 $t
     /tmp/ccXUBADK.s:831    .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/ccXUBADK.s:866    .text.USART_SetAddress:0000000000000000 $t
     /tmp/ccXUBADK.s:871    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/ccXUBADK.s:919    .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/ccXUBADK.s:924    .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/ccXUBADK.s:977    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/ccXUBADK.s:982    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/ccXUBADK.s:1029   .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/ccXUBADK.s:1034   .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/ccXUBADK.s:1081   .text.USART_LINCmd:0000000000000000 $t
     /tmp/ccXUBADK.s:1086   .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/ccXUBADK.s:1139   .text.USART_SendBreak:0000000000000000 $t
     /tmp/ccXUBADK.s:1144   .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/ccXUBADK.s:1180   .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/ccXUBADK.s:1185   .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/ccXUBADK.s:1238   .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/ccXUBADK.s:1243   .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/ccXUBADK.s:1293   .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/ccXUBADK.s:1298   .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/ccXUBADK.s:1351   .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/ccXUBADK.s:1356   .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/ccXUBADK.s:1409   .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/ccXUBADK.s:1414   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/ccXUBADK.s:1461   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/ccXUBADK.s:1466   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/ccXUBADK.s:1519   .text.USART_DMACmd:0000000000000000 $t
     /tmp/ccXUBADK.s:1524   .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/ccXUBADK.s:1583   .text.USART_ITConfig:0000000000000000 $t
     /tmp/ccXUBADK.s:1588   .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/ccXUBADK.s:1695   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/ccXUBADK.s:1700   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/ccXUBADK.s:1754   .text.USART_ClearFlag:0000000000000000 $t
     /tmp/ccXUBADK.s:1759   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/ccXUBADK.s:1795   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/ccXUBADK.s:1800   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/ccXUBADK.s:1926   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/ccXUBADK.s:1931   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
