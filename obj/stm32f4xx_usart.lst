   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	USART_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	USART_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Initialization and Configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Data transfers
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Multi-Processor Communication
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - LIN mode
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Half-duplex mode
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Smartcard mode
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - IrDA mode
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - DMA transfers management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           - Interrupts and flags management 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @verbatim
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *      
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                                 How to use this driver
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          ===================================================================
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          1. Enable peripheral clock using the follwoing functions
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, UART4 or 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          2.  According to the USART mode, enable the GPIO clocks using 
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *              or/and SCLK). 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          3. Peripheral's alternate function: 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Configure the desired pin in alternate function by:
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                 - Call GPIO_Init() function
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          4. Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             flow control and Mode(Receiver/Transmitter) using the USART_Init()
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             function.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. For synchronous mode, enable the clock and program the polarity,
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             phase and last bit using the USART_ClockInit() function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          5. Enable the NVIC and the corresponding interrupt using the function 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *             USART_ITConfig() if you need to use interrupt mode. 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          6. When using the DMA mode 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Configure the DMA using DMA_Init() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *                   - Active the needed channel Request using USART_DMACmd() function
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          7. Enable the USART using the USART_Cmd() function.
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          8. Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          for more details
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          In order to reach higher communication baudrates, it is possible to
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd(
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          and before calling the function USART_Init().
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  @endverbatim
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                   Initialization and Configuration functions
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to initialize the USART 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   in asynchronous and in synchronous modes.
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    - For the asynchronous mode only these parameters can be configured: 
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Baud Rate
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Stop Bit
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Parity: If the parity is enabled, then the MSB bit of the data written
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           in the data register is transmitted but is changed by the parity bit.
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Depending on the frame length defined by the M bit (8-bits or 9-bits),
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the possible USART frame formats are as listed in the following table:
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Receiver/transmitter modes
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART_Init() function follows the USART  asynchronous configuration procedure
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   (details for the procedure are available in reference manual (RM0090)).
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   - For the synchronous mode in addition to the asynchronous mode parameters these 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     parameters should be also configured:
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock Enabled
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART polarity
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART phase
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART LastBit
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   These parameters can be configured using the USART_ClockInit() function.
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  28              		.loc 1 179 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  38              		.loc 1 183 0
  39 0002 4FF48053 		mov	r3, #4096
  40 0006 C4F20103 		movt	r3, 16385
  41 000a 9842     		cmp	r0, r3
  42 000c 08D1     		bne	.L2
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  43              		.loc 1 185 0
  44 000e 1020     		movs	r0, #16
  45              	.LVL1:
  46 0010 0121     		movs	r1, #1
  47 0012 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  48              	.LVL2:
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  49              		.loc 1 186 0
  50 0016 1020     		movs	r0, #16
  51 0018 0021     		movs	r1, #0
  52 001a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  53              	.LVL3:
  54 001e 08BD     		pop	{r3, pc}
  55              	.LVL4:
  56              	.L2:
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  57              		.loc 1 188 0
  58 0020 4FF48843 		mov	r3, #17408
  59 0024 C4F20003 		movt	r3, 16384
  60 0028 9842     		cmp	r0, r3
  61 002a 0AD1     		bne	.L4
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
  62              		.loc 1 190 0
  63 002c 4FF40030 		mov	r0, #131072
  64              	.LVL5:
  65 0030 0121     		movs	r1, #1
  66 0032 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              	.LVL6:
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  68              		.loc 1 191 0
  69 0036 4FF40030 		mov	r0, #131072
  70 003a 0021     		movs	r1, #0
  71 003c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72              	.LVL7:
  73 0040 08BD     		pop	{r3, pc}
  74              	.LVL8:
  75              	.L4:
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  76              		.loc 1 193 0
  77 0042 4FF49043 		mov	r3, #18432
  78 0046 C4F20003 		movt	r3, 16384
  79 004a 9842     		cmp	r0, r3
  80 004c 0AD1     		bne	.L5
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
  81              		.loc 1 195 0
  82 004e 4FF48020 		mov	r0, #262144
  83              	.LVL9:
  84 0052 0121     		movs	r1, #1
  85 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  86              	.LVL10:
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  87              		.loc 1 196 0
  88 0058 4FF48020 		mov	r0, #262144
  89 005c 0021     		movs	r1, #0
  90 005e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL11:
  92 0062 08BD     		pop	{r3, pc}
  93              	.LVL12:
  94              	.L5:
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  95              		.loc 1 198 0
  96 0064 4FF49843 		mov	r3, #19456
  97 0068 C4F20003 		movt	r3, 16384
  98 006c 9842     		cmp	r0, r3
  99 006e 0AD1     		bne	.L6
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 100              		.loc 1 200 0
 101 0070 4FF40020 		mov	r0, #524288
 102              	.LVL13:
 103 0074 0121     		movs	r1, #1
 104 0076 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 105              	.LVL14:
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 106              		.loc 1 201 0
 107 007a 4FF40020 		mov	r0, #524288
 108 007e 0021     		movs	r1, #0
 109 0080 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 110              	.LVL15:
 111 0084 08BD     		pop	{r3, pc}
 112              	.LVL16:
 113              	.L6:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
 114              		.loc 1 203 0
 115 0086 4FF4A043 		mov	r3, #20480
 116 008a C4F20003 		movt	r3, 16384
 117 008e 9842     		cmp	r0, r3
 118 0090 0AD1     		bne	.L7
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 119              		.loc 1 205 0
 120 0092 4FF48010 		mov	r0, #1048576
 121              	.LVL17:
 122 0096 0121     		movs	r1, #1
 123 0098 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 124              	.LVL18:
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 125              		.loc 1 206 0
 126 009c 4FF48010 		mov	r0, #1048576
 127 00a0 0021     		movs	r1, #0
 128 00a2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 129              	.LVL19:
 130 00a6 08BD     		pop	{r3, pc}
 131              	.LVL20:
 132              	.L7:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == USART6)
 133              		.loc 1 210 0
 134 00a8 4FF4A053 		mov	r3, #5120
 135 00ac C4F20103 		movt	r3, 16385
 136 00b0 9842     		cmp	r0, r3
 137 00b2 07D1     		bne	.L1
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 138              		.loc 1 212 0
 139 00b4 2020     		movs	r0, #32
 140              	.LVL21:
 141 00b6 0121     		movs	r1, #1
 142 00b8 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 143              	.LVL22:
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 144              		.loc 1 213 0
 145 00bc 2020     		movs	r0, #32
 146 00be 0021     		movs	r1, #0
 147 00c0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 148              	.LVL23:
 149              	.L1:
 150 00c4 08BD     		pop	{r3, pc}
 151              		.cfi_endproc
 152              	.LFE110:
 154 00c6 00BF     		.section	.text.USART_Init,"ax",%progbits
 155              		.align	2
 156              		.global	USART_Init
 157              		.thumb
 158              		.thumb_func
 160              	USART_Init:
 161              	.LFB111:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 162              		.loc 1 228 0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 16
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              	.LVL24:
 167 0000 30B5     		push	{r4, r5, lr}
 168              	.LCFI1:
 169              		.cfi_def_cfa_offset 12
 170              		.cfi_offset 4, -12
 171              		.cfi_offset 5, -8
 172              		.cfi_offset 14, -4
 173 0002 85B0     		sub	sp, sp, #20
 174              	.LCFI2:
 175              		.cfi_def_cfa_offset 32
 176 0004 0446     		mov	r4, r0
 177 0006 0D46     		mov	r5, r1
 178              	.LVL25:
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 179              		.loc 1 250 0
 180 0008 038A     		ldrh	r3, [r0, #16]
 181              	.LVL26:
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 182              		.loc 1 253 0
 183 000a 23F44053 		bic	r3, r3, #12288
 184              	.LVL27:
 185 000e 1B04     		lsls	r3, r3, #16
 186 0010 1B0C     		lsrs	r3, r3, #16
 187              	.LVL28:
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 188              		.loc 1 257 0
 189 0012 CA88     		ldrh	r2, [r1, #6]
 190              	.LVL29:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 191              		.loc 1 260 0
 192 0014 1343     		orrs	r3, r3, r2
 193              	.LVL30:
 194 0016 0382     		strh	r3, [r0, #16]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 195              		.loc 1 263 0
 196 0018 8389     		ldrh	r3, [r0, #12]
 197              	.LVL31:
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 198              		.loc 1 266 0
 199 001a 23F4B053 		bic	r3, r3, #5632
 200              	.LVL32:
 201 001e 23F00C03 		bic	r3, r3, #12
 202 0022 1B04     		lsls	r3, r3, #16
 203 0024 1B0C     		lsrs	r3, r3, #16
 204              	.LVL33:
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 205              		.loc 1 272 0
 206 0026 8888     		ldrh	r0, [r1, #4]
 207              	.LVL34:
 208 0028 0A89     		ldrh	r2, [r1, #8]
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 209              		.loc 1 273 0
 210 002a 4989     		ldrh	r1, [r1, #10]
 211              	.LVL35:
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 212              		.loc 1 272 0
 213 002c 0243     		orrs	r2, r2, r0
 214 002e 0A43     		orrs	r2, r2, r1
 215              	.LVL36:
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 216              		.loc 1 276 0
 217 0030 1343     		orrs	r3, r3, r2
 218              	.LVL37:
 219 0032 A381     		strh	r3, [r4, #12]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 220              		.loc 1 279 0
 221 0034 A38A     		ldrh	r3, [r4, #20]
 222              	.LVL38:
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 223              		.loc 1 282 0
 224 0036 23F44073 		bic	r3, r3, #768
 225              	.LVL39:
 226 003a 1B04     		lsls	r3, r3, #16
 227 003c 1B0C     		lsrs	r3, r3, #16
 228              	.LVL40:
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 229              		.loc 1 286 0
 230 003e AA89     		ldrh	r2, [r5, #12]
 231              	.LVL41:
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 232              		.loc 1 289 0
 233 0040 1343     		orrs	r3, r3, r2
 234              	.LVL42:
 235 0042 A382     		strh	r3, [r4, #20]	@ movhi
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 236              		.loc 1 293 0
 237 0044 6846     		mov	r0, sp
 238 0046 FFF7FEFF 		bl	RCC_GetClocksFreq
 239              	.LVL43:
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 240              		.loc 1 295 0
 241 004a 4FF48052 		mov	r2, #4096
 242 004e C4F20102 		movt	r2, 16385
 243 0052 4FF4A053 		mov	r3, #5120
 244 0056 C4F20103 		movt	r3, 16385
 245 005a 9C42     		cmp	r4, r3
 246 005c 18BF     		it	ne
 247 005e 9442     		cmpne	r4, r2
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 248              		.loc 1 297 0
 249 0060 0CBF     		ite	eq
 250 0062 039A     		ldreq	r2, [sp, #12]
 251              	.LVL44:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 252              		.loc 1 301 0
 253 0064 029A     		ldrne	r2, [sp, #8]
 254              	.LVL45:
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 255              		.loc 1 305 0
 256 0066 A389     		ldrh	r3, [r4, #12]
 257 0068 1BB2     		sxth	r3, r3
 258 006a 002B     		cmp	r3, #0
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 259              		.loc 1 308 0
 260 006c 02EB8202 		add	r2, r2, r2, lsl #2
 261              	.LVL46:
 262 0070 02EB8202 		add	r2, r2, r2, lsl #2
 263 0074 BDBF     		ittte	lt
 264 0076 2B68     		ldrlt	r3, [r5]
 265 0078 5B00     		lsllt	r3, r3, #1
 266 007a B2FBF3F2 		udivlt	r2, r2, r3
 267              	.LVL47:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 268              		.loc 1 313 0
 269 007e 2968     		ldrge	r1, [r5]
 270 0080 A4BF     		itt	ge
 271 0082 8900     		lslge	r1, r1, #2
 272 0084 B2FBF1F2 		udivge	r2, r2, r1
 273              	.LVL48:
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 274              		.loc 1 315 0
 275 0088 48F21F53 		movw	r3, #34079
 276 008c C5F2EB13 		movt	r3, 20971
 277 0090 A3FB0213 		umull	r1, r3, r3, r2
 278 0094 5B09     		lsrs	r3, r3, #5
 279              	.LVL49:
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 280              		.loc 1 318 0
 281 0096 1D01     		lsls	r5, r3, #4
 282              	.LVL50:
 283 0098 6420     		movs	r0, #100
 284 009a 03FB1023 		mls	r3, r3, r0, r2
 285              	.LVL51:
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 286              		.loc 1 321 0
 287 009e A089     		ldrh	r0, [r4, #12]
 288 00a0 00B2     		sxth	r0, r0
 289 00a2 0028     		cmp	r0, #0
 290 00a4 0BDA     		bge	.L13
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 291              		.loc 1 323 0
 292 00a6 DB00     		lsls	r3, r3, #3
 293              	.LVL52:
 294 00a8 3233     		adds	r3, r3, #50
 295 00aa 48F21F51 		movw	r1, #34079
 296 00ae C5F2EB11 		movt	r1, 20971
 297 00b2 A1FB0321 		umull	r2, r1, r1, r3
 298              	.LVL53:
 299 00b6 C1F34211 		ubfx	r1, r1, #5, #3
 300 00ba 2943     		orrs	r1, r1, r5
 301              	.LVL54:
 302 00bc 0AE0     		b	.L14
 303              	.LVL55:
 304              	.L13:
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 305              		.loc 1 327 0
 306 00be 1B01     		lsls	r3, r3, #4
 307              	.LVL56:
 308 00c0 3233     		adds	r3, r3, #50
 309 00c2 48F21F51 		movw	r1, #34079
 310 00c6 C5F2EB11 		movt	r1, 20971
 311 00ca A1FB0321 		umull	r2, r1, r1, r3
 312              	.LVL57:
 313 00ce C1F34311 		ubfx	r1, r1, #5, #4
 314 00d2 2943     		orrs	r1, r1, r5
 315              	.LVL58:
 316              	.L14:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 317              		.loc 1 331 0
 318 00d4 89B2     		uxth	r1, r1
 319              	.LVL59:
 320 00d6 2181     		strh	r1, [r4, #8]	@ movhi
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 321              		.loc 1 332 0
 322 00d8 05B0     		add	sp, sp, #20
 323              		@ sp needed
 324 00da 30BD     		pop	{r4, r5, pc}
 325              		.cfi_endproc
 326              	.LFE111:
 328              		.section	.text.USART_StructInit,"ax",%progbits
 329              		.align	2
 330              		.global	USART_StructInit
 331              		.thumb
 332              		.thumb_func
 334              	USART_StructInit:
 335              	.LFB112:
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 336              		.loc 1 341 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340              		@ link register save eliminated.
 341              	.LVL60:
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 342              		.loc 1 343 0
 343 0000 4FF41653 		mov	r3, #9600
 344 0004 0360     		str	r3, [r0]
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 345              		.loc 1 344 0
 346 0006 0023     		movs	r3, #0
 347 0008 8380     		strh	r3, [r0, #4]	@ movhi
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 348              		.loc 1 345 0
 349 000a C380     		strh	r3, [r0, #6]	@ movhi
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 350              		.loc 1 346 0
 351 000c 0381     		strh	r3, [r0, #8]	@ movhi
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 352              		.loc 1 347 0
 353 000e 0C22     		movs	r2, #12
 354 0010 4281     		strh	r2, [r0, #10]	@ movhi
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 355              		.loc 1 348 0
 356 0012 8381     		strh	r3, [r0, #12]	@ movhi
 357 0014 7047     		bx	lr
 358              		.cfi_endproc
 359              	.LFE112:
 361 0016 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 362              		.align	2
 363              		.global	USART_ClockInit
 364              		.thumb
 365              		.thumb_func
 367              	USART_ClockInit:
 368              	.LFB113:
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 369              		.loc 1 361 0
 370              		.cfi_startproc
 371              		@ args = 0, pretend = 0, frame = 0
 372              		@ frame_needed = 0, uses_anonymous_args = 0
 373              		@ link register save eliminated.
 374              	.LVL61:
 375 0000 30B4     		push	{r4, r5}
 376              	.LCFI3:
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 4, -8
 379              		.cfi_offset 5, -4
 380              	.LVL62:
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 381              		.loc 1 371 0
 382 0002 038A     		ldrh	r3, [r0, #16]
 383              	.LVL63:
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 384              		.loc 1 373 0
 385 0004 23F47063 		bic	r3, r3, #3840
 386              	.LVL64:
 387 0008 1B04     		lsls	r3, r3, #16
 388 000a 1B0C     		lsrs	r3, r3, #16
 389              	.LVL65:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 390              		.loc 1 379 0
 391 000c 0D88     		ldrh	r5, [r1]
 392 000e 4A88     		ldrh	r2, [r1, #2]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 393              		.loc 1 380 0
 394 0010 8C88     		ldrh	r4, [r1, #4]
 395 0012 C988     		ldrh	r1, [r1, #6]
 396              	.LVL66:
 397 0014 2A43     		orrs	r2, r2, r5
 398 0016 2243     		orrs	r2, r2, r4
 399 0018 0A43     		orrs	r2, r2, r1
 400              	.LVL67:
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 401              		.loc 1 382 0
 402 001a 1343     		orrs	r3, r3, r2
 403              	.LVL68:
 404 001c 0382     		strh	r3, [r0, #16]	@ movhi
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 405              		.loc 1 383 0
 406 001e 30BC     		pop	{r4, r5}
 407 0020 7047     		bx	lr
 408              		.cfi_endproc
 409              	.LFE113:
 411 0022 00BF     		.section	.text.USART_ClockStructInit,"ax",%progbits
 412              		.align	2
 413              		.global	USART_ClockStructInit
 414              		.thumb
 415              		.thumb_func
 417              	USART_ClockStructInit:
 418              	.LFB114:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 419              		.loc 1 392 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 0, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424              	.LVL69:
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 425              		.loc 1 394 0
 426 0000 0023     		movs	r3, #0
 427 0002 0380     		strh	r3, [r0]	@ movhi
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 428              		.loc 1 395 0
 429 0004 4380     		strh	r3, [r0, #2]	@ movhi
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 430              		.loc 1 396 0
 431 0006 8380     		strh	r3, [r0, #4]	@ movhi
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 432              		.loc 1 397 0
 433 0008 C380     		strh	r3, [r0, #6]	@ movhi
 434 000a 7047     		bx	lr
 435              		.cfi_endproc
 436              	.LFE114:
 438              		.section	.text.USART_Cmd,"ax",%progbits
 439              		.align	2
 440              		.global	USART_Cmd
 441              		.thumb
 442              		.thumb_func
 444              	USART_Cmd:
 445              	.LFB115:
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 446              		.loc 1 409 0
 447              		.cfi_startproc
 448              		@ args = 0, pretend = 0, frame = 0
 449              		@ frame_needed = 0, uses_anonymous_args = 0
 450              		@ link register save eliminated.
 451              	.LVL70:
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 452              		.loc 1 414 0
 453 0000 29B1     		cbz	r1, .L19
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 454              		.loc 1 417 0
 455 0002 8389     		ldrh	r3, [r0, #12]
 456 0004 9BB2     		uxth	r3, r3
 457 0006 43F40053 		orr	r3, r3, #8192
 458 000a 8381     		strh	r3, [r0, #12]	@ movhi
 459 000c 7047     		bx	lr
 460              	.L19:
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 461              		.loc 1 422 0
 462 000e 8389     		ldrh	r3, [r0, #12]
 463 0010 23F40053 		bic	r3, r3, #8192
 464 0014 1B04     		lsls	r3, r3, #16
 465 0016 1B0C     		lsrs	r3, r3, #16
 466 0018 8381     		strh	r3, [r0, #12]	@ movhi
 467 001a 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE115:
 471              		.section	.text.USART_SetPrescaler,"ax",%progbits
 472              		.align	2
 473              		.global	USART_SetPrescaler
 474              		.thumb
 475              		.thumb_func
 477              	USART_SetPrescaler:
 478              	.LFB116:
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 479              		.loc 1 435 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484              	.LVL71:
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 485              		.loc 1 440 0
 486 0000 038B     		ldrh	r3, [r0, #24]
 487 0002 03F47F43 		and	r3, r3, #65280
 488 0006 0383     		strh	r3, [r0, #24]	@ movhi
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 489              		.loc 1 442 0
 490 0008 038B     		ldrh	r3, [r0, #24]
 491 000a 9BB2     		uxth	r3, r3
 492 000c 1943     		orrs	r1, r1, r3
 493              	.LVL72:
 494 000e 0183     		strh	r1, [r0, #24]	@ movhi
 495 0010 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE116:
 499 0012 00BF     		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 500              		.align	2
 501              		.global	USART_OverSampling8Cmd
 502              		.thumb
 503              		.thumb_func
 505              	USART_OverSampling8Cmd:
 506              	.LFB117:
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 507              		.loc 1 456 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 0
 510              		@ frame_needed = 0, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512              	.LVL73:
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 513              		.loc 1 461 0
 514 0000 39B1     		cbz	r1, .L23
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 515              		.loc 1 464 0
 516 0002 8389     		ldrh	r3, [r0, #12]
 517 0004 6FEA4343 		mvn	r3, r3, lsl #17
 518 0008 6FEA5343 		mvn	r3, r3, lsr #17
 519 000c 9BB2     		uxth	r3, r3
 520 000e 8381     		strh	r3, [r0, #12]	@ movhi
 521 0010 7047     		bx	lr
 522              	.L23:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 523              		.loc 1 469 0
 524 0012 8389     		ldrh	r3, [r0, #12]
 525 0014 C3F30E03 		ubfx	r3, r3, #0, #15
 526 0018 8381     		strh	r3, [r0, #12]	@ movhi
 527 001a 7047     		bx	lr
 528              		.cfi_endproc
 529              	.LFE117:
 531              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 532              		.align	2
 533              		.global	USART_OneBitMethodCmd
 534              		.thumb
 535              		.thumb_func
 537              	USART_OneBitMethodCmd:
 538              	.LFB118:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 539              		.loc 1 482 0
 540              		.cfi_startproc
 541              		@ args = 0, pretend = 0, frame = 0
 542              		@ frame_needed = 0, uses_anonymous_args = 0
 543              		@ link register save eliminated.
 544              	.LVL74:
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 545              		.loc 1 487 0
 546 0000 29B1     		cbz	r1, .L26
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 547              		.loc 1 490 0
 548 0002 838A     		ldrh	r3, [r0, #20]
 549 0004 9BB2     		uxth	r3, r3
 550 0006 43F40063 		orr	r3, r3, #2048
 551 000a 8382     		strh	r3, [r0, #20]	@ movhi
 552 000c 7047     		bx	lr
 553              	.L26:
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 554              		.loc 1 495 0
 555 000e 838A     		ldrh	r3, [r0, #20]
 556 0010 23F40063 		bic	r3, r3, #2048
 557 0014 1B04     		lsls	r3, r3, #16
 558 0016 1B0C     		lsrs	r3, r3, #16
 559 0018 8382     		strh	r3, [r0, #20]	@ movhi
 560 001a 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE118:
 564              		.section	.text.USART_SendData,"ax",%progbits
 565              		.align	2
 566              		.global	USART_SendData
 567              		.thumb
 568              		.thumb_func
 570              	USART_SendData:
 571              	.LFB119:
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             Data transfers functions
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART data 
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   transfers.
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   During an USART reception, data shifts in least significant bit first through 
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   between the internal bus and the received shift register.
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   When a transmission is taking place, a write instruction to the USART_DR register 
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   stores the data in the TDR register and which is copied in the shift register 
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   at the end of the current transmission.
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The read access of the USART_DR register can be done using the USART_ReceiveData()
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   can be done using USART_SendData() function and stores the written data into 
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   TDR buffer.
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 572              		.loc 1 539 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 0
 575              		@ frame_needed = 0, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577              	.LVL75:
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 578              		.loc 1 545 0
 579 0000 C1F30801 		ubfx	r1, r1, #0, #9
 580              	.LVL76:
 581 0004 8180     		strh	r1, [r0, #4]	@ movhi
 582 0006 7047     		bx	lr
 583              		.cfi_endproc
 584              	.LFE119:
 586              		.section	.text.USART_ReceiveData,"ax",%progbits
 587              		.align	2
 588              		.global	USART_ReceiveData
 589              		.thumb
 590              		.thumb_func
 592              	USART_ReceiveData:
 593              	.LFB120:
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 594              		.loc 1 555 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 598              		@ link register save eliminated.
 599              	.LVL77:
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 600              		.loc 1 560 0
 601 0000 8088     		ldrh	r0, [r0, #4]
 602              	.LVL78:
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 603              		.loc 1 561 0
 604 0002 C0F30800 		ubfx	r0, r0, #0, #9
 605 0006 7047     		bx	lr
 606              		.cfi_endproc
 607              	.LFE120:
 609              		.section	.text.USART_SetAddress,"ax",%progbits
 610              		.align	2
 611              		.global	USART_SetAddress
 612              		.thumb
 613              		.thumb_func
 615              	USART_SetAddress:
 616              	.LFB121:
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     Multi-Processor Communication functions
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   multiprocessor communication.
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   For instance one of the USARTs can be the master, its TX output is connected to 
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the RX input of the other USART. The others are slaves, their respective TX outputs 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   are logically ANDed together and connected to the RX input of the master.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART multiprocessor communication is possible through the following procedure:
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode transmitter 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using USART_WakeUpConfig() function only for the slaves.
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the USART using the USART_Cmd() function.
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART Slave exit from mute mode when receive the wake up condition.
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 617              		.loc 1 606 0
 618              		.cfi_startproc
 619              		@ args = 0, pretend = 0, frame = 0
 620              		@ frame_needed = 0, uses_anonymous_args = 0
 621              		@ link register save eliminated.
 622              	.LVL79:
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 623              		.loc 1 612 0
 624 0000 038A     		ldrh	r3, [r0, #16]
 625 0002 23F00F03 		bic	r3, r3, #15
 626 0006 1B04     		lsls	r3, r3, #16
 627 0008 1B0C     		lsrs	r3, r3, #16
 628 000a 0382     		strh	r3, [r0, #16]	@ movhi
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 629              		.loc 1 614 0
 630 000c 038A     		ldrh	r3, [r0, #16]
 631 000e 9BB2     		uxth	r3, r3
 632 0010 1943     		orrs	r1, r1, r3
 633              	.LVL80:
 634 0012 0182     		strh	r1, [r0, #16]	@ movhi
 635 0014 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE121:
 639 0016 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 640              		.align	2
 641              		.global	USART_ReceiverWakeUpCmd
 642              		.thumb
 643              		.thumb_func
 645              	USART_ReceiverWakeUpCmd:
 646              	.LFB122:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 647              		.loc 1 626 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652              	.LVL81:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 653              		.loc 1 631 0
 654 0000 29B1     		cbz	r1, .L32
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 655              		.loc 1 634 0
 656 0002 8389     		ldrh	r3, [r0, #12]
 657 0004 9BB2     		uxth	r3, r3
 658 0006 43F00203 		orr	r3, r3, #2
 659 000a 8381     		strh	r3, [r0, #12]	@ movhi
 660 000c 7047     		bx	lr
 661              	.L32:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 662              		.loc 1 639 0
 663 000e 8389     		ldrh	r3, [r0, #12]
 664 0010 23F00203 		bic	r3, r3, #2
 665 0014 1B04     		lsls	r3, r3, #16
 666 0016 1B0C     		lsrs	r3, r3, #16
 667 0018 8381     		strh	r3, [r0, #12]	@ movhi
 668 001a 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE122:
 672              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 673              		.align	2
 674              		.global	USART_WakeUpConfig
 675              		.thumb
 676              		.thumb_func
 678              	USART_WakeUpConfig:
 679              	.LFB123:
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 680              		.loc 1 653 0
 681              		.cfi_startproc
 682              		@ args = 0, pretend = 0, frame = 0
 683              		@ frame_needed = 0, uses_anonymous_args = 0
 684              		@ link register save eliminated.
 685              	.LVL82:
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 686              		.loc 1 658 0
 687 0000 8389     		ldrh	r3, [r0, #12]
 688 0002 23F40063 		bic	r3, r3, #2048
 689 0006 1B04     		lsls	r3, r3, #16
 690 0008 1B0C     		lsrs	r3, r3, #16
 691 000a 8381     		strh	r3, [r0, #12]	@ movhi
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 692              		.loc 1 659 0
 693 000c 8389     		ldrh	r3, [r0, #12]
 694 000e 9BB2     		uxth	r3, r3
 695 0010 1943     		orrs	r1, r1, r3
 696              	.LVL83:
 697 0012 8181     		strh	r1, [r0, #12]	@ movhi
 698 0014 7047     		bx	lr
 699              		.cfi_endproc
 700              	.LFE123:
 702 0016 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 703              		.align	2
 704              		.global	USART_LINBreakDetectLengthConfig
 705              		.thumb
 706              		.thumb_func
 708              	USART_LINBreakDetectLengthConfig:
 709              	.LFB124:
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 LIN mode functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART LIN 
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Mode communication.
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the LIN standard.
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Only this LIN Feature is supported by the USART IP:
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     - LIN Master Synchronous Break send capability and LIN slave break detection
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       capability :  13-bit break generation and 10/11 bit break detection
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master transmitter communication is possible through the following procedure:
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the LIN mode using the USART_LINCmd() function.
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Send the break character using USART_SendBreak() function.
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART LIN Master receiver communication is possible through the following procedure:
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the LIN mode using the USART_LINCmd() function.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In LIN mode, the following bits must be kept cleared:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - CLKEN in the USART_CR2 register,
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 710              		.loc 1 722 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 0
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715              	.LVL84:
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 716              		.loc 1 727 0
 717 0000 038A     		ldrh	r3, [r0, #16]
 718 0002 23F02003 		bic	r3, r3, #32
 719 0006 1B04     		lsls	r3, r3, #16
 720 0008 1B0C     		lsrs	r3, r3, #16
 721 000a 0382     		strh	r3, [r0, #16]	@ movhi
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 722              		.loc 1 728 0
 723 000c 038A     		ldrh	r3, [r0, #16]
 724 000e 9BB2     		uxth	r3, r3
 725 0010 1943     		orrs	r1, r1, r3
 726              	.LVL85:
 727 0012 0182     		strh	r1, [r0, #16]	@ movhi
 728 0014 7047     		bx	lr
 729              		.cfi_endproc
 730              	.LFE124:
 732 0016 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 733              		.align	2
 734              		.global	USART_LINCmd
 735              		.thumb
 736              		.thumb_func
 738              	USART_LINCmd:
 739              	.LFB125:
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 740              		.loc 1 740 0
 741              		.cfi_startproc
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745              	.LVL86:
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 746              		.loc 1 745 0
 747 0000 29B1     		cbz	r1, .L37
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 748              		.loc 1 748 0
 749 0002 038A     		ldrh	r3, [r0, #16]
 750 0004 9BB2     		uxth	r3, r3
 751 0006 43F48043 		orr	r3, r3, #16384
 752 000a 0382     		strh	r3, [r0, #16]	@ movhi
 753 000c 7047     		bx	lr
 754              	.L37:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 755              		.loc 1 753 0
 756 000e 038A     		ldrh	r3, [r0, #16]
 757 0010 23F48043 		bic	r3, r3, #16384
 758 0014 1B04     		lsls	r3, r3, #16
 759 0016 1B0C     		lsrs	r3, r3, #16
 760 0018 0382     		strh	r3, [r0, #16]	@ movhi
 761 001a 7047     		bx	lr
 762              		.cfi_endproc
 763              	.LFE125:
 765              		.section	.text.USART_SendBreak,"ax",%progbits
 766              		.align	2
 767              		.global	USART_SendBreak
 768              		.thumb
 769              		.thumb_func
 771              	USART_SendBreak:
 772              	.LFB126:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 773              		.loc 1 764 0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778              	.LVL87:
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 779              		.loc 1 769 0
 780 0000 8389     		ldrh	r3, [r0, #12]
 781 0002 9BB2     		uxth	r3, r3
 782 0004 43F00103 		orr	r3, r3, #1
 783 0008 8381     		strh	r3, [r0, #12]	@ movhi
 784 000a 7047     		bx	lr
 785              		.cfi_endproc
 786              	.LFE126:
 788              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 789              		.align	2
 790              		.global	USART_HalfDuplexCmd
 791              		.thumb
 792              		.thumb_func
 794              	USART_HalfDuplexCmd:
 795              	.LFB127:
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                          Half-duplex mode function
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Half-duplex communication.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can be configured to follow a single-wire half-duplex protocol where 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the TX and RX lines are internally connected.
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART Half duplex communication is possible through the following procedure:
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         or Mode receiver and hardware flow control values using the USART_Init()
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function.
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the USART address using the USART_SetAddress() function.
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Enable the USART using the USART_Cmd() function.
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Enable the half duplex mode using USART_HalfDuplexCmd() function.
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The RX pin is no longer used
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In Half-duplex mode the following bits must be kept cleared:
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN and CLKEN bits in the USART_CR2 register.
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and IREN bits in the USART_CR3 register.
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 796              		.loc 1 817 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 0
 799              		@ frame_needed = 0, uses_anonymous_args = 0
 800              		@ link register save eliminated.
 801              	.LVL88:
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 802              		.loc 1 822 0
 803 0000 29B1     		cbz	r1, .L41
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 804              		.loc 1 825 0
 805 0002 838A     		ldrh	r3, [r0, #20]
 806 0004 9BB2     		uxth	r3, r3
 807 0006 43F00803 		orr	r3, r3, #8
 808 000a 8382     		strh	r3, [r0, #20]	@ movhi
 809 000c 7047     		bx	lr
 810              	.L41:
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 811              		.loc 1 830 0
 812 000e 838A     		ldrh	r3, [r0, #20]
 813 0010 23F00803 		bic	r3, r3, #8
 814 0014 1B04     		lsls	r3, r3, #16
 815 0016 1B0C     		lsrs	r3, r3, #16
 816 0018 8382     		strh	r3, [r0, #20]	@ movhi
 817 001a 7047     		bx	lr
 818              		.cfi_endproc
 819              	.LFE127:
 821              		.section	.text.USART_SetGuardTime,"ax",%progbits
 822              		.align	2
 823              		.global	USART_SetGuardTime
 824              		.thumb
 825              		.thumb_func
 827              	USART_SetGuardTime:
 828              	.LFB128:
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                Smartcard mode functions
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication.
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The Smartcard interface is designed to support asynchronous protocol Smartcards as
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   defined in the ISO 7816-3 standard.
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The USART can provide a clock to the smartcard through the SCLK output.
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In smartcard mode, SCLK is not associated to the communication but is simply derived 
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   from the internal peripheral input clock through a 5-bit prescaler.
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Smartcard communication is possible through the following procedure:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Program the USART clock using the USART_ClockInit() function as following:
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Clock enabled
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPOL Low
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART CPHA on first edge
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - USART Last Bit Clock Enabled
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Program the Smartcard interface using the USART_Init() function as following:
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Word Length = 9 Bits
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - 1.5 Stop Bit
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Even parity
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - BaudRate = 12096 baud
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Hardware flow control disabled (RTS and CTS signals)
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - Tx and Rx enabled
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Optionally you can enable the parity error interrupt using the USART_ITConfig()
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         function
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. Enable the USART using the USART_Cmd() function.
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. Enable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. Enable the Smartcard interface using the USART_SmartCardCmd() function.
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Please refer to the ISO 7816-3 specification for more details.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       between the two configurations.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In smartcard mode, the following bits must be kept cleared:
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN bit in the USART_CR2 register.
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - HDSEL and IREN bits in the USART_CR3 register.
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Smartcard mode is available on USART peripherals only (not available on UART4 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       and UART5 peripherals).
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 829              		.loc 1 902 0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              		@ link register save eliminated.
 834              	.LVL89:
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 835              		.loc 1 907 0
 836 0000 038B     		ldrh	r3, [r0, #24]
 837 0002 DBB2     		uxtb	r3, r3
 838 0004 0383     		strh	r3, [r0, #24]	@ movhi
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 839              		.loc 1 909 0
 840 0006 038B     		ldrh	r3, [r0, #24]
 841 0008 9BB2     		uxth	r3, r3
 842 000a 43EA0121 		orr	r1, r3, r1, lsl #8
 843              	.LVL90:
 844 000e 0183     		strh	r1, [r0, #24]	@ movhi
 845 0010 7047     		bx	lr
 846              		.cfi_endproc
 847              	.LFE128:
 849 0012 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 850              		.align	2
 851              		.global	USART_SmartCardCmd
 852              		.thumb
 853              		.thumb_func
 855              	USART_SmartCardCmd:
 856              	.LFB129:
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 857              		.loc 1 921 0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
 862              	.LVL91:
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 863              		.loc 1 925 0
 864 0000 29B1     		cbz	r1, .L45
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 865              		.loc 1 928 0
 866 0002 838A     		ldrh	r3, [r0, #20]
 867 0004 9BB2     		uxth	r3, r3
 868 0006 43F02003 		orr	r3, r3, #32
 869 000a 8382     		strh	r3, [r0, #20]	@ movhi
 870 000c 7047     		bx	lr
 871              	.L45:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 872              		.loc 1 933 0
 873 000e 838A     		ldrh	r3, [r0, #20]
 874 0010 23F02003 		bic	r3, r3, #32
 875 0014 1B04     		lsls	r3, r3, #16
 876 0016 1B0C     		lsrs	r3, r3, #16
 877 0018 8382     		strh	r3, [r0, #20]	@ movhi
 878 001a 7047     		bx	lr
 879              		.cfi_endproc
 880              	.LFE129:
 882              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 883              		.align	2
 884              		.global	USART_SmartCardNACKCmd
 885              		.thumb
 886              		.thumb_func
 888              	USART_SmartCardNACKCmd:
 889              	.LFB130:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 890              		.loc 1 946 0
 891              		.cfi_startproc
 892              		@ args = 0, pretend = 0, frame = 0
 893              		@ frame_needed = 0, uses_anonymous_args = 0
 894              		@ link register save eliminated.
 895              	.LVL92:
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 896              		.loc 1 950 0
 897 0000 29B1     		cbz	r1, .L48
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 898              		.loc 1 953 0
 899 0002 838A     		ldrh	r3, [r0, #20]
 900 0004 9BB2     		uxth	r3, r3
 901 0006 43F01003 		orr	r3, r3, #16
 902 000a 8382     		strh	r3, [r0, #20]	@ movhi
 903 000c 7047     		bx	lr
 904              	.L48:
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 905              		.loc 1 958 0
 906 000e 838A     		ldrh	r3, [r0, #20]
 907 0010 23F01003 		bic	r3, r3, #16
 908 0014 1B04     		lsls	r3, r3, #16
 909 0016 1B0C     		lsrs	r3, r3, #16
 910 0018 8382     		strh	r3, [r0, #20]	@ movhi
 911 001a 7047     		bx	lr
 912              		.cfi_endproc
 913              	.LFE130:
 915              		.section	.text.USART_IrDAConfig,"ax",%progbits
 916              		.align	2
 917              		.global	USART_IrDAConfig
 918              		.thumb
 919              		.thumb_func
 921              	USART_IrDAConfig:
 922              	.LFB131:
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                 IrDA mode functions
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to manage the USART 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   While receiving data, transmission should be avoided as the data to be transmitted
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   could be corrupted.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   IrDA communication is possible through the following procedure:
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         modes and hardware flow control values using the USART_Init() function.
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. Enable the USART using the USART_Cmd() function.
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. Configures the IrDA pulse width by configuring the prescaler using  
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_SetPrescaler() function.
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         using the USART_IrDAConfig() function.
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. Enable the IrDA using the USART_IrDACmd() function.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note A pulse of width less than two and greater than one PSC period(s) may or may
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       not be rejected.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note The receiver set up time should be managed by software. The IrDA physical layer
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       specification specifies a minimum of 10 ms delay between transmission and 
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       reception (IrDA is a half duplex protocol).
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note In IrDA mode, the following bits must be kept cleared:
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - LINEN, STOP and CLKEN bits in the USART_CR2 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         - SCEN and HDSEL bits in the USART_CR3 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 923              		.loc 1 1017 0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 0
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 927              		@ link register save eliminated.
 928              	.LVL93:
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 929              		.loc 1 1022 0
 930 0000 838A     		ldrh	r3, [r0, #20]
 931 0002 23F00403 		bic	r3, r3, #4
 932 0006 1B04     		lsls	r3, r3, #16
 933 0008 1B0C     		lsrs	r3, r3, #16
 934 000a 8382     		strh	r3, [r0, #20]	@ movhi
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 935              		.loc 1 1023 0
 936 000c 838A     		ldrh	r3, [r0, #20]
 937 000e 9BB2     		uxth	r3, r3
 938 0010 1943     		orrs	r1, r1, r3
 939              	.LVL94:
 940 0012 8182     		strh	r1, [r0, #20]	@ movhi
 941 0014 7047     		bx	lr
 942              		.cfi_endproc
 943              	.LFE131:
 945 0016 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 946              		.align	2
 947              		.global	USART_IrDACmd
 948              		.thumb
 949              		.thumb_func
 951              	USART_IrDACmd:
 952              	.LFB132:
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 953              		.loc 1 1035 0
 954              		.cfi_startproc
 955              		@ args = 0, pretend = 0, frame = 0
 956              		@ frame_needed = 0, uses_anonymous_args = 0
 957              		@ link register save eliminated.
 958              	.LVL95:
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 959              		.loc 1 1040 0
 960 0000 29B1     		cbz	r1, .L52
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 961              		.loc 1 1043 0
 962 0002 838A     		ldrh	r3, [r0, #20]
 963 0004 9BB2     		uxth	r3, r3
 964 0006 43F00203 		orr	r3, r3, #2
 965 000a 8382     		strh	r3, [r0, #20]	@ movhi
 966 000c 7047     		bx	lr
 967              	.L52:
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 968              		.loc 1 1048 0
 969 000e 838A     		ldrh	r3, [r0, #20]
 970 0010 23F00203 		bic	r3, r3, #2
 971 0014 1B04     		lsls	r3, r3, #16
 972 0016 1B0C     		lsrs	r3, r3, #16
 973 0018 8382     		strh	r3, [r0, #20]	@ movhi
 974 001a 7047     		bx	lr
 975              		.cfi_endproc
 976              	.LFE132:
 978              		.section	.text.USART_DMACmd,"ax",%progbits
 979              		.align	2
 980              		.global	USART_DMACmd
 981              		.thumb
 982              		.thumb_func
 984              	USART_DMACmd:
 985              	.LFB133:
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       DMA transfers management functions
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 986              		.loc 1 1081 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 0
 989              		@ frame_needed = 0, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991              	.LVL96:
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 992              		.loc 1 1087 0
 993 0000 22B1     		cbz	r2, .L55
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 994              		.loc 1 1091 0
 995 0002 838A     		ldrh	r3, [r0, #20]
 996 0004 9BB2     		uxth	r3, r3
 997 0006 1943     		orrs	r1, r1, r3
 998              	.LVL97:
 999 0008 8182     		strh	r1, [r0, #20]	@ movhi
 1000 000a 7047     		bx	lr
 1001              	.LVL98:
 1002              	.L55:
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1003              		.loc 1 1097 0
 1004 000c 838A     		ldrh	r3, [r0, #20]
 1005 000e C943     		mvns	r1, r1
 1006              	.LVL99:
 1007 0010 89B2     		uxth	r1, r1
 1008 0012 1940     		ands	r1, r1, r3
 1009 0014 8182     		strh	r1, [r0, #20]	@ movhi
 1010 0016 7047     		bx	lr
 1011              		.cfi_endproc
 1012              	.LFE133:
 1014              		.section	.text.USART_ITConfig,"ax",%progbits
 1015              		.align	2
 1016              		.global	USART_ITConfig
 1017              		.thumb
 1018              		.thumb_func
 1020              	USART_ITConfig:
 1021              	.LFB134:
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                    Interrupts and flags management functions
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   This subsection provides a set of functions allowing to configure the USART 
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupts sources, DMA channels requests and check or clear the flags or 
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   pending bits status.
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   The user should identify which mode will be used in his application to manage 
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Polling Mode
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   =============
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Polling Mode, the SPI communication can be managed by 10 flags:
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_FLAG_TXE : to indicate the status of the transmit buffer register
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_FLAG_RXNE : to indicate the status of the receive buffer register
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_FLAG_TC : to indicate the status of the transmit operation
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_FLAG_IDLE : to indicate the status of the Idle Line             
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_FLAG_CTS : to indicate the status of the nCTS input
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_FLAG_LBD : to indicate the status of the LIN break detection
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_FLAG_NE : to indicate if a noise error occur
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_FLAG_FE : to indicate if a frame error occur
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_FLAG_PE : to indicate if a parity error occur
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_FLAG_ORE : to indicate if an Overrun error occur
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       - void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Mode
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ===============
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   and 10 pending bits: 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Pending Bits:
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ------------- 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : to indicate the status of the transmit buffer register
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : to indicate the status of the receive buffer register
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : to indicate the status of the transmit operation
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : to indicate the status of the Idle Line             
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : to indicate the status of the nCTS input
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : to indicate the status of the LIN break detection
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_NE : to indicate if a noise error occur
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_FE : to indicate if a frame error occur
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      9. USART_IT_PE : to indicate if a parity error occur
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      10. USART_IT_ORE : to indicate if an Overrun error occur
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   Interrupt Source:
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   -----------------
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         empty interrupt.
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      3. USART_IT_TC : specifies the interrupt source for the Transmit complete 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      4. USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.             
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      5. USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      6. USART_IT_LBD : specifies the interrupt source for the LIN break detection
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                        interrupt. 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      7. USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      8. USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @note Some parameters are coded in order to use them as interrupt source or as pending bits.
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following functions:
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   DMA Mode
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ========
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      1. USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      2. USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   In this Mode it is advised to use the following function:
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      - void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState);
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1022              		.loc 1 1209 0
 1023              		.cfi_startproc
 1024              		@ args = 0, pretend = 0, frame = 0
 1025              		@ frame_needed = 0, uses_anonymous_args = 0
 1026              		@ link register save eliminated.
 1027              	.LVL100:
 1028 0000 10B4     		push	{r4}
 1029              	.LCFI4:
 1030              		.cfi_def_cfa_offset 4
 1031              		.cfi_offset 4, -4
 1032              	.LVL101:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1033              		.loc 1 1226 0
 1034 0002 C1F34213 		ubfx	r3, r1, #5, #3
 1035              	.LVL102:
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
 1036              		.loc 1 1229 0
 1037 0006 01F01F01 		and	r1, r1, #31
 1038              	.LVL103:
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1039              		.loc 1 1230 0
 1040 000a 0124     		movs	r4, #1
 1041 000c 04FA01F1 		lsl	r1, r4, r1
 1042              	.LVL104:
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1043              		.loc 1 1232 0
 1044 0010 A342     		cmp	r3, r4
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
 1045              		.loc 1 1234 0
 1046 0012 08BF     		it	eq
 1047 0014 0C30     		addeq	r0, r0, #12
 1048              	.LVL105:
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1049              		.loc 1 1232 0
 1050 0016 03D0     		beq	.L59
 1051              	.L58:
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1052              		.loc 1 1236 0
 1053 0018 022B     		cmp	r3, #2
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1054              		.loc 1 1238 0
 1055 001a 0CBF     		ite	eq
 1056 001c 1030     		addeq	r0, r0, #16
 1057              	.LVL106:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1058              		.loc 1 1242 0
 1059 001e 1430     		addne	r0, r0, #20
 1060              	.LVL107:
 1061              	.L59:
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1062              		.loc 1 1244 0
 1063 0020 1AB1     		cbz	r2, .L61
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 1064              		.loc 1 1246 0
 1065 0022 0368     		ldr	r3, [r0]
 1066              	.LVL108:
 1067 0024 1943     		orrs	r1, r1, r3
 1068              	.LVL109:
 1069 0026 0160     		str	r1, [r0]
 1070 0028 03E0     		b	.L57
 1071              	.LVL110:
 1072              	.L61:
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1073              		.loc 1 1250 0
 1074 002a 0368     		ldr	r3, [r0]
 1075              	.LVL111:
 1076 002c 23EA0101 		bic	r1, r3, r1
 1077              	.LVL112:
 1078 0030 0160     		str	r1, [r0]
 1079              	.L57:
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1080              		.loc 1 1252 0
 1081 0032 5DF8044B 		ldr	r4, [sp], #4
 1082 0036 7047     		bx	lr
 1083              		.cfi_endproc
 1084              	.LFE134:
 1086              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1087              		.align	2
 1088              		.global	USART_GetFlagStatus
 1089              		.thumb
 1090              		.thumb_func
 1092              	USART_GetFlagStatus:
 1093              	.LFB135:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1094              		.loc 1 1273 0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 0
 1097              		@ frame_needed = 0, uses_anonymous_args = 0
 1098              		@ link register save eliminated.
 1099              	.LVL113:
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1100              		.loc 1 1285 0
 1101 0000 0088     		ldrh	r0, [r0]
 1102              	.LVL114:
 1103 0002 0840     		ands	r0, r0, r1
 1104              	.LVL115:
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1105              		.loc 1 1294 0
 1106 0004 0030     		adds	r0, r0, #0
 1107 0006 18BF     		it	ne
 1108 0008 0120     		movne	r0, #1
 1109              	.LVL116:
 1110 000a 7047     		bx	lr
 1111              		.cfi_endproc
 1112              	.LFE135:
 1114              		.section	.text.USART_ClearFlag,"ax",%progbits
 1115              		.align	2
 1116              		.global	USART_ClearFlag
 1117              		.thumb
 1118              		.thumb_func
 1120              	USART_ClearFlag:
 1121              	.LFB136:
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1122              		.loc 1 1322 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 0
 1125              		@ frame_needed = 0, uses_anonymous_args = 0
 1126              		@ link register save eliminated.
 1127              	.LVL117:
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1128              		.loc 1 1333 0
 1129 0000 C943     		mvns	r1, r1
 1130              	.LVL118:
 1131 0002 89B2     		uxth	r1, r1
 1132 0004 0180     		strh	r1, [r0]	@ movhi
 1133 0006 7047     		bx	lr
 1134              		.cfi_endproc
 1135              	.LFE136:
 1137              		.section	.text.USART_GetITStatus,"ax",%progbits
 1138              		.align	2
 1139              		.global	USART_GetITStatus
 1140              		.thumb
 1141              		.thumb_func
 1143              	USART_GetITStatus:
 1144              	.LFB137:
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE:  OverRun Error interrupt
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1145              		.loc 1 1355 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149              		@ link register save eliminated.
 1150              	.LVL119:
 1151 0000 10B4     		push	{r4}
 1152              	.LCFI5:
 1153              		.cfi_def_cfa_offset 4
 1154              		.cfi_offset 4, -4
 1155              	.LVL120:
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1156              		.loc 1 1369 0
 1157 0002 C1F34213 		ubfx	r3, r1, #5, #3
 1158              	.LVL121:
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
 1159              		.loc 1 1371 0
 1160 0006 01F01F02 		and	r2, r1, #31
 1161              	.LVL122:
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1162              		.loc 1 1372 0
 1163 000a 0124     		movs	r4, #1
 1164 000c 9440     		lsls	r4, r4, r2
 1165              	.LVL123:
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1166              		.loc 1 1374 0
 1167 000e 012B     		cmp	r3, #1
 1168 0010 03D1     		bne	.L68
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
 1169              		.loc 1 1376 0
 1170 0012 8289     		ldrh	r2, [r0, #12]
 1171 0014 92B2     		uxth	r2, r2
 1172 0016 2240     		ands	r2, r2, r4
 1173              	.LVL124:
 1174 0018 05E0     		b	.L69
 1175              	.LVL125:
 1176              	.L68:
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1177              		.loc 1 1378 0
 1178 001a 022B     		cmp	r3, #2
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1179              		.loc 1 1380 0
 1180 001c 0CBF     		ite	eq
 1181 001e 028A     		ldrheq	r2, [r0, #16]
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1182              		.loc 1 1384 0
 1183 0020 828A     		ldrhne	r2, [r0, #20]
 1184 0022 92B2     		uxth	r2, r2
 1185 0024 2240     		ands	r2, r2, r4
 1186              	.LVL126:
 1187              	.L69:
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1188              		.loc 1 1387 0
 1189 0026 090A     		lsrs	r1, r1, #8
 1190              	.LVL127:
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1191              		.loc 1 1388 0
 1192 0028 0123     		movs	r3, #1
 1193              	.LVL128:
 1194 002a 03FA01F1 		lsl	r1, r3, r1
 1195              	.LVL129:
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1196              		.loc 1 1389 0
 1197 002e 0388     		ldrh	r3, [r0]
 1198 0030 9BB2     		uxth	r3, r3
 1199              	.LVL130:
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1200              		.loc 1 1390 0
 1201 0032 0B42     		tst	r3, r1
 1202 0034 0CBF     		ite	eq
 1203 0036 0023     		moveq	r3, #0
 1204 0038 0123     		movne	r3, #1
 1205              	.LVL131:
 1206 003a 002A     		cmp	r2, #0
 1207 003c 0CBF     		ite	eq
 1208 003e 0020     		moveq	r0, #0
 1209 0040 03F00100 		andne	r0, r3, #1
 1210              	.LVL132:
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1211              		.loc 1 1400 0
 1212 0044 5DF8044B 		ldr	r4, [sp], #4
 1213 0048 7047     		bx	lr
 1214              		.cfi_endproc
 1215              	.LFE137:
 1217 004a 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1218              		.align	2
 1219              		.global	USART_ClearITPendingBit
 1220              		.thumb
 1221              		.thumb_func
 1223              	USART_ClearITPendingBit:
 1224              	.LFB138:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1225              		.loc 1 1429 0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 0
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 1229              		@ link register save eliminated.
 1230              	.LVL133:
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
 1231              		.loc 1 1441 0
 1232 0000 090A     		lsrs	r1, r1, #8
 1233              	.LVL134:
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1234              		.loc 1 1442 0
 1235 0002 0123     		movs	r3, #1
 1236 0004 8B40     		lsls	r3, r3, r1
 1237              	.LVL135:
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1238              		.loc 1 1443 0
 1239 0006 DB43     		mvns	r3, r3
 1240              	.LVL136:
 1241 0008 9BB2     		uxth	r3, r3
 1242              	.LVL137:
 1243 000a 0380     		strh	r3, [r0]	@ movhi
 1244 000c 7047     		bx	lr
 1245              		.cfi_endproc
 1246              	.LFE138:
 1248 000e 00BF     		.text
 1249              	.Letext0:
 1250              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1251              		.file 3 "/usr/include/newlib/stdint.h"
 1252              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1253              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1254              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 1255              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_usart.c
     /tmp/cc7ZnJcH.s:20     .text.USART_DeInit:0000000000000000 $t
     /tmp/cc7ZnJcH.s:25     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/cc7ZnJcH.s:155    .text.USART_Init:0000000000000000 $t
     /tmp/cc7ZnJcH.s:160    .text.USART_Init:0000000000000000 USART_Init
     /tmp/cc7ZnJcH.s:329    .text.USART_StructInit:0000000000000000 $t
     /tmp/cc7ZnJcH.s:334    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/cc7ZnJcH.s:362    .text.USART_ClockInit:0000000000000000 $t
     /tmp/cc7ZnJcH.s:367    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/cc7ZnJcH.s:412    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/cc7ZnJcH.s:417    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/cc7ZnJcH.s:439    .text.USART_Cmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:444    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/cc7ZnJcH.s:472    .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/cc7ZnJcH.s:477    .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/cc7ZnJcH.s:500    .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:505    .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/cc7ZnJcH.s:532    .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:537    .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/cc7ZnJcH.s:565    .text.USART_SendData:0000000000000000 $t
     /tmp/cc7ZnJcH.s:570    .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/cc7ZnJcH.s:587    .text.USART_ReceiveData:0000000000000000 $t
     /tmp/cc7ZnJcH.s:592    .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/cc7ZnJcH.s:610    .text.USART_SetAddress:0000000000000000 $t
     /tmp/cc7ZnJcH.s:615    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/cc7ZnJcH.s:640    .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:645    .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/cc7ZnJcH.s:673    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/cc7ZnJcH.s:678    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/cc7ZnJcH.s:703    .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/cc7ZnJcH.s:708    .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/cc7ZnJcH.s:733    .text.USART_LINCmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:738    .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/cc7ZnJcH.s:766    .text.USART_SendBreak:0000000000000000 $t
     /tmp/cc7ZnJcH.s:771    .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/cc7ZnJcH.s:789    .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:794    .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/cc7ZnJcH.s:822    .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/cc7ZnJcH.s:827    .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/cc7ZnJcH.s:850    .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:855    .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/cc7ZnJcH.s:883    .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:888    .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/cc7ZnJcH.s:916    .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/cc7ZnJcH.s:921    .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/cc7ZnJcH.s:946    .text.USART_IrDACmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:951    .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/cc7ZnJcH.s:979    .text.USART_DMACmd:0000000000000000 $t
     /tmp/cc7ZnJcH.s:984    .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/cc7ZnJcH.s:1015   .text.USART_ITConfig:0000000000000000 $t
     /tmp/cc7ZnJcH.s:1020   .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/cc7ZnJcH.s:1087   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/cc7ZnJcH.s:1092   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/cc7ZnJcH.s:1115   .text.USART_ClearFlag:0000000000000000 $t
     /tmp/cc7ZnJcH.s:1120   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/cc7ZnJcH.s:1138   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/cc7ZnJcH.s:1143   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/cc7ZnJcH.s:1218   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/cc7ZnJcH.s:1223   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.104.27db1f93df4f1d1e209e6eb76355d4dc

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
