   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"uart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.rb_getc,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	rb_getc:
  25              	.LFB112:
  26              		.file 1 "src/ringbuf.h"
   1:src/ringbuf.h **** #ifndef RINGBUF_H
   2:src/ringbuf.h **** #define RINGBUF_H
   3:src/ringbuf.h **** 
   4:src/ringbuf.h **** #include <stdlib.h>
   5:src/ringbuf.h **** #include <string.h>
   6:src/ringbuf.h **** #include "stm32f4xx.h"
   7:src/ringbuf.h **** #include "FreeRTOS.h"
   8:src/ringbuf.h **** 
   9:src/ringbuf.h **** /**
  10:src/ringbuf.h ****  * Ringbuffer structure
  11:src/ringbuf.h ****  *
  12:src/ringbuf.h ****  */
  13:src/ringbuf.h **** struct ringbuf {
  14:src/ringbuf.h ****     char *buf;          ///< Pointer to buffer memory
  15:src/ringbuf.h ****     int   bufsize;      ///< Size of buffer memory
  16:src/ringbuf.h ****     volatile int pos;   ///< Current read position
  17:src/ringbuf.h ****     volatile int len;   ///< Length of data in buffer
  18:src/ringbuf.h **** };
  19:src/ringbuf.h **** 
  20:src/ringbuf.h **** 
  21:src/ringbuf.h **** /**
  22:src/ringbuf.h ****  * Allocate buffer memory
  23:src/ringbuf.h ****  *
  24:src/ringbuf.h ****  * \param   rb      pointer to ringbuffer struct
  25:src/ringbuf.h ****  * \param   bufsize requested buffer size
  26:src/ringbuf.h ****  * \return  size of allocated buffer
  27:src/ringbuf.h ****  */
  28:src/ringbuf.h **** static inline int rb_alloc(struct ringbuf *rb, int bufsize)
  29:src/ringbuf.h **** {
  30:src/ringbuf.h ****     rb->buf = malloc(bufsize);
  31:src/ringbuf.h ****     if (!rb->buf)
  32:src/ringbuf.h ****         bufsize = 0;
  33:src/ringbuf.h **** 
  34:src/ringbuf.h ****     rb->bufsize = bufsize;
  35:src/ringbuf.h ****     rb->pos = 0;
  36:src/ringbuf.h ****     rb->len = 0;
  37:src/ringbuf.h **** 
  38:src/ringbuf.h ****     return rb->bufsize;
  39:src/ringbuf.h **** }
  40:src/ringbuf.h **** 
  41:src/ringbuf.h **** 
  42:src/ringbuf.h **** /**
  43:src/ringbuf.h ****  * Free buffer memory
  44:src/ringbuf.h ****  *
  45:src/ringbuf.h ****  */
  46:src/ringbuf.h **** static inline void rb_free(struct ringbuf *rb)
  47:src/ringbuf.h **** {
  48:src/ringbuf.h ****     if (rb->buf)
  49:src/ringbuf.h ****         free(rb->buf);
  50:src/ringbuf.h **** 
  51:src/ringbuf.h ****     rb->buf = 0;
  52:src/ringbuf.h ****     rb->bufsize = 0;
  53:src/ringbuf.h ****     rb->len = 0;
  54:src/ringbuf.h ****     rb->pos = 0;
  55:src/ringbuf.h **** }
  56:src/ringbuf.h **** 
  57:src/ringbuf.h **** 
  58:src/ringbuf.h **** /**
  59:src/ringbuf.h ****  * Read a single byte from a buffer
  60:src/ringbuf.h ****  *
  61:src/ringbuf.h ****  * \param   rb    pointer to ringbuffer struct
  62:src/ringbuf.h ****  * \param   data  pointer to data byte
  63:src/ringbuf.h ****  * \return  number of bytes read (0 if buffer was empty)
  64:src/ringbuf.h ****  */
  65:src/ringbuf.h **** static inline int rb_getc(struct ringbuf *rb, char *data)
  66:src/ringbuf.h **** {
  27              		.loc 1 66 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  43 0008 3960     		str	r1, [r7]
  67:src/ringbuf.h ****     if (!rb->len)
  44              		.loc 1 67 0
  45 000a 7B68     		ldr	r3, [r7, #4]
  46 000c DB68     		ldr	r3, [r3, #12]
  47 000e 002B     		cmp	r3, #0
  48 0010 01D1     		bne	.L2
  68:src/ringbuf.h ****         return 0;
  49              		.loc 1 68 0
  50 0012 0023     		movs	r3, #0
  51 0014 21E0     		b	.L3
  52              	.L2:
  69:src/ringbuf.h **** 
  70:src/ringbuf.h ****     vPortEnterCritical();
  53              		.loc 1 70 0
  54 0016 FFF7FEFF 		bl	vPortEnterCritical
  71:src/ringbuf.h **** 
  72:src/ringbuf.h ****     *data = rb->buf[rb->pos++];
  55              		.loc 1 72 0
  56 001a 7B68     		ldr	r3, [r7, #4]
  57 001c 1A68     		ldr	r2, [r3]
  58 001e 7B68     		ldr	r3, [r7, #4]
  59 0020 9B68     		ldr	r3, [r3, #8]
  60 0022 581C     		adds	r0, r3, #1
  61 0024 7968     		ldr	r1, [r7, #4]
  62 0026 8860     		str	r0, [r1, #8]
  63 0028 1344     		add	r3, r3, r2
  64 002a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  65 002c 3B68     		ldr	r3, [r7]
  66 002e 1A70     		strb	r2, [r3]
  73:src/ringbuf.h **** 	if (rb->pos >= rb->bufsize)
  67              		.loc 1 73 0
  68 0030 7B68     		ldr	r3, [r7, #4]
  69 0032 9A68     		ldr	r2, [r3, #8]
  70 0034 7B68     		ldr	r3, [r7, #4]
  71 0036 5B68     		ldr	r3, [r3, #4]
  72 0038 9A42     		cmp	r2, r3
  73 003a 06DB     		blt	.L4
  74:src/ringbuf.h **** 		rb->pos -= rb->bufsize;
  74              		.loc 1 74 0
  75 003c 7B68     		ldr	r3, [r7, #4]
  76 003e 9A68     		ldr	r2, [r3, #8]
  77 0040 7B68     		ldr	r3, [r7, #4]
  78 0042 5B68     		ldr	r3, [r3, #4]
  79 0044 D21A     		subs	r2, r2, r3
  80 0046 7B68     		ldr	r3, [r7, #4]
  81 0048 9A60     		str	r2, [r3, #8]
  82              	.L4:
  75:src/ringbuf.h **** 	rb->len--;
  83              		.loc 1 75 0
  84 004a 7B68     		ldr	r3, [r7, #4]
  85 004c DB68     		ldr	r3, [r3, #12]
  86 004e 5A1E     		subs	r2, r3, #1
  87 0050 7B68     		ldr	r3, [r7, #4]
  88 0052 DA60     		str	r2, [r3, #12]
  76:src/ringbuf.h **** 
  77:src/ringbuf.h ****     vPortExitCritical();
  89              		.loc 1 77 0
  90 0054 FFF7FEFF 		bl	vPortExitCritical
  78:src/ringbuf.h ****     return 1;
  91              		.loc 1 78 0
  92 0058 0123     		movs	r3, #1
  93              	.L3:
  79:src/ringbuf.h **** }
  94              		.loc 1 79 0
  95 005a 1846     		mov	r0, r3
  96 005c 0837     		adds	r7, r7, #8
  97 005e BD46     		mov	sp, r7
  98              		@ sp needed
  99 0060 80BD     		pop	{r7, pc}
 100              		.cfi_endproc
 101              	.LFE112:
 103 0062 00BF     		.section	.text.rb_putc,"ax",%progbits
 104              		.align	2
 105              		.thumb
 106              		.thumb_func
 108              	rb_putc:
 109              	.LFB113:
  80:src/ringbuf.h **** 
  81:src/ringbuf.h **** 
  82:src/ringbuf.h **** /**
  83:src/ringbuf.h ****  * Write a single byte to a buffer
  84:src/ringbuf.h ****  *
  85:src/ringbuf.h ****  * \param   rb    pointer to ringbuffer struct
  86:src/ringbuf.h ****  * \param   data  pointer to data byte
  87:src/ringbuf.h ****  * \return  number of bytes written (0 if buffer was full)
  88:src/ringbuf.h ****  */
  89:src/ringbuf.h **** static inline int rb_putc(struct ringbuf *rb, const char data)
  90:src/ringbuf.h **** {
 110              		.loc 1 90 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 16
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 80B5     		push	{r7, lr}
 115              	.LCFI3:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 84B0     		sub	sp, sp, #16
 120              	.LCFI4:
 121              		.cfi_def_cfa_offset 24
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI5:
 124              		.cfi_def_cfa_register 7
 125 0006 7860     		str	r0, [r7, #4]
 126 0008 0B46     		mov	r3, r1
 127 000a FB70     		strb	r3, [r7, #3]
  91:src/ringbuf.h ****     if (rb->len >= rb->bufsize)
 128              		.loc 1 91 0
 129 000c 7B68     		ldr	r3, [r7, #4]
 130 000e DA68     		ldr	r2, [r3, #12]
 131 0010 7B68     		ldr	r3, [r7, #4]
 132 0012 5B68     		ldr	r3, [r3, #4]
 133 0014 9A42     		cmp	r2, r3
 134 0016 01DB     		blt	.L6
  92:src/ringbuf.h ****         return 0;
 135              		.loc 1 92 0
 136 0018 0023     		movs	r3, #0
 137 001a 1FE0     		b	.L7
 138              	.L6:
  93:src/ringbuf.h **** 
  94:src/ringbuf.h ****     vPortEnterCritical();
 139              		.loc 1 94 0
 140 001c FFF7FEFF 		bl	vPortEnterCritical
  95:src/ringbuf.h **** 
  96:src/ringbuf.h **** 	int i = rb->pos + rb->len;
 141              		.loc 1 96 0
 142 0020 7B68     		ldr	r3, [r7, #4]
 143 0022 9A68     		ldr	r2, [r3, #8]
 144 0024 7B68     		ldr	r3, [r7, #4]
 145 0026 DB68     		ldr	r3, [r3, #12]
 146 0028 1344     		add	r3, r3, r2
 147 002a FB60     		str	r3, [r7, #12]
  97:src/ringbuf.h **** 	if (i >= rb->bufsize)
 148              		.loc 1 97 0
 149 002c 7B68     		ldr	r3, [r7, #4]
 150 002e 5A68     		ldr	r2, [r3, #4]
 151 0030 FB68     		ldr	r3, [r7, #12]
 152 0032 9A42     		cmp	r2, r3
 153 0034 04DC     		bgt	.L8
  98:src/ringbuf.h **** 		i -= rb->bufsize;
 154              		.loc 1 98 0
 155 0036 7B68     		ldr	r3, [r7, #4]
 156 0038 5B68     		ldr	r3, [r3, #4]
 157 003a FA68     		ldr	r2, [r7, #12]
 158 003c D31A     		subs	r3, r2, r3
 159 003e FB60     		str	r3, [r7, #12]
 160              	.L8:
  99:src/ringbuf.h **** 
 100:src/ringbuf.h **** 	rb->buf[i] = data;
 161              		.loc 1 100 0
 162 0040 7B68     		ldr	r3, [r7, #4]
 163 0042 1A68     		ldr	r2, [r3]
 164 0044 FB68     		ldr	r3, [r7, #12]
 165 0046 1344     		add	r3, r3, r2
 166 0048 FA78     		ldrb	r2, [r7, #3]
 167 004a 1A70     		strb	r2, [r3]
 101:src/ringbuf.h **** 	rb->len++;
 168              		.loc 1 101 0
 169 004c 7B68     		ldr	r3, [r7, #4]
 170 004e DB68     		ldr	r3, [r3, #12]
 171 0050 5A1C     		adds	r2, r3, #1
 172 0052 7B68     		ldr	r3, [r7, #4]
 173 0054 DA60     		str	r2, [r3, #12]
 102:src/ringbuf.h **** 
 103:src/ringbuf.h ****     vPortExitCritical();
 174              		.loc 1 103 0
 175 0056 FFF7FEFF 		bl	vPortExitCritical
 104:src/ringbuf.h ****     return 1;
 176              		.loc 1 104 0
 177 005a 0123     		movs	r3, #1
 178              	.L7:
 105:src/ringbuf.h **** }
 179              		.loc 1 105 0
 180 005c 1846     		mov	r0, r3
 181 005e 1037     		adds	r7, r7, #16
 182 0060 BD46     		mov	sp, r7
 183              		@ sp needed
 184 0062 80BD     		pop	{r7, pc}
 185              		.cfi_endproc
 186              	.LFE113:
 188              		.section	.bss.__compound_literal.0,"aw",%nobits
 189              		.align	2
 192              	__compound_literal.0:
 193 0000 00000000 		.space	128
 193      00000000 
 193      00000000 
 193      00000000 
 193      00000000 
 194              		.section	.data.rx_buf,"aw",%progbits
 195              		.align	2
 198              	rx_buf:
 199 0000 00000000 		.word	__compound_literal.0
 200 0004 80000000 		.word	128
 201 0008 00000000 		.space	8
 201      00000000 
 202              		.section	.bss.__compound_literal.1,"aw",%nobits
 203              		.align	2
 206              	__compound_literal.1:
 207 0000 00000000 		.space	128
 207      00000000 
 207      00000000 
 207      00000000 
 207      00000000 
 208              		.section	.data.tx_buf,"aw",%progbits
 209              		.align	2
 212              	tx_buf:
 213 0000 00000000 		.word	__compound_literal.1
 214 0004 80000000 		.word	128
 215 0008 00000000 		.space	8
 215      00000000 
 216              		.section	.bss.uart_stats,"aw",%nobits
 217              		.align	2
 220              	uart_stats:
 221 0000 00000000 		.space	12
 221      00000000 
 221      00000000 
 222              		.section	.text.USART1_IRQHandler,"ax",%progbits
 223              		.align	2
 224              		.global	USART1_IRQHandler
 225              		.thumb
 226              		.thumb_func
 228              	USART1_IRQHandler:
 229              	.LFB114:
 230              		.file 2 "src/uart.c"
   1:src/uart.c    **** #include "uart.h"
   2:src/uart.c    **** #include "stm32f4xx.h"
   3:src/uart.c    **** #include "ringbuf.h"
   4:src/uart.c    **** #include <stdlib.h>
   5:src/uart.c    **** #include <stdio.h>
   6:src/uart.c    **** #include <errno.h>
   7:src/uart.c    **** 
   8:src/uart.c    **** #define RX_SIZE  128
   9:src/uart.c    **** #define TX_SIZE  128
  10:src/uart.c    **** 
  11:src/uart.c    **** static struct ringbuf rx_buf = { .buf = (char[RX_SIZE]) {}, .bufsize = RX_SIZE };
  12:src/uart.c    **** static struct ringbuf tx_buf = { .buf = (char[TX_SIZE]) {}, .bufsize = TX_SIZE };
  13:src/uart.c    **** 
  14:src/uart.c    **** static volatile struct uart_stats {
  15:src/uart.c    ****     uint32_t    rx_overrun;
  16:src/uart.c    ****     uint32_t    rx_bytes;
  17:src/uart.c    ****     uint32_t    tx_bytes;
  18:src/uart.c    **** } uart_stats;
  19:src/uart.c    **** 
  20:src/uart.c    **** 
  21:src/uart.c    **** void USART1_IRQHandler(void)
  22:src/uart.c    **** {
 231              		.loc 2 22 0
 232              		.cfi_startproc
 233              		@ args = 0, pretend = 0, frame = 8
 234              		@ frame_needed = 1, uses_anonymous_args = 0
 235 0000 80B5     		push	{r7, lr}
 236              	.LCFI6:
 237              		.cfi_def_cfa_offset 8
 238              		.cfi_offset 7, -8
 239              		.cfi_offset 14, -4
 240 0002 82B0     		sub	sp, sp, #8
 241              	.LCFI7:
 242              		.cfi_def_cfa_offset 16
 243 0004 00AF     		add	r7, sp, #0
 244              	.LCFI8:
 245              		.cfi_def_cfa_register 7
  23:src/uart.c    ****     if (USART1->SR & USART_SR_RXNE) {
 246              		.loc 2 23 0
 247 0006 4FF48053 		mov	r3, #4096
 248 000a C4F20103 		movt	r3, 16385
 249 000e 1B88     		ldrh	r3, [r3]	@ movhi
 250 0010 9BB2     		uxth	r3, r3
 251 0012 03F02003 		and	r3, r3, #32
 252 0016 002B     		cmp	r3, #0
 253 0018 27D0     		beq	.L10
  24:src/uart.c    ****         if (!rb_putc(&rx_buf, USART1->DR))
 254              		.loc 2 24 0
 255 001a 4FF48053 		mov	r3, #4096
 256 001e C4F20103 		movt	r3, 16385
 257 0022 9B88     		ldrh	r3, [r3, #4]	@ movhi
 258 0024 9BB2     		uxth	r3, r3
 259 0026 DBB2     		uxtb	r3, r3
 260 0028 40F20000 		movw	r0, #:lower16:rx_buf
 261 002c C0F20000 		movt	r0, #:upper16:rx_buf
 262 0030 1946     		mov	r1, r3
 263 0032 FFF7FEFF 		bl	rb_putc
 264 0036 0346     		mov	r3, r0
 265 0038 002B     		cmp	r3, #0
 266 003a 0BD1     		bne	.L11
  25:src/uart.c    ****             uart_stats.rx_overrun++;
 267              		.loc 2 25 0
 268 003c 40F20003 		movw	r3, #:lower16:uart_stats
 269 0040 C0F20003 		movt	r3, #:upper16:uart_stats
 270 0044 1B68     		ldr	r3, [r3]
 271 0046 5A1C     		adds	r2, r3, #1
 272 0048 40F20003 		movw	r3, #:lower16:uart_stats
 273 004c C0F20003 		movt	r3, #:upper16:uart_stats
 274 0050 1A60     		str	r2, [r3]
 275 0052 0AE0     		b	.L10
 276              	.L11:
  26:src/uart.c    ****         else
  27:src/uart.c    ****             uart_stats.rx_bytes++;
 277              		.loc 2 27 0
 278 0054 40F20003 		movw	r3, #:lower16:uart_stats
 279 0058 C0F20003 		movt	r3, #:upper16:uart_stats
 280 005c 5B68     		ldr	r3, [r3, #4]
 281 005e 5A1C     		adds	r2, r3, #1
 282 0060 40F20003 		movw	r3, #:lower16:uart_stats
 283 0064 C0F20003 		movt	r3, #:upper16:uart_stats
 284 0068 5A60     		str	r2, [r3, #4]
 285              	.L10:
  28:src/uart.c    ****     }
  29:src/uart.c    **** 
  30:src/uart.c    ****     if (USART1->SR & USART_SR_TXE) {
 286              		.loc 2 30 0
 287 006a 4FF48053 		mov	r3, #4096
 288 006e C4F20103 		movt	r3, 16385
 289 0072 1B88     		ldrh	r3, [r3]	@ movhi
 290 0074 9BB2     		uxth	r3, r3
 291 0076 03F08003 		and	r3, r3, #128
 292 007a 002B     		cmp	r3, #0
 293 007c 2AD0     		beq	.L9
 294              	.LBB2:
  31:src/uart.c    ****         char c;
  32:src/uart.c    ****         if (rb_getc(&tx_buf, &c)) {
 295              		.loc 2 32 0
 296 007e FB1D     		adds	r3, r7, #7
 297 0080 40F20000 		movw	r0, #:lower16:tx_buf
 298 0084 C0F20000 		movt	r0, #:upper16:tx_buf
 299 0088 1946     		mov	r1, r3
 300 008a FFF7FEFF 		bl	rb_getc
 301 008e 0346     		mov	r3, r0
 302 0090 002B     		cmp	r3, #0
 303 0092 06D0     		beq	.L13
  33:src/uart.c    ****             // send a queued byte
  34:src/uart.c    ****             //
  35:src/uart.c    ****             USART1->DR = c;
 304              		.loc 2 35 0
 305 0094 4FF48053 		mov	r3, #4096
 306 0098 C4F20103 		movt	r3, 16385
 307 009c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 308 009e 9A80     		strh	r2, [r3, #4]	@ movhi
 309 00a0 0DE0     		b	.L14
 310              	.L13:
  36:src/uart.c    ****         }
  37:src/uart.c    ****         else {
  38:src/uart.c    ****             // nothing to send, disable interrupt
  39:src/uart.c    ****             //
  40:src/uart.c    ****             USART1->CR1 &= ~USART_CR1_TXEIE;
 311              		.loc 2 40 0
 312 00a2 4FF48053 		mov	r3, #4096
 313 00a6 C4F20103 		movt	r3, 16385
 314 00aa 4FF48052 		mov	r2, #4096
 315 00ae C4F20102 		movt	r2, 16385
 316 00b2 9289     		ldrh	r2, [r2, #12]	@ movhi
 317 00b4 92B2     		uxth	r2, r2
 318 00b6 22F08002 		bic	r2, r2, #128
 319 00ba 92B2     		uxth	r2, r2
 320 00bc 9A81     		strh	r2, [r3, #12]	@ movhi
 321              	.L14:
  41:src/uart.c    ****         }
  42:src/uart.c    ****         uart_stats.tx_bytes++;
 322              		.loc 2 42 0 discriminator 1
 323 00be 40F20003 		movw	r3, #:lower16:uart_stats
 324 00c2 C0F20003 		movt	r3, #:upper16:uart_stats
 325 00c6 9B68     		ldr	r3, [r3, #8]
 326 00c8 5A1C     		adds	r2, r3, #1
 327 00ca 40F20003 		movw	r3, #:lower16:uart_stats
 328 00ce C0F20003 		movt	r3, #:upper16:uart_stats
 329 00d2 9A60     		str	r2, [r3, #8]
 330              	.L9:
 331              	.LBE2:
  43:src/uart.c    ****     }
  44:src/uart.c    **** }
 332              		.loc 2 44 0
 333 00d4 0837     		adds	r7, r7, #8
 334 00d6 BD46     		mov	sp, r7
 335              		@ sp needed
 336 00d8 80BD     		pop	{r7, pc}
 337              		.cfi_endproc
 338              	.LFE114:
 340 00da 00BF     		.section	.text.uart_chars_avail,"ax",%progbits
 341              		.align	2
 342              		.global	uart_chars_avail
 343              		.thumb
 344              		.thumb_func
 346              	uart_chars_avail:
 347              	.LFB115:
  45:src/uart.c    **** 
  46:src/uart.c    **** 
  47:src/uart.c    **** int uart_chars_avail(void)
  48:src/uart.c    **** {
 348              		.loc 2 48 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI9:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 00AF     		add	r7, sp, #0
 358              	.LCFI10:
 359              		.cfi_def_cfa_register 7
  49:src/uart.c    ****     return rx_buf.len;
 360              		.loc 2 49 0
 361 0004 40F20003 		movw	r3, #:lower16:rx_buf
 362 0008 C0F20003 		movt	r3, #:upper16:rx_buf
 363 000c DB68     		ldr	r3, [r3, #12]
  50:src/uart.c    **** }
 364              		.loc 2 50 0
 365 000e 1846     		mov	r0, r3
 366 0010 BD46     		mov	sp, r7
 367              		@ sp needed
 368 0012 5DF8047B 		ldr	r7, [sp], #4
 369 0016 7047     		bx	lr
 370              		.cfi_endproc
 371              	.LFE115:
 373              		.section	.text.uart_write_r,"ax",%progbits
 374              		.align	2
 375              		.global	uart_write_r
 376              		.thumb
 377              		.thumb_func
 379              	uart_write_r:
 380              	.LFB116:
  51:src/uart.c    **** 
  52:src/uart.c    **** 
  53:src/uart.c    **** ssize_t uart_write_r(struct _reent *r, int fd, const void *ptr, size_t len)
  54:src/uart.c    **** {
 381              		.loc 2 54 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 24
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385 0000 80B5     		push	{r7, lr}
 386              	.LCFI11:
 387              		.cfi_def_cfa_offset 8
 388              		.cfi_offset 7, -8
 389              		.cfi_offset 14, -4
 390 0002 86B0     		sub	sp, sp, #24
 391              	.LCFI12:
 392              		.cfi_def_cfa_offset 32
 393 0004 00AF     		add	r7, sp, #0
 394              	.LCFI13:
 395              		.cfi_def_cfa_register 7
 396 0006 F860     		str	r0, [r7, #12]
 397 0008 B960     		str	r1, [r7, #8]
 398 000a 7A60     		str	r2, [r7, #4]
 399 000c 3B60     		str	r3, [r7]
  55:src/uart.c    ****     const char *c = (const char*) ptr;
 400              		.loc 2 55 0
 401 000e 7B68     		ldr	r3, [r7, #4]
 402 0010 7B61     		str	r3, [r7, #20]
 403              	.LBB3:
  56:src/uart.c    **** 
  57:src/uart.c    ****     for (int i = 0; i < len; i++) {
 404              		.loc 2 57 0
 405 0012 0023     		movs	r3, #0
 406 0014 3B61     		str	r3, [r7, #16]
 407 0016 20E0     		b	.L18
 408              	.L20:
  58:src/uart.c    ****         while (!rb_putc(&tx_buf, *c));
 409              		.loc 2 58 0
 410 0018 00BF     		nop
 411              	.L19:
 412              		.loc 2 58 0 is_stmt 0 discriminator 1
 413 001a 7B69     		ldr	r3, [r7, #20]
 414 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 415 001e 40F20000 		movw	r0, #:lower16:tx_buf
 416 0022 C0F20000 		movt	r0, #:upper16:tx_buf
 417 0026 1946     		mov	r1, r3
 418 0028 FFF7FEFF 		bl	rb_putc
 419 002c 0346     		mov	r3, r0
 420 002e 002B     		cmp	r3, #0
 421 0030 F3D0     		beq	.L19
  59:src/uart.c    ****         c++;
 422              		.loc 2 59 0 is_stmt 1
 423 0032 7B69     		ldr	r3, [r7, #20]
 424 0034 0133     		adds	r3, r3, #1
 425 0036 7B61     		str	r3, [r7, #20]
  60:src/uart.c    **** 
  61:src/uart.c    ****         // Enable TX empty interrupt
  62:src/uart.c    ****         USART1->CR1 |= USART_CR1_TXEIE;
 426              		.loc 2 62 0
 427 0038 4FF48053 		mov	r3, #4096
 428 003c C4F20103 		movt	r3, 16385
 429 0040 4FF48052 		mov	r2, #4096
 430 0044 C4F20102 		movt	r2, 16385
 431 0048 9289     		ldrh	r2, [r2, #12]	@ movhi
 432 004a 92B2     		uxth	r2, r2
 433 004c 42F08002 		orr	r2, r2, #128
 434 0050 92B2     		uxth	r2, r2
 435 0052 9A81     		strh	r2, [r3, #12]	@ movhi
  57:src/uart.c    ****         while (!rb_putc(&tx_buf, *c));
 436              		.loc 2 57 0
 437 0054 3B69     		ldr	r3, [r7, #16]
 438 0056 0133     		adds	r3, r3, #1
 439 0058 3B61     		str	r3, [r7, #16]
 440              	.L18:
  57:src/uart.c    ****         while (!rb_putc(&tx_buf, *c));
 441              		.loc 2 57 0 is_stmt 0 discriminator 1
 442 005a 3A69     		ldr	r2, [r7, #16]
 443 005c 3B68     		ldr	r3, [r7]
 444 005e 9A42     		cmp	r2, r3
 445 0060 DAD3     		bcc	.L20
 446              	.LBE3:
  63:src/uart.c    ****     }
  64:src/uart.c    **** 
  65:src/uart.c    ****     return len;
 447              		.loc 2 65 0 is_stmt 1
 448 0062 3B68     		ldr	r3, [r7]
  66:src/uart.c    **** }
 449              		.loc 2 66 0
 450 0064 1846     		mov	r0, r3
 451 0066 1837     		adds	r7, r7, #24
 452 0068 BD46     		mov	sp, r7
 453              		@ sp needed
 454 006a 80BD     		pop	{r7, pc}
 455              		.cfi_endproc
 456              	.LFE116:
 458              		.section	.text.uart_read_r,"ax",%progbits
 459              		.align	2
 460              		.global	uart_read_r
 461              		.thumb
 462              		.thumb_func
 464              	uart_read_r:
 465              	.LFB117:
  67:src/uart.c    **** 
  68:src/uart.c    **** ssize_t uart_read_r(struct _reent *r, int fd, void *ptr, size_t len)
  69:src/uart.c    **** {
 466              		.loc 2 69 0
 467              		.cfi_startproc
 468              		@ args = 0, pretend = 0, frame = 24
 469              		@ frame_needed = 1, uses_anonymous_args = 0
 470 0000 80B5     		push	{r7, lr}
 471              	.LCFI14:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 7, -8
 474              		.cfi_offset 14, -4
 475 0002 86B0     		sub	sp, sp, #24
 476              	.LCFI15:
 477              		.cfi_def_cfa_offset 32
 478 0004 00AF     		add	r7, sp, #0
 479              	.LCFI16:
 480              		.cfi_def_cfa_register 7
 481 0006 F860     		str	r0, [r7, #12]
 482 0008 B960     		str	r1, [r7, #8]
 483 000a 7A60     		str	r2, [r7, #4]
 484 000c 3B60     		str	r3, [r7]
  70:src/uart.c    ****     while (!rx_buf.len);
 485              		.loc 2 70 0
 486 000e 00BF     		nop
 487              	.L23:
 488              		.loc 2 70 0 is_stmt 0 discriminator 1
 489 0010 40F20003 		movw	r3, #:lower16:rx_buf
 490 0014 C0F20003 		movt	r3, #:upper16:rx_buf
 491 0018 DB68     		ldr	r3, [r3, #12]
 492 001a 002B     		cmp	r3, #0
 493 001c F8D0     		beq	.L23
  71:src/uart.c    **** 
  72:src/uart.c    ****     if (len > rx_buf.len)
 494              		.loc 2 72 0 is_stmt 1
 495 001e 40F20003 		movw	r3, #:lower16:rx_buf
 496 0022 C0F20003 		movt	r3, #:upper16:rx_buf
 497 0026 DB68     		ldr	r3, [r3, #12]
 498 0028 1A46     		mov	r2, r3
 499 002a 3B68     		ldr	r3, [r7]
 500 002c 9A42     		cmp	r2, r3
 501 002e 05D2     		bcs	.L24
  73:src/uart.c    ****         len = rx_buf.len;
 502              		.loc 2 73 0
 503 0030 40F20003 		movw	r3, #:lower16:rx_buf
 504 0034 C0F20003 		movt	r3, #:upper16:rx_buf
 505 0038 DB68     		ldr	r3, [r3, #12]
 506 003a 3B60     		str	r3, [r7]
 507              	.L24:
  74:src/uart.c    **** 
  75:src/uart.c    ****     char *c = (char*)ptr;
 508              		.loc 2 75 0
 509 003c 7B68     		ldr	r3, [r7, #4]
 510 003e 7B61     		str	r3, [r7, #20]
 511              	.LBB4:
  76:src/uart.c    ****     for (int i = 0; i < len; i++)
 512              		.loc 2 76 0
 513 0040 0023     		movs	r3, #0
 514 0042 3B61     		str	r3, [r7, #16]
 515 0044 0CE0     		b	.L25
 516              	.L26:
  77:src/uart.c    ****         rb_getc(&rx_buf, c++);
 517              		.loc 2 77 0 discriminator 2
 518 0046 7B69     		ldr	r3, [r7, #20]
 519 0048 5A1C     		adds	r2, r3, #1
 520 004a 7A61     		str	r2, [r7, #20]
 521 004c 40F20000 		movw	r0, #:lower16:rx_buf
 522 0050 C0F20000 		movt	r0, #:upper16:rx_buf
 523 0054 1946     		mov	r1, r3
 524 0056 FFF7FEFF 		bl	rb_getc
  76:src/uart.c    ****     for (int i = 0; i < len; i++)
 525              		.loc 2 76 0 discriminator 2
 526 005a 3B69     		ldr	r3, [r7, #16]
 527 005c 0133     		adds	r3, r3, #1
 528 005e 3B61     		str	r3, [r7, #16]
 529              	.L25:
  76:src/uart.c    ****     for (int i = 0; i < len; i++)
 530              		.loc 2 76 0 is_stmt 0 discriminator 1
 531 0060 3A69     		ldr	r2, [r7, #16]
 532 0062 3B68     		ldr	r3, [r7]
 533 0064 9A42     		cmp	r2, r3
 534 0066 EED3     		bcc	.L26
 535              	.LBE4:
  78:src/uart.c    **** 
  79:src/uart.c    ****     return len;
 536              		.loc 2 79 0 is_stmt 1
 537 0068 3B68     		ldr	r3, [r7]
  80:src/uart.c    **** }
 538              		.loc 2 80 0
 539 006a 1846     		mov	r0, r3
 540 006c 1837     		adds	r7, r7, #24
 541 006e BD46     		mov	sp, r7
 542              		@ sp needed
 543 0070 80BD     		pop	{r7, pc}
 544              		.cfi_endproc
 545              	.LFE117:
 547 0072 00BF     		.section	.text.uart_poll_send,"ax",%progbits
 548              		.align	2
 549              		.global	uart_poll_send
 550              		.thumb
 551              		.thumb_func
 553              	uart_poll_send:
 554              	.LFB118:
  81:src/uart.c    **** 
  82:src/uart.c    **** 
  83:src/uart.c    **** void uart_poll_send(const char *ch)
  84:src/uart.c    **** {
 555              		.loc 2 84 0
 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 8
 558              		@ frame_needed = 1, uses_anonymous_args = 0
 559              		@ link register save eliminated.
 560 0000 80B4     		push	{r7}
 561              	.LCFI17:
 562              		.cfi_def_cfa_offset 4
 563              		.cfi_offset 7, -4
 564 0002 83B0     		sub	sp, sp, #12
 565              	.LCFI18:
 566              		.cfi_def_cfa_offset 16
 567 0004 00AF     		add	r7, sp, #0
 568              	.LCFI19:
 569              		.cfi_def_cfa_register 7
 570 0006 7860     		str	r0, [r7, #4]
  85:src/uart.c    ****     while (*ch) {
 571              		.loc 2 85 0
 572 0008 1EE0     		b	.L29
 573              	.L31:
  86:src/uart.c    ****         USART1->DR = *ch++ & 0xff;
 574              		.loc 2 86 0
 575 000a 4FF48053 		mov	r3, #4096
 576 000e C4F20103 		movt	r3, 16385
 577 0012 7A68     		ldr	r2, [r7, #4]
 578 0014 511C     		adds	r1, r2, #1
 579 0016 7960     		str	r1, [r7, #4]
 580 0018 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 581 001a 9A80     		strh	r2, [r3, #4]	@ movhi
  87:src/uart.c    ****         while (!(USART1->SR & USART_FLAG_TXE));
 582              		.loc 2 87 0
 583 001c 00BF     		nop
 584              	.L30:
 585              		.loc 2 87 0 is_stmt 0 discriminator 1
 586 001e 4FF48053 		mov	r3, #4096
 587 0022 C4F20103 		movt	r3, 16385
 588 0026 1B88     		ldrh	r3, [r3]	@ movhi
 589 0028 9BB2     		uxth	r3, r3
 590 002a 03F08003 		and	r3, r3, #128
 591 002e 002B     		cmp	r3, #0
 592 0030 F5D0     		beq	.L30
  88:src/uart.c    ****         uart_stats.tx_bytes++;
 593              		.loc 2 88 0 is_stmt 1
 594 0032 40F20003 		movw	r3, #:lower16:uart_stats
 595 0036 C0F20003 		movt	r3, #:upper16:uart_stats
 596 003a 9B68     		ldr	r3, [r3, #8]
 597 003c 5A1C     		adds	r2, r3, #1
 598 003e 40F20003 		movw	r3, #:lower16:uart_stats
 599 0042 C0F20003 		movt	r3, #:upper16:uart_stats
 600 0046 9A60     		str	r2, [r3, #8]
 601              	.L29:
  85:src/uart.c    ****         USART1->DR = *ch++ & 0xff;
 602              		.loc 2 85 0 discriminator 1
 603 0048 7B68     		ldr	r3, [r7, #4]
 604 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 605 004c 002B     		cmp	r3, #0
 606 004e DCD1     		bne	.L31
  89:src/uart.c    ****     }
  90:src/uart.c    **** }
 607              		.loc 2 90 0
 608 0050 0C37     		adds	r7, r7, #12
 609 0052 BD46     		mov	sp, r7
 610              		@ sp needed
 611 0054 5DF8047B 		ldr	r7, [sp], #4
 612 0058 7047     		bx	lr
 613              		.cfi_endproc
 614              	.LFE118:
 616 005a 00BF     		.section	.rodata
 617              		.align	2
 618              	.LC0:
 619 0000 25       		.byte	37
 620 0001 0F       		.byte	15
 621 0002 00       		.byte	0
 622 0003 01       		.byte	1
 623              		.section	.text.uart_init,"ax",%progbits
 624              		.align	2
 625              		.global	uart_init
 626              		.thumb
 627              		.thumb_func
 629              	uart_init:
 630              	.LFB119:
  91:src/uart.c    **** 
  92:src/uart.c    **** /**
  93:src/uart.c    ****  * Initialize UART.
  94:src/uart.c    ****  *
  95:src/uart.c    ****  * \param  baudrate  Baudrate
  96:src/uart.c    ****  *
  97:src/uart.c    ****  *  PB6   USART1_TXD
  98:src/uart.c    ****  *  PB7   USART1_RXD
  99:src/uart.c    ****  *
 100:src/uart.c    ****  */
 101:src/uart.c    **** void uart_init(int baudrate)
 102:src/uart.c    **** {
 631              		.loc 2 102 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 48
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635 0000 80B5     		push	{r7, lr}
 636              	.LCFI20:
 637              		.cfi_def_cfa_offset 8
 638              		.cfi_offset 7, -8
 639              		.cfi_offset 14, -4
 640 0002 8CB0     		sub	sp, sp, #48
 641              	.LCFI21:
 642              		.cfi_def_cfa_offset 56
 643 0004 00AF     		add	r7, sp, #0
 644              	.LCFI22:
 645              		.cfi_def_cfa_register 7
 646 0006 7860     		str	r0, [r7, #4]
 103:src/uart.c    ****     // Enable peripheral clocks
 104:src/uart.c    ****     //
 105:src/uart.c    ****     RCC->AHB1ENR |= RCC_AHB1Periph_GPIOB;
 647              		.loc 2 105 0
 648 0008 4FF46053 		mov	r3, #14336
 649 000c C4F20203 		movt	r3, 16386
 650 0010 4FF46052 		mov	r2, #14336
 651 0014 C4F20202 		movt	r2, 16386
 652 0018 126B     		ldr	r2, [r2, #48]
 653 001a 42F00202 		orr	r2, r2, #2
 654 001e 1A63     		str	r2, [r3, #48]
 106:src/uart.c    ****     RCC->APB2ENR |= RCC_APB2Periph_USART1;
 655              		.loc 2 106 0
 656 0020 4FF46053 		mov	r3, #14336
 657 0024 C4F20203 		movt	r3, 16386
 658 0028 4FF46052 		mov	r2, #14336
 659 002c C4F20202 		movt	r2, 16386
 660 0030 526C     		ldr	r2, [r2, #68]
 661 0032 42F01002 		orr	r2, r2, #16
 662 0036 5A64     		str	r2, [r3, #68]
 107:src/uart.c    **** 
 108:src/uart.c    ****     // Initialize Serial Port
 109:src/uart.c    ****     //
 110:src/uart.c    ****     GPIO_Init(GPIOB, &(GPIO_InitTypeDef) {
 663              		.loc 2 110 0
 664 0038 0023     		movs	r3, #0
 665 003a FB60     		str	r3, [r7, #12]
 666 003c 0023     		movs	r3, #0
 667 003e 3B61     		str	r3, [r7, #16]
 668 0040 4023     		movs	r3, #64
 669 0042 FB60     		str	r3, [r7, #12]
 670 0044 0223     		movs	r3, #2
 671 0046 3B74     		strb	r3, [r7, #16]
 672 0048 0223     		movs	r3, #2
 673 004a 7B74     		strb	r3, [r7, #17]
 674 004c 07F10C03 		add	r3, r7, #12
 675 0050 4FF48060 		mov	r0, #1024
 676 0054 C4F20200 		movt	r0, 16386
 677 0058 1946     		mov	r1, r3
 678 005a FFF7FEFF 		bl	GPIO_Init
 111:src/uart.c    ****         .GPIO_Pin   = GPIO_Pin_6,
 112:src/uart.c    ****         .GPIO_Speed = GPIO_Speed_50MHz,
 113:src/uart.c    ****         .GPIO_Mode  = GPIO_Mode_AF,
 114:src/uart.c    ****         .GPIO_OType = GPIO_OType_PP
 115:src/uart.c    ****     });
 116:src/uart.c    **** 
 117:src/uart.c    ****     GPIO_Init(GPIOB, &(GPIO_InitTypeDef) {
 679              		.loc 2 117 0
 680 005e 0023     		movs	r3, #0
 681 0060 7B61     		str	r3, [r7, #20]
 682 0062 0023     		movs	r3, #0
 683 0064 BB61     		str	r3, [r7, #24]
 684 0066 8023     		movs	r3, #128
 685 0068 7B61     		str	r3, [r7, #20]
 686 006a 0123     		movs	r3, #1
 687 006c FB76     		strb	r3, [r7, #27]
 688 006e 07F11403 		add	r3, r7, #20
 689 0072 4FF48060 		mov	r0, #1024
 690 0076 C4F20200 		movt	r0, 16386
 691 007a 1946     		mov	r1, r3
 692 007c FFF7FEFF 		bl	GPIO_Init
 118:src/uart.c    ****         .GPIO_Pin = GPIO_Pin_7,
 119:src/uart.c    ****         .GPIO_Mode = GPIO_Mode_IN,
 120:src/uart.c    ****         .GPIO_PuPd = GPIO_PuPd_UP
 121:src/uart.c    ****     });
 122:src/uart.c    **** 
 123:src/uart.c    ****     GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 693              		.loc 2 123 0
 694 0080 4FF48060 		mov	r0, #1024
 695 0084 C4F20200 		movt	r0, 16386
 696 0088 0621     		movs	r1, #6
 697 008a 0722     		movs	r2, #7
 698 008c FFF7FEFF 		bl	GPIO_PinAFConfig
 124:src/uart.c    ****     GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 699              		.loc 2 124 0
 700 0090 4FF48060 		mov	r0, #1024
 701 0094 C4F20200 		movt	r0, 16386
 702 0098 0721     		movs	r1, #7
 703 009a 0722     		movs	r2, #7
 704 009c FFF7FEFF 		bl	GPIO_PinAFConfig
 125:src/uart.c    **** 
 126:src/uart.c    ****     USART_Init(USART1, &(USART_InitTypeDef) {
 705              		.loc 2 126 0
 706 00a0 7B68     		ldr	r3, [r7, #4]
 707 00a2 FB61     		str	r3, [r7, #28]
 708 00a4 0023     		movs	r3, #0
 709 00a6 3B84     		strh	r3, [r7, #32]	@ movhi
 710 00a8 0023     		movs	r3, #0
 711 00aa 7B84     		strh	r3, [r7, #34]	@ movhi
 712 00ac 0023     		movs	r3, #0
 713 00ae BB84     		strh	r3, [r7, #36]	@ movhi
 714 00b0 0C23     		movs	r3, #12
 715 00b2 FB84     		strh	r3, [r7, #38]	@ movhi
 716 00b4 0023     		movs	r3, #0
 717 00b6 3B85     		strh	r3, [r7, #40]	@ movhi
 718 00b8 07F11C03 		add	r3, r7, #28
 719 00bc 4FF48050 		mov	r0, #4096
 720 00c0 C4F20100 		movt	r0, 16385
 721 00c4 1946     		mov	r1, r3
 722 00c6 FFF7FEFF 		bl	USART_Init
 127:src/uart.c    ****         .USART_BaudRate = baudrate,
 128:src/uart.c    ****         .USART_WordLength = USART_WordLength_8b,
 129:src/uart.c    ****         .USART_StopBits = USART_StopBits_1,
 130:src/uart.c    ****         .USART_Parity = USART_Parity_No ,
 131:src/uart.c    ****         .USART_HardwareFlowControl = USART_HardwareFlowControl_None,
 132:src/uart.c    ****         .USART_Mode = USART_Mode_Rx | USART_Mode_Tx
 133:src/uart.c    ****     });
 134:src/uart.c    **** 
 135:src/uart.c    ****     NVIC_Init(&(NVIC_InitTypeDef) {
 723              		.loc 2 135 0
 724 00ca 40F20003 		movw	r3, #:lower16:.LC0
 725 00ce C0F20003 		movt	r3, #:upper16:.LC0
 726 00d2 07F12C02 		add	r2, r7, #44
 727 00d6 1868     		ldr	r0, [r3]	@ unaligned
 728 00d8 1060     		str	r0, [r2]	@ unaligned
 729 00da 07F12C03 		add	r3, r7, #44
 730 00de 1846     		mov	r0, r3
 731 00e0 FFF7FEFF 		bl	NVIC_Init
 136:src/uart.c    ****         .NVIC_IRQChannel = USART1_IRQn,
 137:src/uart.c    ****         .NVIC_IRQChannelPreemptionPriority = configLIBRARY_KERNEL_INTERRUPT_PRIORITY,
 138:src/uart.c    ****         .NVIC_IRQChannelSubPriority = 0,
 139:src/uart.c    ****         .NVIC_IRQChannelCmd = ENABLE
 140:src/uart.c    ****     });
 141:src/uart.c    **** 
 142:src/uart.c    ****     USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 732              		.loc 2 142 0
 733 00e4 4FF48050 		mov	r0, #4096
 734 00e8 C4F20100 		movt	r0, 16385
 735 00ec 40F22551 		movw	r1, #1317
 736 00f0 0122     		movs	r2, #1
 737 00f2 FFF7FEFF 		bl	USART_ITConfig
 143:src/uart.c    ****     USART_Cmd(USART1, ENABLE);
 738              		.loc 2 143 0
 739 00f6 4FF48050 		mov	r0, #4096
 740 00fa C4F20100 		movt	r0, 16385
 741 00fe 0121     		movs	r1, #1
 742 0100 FFF7FEFF 		bl	USART_Cmd
 144:src/uart.c    **** }
 743              		.loc 2 144 0
 744 0104 3037     		adds	r7, r7, #48
 745 0106 BD46     		mov	sp, r7
 746              		@ sp needed
 747 0108 80BD     		pop	{r7, pc}
 748              		.cfi_endproc
 749              	.LFE119:
 751 010a 00BF     		.text
 752              	.Letext0:
 753              		.file 3 "/usr/include/newlib/machine/_default_types.h"
 754              		.file 4 "/usr/include/newlib/sys/lock.h"
 755              		.file 5 "/usr/include/newlib/sys/_types.h"
 756              		.file 6 "/usr/lib/gcc/arm-none-eabi/4.8.2/include/stddef.h"
 757              		.file 7 "/usr/include/newlib/sys/types.h"
 758              		.file 8 "/usr/include/newlib/sys/reent.h"
 759              		.file 9 "/usr/include/newlib/stdint.h"
 760              		.file 10 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 761              		.file 11 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 762              		.file 12 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 763              		.file 13 "libs/STM32F4xx_StdPeriph_Driver/inc/misc.h"
 764              		.file 14 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 uart.c
     /tmp/ccEY5zFz.s:20     .text.rb_getc:0000000000000000 $t
     /tmp/ccEY5zFz.s:24     .text.rb_getc:0000000000000000 rb_getc
     /tmp/ccEY5zFz.s:104    .text.rb_putc:0000000000000000 $t
     /tmp/ccEY5zFz.s:108    .text.rb_putc:0000000000000000 rb_putc
     /tmp/ccEY5zFz.s:189    .bss.__compound_literal.0:0000000000000000 $d
     /tmp/ccEY5zFz.s:192    .bss.__compound_literal.0:0000000000000000 __compound_literal.0
     /tmp/ccEY5zFz.s:195    .data.rx_buf:0000000000000000 $d
     /tmp/ccEY5zFz.s:198    .data.rx_buf:0000000000000000 rx_buf
     /tmp/ccEY5zFz.s:203    .bss.__compound_literal.1:0000000000000000 $d
     /tmp/ccEY5zFz.s:206    .bss.__compound_literal.1:0000000000000000 __compound_literal.1
     /tmp/ccEY5zFz.s:209    .data.tx_buf:0000000000000000 $d
     /tmp/ccEY5zFz.s:212    .data.tx_buf:0000000000000000 tx_buf
     /tmp/ccEY5zFz.s:217    .bss.uart_stats:0000000000000000 $d
     /tmp/ccEY5zFz.s:220    .bss.uart_stats:0000000000000000 uart_stats
     /tmp/ccEY5zFz.s:223    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccEY5zFz.s:228    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccEY5zFz.s:341    .text.uart_chars_avail:0000000000000000 $t
     /tmp/ccEY5zFz.s:346    .text.uart_chars_avail:0000000000000000 uart_chars_avail
     /tmp/ccEY5zFz.s:374    .text.uart_write_r:0000000000000000 $t
     /tmp/ccEY5zFz.s:379    .text.uart_write_r:0000000000000000 uart_write_r
     /tmp/ccEY5zFz.s:459    .text.uart_read_r:0000000000000000 $t
     /tmp/ccEY5zFz.s:464    .text.uart_read_r:0000000000000000 uart_read_r
     /tmp/ccEY5zFz.s:548    .text.uart_poll_send:0000000000000000 $t
     /tmp/ccEY5zFz.s:553    .text.uart_poll_send:0000000000000000 uart_poll_send
     /tmp/ccEY5zFz.s:617    .rodata:0000000000000000 $d
     /tmp/ccEY5zFz.s:618    .rodata:0000000000000000 .LC0
     /tmp/ccEY5zFz.s:624    .text.uart_init:0000000000000000 $t
     /tmp/ccEY5zFz.s:629    .text.uart_init:0000000000000000 uart_init
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
GPIO_Init
GPIO_PinAFConfig
USART_Init
NVIC_Init
USART_ITConfig
USART_Cmd
