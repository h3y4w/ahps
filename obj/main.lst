   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vUSART_command_handler,"ax",%progbits
  20              		.align	2
  21              		.global	vUSART_command_handler
  22              		.thumb
  23              		.thumb_func
  25              	vUSART_command_handler:
  26              	.LFB110:
  27              		.file 1 "src/main.c"
   1:src/main.c    **** #include "FreeRTOS.h"
   2:src/main.c    **** #include "task.h"
   3:src/main.c    **** #include "semphr.h"
   4:src/main.c    **** #include <math.h>
   5:src/main.c    **** #include <stdio.h>
   6:src/main.c    **** #include <stdlib.h>
   7:src/main.c    **** #include <stdarg.h>
   8:src/main.c    **** #include <unistd.h>
   9:src/main.c    **** #include "clock.h"
  10:src/main.c    **** #include "command_parser.h"
  11:src/main.c    **** #include "hbconfig.h"
  12:src/main.c    **** #include "hb_structs.h"
  13:src/main.c    **** #include "hbfuncs.h"
  14:src/main.c    **** 
  15:src/main.c    **** //NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW NEW //
  16:src/main.c    **** //------------------------------------------------------------------------------------------- //
  17:src/main.c    **** 
  18:src/main.c    **** // FIGURE OUT WHY USART_SPUTS DOESNT WORK, adding buffer and msg variable allow print but still fre
  19:src/main.c    **** //***************//
  20:src/main.c    **** //Task For Sending Data Via USART
  21:src/main.c    **** 
  22:src/main.c    **** //MAKE THIS A SEPERATE CONFIG FILE LATER//
  23:src/main.c    **** 
  24:src/main.c    **** 
  25:src/main.c    **** //-------------------------------//
  26:src/main.c    **** //FIND A WAY TO GET MUTEX FROM OTHER PRIOTIY.  IF THERE IS NO WAY SET UP A TMP BUFFER WHERE IT CAN 
  27:src/main.c    **** //FUNCTIONS TO COPY STRINGS TO SEPERATE BUFFER FOR COMMAND_HANDLER
  28:src/main.c    **** // USART_IRQ():
  29:src/main.c    **** //  create task copy_buffer() with high priority and pass pointer to buffer 
  30:src/main.c    **** //  copy_buffer() will then have a callback function which will be command_handler which will pass 
  31:src/main.c    **** //USE sent_mutex to check if usart has sent message
  32:src/main.c    **** 
  33:src/main.c    **** void vUSART_command_handler (char *pos) {
  28              		.loc 1 33 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0446     		mov	r4, r0
  39              	.LVL1:
  34:src/main.c    ****     char term = '\003';
  35:src/main.c    ****     replace_char(pos, ' ', term);
  40              		.loc 1 35 0
  41 0004 2021     		movs	r1, #32
  42 0006 0322     		movs	r2, #3
  43 0008 FFF7FEFF 		bl	replace_char
  44              	.LVL2:
  36:src/main.c    ****     command_routing(pos, term);
  45              		.loc 1 36 0
  46 000c 2046     		mov	r0, r4
  47 000e 0321     		movs	r1, #3
  48 0010 FFF7FEFF 		bl	command_routing
  49              	.LVL3:
  37:src/main.c    ****     vTaskDelete(NULL);
  50              		.loc 1 37 0
  51 0014 0020     		movs	r0, #0
  52 0016 FFF7FEFF 		bl	vTaskDelete
  53              	.LVL4:
  54 001a 10BD     		pop	{r4, pc}
  55              		.cfi_endproc
  56              	.LFE110:
  58              		.section	.text.idle_blinky,"ax",%progbits
  59              		.align	2
  60              		.global	idle_blinky
  61              		.thumb
  62              		.thumb_func
  64              	idle_blinky:
  65              	.LFB112:
  38:src/main.c    **** }
  39:src/main.c    **** 
  40:src/main.c    **** //INTERRUPT FOR TASK TIMES EPOCH
  41:src/main.c    **** HydroponicSystem hydroponics;
  42:src/main.c    **** LightingSystem lighting;
  43:src/main.c    **** ACSystem AC;
  44:src/main.c    **** 
  45:src/main.c    **** Timer_node* timer_list_head;
  46:src/main.c    **** 
  47:src/main.c    **** USART_rtos USART1_rtos;
  48:src/main.c    **** USART_rtos USART2_rtos;
  49:src/main.c    **** 
  50:src/main.c    **** void setSysTick(void){
  51:src/main.c    ****     if (SysTick_Config(SystemCoreClock / 1000)) {
  52:src/main.c    ****         while (1){};
  53:src/main.c    ****     }
  54:src/main.c    **** }
  55:src/main.c    **** 
  56:src/main.c    **** 
  57:src/main.c    **** void idle_blinky (void *pvParameters) {
  66              		.loc 1 57 0
  67              		.cfi_startproc
  68              		@ Volatile: function does not return.
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71              	.LVL5:
  72 0000 80B5     		push	{r7, lr}
  73              	.LCFI1:
  74              		.cfi_def_cfa_offset 8
  75              		.cfi_offset 7, -8
  76              		.cfi_offset 14, -4
  58:src/main.c    **** 
  59:src/main.c    ****     GPIO_SetBits(GPIOD, GPIO_Pin_4);
  77              		.loc 1 59 0
  78 0002 4FF44060 		mov	r0, #3072
  79              	.LVL6:
  80 0006 C4F20200 		movt	r0, 16386
  81 000a 1021     		movs	r1, #16
  82 000c FFF7FEFF 		bl	GPIO_SetBits
  83              	.LVL7:
  60:src/main.c    ****     while(1) {
  61:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
  84              		.loc 1 61 0
  85 0010 4FF44064 		mov	r4, #3072
  86 0014 C4F20204 		movt	r4, 16386
  87 0018 4FF48059 		mov	r9, #4096
  62:src/main.c    ****         delay_ms(500);
  88              		.loc 1 62 0
  89 001c 4FF4FA75 		mov	r5, #500
  63:src/main.c    **** 
  64:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
  90              		.loc 1 64 0
  91 0020 4FF40058 		mov	r8, #8192
  65:src/main.c    ****         delay_ms(500);
  66:src/main.c    **** 
  67:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
  92              		.loc 1 67 0
  93 0024 4FF48047 		mov	r7, #16384
  68:src/main.c    ****         delay_ms(500);
  69:src/main.c    **** 
  70:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
  94              		.loc 1 70 0
  95 0028 4FF40046 		mov	r6, #32768
  96              	.L3:
  61:src/main.c    ****         delay_ms(500);
  97              		.loc 1 61 0 discriminator 1
  98 002c 2046     		mov	r0, r4
  99 002e 4946     		mov	r1, r9
 100 0030 FFF7FEFF 		bl	GPIO_SetBits
 101              	.LVL8:
  62:src/main.c    **** 
 102              		.loc 1 62 0 discriminator 1
 103 0034 2846     		mov	r0, r5
 104 0036 FFF7FEFF 		bl	delay_ms
 105              	.LVL9:
  64:src/main.c    ****         delay_ms(500);
 106              		.loc 1 64 0 discriminator 1
 107 003a 2046     		mov	r0, r4
 108 003c 4146     		mov	r1, r8
 109 003e FFF7FEFF 		bl	GPIO_SetBits
 110              	.LVL10:
  65:src/main.c    **** 
 111              		.loc 1 65 0 discriminator 1
 112 0042 2846     		mov	r0, r5
 113 0044 FFF7FEFF 		bl	delay_ms
 114              	.LVL11:
  67:src/main.c    ****         delay_ms(500);
 115              		.loc 1 67 0 discriminator 1
 116 0048 2046     		mov	r0, r4
 117 004a 3946     		mov	r1, r7
 118 004c FFF7FEFF 		bl	GPIO_SetBits
 119              	.LVL12:
  68:src/main.c    **** 
 120              		.loc 1 68 0 discriminator 1
 121 0050 2846     		mov	r0, r5
 122 0052 FFF7FEFF 		bl	delay_ms
 123              	.LVL13:
 124              		.loc 1 70 0 discriminator 1
 125 0056 2046     		mov	r0, r4
 126 0058 3146     		mov	r1, r6
 127 005a FFF7FEFF 		bl	GPIO_SetBits
 128              	.LVL14:
  71:src/main.c    ****         delay_ms(500);
 129              		.loc 1 71 0 discriminator 1
 130 005e 2846     		mov	r0, r5
 131 0060 FFF7FEFF 		bl	delay_ms
 132              	.LVL15:
  72:src/main.c    **** 
  73:src/main.c    ****         GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 133              		.loc 1 73 0 discriminator 1
 134 0064 2046     		mov	r0, r4
 135 0066 4FF47041 		mov	r1, #61440
 136 006a FFF7FEFF 		bl	GPIO_ResetBits
 137              	.LVL16:
  74:src/main.c    ****         delay_ms(500);
 138              		.loc 1 74 0 discriminator 1
 139 006e 2846     		mov	r0, r5
 140 0070 FFF7FEFF 		bl	delay_ms
 141              	.LVL17:
 142 0074 DAE7     		b	.L3
 143              		.cfi_endproc
 144              	.LFE112:
 146 0076 00BF     		.section	.text.vPH_read_value,"ax",%progbits
 147              		.align	2
 148              		.global	vPH_read_value
 149              		.thumb
 150              		.thumb_func
 152              	vPH_read_value:
 153              	.LFB124:
  75:src/main.c    **** 
  76:src/main.c    **** 
  77:src/main.c    ****     }
  78:src/main.c    **** 
  79:src/main.c    **** }
  80:src/main.c    **** 
  81:src/main.c    **** 
  82:src/main.c    **** void USART1_IRQHandler(void){
  83:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
  84:src/main.c    **** 	if( USART_GetITStatus(USART1, USART_IT_RXNE)){
  85:src/main.c    ****         static unsigned int count=0;
  86:src/main.c    **** 
  87:src/main.c    **** 		
  88:src/main.c    **** 		//static uint8_t cnt = 0; // this counter is used to determine the string length
  89:src/main.c    **** 		char t = USART1->DR; // the character from the USART2 data register is saved in t
  90:src/main.c    **** 
  91:src/main.c    **** 
  92:src/main.c    ****         if (t == 8 || t== 127) {
  93:src/main.c    ****             USART1_rtos.write_pos--;
  94:src/main.c    ****             USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
  95:src/main.c    ****             USART_put(USART1, '\b');
  96:src/main.c    ****             USART_put(USART1, ' ');
  97:src/main.c    ****             USART_put(USART1, '\b');
  98:src/main.c    ****             return;
  99:src/main.c    **** 
 100:src/main.c    ****         }
 101:src/main.c    **** 
 102:src/main.c    **** 		// check if the received character is not the LF character (used to determine end of string) 
 103:src/main.c    **** 		// or the if the maximum string length has been been reached 
 104:src/main.c    **** 		else if/*(*/ (t != '\r')/* && (cnt< MAX_STRLEN-1) )*/{ 
 105:src/main.c    ****             count++;
 106:src/main.c    ****         if (USART1_rtos.write_pos == USART_BUFFER_LEN-1) USART1_rtos.write_pos=0;
 107:src/main.c    **** 
 108:src/main.c    **** 			USART1_rtos.buffer[USART1_rtos.write_pos] = t;
 109:src/main.c    ****             USART_put(USART1, t);
 110:src/main.c    ****             USART1_rtos.write_pos++;
 111:src/main.c    **** 
 112:src/main.c    **** 		}
 113:src/main.c    **** 
 114:src/main.c    **** 		else{ // otherwise reset the character counter and print newline 
 115:src/main.c    ****             if (count != 0) {
 116:src/main.c    ****                 
 117:src/main.c    ****                 USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 118:src/main.c    **** 
 119:src/main.c    ****                 USART_puts(USART1, "\r\n");
 120:src/main.c    **** 
 121:src/main.c    ****                 //char *pos = &USART1_received_string[USART1_write_pos-count];
 122:src/main.c    ****                 //char command[len];
 123:src/main.c    **** //                USART_readline(USART1, &command, len);
 124:src/main.c    ****                 char *pos = &USART1_rtos.buffer[USART1_rtos.write_pos-count];
 125:src/main.c    **** 
 126:src/main.c    **** 
 127:src/main.c    ****                 xTaskCreate(vUSART_command_handler, (signed char*)"vUSART_command_handler", 468, po
 128:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 129:src/main.c    **** 
 130:src/main.c    ****                 xSemaphoreGive(USART1_rtos.transmit_event_mutex);
 131:src/main.c    **** 
 132:src/main.c    ****                 count = 0;
 133:src/main.c    ****                 USART1_rtos.write_pos++;
 134:src/main.c    **** 
 135:src/main.c    ****             }
 136:src/main.c    ****             else USART_puts(USART1, "\r\n");
 137:src/main.c    **** 		}
 138:src/main.c    **** 	}
 139:src/main.c    **** }
 140:src/main.c    **** 
 141:src/main.c    **** /*
 142:src/main.c    **** void USART2_IRQHandler(void){
 143:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
 144:src/main.c    **** 	if( USART_GetITStatus(USART2, USART_IT_RXNE)){
 145:src/main.c    ****         static uint8_t count=0;
 146:src/main.c    **** 
 147:src/main.c    **** 		
 148:src/main.c    **** 		//static uint8_t cnt = 0; // this counter is used to determine the string length
 149:src/main.c    **** 		char t = USART2->DR; // the character from the USART2 data register is saved in t
 150:src/main.c    **** 
 151:src/main.c    ****         if (USART2_write_pos == MAX_STRLEN-1) USART2_write_pos=0;
 152:src/main.c    **** 
 153:src/main.c    ****         if (t == 8 || t== 127) {
 154:src/main.c    ****             USART2_write_pos--;
 155:src/main.c    ****             USART2_received_string[USART2_write_pos] = '\r';
 156:src/main.c    ****             USART_put(USART2, '\b');
 157:src/main.c    ****             USART_put(USART2, ' ');
 158:src/main.c    ****             USART_put(USART2, '\b');
 159:src/main.c    ****             return;
 160:src/main.c    **** 
 161:src/main.c    ****         }
 162:src/main.c    **** 
 163:src/main.c    **** 		// check if the received character is not the LF character (used to determine end of string) 
 164:src/main.c    **** 		// or the if the maximum string length has been been reached 
 165:src/main.c    **** 		else if(t != '\r') && (cnt< MAX_STRLEN-1) ){ 
 166:src/main.c    ****             count++;
 167:src/main.c    **** 			USART2_received_string[USART2_write_pos] = t;
 168:src/main.c    ****             USART_put(USART2, t);
 169:src/main.c    **** 
 170:src/main.c    **** 		}
 171:src/main.c    **** 
 172:src/main.c    **** 		else{ // otherwise reset the character counter and print newline 
 173:src/main.c    ****             if (count != 0) {
 174:src/main.c    ****                 
 175:src/main.c    ****                 USART2_received_string[USART2_write_pos] = '\r';
 176:src/main.c    ****                 USART_puts(USART2, "\r\n");
 177:src/main.c    **** 
 178:src/main.c    ****                 char *command = &USART2_received_string[USART2_write_pos-count];
 179:src/main.c    ****                 //change this to copy because it is volatile
 180:src/main.c    **** 
 181:src/main.c    ****                 xTaskCreate(handle_usart_command, (signed char*)"handle_uart_command", 128, command
 182:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 183:src/main.c    **** 
 184:src/main.c    **** 
 185:src/main.c    ****                 USART_puts(USART2, "HAVENT IMPLENETED WAITING FOR TRANSMIT\r\n");
 186:src/main.c    ****                 count = 0;
 187:src/main.c    ****             }
 188:src/main.c    ****             else USART_puts(USART2, "\r\n");
 189:src/main.c    **** 		}
 190:src/main.c    ****         USART2_write_pos++;
 191:src/main.c    **** 	}
 192:src/main.c    **** }
 193:src/main.c    **** 
 194:src/main.c    **** */
 195:src/main.c    **** 
 196:src/main.c    **** //Initialize GPIO and USART2
 197:src/main.c    **** //
 198:src/main.c    **** 
 199:src/main.c    **** void USART1_Init(void) {
 200:src/main.c    **** 
 201:src/main.c    ****     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 202:src/main.c    **** 
 203:src/main.c    ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);	
 204:src/main.c    **** 
 205:src/main.c    **** 	//Structure With Data For GPIO Configuration
 206:src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
 207:src/main.c    **** 
 208:src/main.c    **** 	//Structure With Data For USART Configuration
 209:src/main.c    **** 	USART_InitTypeDef USART_InitStructure;
 210:src/main.c    **** 
 211:src/main.c    ****     NVIC_InitTypeDef NVIC_InitStructure;
 212:src/main.c    **** 
 213:src/main.c    **** 	//GPIO Configuration
 214:src/main.c    ****   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6;
 215:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 216:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 217:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 218:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 219:src/main.c    **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 220:src/main.c    **** 
 221:src/main.c    **** 
 222:src/main.c    **** 	//Connect USART pins to AF
 223:src/main.c    **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 224:src/main.c    **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 225:src/main.c    **** 
 226:src/main.c    **** 
 227:src/main.c    **** 	//USART Parameters
 228:src/main.c    **** 	USART_InitStructure.USART_BaudRate = 38400;
 229:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 230:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 231:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 232:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 233:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 234:src/main.c    **** 
 235:src/main.c    **** 	//Configuring And Enabling USART2
 236:src/main.c    **** 	USART_Init(USART1, &USART_InitStructure);
 237:src/main.c    **** 
 238:src/main.c    **** 
 239:src/main.c    ****     USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //allow usart interrupt
 240:src/main.c    **** 
 241:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 242:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 243:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 244:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 245:src/main.c    **** 
 246:src/main.c    ****     NVIC_Init(&NVIC_InitStructure);
 247:src/main.c    **** 
 248:src/main.c    **** 	USART_Cmd(USART1, ENABLE);
 249:src/main.c    **** 
 250:src/main.c    **** 
 251:src/main.c    **** }
 252:src/main.c    **** void initx(void){
 253:src/main.c    **** 	//Enable GPIO Clocks For USART2
 254:src/main.c    ****         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 255:src/main.c    **** 
 256:src/main.c    **** 	//Enable Clocks for USART2
 257:src/main.c    ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
 258:src/main.c    **** 
 259:src/main.c    **** 	//Structure With Data For GPIO Configuration
 260:src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
 261:src/main.c    **** 
 262:src/main.c    **** 	//Structure With Data For USART Configuration
 263:src/main.c    **** 	USART_InitTypeDef USART_InitStructure;
 264:src/main.c    **** 
 265:src/main.c    ****     NVIC_InitTypeDef NVIC_InitStructure;
 266:src/main.c    **** 
 267:src/main.c    **** 	//GPIO Configuration
 268:src/main.c    ****   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 269:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 270:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 271:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 272:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 273:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 274:src/main.c    **** 
 275:src/main.c    **** 
 276:src/main.c    **** 	//Connect USART pins to AF
 277:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 278:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 279:src/main.c    **** 
 280:src/main.c    **** 	//Initialize LED
 281:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 282:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 283:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 284:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 285:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 286:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 287:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 288:src/main.c    **** 	//USART Parameters
 289:src/main.c    **** 
 290:src/main.c    **** 	USART_InitStructure.USART_BaudRate = 38400;
 291:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 292:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 293:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 294:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 295:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 296:src/main.c    **** 
 297:src/main.c    **** 	//Configuring And Enabling USART2
 298:src/main.c    **** 	USART_Init(USART2, &USART_InitStructure);
 299:src/main.c    **** 
 300:src/main.c    **** 
 301:src/main.c    ****     USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 302:src/main.c    **** 
 303:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 304:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 305:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 306:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 307:src/main.c    **** 
 308:src/main.c    ****     NVIC_Init(&NVIC_InitStructure);
 309:src/main.c    **** 
 310:src/main.c    **** 	USART_Cmd(USART2, ENABLE);
 311:src/main.c    **** }
 312:src/main.c    **** 
 313:src/main.c    **** void TIM_PWM_init() {
 314:src/main.c    ****     //TIMER SETUP
 315:src/main.c    ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE); //USART2
 316:src/main.c    ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); //USART1
 317:src/main.c    **** 
 318:src/main.c    **** 
 319:src/main.c    ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
 320:src/main.c    **** 
 321:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Period = 19999;
 322:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 84;
 323:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;//TIM_CKD_DIV1;
 324:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 325:src/main.c    **** 
 326:src/main.c    ****     TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
 327:src/main.c    ****     TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 328:src/main.c    **** 
 329:src/main.c    **** 
 330:src/main.c    ****     //pwm setup
 331:src/main.c    ****     
 332:src/main.c    ****     TIM_OCInitTypeDef TIM_OCInitStruct;
 333:src/main.c    ****     
 334:src/main.c    ****     TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 335:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 336:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0;
 337:src/main.c    ****     TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 338:src/main.c    ****     
 339:src/main.c    ****     TIM_OC1Init(TIM4, &TIM_OCInitStruct); //channel 1
 340:src/main.c    ****     TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 341:src/main.c    **** 
 342:src/main.c    ****     TIM_OC2Init(TIM4, &TIM_OCInitStruct); // channel 2
 343:src/main.c    ****     TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 344:src/main.c    **** 
 345:src/main.c    **** 
 346:src/main.c    ****     TIM_ARRPreloadConfig(TIM4, ENABLE);
 347:src/main.c    ****     TIM_Cmd(TIM4, ENABLE);
 348:src/main.c    **** }
 349:src/main.c    **** 
 350:src/main.c    **** 
 351:src/main.c    **** typedef struct {
 352:src/main.c    ****     PPump_Module *ppump;
 353:src/main.c    ****     int amount;
 354:src/main.c    **** 
 355:src/main.c    **** } vPPump_parameters;
 356:src/main.c    **** 
 357:src/main.c    **** 
 358:src/main.c    **** 
 359:src/main.c    **** typedef struct {
 360:src/main.c    ****     int status;
 361:src/main.c    ****     int delay;
 362:src/main.c    **** } vLight_parameters;
 363:src/main.c    **** 
 364:src/main.c    **** 
 365:src/main.c    **** 
 366:src/main.c    **** /*
 367:src/main.c    **** void System_update_member(NULL *system_member, NULL* member_value ) {
 368:src/main.c    ****     if (system_member && member_value) {
 369:src/main.c    ****         //do an if stsatement to check if system member and member value are of the same type
 370:src/main.c    ****         return;
 371:src/main.c    ****     }
 372:src/main.c    ****     //error
 373:src/main.c    **** }
 374:src/main.c    **** */
 375:src/main.c    **** 
 376:src/main.c    **** 
 377:src/main.c    **** 
 378:src/main.c    **** void vACSystem_Init(void) {
 379:src/main.c    ****     USART_rtos_packet packet, packet1;
 380:src/main.c    ****     packet.USARTx_rtos = &USART1_rtos;
 381:src/main.c    ****     USART_rtos_puts(&packet, "Init AC System...");
 382:src/main.c    **** 
 383:src/main.c    **** 
 384:src/main.c    ****     AC.state = SYSTEM_WRITING;
 385:src/main.c    **** 
 386:src/main.c    ****     AC.state = SYSTEM_WRITTEN;
 387:src/main.c    **** //    USART_puts(USART2, "AC successfully initialized...\r\n");
 388:src/main.c    **** 
 389:src/main.c    ****     packet1.USARTx_rtos = &USART1_rtos;
 390:src/main.c    ****     USART_rtos_puts(&packet1, " OK\r\n");
 391:src/main.c    **** 
 392:src/main.c    **** 
 393:src/main.c    ****     USART_rtos_wait_send(&packet);
 394:src/main.c    ****     USART_rtos_wait_send(&packet1);
 395:src/main.c    **** 
 396:src/main.c    ****     vTaskDelete(NULL);
 397:src/main.c    **** }
 398:src/main.c    **** 
 399:src/main.c    **** void vLightingSystem_Init(void) {
 400:src/main.c    ****     //USART_rtos_puts(USART2, "Init Lighting System...");
 401:src/main.c    **** 
 402:src/main.c    ****     lighting.state = SYSTEM_WRITING;
 403:src/main.c    **** 
 404:src/main.c    ****     lighting.state = SYSTEM_WRITTEN;
 405:src/main.c    ****     //USART_puts(USART2, "Lighting successfully initialized...\r\n");
 406:src/main.c    ****     
 407:src/main.c    ****     //USART_rtos_puts(USART2, " OK\r\n");
 408:src/main.c    **** 
 409:src/main.c    ****     vTaskDelete(NULL);
 410:src/main.c    **** }
 411:src/main.c    **** 
 412:src/main.c    **** 
 413:src/main.c    **** void HydroponicUDS_Init(void) {
 414:src/main.c    **** 
 415:src/main.c    ****     hydroponics.UDS_PHUp.state = MODULE_RUNNING;
 416:src/main.c    ****     hydroponics.UDS_PHDown.state = MODULE_RUNNING;
 417:src/main.c    ****     hydroponics.UDS_Nutrient.state = MODULE_RUNNING;
 418:src/main.c    **** 
 419:src/main.c    **** 
 420:src/main.c    **** 	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 421:src/main.c    **** 
 422:src/main.c    ****     GPIO_InitTypeDef gpio_ultrasonic;
 423:src/main.c    **** 
 424:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_3; //echo
 425:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP; //PP
 426:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 427:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 428:src/main.c    **** 
 429:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ultrasonic);
 430:src/main.c    **** 
 431:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_4; //trigger
 432:src/main.c    **** 	gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_NOPULL;
 433:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 434:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ultrasonic);
 435:src/main.c    **** 
 436:src/main.c    ****     hydroponics.UDS_PHUp.pin_in = UDS_PHUP_PIN_IN;
 437:src/main.c    ****     hydroponics.UDS_PHUp.port_in = UDS_PHUP_PORT_IN;
 438:src/main.c    ****     hydroponics.UDS_PHUp.pin_out = UDS_PHUP_PIN_OUT;
 439:src/main.c    ****     hydroponics.UDS_PHUp.port_out = UDS_PHUP_PORT_OUT;
 440:src/main.c    **** 
 441:src/main.c    **** 
 442:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_PHUp);
 443:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_PHDown);
 444:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_Nutrient);
 445:src/main.c    **** 
 446:src/main.c    **** 
 447:src/main.c    **** 
 448:src/main.c    **** }
 449:src/main.c    **** void HydroponicPPumps_Init(void) {
 450:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 451:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
 452:src/main.c    **** 
 453:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6; //echo
 454:src/main.c    **** 	gpio_ppump.GPIO_PuPd = GPIO_PuPd_NOPULL;
 455:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT;
 456:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; //PP
 457:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 458:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 459:src/main.c    **** 
 460:src/main.c    **** /*
 461:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6;
 462:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 463:src/main.c    **** 
 464:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6;
 465:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 466:src/main.c    **** */
 467:src/main.c    **** 
 468:src/main.c    ****     hydroponics.PPump_PHDown.port_out = GPIOC;
 469:src/main.c    ****     hydroponics.PPump_PHDown.pin_out = GPIO_Pin_6;
 470:src/main.c    **** 
 471:src/main.c    ****     hydroponics.PPump_PHUp.state = MODULE_RUNNING;
 472:src/main.c    ****     hydroponics.PPump_PHDown.state = MODULE_RUNNING;
 473:src/main.c    ****     hydroponics.PPump_Nutrient.state = MODULE_RUNNING;
 474:src/main.c    **** 
 475:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_PHUp, &hydroponics.UDS_PHUp);
 476:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_PHDown, &hydroponics.UDS_PHDown);
 477:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_Nutrient, &hydroponics.UDS_Nutrient);
 478:src/main.c    **** 
 479:src/main.c    **** /*
 480:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ppump);
 481:src/main.c    **** 
 482:src/main.c    ****     GPIO_ResetBits(GPIOD, GPIO_Pin_3);
 483:src/main.c    ****     delay_ms(1000);
 484:src/main.c    ****     GPIO_SetBits(GPIOD, GPIO_Pin_3);
 485:src/main.c    **** */
 486:src/main.c    **** 
 487:src/main.c    **** }
 488:src/main.c    **** 
 489:src/main.c    **** void vHydroponicSystem_Init(void) {
 490:src/main.c    **** 
 491:src/main.c    ****     USART_rtos_packet packet;
 492:src/main.c    ****     packet.USARTx_rtos = &USART1_rtos;
 493:src/main.c    ****     USART_rtos_puts(&packet, " Init Hydroponic System...");
 494:src/main.c    **** 
 495:src/main.c    ****     hydroponics.state = SYSTEM_WRITING;
 496:src/main.c    **** 
 497:src/main.c    ****     HydroponicPPumps_Init();
 498:src/main.c    ****     HydroponicUDS_Init();
 499:src/main.c    **** 
 500:src/main.c    **** 
 501:src/main.c    ****     hydroponics.PHMeter_Resvoir.state = MODULE_RUNNING;
 502:src/main.c    ****     PHMeter_Module_Init(&hydroponics.PHMeter_Resvoir);
 503:src/main.c    **** 
 504:src/main.c    **** 
 505:src/main.c    ****     if (hydroponics.PPump_PHUp.state == MODULE_STANDBY &&
 506:src/main.c    ****         hydroponics.PPump_PHDown.state == MODULE_STANDBY &&
 507:src/main.c    ****         hydroponics.PPump_Nutrient.state == MODULE_STANDBY &&  
 508:src/main.c    ****         hydroponics.UDS_PHUp.state == MODULE_STANDBY &&
 509:src/main.c    ****         hydroponics.UDS_PHDown.state == MODULE_STANDBY &&
 510:src/main.c    ****         hydroponics.UDS_Nutrient.state == MODULE_STANDBY &&
 511:src/main.c    ****         hydroponics.PHMeter_Resvoir.state == MODULE_STANDBY) {
 512:src/main.c    **** 
 513:src/main.c    ****         hydroponics.state = SYSTEM_WRITTEN;
 514:src/main.c    ****         //USART_puts(USART2, "Hydroponics successfully initialized...\r\n");
 515:src/main.c    ****     }
 516:src/main.c    **** 
 517:src/main.c    ****     else {
 518:src/main.c    ****         //USART2_rtos_puts("Hydroponics could not initialize...\r\n");
 519:src/main.c    **** 
 520:src/main.c    ****         hydroponics.state = SYSTEM_ERROR;
 521:src/main.c    ****         //xTaskCreate(vHydroponicSystem_Init, (signed char*)"vHydroponicSystem_Init", 64, NULL, tsk
 522:src/main.c    **** 
 523:src/main.c    ****     }
 524:src/main.c    ****     //vTaskDelay() Delay for a little than do the task again
 525:src/main.c    ****     //
 526:src/main.c    ****     //USART_rtos_puts(USART2, " OK\r\n");
 527:src/main.c    **** 
 528:src/main.c    ****     USART_rtos_packet packet1;
 529:src/main.c    ****     packet1.USARTx_rtos = &USART1_rtos;
 530:src/main.c    ****     USART_rtos_puts(&packet1, " Ok\r\n");
 531:src/main.c    **** 
 532:src/main.c    ****     USART_rtos_wait_send(&packet);
 533:src/main.c    ****     USART_rtos_wait_send(&packet1);
 534:src/main.c    **** 
 535:src/main.c    ****     vTaskDelete(NULL);
 536:src/main.c    **** }
 537:src/main.c    **** 
 538:src/main.c    **** void vLight_task(vLight_parameters *params) {
 539:src/main.c    ****     /*
 540:src/main.c    ****     Light_set(params->status);
 541:src/main.c    ****     int height = Plant_get_height();
 542:src/main.c    ****     Light_distance_set(distance+height);
 543:src/main.c    **** 
 544:src/main.c    ****     //maybe look for something like recurring task
 545:src/main.c    ****     //you need to find a way to change variable while its waiting;
 546:src/main.c    ****     */
 547:src/main.c    **** 
 548:src/main.c    ****     static int counter = 5;
 549:src/main.c    ****     int i;
 550:src/main.c    ****     while (1) {
 551:src/main.c    ****         for(i=0; i<counter; i++) {
 552:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 553:src/main.c    ****         }
 554:src/main.c    ****     }
 555:src/main.c    **** 
 556:src/main.c    ****     vTaskDelete(NULL);
 557:src/main.c    **** } 
 558:src/main.c    **** 
 559:src/main.c    **** int TEST_PH_VALUE = 50;
 560:src/main.c    **** 
 561:src/main.c    **** void vUDS_read_distance(UDS_Module *module) {
 562:src/main.c    **** 
 563:src/main.c    ****    USART_rtos_packet packet1;
 564:src/main.c    ****    packet1.USARTx_rtos = &USART1_rtos;
 565:src/main.c    **** 
 566:src/main.c    ****    USART_rtos_puts(&packet1, "Reading Ultrasonic Distance Sensor...\r\n");
 567:src/main.c    **** 
 568:src/main.c    ****    taskENTER_CRITICAL();
 569:src/main.c    ****    int v = UDS_read_distance(module); 
 570:src/main.c    ****    taskEXIT_CRITICAL();
 571:src/main.c    **** 
 572:src/main.c    **** 
 573:src/main.c    **** 
 574:src/main.c    ****    USART_puts(USART1, "\r\nDistance: ");
 575:src/main.c    ****    USART_put_int(USART1, v);
 576:src/main.c    ****    USART_puts(USART1, "\r\n");
 577:src/main.c    ****    //USART_rtos_sputs(&packet, "Distance: %d", v);
 578:src/main.c    **** 
 579:src/main.c    ****    //USART_rtos_wait_send(&packet);
 580:src/main.c    ****    //USART_rtos_wait_send(&packet1);
 581:src/main.c    ****    
 582:src/main.c    ****    USART_puts(USART1, "FUCK"); //ERROR OCCURS WHEN I UNCOMMENT THE CODE CODE ABOVE
 583:src/main.c    **** 
 584:src/main.c    ****    vTaskDelete(NULL);
 585:src/main.c    **** }
 586:src/main.c    **** 
 587:src/main.c    **** 
 588:src/main.c    **** 
 589:src/main.c    **** void vPH_read_value(PHMeter_Module *meter) {
 154              		.loc 1 589 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL18:
 159 0000 10B5     		push	{r4, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 4, -8
 163              		.cfi_offset 14, -4
 590:src/main.c    ****     if (meter) {
 164              		.loc 1 590 0
 165 0002 68B1     		cbz	r0, .L5
 591:src/main.c    ****         meter->state = MODULE_RUNNING;
 166              		.loc 1 591 0
 167 0004 0023     		movs	r3, #0
 592:src/main.c    ****      //   USART_rtos_puts(USART2, "Reading PHMeter Reservoir...\r\n");
 593:src/main.c    ****         //USART2_rtos_puts("Read pH Meter...\r\n");
 594:src/main.c    ****         meter->value = TEST_PH_VALUE;
 168              		.loc 1 594 0
 169 0006 40F20002 		movw	r2, #:lower16:.LANCHOR0
 170 000a C0F20002 		movt	r2, #:upper16:.LANCHOR0
 171 000e 1268     		ldr	r2, [r2]
 172 0010 0260     		str	r2, [r0]
 595:src/main.c    ****         meter->state = MODULE_EXECUTED;
 173              		.loc 1 595 0
 174 0012 0222     		movs	r2, #2
 175 0014 0272     		strb	r2, [r0, #8]
 596:src/main.c    ****         xSemaphoreGive(meter->mutex);
 176              		.loc 1 596 0
 177 0016 4068     		ldr	r0, [r0, #4]
 178              	.LVL19:
 179 0018 1946     		mov	r1, r3
 180 001a 1A46     		mov	r2, r3
 181 001c FFF7FEFF 		bl	xQueueGenericSend
 182              	.LVL20:
 183              	.L5:
 597:src/main.c    **** 
 598:src/main.c    ****         }
 599:src/main.c    **** 
 600:src/main.c    ****     vTaskDelete(NULL);
 184              		.loc 1 600 0
 185 0020 0020     		movs	r0, #0
 186 0022 FFF7FEFF 		bl	vTaskDelete
 187              	.LVL21:
 188 0026 10BD     		pop	{r4, pc}
 189              		.cfi_endproc
 190              	.LFE124:
 192              		.section	.text.vPH_task,"ax",%progbits
 193              		.align	2
 194              		.global	vPH_task
 195              		.thumb
 196              		.thumb_func
 198              	vPH_task:
 199              	.LFB126:
 601:src/main.c    **** }
 602:src/main.c    **** 
 603:src/main.c    **** void vPPump_dispense(vPPump_parameters *params) {
 604:src/main.c    ****     params->ppump->state = MODULE_RUNNING; 
 605:src/main.c    ****     //GPIO_WriteBit(params->port, params->pin, Bit_SET);
 606:src/main.c    ****     //USART2_rtos_puts("Starting to dispense...\r\n");
 607:src/main.c    ****     
 608:src/main.c    ****     taskENTER_CRITICAL();
 609:src/main.c    ****     PPump_Module_dispense(params->ppump, params->amount);
 610:src/main.c    **** 
 611:src/main.c    ****     taskEXIT_CRITICAL();
 612:src/main.c    ****     //    TEST_PH_VALUE+=5;
 613:src/main.c    **** 
 614:src/main.c    ****     params->ppump->state = MODULE_EXECUTED; 
 615:src/main.c    **** 
 616:src/main.c    ****     vTaskDelete(NULL);
 617:src/main.c    **** }
 618:src/main.c    **** 
 619:src/main.c    **** void vPH_task(void) {
 200              		.loc 1 619 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 144
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 36
 207              		.cfi_offset 4, -36
 208              		.cfi_offset 5, -32
 209              		.cfi_offset 6, -28
 210              		.cfi_offset 7, -24
 211              		.cfi_offset 8, -20
 212              		.cfi_offset 9, -16
 213              		.cfi_offset 10, -12
 214              		.cfi_offset 11, -8
 215              		.cfi_offset 14, -4
 216 0004 A9B0     		sub	sp, sp, #164
 217              	.LCFI4:
 218              		.cfi_def_cfa_offset 200
 620:src/main.c    **** 
 621:src/main.c    ****     Timer_node timer = {NULL, NULL};
 219              		.loc 1 621 0
 220 0006 0024     		movs	r4, #0
 221 0008 1F94     		str	r4, [sp, #124]
 222 000a 2094     		str	r4, [sp, #128]
 223 000c 2194     		str	r4, [sp, #132]
 224 000e 2294     		str	r4, [sp, #136]
 225 0010 2394     		str	r4, [sp, #140]
 226 0012 2494     		str	r4, [sp, #144]
 227 0014 2594     		str	r4, [sp, #148]
 228 0016 2694     		str	r4, [sp, #152]
 229 0018 2794     		str	r4, [sp, #156]
 622:src/main.c    ****     RTC_TimeTypeDef t;
 623:src/main.c    **** 
 624:src/main.c    **** 
 625:src/main.c    ****     USART_rtos_packet packet, packet1, packet2, packet3;
 626:src/main.c    **** 
 627:src/main.c    ****     packet.USARTx_rtos = packet1.USARTx_rtos = packet2.USARTx_rtos = packet3.USARTx_rtos = &USART1_
 230              		.loc 1 627 0
 231 001a 40F20003 		movw	r3, #:lower16:USART1_rtos
 232 001e C0F20003 		movt	r3, #:upper16:USART1_rtos
 233 0022 0E93     		str	r3, [sp, #56]
 234 0024 1293     		str	r3, [sp, #72]
 235 0026 1693     		str	r3, [sp, #88]
 236 0028 28A8     		add	r0, sp, #160
 237 002a 40F8383D 		str	r3, [r0, #-56]!
 628:src/main.c    ****     USART_rtos_puts(&packet, "PH Task Launched...\r\n");
 238              		.loc 1 628 0
 239 002e 40F20001 		movw	r1, #:lower16:.LC0
 240 0032 C0F20001 		movt	r1, #:upper16:.LC0
 241 0036 FFF7FEFF 		bl	USART_rtos_puts
 242              	.LVL22:
 629:src/main.c    **** 
 630:src/main.c    ****     //RTC_GetTime(RTC_Format_BIN, &t);
 631:src/main.c    ****     getTime(&t);
 243              		.loc 1 631 0
 244 003a 1EA8     		add	r0, sp, #120
 245 003c FFF7FEFF 		bl	getTime
 246              	.LVL23:
 632:src/main.c    **** 
 633:src/main.c    ****     timer.epoch = getEpoch(&t, getSystemDay()) + 60*60*3; //* 60 * 24;
 247              		.loc 1 633 0
 248 0040 FFF7FEFF 		bl	getSystemDay
 249              	.LVL24:
 250 0044 0146     		mov	r1, r0
 251 0046 1EA8     		add	r0, sp, #120
 252 0048 FFF7FEFF 		bl	getEpoch
 253              	.LVL25:
 254 004c 00F52850 		add	r0, r0, #10752
 255 0050 3030     		adds	r0, r0, #48
 256 0052 2190     		str	r0, [sp, #132]
 634:src/main.c    ****     timer.id = 1;
 257              		.loc 1 634 0
 258 0054 0123     		movs	r3, #1
 259 0056 8DF88830 		strb	r3, [sp, #136]
 635:src/main.c    ****     int r = addTimerInterrupt(&timer, &timer_list_head); //ph_timer 
 260              		.loc 1 635 0
 261 005a 1FA8     		add	r0, sp, #124
 262 005c 40F20001 		movw	r1, #:lower16:timer_list_head
 263 0060 C0F20001 		movt	r1, #:upper16:timer_list_head
 264 0064 FFF7FEFF 		bl	addTimerInterrupt
 265              	.LVL26:
 266 0068 0546     		mov	r5, r0
 267              	.LVL27:
 636:src/main.c    **** 
 637:src/main.c    ****     //int r = 1;
 638:src/main.c    **** 
 639:src/main.c    ****     unsigned portBASE_TYPE parent_priority = uxTaskPriorityGet(NULL);
 268              		.loc 1 639 0
 269 006a 2046     		mov	r0, r4
 270              	.LVL28:
 271 006c FFF7FEFF 		bl	uxTaskPriorityGet
 272              	.LVL29:
 273 0070 0490     		str	r0, [sp, #16]
 274              	.LVL30:
 275              	.LBB8:
 640:src/main.c    **** 
 641:src/main.c    ****     while (1) {
 642:src/main.c    **** 
 643:src/main.c    ****         if (r) {
 644:src/main.c    ****             if (hydroponics.PHMeter_Resvoir.mutex == NULL) {
 276              		.loc 1 644 0
 277 0072 40F20004 		movw	r4, #:lower16:hydroponics
 278 0076 C0F20004 		movt	r4, #:upper16:hydroponics
 645:src/main.c    ****                 hydroponics.PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
 646:src/main.c    ****                 continue;
 647:src/main.c    ****             }
 648:src/main.c    **** 
 649:src/main.c    ****            //add if sepamphore is not null error check
 650:src/main.c    ****             int TARGET_PH_REACHED = 0;
 651:src/main.c    ****              //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
 652:src/main.c    ****             
 653:src/main.c    ****             if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
 654:src/main.c    ****                 USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");
 279              		.loc 1 654 0
 280 007a 40F20002 		movw	r2, #:lower16:.LC1
 281 007e C0F20002 		movt	r2, #:upper16:.LC1
 282 0082 0792     		str	r2, [sp, #28]
 283              	.LBB9:
 655:src/main.c    **** 
 656:src/main.c    ****                 hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
 657:src/main.c    ****                 while (!TARGET_PH_REACHED) {
 658:src/main.c    ****                     vPPump_parameters ppump_params;
 659:src/main.c    ****                     portTickType start_time;
 660:src/main.c    ****                     portTickType end_time;
 661:src/main.c    **** 
 662:src/main.c    ****                     xTaskCreate(vPH_read_value, (signed char*)"PH Read", 128, &hydroponics.PHMeter_
 284              		.loc 1 662 0
 285 0084 40F20007 		movw	r7, #:lower16:vPH_read_value
 286 0088 C0F20007 		movt	r7, #:upper16:vPH_read_value
 287 008c 40F2000A 		movw	r10, #:lower16:.LC2
 288 0090 C0F2000A 		movt	r10, #:upper16:.LC2
 663:src/main.c    **** 
 664:src/main.c    ****                     while(hydroponics.PHMeter_Resvoir.state != MODULE_EXECUTED);
 665:src/main.c    **** 
 666:src/main.c    ****                     int value = hydroponics.PHMeter_Resvoir.value; 
 667:src/main.c    ****                     char msg[20];
 668:src/main.c    ****                     packet3.msg = msg;
 669:src/main.c    ****                     USART_rtos_sputs(&packet3, "PH VALUE: %d\r\n", value);
 289              		.loc 1 669 0
 290 0094 40F2000B 		movw	fp, #:lower16:.LC3
 291 0098 C0F2000B 		movt	fp, #:upper16:.LC3
 292              	.LVL31:
 293              	.L20:
 294              	.LBE9:
 295              	.LBE8:
 643:src/main.c    ****             if (hydroponics.PHMeter_Resvoir.mutex == NULL) {
 296              		.loc 1 643 0
 297 009c 002D     		cmp	r5, #0
 298 009e FDD0     		beq	.L20
 299              	.LBB12:
 644:src/main.c    ****                 hydroponics.PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
 300              		.loc 1 644 0
 301 00a0 D4F88C00 		ldr	r0, [r4, #140]
 302 00a4 20B9     		cbnz	r0, .L9
 645:src/main.c    ****                 continue;
 303              		.loc 1 645 0
 304 00a6 FFF7FEFF 		bl	xQueueCreateMutex
 305              	.LVL32:
 306 00aa C4F88C00 		str	r0, [r4, #140]
 646:src/main.c    ****             }
 307              		.loc 1 646 0
 308 00ae F5E7     		b	.L20
 309              	.L9:
 310              	.LVL33:
 653:src/main.c    ****                 USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");
 311              		.loc 1 653 0
 312 00b0 0021     		movs	r1, #0
 313 00b2 4FF0FF32 		mov	r2, #-1
 314 00b6 0B46     		mov	r3, r1
 315 00b8 FFF7FEFF 		bl	xQueueGenericReceive
 316              	.LVL34:
 317 00bc 0128     		cmp	r0, #1
 318 00be EDD1     		bne	.L20
 654:src/main.c    **** 
 319              		.loc 1 654 0
 320 00c0 16A8     		add	r0, sp, #88
 321 00c2 0799     		ldr	r1, [sp, #28]
 322 00c4 FFF7FEFF 		bl	USART_rtos_puts
 323              	.LVL35:
 656:src/main.c    ****                 while (!TARGET_PH_REACHED) {
 324              		.loc 1 656 0
 325 00c8 0123     		movs	r3, #1
 326 00ca 84F89030 		strb	r3, [r4, #144]
 650:src/main.c    ****              //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
 327              		.loc 1 650 0
 328 00ce 4FF00008 		mov	r8, #0
 329              	.LBB10:
 670:src/main.c    **** 
 671:src/main.c    ****                     hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
 672:src/main.c    **** 
 673:src/main.c    ****                     int amount;
 674:src/main.c    ****                     PPump_Module *ppump;
 675:src/main.c    **** 
 676:src/main.c    ****                     if (value < hydroponics.target_ph){
 677:src/main.c    ****                         USART_rtos_puts(&packet2, "Adding PH Up...\r\n");
 678:src/main.c    ****                         TEST_PH_VALUE+=5;
 679:src/main.c    ****                      ///   USART_rtos_puts(USART2, "ADDING PH UP\r\n");
 680:src/main.c    ****                         amount = hydroponics.target_ph - value;
 681:src/main.c    ****                         ppump = &hydroponics.PPump_PHUp;
 682:src/main.c    **** 
 683:src/main.c    ****                     }
 684:src/main.c    ****                     else if (value > hydroponics.target_ph) {
 685:src/main.c    ****                         USART_rtos_puts(&packet2, "Adding PH DOwn...\r\n");
 686:src/main.c    ****                         TEST_PH_VALUE-=5;
 687:src/main.c    ****                         amount = value - hydroponics.target_ph;
 688:src/main.c    ****                         ppump = &hydroponics.PPump_PHDown;
 689:src/main.c    **** 
 690:src/main.c    ****                     }
 691:src/main.c    ****                     else {
 692:src/main.c    ****                         TARGET_PH_REACHED = 1;
 693:src/main.c    **** 
 694:src/main.c    ****                         //RTC_GetTime(RTC_Format_BIN, &t);
 695:src/main.c    ****                         getTime(&t);
 696:src/main.c    **** 
 697:src/main.c    ****                         timer.epoch = getEpoch(&t, getSystemDay()) + 60*60*3; //* 60 * 24;
 698:src/main.c    ****                         USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
 330              		.loc 1 698 0
 331 00d2 40F20003 		movw	r3, #:lower16:.LC6
 332 00d6 C0F20003 		movt	r3, #:upper16:.LC6
 333 00da 0693     		str	r3, [sp, #24]
 334              	.LBE10:
 657:src/main.c    ****                     vPPump_parameters ppump_params;
 335              		.loc 1 657 0
 336 00dc 83E0     		b	.L21
 337              	.LVL36:
 338              	.L18:
 339              	.LBB11:
 662:src/main.c    **** 
 340              		.loc 1 662 0
 341 00de 049A     		ldr	r2, [sp, #16]
 342 00e0 531C     		adds	r3, r2, #1
 343 00e2 0093     		str	r3, [sp]
 344 00e4 0023     		movs	r3, #0
 345 00e6 0193     		str	r3, [sp, #4]
 346 00e8 0293     		str	r3, [sp, #8]
 347 00ea 0393     		str	r3, [sp, #12]
 348 00ec 3846     		mov	r0, r7
 349 00ee 5146     		mov	r1, r10
 350 00f0 8022     		movs	r2, #128
 351 00f2 3F4B     		ldr	r3, .L22
 352 00f4 FFF7FEFF 		bl	xTaskGenericCreate
 353              	.LVL37:
 354              	.L12:
 664:src/main.c    **** 
 355              		.loc 1 664 0 discriminator 1
 356 00f8 94F89030 		ldrb	r3, [r4, #144]	@ zero_extendqisi2
 357 00fc 022B     		cmp	r3, #2
 358 00fe FBD1     		bne	.L12
 666:src/main.c    ****                     char msg[20];
 359              		.loc 1 666 0
 360 0100 D4F88860 		ldr	r6, [r4, #136]
 361              	.LVL38:
 668:src/main.c    ****                     USART_rtos_sputs(&packet3, "PH VALUE: %d\r\n", value);
 362              		.loc 1 668 0
 363 0104 09AB     		add	r3, sp, #36
 364 0106 0F93     		str	r3, [sp, #60]
 669:src/main.c    **** 
 365              		.loc 1 669 0
 366 0108 0EA8     		add	r0, sp, #56
 367 010a 5946     		mov	r1, fp
 368 010c 3246     		mov	r2, r6
 369 010e FFF7FEFF 		bl	USART_rtos_sputs
 370              	.LVL39:
 671:src/main.c    **** 
 371              		.loc 1 671 0
 372 0112 0123     		movs	r3, #1
 373 0114 84F89030 		strb	r3, [r4, #144]
 676:src/main.c    ****                         USART_rtos_puts(&packet2, "Adding PH Up...\r\n");
 374              		.loc 1 676 0
 375 0118 D4F89430 		ldr	r3, [r4, #148]
 376 011c B342     		cmp	r3, r6
 377 011e 14DD     		ble	.L13
 677:src/main.c    ****                         TEST_PH_VALUE+=5;
 378              		.loc 1 677 0
 379 0120 12A8     		add	r0, sp, #72
 380 0122 40F20001 		movw	r1, #:lower16:.LC4
 381 0126 C0F20001 		movt	r1, #:upper16:.LC4
 382 012a FFF7FEFF 		bl	USART_rtos_puts
 383              	.LVL40:
 678:src/main.c    ****                      ///   USART_rtos_puts(USART2, "ADDING PH UP\r\n");
 384              		.loc 1 678 0
 385 012e 40F20003 		movw	r3, #:lower16:.LANCHOR0
 386 0132 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 387 0136 1A68     		ldr	r2, [r3]
 388 0138 0532     		adds	r2, r2, #5
 389 013a 1A60     		str	r2, [r3]
 680:src/main.c    ****                         ppump = &hydroponics.PPump_PHUp;
 390              		.loc 1 680 0
 391 013c D4F89430 		ldr	r3, [r4, #148]
 392 0140 9B1B     		subs	r3, r3, r6
 393 0142 0593     		str	r3, [sp, #20]
 394              	.LVL41:
 681:src/main.c    **** 
 395              		.loc 1 681 0
 396 0144 04F10409 		add	r9, r4, #4
 397 0148 32E0     		b	.L14
 398              	.LVL42:
 399              	.L13:
 684:src/main.c    ****                         USART_rtos_puts(&packet2, "Adding PH DOwn...\r\n");
 400              		.loc 1 684 0
 401 014a 9E42     		cmp	r6, r3
 402 014c 14DD     		ble	.L15
 685:src/main.c    ****                         TEST_PH_VALUE-=5;
 403              		.loc 1 685 0
 404 014e 12A8     		add	r0, sp, #72
 405 0150 40F20001 		movw	r1, #:lower16:.LC5
 406 0154 C0F20001 		movt	r1, #:upper16:.LC5
 407 0158 FFF7FEFF 		bl	USART_rtos_puts
 408              	.LVL43:
 686:src/main.c    ****                         amount = value - hydroponics.target_ph;
 409              		.loc 1 686 0
 410 015c 40F20003 		movw	r3, #:lower16:.LANCHOR0
 411 0160 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 412 0164 1A68     		ldr	r2, [r3]
 413 0166 053A     		subs	r2, r2, #5
 414 0168 1A60     		str	r2, [r3]
 687:src/main.c    ****                         ppump = &hydroponics.PPump_PHDown;
 415              		.loc 1 687 0
 416 016a D4F89430 		ldr	r3, [r4, #148]
 417 016e F31A     		subs	r3, r6, r3
 418 0170 0593     		str	r3, [sp, #20]
 419              	.LVL44:
 688:src/main.c    **** 
 420              		.loc 1 688 0
 421 0172 04F13009 		add	r9, r4, #48
 422 0176 1BE0     		b	.L14
 423              	.LVL45:
 424              	.L15:
 695:src/main.c    **** 
 425              		.loc 1 695 0
 426 0178 1EA8     		add	r0, sp, #120
 427 017a FFF7FEFF 		bl	getTime
 428              	.LVL46:
 697:src/main.c    ****                         USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
 429              		.loc 1 697 0
 430 017e FFF7FEFF 		bl	getSystemDay
 431              	.LVL47:
 432 0182 0146     		mov	r1, r0
 433 0184 1EA8     		add	r0, sp, #120
 434 0186 FFF7FEFF 		bl	getEpoch
 435              	.LVL48:
 436 018a 00F52850 		add	r0, r0, #10752
 437 018e 3030     		adds	r0, r0, #48
 438 0190 2190     		str	r0, [sp, #132]
 439              		.loc 1 698 0
 440 0192 12A8     		add	r0, sp, #72
 441 0194 0699     		ldr	r1, [sp, #24]
 442 0196 FFF7FEFF 		bl	USART_rtos_puts
 443              	.LVL49:
 699:src/main.c    ****                         r = addTimerInterrupt(&timer, &timer_list_head); 
 444              		.loc 1 699 0
 445 019a 1FA8     		add	r0, sp, #124
 446 019c 40F20001 		movw	r1, #:lower16:timer_list_head
 447 01a0 C0F20001 		movt	r1, #:upper16:timer_list_head
 448 01a4 FFF7FEFF 		bl	addTimerInterrupt
 449              	.LVL50:
 450 01a8 0546     		mov	r5, r0
 451              	.LVL51:
 692:src/main.c    **** 
 452              		.loc 1 692 0
 453 01aa 4FF00108 		mov	r8, #1
 700:src/main.c    **** 
 701:src/main.c    **** 
 702:src/main.c    ****                         continue;
 454              		.loc 1 702 0
 455 01ae 1AE0     		b	.L21
 456              	.LVL52:
 457              	.L14:
 703:src/main.c    ****                     };
 704:src/main.c    **** 
 705:src/main.c    ****                     start_time = xTaskGetTickCount();
 458              		.loc 1 705 0
 459 01b0 FFF7FEFF 		bl	xTaskGetTickCount
 460              	.LVL53:
 461 01b4 0890     		str	r0, [sp, #32]
 706:src/main.c    ****                     end_time = (portTickType)(1000*hydroponics.ph_delay) / portTICK_RATE_MS;
 462              		.loc 1 706 0
 463 01b6 D4F89830 		ldr	r3, [r4, #152]
 464 01ba 4FF47A76 		mov	r6, #1000
 465              	.LVL54:
 466 01be 06FB03F6 		mul	r6, r6, r3
 467              	.LVL55:
 707:src/main.c    **** 
 708:src/main.c    ****                     if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE)
 468              		.loc 1 708 0
 469 01c2 D4F88C00 		ldr	r0, [r4, #140]
 470 01c6 0021     		movs	r1, #0
 471 01c8 4FF0FF32 		mov	r2, #-1
 472 01cc 0B46     		mov	r3, r1
 473 01ce FFF7FEFF 		bl	xQueueGenericReceive
 474              	.LVL56:
 475 01d2 0128     		cmp	r0, #1
 476 01d4 07D1     		bne	.L21
 709:src/main.c    ****                         PPump_Module_dispense(ppump, amount);
 477              		.loc 1 709 0
 478 01d6 4846     		mov	r0, r9
 479 01d8 0599     		ldr	r1, [sp, #20]
 480 01da FFF7FEFF 		bl	PPump_Module_dispense
 481              	.LVL57:
 710:src/main.c    ****                     }
 711:src/main.c    ****                     else {
 712:src/main.c    ****                         continue;
 713:src/main.c    ****                     }
 714:src/main.c    **** 
 715:src/main.c    ****                     vTaskDelayUntil(&start_time, end_time);
 482              		.loc 1 715 0
 483 01de 08A8     		add	r0, sp, #32
 484 01e0 3146     		mov	r1, r6
 485 01e2 FFF7FEFF 		bl	vTaskDelayUntil
 486              	.LVL58:
 487              	.L21:
 488              	.LBE11:
 657:src/main.c    ****                     vPPump_parameters ppump_params;
 489              		.loc 1 657 0 discriminator 1
 490 01e6 B8F1000F 		cmp	r8, #0
 491 01ea 3FF478AF 		beq	.L18
 492 01ee 55E7     		b	.L20
 493              	.L23:
 494              		.align	2
 495              	.L22:
 496 01f0 88000000 		.word	hydroponics+136
 497              	.LBE12:
 498              		.cfi_endproc
 499              	.LFE126:
 501              		.section	.text.vInterruptTimer,"ax",%progbits
 502              		.align	2
 503              		.global	vInterruptTimer
 504              		.thumb
 505              		.thumb_func
 507              	vInterruptTimer:
 508              	.LFB130:
 716:src/main.c    **** 
 717:src/main.c    ****                     switch (ppump_params.ppump->state) {
 718:src/main.c    ****                         case MODULE_EXECUTED: 
 719:src/main.c    ****                           ///  USART_rtos_puts(USART2, "VPPUMP EXITED SUCCESSFULLY!\r\n");
 720:src/main.c    ****                             break;
 721:src/main.c    ****                         case MODULE_ERROR:
 722:src/main.c    ****                            /// USART_rtos_puts(USART2, "VPPUMP EXITED WITH AN ERROR!\r\n");
 723:src/main.c    ****                             break;
 724:src/main.c    ****                     }
 725:src/main.c    ****                 }
 726:src/main.c    ****             }
 727:src/main.c    ****         }
 728:src/main.c    ****     }
 729:src/main.c    ****     vTaskDelete(NULL);
 730:src/main.c    **** }
 731:src/main.c    **** 
 732:src/main.c    **** 
 733:src/main.c    **** void vRTC_Init(void) {
 734:src/main.c    ****     RTC_InitTypeDef RTC_InitStructure;
 735:src/main.c    **** 
 736:src/main.c    ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 737:src/main.c    ****     PWR_BackupAccessCmd(ENABLE);
 738:src/main.c    **** 
 739:src/main.c    ****     RCC_LSICmd(ENABLE);
 740:src/main.c    ****     while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 741:src/main.c    ****     RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 742:src/main.c    ****     RCC_RTCCLKCmd(ENABLE);
 743:src/main.c    ****     RTC_WaitForSynchro();
 744:src/main.c    **** 
 745:src/main.c    ****     //if (RTC_ReadBackupRegister(RTC_BKP_DR0)!=0x9527) {
 746:src/main.c    ****         RTC_WriteProtectionCmd(DISABLE); 
 747:src/main.c    **** 
 748:src/main.c    ****         //RTC_EnterInitMode();
 749:src/main.c    **** 
 750:src/main.c    ****         RTC_InitStructure.RTC_HourFormat = RTC_HourFormat_24;
 751:src/main.c    ****         RTC_InitStructure.RTC_AsynchPrediv = 0x7D-1;
 752:src/main.c    ****         RTC_InitStructure.RTC_SynchPrediv = 0xFF-1;
 753:src/main.c    ****         RTC_Init(&RTC_InitStructure);
 754:src/main.c    **** 
 755:src/main.c    ****         //setTime(0x23, 0x58, 0x00);
 756:src/main.c    ****         setTime(0x00, 0x00, 0x00);
 757:src/main.c    **** 
 758:src/main.c    **** 
 759:src/main.c    ****         setDate(12, 5, 17);
 760:src/main.c    **** 
 761:src/main.c    ****         //RTC_WriteBackupRegister(RTC_BKP_DR0,0X9527);
 762:src/main.c    ****         //RTC_WriteProtectionCmd(ENABLE);
 763:src/main.c    ****         //RTC_WriteBackupRegister(RTC_BKP_DR0,0x9527);  //Initialization is complete, set the flag
 764:src/main.c    ****     //}
 765:src/main.c    **** 
 766:src/main.c    **** //      PWR_BackupAccessCmd(DISABLE);
 767:src/main.c    **** }
 768:src/main.c    **** //Main Function
 769:src/main.c    **** 
 770:src/main.c    **** 
 771:src/main.c    **** unsigned timeToSeconds(RTC_TimeTypeDef* t) {
 772:src/main.c    ****     unsigned seconds = t->RTC_Seconds;
 773:src/main.c    ****     seconds += t->RTC_Minutes * 60;
 774:src/main.c    ****     seconds += t->RTC_Hours * 3600;
 775:src/main.c    ****     return seconds;
 776:src/main.c    **** }
 777:src/main.c    **** 
 778:src/main.c    **** void vIncrementDay(void) {
 779:src/main.c    ****     Timer_node timer = {NULL, NULL};
 780:src/main.c    ****     //timer.timer_mutex = NULL;
 781:src/main.c    ****     //timer.timer_mutex = xSemaphoreCreateMutex();
 782:src/main.c    ****     
 783:src/main.c    ****     RTC_TimeTypeDef t;
 784:src/main.c    ****     //RTC_GetTime(RTC_Format_BIN, &t);
 785:src/main.c    ****     getTime(&t);
 786:src/main.c    **** 
 787:src/main.c    **** //    timer.epoch = getEpoch(&t, getSystemDay())  +(60 /** 60 * 24*/); //number of seconds in a day
 788:src/main.c    **** 
 789:src/main.c    ****     timer.debug0 = getEpoch(&t, getSystemDay());
 790:src/main.c    ****     timer.id = 2;
 791:src/main.c    **** 
 792:src/main.c    **** 
 793:src/main.c    **** 
 794:src/main.c    **** 
 795:src/main.c    **** 
 796:src/main.c    ****    /* 
 797:src/main.c    ****     USART_puts(USART1, "SYSTEM DAY: ");
 798:src/main.c    ****     USART_put_unsigned_int(USART1,  x);
 799:src/main.c    ****     USART_puts(USART1, "\r\n");
 800:src/main.c    **** */
 801:src/main.c    ****     //addTimerInterrupt(&timer, &timer_list_head);
 802:src/main.c    ****     //r = (xSemaphoreTake(timer->timer_mutex, portMAX_DELAY) == pdTRUE);
 803:src/main.c    **** 
 804:src/main.c    **** 
 805:src/main.c    ****     int x = 0;
 806:src/main.c    ****     while (1) {
 807:src/main.c    ****         x++;
 808:src/main.c    ****         RTC_GetTime(RTC_Format_BIN, &t);
 809:src/main.c    ****         //getTime(&t);
 810:src/main.c    **** 
 811:src/main.c    ****         timer.epoch = getEpoch(&t, getSystemDay())  +(15 /** 60 * 24*/); //number of seconds in a d
 812:src/main.c    ****         //USART_puts(USART1, "\r\n+++++++RAN++++++++\r\n");
 813:src/main.c    **** 
 814:src/main.c    ****         int r = addTimerInterrupt(&timer, &timer_list_head); //adds timer again //increment timer;
 815:src/main.c    ****         if (r) {
 816:src/main.c    **** 
 817:src/main.c    ****                 timer.debug2 = x;
 818:src/main.c    ****             //setSystemDay(getSystemDay()+1);
 819:src/main.c    **** 
 820:src/main.c    ****             //xSemaphoreGive(timer.timer_mutex);
 821:src/main.c    **** 
 822:src/main.c    ****             //RTC_GetTime(RTC_Format_BIN, &t);
 823:src/main.c    ****             getTime(&t);
 824:src/main.c    **** 
 825:src/main.c    ****             unsigned int e = getEpoch(&t, getSystemDay());
 826:src/main.c    ****             timer.debug0 = getEpoch(&t, getSystemDay());
 827:src/main.c    **** /*
 828:src/main.c    ****             USART_put_int(USART1, HEX_2_DEC(t.RTC_Hours));
 829:src/main.c    ****             USART_puts(USART1, "[");
 830:src/main.c    ****             USART_put_int(USART1, t.RTC_Hours);
 831:src/main.c    ****             USART_puts(USART1, "]:");
 832:src/main.c    ****             USART_put_int(USART1, t.RTC_Minutes);
 833:src/main.c    ****             USART_puts(USART1, " (");
 834:src/main.c    ****             USART_put_unsigned_int(USART2, e);
 835:src/main.c    ****             USART_puts(USART1, " ______ ");
 836:src/main.c    **** 
 837:src/main.c    ****             USART_put_unsigned_int(USART1, timer.epoch);
 838:src/main.c    **** 
 839:src/main.c    ****              USART_puts(USART1, ")\r\n");
 840:src/main.c    **** */
 841:src/main.c    **** //            USART_rtos_sputs(&packet, "\r\nCOOL:%d\r\n", 69);
 842:src/main.c    **** 
 843:src/main.c    ****             USART_rtos_packet packet;
 844:src/main.c    **** 
 845:src/main.c    ****             packet.USARTx_rtos = &USART1_rtos;
 846:src/main.c    ****             char msg[]="\r\nCOOL:%d\r\n";
 847:src/main.c    ****             char buffer[15];
 848:src/main.c    ****             packet.msg = buffer;
 849:src/main.c    **** 
 850:src/main.c    ****             USART_rtos_sputs(&packet, msg, 69);
 851:src/main.c    **** 
 852:src/main.c    ****             //USART_rtos_sputs(&packet, "%u %d:%d:%d (%u)\r\n", getSystemDay(), t.RTC_Hours, t.RTC_
 853:src/main.c    ****             USART_rtos_wait_send(&packet);
 854:src/main.c    **** 
 855:src/main.c    **** 
 856:src/main.c    ****         }
 857:src/main.c    ****     }
 858:src/main.c    **** }
 859:src/main.c    **** 
 860:src/main.c    **** 
 861:src/main.c    **** void vInterruptTimer(void) {
 509              		.loc 1 861 0
 510              		.cfi_startproc
 511              		@ args = 0, pretend = 0, frame = 8
 512              		@ frame_needed = 0, uses_anonymous_args = 0
 513 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 514              	.LCFI5:
 515              		.cfi_def_cfa_offset 28
 516              		.cfi_offset 4, -28
 517              		.cfi_offset 5, -24
 518              		.cfi_offset 6, -20
 519              		.cfi_offset 7, -16
 520              		.cfi_offset 8, -12
 521              		.cfi_offset 9, -8
 522              		.cfi_offset 14, -4
 523 0004 83B0     		sub	sp, sp, #12
 524              	.LCFI6:
 525              		.cfi_def_cfa_offset 40
 862:src/main.c    **** 
 863:src/main.c    ****     RTC_TimeTypeDef t;
 864:src/main.c    **** 
 865:src/main.c    ****     portTickType xLastWake = xTaskGetTickCount();
 526              		.loc 1 865 0
 527 0006 FFF7FEFF 		bl	xTaskGetTickCount
 528              	.LVL59:
 529 000a 0DF10808 		add	r8, sp, #8
 530 000e 48F8080D 		str	r0, [r8, #-8]!
 531              	.LBB13:
 866:src/main.c    **** 
 867:src/main.c    **** 
 868:src/main.c    ****     while(1) {
 869:src/main.c    ****         /*
 870:src/main.c    ****         USART_rtos_packet packet;
 871:src/main.c    ****         packet.USARTx_rtos = &USART1_rtos; 
 872:src/main.c    **** */
 873:src/main.c    ****         vTaskDelayUntil(&xLastWake, ((1000*1) / portTICK_RATE_MS));
 532              		.loc 1 873 0
 533 0012 4FF47A79 		mov	r9, #1000
 874:src/main.c    **** 
 875:src/main.c    ****         xLastWake = xTaskGetTickCount();
 876:src/main.c    ****         
 877:src/main.c    ****         Timer_node* cursor = timer_list_head;
 534              		.loc 1 877 0
 535 0016 40F20007 		movw	r7, #:lower16:timer_list_head
 536 001a C0F20007 		movt	r7, #:upper16:timer_list_head
 878:src/main.c    ****         Timer_node* c1 = NULL;// = cursor; 
 537              		.loc 1 878 0
 538 001e 0026     		movs	r6, #0
 539              	.L31:
 873:src/main.c    **** 
 540              		.loc 1 873 0
 541 0020 6846     		mov	r0, sp
 542 0022 4946     		mov	r1, r9
 543 0024 FFF7FEFF 		bl	vTaskDelayUntil
 544              	.LVL60:
 875:src/main.c    ****         
 545              		.loc 1 875 0
 546 0028 FFF7FEFF 		bl	xTaskGetTickCount
 547              	.LVL61:
 548 002c 0090     		str	r0, [sp]
 877:src/main.c    ****         Timer_node* c1 = NULL;// = cursor; 
 549              		.loc 1 877 0
 550 002e 3C68     		ldr	r4, [r7]
 551              	.LVL62:
 552              		.loc 1 878 0
 553 0030 3546     		mov	r5, r6
 879:src/main.c    **** 
 880:src/main.c    ****         while(cursor) { //problem is herefix logic for linked list
 554              		.loc 1 880 0
 555 0032 1BE0     		b	.L32
 556              	.LVL63:
 557              	.L30:
 558              	.LBB14:
 881:src/main.c    ****             //RTC_GetTime(RTC_Format_BIN, &t);
 882:src/main.c    ****             getTime(&t);
 559              		.loc 1 882 0
 560 0034 01A8     		add	r0, sp, #4
 561 0036 FFF7FEFF 		bl	getTime
 562              	.LVL64:
 883:src/main.c    ****             //Timer_node* c1 = cursor->next; //ph
 884:src/main.c    ****             int flag_end = 0;
 885:src/main.c    **** 
 886:src/main.c    **** /*
 887:src/main.c    ****             if (!(c1)) { //false
 888:src/main.c    ****                 flag_end = 1;
 889:src/main.c    ****                 c1 = cursor;
 890:src/main.c    ****             }
 891:src/main.c    **** */
 892:src/main.c    **** 
 893:src/main.c    ****             if (getEpoch(&t, getSystemDay()) > cursor->epoch) { //phs epoch
 563              		.loc 1 893 0
 564 003a FFF7FEFF 		bl	getSystemDay
 565              	.LVL65:
 566 003e 0146     		mov	r1, r0
 567 0040 01A8     		add	r0, sp, #4
 568 0042 FFF7FEFF 		bl	getEpoch
 569              	.LVL66:
 570 0046 A368     		ldr	r3, [r4, #8]
 571 0048 9842     		cmp	r0, r3
 572 004a 0DD9     		bls	.L26
 894:src/main.c    **** 
 895:src/main.c    ****                 xSemaphoreGive(cursor->timer_mutex);
 573              		.loc 1 895 0
 574 004c 2068     		ldr	r0, [r4]
 575 004e 3146     		mov	r1, r6
 576 0050 3246     		mov	r2, r6
 577 0052 3346     		mov	r3, r6
 578 0054 FFF7FEFF 		bl	xQueueGenericSend
 579              	.LVL67:
 896:src/main.c    **** 
 897:src/main.c    ****                 if (c1 == NULL/*timer_list_head*/) {
 580              		.loc 1 897 0
 581 0058 15B9     		cbnz	r5, .L27
 898:src/main.c    ****                     timer_list_head = cursor->next;
 582              		.loc 1 898 0
 583 005a 6468     		ldr	r4, [r4, #4]
 584              	.LVL68:
 585 005c 3C60     		str	r4, [r7]
 586              	.LVL69:
 587 005e 05E0     		b	.L32
 588              	.L27:
 899:src/main.c    ****                     cursor = timer_list_head;
 900:src/main.c    ****                     //cursor = c1 = timer_list_head;
 901:src/main.c    ****                 }
 902:src/main.c    ****                 else {
 903:src/main.c    ****                     c1->next = cursor->next;
 589              		.loc 1 903 0
 590 0060 6368     		ldr	r3, [r4, #4]
 591 0062 6B60     		str	r3, [r5, #4]
 904:src/main.c    ****                     cursor = cursor->next;
 592              		.loc 1 904 0
 593 0064 6468     		ldr	r4, [r4, #4]
 594              	.LVL70:
 905:src/main.c    ****                 }
 906:src/main.c    **** 
 907:src/main.c    ****                 //cursor == inc
 908:src/main.c    ****                 //c1 == inc
 909:src/main.c    ****                 //head = inc
 910:src/main.c    ****         
 911:src/main.c    ****                 /*
 912:src/main.c    ****                 if (!(flag_end)) {
 913:src/main.c    ****                     cursor->next = cursor->next->next; //removes timer from list;
 914:src/main.c    ****                 }
 915:src/main.c    ****                 */
 916:src/main.c    **** 
 917:src/main.c    ****                 continue;
 595              		.loc 1 917 0
 596 0066 01E0     		b	.L32
 597              	.L26:
 598              	.LVL71:
 918:src/main.c    ****             }
 919:src/main.c    ****             
 920:src/main.c    ****             /*
 921:src/main.c    ****             USART_puts(USART1_rtos.id, "CURRENT EPOCH: ");
 922:src/main.c    ****             USART_put_unsigned_int(USART1_rtos.id, getEpoch(&t, DAY_COUNT));
 923:src/main.c    ****             USART_puts(USART1_rtos.id, "\r\n");
 924:src/main.c    **** 
 925:src/main.c    ****             USART_puts(USART1_rtos.id, "TIMER EPOCH: ");
 926:src/main.c    ****             USART_put_unsigned_int(USART1_rtos.id, c1->epoch);
 927:src/main.c    ****             USART_puts(USART1_rtos.id, "\r\n");
 928:src/main.c    ****             */
 929:src/main.c    **** 
 930:src/main.c    ****             /*
 931:src/main.c    ****             USART_puts(USART1, "TIMER ID: ");
 932:src/main.c    ****             USART_put_int(USART1, cursor->id);
 933:src/main.c    ****             USART_puts(USART1, "\r\n");
 934:src/main.c    **** 
 935:src/main.c    ****             USART_puts(USART1, "TIMER EXECUTED COUNT: ");
 936:src/main.c    ****             USART_put_int(USART1, cursor->debug2);
 937:src/main.c    ****             USART_puts(USART1, "\r\n");
 938:src/main.c    **** 
 939:src/main.c    **** 
 940:src/main.c    ****             USART_puts(USART1, "TIMER EPOCH: ");
 941:src/main.c    ****             USART_put_unsigned_int(USART1, cursor->epoch);
 942:src/main.c    ****             USART_puts(USART1, "\r\n");
 943:src/main.c    **** 
 944:src/main.c    ****             getTime(&t);
 945:src/main.c    ****             unsigned int e = getEpoch(&t, getSystemDay());
 946:src/main.c    ****             USART_puts(USART1, "CURRENT EPOCH: ");
 947:src/main.c    ****             USART_put_unsigned_int(USART1, e);
 948:src/main.c    ****             USART_puts(USART1, "\r\n--------\r\n");
 949:src/main.c    **** */
 950:src/main.c    ****             ///c1->next = cursor->next; //removes cursor from list
 951:src/main.c    ****             ///cursor->next = NULL;
 952:src/main.c    **** 
 953:src/main.c    ****             ///c1 = cursor; //sets c1 as cursor -1 offset
 954:src/main.c    ****             ///cursor = c1->next;
 955:src/main.c    **** 
 956:src/main.c    ****             
 957:src/main.c    ****             c1 = cursor;
 599              		.loc 1 957 0
 600 0068 2546     		mov	r5, r4
 958:src/main.c    ****             cursor = cursor->next;
 601              		.loc 1 958 0
 602 006a 6468     		ldr	r4, [r4, #4]
 603              	.LVL72:
 604              	.L32:
 605              	.LBE14:
 880:src/main.c    ****             //RTC_GetTime(RTC_Format_BIN, &t);
 606              		.loc 1 880 0 discriminator 1
 607 006c 002C     		cmp	r4, #0
 608 006e E1D1     		bne	.L30
 609 0070 D6E7     		b	.L31
 610              	.LBE13:
 611              		.cfi_endproc
 612              	.LFE130:
 614 0072 00BF     		.section	.text.vIncrementDay,"ax",%progbits
 615              		.align	2
 616              		.global	vIncrementDay
 617              		.thumb
 618              		.thumb_func
 620              	vIncrementDay:
 621              	.LFB129:
 778:src/main.c    ****     Timer_node timer = {NULL, NULL};
 622              		.loc 1 778 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 88
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 627              	.LCFI7:
 628              		.cfi_def_cfa_offset 24
 629              		.cfi_offset 4, -24
 630              		.cfi_offset 5, -20
 631              		.cfi_offset 6, -16
 632              		.cfi_offset 7, -12
 633              		.cfi_offset 8, -8
 634              		.cfi_offset 14, -4
 635 0004 96B0     		sub	sp, sp, #88
 636              	.LCFI8:
 637              		.cfi_def_cfa_offset 112
 779:src/main.c    ****     //timer.timer_mutex = NULL;
 638              		.loc 1 779 0
 639 0006 0024     		movs	r4, #0
 640 0008 0D94     		str	r4, [sp, #52]
 641 000a 0E94     		str	r4, [sp, #56]
 642 000c 0F94     		str	r4, [sp, #60]
 643 000e 1094     		str	r4, [sp, #64]
 644 0010 1194     		str	r4, [sp, #68]
 645 0012 1294     		str	r4, [sp, #72]
 646 0014 1394     		str	r4, [sp, #76]
 647 0016 1494     		str	r4, [sp, #80]
 648 0018 1594     		str	r4, [sp, #84]
 785:src/main.c    **** 
 649              		.loc 1 785 0
 650 001a 0CA8     		add	r0, sp, #48
 651 001c FFF7FEFF 		bl	getTime
 652              	.LVL73:
 789:src/main.c    ****     timer.id = 2;
 653              		.loc 1 789 0
 654 0020 FFF7FEFF 		bl	getSystemDay
 655              	.LVL74:
 656 0024 0146     		mov	r1, r0
 657 0026 0CA8     		add	r0, sp, #48
 658 0028 FFF7FEFF 		bl	getEpoch
 659              	.LVL75:
 660 002c 1290     		str	r0, [sp, #72]
 790:src/main.c    **** 
 661              		.loc 1 790 0
 662 002e 0223     		movs	r3, #2
 663 0030 8DF84030 		strb	r3, [sp, #64]
 664              	.LVL76:
 665              	.LBB15:
 808:src/main.c    ****         //getTime(&t);
 666              		.loc 1 808 0
 667 0034 2746     		mov	r7, r4
 814:src/main.c    ****         if (r) {
 668              		.loc 1 814 0
 669 0036 40F20006 		movw	r6, #:lower16:timer_list_head
 670 003a C0F20006 		movt	r6, #:upper16:timer_list_head
 671              	.LBB16:
 845:src/main.c    ****             char msg[]="\r\nCOOL:%d\r\n";
 672              		.loc 1 845 0
 673 003e 40F20008 		movw	r8, #:lower16:USART1_rtos
 674 0042 C0F20008 		movt	r8, #:upper16:USART1_rtos
 846:src/main.c    ****             char buffer[15];
 675              		.loc 1 846 0
 676 0046 40F20005 		movw	r5, #:lower16:.LC7
 677 004a C0F20005 		movt	r5, #:upper16:.LC7
 678              	.LVL77:
 679              	.L36:
 680              	.LBE16:
 807:src/main.c    ****         RTC_GetTime(RTC_Format_BIN, &t);
 681              		.loc 1 807 0
 682 004e 0134     		adds	r4, r4, #1
 683              	.LVL78:
 808:src/main.c    ****         //getTime(&t);
 684              		.loc 1 808 0
 685 0050 3846     		mov	r0, r7
 686 0052 0CA9     		add	r1, sp, #48
 687 0054 FFF7FEFF 		bl	RTC_GetTime
 688              	.LVL79:
 811:src/main.c    ****         //USART_puts(USART1, "\r\n+++++++RAN++++++++\r\n");
 689              		.loc 1 811 0
 690 0058 FFF7FEFF 		bl	getSystemDay
 691              	.LVL80:
 692 005c 0146     		mov	r1, r0
 693 005e 0CA8     		add	r0, sp, #48
 694 0060 FFF7FEFF 		bl	getEpoch
 695              	.LVL81:
 696 0064 0F30     		adds	r0, r0, #15
 697 0066 0F90     		str	r0, [sp, #60]
 814:src/main.c    ****         if (r) {
 698              		.loc 1 814 0
 699 0068 0DA8     		add	r0, sp, #52
 700 006a 3146     		mov	r1, r6
 701 006c FFF7FEFF 		bl	addTimerInterrupt
 702              	.LVL82:
 815:src/main.c    **** 
 703              		.loc 1 815 0
 704 0070 0028     		cmp	r0, #0
 705 0072 ECD0     		beq	.L36
 706              	.LBB17:
 817:src/main.c    ****             //setSystemDay(getSystemDay()+1);
 707              		.loc 1 817 0
 708 0074 1494     		str	r4, [sp, #80]
 823:src/main.c    **** 
 709              		.loc 1 823 0
 710 0076 0CA8     		add	r0, sp, #48
 711              	.LVL83:
 712 0078 FFF7FEFF 		bl	getTime
 713              	.LVL84:
 825:src/main.c    ****             timer.debug0 = getEpoch(&t, getSystemDay());
 714              		.loc 1 825 0
 715 007c FFF7FEFF 		bl	getSystemDay
 716              	.LVL85:
 717 0080 0146     		mov	r1, r0
 718 0082 0CA8     		add	r0, sp, #48
 719 0084 FFF7FEFF 		bl	getEpoch
 720              	.LVL86:
 826:src/main.c    **** /*
 721              		.loc 1 826 0
 722 0088 FFF7FEFF 		bl	getSystemDay
 723              	.LVL87:
 724 008c 0146     		mov	r1, r0
 725 008e 0CA8     		add	r0, sp, #48
 726 0090 FFF7FEFF 		bl	getEpoch
 727              	.LVL88:
 728 0094 1290     		str	r0, [sp, #72]
 845:src/main.c    ****             char msg[]="\r\nCOOL:%d\r\n";
 729              		.loc 1 845 0
 730 0096 CDF82080 		str	r8, [sp, #32]
 846:src/main.c    ****             char buffer[15];
 731              		.loc 1 846 0
 732 009a 01AB     		add	r3, sp, #4
 733 009c 95E80700 		ldmia	r5, {r0, r1, r2}
 734 00a0 83E80700 		stmia	r3, {r0, r1, r2}
 848:src/main.c    **** 
 735              		.loc 1 848 0
 736 00a4 04AA     		add	r2, sp, #16
 737 00a6 0992     		str	r2, [sp, #36]
 850:src/main.c    **** 
 738              		.loc 1 850 0
 739 00a8 08A8     		add	r0, sp, #32
 740 00aa 1946     		mov	r1, r3
 741 00ac 4522     		movs	r2, #69
 742 00ae FFF7FEFF 		bl	USART_rtos_sputs
 743              	.LVL89:
 853:src/main.c    **** 
 744              		.loc 1 853 0
 745 00b2 08A8     		add	r0, sp, #32
 746 00b4 FFF7FEFF 		bl	USART_rtos_wait_send
 747              	.LVL90:
 748 00b8 C9E7     		b	.L36
 749              	.LBE17:
 750              	.LBE15:
 751              		.cfi_endproc
 752              	.LFE129:
 754 00ba 00BF     		.section	.text.setSysTick,"ax",%progbits
 755              		.align	2
 756              		.global	setSysTick
 757              		.thumb
 758              		.thumb_func
 760              	setSysTick:
 761              	.LFB111:
  50:src/main.c    ****     if (SysTick_Config(SystemCoreClock / 1000)) {
 762              		.loc 1 50 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		@ link register save eliminated.
  51:src/main.c    ****         while (1){};
 767              		.loc 1 51 0
 768 0000 40F20003 		movw	r3, #:lower16:SystemCoreClock
 769 0004 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 770 0008 1A68     		ldr	r2, [r3]
 771 000a 44F6D353 		movw	r3, #19923
 772 000e C1F26203 		movt	r3, 4194
 773 0012 A3FB0212 		umull	r1, r2, r3, r2
 774              	.LVL91:
 775              	.LBB18:
 776              	.LBB19:
 777              		.file 2 "libs/CMSIS/Include/core_cm4.h"
   1:libs/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:libs/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:libs/CMSIS/Include/core_cm4.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cm4.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cm4.h ****  *
   7:libs/CMSIS/Include/core_cm4.h ****  * @note
   8:libs/CMSIS/Include/core_cm4.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cm4.h ****  *
  10:libs/CMSIS/Include/core_cm4.h ****  * @par
  11:libs/CMSIS/Include/core_cm4.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:libs/CMSIS/Include/core_cm4.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:libs/CMSIS/Include/core_cm4.h ****  * within development tools that are supporting such ARM based processors.
  14:libs/CMSIS/Include/core_cm4.h ****  *
  15:libs/CMSIS/Include/core_cm4.h ****  * @par
  16:libs/CMSIS/Include/core_cm4.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cm4.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cm4.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cm4.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cm4.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cm4.h ****  *
  22:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cm4.h **** #if defined ( __ICCARM__ )
  24:libs/CMSIS/Include/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:libs/CMSIS/Include/core_cm4.h **** #endif
  26:libs/CMSIS/Include/core_cm4.h **** 
  27:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  28:libs/CMSIS/Include/core_cm4.h ****  extern "C" {
  29:libs/CMSIS/Include/core_cm4.h **** #endif
  30:libs/CMSIS/Include/core_cm4.h **** 
  31:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:libs/CMSIS/Include/core_cm4.h **** 
  34:libs/CMSIS/Include/core_cm4.h **** 
  35:libs/CMSIS/Include/core_cm4.h **** /** \mainpage CMSIS Cortex-M4
  36:libs/CMSIS/Include/core_cm4.h **** 
  37:libs/CMSIS/Include/core_cm4.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:libs/CMSIS/Include/core_cm4.h ****   It consists of:
  39:libs/CMSIS/Include/core_cm4.h **** 
  40:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M Core Register Definitions
  41:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M functions
  42:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M instructions
  43:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M SIMD instructions
  44:libs/CMSIS/Include/core_cm4.h **** 
  45:libs/CMSIS/Include/core_cm4.h ****   The CMSIS Cortex-M4 Core Peripheral Access Layer contains C and assembly functions that ease
  46:libs/CMSIS/Include/core_cm4.h ****   access to the Cortex-M Core
  47:libs/CMSIS/Include/core_cm4.h ****  */
  48:libs/CMSIS/Include/core_cm4.h **** 
  49:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  50:libs/CMSIS/Include/core_cm4.h ****   CMSIS violates following MISRA-C2004 Rules:
  51:libs/CMSIS/Include/core_cm4.h ****   
  52:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  53:libs/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'. 
  54:libs/CMSIS/Include/core_cm4.h **** 
  55:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  56:libs/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:libs/CMSIS/Include/core_cm4.h ****    
  58:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  59:libs/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code. 
  60:libs/CMSIS/Include/core_cm4.h **** 
  61:libs/CMSIS/Include/core_cm4.h ****  */
  62:libs/CMSIS/Include/core_cm4.h **** 
  63:libs/CMSIS/Include/core_cm4.h **** 
  64:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  65:libs/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  66:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  67:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  68:libs/CMSIS/Include/core_cm4.h ****   This file defines all structures and symbols for CMSIS core:
  69:libs/CMSIS/Include/core_cm4.h ****    - CMSIS version number
  70:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core
  71:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core Revision Number
  72:libs/CMSIS/Include/core_cm4.h ****   @{
  73:libs/CMSIS/Include/core_cm4.h ****  */
  74:libs/CMSIS/Include/core_cm4.h **** 
  75:libs/CMSIS/Include/core_cm4.h **** /*  CMSIS CM4 definitions */
  76:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  77:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  78:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | __CM4_CMSIS_VERSION_SUB) /*!<
  79:libs/CMSIS/Include/core_cm4.h **** 
  80:libs/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (0x04)                                                       /*!<
  81:libs/CMSIS/Include/core_cm4.h **** 
  82:libs/CMSIS/Include/core_cm4.h **** 
  83:libs/CMSIS/Include/core_cm4.h **** #if   defined ( __CC_ARM )
  84:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  85:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  86:libs/CMSIS/Include/core_cm4.h **** 
  87:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
  88:libs/CMSIS/Include/core_cm4.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  89:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  90:libs/CMSIS/Include/core_cm4.h **** 
  91:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
  92:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  93:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  94:libs/CMSIS/Include/core_cm4.h **** 
  95:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
  96:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  97:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  98:libs/CMSIS/Include/core_cm4.h **** 
  99:libs/CMSIS/Include/core_cm4.h **** #endif
 100:libs/CMSIS/Include/core_cm4.h **** 
 101:libs/CMSIS/Include/core_cm4.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 102:libs/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
 103:libs/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 104:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 105:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 106:libs/CMSIS/Include/core_cm4.h ****     #else
 107:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 108:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 109:libs/CMSIS/Include/core_cm4.h ****     #endif
 110:libs/CMSIS/Include/core_cm4.h ****   #else
 111:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 112:libs/CMSIS/Include/core_cm4.h ****   #endif
 113:libs/CMSIS/Include/core_cm4.h **** 
 114:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 115:libs/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 116:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 118:libs/CMSIS/Include/core_cm4.h ****     #else
 119:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 121:libs/CMSIS/Include/core_cm4.h ****     #endif
 122:libs/CMSIS/Include/core_cm4.h ****   #else
 123:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 124:libs/CMSIS/Include/core_cm4.h ****   #endif
 125:libs/CMSIS/Include/core_cm4.h **** 
 126:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 127:libs/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 130:libs/CMSIS/Include/core_cm4.h ****     #else
 131:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 133:libs/CMSIS/Include/core_cm4.h ****     #endif
 134:libs/CMSIS/Include/core_cm4.h ****   #else
 135:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 136:libs/CMSIS/Include/core_cm4.h ****   #endif
 137:libs/CMSIS/Include/core_cm4.h **** 
 138:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 139:libs/CMSIS/Include/core_cm4.h ****     /* add preprocessor checks to define __FPU_USED */
 140:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 141:libs/CMSIS/Include/core_cm4.h **** #endif
 142:libs/CMSIS/Include/core_cm4.h **** 
 143:libs/CMSIS/Include/core_cm4.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 144:libs/CMSIS/Include/core_cm4.h **** #include <core_cmInstr.h>                /*!< Core Instruction Access                         */
 145:libs/CMSIS/Include/core_cm4.h **** #include <core_cmFunc.h>                 /*!< Core Function Access                            */
 146:libs/CMSIS/Include/core_cm4.h **** #include <core_cm4_simd.h>               /*!< Compiler specific SIMD Intrinsics               */
 147:libs/CMSIS/Include/core_cm4.h **** 
 148:libs/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 149:libs/CMSIS/Include/core_cm4.h **** 
 150:libs/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 151:libs/CMSIS/Include/core_cm4.h **** 
 152:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 153:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 154:libs/CMSIS/Include/core_cm4.h **** 
 155:libs/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 156:libs/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 157:libs/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 158:libs/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000
 159:libs/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 160:libs/CMSIS/Include/core_cm4.h ****   #endif
 161:libs/CMSIS/Include/core_cm4.h **** 
 162:libs/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 163:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0
 164:libs/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 165:libs/CMSIS/Include/core_cm4.h ****   #endif
 166:libs/CMSIS/Include/core_cm4.h **** 
 167:libs/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 168:libs/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0
 169:libs/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 170:libs/CMSIS/Include/core_cm4.h ****   #endif
 171:libs/CMSIS/Include/core_cm4.h **** 
 172:libs/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 173:libs/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 174:libs/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 175:libs/CMSIS/Include/core_cm4.h ****   #endif
 176:libs/CMSIS/Include/core_cm4.h **** 
 177:libs/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 178:libs/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 179:libs/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 180:libs/CMSIS/Include/core_cm4.h ****   #endif
 181:libs/CMSIS/Include/core_cm4.h **** #endif
 182:libs/CMSIS/Include/core_cm4.h **** 
 183:libs/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 184:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 185:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 186:libs/CMSIS/Include/core_cm4.h **** #else
 187:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 188:libs/CMSIS/Include/core_cm4.h **** #endif
 189:libs/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 190:libs/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 191:libs/CMSIS/Include/core_cm4.h **** 
 192:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_definitions */
 193:libs/CMSIS/Include/core_cm4.h **** 
 194:libs/CMSIS/Include/core_cm4.h **** 
 195:libs/CMSIS/Include/core_cm4.h **** 
 196:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 197:libs/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 198:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 199:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 200:libs/CMSIS/Include/core_cm4.h ****   Core Register contain:
 201:libs/CMSIS/Include/core_cm4.h ****   - Core Register
 202:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 203:libs/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 204:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 205:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 206:libs/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 207:libs/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 208:libs/CMSIS/Include/core_cm4.h **** */
 209:libs/CMSIS/Include/core_cm4.h **** 
 210:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 211:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CORE CMSIS Core
 212:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Registers
 213:libs/CMSIS/Include/core_cm4.h ****   @{
 214:libs/CMSIS/Include/core_cm4.h ****  */
 215:libs/CMSIS/Include/core_cm4.h **** 
 216:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 217:libs/CMSIS/Include/core_cm4.h ****  */
 218:libs/CMSIS/Include/core_cm4.h **** typedef union
 219:libs/CMSIS/Include/core_cm4.h **** {
 220:libs/CMSIS/Include/core_cm4.h ****   struct
 221:libs/CMSIS/Include/core_cm4.h ****   {
 222:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 223:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 224:libs/CMSIS/Include/core_cm4.h **** #else
 225:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 226:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 227:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 228:libs/CMSIS/Include/core_cm4.h **** #endif
 229:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 230:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 231:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 232:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 233:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 234:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 235:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 236:libs/CMSIS/Include/core_cm4.h **** } APSR_Type;
 237:libs/CMSIS/Include/core_cm4.h **** 
 238:libs/CMSIS/Include/core_cm4.h **** 
 239:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 240:libs/CMSIS/Include/core_cm4.h ****  */
 241:libs/CMSIS/Include/core_cm4.h **** typedef union
 242:libs/CMSIS/Include/core_cm4.h **** {
 243:libs/CMSIS/Include/core_cm4.h ****   struct
 244:libs/CMSIS/Include/core_cm4.h ****   {
 245:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 246:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 247:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 248:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 249:libs/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 250:libs/CMSIS/Include/core_cm4.h **** 
 251:libs/CMSIS/Include/core_cm4.h **** 
 252:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 253:libs/CMSIS/Include/core_cm4.h ****  */
 254:libs/CMSIS/Include/core_cm4.h **** typedef union
 255:libs/CMSIS/Include/core_cm4.h **** {
 256:libs/CMSIS/Include/core_cm4.h ****   struct
 257:libs/CMSIS/Include/core_cm4.h ****   {
 258:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 259:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 260:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 261:libs/CMSIS/Include/core_cm4.h **** #else
 262:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 263:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 264:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 265:libs/CMSIS/Include/core_cm4.h **** #endif
 266:libs/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 267:libs/CMSIS/Include/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 268:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 269:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 270:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 271:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 272:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 273:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 274:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 275:libs/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 276:libs/CMSIS/Include/core_cm4.h **** 
 277:libs/CMSIS/Include/core_cm4.h **** 
 278:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 279:libs/CMSIS/Include/core_cm4.h ****  */
 280:libs/CMSIS/Include/core_cm4.h **** typedef union
 281:libs/CMSIS/Include/core_cm4.h **** {
 282:libs/CMSIS/Include/core_cm4.h ****   struct
 283:libs/CMSIS/Include/core_cm4.h ****   {
 284:libs/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 285:libs/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 286:libs/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 287:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 288:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 289:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 290:libs/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 291:libs/CMSIS/Include/core_cm4.h **** 
 292:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 293:libs/CMSIS/Include/core_cm4.h **** 
 294:libs/CMSIS/Include/core_cm4.h **** 
 295:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 296:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 297:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M NVIC Registers
 298:libs/CMSIS/Include/core_cm4.h ****   @{
 299:libs/CMSIS/Include/core_cm4.h ****  */
 300:libs/CMSIS/Include/core_cm4.h **** 
 301:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 302:libs/CMSIS/Include/core_cm4.h ****  */
 303:libs/CMSIS/Include/core_cm4.h **** typedef struct
 304:libs/CMSIS/Include/core_cm4.h **** {
 305:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 306:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[24];
 307:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 308:libs/CMSIS/Include/core_cm4.h ****        uint32_t RSERVED1[24];
 309:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 310:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[24];
 311:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 312:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED3[24];
 313:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 314:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED4[56];
 315:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 316:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED5[644];
 317:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 318:libs/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 319:libs/CMSIS/Include/core_cm4.h **** 
 320:libs/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 321:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 322:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 323:libs/CMSIS/Include/core_cm4.h **** 
 324:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 325:libs/CMSIS/Include/core_cm4.h **** 
 326:libs/CMSIS/Include/core_cm4.h **** 
 327:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 328:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCB CMSIS SCB
 329:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control Block Registers
 330:libs/CMSIS/Include/core_cm4.h ****   @{
 331:libs/CMSIS/Include/core_cm4.h ****  */
 332:libs/CMSIS/Include/core_cm4.h **** 
 333:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 334:libs/CMSIS/Include/core_cm4.h ****  */
 335:libs/CMSIS/Include/core_cm4.h **** typedef struct
 336:libs/CMSIS/Include/core_cm4.h **** {
 337:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 338:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 339:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 340:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 341:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 342:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 343:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 344:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 345:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 346:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 347:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 348:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 349:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 350:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 351:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 352:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 353:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 354:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 355:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 356:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[5];
 357:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 358:libs/CMSIS/Include/core_cm4.h **** } SCB_Type;
 359:libs/CMSIS/Include/core_cm4.h **** 
 360:libs/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 361:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 362:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 363:libs/CMSIS/Include/core_cm4.h **** 
 364:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 365:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 366:libs/CMSIS/Include/core_cm4.h **** 
 367:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 368:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 369:libs/CMSIS/Include/core_cm4.h **** 
 370:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 371:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 372:libs/CMSIS/Include/core_cm4.h **** 
 373:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 374:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 375:libs/CMSIS/Include/core_cm4.h **** 
 376:libs/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 377:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 378:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 379:libs/CMSIS/Include/core_cm4.h **** 
 380:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 381:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 382:libs/CMSIS/Include/core_cm4.h **** 
 383:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 384:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 385:libs/CMSIS/Include/core_cm4.h **** 
 386:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 387:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 388:libs/CMSIS/Include/core_cm4.h **** 
 389:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 390:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 391:libs/CMSIS/Include/core_cm4.h **** 
 392:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 393:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 394:libs/CMSIS/Include/core_cm4.h **** 
 395:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 396:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 397:libs/CMSIS/Include/core_cm4.h **** 
 398:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 399:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 400:libs/CMSIS/Include/core_cm4.h **** 
 401:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 402:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 403:libs/CMSIS/Include/core_cm4.h **** 
 404:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 405:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 406:libs/CMSIS/Include/core_cm4.h **** 
 407:libs/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 408:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:libs/CMSIS/Include/core_cm4.h **** 
 411:libs/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 412:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 413:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 414:libs/CMSIS/Include/core_cm4.h **** 
 415:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 416:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 417:libs/CMSIS/Include/core_cm4.h **** 
 418:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 419:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 420:libs/CMSIS/Include/core_cm4.h **** 
 421:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 422:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 423:libs/CMSIS/Include/core_cm4.h **** 
 424:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 425:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 426:libs/CMSIS/Include/core_cm4.h **** 
 427:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 428:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 429:libs/CMSIS/Include/core_cm4.h **** 
 430:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 431:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 432:libs/CMSIS/Include/core_cm4.h **** 
 433:libs/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 434:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 435:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 436:libs/CMSIS/Include/core_cm4.h **** 
 437:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 438:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 439:libs/CMSIS/Include/core_cm4.h **** 
 440:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 441:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 442:libs/CMSIS/Include/core_cm4.h **** 
 443:libs/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 444:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 445:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 446:libs/CMSIS/Include/core_cm4.h **** 
 447:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 448:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 449:libs/CMSIS/Include/core_cm4.h **** 
 450:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 451:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 452:libs/CMSIS/Include/core_cm4.h **** 
 453:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 454:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 455:libs/CMSIS/Include/core_cm4.h **** 
 456:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 457:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 458:libs/CMSIS/Include/core_cm4.h **** 
 459:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 460:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 461:libs/CMSIS/Include/core_cm4.h **** 
 462:libs/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 463:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 464:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 465:libs/CMSIS/Include/core_cm4.h **** 
 466:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 467:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 468:libs/CMSIS/Include/core_cm4.h **** 
 469:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 470:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 471:libs/CMSIS/Include/core_cm4.h **** 
 472:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 473:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 474:libs/CMSIS/Include/core_cm4.h **** 
 475:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 476:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 477:libs/CMSIS/Include/core_cm4.h **** 
 478:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 479:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 480:libs/CMSIS/Include/core_cm4.h **** 
 481:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 482:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 483:libs/CMSIS/Include/core_cm4.h **** 
 484:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 485:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 486:libs/CMSIS/Include/core_cm4.h **** 
 487:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 488:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 489:libs/CMSIS/Include/core_cm4.h **** 
 490:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 491:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 492:libs/CMSIS/Include/core_cm4.h **** 
 493:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 494:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 495:libs/CMSIS/Include/core_cm4.h **** 
 496:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 497:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 498:libs/CMSIS/Include/core_cm4.h **** 
 499:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 500:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 501:libs/CMSIS/Include/core_cm4.h **** 
 502:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 503:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 504:libs/CMSIS/Include/core_cm4.h **** 
 505:libs/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 506:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 507:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 508:libs/CMSIS/Include/core_cm4.h **** 
 509:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 510:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 511:libs/CMSIS/Include/core_cm4.h **** 
 512:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 513:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 514:libs/CMSIS/Include/core_cm4.h **** 
 515:libs/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 516:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 517:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 518:libs/CMSIS/Include/core_cm4.h **** 
 519:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 520:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 521:libs/CMSIS/Include/core_cm4.h **** 
 522:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 523:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 524:libs/CMSIS/Include/core_cm4.h **** 
 525:libs/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 526:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 527:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 528:libs/CMSIS/Include/core_cm4.h **** 
 529:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 530:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 531:libs/CMSIS/Include/core_cm4.h **** 
 532:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 533:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 534:libs/CMSIS/Include/core_cm4.h **** 
 535:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 536:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 537:libs/CMSIS/Include/core_cm4.h **** 
 538:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 539:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 540:libs/CMSIS/Include/core_cm4.h **** 
 541:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 542:libs/CMSIS/Include/core_cm4.h **** 
 543:libs/CMSIS/Include/core_cm4.h **** 
 544:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 545:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 546:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 547:libs/CMSIS/Include/core_cm4.h ****   @{
 548:libs/CMSIS/Include/core_cm4.h ****  */
 549:libs/CMSIS/Include/core_cm4.h **** 
 550:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 551:libs/CMSIS/Include/core_cm4.h ****  */
 552:libs/CMSIS/Include/core_cm4.h **** typedef struct
 553:libs/CMSIS/Include/core_cm4.h **** {
 554:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 555:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 556:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 557:libs/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 558:libs/CMSIS/Include/core_cm4.h **** 
 559:libs/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 560:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 561:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 562:libs/CMSIS/Include/core_cm4.h **** 
 563:libs/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 564:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 565:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 566:libs/CMSIS/Include/core_cm4.h **** 
 567:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 568:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 569:libs/CMSIS/Include/core_cm4.h **** 
 570:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:libs/CMSIS/Include/core_cm4.h **** 
 573:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:libs/CMSIS/Include/core_cm4.h **** 
 576:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:libs/CMSIS/Include/core_cm4.h **** 
 579:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 580:libs/CMSIS/Include/core_cm4.h **** 
 581:libs/CMSIS/Include/core_cm4.h **** 
 582:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 583:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 584:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Timer Registers
 585:libs/CMSIS/Include/core_cm4.h ****   @{
 586:libs/CMSIS/Include/core_cm4.h ****  */
 587:libs/CMSIS/Include/core_cm4.h **** 
 588:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:libs/CMSIS/Include/core_cm4.h ****  */
 590:libs/CMSIS/Include/core_cm4.h **** typedef struct
 591:libs/CMSIS/Include/core_cm4.h **** {
 592:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:libs/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 597:libs/CMSIS/Include/core_cm4.h **** 
 598:libs/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 599:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:libs/CMSIS/Include/core_cm4.h **** 
 602:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:libs/CMSIS/Include/core_cm4.h **** 
 605:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:libs/CMSIS/Include/core_cm4.h **** 
 608:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:libs/CMSIS/Include/core_cm4.h **** 
 611:libs/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 612:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:libs/CMSIS/Include/core_cm4.h **** 
 615:libs/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 616:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:libs/CMSIS/Include/core_cm4.h **** 
 619:libs/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 620:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:libs/CMSIS/Include/core_cm4.h **** 
 623:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:libs/CMSIS/Include/core_cm4.h **** 
 626:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:libs/CMSIS/Include/core_cm4.h **** 
 629:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 630:libs/CMSIS/Include/core_cm4.h **** 
 631:libs/CMSIS/Include/core_cm4.h **** 
 632:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 633:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_ITM CMSIS ITM
 634:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 635:libs/CMSIS/Include/core_cm4.h ****   @{
 636:libs/CMSIS/Include/core_cm4.h ****  */
 637:libs/CMSIS/Include/core_cm4.h **** 
 638:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:libs/CMSIS/Include/core_cm4.h ****  */
 640:libs/CMSIS/Include/core_cm4.h **** typedef struct
 641:libs/CMSIS/Include/core_cm4.h **** {
 642:libs/CMSIS/Include/core_cm4.h ****   __O  union
 643:libs/CMSIS/Include/core_cm4.h ****   {
 644:libs/CMSIS/Include/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:libs/CMSIS/Include/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:libs/CMSIS/Include/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:libs/CMSIS/Include/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[864];
 649:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED1[15];
 651:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[15];
 653:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:libs/CMSIS/Include/core_cm4.h **** } ITM_Type;
 655:libs/CMSIS/Include/core_cm4.h **** 
 656:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 657:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 658:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 659:libs/CMSIS/Include/core_cm4.h **** 
 660:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 661:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 662:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 663:libs/CMSIS/Include/core_cm4.h **** 
 664:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 665:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 666:libs/CMSIS/Include/core_cm4.h **** 
 667:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 668:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 669:libs/CMSIS/Include/core_cm4.h **** 
 670:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 671:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 672:libs/CMSIS/Include/core_cm4.h **** 
 673:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 674:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 675:libs/CMSIS/Include/core_cm4.h **** 
 676:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 677:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 678:libs/CMSIS/Include/core_cm4.h **** 
 679:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 680:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 681:libs/CMSIS/Include/core_cm4.h **** 
 682:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 683:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 684:libs/CMSIS/Include/core_cm4.h **** 
 685:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 686:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 687:libs/CMSIS/Include/core_cm4.h **** 
 688:libs/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 689:libs/CMSIS/Include/core_cm4.h **** 
 690:libs/CMSIS/Include/core_cm4.h **** 
 691:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 692:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 693:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_MPU CMSIS MPU
 694:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 695:libs/CMSIS/Include/core_cm4.h ****   @{
 696:libs/CMSIS/Include/core_cm4.h ****  */
 697:libs/CMSIS/Include/core_cm4.h **** 
 698:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 699:libs/CMSIS/Include/core_cm4.h ****  */
 700:libs/CMSIS/Include/core_cm4.h **** typedef struct
 701:libs/CMSIS/Include/core_cm4.h **** {
 702:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 703:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 704:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 705:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 706:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 707:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 708:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 709:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 710:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 711:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 712:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 713:libs/CMSIS/Include/core_cm4.h **** } MPU_Type;
 714:libs/CMSIS/Include/core_cm4.h **** 
 715:libs/CMSIS/Include/core_cm4.h **** /* MPU Type Register */
 716:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 717:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 718:libs/CMSIS/Include/core_cm4.h **** 
 719:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 720:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 721:libs/CMSIS/Include/core_cm4.h **** 
 722:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 723:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 724:libs/CMSIS/Include/core_cm4.h **** 
 725:libs/CMSIS/Include/core_cm4.h **** /* MPU Control Register */
 726:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 727:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 728:libs/CMSIS/Include/core_cm4.h **** 
 729:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 730:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 731:libs/CMSIS/Include/core_cm4.h **** 
 732:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 733:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 734:libs/CMSIS/Include/core_cm4.h **** 
 735:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register */
 736:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 737:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 738:libs/CMSIS/Include/core_cm4.h **** 
 739:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register */
 740:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 741:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 742:libs/CMSIS/Include/core_cm4.h **** 
 743:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 744:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 745:libs/CMSIS/Include/core_cm4.h **** 
 746:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 747:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 748:libs/CMSIS/Include/core_cm4.h **** 
 749:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register */
 750:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 751:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 752:libs/CMSIS/Include/core_cm4.h **** 
 753:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 754:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 755:libs/CMSIS/Include/core_cm4.h **** 
 756:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 757:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 758:libs/CMSIS/Include/core_cm4.h **** 
 759:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 760:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 761:libs/CMSIS/Include/core_cm4.h **** 
 762:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
 763:libs/CMSIS/Include/core_cm4.h **** #endif
 764:libs/CMSIS/Include/core_cm4.h **** 
 765:libs/CMSIS/Include/core_cm4.h **** 
 766:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
 767:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 768:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_FPU CMSIS FPU
 769:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Floating Point Unit (FPU)
 770:libs/CMSIS/Include/core_cm4.h ****   @{
 771:libs/CMSIS/Include/core_cm4.h ****  */
 772:libs/CMSIS/Include/core_cm4.h **** 
 773:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
 774:libs/CMSIS/Include/core_cm4.h ****  */
 775:libs/CMSIS/Include/core_cm4.h **** typedef struct
 776:libs/CMSIS/Include/core_cm4.h **** {
 777:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 778:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
 779:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
 780:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
 781:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
 782:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
 783:libs/CMSIS/Include/core_cm4.h **** } FPU_Type;
 784:libs/CMSIS/Include/core_cm4.h **** 
 785:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register */
 786:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
 787:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
 788:libs/CMSIS/Include/core_cm4.h **** 
 789:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
 790:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
 791:libs/CMSIS/Include/core_cm4.h **** 
 792:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
 793:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
 794:libs/CMSIS/Include/core_cm4.h **** 
 795:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
 796:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
 797:libs/CMSIS/Include/core_cm4.h **** 
 798:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
 799:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
 800:libs/CMSIS/Include/core_cm4.h **** 
 801:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
 802:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
 803:libs/CMSIS/Include/core_cm4.h **** 
 804:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
 805:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
 806:libs/CMSIS/Include/core_cm4.h **** 
 807:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
 808:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
 809:libs/CMSIS/Include/core_cm4.h **** 
 810:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
 811:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
 812:libs/CMSIS/Include/core_cm4.h **** 
 813:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register */
 814:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
 815:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
 816:libs/CMSIS/Include/core_cm4.h **** 
 817:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register */
 818:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
 819:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
 820:libs/CMSIS/Include/core_cm4.h **** 
 821:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
 822:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
 823:libs/CMSIS/Include/core_cm4.h **** 
 824:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
 825:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
 826:libs/CMSIS/Include/core_cm4.h **** 
 827:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
 828:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
 829:libs/CMSIS/Include/core_cm4.h **** 
 830:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 */
 831:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
 832:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
 833:libs/CMSIS/Include/core_cm4.h **** 
 834:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
 835:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
 836:libs/CMSIS/Include/core_cm4.h **** 
 837:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
 838:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
 839:libs/CMSIS/Include/core_cm4.h **** 
 840:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
 841:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
 842:libs/CMSIS/Include/core_cm4.h **** 
 843:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
 844:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
 845:libs/CMSIS/Include/core_cm4.h **** 
 846:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
 847:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
 848:libs/CMSIS/Include/core_cm4.h **** 
 849:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
 850:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
 851:libs/CMSIS/Include/core_cm4.h **** 
 852:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
 853:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
 854:libs/CMSIS/Include/core_cm4.h **** 
 855:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 */
 856:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
 857:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
 858:libs/CMSIS/Include/core_cm4.h **** 
 859:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
 860:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
 861:libs/CMSIS/Include/core_cm4.h **** 
 862:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
 863:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
 864:libs/CMSIS/Include/core_cm4.h **** 
 865:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
 866:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
 867:libs/CMSIS/Include/core_cm4.h **** 
 868:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
 869:libs/CMSIS/Include/core_cm4.h **** #endif
 870:libs/CMSIS/Include/core_cm4.h **** 
 871:libs/CMSIS/Include/core_cm4.h **** 
 872:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 873:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 874:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Debug Registers
 875:libs/CMSIS/Include/core_cm4.h ****   @{
 876:libs/CMSIS/Include/core_cm4.h ****  */
 877:libs/CMSIS/Include/core_cm4.h **** 
 878:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 879:libs/CMSIS/Include/core_cm4.h ****  */
 880:libs/CMSIS/Include/core_cm4.h **** typedef struct
 881:libs/CMSIS/Include/core_cm4.h **** {
 882:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 883:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 884:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 885:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 886:libs/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
 887:libs/CMSIS/Include/core_cm4.h **** 
 888:libs/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register */
 889:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 890:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 891:libs/CMSIS/Include/core_cm4.h **** 
 892:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 893:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 894:libs/CMSIS/Include/core_cm4.h **** 
 895:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 896:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 897:libs/CMSIS/Include/core_cm4.h **** 
 898:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 899:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 900:libs/CMSIS/Include/core_cm4.h **** 
 901:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 902:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 903:libs/CMSIS/Include/core_cm4.h **** 
 904:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 905:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 906:libs/CMSIS/Include/core_cm4.h **** 
 907:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 908:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 909:libs/CMSIS/Include/core_cm4.h **** 
 910:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 911:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 912:libs/CMSIS/Include/core_cm4.h **** 
 913:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 914:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 915:libs/CMSIS/Include/core_cm4.h **** 
 916:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 917:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 918:libs/CMSIS/Include/core_cm4.h **** 
 919:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 920:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 921:libs/CMSIS/Include/core_cm4.h **** 
 922:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 923:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 924:libs/CMSIS/Include/core_cm4.h **** 
 925:libs/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register */
 926:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 927:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 928:libs/CMSIS/Include/core_cm4.h **** 
 929:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 930:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 931:libs/CMSIS/Include/core_cm4.h **** 
 932:libs/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register */
 933:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 934:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 935:libs/CMSIS/Include/core_cm4.h **** 
 936:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 937:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 938:libs/CMSIS/Include/core_cm4.h **** 
 939:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 940:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 941:libs/CMSIS/Include/core_cm4.h **** 
 942:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 943:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 944:libs/CMSIS/Include/core_cm4.h **** 
 945:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 946:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 947:libs/CMSIS/Include/core_cm4.h **** 
 948:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 949:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 950:libs/CMSIS/Include/core_cm4.h **** 
 951:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 952:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 953:libs/CMSIS/Include/core_cm4.h **** 
 954:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 955:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 956:libs/CMSIS/Include/core_cm4.h **** 
 957:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 958:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 959:libs/CMSIS/Include/core_cm4.h **** 
 960:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 961:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 962:libs/CMSIS/Include/core_cm4.h **** 
 963:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 964:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 965:libs/CMSIS/Include/core_cm4.h **** 
 966:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 967:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 968:libs/CMSIS/Include/core_cm4.h **** 
 969:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 970:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 971:libs/CMSIS/Include/core_cm4.h **** 
 972:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
 973:libs/CMSIS/Include/core_cm4.h **** 
 974:libs/CMSIS/Include/core_cm4.h **** 
 975:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 976:libs/CMSIS/Include/core_cm4.h ****   @{
 977:libs/CMSIS/Include/core_cm4.h ****  */
 978:libs/CMSIS/Include/core_cm4.h **** 
 979:libs/CMSIS/Include/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
 980:libs/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 981:libs/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 982:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 983:libs/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 984:libs/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 985:libs/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 986:libs/CMSIS/Include/core_cm4.h **** 
 987:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 988:libs/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 989:libs/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 990:libs/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 991:libs/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 992:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 993:libs/CMSIS/Include/core_cm4.h **** 
 994:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 995:libs/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 996:libs/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 997:libs/CMSIS/Include/core_cm4.h **** #endif
 998:libs/CMSIS/Include/core_cm4.h **** 
 999:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
1000:libs/CMSIS/Include/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1001:libs/CMSIS/Include/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1002:libs/CMSIS/Include/core_cm4.h **** #endif
1003:libs/CMSIS/Include/core_cm4.h **** 
1004:libs/CMSIS/Include/core_cm4.h **** /*@} */
1005:libs/CMSIS/Include/core_cm4.h **** 
1006:libs/CMSIS/Include/core_cm4.h **** 
1007:libs/CMSIS/Include/core_cm4.h **** 
1008:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1009:libs/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1010:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1011:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
1012:libs/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1013:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1014:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1015:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1016:libs/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1017:libs/CMSIS/Include/core_cm4.h **** */
1018:libs/CMSIS/Include/core_cm4.h **** 
1019:libs/CMSIS/Include/core_cm4.h **** 
1020:libs/CMSIS/Include/core_cm4.h **** 
1021:libs/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1022:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1023:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
1024:libs/CMSIS/Include/core_cm4.h ****   @{
1025:libs/CMSIS/Include/core_cm4.h ****  */
1026:libs/CMSIS/Include/core_cm4.h **** 
1027:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Priority Grouping
1028:libs/CMSIS/Include/core_cm4.h **** 
1029:libs/CMSIS/Include/core_cm4.h ****   This function sets the priority grouping field using the required unlock sequence.
1030:libs/CMSIS/Include/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1031:libs/CMSIS/Include/core_cm4.h ****   Only values from 0..7 are used.
1032:libs/CMSIS/Include/core_cm4.h ****   In case of a conflict between priority grouping and available
1033:libs/CMSIS/Include/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1034:libs/CMSIS/Include/core_cm4.h **** 
1035:libs/CMSIS/Include/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field
1036:libs/CMSIS/Include/core_cm4.h ****  */
1037:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1038:libs/CMSIS/Include/core_cm4.h **** {
1039:libs/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1040:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1041:libs/CMSIS/Include/core_cm4.h **** 
1042:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1043:libs/CMSIS/Include/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1044:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                 |
1045:libs/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1046:libs/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1047:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1048:libs/CMSIS/Include/core_cm4.h **** }
1049:libs/CMSIS/Include/core_cm4.h **** 
1050:libs/CMSIS/Include/core_cm4.h **** 
1051:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Priority Grouping
1052:libs/CMSIS/Include/core_cm4.h **** 
1053:libs/CMSIS/Include/core_cm4.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
1054:libs/CMSIS/Include/core_cm4.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1055:libs/CMSIS/Include/core_cm4.h **** 
1056:libs/CMSIS/Include/core_cm4.h ****     \return                Priority grouping field
1057:libs/CMSIS/Include/core_cm4.h ****  */
1058:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1059:libs/CMSIS/Include/core_cm4.h **** {
1060:libs/CMSIS/Include/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1061:libs/CMSIS/Include/core_cm4.h **** }
1062:libs/CMSIS/Include/core_cm4.h **** 
1063:libs/CMSIS/Include/core_cm4.h **** 
1064:libs/CMSIS/Include/core_cm4.h **** /** \brief  Enable External Interrupt
1065:libs/CMSIS/Include/core_cm4.h **** 
1066:libs/CMSIS/Include/core_cm4.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
1067:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1068:libs/CMSIS/Include/core_cm4.h **** 
1069:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to enable
1070:libs/CMSIS/Include/core_cm4.h ****  */
1071:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1072:libs/CMSIS/Include/core_cm4.h **** {
1073:libs/CMSIS/Include/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1074:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
1075:libs/CMSIS/Include/core_cm4.h **** }
1076:libs/CMSIS/Include/core_cm4.h **** 
1077:libs/CMSIS/Include/core_cm4.h **** 
1078:libs/CMSIS/Include/core_cm4.h **** /** \brief  Disable External Interrupt
1079:libs/CMSIS/Include/core_cm4.h **** 
1080:libs/CMSIS/Include/core_cm4.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
1081:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1082:libs/CMSIS/Include/core_cm4.h **** 
1083:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to disable
1084:libs/CMSIS/Include/core_cm4.h ****  */
1085:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1086:libs/CMSIS/Include/core_cm4.h **** {
1087:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1088:libs/CMSIS/Include/core_cm4.h **** }
1089:libs/CMSIS/Include/core_cm4.h **** 
1090:libs/CMSIS/Include/core_cm4.h **** 
1091:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Pending Interrupt
1092:libs/CMSIS/Include/core_cm4.h **** 
1093:libs/CMSIS/Include/core_cm4.h ****     This function reads the pending register in the NVIC and returns the pending bit
1094:libs/CMSIS/Include/core_cm4.h ****     for the specified interrupt.
1095:libs/CMSIS/Include/core_cm4.h **** 
1096:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get pending
1097:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not pending
1098:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is pending
1099:libs/CMSIS/Include/core_cm4.h ****  */
1100:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1101:libs/CMSIS/Include/core_cm4.h **** {
1102:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1103:libs/CMSIS/Include/core_cm4.h **** }
1104:libs/CMSIS/Include/core_cm4.h **** 
1105:libs/CMSIS/Include/core_cm4.h **** 
1106:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Pending Interrupt
1107:libs/CMSIS/Include/core_cm4.h **** 
1108:libs/CMSIS/Include/core_cm4.h ****     This function sets the pending bit for the specified interrupt.
1109:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1110:libs/CMSIS/Include/core_cm4.h **** 
1111:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set pending
1112:libs/CMSIS/Include/core_cm4.h ****  */
1113:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1114:libs/CMSIS/Include/core_cm4.h **** {
1115:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1116:libs/CMSIS/Include/core_cm4.h **** }
1117:libs/CMSIS/Include/core_cm4.h **** 
1118:libs/CMSIS/Include/core_cm4.h **** 
1119:libs/CMSIS/Include/core_cm4.h **** /** \brief  Clear Pending Interrupt
1120:libs/CMSIS/Include/core_cm4.h **** 
1121:libs/CMSIS/Include/core_cm4.h ****     This function clears the pending bit for the specified interrupt.
1122:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1123:libs/CMSIS/Include/core_cm4.h **** 
1124:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
1125:libs/CMSIS/Include/core_cm4.h ****  */
1126:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1127:libs/CMSIS/Include/core_cm4.h **** {
1128:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1129:libs/CMSIS/Include/core_cm4.h **** }
1130:libs/CMSIS/Include/core_cm4.h **** 
1131:libs/CMSIS/Include/core_cm4.h **** 
1132:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Active Interrupt
1133:libs/CMSIS/Include/core_cm4.h **** 
1134:libs/CMSIS/Include/core_cm4.h ****     This function reads the active register in NVIC and returns the active bit.
1135:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get active
1136:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not active
1137:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is active
1138:libs/CMSIS/Include/core_cm4.h ****  */
1139:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1140:libs/CMSIS/Include/core_cm4.h **** {
1141:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1142:libs/CMSIS/Include/core_cm4.h **** }
1143:libs/CMSIS/Include/core_cm4.h **** 
1144:libs/CMSIS/Include/core_cm4.h **** 
1145:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Interrupt Priority
1146:libs/CMSIS/Include/core_cm4.h **** 
1147:libs/CMSIS/Include/core_cm4.h ****     This function sets the priority for the specified interrupt. The interrupt
1148:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1149:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1150:libs/CMSIS/Include/core_cm4.h **** 
1151:libs/CMSIS/Include/core_cm4.h ****     Note: The priority cannot be set for every core interrupt.
1152:libs/CMSIS/Include/core_cm4.h **** 
1153:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1154:libs/CMSIS/Include/core_cm4.h ****     \param [in]  priority  Priority to set
1155:libs/CMSIS/Include/core_cm4.h ****  */
1156:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1157:libs/CMSIS/Include/core_cm4.h **** {
1158:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1159:libs/CMSIS/Include/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1160:libs/CMSIS/Include/core_cm4.h ****   else {
1161:libs/CMSIS/Include/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1162:libs/CMSIS/Include/core_cm4.h **** }
1163:libs/CMSIS/Include/core_cm4.h **** 
1164:libs/CMSIS/Include/core_cm4.h **** 
1165:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Interrupt Priority
1166:libs/CMSIS/Include/core_cm4.h **** 
1167:libs/CMSIS/Include/core_cm4.h ****     This function reads the priority for the specified interrupt. The interrupt
1168:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1169:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1170:libs/CMSIS/Include/core_cm4.h **** 
1171:libs/CMSIS/Include/core_cm4.h ****     The returned priority value is automatically aligned to the implemented
1172:libs/CMSIS/Include/core_cm4.h ****     priority bits of the microcontroller.
1173:libs/CMSIS/Include/core_cm4.h **** 
1174:libs/CMSIS/Include/core_cm4.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1175:libs/CMSIS/Include/core_cm4.h ****     \return             Interrupt Priority
1176:libs/CMSIS/Include/core_cm4.h ****  */
1177:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1178:libs/CMSIS/Include/core_cm4.h **** {
1179:libs/CMSIS/Include/core_cm4.h **** 
1180:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1181:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1182:libs/CMSIS/Include/core_cm4.h ****   else {
1183:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1184:libs/CMSIS/Include/core_cm4.h **** }
1185:libs/CMSIS/Include/core_cm4.h **** 
1186:libs/CMSIS/Include/core_cm4.h **** 
1187:libs/CMSIS/Include/core_cm4.h **** /** \brief  Encode Priority
1188:libs/CMSIS/Include/core_cm4.h **** 
1189:libs/CMSIS/Include/core_cm4.h ****     This function encodes the priority for an interrupt with the given priority group,
1190:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1191:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1192:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1193:libs/CMSIS/Include/core_cm4.h **** 
1194:libs/CMSIS/Include/core_cm4.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1195:libs/CMSIS/Include/core_cm4.h **** 
1196:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1197:libs/CMSIS/Include/core_cm4.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1198:libs/CMSIS/Include/core_cm4.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1199:libs/CMSIS/Include/core_cm4.h ****     \return                        Encoded priority for the interrupt
1200:libs/CMSIS/Include/core_cm4.h ****  */
1201:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1202:libs/CMSIS/Include/core_cm4.h **** {
1203:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1204:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1205:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1206:libs/CMSIS/Include/core_cm4.h **** 
1207:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1208:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1209:libs/CMSIS/Include/core_cm4.h **** 
1210:libs/CMSIS/Include/core_cm4.h ****   return (
1211:libs/CMSIS/Include/core_cm4.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1212:libs/CMSIS/Include/core_cm4.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1213:libs/CMSIS/Include/core_cm4.h ****          );
1214:libs/CMSIS/Include/core_cm4.h **** }
1215:libs/CMSIS/Include/core_cm4.h **** 
1216:libs/CMSIS/Include/core_cm4.h **** 
1217:libs/CMSIS/Include/core_cm4.h **** /** \brief  Decode Priority
1218:libs/CMSIS/Include/core_cm4.h **** 
1219:libs/CMSIS/Include/core_cm4.h ****     This function decodes an interrupt priority value with the given priority group to
1220:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1221:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1222:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1223:libs/CMSIS/Include/core_cm4.h **** 
1224:libs/CMSIS/Include/core_cm4.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1225:libs/CMSIS/Include/core_cm4.h **** 
1226:libs/CMSIS/Include/core_cm4.h ****     \param [in]         Priority   Priority value
1227:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1228:libs/CMSIS/Include/core_cm4.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1229:libs/CMSIS/Include/core_cm4.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1230:libs/CMSIS/Include/core_cm4.h ****  */
1231:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1232:libs/CMSIS/Include/core_cm4.h **** {
1233:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1234:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1235:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1236:libs/CMSIS/Include/core_cm4.h **** 
1237:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1238:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1239:libs/CMSIS/Include/core_cm4.h **** 
1240:libs/CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1241:libs/CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1242:libs/CMSIS/Include/core_cm4.h **** }
1243:libs/CMSIS/Include/core_cm4.h **** 
1244:libs/CMSIS/Include/core_cm4.h **** 
1245:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Reset
1246:libs/CMSIS/Include/core_cm4.h **** 
1247:libs/CMSIS/Include/core_cm4.h ****     This function initiate a system reset request to reset the MCU.
1248:libs/CMSIS/Include/core_cm4.h ****  */
1249:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SystemReset(void)
1250:libs/CMSIS/Include/core_cm4.h **** {
1251:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1252:libs/CMSIS/Include/core_cm4.h ****                                                                   buffered write are completed befo
1253:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1254:libs/CMSIS/Include/core_cm4.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1255:libs/CMSIS/Include/core_cm4.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1256:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure completion of memory acces
1257:libs/CMSIS/Include/core_cm4.h ****   while(1);                                                    /* wait until reset */
1258:libs/CMSIS/Include/core_cm4.h **** }
1259:libs/CMSIS/Include/core_cm4.h **** 
1260:libs/CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1261:libs/CMSIS/Include/core_cm4.h **** 
1262:libs/CMSIS/Include/core_cm4.h **** 
1263:libs/CMSIS/Include/core_cm4.h **** 
1264:libs/CMSIS/Include/core_cm4.h **** /* ##################################    SysTick function  ########################################
1265:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1266:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1267:libs/CMSIS/Include/core_cm4.h ****   @{
1268:libs/CMSIS/Include/core_cm4.h ****  */
1269:libs/CMSIS/Include/core_cm4.h **** 
1270:libs/CMSIS/Include/core_cm4.h **** #if (__Vendor_SysTickConfig == 0)
1271:libs/CMSIS/Include/core_cm4.h **** 
1272:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Tick Configuration
1273:libs/CMSIS/Include/core_cm4.h **** 
1274:libs/CMSIS/Include/core_cm4.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1275:libs/CMSIS/Include/core_cm4.h ****     Counter is in free running mode to generate periodical interrupts.
1276:libs/CMSIS/Include/core_cm4.h **** 
1277:libs/CMSIS/Include/core_cm4.h ****     \param [in]  ticks  Number of ticks between two interrupts
1278:libs/CMSIS/Include/core_cm4.h ****     \return          0  Function succeeded
1279:libs/CMSIS/Include/core_cm4.h ****     \return          1  Function failed
1280:libs/CMSIS/Include/core_cm4.h ****  */
1281:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1282:libs/CMSIS/Include/core_cm4.h **** {
1283:libs/CMSIS/Include/core_cm4.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
1284:libs/CMSIS/Include/core_cm4.h **** 
1285:libs/CMSIS/Include/core_cm4.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 778              		.loc 2 1285 0
 779 0016 9209     		lsrs	r2, r2, #6
 780              	.LVL92:
 781 0018 013A     		subs	r2, r2, #1
 782              	.LVL93:
 783 001a 4EF21003 		movw	r3, #57360
 784 001e CEF20003 		movt	r3, 57344
 785 0022 5A60     		str	r2, [r3, #4]
 786              	.LVL94:
 787              	.LBB20:
 788              	.LBB21:
1159:libs/CMSIS/Include/core_cm4.h ****   else {
 789              		.loc 2 1159 0
 790 0024 4FF46D42 		mov	r2, #60672
 791              	.LVL95:
 792 0028 CEF20002 		movt	r2, 57344
 793 002c F021     		movs	r1, #240
 794 002e 82F82310 		strb	r1, [r2, #35]
 795              	.LVL96:
 796              	.LBE21:
 797              	.LBE20:
1286:libs/CMSIS/Include/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
1287:libs/CMSIS/Include/core_cm4.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 798              		.loc 2 1287 0
 799 0032 0022     		movs	r2, #0
 800 0034 9A60     		str	r2, [r3, #8]
1288:libs/CMSIS/Include/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801              		.loc 2 1288 0
 802 0036 0722     		movs	r2, #7
 803 0038 1A60     		str	r2, [r3]
 804 003a 7047     		bx	lr
 805              	.LBE19:
 806              	.LBE18:
 807              		.cfi_endproc
 808              	.LFE111:
 810              		.section	.text.USART1_IRQHandler,"ax",%progbits
 811              		.align	2
 812              		.global	USART1_IRQHandler
 813              		.thumb
 814              		.thumb_func
 816              	USART1_IRQHandler:
 817              	.LFB113:
  82:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
 818              		.loc 1 82 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822 0000 70B5     		push	{r4, r5, r6, lr}
 823              	.LCFI9:
 824              		.cfi_def_cfa_offset 16
 825              		.cfi_offset 4, -16
 826              		.cfi_offset 5, -12
 827              		.cfi_offset 6, -8
 828              		.cfi_offset 14, -4
 829 0002 84B0     		sub	sp, sp, #16
 830              	.LCFI10:
 831              		.cfi_def_cfa_offset 32
  84:src/main.c    ****         static unsigned int count=0;
 832              		.loc 1 84 0
 833 0004 4FF48050 		mov	r0, #4096
 834 0008 C4F20100 		movt	r0, 16385
 835 000c 40F22551 		movw	r1, #1317
 836 0010 FFF7FEFF 		bl	USART_GetITStatus
 837              	.LVL97:
 838 0014 0028     		cmp	r0, #0
 839 0016 00F09780 		beq	.L38
 840              	.LBB22:
  89:src/main.c    **** 
 841              		.loc 1 89 0
 842 001a 4FF48053 		mov	r3, #4096
 843 001e C4F20103 		movt	r3, 16385
 844 0022 9988     		ldrh	r1, [r3, #4]
 845 0024 C9B2     		uxtb	r1, r1
 846              	.LVL98:
  92:src/main.c    ****             USART1_rtos.write_pos--;
 847              		.loc 1 92 0
 848 0026 7F29     		cmp	r1, #127
 849 0028 18BF     		it	ne
 850 002a 0829     		cmpne	r1, #8
 851 002c 1AD1     		bne	.L40
  93:src/main.c    ****             USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 852              		.loc 1 93 0
 853 002e 40F20003 		movw	r3, #:lower16:USART1_rtos
 854 0032 C0F20003 		movt	r3, #:upper16:USART1_rtos
 855 0036 1A68     		ldr	r2, [r3]
 856 0038 013A     		subs	r2, r2, #1
 857 003a 1A60     		str	r2, [r3]
  94:src/main.c    ****             USART_put(USART1, '\b');
 858              		.loc 1 94 0
 859 003c 1344     		add	r3, r3, r2
 860 003e 0D22     		movs	r2, #13
 861 0040 1A77     		strb	r2, [r3, #28]
  95:src/main.c    ****             USART_put(USART1, ' ');
 862              		.loc 1 95 0
 863 0042 4FF48054 		mov	r4, #4096
 864 0046 C4F20104 		movt	r4, 16385
 865 004a 2046     		mov	r0, r4
 866 004c 0821     		movs	r1, #8
 867              	.LVL99:
 868 004e FFF7FEFF 		bl	USART_put
 869              	.LVL100:
  96:src/main.c    ****             USART_put(USART1, '\b');
 870              		.loc 1 96 0
 871 0052 2046     		mov	r0, r4
 872 0054 2021     		movs	r1, #32
 873 0056 FFF7FEFF 		bl	USART_put
 874              	.LVL101:
  97:src/main.c    ****             return;
 875              		.loc 1 97 0
 876 005a 2046     		mov	r0, r4
 877 005c 0821     		movs	r1, #8
 878 005e FFF7FEFF 		bl	USART_put
 879              	.LVL102:
  98:src/main.c    **** 
 880              		.loc 1 98 0
 881 0062 71E0     		b	.L38
 882              	.LVL103:
 883              	.L40:
 104:src/main.c    ****             count++;
 884              		.loc 1 104 0
 885 0064 0D29     		cmp	r1, #13
 886 0066 26D0     		beq	.L41
 105:src/main.c    ****         if (USART1_rtos.write_pos == USART_BUFFER_LEN-1) USART1_rtos.write_pos=0;
 887              		.loc 1 105 0
 888 0068 40F20003 		movw	r3, #:lower16:.LANCHOR1
 889 006c C0F20003 		movt	r3, #:upper16:.LANCHOR1
 890 0070 1A68     		ldr	r2, [r3]
 891 0072 0132     		adds	r2, r2, #1
 892 0074 1A60     		str	r2, [r3]
 106:src/main.c    **** 
 893              		.loc 1 106 0
 894 0076 40F20003 		movw	r3, #:lower16:USART1_rtos
 895 007a C0F20003 		movt	r3, #:upper16:USART1_rtos
 896 007e 1A68     		ldr	r2, [r3]
 897 0080 40F22B13 		movw	r3, #299
 898 0084 9A42     		cmp	r2, r3
 899 0086 01BF     		itttt	eq
 900 0088 40F20003 		movweq	r3, #:lower16:USART1_rtos
 901 008c C0F20003 		movteq	r3, #:upper16:USART1_rtos
 902 0090 0022     		moveq	r2, #0
 903 0092 1A60     		streq	r2, [r3]
 108:src/main.c    ****             USART_put(USART1, t);
 904              		.loc 1 108 0
 905 0094 40F20004 		movw	r4, #:lower16:USART1_rtos
 906 0098 C0F20004 		movt	r4, #:upper16:USART1_rtos
 907 009c 2368     		ldr	r3, [r4]
 908 009e 2344     		add	r3, r3, r4
 909 00a0 1977     		strb	r1, [r3, #28]
 109:src/main.c    ****             USART1_rtos.write_pos++;
 910              		.loc 1 109 0
 911 00a2 4FF48050 		mov	r0, #4096
 912 00a6 C4F20100 		movt	r0, 16385
 913 00aa FFF7FEFF 		bl	USART_put
 914              	.LVL104:
 110:src/main.c    **** 
 915              		.loc 1 110 0
 916 00ae 2368     		ldr	r3, [r4]
 917 00b0 0133     		adds	r3, r3, #1
 918 00b2 2360     		str	r3, [r4]
 919 00b4 48E0     		b	.L38
 920              	.LVL105:
 921              	.L41:
 115:src/main.c    ****                 
 922              		.loc 1 115 0
 923 00b6 40F20003 		movw	r3, #:lower16:.LANCHOR1
 924 00ba C0F20003 		movt	r3, #:upper16:.LANCHOR1
 925 00be 1B68     		ldr	r3, [r3]
 926 00c0 002B     		cmp	r3, #0
 927 00c2 37D0     		beq	.L43
 928              	.LBB23:
 117:src/main.c    **** 
 929              		.loc 1 117 0
 930 00c4 40F20004 		movw	r4, #:lower16:USART1_rtos
 931 00c8 C0F20004 		movt	r4, #:upper16:USART1_rtos
 932 00cc 2368     		ldr	r3, [r4]
 933 00ce 2344     		add	r3, r3, r4
 934 00d0 0D22     		movs	r2, #13
 935 00d2 1A77     		strb	r2, [r3, #28]
 119:src/main.c    **** 
 936              		.loc 1 119 0
 937 00d4 4FF48050 		mov	r0, #4096
 938 00d8 C4F20100 		movt	r0, 16385
 939 00dc 40F20001 		movw	r1, #:lower16:.LC8
 940              	.LVL106:
 941 00e0 C0F20001 		movt	r1, #:upper16:.LC8
 942 00e4 FFF7FEFF 		bl	USART_puts
 943              	.LVL107:
 124:src/main.c    **** 
 944              		.loc 1 124 0
 945 00e8 2268     		ldr	r2, [r4]
 946 00ea 40F20006 		movw	r6, #:lower16:.LANCHOR1
 947 00ee C0F20006 		movt	r6, #:upper16:.LANCHOR1
 948 00f2 3368     		ldr	r3, [r6]
 949 00f4 D31A     		subs	r3, r2, r3
 950 00f6 2344     		add	r3, r3, r4
 951              	.LVL108:
 127:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 952              		.loc 1 127 0
 953 00f8 0922     		movs	r2, #9
 954 00fa 0092     		str	r2, [sp]
 955 00fc 0025     		movs	r5, #0
 956 00fe 0195     		str	r5, [sp, #4]
 957 0100 0295     		str	r5, [sp, #8]
 958 0102 0395     		str	r5, [sp, #12]
 959 0104 40F20000 		movw	r0, #:lower16:vUSART_command_handler
 960 0108 C0F20000 		movt	r0, #:upper16:vUSART_command_handler
 961 010c 40F20001 		movw	r1, #:lower16:.LC9
 962 0110 C0F20001 		movt	r1, #:upper16:.LC9
 963 0114 4FF4EA72 		mov	r2, #468
 964 0118 1C33     		adds	r3, r3, #28
 965              	.LVL109:
 966 011a FFF7FEFF 		bl	xTaskGenericCreate
 967              	.LVL110:
 130:src/main.c    **** 
 968              		.loc 1 130 0
 969 011e A069     		ldr	r0, [r4, #24]
 970 0120 2946     		mov	r1, r5
 971 0122 2A46     		mov	r2, r5
 972 0124 2B46     		mov	r3, r5
 973 0126 FFF7FEFF 		bl	xQueueGenericSend
 974              	.LVL111:
 132:src/main.c    ****                 USART1_rtos.write_pos++;
 975              		.loc 1 132 0
 976 012a 3560     		str	r5, [r6]
 133:src/main.c    **** 
 977              		.loc 1 133 0
 978 012c 2368     		ldr	r3, [r4]
 979 012e 0133     		adds	r3, r3, #1
 980 0130 2360     		str	r3, [r4]
 981              	.LBE23:
 982 0132 09E0     		b	.L38
 983              	.LVL112:
 984              	.L43:
 136:src/main.c    **** 		}
 985              		.loc 1 136 0
 986 0134 4FF48050 		mov	r0, #4096
 987 0138 C4F20100 		movt	r0, 16385
 988 013c 40F20001 		movw	r1, #:lower16:.LC8
 989              	.LVL113:
 990 0140 C0F20001 		movt	r1, #:upper16:.LC8
 991 0144 FFF7FEFF 		bl	USART_puts
 992              	.LVL114:
 993              	.L38:
 994              	.LBE22:
 139:src/main.c    **** 
 995              		.loc 1 139 0
 996 0148 04B0     		add	sp, sp, #16
 997              		@ sp needed
 998 014a 70BD     		pop	{r4, r5, r6, pc}
 999              		.cfi_endproc
 1000              	.LFE113:
 1002              		.section	.text.USART1_Init,"ax",%progbits
 1003              		.align	2
 1004              		.global	USART1_Init
 1005              		.thumb
 1006              		.thumb_func
 1008              	USART1_Init:
 1009              	.LFB114:
 199:src/main.c    **** 
 1010              		.loc 1 199 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 32
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014 0000 30B5     		push	{r4, r5, lr}
 1015              	.LCFI11:
 1016              		.cfi_def_cfa_offset 12
 1017              		.cfi_offset 4, -12
 1018              		.cfi_offset 5, -8
 1019              		.cfi_offset 14, -4
 1020 0002 89B0     		sub	sp, sp, #36
 1021              	.LCFI12:
 1022              		.cfi_def_cfa_offset 48
 201:src/main.c    **** 
 1023              		.loc 1 201 0
 1024 0004 0220     		movs	r0, #2
 1025 0006 0121     		movs	r1, #1
 1026 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1027              	.LVL115:
 203:src/main.c    **** 
 1028              		.loc 1 203 0
 1029 000c 1020     		movs	r0, #16
 1030 000e 0121     		movs	r1, #1
 1031 0010 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 1032              	.LVL116:
 214:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 1033              		.loc 1 214 0
 1034 0014 C023     		movs	r3, #192
 1035 0016 0693     		str	r3, [sp, #24]
 215:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1036              		.loc 1 215 0
 1037 0018 0223     		movs	r3, #2
 1038 001a 8DF81C30 		strb	r3, [sp, #28]
 216:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1039              		.loc 1 216 0
 1040 001e 0024     		movs	r4, #0
 1041 0020 8DF81E40 		strb	r4, [sp, #30]
 217:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1042              		.loc 1 217 0
 1043 0024 8DF81F40 		strb	r4, [sp, #31]
 218:src/main.c    **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 1044              		.loc 1 218 0
 1045 0028 8DF81D30 		strb	r3, [sp, #29]
 219:src/main.c    **** 
 1046              		.loc 1 219 0
 1047 002c 4FF48065 		mov	r5, #1024
 1048 0030 C4F20205 		movt	r5, 16386
 1049 0034 2846     		mov	r0, r5
 1050 0036 06A9     		add	r1, sp, #24
 1051 0038 FFF7FEFF 		bl	GPIO_Init
 1052              	.LVL117:
 223:src/main.c    **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 1053              		.loc 1 223 0
 1054 003c 2846     		mov	r0, r5
 1055 003e 0621     		movs	r1, #6
 1056 0040 0722     		movs	r2, #7
 1057 0042 FFF7FEFF 		bl	GPIO_PinAFConfig
 1058              	.LVL118:
 224:src/main.c    **** 
 1059              		.loc 1 224 0
 1060 0046 2846     		mov	r0, r5
 1061 0048 0721     		movs	r1, #7
 1062 004a 0A46     		mov	r2, r1
 1063 004c FFF7FEFF 		bl	GPIO_PinAFConfig
 1064              	.LVL119:
 228:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1065              		.loc 1 228 0
 1066 0050 4FF41643 		mov	r3, #38400
 1067 0054 0293     		str	r3, [sp, #8]
 229:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1068              		.loc 1 229 0
 1069 0056 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 230:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 1070              		.loc 1 230 0
 1071 005a ADF80E40 		strh	r4, [sp, #14]	@ movhi
 231:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 1072              		.loc 1 231 0
 1073 005e ADF81040 		strh	r4, [sp, #16]	@ movhi
 232:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 1074              		.loc 1 232 0
 1075 0062 ADF81440 		strh	r4, [sp, #20]	@ movhi
 233:src/main.c    **** 
 1076              		.loc 1 233 0
 1077 0066 0C23     		movs	r3, #12
 1078 0068 ADF81230 		strh	r3, [sp, #18]	@ movhi
 236:src/main.c    **** 
 1079              		.loc 1 236 0
 1080 006c 4FF48055 		mov	r5, #4096
 1081 0070 C4F20105 		movt	r5, 16385
 1082 0074 2846     		mov	r0, r5
 1083 0076 02A9     		add	r1, sp, #8
 1084 0078 FFF7FEFF 		bl	USART_Init
 1085              	.LVL120:
 239:src/main.c    **** 
 1086              		.loc 1 239 0
 1087 007c 2846     		mov	r0, r5
 1088 007e 40F22551 		movw	r1, #1317
 1089 0082 0122     		movs	r2, #1
 1090 0084 FFF7FEFF 		bl	USART_ITConfig
 1091              	.LVL121:
 241:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 1092              		.loc 1 241 0
 1093 0088 2523     		movs	r3, #37
 1094 008a 8DF80430 		strb	r3, [sp, #4]
 242:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1095              		.loc 1 242 0
 1096 008e 8DF80540 		strb	r4, [sp, #5]
 243:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1097              		.loc 1 243 0
 1098 0092 8DF80640 		strb	r4, [sp, #6]
 244:src/main.c    **** 
 1099              		.loc 1 244 0
 1100 0096 0124     		movs	r4, #1
 1101 0098 8DF80740 		strb	r4, [sp, #7]
 246:src/main.c    **** 
 1102              		.loc 1 246 0
 1103 009c 01A8     		add	r0, sp, #4
 1104 009e FFF7FEFF 		bl	NVIC_Init
 1105              	.LVL122:
 248:src/main.c    **** 
 1106              		.loc 1 248 0
 1107 00a2 2846     		mov	r0, r5
 1108 00a4 2146     		mov	r1, r4
 1109 00a6 FFF7FEFF 		bl	USART_Cmd
 1110              	.LVL123:
 251:src/main.c    **** void initx(void){
 1111              		.loc 1 251 0
 1112 00aa 09B0     		add	sp, sp, #36
 1113              		@ sp needed
 1114 00ac 30BD     		pop	{r4, r5, pc}
 1115              		.cfi_endproc
 1116              	.LFE114:
 1118 00ae 00BF     		.section	.text.initx,"ax",%progbits
 1119              		.align	2
 1120              		.global	initx
 1121              		.thumb
 1122              		.thumb_func
 1124              	initx:
 1125              	.LFB115:
 252:src/main.c    **** 	//Enable GPIO Clocks For USART2
 1126              		.loc 1 252 0
 1127              		.cfi_startproc
 1128              		@ args = 0, pretend = 0, frame = 32
 1129              		@ frame_needed = 0, uses_anonymous_args = 0
 1130 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1131              	.LCFI13:
 1132              		.cfi_def_cfa_offset 20
 1133              		.cfi_offset 4, -20
 1134              		.cfi_offset 5, -16
 1135              		.cfi_offset 6, -12
 1136              		.cfi_offset 7, -8
 1137              		.cfi_offset 14, -4
 1138 0002 89B0     		sub	sp, sp, #36
 1139              	.LCFI14:
 1140              		.cfi_def_cfa_offset 56
 254:src/main.c    **** 
 1141              		.loc 1 254 0
 1142 0004 0120     		movs	r0, #1
 1143 0006 0146     		mov	r1, r0
 1144 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1145              	.LVL124:
 257:src/main.c    **** 
 1146              		.loc 1 257 0
 1147 000c 4FF40030 		mov	r0, #131072
 1148 0010 0121     		movs	r1, #1
 1149 0012 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1150              	.LVL125:
 268:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 1151              		.loc 1 268 0
 1152 0016 0C27     		movs	r7, #12
 1153 0018 0697     		str	r7, [sp, #24]
 269:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1154              		.loc 1 269 0
 1155 001a 0226     		movs	r6, #2
 1156 001c 8DF81C60 		strb	r6, [sp, #28]
 270:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1157              		.loc 1 270 0
 1158 0020 0024     		movs	r4, #0
 1159 0022 8DF81E40 		strb	r4, [sp, #30]
 271:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1160              		.loc 1 271 0
 1161 0026 8DF81F40 		strb	r4, [sp, #31]
 272:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1162              		.loc 1 272 0
 1163 002a 8DF81D60 		strb	r6, [sp, #29]
 273:src/main.c    **** 
 1164              		.loc 1 273 0
 1165 002e 2546     		mov	r5, r4
 1166 0030 C4F20205 		movt	r5, 16386
 1167 0034 2846     		mov	r0, r5
 1168 0036 06A9     		add	r1, sp, #24
 1169 0038 FFF7FEFF 		bl	GPIO_Init
 1170              	.LVL126:
 277:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 1171              		.loc 1 277 0
 1172 003c 2846     		mov	r0, r5
 1173 003e 3146     		mov	r1, r6
 1174 0040 0722     		movs	r2, #7
 1175 0042 FFF7FEFF 		bl	GPIO_PinAFConfig
 1176              	.LVL127:
 278:src/main.c    **** 
 1177              		.loc 1 278 0
 1178 0046 2846     		mov	r0, r5
 1179 0048 0321     		movs	r1, #3
 1180 004a 0722     		movs	r2, #7
 1181 004c FFF7FEFF 		bl	GPIO_PinAFConfig
 1182              	.LVL128:
 281:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 1183              		.loc 1 281 0
 1184 0050 0820     		movs	r0, #8
 1185 0052 0121     		movs	r1, #1
 1186 0054 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1187              	.LVL129:
 282:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 1188              		.loc 1 282 0
 1189 0058 4FF47043 		mov	r3, #61440
 1190 005c 0693     		str	r3, [sp, #24]
 283:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1191              		.loc 1 283 0
 1192 005e 0125     		movs	r5, #1
 1193 0060 8DF81C50 		strb	r5, [sp, #28]
 284:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 1194              		.loc 1 284 0
 1195 0064 8DF81E40 		strb	r4, [sp, #30]
 285:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1196              		.loc 1 285 0
 1197 0068 0323     		movs	r3, #3
 1198 006a 8DF81D30 		strb	r3, [sp, #29]
 286:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 1199              		.loc 1 286 0
 1200 006e 8DF81F40 		strb	r4, [sp, #31]
 287:src/main.c    **** 	//USART Parameters
 1201              		.loc 1 287 0
 1202 0072 4FF44060 		mov	r0, #3072
 1203 0076 C4F20200 		movt	r0, 16386
 1204 007a 06A9     		add	r1, sp, #24
 1205 007c FFF7FEFF 		bl	GPIO_Init
 1206              	.LVL130:
 290:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1207              		.loc 1 290 0
 1208 0080 4FF41643 		mov	r3, #38400
 1209 0084 0293     		str	r3, [sp, #8]
 291:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1210              		.loc 1 291 0
 1211 0086 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 292:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 1212              		.loc 1 292 0
 1213 008a ADF80E40 		strh	r4, [sp, #14]	@ movhi
 293:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 1214              		.loc 1 293 0
 1215 008e ADF81040 		strh	r4, [sp, #16]	@ movhi
 294:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 1216              		.loc 1 294 0
 1217 0092 ADF81440 		strh	r4, [sp, #20]	@ movhi
 295:src/main.c    **** 
 1218              		.loc 1 295 0
 1219 0096 ADF81270 		strh	r7, [sp, #18]	@ movhi
 298:src/main.c    **** 
 1220              		.loc 1 298 0
 1221 009a 4FF48846 		mov	r6, #17408
 1222 009e C4F20006 		movt	r6, 16384
 1223 00a2 3046     		mov	r0, r6
 1224 00a4 02A9     		add	r1, sp, #8
 1225 00a6 FFF7FEFF 		bl	USART_Init
 1226              	.LVL131:
 301:src/main.c    **** 
 1227              		.loc 1 301 0
 1228 00aa 3046     		mov	r0, r6
 1229 00ac 40F22551 		movw	r1, #1317
 1230 00b0 2A46     		mov	r2, r5
 1231 00b2 FFF7FEFF 		bl	USART_ITConfig
 1232              	.LVL132:
 303:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 1233              		.loc 1 303 0
 1234 00b6 2623     		movs	r3, #38
 1235 00b8 8DF80430 		strb	r3, [sp, #4]
 304:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1236              		.loc 1 304 0
 1237 00bc 8DF80540 		strb	r4, [sp, #5]
 305:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1238              		.loc 1 305 0
 1239 00c0 8DF80640 		strb	r4, [sp, #6]
 306:src/main.c    **** 
 1240              		.loc 1 306 0
 1241 00c4 8DF80750 		strb	r5, [sp, #7]
 308:src/main.c    **** 
 1242              		.loc 1 308 0
 1243 00c8 01A8     		add	r0, sp, #4
 1244 00ca FFF7FEFF 		bl	NVIC_Init
 1245              	.LVL133:
 310:src/main.c    **** }
 1246              		.loc 1 310 0
 1247 00ce 3046     		mov	r0, r6
 1248 00d0 2946     		mov	r1, r5
 1249 00d2 FFF7FEFF 		bl	USART_Cmd
 1250              	.LVL134:
 311:src/main.c    **** 
 1251              		.loc 1 311 0
 1252 00d6 09B0     		add	sp, sp, #36
 1253              		@ sp needed
 1254 00d8 F0BD     		pop	{r4, r5, r6, r7, pc}
 1255              		.cfi_endproc
 1256              	.LFE115:
 1258 00da 00BF     		.section	.text.TIM_PWM_init,"ax",%progbits
 1259              		.align	2
 1260              		.global	TIM_PWM_init
 1261              		.thumb
 1262              		.thumb_func
 1264              	TIM_PWM_init:
 1265              	.LFB116:
 313:src/main.c    ****     //TIMER SETUP
 1266              		.loc 1 313 0
 1267              		.cfi_startproc
 1268              		@ args = 0, pretend = 0, frame = 32
 1269              		@ frame_needed = 0, uses_anonymous_args = 0
 1270 0000 70B5     		push	{r4, r5, r6, lr}
 1271              	.LCFI15:
 1272              		.cfi_def_cfa_offset 16
 1273              		.cfi_offset 4, -16
 1274              		.cfi_offset 5, -12
 1275              		.cfi_offset 6, -8
 1276              		.cfi_offset 14, -4
 1277 0002 88B0     		sub	sp, sp, #32
 1278              	.LCFI16:
 1279              		.cfi_def_cfa_offset 48
 315:src/main.c    ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); //USART1
 1280              		.loc 1 315 0
 1281 0004 0420     		movs	r0, #4
 1282 0006 0121     		movs	r1, #1
 1283 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1284              	.LVL135:
 316:src/main.c    **** 
 1285              		.loc 1 316 0
 1286 000c 0120     		movs	r0, #1
 1287 000e 0146     		mov	r1, r0
 1288 0010 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 1289              	.LVL136:
 321:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 84;
 1290              		.loc 1 321 0
 1291 0014 44F61F63 		movw	r3, #19999
 1292 0018 0693     		str	r3, [sp, #24]
 322:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;//TIM_CKD_DIV1;
 1293              		.loc 1 322 0
 1294 001a 5423     		movs	r3, #84
 1295 001c ADF81430 		strh	r3, [sp, #20]	@ movhi
 323:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1296              		.loc 1 323 0
 1297 0020 0025     		movs	r5, #0
 1298 0022 ADF81C50 		strh	r5, [sp, #28]	@ movhi
 324:src/main.c    **** 
 1299              		.loc 1 324 0
 1300 0026 ADF81650 		strh	r5, [sp, #22]	@ movhi
 326:src/main.c    ****     TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 1301              		.loc 1 326 0
 1302 002a 4FF40064 		mov	r4, #2048
 1303 002e C4F20004 		movt	r4, 16384
 1304 0032 2046     		mov	r0, r4
 1305 0034 05A9     		add	r1, sp, #20
 1306 0036 FFF7FEFF 		bl	TIM_TimeBaseInit
 1307              	.LVL137:
 327:src/main.c    **** 
 1308              		.loc 1 327 0
 1309 003a 2846     		mov	r0, r5
 1310 003c C4F20100 		movt	r0, 16385
 1311 0040 05A9     		add	r1, sp, #20
 1312 0042 FFF7FEFF 		bl	TIM_TimeBaseInit
 1313              	.LVL138:
 334:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 1314              		.loc 1 334 0
 1315 0046 6023     		movs	r3, #96
 1316 0048 ADF80030 		strh	r3, [sp]	@ movhi
 335:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0;
 1317              		.loc 1 335 0
 1318 004c 0126     		movs	r6, #1
 1319 004e ADF80260 		strh	r6, [sp, #2]	@ movhi
 336:src/main.c    ****     TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 1320              		.loc 1 336 0
 1321 0052 0295     		str	r5, [sp, #8]
 337:src/main.c    ****     
 1322              		.loc 1 337 0
 1323 0054 ADF80C50 		strh	r5, [sp, #12]	@ movhi
 339:src/main.c    ****     TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 1324              		.loc 1 339 0
 1325 0058 2046     		mov	r0, r4
 1326 005a 6946     		mov	r1, sp
 1327 005c FFF7FEFF 		bl	TIM_OC1Init
 1328              	.LVL139:
 340:src/main.c    **** 
 1329              		.loc 1 340 0
 1330 0060 2046     		mov	r0, r4
 1331 0062 0821     		movs	r1, #8
 1332 0064 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 1333              	.LVL140:
 342:src/main.c    ****     TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 1334              		.loc 1 342 0
 1335 0068 2046     		mov	r0, r4
 1336 006a 6946     		mov	r1, sp
 1337 006c FFF7FEFF 		bl	TIM_OC2Init
 1338              	.LVL141:
 343:src/main.c    **** 
 1339              		.loc 1 343 0
 1340 0070 2046     		mov	r0, r4
 1341 0072 0821     		movs	r1, #8
 1342 0074 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 1343              	.LVL142:
 346:src/main.c    ****     TIM_Cmd(TIM4, ENABLE);
 1344              		.loc 1 346 0
 1345 0078 2046     		mov	r0, r4
 1346 007a 3146     		mov	r1, r6
 1347 007c FFF7FEFF 		bl	TIM_ARRPreloadConfig
 1348              	.LVL143:
 347:src/main.c    **** }
 1349              		.loc 1 347 0
 1350 0080 2046     		mov	r0, r4
 1351 0082 3146     		mov	r1, r6
 1352 0084 FFF7FEFF 		bl	TIM_Cmd
 1353              	.LVL144:
 348:src/main.c    **** 
 1354              		.loc 1 348 0
 1355 0088 08B0     		add	sp, sp, #32
 1356              		@ sp needed
 1357 008a 70BD     		pop	{r4, r5, r6, pc}
 1358              		.cfi_endproc
 1359              	.LFE116:
 1361              		.section	.text.vACSystem_Init,"ax",%progbits
 1362              		.align	2
 1363              		.global	vACSystem_Init
 1364              		.thumb
 1365              		.thumb_func
 1367              	vACSystem_Init:
 1368              	.LFB117:
 378:src/main.c    ****     USART_rtos_packet packet, packet1;
 1369              		.loc 1 378 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 32
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
 1373 0000 70B5     		push	{r4, r5, r6, lr}
 1374              	.LCFI17:
 1375              		.cfi_def_cfa_offset 16
 1376              		.cfi_offset 4, -16
 1377              		.cfi_offset 5, -12
 1378              		.cfi_offset 6, -8
 1379              		.cfi_offset 14, -4
 1380 0002 88B0     		sub	sp, sp, #32
 1381              	.LCFI18:
 1382              		.cfi_def_cfa_offset 48
 380:src/main.c    ****     USART_rtos_puts(&packet, "Init AC System...");
 1383              		.loc 1 380 0
 1384 0004 40F20006 		movw	r6, #:lower16:USART1_rtos
 1385 0008 C0F20006 		movt	r6, #:upper16:USART1_rtos
 1386 000c 08AD     		add	r5, sp, #32
 1387 000e 45F8106D 		str	r6, [r5, #-16]!
 381:src/main.c    **** 
 1388              		.loc 1 381 0
 1389 0012 2846     		mov	r0, r5
 1390 0014 40F20001 		movw	r1, #:lower16:.LC10
 1391 0018 C0F20001 		movt	r1, #:upper16:.LC10
 1392 001c FFF7FEFF 		bl	USART_rtos_puts
 1393              	.LVL145:
 384:src/main.c    **** 
 1394              		.loc 1 384 0
 1395 0020 40F20003 		movw	r3, #:lower16:AC
 1396 0024 C0F20003 		movt	r3, #:upper16:AC
 386:src/main.c    **** //    USART_puts(USART2, "AC successfully initialized...\r\n");
 1397              		.loc 1 386 0
 1398 0028 0122     		movs	r2, #1
 1399 002a 1A70     		strb	r2, [r3]
 389:src/main.c    ****     USART_rtos_puts(&packet1, " OK\r\n");
 1400              		.loc 1 389 0
 1401 002c 08AC     		add	r4, sp, #32
 1402 002e 44F8206D 		str	r6, [r4, #-32]!
 390:src/main.c    **** 
 1403              		.loc 1 390 0
 1404 0032 6846     		mov	r0, sp
 1405 0034 40F20001 		movw	r1, #:lower16:.LC11
 1406 0038 C0F20001 		movt	r1, #:upper16:.LC11
 1407 003c FFF7FEFF 		bl	USART_rtos_puts
 1408              	.LVL146:
 393:src/main.c    ****     USART_rtos_wait_send(&packet1);
 1409              		.loc 1 393 0
 1410 0040 2846     		mov	r0, r5
 1411 0042 FFF7FEFF 		bl	USART_rtos_wait_send
 1412              	.LVL147:
 394:src/main.c    **** 
 1413              		.loc 1 394 0
 1414 0046 6846     		mov	r0, sp
 1415 0048 FFF7FEFF 		bl	USART_rtos_wait_send
 1416              	.LVL148:
 396:src/main.c    **** }
 1417              		.loc 1 396 0
 1418 004c 0020     		movs	r0, #0
 1419 004e FFF7FEFF 		bl	vTaskDelete
 1420              	.LVL149:
 397:src/main.c    **** 
 1421              		.loc 1 397 0
 1422 0052 08B0     		add	sp, sp, #32
 1423              		@ sp needed
 1424 0054 70BD     		pop	{r4, r5, r6, pc}
 1425              		.cfi_endproc
 1426              	.LFE117:
 1428 0056 00BF     		.section	.text.vLightingSystem_Init,"ax",%progbits
 1429              		.align	2
 1430              		.global	vLightingSystem_Init
 1431              		.thumb
 1432              		.thumb_func
 1434              	vLightingSystem_Init:
 1435              	.LFB118:
 399:src/main.c    ****     //USART_rtos_puts(USART2, "Init Lighting System...");
 1436              		.loc 1 399 0
 1437              		.cfi_startproc
 1438              		@ args = 0, pretend = 0, frame = 0
 1439              		@ frame_needed = 0, uses_anonymous_args = 0
 1440 0000 08B5     		push	{r3, lr}
 1441              	.LCFI19:
 1442              		.cfi_def_cfa_offset 8
 1443              		.cfi_offset 3, -8
 1444              		.cfi_offset 14, -4
 402:src/main.c    **** 
 1445              		.loc 1 402 0
 1446 0002 40F20003 		movw	r3, #:lower16:lighting
 1447 0006 C0F20003 		movt	r3, #:upper16:lighting
 404:src/main.c    ****     //USART_puts(USART2, "Lighting successfully initialized...\r\n");
 1448              		.loc 1 404 0
 1449 000a 0122     		movs	r2, #1
 1450 000c 1A74     		strb	r2, [r3, #16]
 409:src/main.c    **** }
 1451              		.loc 1 409 0
 1452 000e 0020     		movs	r0, #0
 1453 0010 FFF7FEFF 		bl	vTaskDelete
 1454              	.LVL150:
 1455 0014 08BD     		pop	{r3, pc}
 1456              		.cfi_endproc
 1457              	.LFE118:
 1459 0016 00BF     		.section	.text.HydroponicUDS_Init,"ax",%progbits
 1460              		.align	2
 1461              		.global	HydroponicUDS_Init
 1462              		.thumb
 1463              		.thumb_func
 1465              	HydroponicUDS_Init:
 1466              	.LFB119:
 413:src/main.c    **** 
 1467              		.loc 1 413 0
 1468              		.cfi_startproc
 1469              		@ args = 0, pretend = 0, frame = 8
 1470              		@ frame_needed = 0, uses_anonymous_args = 0
 1471 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1472              	.LCFI20:
 1473              		.cfi_def_cfa_offset 24
 1474              		.cfi_offset 4, -24
 1475              		.cfi_offset 5, -20
 1476              		.cfi_offset 6, -16
 1477              		.cfi_offset 7, -12
 1478              		.cfi_offset 8, -8
 1479              		.cfi_offset 14, -4
 1480 0004 82B0     		sub	sp, sp, #8
 1481              	.LCFI21:
 1482              		.cfi_def_cfa_offset 32
 415:src/main.c    ****     hydroponics.UDS_PHDown.state = MODULE_RUNNING;
 1483              		.loc 1 415 0
 1484 0006 40F20004 		movw	r4, #:lower16:hydroponics
 1485 000a C0F20004 		movt	r4, #:upper16:hydroponics
 1486 000e 0025     		movs	r5, #0
 1487 0010 84F82850 		strb	r5, [r4, #40]
 416:src/main.c    ****     hydroponics.UDS_Nutrient.state = MODULE_RUNNING;
 1488              		.loc 1 416 0
 1489 0014 84F85450 		strb	r5, [r4, #84]
 417:src/main.c    **** 
 1490              		.loc 1 417 0
 1491 0018 84F88050 		strb	r5, [r4, #128]
 424:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP; //PP
 1492              		.loc 1 424 0
 1493 001c 4FF00808 		mov	r8, #8
 1494 0020 CDF80080 		str	r8, [sp]
 425:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 1495              		.loc 1 425 0
 1496 0024 8DF80650 		strb	r5, [sp, #6]
 426:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 1497              		.loc 1 426 0
 1498 0028 8DF80450 		strb	r5, [sp, #4]
 427:src/main.c    **** 
 1499              		.loc 1 427 0
 1500 002c 0323     		movs	r3, #3
 1501 002e 8DF80530 		strb	r3, [sp, #5]
 429:src/main.c    **** 
 1502              		.loc 1 429 0
 1503 0032 4FF44066 		mov	r6, #3072
 1504 0036 C4F20206 		movt	r6, 16386
 1505 003a 3046     		mov	r0, r6
 1506 003c 6946     		mov	r1, sp
 1507 003e FFF7FEFF 		bl	GPIO_Init
 1508              	.LVL151:
 431:src/main.c    **** 	gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1509              		.loc 1 431 0
 1510 0042 1027     		movs	r7, #16
 1511 0044 0097     		str	r7, [sp]
 432:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 1512              		.loc 1 432 0
 1513 0046 8DF80750 		strb	r5, [sp, #7]
 433:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ultrasonic);
 1514              		.loc 1 433 0
 1515 004a 0123     		movs	r3, #1
 1516 004c 8DF80430 		strb	r3, [sp, #4]
 434:src/main.c    **** 
 1517              		.loc 1 434 0
 1518 0050 3046     		mov	r0, r6
 1519 0052 6946     		mov	r1, sp
 1520 0054 FFF7FEFF 		bl	GPIO_Init
 1521              	.LVL152:
 436:src/main.c    ****     hydroponics.UDS_PHUp.port_in = UDS_PHUP_PORT_IN;
 1522              		.loc 1 436 0
 1523 0058 A4F81C80 		strh	r8, [r4, #28]	@ movhi
 437:src/main.c    ****     hydroponics.UDS_PHUp.pin_out = UDS_PHUP_PIN_OUT;
 1524              		.loc 1 437 0
 1525 005c 6661     		str	r6, [r4, #20]
 438:src/main.c    ****     hydroponics.UDS_PHUp.port_out = UDS_PHUP_PORT_OUT;
 1526              		.loc 1 438 0
 1527 005e E783     		strh	r7, [r4, #30]	@ movhi
 439:src/main.c    **** 
 1528              		.loc 1 439 0
 1529 0060 A661     		str	r6, [r4, #24]
 442:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_PHDown);
 1530              		.loc 1 442 0
 1531 0062 04F11400 		add	r0, r4, #20
 1532 0066 FFF7FEFF 		bl	UDS_Module_Init
 1533              	.LVL153:
 443:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_Nutrient);
 1534              		.loc 1 443 0
 1535 006a 04F14000 		add	r0, r4, #64
 1536 006e FFF7FEFF 		bl	UDS_Module_Init
 1537              	.LVL154:
 444:src/main.c    **** 
 1538              		.loc 1 444 0
 1539 0072 04F16C00 		add	r0, r4, #108
 1540 0076 FFF7FEFF 		bl	UDS_Module_Init
 1541              	.LVL155:
 448:src/main.c    **** void HydroponicPPumps_Init(void) {
 1542              		.loc 1 448 0
 1543 007a 02B0     		add	sp, sp, #8
 1544              		@ sp needed
 1545 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1546              		.cfi_endproc
 1547              	.LFE119:
 1549              		.section	.text.HydroponicPPumps_Init,"ax",%progbits
 1550              		.align	2
 1551              		.global	HydroponicPPumps_Init
 1552              		.thumb
 1553              		.thumb_func
 1555              	HydroponicPPumps_Init:
 1556              	.LFB120:
 449:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 1557              		.loc 1 449 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 8
 1560              		@ frame_needed = 0, uses_anonymous_args = 0
 1561 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1562              	.LCFI22:
 1563              		.cfi_def_cfa_offset 20
 1564              		.cfi_offset 4, -20
 1565              		.cfi_offset 5, -16
 1566              		.cfi_offset 6, -12
 1567              		.cfi_offset 7, -8
 1568              		.cfi_offset 14, -4
 1569 0002 83B0     		sub	sp, sp, #12
 1570              	.LCFI23:
 1571              		.cfi_def_cfa_offset 32
 450:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
 1572              		.loc 1 450 0
 1573 0004 0420     		movs	r0, #4
 1574 0006 0121     		movs	r1, #1
 1575 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1576              	.LVL156:
 453:src/main.c    **** 	gpio_ppump.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1577              		.loc 1 453 0
 1578 000c 4027     		movs	r7, #64
 1579 000e 0097     		str	r7, [sp]
 454:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT;
 1580              		.loc 1 454 0
 1581 0010 0025     		movs	r5, #0
 1582 0012 8DF80750 		strb	r5, [sp, #7]
 455:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; //PP
 1583              		.loc 1 455 0
 1584 0016 0123     		movs	r3, #1
 1585 0018 8DF80430 		strb	r3, [sp, #4]
 456:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 1586              		.loc 1 456 0
 1587 001c 8DF80650 		strb	r5, [sp, #6]
 457:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 1588              		.loc 1 457 0
 1589 0020 0223     		movs	r3, #2
 1590 0022 8DF80530 		strb	r3, [sp, #5]
 458:src/main.c    **** 
 1591              		.loc 1 458 0
 1592 0026 4FF40066 		mov	r6, #2048
 1593 002a C4F20206 		movt	r6, 16386
 1594 002e 3046     		mov	r0, r6
 1595 0030 6946     		mov	r1, sp
 1596 0032 FFF7FEFF 		bl	GPIO_Init
 1597              	.LVL157:
 468:src/main.c    ****     hydroponics.PPump_PHDown.pin_out = GPIO_Pin_6;
 1598              		.loc 1 468 0
 1599 0036 40F20004 		movw	r4, #:lower16:hydroponics
 1600 003a C0F20004 		movt	r4, #:upper16:hydroponics
 1601 003e 2663     		str	r6, [r4, #48]
 469:src/main.c    **** 
 1602              		.loc 1 469 0
 1603 0040 A786     		strh	r7, [r4, #52]	@ movhi
 471:src/main.c    ****     hydroponics.PPump_PHDown.state = MODULE_RUNNING;
 1604              		.loc 1 471 0
 1605 0042 2573     		strb	r5, [r4, #12]
 472:src/main.c    ****     hydroponics.PPump_Nutrient.state = MODULE_RUNNING;
 1606              		.loc 1 472 0
 1607 0044 84F83850 		strb	r5, [r4, #56]
 473:src/main.c    **** 
 1608              		.loc 1 473 0
 1609 0048 84F86450 		strb	r5, [r4, #100]
 475:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_PHDown, &hydroponics.UDS_PHDown);
 1610              		.loc 1 475 0
 1611 004c 201D     		adds	r0, r4, #4
 1612 004e 04F11401 		add	r1, r4, #20
 1613 0052 FFF7FEFF 		bl	PPump_Module_Init
 1614              	.LVL158:
 476:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_Nutrient, &hydroponics.UDS_Nutrient);
 1615              		.loc 1 476 0
 1616 0056 04F13000 		add	r0, r4, #48
 1617 005a E119     		adds	r1, r4, r7
 1618 005c FFF7FEFF 		bl	PPump_Module_Init
 1619              	.LVL159:
 477:src/main.c    **** 
 1620              		.loc 1 477 0
 1621 0060 04F15C00 		add	r0, r4, #92
 1622 0064 04F16C01 		add	r1, r4, #108
 1623 0068 FFF7FEFF 		bl	PPump_Module_Init
 1624              	.LVL160:
 487:src/main.c    **** 
 1625              		.loc 1 487 0
 1626 006c 03B0     		add	sp, sp, #12
 1627              		@ sp needed
 1628 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 1629              		.cfi_endproc
 1630              	.LFE120:
 1632              		.section	.text.vHydroponicSystem_Init,"ax",%progbits
 1633              		.align	2
 1634              		.global	vHydroponicSystem_Init
 1635              		.thumb
 1636              		.thumb_func
 1638              	vHydroponicSystem_Init:
 1639              	.LFB121:
 489:src/main.c    **** 
 1640              		.loc 1 489 0
 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 32
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
 1644 0000 30B5     		push	{r4, r5, lr}
 1645              	.LCFI24:
 1646              		.cfi_def_cfa_offset 12
 1647              		.cfi_offset 4, -12
 1648              		.cfi_offset 5, -8
 1649              		.cfi_offset 14, -4
 1650 0002 89B0     		sub	sp, sp, #36
 1651              	.LCFI25:
 1652              		.cfi_def_cfa_offset 48
 492:src/main.c    ****     USART_rtos_puts(&packet, " Init Hydroponic System...");
 1653              		.loc 1 492 0
 1654 0004 40F20003 		movw	r3, #:lower16:USART1_rtos
 1655 0008 C0F20003 		movt	r3, #:upper16:USART1_rtos
 1656 000c 08A8     		add	r0, sp, #32
 1657 000e 40F8103D 		str	r3, [r0, #-16]!
 493:src/main.c    **** 
 1658              		.loc 1 493 0
 1659 0012 40F20001 		movw	r1, #:lower16:.LC12
 1660 0016 C0F20001 		movt	r1, #:upper16:.LC12
 1661 001a FFF7FEFF 		bl	USART_rtos_puts
 1662              	.LVL161:
 495:src/main.c    **** 
 1663              		.loc 1 495 0
 1664 001e 40F20004 		movw	r4, #:lower16:hydroponics
 1665 0022 C0F20004 		movt	r4, #:upper16:hydroponics
 1666 0026 0025     		movs	r5, #0
 1667 0028 2570     		strb	r5, [r4]
 497:src/main.c    ****     HydroponicUDS_Init();
 1668              		.loc 1 497 0
 1669 002a FFF7FEFF 		bl	HydroponicPPumps_Init
 1670              	.LVL162:
 498:src/main.c    **** 
 1671              		.loc 1 498 0
 1672 002e FFF7FEFF 		bl	HydroponicUDS_Init
 1673              	.LVL163:
 501:src/main.c    ****     PHMeter_Module_Init(&hydroponics.PHMeter_Resvoir);
 1674              		.loc 1 501 0
 1675 0032 84F89050 		strb	r5, [r4, #144]
 502:src/main.c    **** 
 1676              		.loc 1 502 0
 1677 0036 04F18800 		add	r0, r4, #136
 1678 003a FFF7FEFF 		bl	PHMeter_Module_Init
 1679              	.LVL164:
 505:src/main.c    ****         hydroponics.PPump_PHDown.state == MODULE_STANDBY &&
 1680              		.loc 1 505 0
 1681 003e 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 1682 0040 012B     		cmp	r3, #1
 1683 0042 1AD1     		bne	.L52
 506:src/main.c    ****         hydroponics.PPump_Nutrient.state == MODULE_STANDBY &&  
 1684              		.loc 1 506 0 discriminator 1
 1685 0044 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 505:src/main.c    ****         hydroponics.PPump_PHDown.state == MODULE_STANDBY &&
 1686              		.loc 1 505 0 discriminator 1
 1687 0048 012B     		cmp	r3, #1
 1688 004a 16D1     		bne	.L52
 507:src/main.c    ****         hydroponics.UDS_PHUp.state == MODULE_STANDBY &&
 1689              		.loc 1 507 0
 1690 004c 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 506:src/main.c    ****         hydroponics.PPump_Nutrient.state == MODULE_STANDBY &&  
 1691              		.loc 1 506 0
 1692 0050 012B     		cmp	r3, #1
 1693 0052 12D1     		bne	.L52
 508:src/main.c    ****         hydroponics.UDS_PHDown.state == MODULE_STANDBY &&
 1694              		.loc 1 508 0
 1695 0054 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 507:src/main.c    ****         hydroponics.UDS_PHUp.state == MODULE_STANDBY &&
 1696              		.loc 1 507 0
 1697 0058 012B     		cmp	r3, #1
 1698 005a 0ED1     		bne	.L52
 509:src/main.c    ****         hydroponics.UDS_Nutrient.state == MODULE_STANDBY &&
 1699              		.loc 1 509 0
 1700 005c 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 508:src/main.c    ****         hydroponics.UDS_PHDown.state == MODULE_STANDBY &&
 1701              		.loc 1 508 0
 1702 0060 012B     		cmp	r3, #1
 1703 0062 0AD1     		bne	.L52
 510:src/main.c    ****         hydroponics.PHMeter_Resvoir.state == MODULE_STANDBY) {
 1704              		.loc 1 510 0
 1705 0064 94F88030 		ldrb	r3, [r4, #128]	@ zero_extendqisi2
 509:src/main.c    ****         hydroponics.UDS_Nutrient.state == MODULE_STANDBY &&
 1706              		.loc 1 509 0
 1707 0068 012B     		cmp	r3, #1
 1708 006a 06D1     		bne	.L52
 511:src/main.c    **** 
 1709              		.loc 1 511 0
 1710 006c 94F89030 		ldrb	r3, [r4, #144]	@ zero_extendqisi2
 510:src/main.c    ****         hydroponics.PHMeter_Resvoir.state == MODULE_STANDBY) {
 1711              		.loc 1 510 0
 1712 0070 012B     		cmp	r3, #1
 1713 0072 02D1     		bne	.L52
 513:src/main.c    ****         //USART_puts(USART2, "Hydroponics successfully initialized...\r\n");
 1714              		.loc 1 513 0
 1715 0074 0122     		movs	r2, #1
 1716 0076 2270     		strb	r2, [r4]
 1717 0078 05E0     		b	.L53
 1718              	.L52:
 520:src/main.c    ****         //xTaskCreate(vHydroponicSystem_Init, (signed char*)"vHydroponicSystem_Init", 64, NULL, tsk
 1719              		.loc 1 520 0
 1720 007a 40F20003 		movw	r3, #:lower16:hydroponics
 1721 007e C0F20003 		movt	r3, #:upper16:hydroponics
 1722 0082 0322     		movs	r2, #3
 1723 0084 1A70     		strb	r2, [r3]
 1724              	.L53:
 529:src/main.c    ****     USART_rtos_puts(&packet1, " Ok\r\n");
 1725              		.loc 1 529 0
 1726 0086 40F20003 		movw	r3, #:lower16:USART1_rtos
 1727 008a C0F20003 		movt	r3, #:upper16:USART1_rtos
 1728 008e 08AC     		add	r4, sp, #32
 1729 0090 44F8203D 		str	r3, [r4, #-32]!
 530:src/main.c    **** 
 1730              		.loc 1 530 0
 1731 0094 6846     		mov	r0, sp
 1732 0096 40F20001 		movw	r1, #:lower16:.LC13
 1733 009a C0F20001 		movt	r1, #:upper16:.LC13
 1734 009e FFF7FEFF 		bl	USART_rtos_puts
 1735              	.LVL165:
 532:src/main.c    ****     USART_rtos_wait_send(&packet1);
 1736              		.loc 1 532 0
 1737 00a2 04A8     		add	r0, sp, #16
 1738 00a4 FFF7FEFF 		bl	USART_rtos_wait_send
 1739              	.LVL166:
 533:src/main.c    **** 
 1740              		.loc 1 533 0
 1741 00a8 6846     		mov	r0, sp
 1742 00aa FFF7FEFF 		bl	USART_rtos_wait_send
 1743              	.LVL167:
 535:src/main.c    **** }
 1744              		.loc 1 535 0
 1745 00ae 0020     		movs	r0, #0
 1746 00b0 FFF7FEFF 		bl	vTaskDelete
 1747              	.LVL168:
 536:src/main.c    **** 
 1748              		.loc 1 536 0
 1749 00b4 09B0     		add	sp, sp, #36
 1750              		@ sp needed
 1751 00b6 30BD     		pop	{r4, r5, pc}
 1752              		.cfi_endproc
 1753              	.LFE121:
 1755              		.section	.text.vLight_task,"ax",%progbits
 1756              		.align	2
 1757              		.global	vLight_task
 1758              		.thumb
 1759              		.thumb_func
 1761              	vLight_task:
 1762              	.LFB122:
 538:src/main.c    ****     /*
 1763              		.loc 1 538 0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              	.LVL169:
 1768 0000 70B5     		push	{r4, r5, r6, lr}
 1769              	.LCFI26:
 1770              		.cfi_def_cfa_offset 16
 1771              		.cfi_offset 4, -16
 1772              		.cfi_offset 5, -12
 1773              		.cfi_offset 6, -8
 1774              		.cfi_offset 14, -4
 551:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1775              		.loc 1 551 0
 1776 0002 0026     		movs	r6, #0
 552:src/main.c    ****         }
 1777              		.loc 1 552 0
 1778 0004 4EF68065 		movw	r5, #61056
 1779 0008 C0F23605 		movt	r5, 54
 1780              	.LVL170:
 1781              	.L57:
 551:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1782              		.loc 1 551 0
 1783 000c 3446     		mov	r4, r6
 1784 000e 03E0     		b	.L55
 1785              	.LVL171:
 1786              	.L56:
 552:src/main.c    ****         }
 1787              		.loc 1 552 0 discriminator 2
 1788 0010 2846     		mov	r0, r5
 1789 0012 FFF7FEFF 		bl	vTaskDelay
 1790              	.LVL172:
 551:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1791              		.loc 1 551 0 discriminator 2
 1792 0016 0134     		adds	r4, r4, #1
 1793              	.LVL173:
 1794              	.L55:
 551:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1795              		.loc 1 551 0 is_stmt 0 discriminator 1
 1796 0018 042C     		cmp	r4, #4
 1797 001a F9DD     		ble	.L56
 1798 001c F6E7     		b	.L57
 1799              		.cfi_endproc
 1800              	.LFE122:
 1802 001e 00BF     		.section	.text.vUDS_read_distance,"ax",%progbits
 1803              		.align	2
 1804              		.global	vUDS_read_distance
 1805              		.thumb
 1806              		.thumb_func
 1808              	vUDS_read_distance:
 1809              	.LFB123:
 561:src/main.c    **** 
 1810              		.loc 1 561 0 is_stmt 1
 1811              		.cfi_startproc
 1812              		@ args = 0, pretend = 0, frame = 16
 1813              		@ frame_needed = 0, uses_anonymous_args = 0
 1814              	.LVL174:
 1815 0000 30B5     		push	{r4, r5, lr}
 1816              	.LCFI27:
 1817              		.cfi_def_cfa_offset 12
 1818              		.cfi_offset 4, -12
 1819              		.cfi_offset 5, -8
 1820              		.cfi_offset 14, -4
 1821 0002 85B0     		sub	sp, sp, #20
 1822              	.LCFI28:
 1823              		.cfi_def_cfa_offset 32
 1824 0004 0446     		mov	r4, r0
 564:src/main.c    **** 
 1825              		.loc 1 564 0
 1826 0006 40F20002 		movw	r2, #:lower16:USART1_rtos
 1827 000a C0F20002 		movt	r2, #:upper16:USART1_rtos
 1828 000e 04A8     		add	r0, sp, #16
 1829              	.LVL175:
 1830 0010 40F8102D 		str	r2, [r0, #-16]!
 566:src/main.c    **** 
 1831              		.loc 1 566 0
 1832 0014 6846     		mov	r0, sp
 1833 0016 40F20001 		movw	r1, #:lower16:.LC14
 1834 001a C0F20001 		movt	r1, #:upper16:.LC14
 1835 001e FFF7FEFF 		bl	USART_rtos_puts
 1836              	.LVL176:
 568:src/main.c    ****    int v = UDS_read_distance(module); 
 1837              		.loc 1 568 0
 1838 0022 FFF7FEFF 		bl	vPortEnterCritical
 1839              	.LVL177:
 569:src/main.c    ****    taskEXIT_CRITICAL();
 1840              		.loc 1 569 0
 1841 0026 2046     		mov	r0, r4
 1842 0028 FFF7FEFF 		bl	UDS_read_distance
 1843              	.LVL178:
 1844 002c 0546     		mov	r5, r0
 1845              	.LVL179:
 570:src/main.c    **** 
 1846              		.loc 1 570 0
 1847 002e FFF7FEFF 		bl	vPortExitCritical
 1848              	.LVL180:
 574:src/main.c    ****    USART_put_int(USART1, v);
 1849              		.loc 1 574 0
 1850 0032 4FF48054 		mov	r4, #4096
 1851              	.LVL181:
 1852 0036 C4F20104 		movt	r4, 16385
 1853 003a 2046     		mov	r0, r4
 1854 003c 40F20001 		movw	r1, #:lower16:.LC15
 1855 0040 C0F20001 		movt	r1, #:upper16:.LC15
 1856 0044 FFF7FEFF 		bl	USART_puts
 1857              	.LVL182:
 575:src/main.c    ****    USART_puts(USART1, "\r\n");
 1858              		.loc 1 575 0
 1859 0048 2046     		mov	r0, r4
 1860 004a 2946     		mov	r1, r5
 1861 004c FFF7FEFF 		bl	USART_put_int
 1862              	.LVL183:
 576:src/main.c    ****    //USART_rtos_sputs(&packet, "Distance: %d", v);
 1863              		.loc 1 576 0
 1864 0050 2046     		mov	r0, r4
 1865 0052 40F20001 		movw	r1, #:lower16:.LC8
 1866 0056 C0F20001 		movt	r1, #:upper16:.LC8
 1867 005a FFF7FEFF 		bl	USART_puts
 1868              	.LVL184:
 582:src/main.c    **** 
 1869              		.loc 1 582 0
 1870 005e 2046     		mov	r0, r4
 1871 0060 40F20001 		movw	r1, #:lower16:.LC16
 1872 0064 C0F20001 		movt	r1, #:upper16:.LC16
 1873 0068 FFF7FEFF 		bl	USART_puts
 1874              	.LVL185:
 584:src/main.c    **** }
 1875              		.loc 1 584 0
 1876 006c 0020     		movs	r0, #0
 1877 006e FFF7FEFF 		bl	vTaskDelete
 1878              	.LVL186:
 585:src/main.c    **** 
 1879              		.loc 1 585 0
 1880 0072 05B0     		add	sp, sp, #20
 1881              		@ sp needed
 1882 0074 30BD     		pop	{r4, r5, pc}
 1883              		.cfi_endproc
 1884              	.LFE123:
 1886 0076 00BF     		.section	.text.vPPump_dispense,"ax",%progbits
 1887              		.align	2
 1888              		.global	vPPump_dispense
 1889              		.thumb
 1890              		.thumb_func
 1892              	vPPump_dispense:
 1893              	.LFB125:
 603:src/main.c    ****     params->ppump->state = MODULE_RUNNING; 
 1894              		.loc 1 603 0
 1895              		.cfi_startproc
 1896              		@ args = 0, pretend = 0, frame = 0
 1897              		@ frame_needed = 0, uses_anonymous_args = 0
 1898              	.LVL187:
 1899 0000 38B5     		push	{r3, r4, r5, lr}
 1900              	.LCFI29:
 1901              		.cfi_def_cfa_offset 16
 1902              		.cfi_offset 3, -16
 1903              		.cfi_offset 4, -12
 1904              		.cfi_offset 5, -8
 1905              		.cfi_offset 14, -4
 1906 0002 0446     		mov	r4, r0
 604:src/main.c    ****     //GPIO_WriteBit(params->port, params->pin, Bit_SET);
 1907              		.loc 1 604 0
 1908 0004 0368     		ldr	r3, [r0]
 1909 0006 0025     		movs	r5, #0
 1910 0008 1D72     		strb	r5, [r3, #8]
 608:src/main.c    ****     PPump_Module_dispense(params->ppump, params->amount);
 1911              		.loc 1 608 0
 1912 000a FFF7FEFF 		bl	vPortEnterCritical
 1913              	.LVL188:
 609:src/main.c    **** 
 1914              		.loc 1 609 0
 1915 000e 2068     		ldr	r0, [r4]
 1916 0010 6168     		ldr	r1, [r4, #4]
 1917 0012 FFF7FEFF 		bl	PPump_Module_dispense
 1918              	.LVL189:
 611:src/main.c    ****     //    TEST_PH_VALUE+=5;
 1919              		.loc 1 611 0
 1920 0016 FFF7FEFF 		bl	vPortExitCritical
 1921              	.LVL190:
 614:src/main.c    **** 
 1922              		.loc 1 614 0
 1923 001a 2368     		ldr	r3, [r4]
 1924 001c 0222     		movs	r2, #2
 1925 001e 1A72     		strb	r2, [r3, #8]
 616:src/main.c    **** }
 1926              		.loc 1 616 0
 1927 0020 2846     		mov	r0, r5
 1928 0022 FFF7FEFF 		bl	vTaskDelete
 1929              	.LVL191:
 1930 0026 38BD     		pop	{r3, r4, r5, pc}
 1931              		.cfi_endproc
 1932              	.LFE125:
 1934              		.section	.text.vRTC_Init,"ax",%progbits
 1935              		.align	2
 1936              		.global	vRTC_Init
 1937              		.thumb
 1938              		.thumb_func
 1940              	vRTC_Init:
 1941              	.LFB127:
 733:src/main.c    ****     RTC_InitTypeDef RTC_InitStructure;
 1942              		.loc 1 733 0
 1943              		.cfi_startproc
 1944              		@ args = 0, pretend = 0, frame = 16
 1945              		@ frame_needed = 0, uses_anonymous_args = 0
 1946 0000 10B5     		push	{r4, lr}
 1947              	.LCFI30:
 1948              		.cfi_def_cfa_offset 8
 1949              		.cfi_offset 4, -8
 1950              		.cfi_offset 14, -4
 1951 0002 84B0     		sub	sp, sp, #16
 1952              	.LCFI31:
 1953              		.cfi_def_cfa_offset 24
 736:src/main.c    ****     PWR_BackupAccessCmd(ENABLE);
 1954              		.loc 1 736 0
 1955 0004 4FF08050 		mov	r0, #268435456
 1956 0008 0121     		movs	r1, #1
 1957 000a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1958              	.LVL192:
 737:src/main.c    **** 
 1959              		.loc 1 737 0
 1960 000e 0120     		movs	r0, #1
 1961 0010 FFF7FEFF 		bl	PWR_BackupAccessCmd
 1962              	.LVL193:
 739:src/main.c    ****     while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 1963              		.loc 1 739 0
 1964 0014 0120     		movs	r0, #1
 1965 0016 FFF7FEFF 		bl	RCC_LSICmd
 1966              	.LVL194:
 740:src/main.c    ****     RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 1967              		.loc 1 740 0
 1968 001a 6124     		movs	r4, #97
 1969              	.L61:
 740:src/main.c    ****     RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 1970              		.loc 1 740 0 is_stmt 0 discriminator 1
 1971 001c 2046     		mov	r0, r4
 1972 001e FFF7FEFF 		bl	RCC_GetFlagStatus
 1973              	.LVL195:
 1974 0022 0028     		cmp	r0, #0
 1975 0024 FAD0     		beq	.L61
 741:src/main.c    ****     RCC_RTCCLKCmd(ENABLE);
 1976              		.loc 1 741 0 is_stmt 1
 1977 0026 4FF40070 		mov	r0, #512
 1978 002a FFF7FEFF 		bl	RCC_RTCCLKConfig
 1979              	.LVL196:
 742:src/main.c    ****     RTC_WaitForSynchro();
 1980              		.loc 1 742 0
 1981 002e 0120     		movs	r0, #1
 1982 0030 FFF7FEFF 		bl	RCC_RTCCLKCmd
 1983              	.LVL197:
 743:src/main.c    **** 
 1984              		.loc 1 743 0
 1985 0034 FFF7FEFF 		bl	RTC_WaitForSynchro
 1986              	.LVL198:
 746:src/main.c    **** 
 1987              		.loc 1 746 0
 1988 0038 0020     		movs	r0, #0
 1989 003a FFF7FEFF 		bl	RTC_WriteProtectionCmd
 1990              	.LVL199:
 750:src/main.c    ****         RTC_InitStructure.RTC_AsynchPrediv = 0x7D-1;
 1991              		.loc 1 750 0
 1992 003e 0024     		movs	r4, #0
 1993 0040 0194     		str	r4, [sp, #4]
 751:src/main.c    ****         RTC_InitStructure.RTC_SynchPrediv = 0xFF-1;
 1994              		.loc 1 751 0
 1995 0042 7C23     		movs	r3, #124
 1996 0044 0293     		str	r3, [sp, #8]
 752:src/main.c    ****         RTC_Init(&RTC_InitStructure);
 1997              		.loc 1 752 0
 1998 0046 FE23     		movs	r3, #254
 1999 0048 0393     		str	r3, [sp, #12]
 753:src/main.c    **** 
 2000              		.loc 1 753 0
 2001 004a 01A8     		add	r0, sp, #4
 2002 004c FFF7FEFF 		bl	RTC_Init
 2003              	.LVL200:
 756:src/main.c    **** 
 2004              		.loc 1 756 0
 2005 0050 2046     		mov	r0, r4
 2006 0052 2146     		mov	r1, r4
 2007 0054 2246     		mov	r2, r4
 2008 0056 FFF7FEFF 		bl	setTime
 2009              	.LVL201:
 759:src/main.c    **** 
 2010              		.loc 1 759 0
 2011 005a 0C20     		movs	r0, #12
 2012 005c 0521     		movs	r1, #5
 2013 005e 1122     		movs	r2, #17
 2014 0060 FFF7FEFF 		bl	setDate
 2015              	.LVL202:
 767:src/main.c    **** //Main Function
 2016              		.loc 1 767 0
 2017 0064 04B0     		add	sp, sp, #16
 2018              		@ sp needed
 2019 0066 10BD     		pop	{r4, pc}
 2020              		.cfi_endproc
 2021              	.LFE127:
 2023              		.section	.text.timeToSeconds,"ax",%progbits
 2024              		.align	2
 2025              		.global	timeToSeconds
 2026              		.thumb
 2027              		.thumb_func
 2029              	timeToSeconds:
 2030              	.LFB128:
 771:src/main.c    ****     unsigned seconds = t->RTC_Seconds;
 2031              		.loc 1 771 0
 2032              		.cfi_startproc
 2033              		@ args = 0, pretend = 0, frame = 0
 2034              		@ frame_needed = 0, uses_anonymous_args = 0
 2035              		@ link register save eliminated.
 2036              	.LVL203:
 772:src/main.c    ****     seconds += t->RTC_Minutes * 60;
 2037              		.loc 1 772 0
 2038 0000 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 2039              	.LVL204:
 773:src/main.c    ****     seconds += t->RTC_Hours * 3600;
 2040              		.loc 1 773 0
 2041 0002 4378     		ldrb	r3, [r0, #1]	@ zero_extendqisi2
 2042 0004 C3EB0313 		rsb	r3, r3, r3, lsl #4
 2043 0008 02EB8303 		add	r3, r2, r3, lsl #2
 2044              	.LVL205:
 774:src/main.c    ****     return seconds;
 2045              		.loc 1 774 0
 2046 000c 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 2047              	.LVL206:
 776:src/main.c    **** 
 2048              		.loc 1 776 0
 2049 000e 4FF46160 		mov	r0, #3600
 2050              	.LVL207:
 2051 0012 00FB0230 		mla	r0, r0, r2, r3
 2052              	.LVL208:
 2053 0016 7047     		bx	lr
 2054              		.cfi_endproc
 2055              	.LFE128:
 2057              		.section	.text.main,"ax",%progbits
 2058              		.align	2
 2059              		.global	main
 2060              		.thumb
 2061              		.thumb_func
 2063              	main:
 2064              	.LFB131:
 959:src/main.c    **** 
 960:src/main.c    ****             //cursor = cursor->next;
 961:src/main.c    ****             //cursor->next = NU
 962:src/main.c    ****         }
 963:src/main.c    **** /*
 964:src/main.c    ****         USART_put_int(USART1, t.RTC_Hours);
 965:src/main.c    ****         USART_put(USART1, ':');
 966:src/main.c    ****         USART_put_int(USART1, t.RTC_Minutes);
 967:src/main.c    ****         USART_puts(USART1, " (");
 968:src/main.c    ****         USART_puts(USART1, ")\r\n");
 969:src/main.c    **** 
 970:src/main.c    **** */
 971:src/main.c    ****        /* 
 972:src/main.c    ****         char buffer[60]; 
 973:src/main.c    ****         packet.msg = buffer;
 974:src/main.c    ****         USART_rtos_sputs(&packet, "HELLO%d\r\n", 69);
 975:src/main.c    **** */
 976:src/main.c    **** 
 977:src/main.c    ****         //USART_rtos_sputs(&packet, "%d:%d (%d)\r\n", t.RTC_Hours, t.RTC_Minutes, i);
 978:src/main.c    **** //            USART_rtos_wait_send(&packet);
 979:src/main.c    **** 
 980:src/main.c    **** 
 981:src/main.c    ****         //USART_puts(USART1, "5\r\n");
 982:src/main.c    **** 
 983:src/main.c    ****     }
 984:src/main.c    **** }
 985:src/main.c    **** 
 986:src/main.c    **** int main(void){
 2065              		.loc 1 986 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 0, uses_anonymous_args = 0
 2069 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 2070              	.LCFI32:
 2071              		.cfi_def_cfa_offset 32
 2072              		.cfi_offset 4, -32
 2073              		.cfi_offset 5, -28
 2074              		.cfi_offset 6, -24
 2075              		.cfi_offset 7, -20
 2076              		.cfi_offset 8, -16
 2077              		.cfi_offset 9, -12
 2078              		.cfi_offset 10, -8
 2079              		.cfi_offset 14, -4
 2080 0004 88B0     		sub	sp, sp, #32
 2081              	.LCFI33:
 2082              		.cfi_def_cfa_offset 64
 987:src/main.c    **** 	//Call initx(); To Initialize USART & GPIO
 988:src/main.c    ****     
 989:src/main.c    **** 	initx();
 2083              		.loc 1 989 0
 2084 0006 FFF7FEFF 		bl	initx
 2085              	.LVL209:
 990:src/main.c    ****     USART1_Init();
 2086              		.loc 1 990 0
 2087 000a FFF7FEFF 		bl	USART1_Init
 2088              	.LVL210:
 991:src/main.c    ****     init_us_timer();
 2089              		.loc 1 991 0
 2090 000e FFF7FEFF 		bl	init_us_timer
 2091              	.LVL211:
 992:src/main.c    ****     vRTC_Init();
 2092              		.loc 1 992 0
 2093 0012 FFF7FEFF 		bl	vRTC_Init
 2094              	.LVL212:
 993:src/main.c    ****     setTime(0, 0, 0);
 2095              		.loc 1 993 0
 2096 0016 0020     		movs	r0, #0
 2097 0018 0146     		mov	r1, r0
 2098 001a 0246     		mov	r2, r0
 2099 001c FFF7FEFF 		bl	setTime
 2100              	.LVL213:
 994:src/main.c    **** 
 995:src/main.c    ****     setSystemDay(1); //sets it as first day 
 2101              		.loc 1 995 0
 2102 0020 0120     		movs	r0, #1
 2103 0022 FFF7FEFF 		bl	setSystemDay
 2104              	.LVL214:
 996:src/main.c    ****     timer_list_head = NULL;
 2105              		.loc 1 996 0
 2106 0026 40F20003 		movw	r3, #:lower16:timer_list_head
 2107 002a C0F20003 		movt	r3, #:upper16:timer_list_head
 2108 002e 0025     		movs	r5, #0
 2109 0030 1D60     		str	r5, [r3]
 997:src/main.c    ****     USART_rtos_init(&USART1_rtos, USART1);
 2110              		.loc 1 997 0
 2111 0032 40F20004 		movw	r4, #:lower16:USART1_rtos
 2112 0036 C0F20004 		movt	r4, #:upper16:USART1_rtos
 2113 003a 4FF48056 		mov	r6, #4096
 2114 003e C4F20106 		movt	r6, 16385
 2115 0042 2046     		mov	r0, r4
 2116 0044 3146     		mov	r1, r6
 2117 0046 FFF7FEFF 		bl	USART_rtos_init
 2118              	.LVL215:
 998:src/main.c    ****     setup_output(&USART1_rtos);
 2119              		.loc 1 998 0
 2120 004a 2046     		mov	r0, r4
 2121 004c FFF7FEFF 		bl	setup_output
 2122              	.LVL216:
 999:src/main.c    ****     //setup_debug_struct_output(&USART1_rtos); //FOR DEBUGGING
1000:src/main.c    **** 
1001:src/main.c    ****     //CLOCK_SetClockTo168MHz();
1002:src/main.c    ****    // setSysTick();
1003:src/main.c    **** 
1004:src/main.c    ****     int i;
1005:src/main.c    **** 
1006:src/main.c    ****     USART_puts(USART1, "\nBooting up...\r\n");
 2123              		.loc 1 1006 0
 2124 0050 3046     		mov	r0, r6
 2125 0052 40F20001 		movw	r1, #:lower16:.LC17
 2126 0056 C0F20001 		movt	r1, #:upper16:.LC17
 2127 005a FFF7FEFF 		bl	USART_puts
 2128              	.LVL217:
1007:src/main.c    ****     for(i=0; i<2; i++) { 
1008:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 2129              		.loc 1 1008 0
 2130 005e 4FF44064 		mov	r4, #3072
 2131 0062 C4F20204 		movt	r4, 16386
 2132 0066 4FF4805A 		mov	r10, #4096
1009:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
 2133              		.loc 1 1009 0
 2134 006a 4FF40059 		mov	r9, #8192
1010:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
 2135              		.loc 1 1010 0
 2136 006e 4FF48048 		mov	r8, #16384
1011:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
 2137              		.loc 1 1011 0
 2138 0072 4FF40047 		mov	r7, #32768
1012:src/main.c    ****         delay_ms(500);
 2139              		.loc 1 1012 0
 2140 0076 4FF4FA76 		mov	r6, #500
1007:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 2141              		.loc 1 1007 0
 2142 007a 1BE0     		b	.L65
 2143              	.LVL218:
 2144              	.L66:
1008:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
 2145              		.loc 1 1008 0 discriminator 2
 2146 007c 2046     		mov	r0, r4
 2147 007e 5146     		mov	r1, r10
 2148 0080 FFF7FEFF 		bl	GPIO_SetBits
 2149              	.LVL219:
1009:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
 2150              		.loc 1 1009 0 discriminator 2
 2151 0084 2046     		mov	r0, r4
 2152 0086 4946     		mov	r1, r9
 2153 0088 FFF7FEFF 		bl	GPIO_SetBits
 2154              	.LVL220:
1010:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
 2155              		.loc 1 1010 0 discriminator 2
 2156 008c 2046     		mov	r0, r4
 2157 008e 4146     		mov	r1, r8
 2158 0090 FFF7FEFF 		bl	GPIO_SetBits
 2159              	.LVL221:
1011:src/main.c    ****         delay_ms(500);
 2160              		.loc 1 1011 0 discriminator 2
 2161 0094 2046     		mov	r0, r4
 2162 0096 3946     		mov	r1, r7
 2163 0098 FFF7FEFF 		bl	GPIO_SetBits
 2164              	.LVL222:
 2165              		.loc 1 1012 0 discriminator 2
 2166 009c 3046     		mov	r0, r6
 2167 009e FFF7FEFF 		bl	delay_ms
 2168              	.LVL223:
1013:src/main.c    **** 
1014:src/main.c    ****         GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 2169              		.loc 1 1014 0 discriminator 2
 2170 00a2 2046     		mov	r0, r4
 2171 00a4 4FF47041 		mov	r1, #61440
 2172 00a8 FFF7FEFF 		bl	GPIO_ResetBits
 2173              	.LVL224:
1015:src/main.c    ****         delay_ms(500);
 2174              		.loc 1 1015 0 discriminator 2
 2175 00ac 3046     		mov	r0, r6
 2176 00ae FFF7FEFF 		bl	delay_ms
 2177              	.LVL225:
1007:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 2178              		.loc 1 1007 0 discriminator 2
 2179 00b2 0135     		adds	r5, r5, #1
 2180              	.LVL226:
 2181              	.L65:
1007:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 2182              		.loc 1 1007 0 is_stmt 0 discriminator 1
 2183 00b4 012D     		cmp	r5, #1
 2184 00b6 E1DD     		ble	.L66
1016:src/main.c    ****     }
1017:src/main.c    **** 
1018:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 2185              		.loc 1 1018 0 is_stmt 1
 2186 00b8 1020     		movs	r0, #16
 2187 00ba 0121     		movs	r1, #1
 2188 00bc FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 2189              	.LVL227:
1019:src/main.c    **** 
1020:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
1021:src/main.c    **** 
1022:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_5; 
 2190              		.loc 1 1022 0
 2191 00c0 2026     		movs	r6, #32
 2192 00c2 0696     		str	r6, [sp, #24]
1023:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; 
 2193              		.loc 1 1023 0
 2194 00c4 0024     		movs	r4, #0
 2195 00c6 8DF81E40 		strb	r4, [sp, #30]
1024:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT; 
 2196              		.loc 1 1024 0
 2197 00ca 0127     		movs	r7, #1
 2198 00cc 8DF81C70 		strb	r7, [sp, #28]
1025:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 2199              		.loc 1 1025 0
 2200 00d0 0223     		movs	r3, #2
 2201 00d2 8DF81D30 		strb	r3, [sp, #29]
1026:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ppump);
 2202              		.loc 1 1026 0
 2203 00d6 4FF48055 		mov	r5, #4096
 2204              	.LVL228:
 2205 00da C4F20205 		movt	r5, 16386
 2206 00de 2846     		mov	r0, r5
 2207 00e0 06A9     		add	r1, sp, #24
 2208 00e2 FFF7FEFF 		bl	GPIO_Init
 2209              	.LVL229:
1027:src/main.c    **** 
1028:src/main.c    ****     GPIO_ResetBits(GPIOE, GPIO_Pin_5);
 2210              		.loc 1 1028 0
 2211 00e6 2846     		mov	r0, r5
 2212 00e8 3146     		mov	r1, r6
 2213 00ea FFF7FEFF 		bl	GPIO_ResetBits
 2214              	.LVL230:
1029:src/main.c    **** 
1030:src/main.c    **** 
1031:src/main.c    **** /*
1032:src/main.c    ****     RTC_TimeTypeDef t;
1033:src/main.c    ****     for(i=0; i<10; i++) {
1034:src/main.c    ****         //RTC_GetTime(RTC_Format_BIN, &t);
1035:src/main.c    ****         getTime(&t);
1036:src/main.c    ****         USART_put_int(USART1, t.RTC_Seconds);
1037:src/main.c    ****         USART_puts(USART1, "\r\n");
1038:src/main.c    ****         delay_ms(1000);
1039:src/main.c    ****     }
1040:src/main.c    **** 
1041:src/main.c    ****     USART_puts(USART1, "======\r\n");
1042:src/main.c    **** */
1043:src/main.c    **** /*
1044:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
1045:src/main.c    **** 
1046:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6; 
1047:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; 
1048:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT; 
1049:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
1050:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ppump);
1051:src/main.c    **** 
1052:src/main.c    **** 
1053:src/main.c    ****     PPump_Typedef ppump;
1054:src/main.c    ****     ppump.pin_out = GPIO_Pin_6;
1055:src/main.c    ****     ppump.port_out = GPIOE;
1056:src/main.c    ****     ppump.ml_per_m = 60;
1057:src/main.c    **** 
1058:src/main.c    ****         USART_puts(USART1, "DISPENSING...\r\n");
1059:src/main.c    ****         GPIO_SetBits(GPIOE, GPIO_Pin_6);
1060:src/main.c    **** 
1061:src/main.c    **** */
1062:src/main.c    **** 
1063:src/main.c    **** 
1064:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 2215              		.loc 1 1064 0
 2216 00ee 0420     		movs	r0, #4
 2217 00f0 3946     		mov	r1, r7
 2218 00f2 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 2219              	.LVL231:
1065:src/main.c    **** 
1066:src/main.c    ****     GPIO_InitTypeDef gpio_ultrasonic;
1067:src/main.c    **** 
1068:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_7; //echo
 2220              		.loc 1 1068 0
 2221 00f6 8026     		movs	r6, #128
 2222 00f8 0496     		str	r6, [sp, #16]
1069:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP;
 2223              		.loc 1 1069 0
 2224 00fa 8DF81640 		strb	r4, [sp, #22]
1070:src/main.c    ****     //gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_DOWN;
1071:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 2225              		.loc 1 1071 0
 2226 00fe 8DF81440 		strb	r4, [sp, #20]
1072:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 2227              		.loc 1 1072 0
 2228 0102 0323     		movs	r3, #3
 2229 0104 8DF81530 		strb	r3, [sp, #21]
1073:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ultrasonic);
 2230              		.loc 1 1073 0
 2231 0108 2846     		mov	r0, r5
 2232 010a 04A9     		add	r1, sp, #16
 2233 010c FFF7FEFF 		bl	GPIO_Init
 2234              	.LVL232:
1074:src/main.c    **** 
1075:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_8; //trigger
 2235              		.loc 1 1075 0
 2236 0110 4FF48078 		mov	r8, #256
 2237 0114 CDF81080 		str	r8, [sp, #16]
1076:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 2238              		.loc 1 1076 0
 2239 0118 8DF81470 		strb	r7, [sp, #20]
1077:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ultrasonic);
 2240              		.loc 1 1077 0
 2241 011c 2846     		mov	r0, r5
 2242 011e 04A9     		add	r1, sp, #16
 2243 0120 FFF7FEFF 		bl	GPIO_Init
 2244              	.LVL233:
1078:src/main.c    **** 
1079:src/main.c    **** /*
1080:src/main.c    **** //UDS TEST 
1081:src/main.c    ****     UDS_Module uds;
1082:src/main.c    **** 
1083:src/main.c    ****     uds.port_in = GPIOE;
1084:src/main.c    ****     uds.pin_in = GPIO_Pin_7;
1085:src/main.c    ****     uds.port_out = GPIOE;
1086:src/main.c    ****     uds.pin_out = GPIO_Pin_8;
1087:src/main.c    ****     uds.timeout = 500;
1088:src/main.c    **** 
1089:src/main.c    ****     UDS_Module_Init(&uds);
1090:src/main.c    **** 
1091:src/main.c    **** 
1092:src/main.c    ****     USART_puts(USART1, "Starting UDS...\r\n");
1093:src/main.c    ****     while(1) {
1094:src/main.c    ****         int d = UDS_Module_distance(&uds);
1095:src/main.c    ****         USART_puts(USART1, "Distance: ");
1096:src/main.c    ****         USART_put_int(USART1, d);
1097:src/main.c    ****         USART_puts(USART1, "\r\n");
1098:src/main.c    ****         delay_ms(1000);
1099:src/main.c    ****     }
1100:src/main.c    ****     */
1101:src/main.c    ****     /*
1102:src/main.c    **** 
1103:src/main.c    ****     
1104:src/main.c    ****     //SERVO SETUP
1105:src/main.c    ****     TIM_PWM_init();
1106:src/main.c    **** 
1107:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
1108:src/main.c    ****     GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4);
1109:src/main.c    ****     GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
1110:src/main.c    **** 
1111:src/main.c    **** 
1112:src/main.c    ****     GPIO_InitTypeDef GPIO_InitStructServo;
1113:src/main.c    **** 
1114:src/main.c    ****     GPIO_InitStructServo.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
1115:src/main.c    ****     GPIO_InitStructServo.GPIO_OType = GPIO_OType_PP;
1116:src/main.c    ****     GPIO_InitStructServo.GPIO_PuPd = GPIO_PuPd_UP;
1117:src/main.c    ****     GPIO_InitStructServo.GPIO_Mode = GPIO_Mode_AF;
1118:src/main.c    ****     GPIO_InitStructServo.GPIO_Speed = GPIO_Speed_100MHz;
1119:src/main.c    ****     GPIO_Init(GPIOB, &GPIO_InitStructServo);
1120:src/main.c    **** 
1121:src/main.c    **** 
1122:src/main.c    ****     Servo_Typedef servo1, servo2;
1123:src/main.c    ****     servo_init(&servo1, &(TIM4->CCR1), 500, 1850); //up and down servo
1124:src/main.c    ****     servo_init(&servo2, &(TIM4->CCR2), 500, 1000);
1125:src/main.c    ****     servo_set_degrees(&servo1, 90);
1126:src/main.c    **** */
1127:src/main.c    **** 
1128:src/main.c    **** 
1129:src/main.c    ****     xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY, NULL);
 2245              		.loc 1 1129 0
 2246 0124 0094     		str	r4, [sp]
 2247 0126 0194     		str	r4, [sp, #4]
 2248 0128 0294     		str	r4, [sp, #8]
 2249 012a 0394     		str	r4, [sp, #12]
 2250 012c 40F20000 		movw	r0, #:lower16:idle_blinky
 2251 0130 C0F20000 		movt	r0, #:upper16:idle_blinky
 2252 0134 40F20001 		movw	r1, #:lower16:.LC18
 2253 0138 C0F20001 		movt	r1, #:upper16:.LC18
 2254 013c 3246     		mov	r2, r6
 2255 013e 2346     		mov	r3, r4
 2256 0140 FFF7FEFF 		bl	xTaskGenericCreate
 2257              	.LVL234:
1130:src/main.c    ****     xTaskCreate(vInterruptTimer, (signed char*)"vInterruptTimer", 128, NULL, tskIDLE_PRIORITY+15, N
 2258              		.loc 1 1130 0
 2259 0144 0F23     		movs	r3, #15
 2260 0146 0093     		str	r3, [sp]
 2261 0148 0194     		str	r4, [sp, #4]
 2262 014a 0294     		str	r4, [sp, #8]
 2263 014c 0394     		str	r4, [sp, #12]
 2264 014e 40F20000 		movw	r0, #:lower16:vInterruptTimer
 2265 0152 C0F20000 		movt	r0, #:upper16:vInterruptTimer
 2266 0156 40F20001 		movw	r1, #:lower16:.LC19
 2267 015a C0F20001 		movt	r1, #:upper16:.LC19
 2268 015e 3246     		mov	r2, r6
 2269 0160 2346     		mov	r3, r4
 2270 0162 FFF7FEFF 		bl	xTaskGenericCreate
 2271              	.LVL235:
1131:src/main.c    ****     xTaskCreate(vIncrementDay, (signed char*)"vIncrementDay", 128, NULL, tskIDLE_PRIORITY+10, NULL)
 2272              		.loc 1 1131 0
 2273 0166 0A23     		movs	r3, #10
 2274 0168 0093     		str	r3, [sp]
 2275 016a 0194     		str	r4, [sp, #4]
 2276 016c 0294     		str	r4, [sp, #8]
 2277 016e 0394     		str	r4, [sp, #12]
 2278 0170 40F20000 		movw	r0, #:lower16:vIncrementDay
 2279 0174 C0F20000 		movt	r0, #:upper16:vIncrementDay
 2280 0178 40F20001 		movw	r1, #:lower16:.LC20
 2281 017c C0F20001 		movt	r1, #:upper16:.LC20
 2282 0180 3246     		mov	r2, r6
 2283 0182 2346     		mov	r3, r4
 2284 0184 FFF7FEFF 		bl	xTaskGenericCreate
 2285              	.LVL236:
1132:src/main.c    **** 
1133:src/main.c    **** 
1134:src/main.c    **** 
1135:src/main.c    ****     vLight_parameters light_p;
1136:src/main.c    ****     //ph_p.target_ph = 200;
1137:src/main.c    **** 
1138:src/main.c    ****     USART_puts(USART1, "LOOK AT LINE 18 FOR TODO!\r\n------------------------\r\n\r\n");
 2286              		.loc 1 1138 0
 2287 0188 4FF48050 		mov	r0, #4096
 2288 018c C4F20100 		movt	r0, 16385
 2289 0190 40F20001 		movw	r1, #:lower16:.LC21
 2290 0194 C0F20001 		movt	r1, #:upper16:.LC21
 2291 0198 FFF7FEFF 		bl	USART_puts
 2292              	.LVL237:
1139:src/main.c    **** 
1140:src/main.c    ****     //xTaskCreate(vLight_task, (signed char*)"vLight", 128, &light_p, tskIDLE_PRIORITY+1, NULL);
1141:src/main.c    ****     //
1142:src/main.c    **** 
1143:src/main.c    ****     //xTaskCreate(vHydroponicSystem_Init, (signed char*)"vHydroponicSystem_Init", 256, NULL, tskIDL
1144:src/main.c    ****     //xTaskCreate(vLightingSystem_Init, (signed char*)"vLightingSystem_Init", 64, NULL, tskIDLE_PRI
1145:src/main.c    ****     //xTaskCreate(vACSystem_Init, (signed char*)"vACSystem_Init", 64, NULL, tskIDLE_PRIORITY+9, NUL
1146:src/main.c    **** 
1147:src/main.c    **** 
1148:src/main.c    ****     xTaskCreate(vPH_task, (signed char*)"vPH", 256, NULL, tskIDLE_PRIORITY+5, NULL);
 2293              		.loc 1 1148 0
 2294 019c 0523     		movs	r3, #5
 2295 019e 0093     		str	r3, [sp]
 2296 01a0 0194     		str	r4, [sp, #4]
 2297 01a2 0294     		str	r4, [sp, #8]
 2298 01a4 0394     		str	r4, [sp, #12]
 2299 01a6 40F20000 		movw	r0, #:lower16:vPH_task
 2300 01aa C0F20000 		movt	r0, #:upper16:vPH_task
 2301 01ae 40F20001 		movw	r1, #:lower16:.LC22
 2302 01b2 C0F20001 		movt	r1, #:upper16:.LC22
 2303 01b6 4246     		mov	r2, r8
 2304 01b8 2346     		mov	r3, r4
 2305 01ba FFF7FEFF 		bl	xTaskGenericCreate
 2306              	.LVL238:
1149:src/main.c    ****    
1150:src/main.c    **** 	//xTaskCreate(UsartTask, (signed char*)"UsartTask", 128, NULL, tskIDLE_PRIORITY+1, NULL);
1151:src/main.c    **** 
1152:src/main.c    **** 	//Call Scheduler
1153:src/main.c    **** 	vTaskStartScheduler();
 2307              		.loc 1 1153 0
 2308 01be FFF7FEFF 		bl	vTaskStartScheduler
 2309              	.LVL239:
1154:src/main.c    ****     //
1155:src/main.c    ****     
1156:src/main.c    **** }
 2310              		.loc 1 1156 0
 2311 01c2 2046     		mov	r0, r4
 2312 01c4 08B0     		add	sp, sp, #32
 2313              		@ sp needed
 2314 01c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2315              		.cfi_endproc
 2316              	.LFE131:
 2318              		.global	TEST_PH_VALUE
 2319              		.comm	USART2_rtos,328,4
 2320              		.comm	USART1_rtos,328,4
 2321              		.comm	timer_list_head,4,4
 2322              		.comm	AC,76,4
 2323              		.comm	lighting,28,4
 2324              		.comm	hydroponics,156,4
 2325              		.section	.rodata.str1.4,"aMS",%progbits,1
 2326              		.align	2
 2327              	.LC0:
 2328 0000 50482054 		.ascii	"PH Task Launched...\015\012\000"
 2328      61736B20 
 2328      4C61756E 
 2328      63686564 
 2328      2E2E2E0D 
 2329 0016 0000     		.space	2
 2330              	.LC1:
 2331 0018 41637175 		.ascii	"Acquired mutex for PHMeter...\015\012\000"
 2331      69726564 
 2331      206D7574 
 2331      65782066 
 2331      6F722050 
 2332              	.LC2:
 2333 0038 50482052 		.ascii	"PH Read\000"
 2333      65616400 
 2334              	.LC3:
 2335 0040 50482056 		.ascii	"PH VALUE: %d\015\012\000"
 2335      414C5545 
 2335      3A202564 
 2335      0D0A00
 2336 004f 00       		.space	1
 2337              	.LC4:
 2338 0050 41646469 		.ascii	"Adding PH Up...\015\012\000"
 2338      6E672050 
 2338      48205570 
 2338      2E2E2E0D 
 2338      0A00
 2339 0062 0000     		.space	2
 2340              	.LC5:
 2341 0064 41646469 		.ascii	"Adding PH DOwn...\015\012\000"
 2341      6E672050 
 2341      4820444F 
 2341      776E2E2E 
 2341      2E0D0A00 
 2342              	.LC6:
 2343 0078 53746162 		.ascii	"Stabilized PH...\015\012\000"
 2343      696C697A 
 2343      65642050 
 2343      482E2E2E 
 2343      0D0A00
 2344 008b 00       		.space	1
 2345              	.LC7:
 2346 008c 0D0A434F 		.ascii	"\015\012COOL:%d\015\012\000"
 2346      4F4C3A25 
 2346      640D0A00 
 2347              	.LC8:
 2348 0098 0D0A00   		.ascii	"\015\012\000"
 2349 009b 00       		.space	1
 2350              	.LC9:
 2351 009c 76555341 		.ascii	"vUSART_command_handler\000"
 2351      52545F63 
 2351      6F6D6D61 
 2351      6E645F68 
 2351      616E646C 
 2352 00b3 00       		.space	1
 2353              	.LC10:
 2354 00b4 496E6974 		.ascii	"Init AC System...\000"
 2354      20414320 
 2354      53797374 
 2354      656D2E2E 
 2354      2E00
 2355 00c6 0000     		.space	2
 2356              	.LC11:
 2357 00c8 204F4B0D 		.ascii	" OK\015\012\000"
 2357      0A00
 2358 00ce 0000     		.space	2
 2359              	.LC12:
 2360 00d0 20496E69 		.ascii	" Init Hydroponic System...\000"
 2360      74204879 
 2360      64726F70 
 2360      6F6E6963 
 2360      20537973 
 2361 00eb 00       		.space	1
 2362              	.LC13:
 2363 00ec 204F6B0D 		.ascii	" Ok\015\012\000"
 2363      0A00
 2364 00f2 0000     		.space	2
 2365              	.LC14:
 2366 00f4 52656164 		.ascii	"Reading Ultrasonic Distance Sensor...\015\012\000"
 2366      696E6720 
 2366      556C7472 
 2366      61736F6E 
 2366      69632044 
 2367              	.LC15:
 2368 011c 0D0A4469 		.ascii	"\015\012Distance: \000"
 2368      7374616E 
 2368      63653A20 
 2368      00
 2369 0129 000000   		.space	3
 2370              	.LC16:
 2371 012c 4655434B 		.ascii	"FUCK\000"
 2371      00
 2372 0131 000000   		.space	3
 2373              	.LC17:
 2374 0134 0A426F6F 		.ascii	"\012Booting up...\015\012\000"
 2374      74696E67 
 2374      2075702E 
 2374      2E2E0D0A 
 2374      00
 2375 0145 000000   		.space	3
 2376              	.LC18:
 2377 0148 69646C65 		.ascii	"idle_blinky\000"
 2377      5F626C69 
 2377      6E6B7900 
 2378              	.LC19:
 2379 0154 76496E74 		.ascii	"vInterruptTimer\000"
 2379      65727275 
 2379      70745469 
 2379      6D657200 
 2380              	.LC20:
 2381 0164 76496E63 		.ascii	"vIncrementDay\000"
 2381      72656D65 
 2381      6E744461 
 2381      7900
 2382 0172 0000     		.space	2
 2383              	.LC21:
 2384 0174 4C4F4F4B 		.ascii	"LOOK AT LINE 18 FOR TODO!\015\012------------------"
 2384      20415420 
 2384      4C494E45 
 2384      20313820 
 2384      464F5220 
 2385 01a1 2D2D2D2D 		.ascii	"------\015\012\015\012\000"
 2385      2D2D0D0A 
 2385      0D0A00
 2386              	.LC22:
 2387 01ac 76504800 		.ascii	"vPH\000"
 2388              		.section	.bss.count.9827,"aw",%nobits
 2389              		.align	2
 2390              		.set	.LANCHOR1,. + 0
 2393              	count.9827:
 2394 0000 00000000 		.space	4
 2395              		.section	.data.TEST_PH_VALUE,"aw",%progbits
 2396              		.align	2
 2397              		.set	.LANCHOR0,. + 0
 2400              	TEST_PH_VALUE:
 2401 0000 32000000 		.word	50
 2402              		.text
 2403              	.Letext0:
 2404              		.file 3 "FreeRTOS/Source/include/projdefs.h"
 2405              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2406              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 2407              		.file 6 "/usr/include/newlib/stdint.h"
 2408              		.file 7 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 2409              		.file 8 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h"
 2410              		.file 9 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 2411              		.file 10 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 2412              		.file 11 "libs/STM32F4xx_StdPeriph_Driver/inc/misc.h"
 2413              		.file 12 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 2414              		.file 13 "FreeRTOS/Source/include/task.h"
 2415              		.file 14 "FreeRTOS/Source/include/queue.h"
 2416              		.file 15 "FreeRTOS/Source/include/semphr.h"
 2417              		.file 16 "src/usart_rtos.h"
 2418              		.file 17 "src/module.h"
 2419              		.file 18 "src/hb_structs.h"
 2420              		.file 19 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
 2421              		.file 20 "src/command_parser.h"
 2422              		.file 21 "src/ustime.h"
 2423              		.file 22 "src/hbfuncs.h"
 2424              		.file 23 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 2425              		.file 24 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccApKR3s.s:20     .text.vUSART_command_handler:0000000000000000 $t
     /tmp/ccApKR3s.s:25     .text.vUSART_command_handler:0000000000000000 vUSART_command_handler
     /tmp/ccApKR3s.s:59     .text.idle_blinky:0000000000000000 $t
     /tmp/ccApKR3s.s:64     .text.idle_blinky:0000000000000000 idle_blinky
     /tmp/ccApKR3s.s:147    .text.vPH_read_value:0000000000000000 $t
     /tmp/ccApKR3s.s:152    .text.vPH_read_value:0000000000000000 vPH_read_value
     /tmp/ccApKR3s.s:2397   .data.TEST_PH_VALUE:0000000000000000 .LANCHOR0
     /tmp/ccApKR3s.s:193    .text.vPH_task:0000000000000000 $t
     /tmp/ccApKR3s.s:198    .text.vPH_task:0000000000000000 vPH_task
                            *COM*:0000000000000148 USART1_rtos
     /tmp/ccApKR3s.s:2327   .rodata.str1.4:0000000000000000 .LC0
                            *COM*:0000000000000004 timer_list_head
                            *COM*:000000000000009c hydroponics
     /tmp/ccApKR3s.s:2330   .rodata.str1.4:0000000000000018 .LC1
     /tmp/ccApKR3s.s:2332   .rodata.str1.4:0000000000000038 .LC2
     /tmp/ccApKR3s.s:2334   .rodata.str1.4:0000000000000040 .LC3
     /tmp/ccApKR3s.s:2342   .rodata.str1.4:0000000000000078 .LC6
     /tmp/ccApKR3s.s:2337   .rodata.str1.4:0000000000000050 .LC4
     /tmp/ccApKR3s.s:2340   .rodata.str1.4:0000000000000064 .LC5
     /tmp/ccApKR3s.s:496    .text.vPH_task:00000000000001f0 $d
     /tmp/ccApKR3s.s:502    .text.vInterruptTimer:0000000000000000 $t
     /tmp/ccApKR3s.s:507    .text.vInterruptTimer:0000000000000000 vInterruptTimer
     /tmp/ccApKR3s.s:615    .text.vIncrementDay:0000000000000000 $t
     /tmp/ccApKR3s.s:620    .text.vIncrementDay:0000000000000000 vIncrementDay
     /tmp/ccApKR3s.s:2345   .rodata.str1.4:000000000000008c .LC7
     /tmp/ccApKR3s.s:755    .text.setSysTick:0000000000000000 $t
     /tmp/ccApKR3s.s:760    .text.setSysTick:0000000000000000 setSysTick
     /tmp/ccApKR3s.s:811    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccApKR3s.s:816    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
     /tmp/ccApKR3s.s:2390   .bss.count.9827:0000000000000000 .LANCHOR1
     /tmp/ccApKR3s.s:2347   .rodata.str1.4:0000000000000098 .LC8
     /tmp/ccApKR3s.s:2350   .rodata.str1.4:000000000000009c .LC9
     /tmp/ccApKR3s.s:1003   .text.USART1_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1008   .text.USART1_Init:0000000000000000 USART1_Init
     /tmp/ccApKR3s.s:1119   .text.initx:0000000000000000 $t
     /tmp/ccApKR3s.s:1124   .text.initx:0000000000000000 initx
     /tmp/ccApKR3s.s:1259   .text.TIM_PWM_init:0000000000000000 $t
     /tmp/ccApKR3s.s:1264   .text.TIM_PWM_init:0000000000000000 TIM_PWM_init
     /tmp/ccApKR3s.s:1362   .text.vACSystem_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1367   .text.vACSystem_Init:0000000000000000 vACSystem_Init
     /tmp/ccApKR3s.s:2353   .rodata.str1.4:00000000000000b4 .LC10
                            *COM*:000000000000004c AC
     /tmp/ccApKR3s.s:2356   .rodata.str1.4:00000000000000c8 .LC11
     /tmp/ccApKR3s.s:1429   .text.vLightingSystem_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1434   .text.vLightingSystem_Init:0000000000000000 vLightingSystem_Init
                            *COM*:000000000000001c lighting
     /tmp/ccApKR3s.s:1460   .text.HydroponicUDS_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1465   .text.HydroponicUDS_Init:0000000000000000 HydroponicUDS_Init
     /tmp/ccApKR3s.s:1550   .text.HydroponicPPumps_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1555   .text.HydroponicPPumps_Init:0000000000000000 HydroponicPPumps_Init
     /tmp/ccApKR3s.s:1633   .text.vHydroponicSystem_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1638   .text.vHydroponicSystem_Init:0000000000000000 vHydroponicSystem_Init
     /tmp/ccApKR3s.s:2359   .rodata.str1.4:00000000000000d0 .LC12
     /tmp/ccApKR3s.s:2362   .rodata.str1.4:00000000000000ec .LC13
     /tmp/ccApKR3s.s:1756   .text.vLight_task:0000000000000000 $t
     /tmp/ccApKR3s.s:1761   .text.vLight_task:0000000000000000 vLight_task
     /tmp/ccApKR3s.s:1803   .text.vUDS_read_distance:0000000000000000 $t
     /tmp/ccApKR3s.s:1808   .text.vUDS_read_distance:0000000000000000 vUDS_read_distance
     /tmp/ccApKR3s.s:2365   .rodata.str1.4:00000000000000f4 .LC14
     /tmp/ccApKR3s.s:2367   .rodata.str1.4:000000000000011c .LC15
     /tmp/ccApKR3s.s:2370   .rodata.str1.4:000000000000012c .LC16
     /tmp/ccApKR3s.s:1887   .text.vPPump_dispense:0000000000000000 $t
     /tmp/ccApKR3s.s:1892   .text.vPPump_dispense:0000000000000000 vPPump_dispense
     /tmp/ccApKR3s.s:1935   .text.vRTC_Init:0000000000000000 $t
     /tmp/ccApKR3s.s:1940   .text.vRTC_Init:0000000000000000 vRTC_Init
     /tmp/ccApKR3s.s:2024   .text.timeToSeconds:0000000000000000 $t
     /tmp/ccApKR3s.s:2029   .text.timeToSeconds:0000000000000000 timeToSeconds
     /tmp/ccApKR3s.s:2058   .text.main:0000000000000000 $t
     /tmp/ccApKR3s.s:2063   .text.main:0000000000000000 main
     /tmp/ccApKR3s.s:2373   .rodata.str1.4:0000000000000134 .LC17
     /tmp/ccApKR3s.s:2376   .rodata.str1.4:0000000000000148 .LC18
     /tmp/ccApKR3s.s:2378   .rodata.str1.4:0000000000000154 .LC19
     /tmp/ccApKR3s.s:2380   .rodata.str1.4:0000000000000164 .LC20
     /tmp/ccApKR3s.s:2383   .rodata.str1.4:0000000000000174 .LC21
     /tmp/ccApKR3s.s:2386   .rodata.str1.4:00000000000001ac .LC22
     /tmp/ccApKR3s.s:2400   .data.TEST_PH_VALUE:0000000000000000 TEST_PH_VALUE
                            *COM*:0000000000000148 USART2_rtos
     /tmp/ccApKR3s.s:2326   .rodata.str1.4:0000000000000000 $d
     /tmp/ccApKR3s.s:2389   .bss.count.9827:0000000000000000 $d
     /tmp/ccApKR3s.s:2393   .bss.count.9827:0000000000000000 count.9827
     /tmp/ccApKR3s.s:2396   .data.TEST_PH_VALUE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.55.a343614a17c4367a6359a1f530d6d32b
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.74.fc794e36cd6c91c3b4695c74d78d9ccd
                           .group:0000000000000000 wm4.portmacro.h.69.a7e264ae32accd81a6ffb6f75a8356fe
                           .group:0000000000000000 wm4.portable.h.315.489c085dbd13c768c8594a7d23ef5545
                           .group:0000000000000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a1d4f27d190f434afd0502fdd510d30a
                           .group:0000000000000000 wm4.list.h.84.e713c47e239b06424d7c93968625e34d
                           .group:0000000000000000 wm4.task.h.73.ea72fb74b80a9cae261e97c6a9e3f3a7
                           .group:0000000000000000 wm4.queue.h.56.a4282b659085ac883e461fc7ab8aecd1
                           .group:0000000000000000 wm4.semphr.h.65.53591bdf1c84eee2eae05897a780c325
                           .group:0000000000000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:0000000000000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:0000000000000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.math.h.35.13c5bec129ef04ad1bb0a1152b29c624
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.64.0f05fa42cfe2db7fc44729a52d3ba948
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:0000000000000000 wm4.unistd.h.259.3e3d3a4e9d73b9fe8a562fa63b167224
                           .group:0000000000000000 wm4.command_parser.h.4.a7fe1e2e0543fcd71ddefe80e3bbf4f3
                           .group:0000000000000000 wm4.hbconfig.h.1.237d22f767acd2e88a1710ea579bc0bf
                           .group:0000000000000000 wm4.hbfuncs.h.2.e3da3dcc1ea881ecd2d374365b99900a

UNDEFINED SYMBOLS
replace_char
command_routing
vTaskDelete
GPIO_SetBits
delay_ms
GPIO_ResetBits
xQueueGenericSend
USART_rtos_puts
getTime
getSystemDay
getEpoch
addTimerInterrupt
uxTaskPriorityGet
xQueueCreateMutex
xQueueGenericReceive
xTaskGenericCreate
USART_rtos_sputs
xTaskGetTickCount
PPump_Module_dispense
vTaskDelayUntil
RTC_GetTime
USART_rtos_wait_send
SystemCoreClock
USART_GetITStatus
USART_put
USART_puts
RCC_AHB1PeriphClockCmd
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
USART_Init
USART_ITConfig
NVIC_Init
USART_Cmd
RCC_APB1PeriphClockCmd
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_ARRPreloadConfig
TIM_Cmd
UDS_Module_Init
PPump_Module_Init
PHMeter_Module_Init
vTaskDelay
vPortEnterCritical
UDS_read_distance
vPortExitCritical
USART_put_int
PWR_BackupAccessCmd
RCC_LSICmd
RCC_GetFlagStatus
RCC_RTCCLKConfig
RCC_RTCCLKCmd
RTC_WaitForSynchro
RTC_WriteProtectionCmd
RTC_Init
setTime
setDate
init_us_timer
setSystemDay
USART_rtos_init
setup_output
vTaskStartScheduler
