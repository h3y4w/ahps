   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.vUSART_command_handler,"ax",%progbits
  20              		.align	2
  21              		.global	vUSART_command_handler
  22              		.thumb
  23              		.thumb_func
  25              	vUSART_command_handler:
  26              	.LFB110:
  27              		.file 1 "src/main.c"
   1:src/main.c    **** #include "FreeRTOS.h"
   2:src/main.c    **** #include "task.h"
   3:src/main.c    **** #include "semphr.h"
   4:src/main.c    **** #include <math.h>
   5:src/main.c    **** #include <stdio.h>
   6:src/main.c    **** #include <stdlib.h>
   7:src/main.c    **** #include <stdarg.h>
   8:src/main.c    **** #include <unistd.h>
   9:src/main.c    **** #include "clock.h"
  10:src/main.c    **** #include "module.h"
  11:src/main.c    **** #include "command_parser.h"
  12:src/main.c    **** #include "hbconfig.h"
  13:src/main.c    **** 
  14:src/main.c    **** //Task For Sending Data Via USART
  15:src/main.c    **** 
  16:src/main.c    **** //MAKE THIS A SEPERATE CONFIG FILE LATER//
  17:src/main.c    **** 
  18:src/main.c    **** 
  19:src/main.c    **** //-------------------------------//
  20:src/main.c    **** //FIND A WAY TO GET MUTEX FROM OTHER PRIOTIY.  IF THERE IS NO WAY SET UP A TMP BUFFER WHERE IT CAN 
  21:src/main.c    **** //FUNCTIONS TO COPY STRINGS TO SEPERATE BUFFER FOR COMMAND_HANDLER
  22:src/main.c    **** // USART_IRQ():
  23:src/main.c    **** //  create task copy_buffer() with high priority and pass pointer to buffer 
  24:src/main.c    **** //  copy_buffer() will then have a callback function which will be command_handler which will pass 
  25:src/main.c    **** //USE sent_mutex to check if usart has sent message
  26:src/main.c    **** 
  27:src/main.c    **** void vUSART_command_handler (char *pos) {
  28              		.loc 1 27 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 0446     		mov	r4, r0
  39              	.LVL1:
  28:src/main.c    ****     char term = '\003';
  29:src/main.c    ****     replace_char(pos, ' ', term);
  40              		.loc 1 29 0
  41 0004 2021     		movs	r1, #32
  42 0006 0322     		movs	r2, #3
  43 0008 FFF7FEFF 		bl	replace_char
  44              	.LVL2:
  30:src/main.c    ****     command_routing(pos, term);
  45              		.loc 1 30 0
  46 000c 2046     		mov	r0, r4
  47 000e 0321     		movs	r1, #3
  48 0010 FFF7FEFF 		bl	command_routing
  49              	.LVL3:
  31:src/main.c    ****     vTaskDelete(NULL);
  50              		.loc 1 31 0
  51 0014 0020     		movs	r0, #0
  52 0016 FFF7FEFF 		bl	vTaskDelete
  53              	.LVL4:
  54 001a 10BD     		pop	{r4, pc}
  55              		.cfi_endproc
  56              	.LFE110:
  58              		.section	.text.vPH_read_value,"ax",%progbits
  59              		.align	2
  60              		.global	vPH_read_value
  61              		.thumb
  62              		.thumb_func
  64              	vPH_read_value:
  65              	.LFB124:
  32:src/main.c    **** }
  33:src/main.c    **** 
  34:src/main.c    **** 
  35:src/main.c    **** 
  36:src/main.c    **** USART_rtos USART1_rtos;
  37:src/main.c    **** USART_rtos USART2_rtos;
  38:src/main.c    **** 
  39:src/main.c    **** //xSemaphoreHandle USART2_mutex;
  40:src/main.c    **** //xSemaphoreHandle USART1_mutex;
  41:src/main.c    **** 
  42:src/main.c    **** //xSemaphoreHandle USART1_mutex_input;
  43:src/main.c    **** //xSemaphoreHandle USART2_mutex_input;
  44:src/main.c    **** 
  45:src/main.c    **** 
  46:src/main.c    **** 
  47:src/main.c    **** //volatile uint8_t USART1_input_lock = 0;
  48:src/main.c    **** 
  49:src/main.c    **** //volatile uint8_t USART2_input_lock = 0;
  50:src/main.c    **** 
  51:src/main.c    **** 
  52:src/main.c    **** void setSysTick(void){
  53:src/main.c    ****     if (SysTick_Config(SystemCoreClock / 1000)) {
  54:src/main.c    ****         while (1){};
  55:src/main.c    ****     }
  56:src/main.c    **** }
  57:src/main.c    **** 
  58:src/main.c    **** 
  59:src/main.c    **** void idle_blinky (void *pvParameters) {
  60:src/main.c    **** 
  61:src/main.c    ****     GPIO_SetBits(GPIOD, GPIO_Pin_4);
  62:src/main.c    ****     while(1) {
  63:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
  64:src/main.c    ****         delay_ms(500);
  65:src/main.c    **** 
  66:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
  67:src/main.c    ****         delay_ms(500);
  68:src/main.c    **** 
  69:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
  70:src/main.c    ****         delay_ms(500);
  71:src/main.c    **** 
  72:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
  73:src/main.c    ****         delay_ms(500);
  74:src/main.c    **** 
  75:src/main.c    ****         GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
  76:src/main.c    ****         delay_ms(500);
  77:src/main.c    **** 
  78:src/main.c    **** 
  79:src/main.c    ****     }
  80:src/main.c    **** 
  81:src/main.c    **** }
  82:src/main.c    **** 
  83:src/main.c    **** 
  84:src/main.c    **** void USART1_IRQHandler(void){
  85:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
  86:src/main.c    **** 	if( USART_GetITStatus(USART1, USART_IT_RXNE)){
  87:src/main.c    ****         static unsigned int count=0;
  88:src/main.c    **** 
  89:src/main.c    **** 		
  90:src/main.c    **** 		//static uint8_t cnt = 0; // this counter is used to determine the string length
  91:src/main.c    **** 		char t = USART1->DR; // the character from the USART2 data register is saved in t
  92:src/main.c    **** 
  93:src/main.c    **** 
  94:src/main.c    ****         if (t == 8 || t== 127) {
  95:src/main.c    ****             USART1_rtos.write_pos--;
  96:src/main.c    ****             USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
  97:src/main.c    ****             USART_put(USART1, '\b');
  98:src/main.c    ****             USART_put(USART1, ' ');
  99:src/main.c    ****             USART_put(USART1, '\b');
 100:src/main.c    ****             return;
 101:src/main.c    **** 
 102:src/main.c    ****         }
 103:src/main.c    **** 
 104:src/main.c    **** 		// check if the received character is not the LF character (used to determine end of string) 
 105:src/main.c    **** 		// or the if the maximum string length has been been reached 
 106:src/main.c    **** 		else if/*(*/ (t != '\r')/* && (cnt< MAX_STRLEN-1) )*/{ 
 107:src/main.c    ****             count++;
 108:src/main.c    ****         if (USART1_rtos.write_pos == USART_BUFFER_LEN-1) USART1_rtos.write_pos=0;
 109:src/main.c    **** 
 110:src/main.c    **** 			USART1_rtos.buffer[USART1_rtos.write_pos] = t;
 111:src/main.c    ****             USART_put(USART1, t);
 112:src/main.c    ****             USART1_rtos.write_pos++;
 113:src/main.c    **** 
 114:src/main.c    **** 		}
 115:src/main.c    **** 
 116:src/main.c    **** 		else{ // otherwise reset the character counter and print newline 
 117:src/main.c    ****             if (count != 0) {
 118:src/main.c    ****                 
 119:src/main.c    ****                 USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 120:src/main.c    **** 
 121:src/main.c    ****                 USART_puts(USART1, "\r\n");
 122:src/main.c    **** 
 123:src/main.c    ****                 //char *pos = &USART1_received_string[USART1_write_pos-count];
 124:src/main.c    ****                 //char command[len];
 125:src/main.c    **** //                USART_readline(USART1, &command, len);
 126:src/main.c    ****                 char *pos = &USART1_rtos.buffer[USART1_rtos.write_pos-count];
 127:src/main.c    **** 
 128:src/main.c    **** 
 129:src/main.c    ****                 xTaskCreate(vUSART_command_handler, (signed char*)"vUSART_command_handler", 468, po
 130:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 131:src/main.c    **** 
 132:src/main.c    **** 
 133:src/main.c    ****                 xSemaphoreGive(USART1_rtos.transmit_event_mutex);
 134:src/main.c    **** 
 135:src/main.c    ****                 count = 0;
 136:src/main.c    ****                 USART1_rtos.write_pos++;
 137:src/main.c    **** 
 138:src/main.c    ****             }
 139:src/main.c    ****             else USART_puts(USART1, "\r\n");
 140:src/main.c    **** 		}
 141:src/main.c    **** 	}
 142:src/main.c    **** }
 143:src/main.c    **** 
 144:src/main.c    **** /*
 145:src/main.c    **** void USART2_IRQHandler(void){
 146:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
 147:src/main.c    **** 	if( USART_GetITStatus(USART2, USART_IT_RXNE)){
 148:src/main.c    ****         static uint8_t count=0;
 149:src/main.c    **** 
 150:src/main.c    **** 		
 151:src/main.c    **** 		//static uint8_t cnt = 0; // this counter is used to determine the string length
 152:src/main.c    **** 		char t = USART2->DR; // the character from the USART2 data register is saved in t
 153:src/main.c    **** 
 154:src/main.c    ****         if (USART2_write_pos == MAX_STRLEN-1) USART2_write_pos=0;
 155:src/main.c    **** 
 156:src/main.c    ****         if (t == 8 || t== 127) {
 157:src/main.c    ****             USART2_write_pos--;
 158:src/main.c    ****             USART2_received_string[USART2_write_pos] = '\r';
 159:src/main.c    ****             USART_put(USART2, '\b');
 160:src/main.c    ****             USART_put(USART2, ' ');
 161:src/main.c    ****             USART_put(USART2, '\b');
 162:src/main.c    ****             return;
 163:src/main.c    **** 
 164:src/main.c    ****         }
 165:src/main.c    **** 
 166:src/main.c    **** 		// check if the received character is not the LF character (used to determine end of string) 
 167:src/main.c    **** 		// or the if the maximum string length has been been reached 
 168:src/main.c    **** 		else if(t != '\r') && (cnt< MAX_STRLEN-1) ){ 
 169:src/main.c    ****             count++;
 170:src/main.c    **** 			USART2_received_string[USART2_write_pos] = t;
 171:src/main.c    ****             USART_put(USART2, t);
 172:src/main.c    **** 
 173:src/main.c    **** 		}
 174:src/main.c    **** 
 175:src/main.c    **** 		else{ // otherwise reset the character counter and print newline 
 176:src/main.c    ****             if (count != 0) {
 177:src/main.c    ****                 
 178:src/main.c    ****                 USART2_received_string[USART2_write_pos] = '\r';
 179:src/main.c    ****                 USART_puts(USART2, "\r\n");
 180:src/main.c    **** 
 181:src/main.c    ****                 char *command = &USART2_received_string[USART2_write_pos-count];
 182:src/main.c    ****                 //change this to copy because it is volatile
 183:src/main.c    **** 
 184:src/main.c    ****                 xTaskCreate(handle_usart_command, (signed char*)"handle_uart_command", 128, command
 185:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 186:src/main.c    **** 
 187:src/main.c    **** 
 188:src/main.c    ****                 USART_puts(USART2, "HAVENT IMPLENETED WAITING FOR TRANSMIT\r\n");
 189:src/main.c    ****                 count = 0;
 190:src/main.c    ****             }
 191:src/main.c    ****             else USART_puts(USART2, "\r\n");
 192:src/main.c    **** 		}
 193:src/main.c    ****         USART2_write_pos++;
 194:src/main.c    **** 	}
 195:src/main.c    **** }
 196:src/main.c    **** 
 197:src/main.c    **** */
 198:src/main.c    **** 
 199:src/main.c    **** //Initialize GPIO and USART2
 200:src/main.c    **** //
 201:src/main.c    **** 
 202:src/main.c    **** void USART1_Init(void) {
 203:src/main.c    **** 
 204:src/main.c    ****     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 205:src/main.c    **** 
 206:src/main.c    ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);	
 207:src/main.c    **** 
 208:src/main.c    **** 	//Structure With Data For GPIO Configuration
 209:src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
 210:src/main.c    **** 
 211:src/main.c    **** 	//Structure With Data For USART Configuration
 212:src/main.c    **** 	USART_InitTypeDef USART_InitStructure;
 213:src/main.c    **** 
 214:src/main.c    ****     NVIC_InitTypeDef NVIC_InitStructure;
 215:src/main.c    **** 
 216:src/main.c    **** 	//GPIO Configuration
 217:src/main.c    ****   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_6;
 218:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 219:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 220:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 221:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 222:src/main.c    **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 223:src/main.c    **** 
 224:src/main.c    **** 
 225:src/main.c    **** 	//Connect USART pins to AF
 226:src/main.c    **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
 227:src/main.c    **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 228:src/main.c    **** 
 229:src/main.c    **** 
 230:src/main.c    **** 	//USART Parameters
 231:src/main.c    **** 	USART_InitStructure.USART_BaudRate = 38400;
 232:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 233:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 234:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 235:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 236:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 237:src/main.c    **** 
 238:src/main.c    **** 	//Configuring And Enabling USART2
 239:src/main.c    **** 	USART_Init(USART1, &USART_InitStructure);
 240:src/main.c    **** 
 241:src/main.c    **** 
 242:src/main.c    ****     USART_ITConfig(USART1, USART_IT_RXNE, ENABLE); //allow usart interrupt
 243:src/main.c    **** 
 244:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 245:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 246:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 247:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 248:src/main.c    **** 
 249:src/main.c    ****     NVIC_Init(&NVIC_InitStructure);
 250:src/main.c    **** 
 251:src/main.c    **** 	USART_Cmd(USART1, ENABLE);
 252:src/main.c    **** 
 253:src/main.c    **** 
 254:src/main.c    **** }
 255:src/main.c    **** void initx(void){
 256:src/main.c    **** 	//Enable GPIO Clocks For USART2
 257:src/main.c    ****         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 258:src/main.c    **** 
 259:src/main.c    **** 	//Enable Clocks for USART2
 260:src/main.c    ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
 261:src/main.c    **** 
 262:src/main.c    **** 	//Structure With Data For GPIO Configuration
 263:src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
 264:src/main.c    **** 
 265:src/main.c    **** 	//Structure With Data For USART Configuration
 266:src/main.c    **** 	USART_InitTypeDef USART_InitStructure;
 267:src/main.c    **** 
 268:src/main.c    ****     NVIC_InitTypeDef NVIC_InitStructure;
 269:src/main.c    **** 
 270:src/main.c    **** 	//GPIO Configuration
 271:src/main.c    ****   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 272:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 273:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 274:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 275:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 276:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 277:src/main.c    **** 
 278:src/main.c    **** 
 279:src/main.c    **** 	//Connect USART pins to AF
 280:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 281:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 282:src/main.c    **** 
 283:src/main.c    **** 	//Initialize LED
 284:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 285:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 286:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 287:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 288:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 289:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 290:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 291:src/main.c    **** 
 292:src/main.c    **** 	//USART Parameters
 293:src/main.c    **** 	USART_InitStructure.USART_BaudRate = 38400;
 294:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 295:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 296:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 297:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 298:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 299:src/main.c    **** 
 300:src/main.c    **** 	//Configuring And Enabling USART2
 301:src/main.c    **** 	USART_Init(USART2, &USART_InitStructure);
 302:src/main.c    **** 
 303:src/main.c    **** 
 304:src/main.c    ****     USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 305:src/main.c    **** 
 306:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 307:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 308:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 309:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 310:src/main.c    **** 
 311:src/main.c    ****     NVIC_Init(&NVIC_InitStructure);
 312:src/main.c    **** 
 313:src/main.c    **** 	USART_Cmd(USART2, ENABLE);
 314:src/main.c    **** 
 315:src/main.c    **** }
 316:src/main.c    **** 
 317:src/main.c    **** void TIM_PWM_init() {
 318:src/main.c    ****     //TIMER SETUP
 319:src/main.c    ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE); //USART2
 320:src/main.c    ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); //USART1
 321:src/main.c    **** 
 322:src/main.c    **** 
 323:src/main.c    ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
 324:src/main.c    **** 
 325:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Period = 19999;
 326:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 84;
 327:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;//TIM_CKD_DIV1;
 328:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 329:src/main.c    **** 
 330:src/main.c    ****     TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
 331:src/main.c    ****     TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 332:src/main.c    **** 
 333:src/main.c    **** 
 334:src/main.c    ****     //pwm setup
 335:src/main.c    ****     
 336:src/main.c    ****     TIM_OCInitTypeDef TIM_OCInitStruct;
 337:src/main.c    ****     
 338:src/main.c    ****     TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 339:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 340:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0;
 341:src/main.c    ****     TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 342:src/main.c    ****     
 343:src/main.c    **** 
 344:src/main.c    **** 
 345:src/main.c    ****     TIM_OC1Init(TIM4, &TIM_OCInitStruct); //channel 1
 346:src/main.c    ****     TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 347:src/main.c    **** 
 348:src/main.c    ****     TIM_OC2Init(TIM4, &TIM_OCInitStruct); // channel 2
 349:src/main.c    ****     TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 350:src/main.c    **** 
 351:src/main.c    **** 
 352:src/main.c    ****     TIM_ARRPreloadConfig(TIM4, ENABLE);
 353:src/main.c    ****     TIM_Cmd(TIM4, ENABLE);
 354:src/main.c    **** }
 355:src/main.c    **** 
 356:src/main.c    **** 
 357:src/main.c    **** 
 358:src/main.c    **** 
 359:src/main.c    **** enum System_State {SYSTEM_WRITING, SYSTEM_WRITTEN, SYSTEM_READ, SYSTEM_ERROR};
 360:src/main.c    **** 
 361:src/main.c    **** 
 362:src/main.c    **** typedef struct {
 363:src/main.c    ****     PPump_Module *ppump;
 364:src/main.c    ****     int amount;
 365:src/main.c    **** 
 366:src/main.c    **** } vPPump_parameters;
 367:src/main.c    **** 
 368:src/main.c    **** 
 369:src/main.c    **** 
 370:src/main.c    **** typedef struct {
 371:src/main.c    ****     int status;
 372:src/main.c    ****     int delay;
 373:src/main.c    **** } vLight_parameters;
 374:src/main.c    **** 
 375:src/main.c    **** 
 376:src/main.c    **** typedef struct {
 377:src/main.c    ****     enum System_State state;
 378:src/main.c    ****     PPump_Module PPump_PHUp;
 379:src/main.c    ****     UDS_Module UDS_PHUp;
 380:src/main.c    ****     PPump_Module PPump_PHDown;
 381:src/main.c    ****     UDS_Module UDS_PHDown;
 382:src/main.c    ****     PPump_Module PPump_Nutrient;
 383:src/main.c    ****     UDS_Module UDS_Nutrient;
 384:src/main.c    ****     PHMeter_Module PHMeter_Resvoir;
 385:src/main.c    ****     int target_ph;
 386:src/main.c    ****     int ph_delay;
 387:src/main.c    **** } HydroponicSystem;
 388:src/main.c    **** 
 389:src/main.c    **** 
 390:src/main.c    **** typedef struct {
 391:src/main.c    ****     Light_Module Lighting; //change to Lighting_Module
 392:src/main.c    ****     enum System_State state;
 393:src/main.c    ****     int distance;
 394:src/main.c    ****     int hours_on;
 395:src/main.c    **** } LightingSystem;
 396:src/main.c    **** 
 397:src/main.c    **** 
 398:src/main.c    **** typedef struct {
 399:src/main.c    ****     enum System_State state;
 400:src/main.c    ****     Fan_Module Fan_Reservoir; //fans the water
 401:src/main.c    ****     Fan_Module Fan_Plant; //fans the plants
 402:src/main.c    ****     Fan_Module Fan_In; //brings in co2
 403:src/main.c    ****     Fan_Module Fan_Out; //puts out oxygen through carbon filter
 404:src/main.c    ****     Temperature_Module Temperature_Resevoir; // straightforward, above comments apply here
 405:src/main.c    ****     Temperature_Module Temperature_Plant;
 406:src/main.c    **** } ACSystem;
 407:src/main.c    **** 
 408:src/main.c    **** /*
 409:src/main.c    **** void System_update_member(NULL *system_member, NULL* member_value ) {
 410:src/main.c    ****     if (system_member && member_value) {
 411:src/main.c    ****         //do an if stsatement to check if system member and member value are of the same type
 412:src/main.c    ****         return;
 413:src/main.c    ****     }
 414:src/main.c    ****     //error
 415:src/main.c    **** }
 416:src/main.c    **** */
 417:src/main.c    **** HydroponicSystem hydroponics;
 418:src/main.c    **** LightingSystem lighting;
 419:src/main.c    **** ACSystem AC;
 420:src/main.c    **** 
 421:src/main.c    **** 
 422:src/main.c    **** void vACSystem_Init(void) {
 423:src/main.c    ****     USART_rtos_packet packet, packet1;
 424:src/main.c    ****     packet.USARTx_rtos = &USART1_rtos;
 425:src/main.c    ****     USART_rtos_puts(&packet, "Init AC System...");
 426:src/main.c    **** 
 427:src/main.c    **** 
 428:src/main.c    ****     AC.state = SYSTEM_WRITING;
 429:src/main.c    **** 
 430:src/main.c    ****     AC.state = SYSTEM_WRITTEN;
 431:src/main.c    **** //    USART_puts(USART2, "AC successfully initialized...\r\n");
 432:src/main.c    **** 
 433:src/main.c    ****     packet1.USARTx_rtos = &USART1_rtos;
 434:src/main.c    ****     USART_rtos_puts(&packet1, " OK\r\n");
 435:src/main.c    **** 
 436:src/main.c    **** 
 437:src/main.c    ****     USART_rtos_wait_send(&packet);
 438:src/main.c    ****     USART_rtos_wait_send(&packet1);
 439:src/main.c    **** 
 440:src/main.c    ****     vTaskDelete(NULL);
 441:src/main.c    **** }
 442:src/main.c    **** 
 443:src/main.c    **** void vLightingSystem_Init(void) {
 444:src/main.c    ****     //USART_rtos_puts(USART2, "Init Lighting System...");
 445:src/main.c    **** 
 446:src/main.c    ****     lighting.state = SYSTEM_WRITING;
 447:src/main.c    **** 
 448:src/main.c    ****     lighting.state = SYSTEM_WRITTEN;
 449:src/main.c    ****     //USART_puts(USART2, "Lighting successfully initialized...\r\n");
 450:src/main.c    ****     
 451:src/main.c    ****     //USART_rtos_puts(USART2, " OK\r\n");
 452:src/main.c    **** 
 453:src/main.c    ****     vTaskDelete(NULL);
 454:src/main.c    **** }
 455:src/main.c    **** 
 456:src/main.c    **** 
 457:src/main.c    **** void HydroponicUDS_Init(void) {
 458:src/main.c    **** 
 459:src/main.c    ****     hydroponics.UDS_PHUp.state = MODULE_RUNNING;
 460:src/main.c    ****     hydroponics.UDS_PHDown.state = MODULE_RUNNING;
 461:src/main.c    ****     hydroponics.UDS_Nutrient.state = MODULE_RUNNING;
 462:src/main.c    **** 
 463:src/main.c    **** 
 464:src/main.c    **** 	//RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 465:src/main.c    **** 
 466:src/main.c    ****     GPIO_InitTypeDef gpio_ultrasonic;
 467:src/main.c    **** 
 468:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_3; //echo
 469:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP; //PP
 470:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 471:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 472:src/main.c    **** 
 473:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ultrasonic);
 474:src/main.c    **** 
 475:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_4; //trigger
 476:src/main.c    **** 	gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_NOPULL;
 477:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 478:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ultrasonic);
 479:src/main.c    **** 
 480:src/main.c    ****     hydroponics.UDS_PHUp.pin_in = UDS_PHUP_PIN_IN;
 481:src/main.c    ****     hydroponics.UDS_PHUp.port_in = UDS_PHUP_PORT_IN;
 482:src/main.c    ****     hydroponics.UDS_PHUp.pin_out = UDS_PHUP_PIN_OUT;
 483:src/main.c    ****     hydroponics.UDS_PHUp.port_out = UDS_PHUP_PORT_OUT;
 484:src/main.c    **** 
 485:src/main.c    **** 
 486:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_PHUp);
 487:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_PHDown);
 488:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_Nutrient);
 489:src/main.c    **** 
 490:src/main.c    **** 
 491:src/main.c    **** 
 492:src/main.c    **** }
 493:src/main.c    **** void HydroponicPPumps_Init(void) {
 494:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 495:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
 496:src/main.c    **** 
 497:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6; //echo
 498:src/main.c    **** 	gpio_ppump.GPIO_PuPd = GPIO_PuPd_NOPULL;
 499:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT;
 500:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; //PP
 501:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 502:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 503:src/main.c    **** 
 504:src/main.c    **** /*
 505:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6;
 506:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 507:src/main.c    **** 
 508:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6;
 509:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 510:src/main.c    **** */
 511:src/main.c    **** 
 512:src/main.c    ****     hydroponics.PPump_PHDown.port_out = GPIOC;
 513:src/main.c    ****     hydroponics.PPump_PHDown.pin_out = GPIO_Pin_6;
 514:src/main.c    **** 
 515:src/main.c    ****     hydroponics.PPump_PHUp.state = MODULE_RUNNING;
 516:src/main.c    ****     hydroponics.PPump_PHDown.state = MODULE_RUNNING;
 517:src/main.c    ****     hydroponics.PPump_Nutrient.state = MODULE_RUNNING;
 518:src/main.c    **** 
 519:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_PHUp, &hydroponics.UDS_PHUp);
 520:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_PHDown, &hydroponics.UDS_PHDown);
 521:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_Nutrient, &hydroponics.UDS_Nutrient);
 522:src/main.c    **** 
 523:src/main.c    **** /*
 524:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ppump);
 525:src/main.c    **** 
 526:src/main.c    ****     GPIO_ResetBits(GPIOD, GPIO_Pin_3);
 527:src/main.c    ****     delay_ms(1000);
 528:src/main.c    ****     GPIO_SetBits(GPIOD, GPIO_Pin_3);
 529:src/main.c    **** */
 530:src/main.c    **** 
 531:src/main.c    **** }
 532:src/main.c    **** 
 533:src/main.c    **** void vHydroponicSystem_Init(void) {
 534:src/main.c    **** 
 535:src/main.c    ****     USART_rtos_packet packet;
 536:src/main.c    ****     packet.USARTx_rtos = &USART1_rtos;
 537:src/main.c    ****     USART_rtos_puts(&packet, " Init Hydroponic System...");
 538:src/main.c    **** 
 539:src/main.c    ****     hydroponics.state = SYSTEM_WRITING;
 540:src/main.c    **** 
 541:src/main.c    ****     HydroponicPPumps_Init();
 542:src/main.c    ****     HydroponicUDS_Init();
 543:src/main.c    **** 
 544:src/main.c    **** 
 545:src/main.c    **** 
 546:src/main.c    ****     hydroponics.PHMeter_Resvoir.state = MODULE_RUNNING;
 547:src/main.c    ****     PHMeter_Module_Init(&hydroponics.PHMeter_Resvoir);
 548:src/main.c    **** 
 549:src/main.c    **** 
 550:src/main.c    **** 
 551:src/main.c    ****     if (hydroponics.PPump_PHUp.state == MODULE_STANDBY &&
 552:src/main.c    ****         hydroponics.PPump_PHDown.state == MODULE_STANDBY &&
 553:src/main.c    ****         hydroponics.PPump_Nutrient.state == MODULE_STANDBY &&  
 554:src/main.c    ****         hydroponics.UDS_PHUp.state == MODULE_STANDBY &&
 555:src/main.c    ****         hydroponics.UDS_PHDown.state == MODULE_STANDBY &&
 556:src/main.c    ****         hydroponics.UDS_Nutrient.state == MODULE_STANDBY &&
 557:src/main.c    ****         hydroponics.PHMeter_Resvoir.state == MODULE_STANDBY) {
 558:src/main.c    **** 
 559:src/main.c    ****         hydroponics.state = SYSTEM_WRITTEN;
 560:src/main.c    ****         //USART_puts(USART2, "Hydroponics successfully initialized...\r\n");
 561:src/main.c    ****     }
 562:src/main.c    **** 
 563:src/main.c    ****     else {
 564:src/main.c    ****         //USART2_rtos_puts("Hydroponics could not initialize...\r\n");
 565:src/main.c    **** 
 566:src/main.c    ****         hydroponics.state = SYSTEM_ERROR;
 567:src/main.c    ****         //xTaskCreate(vHydroponicSystem_Init, (signed char*)"vHydroponicSystem_Init", 64, NULL, tsk
 568:src/main.c    **** 
 569:src/main.c    ****     }
 570:src/main.c    ****     //vTaskDelay() Delay for a little than do the task again
 571:src/main.c    ****     //
 572:src/main.c    ****     //USART_rtos_puts(USART2, " OK\r\n");
 573:src/main.c    **** 
 574:src/main.c    ****     USART_rtos_packet packet1;
 575:src/main.c    ****     packet1.USARTx_rtos = &USART1_rtos;
 576:src/main.c    ****     USART_rtos_puts(&packet1, " Ok\r\n");
 577:src/main.c    **** 
 578:src/main.c    ****     USART_rtos_wait_send(&packet);
 579:src/main.c    ****     USART_rtos_wait_send(&packet1);
 580:src/main.c    **** 
 581:src/main.c    ****     vTaskDelete(NULL);
 582:src/main.c    **** 
 583:src/main.c    **** }
 584:src/main.c    **** 
 585:src/main.c    **** void vLight_task(vLight_parameters *params) {
 586:src/main.c    ****     /*
 587:src/main.c    ****     Light_set(params->status);
 588:src/main.c    ****     int height = Plant_get_height();
 589:src/main.c    ****     Light_distance_set(distance+height);
 590:src/main.c    **** 
 591:src/main.c    ****     //maybe look for something like recurring task
 592:src/main.c    ****     //you need to find a way to change variable while its waiting;
 593:src/main.c    ****     */
 594:src/main.c    **** 
 595:src/main.c    ****     static int counter = 5;
 596:src/main.c    ****     int i;
 597:src/main.c    ****     while (1) {
 598:src/main.c    ****         for(i=0; i<counter; i++) {
 599:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 600:src/main.c    ****         }
 601:src/main.c    ****     }
 602:src/main.c    **** 
 603:src/main.c    ****     vTaskDelete(NULL);
 604:src/main.c    **** } 
 605:src/main.c    **** 
 606:src/main.c    **** int TEST_PH_VALUE = 50;
 607:src/main.c    **** 
 608:src/main.c    **** void vUDS_read_distance(UDS_Module *module) {
 609:src/main.c    **** 
 610:src/main.c    ****    USART_rtos_packet packet1;
 611:src/main.c    ****    packet1.USARTx_rtos = &USART1_rtos;
 612:src/main.c    **** 
 613:src/main.c    ****    USART_rtos_puts(&packet1, "Reading Ultrasonic Distance Sensor...\r\n");
 614:src/main.c    **** 
 615:src/main.c    ****    taskENTER_CRITICAL();
 616:src/main.c    ****    int v = UDS_read_distance(module); 
 617:src/main.c    ****    taskEXIT_CRITICAL();
 618:src/main.c    **** 
 619:src/main.c    **** 
 620:src/main.c    **** 
 621:src/main.c    ****    USART_puts(USART1, "\r\nDistance: ");
 622:src/main.c    ****    USART_put_int(USART1, v);
 623:src/main.c    ****    USART_puts(USART1, "\r\n");
 624:src/main.c    ****    //USART_rtos_sputs(&packet, "Distance: %d", v);
 625:src/main.c    **** 
 626:src/main.c    ****    //USART_rtos_wait_send(&packet);
 627:src/main.c    ****    //USART_rtos_wait_send(&packet1);
 628:src/main.c    ****    
 629:src/main.c    ****    USART_puts(USART1, "FUCK"); //ERROR OCCURS WHEN I UNCOMMENT THE CODE CODE ABOVE
 630:src/main.c    **** 
 631:src/main.c    ****    vTaskDelete(NULL);
 632:src/main.c    **** }
 633:src/main.c    **** 
 634:src/main.c    **** 
 635:src/main.c    **** 
 636:src/main.c    **** void vPH_read_value(PHMeter_Module *meter) {
  66              		.loc 1 636 0
  67              		.cfi_startproc
  68              		@ args = 0, pretend = 0, frame = 0
  69              		@ frame_needed = 0, uses_anonymous_args = 0
  70              	.LVL5:
  71 0000 10B5     		push	{r4, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 4, -8
  75              		.cfi_offset 14, -4
 637:src/main.c    ****     if (meter) {
  76              		.loc 1 637 0
  77 0002 68B1     		cbz	r0, .L3
 638:src/main.c    ****         meter->state = MODULE_RUNNING;
  78              		.loc 1 638 0
  79 0004 0023     		movs	r3, #0
 639:src/main.c    ****      //   USART_rtos_puts(USART2, "Reading PHMeter Reservoir...\r\n");
 640:src/main.c    ****         //USART2_rtos_puts("Read pH Meter...\r\n");
 641:src/main.c    ****         meter->value = TEST_PH_VALUE;
  80              		.loc 1 641 0
  81 0006 40F20002 		movw	r2, #:lower16:.LANCHOR0
  82 000a C0F20002 		movt	r2, #:upper16:.LANCHOR0
  83 000e 1268     		ldr	r2, [r2]
  84 0010 0260     		str	r2, [r0]
 642:src/main.c    ****         meter->state = MODULE_EXECUTED;
  85              		.loc 1 642 0
  86 0012 0222     		movs	r2, #2
  87 0014 0272     		strb	r2, [r0, #8]
 643:src/main.c    ****         xSemaphoreGive(meter->mutex);
  88              		.loc 1 643 0
  89 0016 4068     		ldr	r0, [r0, #4]
  90              	.LVL6:
  91 0018 1946     		mov	r1, r3
  92 001a 1A46     		mov	r2, r3
  93 001c FFF7FEFF 		bl	xQueueGenericSend
  94              	.LVL7:
  95              	.L3:
 644:src/main.c    **** 
 645:src/main.c    ****         }
 646:src/main.c    **** 
 647:src/main.c    ****     vTaskDelete(NULL);
  96              		.loc 1 647 0
  97 0020 0020     		movs	r0, #0
  98 0022 FFF7FEFF 		bl	vTaskDelete
  99              	.LVL8:
 100 0026 10BD     		pop	{r4, pc}
 101              		.cfi_endproc
 102              	.LFE124:
 104              		.section	.text.setSysTick,"ax",%progbits
 105              		.align	2
 106              		.global	setSysTick
 107              		.thumb
 108              		.thumb_func
 110              	setSysTick:
 111              	.LFB111:
  52:src/main.c    ****     if (SysTick_Config(SystemCoreClock / 1000)) {
 112              		.loc 1 52 0
 113              		.cfi_startproc
 114              		@ args = 0, pretend = 0, frame = 0
 115              		@ frame_needed = 0, uses_anonymous_args = 0
 116              		@ link register save eliminated.
  53:src/main.c    ****         while (1){};
 117              		.loc 1 53 0
 118 0000 40F20003 		movw	r3, #:lower16:SystemCoreClock
 119 0004 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 120 0008 1A68     		ldr	r2, [r3]
 121 000a 44F6D353 		movw	r3, #19923
 122 000e C1F26203 		movt	r3, 4194
 123 0012 A3FB0212 		umull	r1, r2, r3, r2
 124              	.LVL9:
 125              	.LBB8:
 126              	.LBB9:
 127              		.file 2 "libs/CMSIS/Include/core_cm4.h"
   1:libs/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:libs/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:libs/CMSIS/Include/core_cm4.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cm4.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cm4.h ****  *
   7:libs/CMSIS/Include/core_cm4.h ****  * @note
   8:libs/CMSIS/Include/core_cm4.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cm4.h ****  *
  10:libs/CMSIS/Include/core_cm4.h ****  * @par
  11:libs/CMSIS/Include/core_cm4.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:libs/CMSIS/Include/core_cm4.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:libs/CMSIS/Include/core_cm4.h ****  * within development tools that are supporting such ARM based processors.
  14:libs/CMSIS/Include/core_cm4.h ****  *
  15:libs/CMSIS/Include/core_cm4.h ****  * @par
  16:libs/CMSIS/Include/core_cm4.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cm4.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cm4.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cm4.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cm4.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cm4.h ****  *
  22:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cm4.h **** #if defined ( __ICCARM__ )
  24:libs/CMSIS/Include/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:libs/CMSIS/Include/core_cm4.h **** #endif
  26:libs/CMSIS/Include/core_cm4.h **** 
  27:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  28:libs/CMSIS/Include/core_cm4.h ****  extern "C" {
  29:libs/CMSIS/Include/core_cm4.h **** #endif
  30:libs/CMSIS/Include/core_cm4.h **** 
  31:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:libs/CMSIS/Include/core_cm4.h **** 
  34:libs/CMSIS/Include/core_cm4.h **** 
  35:libs/CMSIS/Include/core_cm4.h **** /** \mainpage CMSIS Cortex-M4
  36:libs/CMSIS/Include/core_cm4.h **** 
  37:libs/CMSIS/Include/core_cm4.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:libs/CMSIS/Include/core_cm4.h ****   It consists of:
  39:libs/CMSIS/Include/core_cm4.h **** 
  40:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M Core Register Definitions
  41:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M functions
  42:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M instructions
  43:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M SIMD instructions
  44:libs/CMSIS/Include/core_cm4.h **** 
  45:libs/CMSIS/Include/core_cm4.h ****   The CMSIS Cortex-M4 Core Peripheral Access Layer contains C and assembly functions that ease
  46:libs/CMSIS/Include/core_cm4.h ****   access to the Cortex-M Core
  47:libs/CMSIS/Include/core_cm4.h ****  */
  48:libs/CMSIS/Include/core_cm4.h **** 
  49:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  50:libs/CMSIS/Include/core_cm4.h ****   CMSIS violates following MISRA-C2004 Rules:
  51:libs/CMSIS/Include/core_cm4.h ****   
  52:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  53:libs/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'. 
  54:libs/CMSIS/Include/core_cm4.h **** 
  55:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  56:libs/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:libs/CMSIS/Include/core_cm4.h ****    
  58:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  59:libs/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code. 
  60:libs/CMSIS/Include/core_cm4.h **** 
  61:libs/CMSIS/Include/core_cm4.h ****  */
  62:libs/CMSIS/Include/core_cm4.h **** 
  63:libs/CMSIS/Include/core_cm4.h **** 
  64:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  65:libs/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  66:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  67:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  68:libs/CMSIS/Include/core_cm4.h ****   This file defines all structures and symbols for CMSIS core:
  69:libs/CMSIS/Include/core_cm4.h ****    - CMSIS version number
  70:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core
  71:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core Revision Number
  72:libs/CMSIS/Include/core_cm4.h ****   @{
  73:libs/CMSIS/Include/core_cm4.h ****  */
  74:libs/CMSIS/Include/core_cm4.h **** 
  75:libs/CMSIS/Include/core_cm4.h **** /*  CMSIS CM4 definitions */
  76:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  77:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  78:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | __CM4_CMSIS_VERSION_SUB) /*!<
  79:libs/CMSIS/Include/core_cm4.h **** 
  80:libs/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (0x04)                                                       /*!<
  81:libs/CMSIS/Include/core_cm4.h **** 
  82:libs/CMSIS/Include/core_cm4.h **** 
  83:libs/CMSIS/Include/core_cm4.h **** #if   defined ( __CC_ARM )
  84:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  85:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  86:libs/CMSIS/Include/core_cm4.h **** 
  87:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
  88:libs/CMSIS/Include/core_cm4.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  89:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  90:libs/CMSIS/Include/core_cm4.h **** 
  91:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
  92:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  93:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  94:libs/CMSIS/Include/core_cm4.h **** 
  95:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
  96:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  97:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  98:libs/CMSIS/Include/core_cm4.h **** 
  99:libs/CMSIS/Include/core_cm4.h **** #endif
 100:libs/CMSIS/Include/core_cm4.h **** 
 101:libs/CMSIS/Include/core_cm4.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 102:libs/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
 103:libs/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 104:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 105:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 106:libs/CMSIS/Include/core_cm4.h ****     #else
 107:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 108:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 109:libs/CMSIS/Include/core_cm4.h ****     #endif
 110:libs/CMSIS/Include/core_cm4.h ****   #else
 111:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 112:libs/CMSIS/Include/core_cm4.h ****   #endif
 113:libs/CMSIS/Include/core_cm4.h **** 
 114:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 115:libs/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 116:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 118:libs/CMSIS/Include/core_cm4.h ****     #else
 119:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 121:libs/CMSIS/Include/core_cm4.h ****     #endif
 122:libs/CMSIS/Include/core_cm4.h ****   #else
 123:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 124:libs/CMSIS/Include/core_cm4.h ****   #endif
 125:libs/CMSIS/Include/core_cm4.h **** 
 126:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 127:libs/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 130:libs/CMSIS/Include/core_cm4.h ****     #else
 131:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 133:libs/CMSIS/Include/core_cm4.h ****     #endif
 134:libs/CMSIS/Include/core_cm4.h ****   #else
 135:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 136:libs/CMSIS/Include/core_cm4.h ****   #endif
 137:libs/CMSIS/Include/core_cm4.h **** 
 138:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 139:libs/CMSIS/Include/core_cm4.h ****     /* add preprocessor checks to define __FPU_USED */
 140:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 141:libs/CMSIS/Include/core_cm4.h **** #endif
 142:libs/CMSIS/Include/core_cm4.h **** 
 143:libs/CMSIS/Include/core_cm4.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 144:libs/CMSIS/Include/core_cm4.h **** #include <core_cmInstr.h>                /*!< Core Instruction Access                         */
 145:libs/CMSIS/Include/core_cm4.h **** #include <core_cmFunc.h>                 /*!< Core Function Access                            */
 146:libs/CMSIS/Include/core_cm4.h **** #include <core_cm4_simd.h>               /*!< Compiler specific SIMD Intrinsics               */
 147:libs/CMSIS/Include/core_cm4.h **** 
 148:libs/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 149:libs/CMSIS/Include/core_cm4.h **** 
 150:libs/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 151:libs/CMSIS/Include/core_cm4.h **** 
 152:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 153:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 154:libs/CMSIS/Include/core_cm4.h **** 
 155:libs/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 156:libs/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 157:libs/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 158:libs/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000
 159:libs/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 160:libs/CMSIS/Include/core_cm4.h ****   #endif
 161:libs/CMSIS/Include/core_cm4.h **** 
 162:libs/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 163:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0
 164:libs/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 165:libs/CMSIS/Include/core_cm4.h ****   #endif
 166:libs/CMSIS/Include/core_cm4.h **** 
 167:libs/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 168:libs/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0
 169:libs/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 170:libs/CMSIS/Include/core_cm4.h ****   #endif
 171:libs/CMSIS/Include/core_cm4.h **** 
 172:libs/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 173:libs/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 174:libs/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 175:libs/CMSIS/Include/core_cm4.h ****   #endif
 176:libs/CMSIS/Include/core_cm4.h **** 
 177:libs/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 178:libs/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 179:libs/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 180:libs/CMSIS/Include/core_cm4.h ****   #endif
 181:libs/CMSIS/Include/core_cm4.h **** #endif
 182:libs/CMSIS/Include/core_cm4.h **** 
 183:libs/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 184:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 185:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 186:libs/CMSIS/Include/core_cm4.h **** #else
 187:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 188:libs/CMSIS/Include/core_cm4.h **** #endif
 189:libs/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 190:libs/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 191:libs/CMSIS/Include/core_cm4.h **** 
 192:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_definitions */
 193:libs/CMSIS/Include/core_cm4.h **** 
 194:libs/CMSIS/Include/core_cm4.h **** 
 195:libs/CMSIS/Include/core_cm4.h **** 
 196:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 197:libs/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 198:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 199:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 200:libs/CMSIS/Include/core_cm4.h ****   Core Register contain:
 201:libs/CMSIS/Include/core_cm4.h ****   - Core Register
 202:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 203:libs/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 204:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 205:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 206:libs/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 207:libs/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 208:libs/CMSIS/Include/core_cm4.h **** */
 209:libs/CMSIS/Include/core_cm4.h **** 
 210:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 211:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CORE CMSIS Core
 212:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Registers
 213:libs/CMSIS/Include/core_cm4.h ****   @{
 214:libs/CMSIS/Include/core_cm4.h ****  */
 215:libs/CMSIS/Include/core_cm4.h **** 
 216:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 217:libs/CMSIS/Include/core_cm4.h ****  */
 218:libs/CMSIS/Include/core_cm4.h **** typedef union
 219:libs/CMSIS/Include/core_cm4.h **** {
 220:libs/CMSIS/Include/core_cm4.h ****   struct
 221:libs/CMSIS/Include/core_cm4.h ****   {
 222:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 223:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 224:libs/CMSIS/Include/core_cm4.h **** #else
 225:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 226:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 227:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 228:libs/CMSIS/Include/core_cm4.h **** #endif
 229:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 230:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 231:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 232:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 233:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 234:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 235:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 236:libs/CMSIS/Include/core_cm4.h **** } APSR_Type;
 237:libs/CMSIS/Include/core_cm4.h **** 
 238:libs/CMSIS/Include/core_cm4.h **** 
 239:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 240:libs/CMSIS/Include/core_cm4.h ****  */
 241:libs/CMSIS/Include/core_cm4.h **** typedef union
 242:libs/CMSIS/Include/core_cm4.h **** {
 243:libs/CMSIS/Include/core_cm4.h ****   struct
 244:libs/CMSIS/Include/core_cm4.h ****   {
 245:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 246:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 247:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 248:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 249:libs/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 250:libs/CMSIS/Include/core_cm4.h **** 
 251:libs/CMSIS/Include/core_cm4.h **** 
 252:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 253:libs/CMSIS/Include/core_cm4.h ****  */
 254:libs/CMSIS/Include/core_cm4.h **** typedef union
 255:libs/CMSIS/Include/core_cm4.h **** {
 256:libs/CMSIS/Include/core_cm4.h ****   struct
 257:libs/CMSIS/Include/core_cm4.h ****   {
 258:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 259:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 260:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 261:libs/CMSIS/Include/core_cm4.h **** #else
 262:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 263:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 264:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 265:libs/CMSIS/Include/core_cm4.h **** #endif
 266:libs/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 267:libs/CMSIS/Include/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 268:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 269:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 270:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 271:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 272:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 273:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 274:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 275:libs/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 276:libs/CMSIS/Include/core_cm4.h **** 
 277:libs/CMSIS/Include/core_cm4.h **** 
 278:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 279:libs/CMSIS/Include/core_cm4.h ****  */
 280:libs/CMSIS/Include/core_cm4.h **** typedef union
 281:libs/CMSIS/Include/core_cm4.h **** {
 282:libs/CMSIS/Include/core_cm4.h ****   struct
 283:libs/CMSIS/Include/core_cm4.h ****   {
 284:libs/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 285:libs/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 286:libs/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 287:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 288:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 289:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 290:libs/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 291:libs/CMSIS/Include/core_cm4.h **** 
 292:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 293:libs/CMSIS/Include/core_cm4.h **** 
 294:libs/CMSIS/Include/core_cm4.h **** 
 295:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 296:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 297:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M NVIC Registers
 298:libs/CMSIS/Include/core_cm4.h ****   @{
 299:libs/CMSIS/Include/core_cm4.h ****  */
 300:libs/CMSIS/Include/core_cm4.h **** 
 301:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 302:libs/CMSIS/Include/core_cm4.h ****  */
 303:libs/CMSIS/Include/core_cm4.h **** typedef struct
 304:libs/CMSIS/Include/core_cm4.h **** {
 305:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 306:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[24];
 307:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 308:libs/CMSIS/Include/core_cm4.h ****        uint32_t RSERVED1[24];
 309:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 310:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[24];
 311:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 312:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED3[24];
 313:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 314:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED4[56];
 315:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 316:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED5[644];
 317:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 318:libs/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 319:libs/CMSIS/Include/core_cm4.h **** 
 320:libs/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 321:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 322:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 323:libs/CMSIS/Include/core_cm4.h **** 
 324:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 325:libs/CMSIS/Include/core_cm4.h **** 
 326:libs/CMSIS/Include/core_cm4.h **** 
 327:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 328:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCB CMSIS SCB
 329:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control Block Registers
 330:libs/CMSIS/Include/core_cm4.h ****   @{
 331:libs/CMSIS/Include/core_cm4.h ****  */
 332:libs/CMSIS/Include/core_cm4.h **** 
 333:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 334:libs/CMSIS/Include/core_cm4.h ****  */
 335:libs/CMSIS/Include/core_cm4.h **** typedef struct
 336:libs/CMSIS/Include/core_cm4.h **** {
 337:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 338:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 339:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 340:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 341:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 342:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 343:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 344:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 345:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 346:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 347:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 348:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 349:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 350:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 351:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 352:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 353:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 354:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 355:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 356:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[5];
 357:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 358:libs/CMSIS/Include/core_cm4.h **** } SCB_Type;
 359:libs/CMSIS/Include/core_cm4.h **** 
 360:libs/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 361:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 362:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 363:libs/CMSIS/Include/core_cm4.h **** 
 364:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 365:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 366:libs/CMSIS/Include/core_cm4.h **** 
 367:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 368:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 369:libs/CMSIS/Include/core_cm4.h **** 
 370:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 371:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 372:libs/CMSIS/Include/core_cm4.h **** 
 373:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 374:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 375:libs/CMSIS/Include/core_cm4.h **** 
 376:libs/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 377:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 378:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 379:libs/CMSIS/Include/core_cm4.h **** 
 380:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 381:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 382:libs/CMSIS/Include/core_cm4.h **** 
 383:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 384:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 385:libs/CMSIS/Include/core_cm4.h **** 
 386:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 387:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 388:libs/CMSIS/Include/core_cm4.h **** 
 389:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 390:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 391:libs/CMSIS/Include/core_cm4.h **** 
 392:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 393:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 394:libs/CMSIS/Include/core_cm4.h **** 
 395:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 396:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 397:libs/CMSIS/Include/core_cm4.h **** 
 398:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 399:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 400:libs/CMSIS/Include/core_cm4.h **** 
 401:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 402:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 403:libs/CMSIS/Include/core_cm4.h **** 
 404:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 405:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 406:libs/CMSIS/Include/core_cm4.h **** 
 407:libs/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 408:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:libs/CMSIS/Include/core_cm4.h **** 
 411:libs/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 412:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 413:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 414:libs/CMSIS/Include/core_cm4.h **** 
 415:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 416:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 417:libs/CMSIS/Include/core_cm4.h **** 
 418:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 419:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 420:libs/CMSIS/Include/core_cm4.h **** 
 421:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 422:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 423:libs/CMSIS/Include/core_cm4.h **** 
 424:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 425:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 426:libs/CMSIS/Include/core_cm4.h **** 
 427:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 428:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 429:libs/CMSIS/Include/core_cm4.h **** 
 430:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 431:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 432:libs/CMSIS/Include/core_cm4.h **** 
 433:libs/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 434:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 435:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 436:libs/CMSIS/Include/core_cm4.h **** 
 437:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 438:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 439:libs/CMSIS/Include/core_cm4.h **** 
 440:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 441:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 442:libs/CMSIS/Include/core_cm4.h **** 
 443:libs/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 444:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 445:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 446:libs/CMSIS/Include/core_cm4.h **** 
 447:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 448:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 449:libs/CMSIS/Include/core_cm4.h **** 
 450:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 451:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 452:libs/CMSIS/Include/core_cm4.h **** 
 453:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 454:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 455:libs/CMSIS/Include/core_cm4.h **** 
 456:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 457:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 458:libs/CMSIS/Include/core_cm4.h **** 
 459:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 460:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 461:libs/CMSIS/Include/core_cm4.h **** 
 462:libs/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 463:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 464:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 465:libs/CMSIS/Include/core_cm4.h **** 
 466:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 467:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 468:libs/CMSIS/Include/core_cm4.h **** 
 469:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 470:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 471:libs/CMSIS/Include/core_cm4.h **** 
 472:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 473:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 474:libs/CMSIS/Include/core_cm4.h **** 
 475:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 476:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 477:libs/CMSIS/Include/core_cm4.h **** 
 478:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 479:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 480:libs/CMSIS/Include/core_cm4.h **** 
 481:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 482:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 483:libs/CMSIS/Include/core_cm4.h **** 
 484:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 485:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 486:libs/CMSIS/Include/core_cm4.h **** 
 487:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 488:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 489:libs/CMSIS/Include/core_cm4.h **** 
 490:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 491:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 492:libs/CMSIS/Include/core_cm4.h **** 
 493:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 494:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 495:libs/CMSIS/Include/core_cm4.h **** 
 496:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 497:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 498:libs/CMSIS/Include/core_cm4.h **** 
 499:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 500:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 501:libs/CMSIS/Include/core_cm4.h **** 
 502:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 503:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 504:libs/CMSIS/Include/core_cm4.h **** 
 505:libs/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 506:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 507:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 508:libs/CMSIS/Include/core_cm4.h **** 
 509:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 510:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 511:libs/CMSIS/Include/core_cm4.h **** 
 512:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 513:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 514:libs/CMSIS/Include/core_cm4.h **** 
 515:libs/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 516:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 517:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 518:libs/CMSIS/Include/core_cm4.h **** 
 519:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 520:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 521:libs/CMSIS/Include/core_cm4.h **** 
 522:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 523:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 524:libs/CMSIS/Include/core_cm4.h **** 
 525:libs/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 526:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 527:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 528:libs/CMSIS/Include/core_cm4.h **** 
 529:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 530:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 531:libs/CMSIS/Include/core_cm4.h **** 
 532:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 533:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 534:libs/CMSIS/Include/core_cm4.h **** 
 535:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 536:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 537:libs/CMSIS/Include/core_cm4.h **** 
 538:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 539:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 540:libs/CMSIS/Include/core_cm4.h **** 
 541:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 542:libs/CMSIS/Include/core_cm4.h **** 
 543:libs/CMSIS/Include/core_cm4.h **** 
 544:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 545:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 546:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 547:libs/CMSIS/Include/core_cm4.h ****   @{
 548:libs/CMSIS/Include/core_cm4.h ****  */
 549:libs/CMSIS/Include/core_cm4.h **** 
 550:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 551:libs/CMSIS/Include/core_cm4.h ****  */
 552:libs/CMSIS/Include/core_cm4.h **** typedef struct
 553:libs/CMSIS/Include/core_cm4.h **** {
 554:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 555:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 556:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 557:libs/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 558:libs/CMSIS/Include/core_cm4.h **** 
 559:libs/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 560:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 561:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 562:libs/CMSIS/Include/core_cm4.h **** 
 563:libs/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 564:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 565:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 566:libs/CMSIS/Include/core_cm4.h **** 
 567:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 568:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 569:libs/CMSIS/Include/core_cm4.h **** 
 570:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:libs/CMSIS/Include/core_cm4.h **** 
 573:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:libs/CMSIS/Include/core_cm4.h **** 
 576:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:libs/CMSIS/Include/core_cm4.h **** 
 579:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 580:libs/CMSIS/Include/core_cm4.h **** 
 581:libs/CMSIS/Include/core_cm4.h **** 
 582:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 583:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 584:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Timer Registers
 585:libs/CMSIS/Include/core_cm4.h ****   @{
 586:libs/CMSIS/Include/core_cm4.h ****  */
 587:libs/CMSIS/Include/core_cm4.h **** 
 588:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:libs/CMSIS/Include/core_cm4.h ****  */
 590:libs/CMSIS/Include/core_cm4.h **** typedef struct
 591:libs/CMSIS/Include/core_cm4.h **** {
 592:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:libs/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 597:libs/CMSIS/Include/core_cm4.h **** 
 598:libs/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 599:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:libs/CMSIS/Include/core_cm4.h **** 
 602:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:libs/CMSIS/Include/core_cm4.h **** 
 605:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:libs/CMSIS/Include/core_cm4.h **** 
 608:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:libs/CMSIS/Include/core_cm4.h **** 
 611:libs/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 612:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:libs/CMSIS/Include/core_cm4.h **** 
 615:libs/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 616:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:libs/CMSIS/Include/core_cm4.h **** 
 619:libs/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 620:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:libs/CMSIS/Include/core_cm4.h **** 
 623:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:libs/CMSIS/Include/core_cm4.h **** 
 626:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:libs/CMSIS/Include/core_cm4.h **** 
 629:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 630:libs/CMSIS/Include/core_cm4.h **** 
 631:libs/CMSIS/Include/core_cm4.h **** 
 632:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 633:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_ITM CMSIS ITM
 634:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 635:libs/CMSIS/Include/core_cm4.h ****   @{
 636:libs/CMSIS/Include/core_cm4.h ****  */
 637:libs/CMSIS/Include/core_cm4.h **** 
 638:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:libs/CMSIS/Include/core_cm4.h ****  */
 640:libs/CMSIS/Include/core_cm4.h **** typedef struct
 641:libs/CMSIS/Include/core_cm4.h **** {
 642:libs/CMSIS/Include/core_cm4.h ****   __O  union
 643:libs/CMSIS/Include/core_cm4.h ****   {
 644:libs/CMSIS/Include/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:libs/CMSIS/Include/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:libs/CMSIS/Include/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:libs/CMSIS/Include/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[864];
 649:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED1[15];
 651:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[15];
 653:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:libs/CMSIS/Include/core_cm4.h **** } ITM_Type;
 655:libs/CMSIS/Include/core_cm4.h **** 
 656:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 657:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 658:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 659:libs/CMSIS/Include/core_cm4.h **** 
 660:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 661:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 662:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 663:libs/CMSIS/Include/core_cm4.h **** 
 664:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 665:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 666:libs/CMSIS/Include/core_cm4.h **** 
 667:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 668:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 669:libs/CMSIS/Include/core_cm4.h **** 
 670:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 671:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 672:libs/CMSIS/Include/core_cm4.h **** 
 673:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 674:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 675:libs/CMSIS/Include/core_cm4.h **** 
 676:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 677:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 678:libs/CMSIS/Include/core_cm4.h **** 
 679:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 680:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 681:libs/CMSIS/Include/core_cm4.h **** 
 682:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 683:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 684:libs/CMSIS/Include/core_cm4.h **** 
 685:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 686:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 687:libs/CMSIS/Include/core_cm4.h **** 
 688:libs/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 689:libs/CMSIS/Include/core_cm4.h **** 
 690:libs/CMSIS/Include/core_cm4.h **** 
 691:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 692:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 693:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_MPU CMSIS MPU
 694:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 695:libs/CMSIS/Include/core_cm4.h ****   @{
 696:libs/CMSIS/Include/core_cm4.h ****  */
 697:libs/CMSIS/Include/core_cm4.h **** 
 698:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 699:libs/CMSIS/Include/core_cm4.h ****  */
 700:libs/CMSIS/Include/core_cm4.h **** typedef struct
 701:libs/CMSIS/Include/core_cm4.h **** {
 702:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 703:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 704:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 705:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 706:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 707:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 708:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 709:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 710:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 711:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 712:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 713:libs/CMSIS/Include/core_cm4.h **** } MPU_Type;
 714:libs/CMSIS/Include/core_cm4.h **** 
 715:libs/CMSIS/Include/core_cm4.h **** /* MPU Type Register */
 716:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 717:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 718:libs/CMSIS/Include/core_cm4.h **** 
 719:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 720:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 721:libs/CMSIS/Include/core_cm4.h **** 
 722:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 723:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 724:libs/CMSIS/Include/core_cm4.h **** 
 725:libs/CMSIS/Include/core_cm4.h **** /* MPU Control Register */
 726:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 727:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 728:libs/CMSIS/Include/core_cm4.h **** 
 729:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 730:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 731:libs/CMSIS/Include/core_cm4.h **** 
 732:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 733:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 734:libs/CMSIS/Include/core_cm4.h **** 
 735:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register */
 736:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 737:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 738:libs/CMSIS/Include/core_cm4.h **** 
 739:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register */
 740:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 741:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 742:libs/CMSIS/Include/core_cm4.h **** 
 743:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 744:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 745:libs/CMSIS/Include/core_cm4.h **** 
 746:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 747:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 748:libs/CMSIS/Include/core_cm4.h **** 
 749:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register */
 750:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 751:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 752:libs/CMSIS/Include/core_cm4.h **** 
 753:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 754:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 755:libs/CMSIS/Include/core_cm4.h **** 
 756:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 757:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 758:libs/CMSIS/Include/core_cm4.h **** 
 759:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 760:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 761:libs/CMSIS/Include/core_cm4.h **** 
 762:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
 763:libs/CMSIS/Include/core_cm4.h **** #endif
 764:libs/CMSIS/Include/core_cm4.h **** 
 765:libs/CMSIS/Include/core_cm4.h **** 
 766:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
 767:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 768:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_FPU CMSIS FPU
 769:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Floating Point Unit (FPU)
 770:libs/CMSIS/Include/core_cm4.h ****   @{
 771:libs/CMSIS/Include/core_cm4.h ****  */
 772:libs/CMSIS/Include/core_cm4.h **** 
 773:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
 774:libs/CMSIS/Include/core_cm4.h ****  */
 775:libs/CMSIS/Include/core_cm4.h **** typedef struct
 776:libs/CMSIS/Include/core_cm4.h **** {
 777:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 778:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
 779:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
 780:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
 781:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
 782:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
 783:libs/CMSIS/Include/core_cm4.h **** } FPU_Type;
 784:libs/CMSIS/Include/core_cm4.h **** 
 785:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register */
 786:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
 787:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
 788:libs/CMSIS/Include/core_cm4.h **** 
 789:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
 790:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
 791:libs/CMSIS/Include/core_cm4.h **** 
 792:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
 793:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
 794:libs/CMSIS/Include/core_cm4.h **** 
 795:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
 796:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
 797:libs/CMSIS/Include/core_cm4.h **** 
 798:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
 799:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
 800:libs/CMSIS/Include/core_cm4.h **** 
 801:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
 802:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
 803:libs/CMSIS/Include/core_cm4.h **** 
 804:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
 805:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
 806:libs/CMSIS/Include/core_cm4.h **** 
 807:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
 808:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
 809:libs/CMSIS/Include/core_cm4.h **** 
 810:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
 811:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
 812:libs/CMSIS/Include/core_cm4.h **** 
 813:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register */
 814:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
 815:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
 816:libs/CMSIS/Include/core_cm4.h **** 
 817:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register */
 818:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
 819:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
 820:libs/CMSIS/Include/core_cm4.h **** 
 821:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
 822:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
 823:libs/CMSIS/Include/core_cm4.h **** 
 824:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
 825:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
 826:libs/CMSIS/Include/core_cm4.h **** 
 827:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
 828:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
 829:libs/CMSIS/Include/core_cm4.h **** 
 830:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 */
 831:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
 832:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
 833:libs/CMSIS/Include/core_cm4.h **** 
 834:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
 835:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
 836:libs/CMSIS/Include/core_cm4.h **** 
 837:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
 838:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
 839:libs/CMSIS/Include/core_cm4.h **** 
 840:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
 841:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
 842:libs/CMSIS/Include/core_cm4.h **** 
 843:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
 844:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
 845:libs/CMSIS/Include/core_cm4.h **** 
 846:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
 847:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
 848:libs/CMSIS/Include/core_cm4.h **** 
 849:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
 850:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
 851:libs/CMSIS/Include/core_cm4.h **** 
 852:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
 853:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
 854:libs/CMSIS/Include/core_cm4.h **** 
 855:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 */
 856:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
 857:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
 858:libs/CMSIS/Include/core_cm4.h **** 
 859:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
 860:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
 861:libs/CMSIS/Include/core_cm4.h **** 
 862:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
 863:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
 864:libs/CMSIS/Include/core_cm4.h **** 
 865:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
 866:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
 867:libs/CMSIS/Include/core_cm4.h **** 
 868:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
 869:libs/CMSIS/Include/core_cm4.h **** #endif
 870:libs/CMSIS/Include/core_cm4.h **** 
 871:libs/CMSIS/Include/core_cm4.h **** 
 872:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 873:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 874:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Debug Registers
 875:libs/CMSIS/Include/core_cm4.h ****   @{
 876:libs/CMSIS/Include/core_cm4.h ****  */
 877:libs/CMSIS/Include/core_cm4.h **** 
 878:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 879:libs/CMSIS/Include/core_cm4.h ****  */
 880:libs/CMSIS/Include/core_cm4.h **** typedef struct
 881:libs/CMSIS/Include/core_cm4.h **** {
 882:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 883:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 884:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 885:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 886:libs/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
 887:libs/CMSIS/Include/core_cm4.h **** 
 888:libs/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register */
 889:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 890:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 891:libs/CMSIS/Include/core_cm4.h **** 
 892:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 893:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 894:libs/CMSIS/Include/core_cm4.h **** 
 895:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 896:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 897:libs/CMSIS/Include/core_cm4.h **** 
 898:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 899:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 900:libs/CMSIS/Include/core_cm4.h **** 
 901:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 902:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 903:libs/CMSIS/Include/core_cm4.h **** 
 904:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 905:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 906:libs/CMSIS/Include/core_cm4.h **** 
 907:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 908:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 909:libs/CMSIS/Include/core_cm4.h **** 
 910:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 911:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 912:libs/CMSIS/Include/core_cm4.h **** 
 913:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 914:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 915:libs/CMSIS/Include/core_cm4.h **** 
 916:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 917:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 918:libs/CMSIS/Include/core_cm4.h **** 
 919:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 920:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 921:libs/CMSIS/Include/core_cm4.h **** 
 922:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 923:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 924:libs/CMSIS/Include/core_cm4.h **** 
 925:libs/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register */
 926:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 927:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 928:libs/CMSIS/Include/core_cm4.h **** 
 929:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 930:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 931:libs/CMSIS/Include/core_cm4.h **** 
 932:libs/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register */
 933:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 934:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 935:libs/CMSIS/Include/core_cm4.h **** 
 936:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 937:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 938:libs/CMSIS/Include/core_cm4.h **** 
 939:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 940:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 941:libs/CMSIS/Include/core_cm4.h **** 
 942:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 943:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 944:libs/CMSIS/Include/core_cm4.h **** 
 945:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 946:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 947:libs/CMSIS/Include/core_cm4.h **** 
 948:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 949:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 950:libs/CMSIS/Include/core_cm4.h **** 
 951:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 952:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 953:libs/CMSIS/Include/core_cm4.h **** 
 954:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 955:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 956:libs/CMSIS/Include/core_cm4.h **** 
 957:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 958:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 959:libs/CMSIS/Include/core_cm4.h **** 
 960:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 961:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 962:libs/CMSIS/Include/core_cm4.h **** 
 963:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 964:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 965:libs/CMSIS/Include/core_cm4.h **** 
 966:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 967:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 968:libs/CMSIS/Include/core_cm4.h **** 
 969:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 970:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 971:libs/CMSIS/Include/core_cm4.h **** 
 972:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
 973:libs/CMSIS/Include/core_cm4.h **** 
 974:libs/CMSIS/Include/core_cm4.h **** 
 975:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 976:libs/CMSIS/Include/core_cm4.h ****   @{
 977:libs/CMSIS/Include/core_cm4.h ****  */
 978:libs/CMSIS/Include/core_cm4.h **** 
 979:libs/CMSIS/Include/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
 980:libs/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 981:libs/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 982:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 983:libs/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 984:libs/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 985:libs/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 986:libs/CMSIS/Include/core_cm4.h **** 
 987:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 988:libs/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 989:libs/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 990:libs/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 991:libs/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 992:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 993:libs/CMSIS/Include/core_cm4.h **** 
 994:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 995:libs/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 996:libs/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 997:libs/CMSIS/Include/core_cm4.h **** #endif
 998:libs/CMSIS/Include/core_cm4.h **** 
 999:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
1000:libs/CMSIS/Include/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1001:libs/CMSIS/Include/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1002:libs/CMSIS/Include/core_cm4.h **** #endif
1003:libs/CMSIS/Include/core_cm4.h **** 
1004:libs/CMSIS/Include/core_cm4.h **** /*@} */
1005:libs/CMSIS/Include/core_cm4.h **** 
1006:libs/CMSIS/Include/core_cm4.h **** 
1007:libs/CMSIS/Include/core_cm4.h **** 
1008:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1009:libs/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1010:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1011:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
1012:libs/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1013:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1014:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1015:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1016:libs/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1017:libs/CMSIS/Include/core_cm4.h **** */
1018:libs/CMSIS/Include/core_cm4.h **** 
1019:libs/CMSIS/Include/core_cm4.h **** 
1020:libs/CMSIS/Include/core_cm4.h **** 
1021:libs/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1022:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1023:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
1024:libs/CMSIS/Include/core_cm4.h ****   @{
1025:libs/CMSIS/Include/core_cm4.h ****  */
1026:libs/CMSIS/Include/core_cm4.h **** 
1027:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Priority Grouping
1028:libs/CMSIS/Include/core_cm4.h **** 
1029:libs/CMSIS/Include/core_cm4.h ****   This function sets the priority grouping field using the required unlock sequence.
1030:libs/CMSIS/Include/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1031:libs/CMSIS/Include/core_cm4.h ****   Only values from 0..7 are used.
1032:libs/CMSIS/Include/core_cm4.h ****   In case of a conflict between priority grouping and available
1033:libs/CMSIS/Include/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1034:libs/CMSIS/Include/core_cm4.h **** 
1035:libs/CMSIS/Include/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field
1036:libs/CMSIS/Include/core_cm4.h ****  */
1037:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1038:libs/CMSIS/Include/core_cm4.h **** {
1039:libs/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1040:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1041:libs/CMSIS/Include/core_cm4.h **** 
1042:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1043:libs/CMSIS/Include/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1044:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                 |
1045:libs/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1046:libs/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1047:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1048:libs/CMSIS/Include/core_cm4.h **** }
1049:libs/CMSIS/Include/core_cm4.h **** 
1050:libs/CMSIS/Include/core_cm4.h **** 
1051:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Priority Grouping
1052:libs/CMSIS/Include/core_cm4.h **** 
1053:libs/CMSIS/Include/core_cm4.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
1054:libs/CMSIS/Include/core_cm4.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1055:libs/CMSIS/Include/core_cm4.h **** 
1056:libs/CMSIS/Include/core_cm4.h ****     \return                Priority grouping field
1057:libs/CMSIS/Include/core_cm4.h ****  */
1058:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1059:libs/CMSIS/Include/core_cm4.h **** {
1060:libs/CMSIS/Include/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1061:libs/CMSIS/Include/core_cm4.h **** }
1062:libs/CMSIS/Include/core_cm4.h **** 
1063:libs/CMSIS/Include/core_cm4.h **** 
1064:libs/CMSIS/Include/core_cm4.h **** /** \brief  Enable External Interrupt
1065:libs/CMSIS/Include/core_cm4.h **** 
1066:libs/CMSIS/Include/core_cm4.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
1067:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1068:libs/CMSIS/Include/core_cm4.h **** 
1069:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to enable
1070:libs/CMSIS/Include/core_cm4.h ****  */
1071:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1072:libs/CMSIS/Include/core_cm4.h **** {
1073:libs/CMSIS/Include/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1074:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
1075:libs/CMSIS/Include/core_cm4.h **** }
1076:libs/CMSIS/Include/core_cm4.h **** 
1077:libs/CMSIS/Include/core_cm4.h **** 
1078:libs/CMSIS/Include/core_cm4.h **** /** \brief  Disable External Interrupt
1079:libs/CMSIS/Include/core_cm4.h **** 
1080:libs/CMSIS/Include/core_cm4.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
1081:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1082:libs/CMSIS/Include/core_cm4.h **** 
1083:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to disable
1084:libs/CMSIS/Include/core_cm4.h ****  */
1085:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1086:libs/CMSIS/Include/core_cm4.h **** {
1087:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1088:libs/CMSIS/Include/core_cm4.h **** }
1089:libs/CMSIS/Include/core_cm4.h **** 
1090:libs/CMSIS/Include/core_cm4.h **** 
1091:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Pending Interrupt
1092:libs/CMSIS/Include/core_cm4.h **** 
1093:libs/CMSIS/Include/core_cm4.h ****     This function reads the pending register in the NVIC and returns the pending bit
1094:libs/CMSIS/Include/core_cm4.h ****     for the specified interrupt.
1095:libs/CMSIS/Include/core_cm4.h **** 
1096:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get pending
1097:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not pending
1098:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is pending
1099:libs/CMSIS/Include/core_cm4.h ****  */
1100:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1101:libs/CMSIS/Include/core_cm4.h **** {
1102:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1103:libs/CMSIS/Include/core_cm4.h **** }
1104:libs/CMSIS/Include/core_cm4.h **** 
1105:libs/CMSIS/Include/core_cm4.h **** 
1106:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Pending Interrupt
1107:libs/CMSIS/Include/core_cm4.h **** 
1108:libs/CMSIS/Include/core_cm4.h ****     This function sets the pending bit for the specified interrupt.
1109:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1110:libs/CMSIS/Include/core_cm4.h **** 
1111:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set pending
1112:libs/CMSIS/Include/core_cm4.h ****  */
1113:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1114:libs/CMSIS/Include/core_cm4.h **** {
1115:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1116:libs/CMSIS/Include/core_cm4.h **** }
1117:libs/CMSIS/Include/core_cm4.h **** 
1118:libs/CMSIS/Include/core_cm4.h **** 
1119:libs/CMSIS/Include/core_cm4.h **** /** \brief  Clear Pending Interrupt
1120:libs/CMSIS/Include/core_cm4.h **** 
1121:libs/CMSIS/Include/core_cm4.h ****     This function clears the pending bit for the specified interrupt.
1122:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1123:libs/CMSIS/Include/core_cm4.h **** 
1124:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
1125:libs/CMSIS/Include/core_cm4.h ****  */
1126:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1127:libs/CMSIS/Include/core_cm4.h **** {
1128:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1129:libs/CMSIS/Include/core_cm4.h **** }
1130:libs/CMSIS/Include/core_cm4.h **** 
1131:libs/CMSIS/Include/core_cm4.h **** 
1132:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Active Interrupt
1133:libs/CMSIS/Include/core_cm4.h **** 
1134:libs/CMSIS/Include/core_cm4.h ****     This function reads the active register in NVIC and returns the active bit.
1135:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get active
1136:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not active
1137:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is active
1138:libs/CMSIS/Include/core_cm4.h ****  */
1139:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1140:libs/CMSIS/Include/core_cm4.h **** {
1141:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1142:libs/CMSIS/Include/core_cm4.h **** }
1143:libs/CMSIS/Include/core_cm4.h **** 
1144:libs/CMSIS/Include/core_cm4.h **** 
1145:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Interrupt Priority
1146:libs/CMSIS/Include/core_cm4.h **** 
1147:libs/CMSIS/Include/core_cm4.h ****     This function sets the priority for the specified interrupt. The interrupt
1148:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1149:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1150:libs/CMSIS/Include/core_cm4.h **** 
1151:libs/CMSIS/Include/core_cm4.h ****     Note: The priority cannot be set for every core interrupt.
1152:libs/CMSIS/Include/core_cm4.h **** 
1153:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1154:libs/CMSIS/Include/core_cm4.h ****     \param [in]  priority  Priority to set
1155:libs/CMSIS/Include/core_cm4.h ****  */
1156:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1157:libs/CMSIS/Include/core_cm4.h **** {
1158:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1159:libs/CMSIS/Include/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1160:libs/CMSIS/Include/core_cm4.h ****   else {
1161:libs/CMSIS/Include/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1162:libs/CMSIS/Include/core_cm4.h **** }
1163:libs/CMSIS/Include/core_cm4.h **** 
1164:libs/CMSIS/Include/core_cm4.h **** 
1165:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Interrupt Priority
1166:libs/CMSIS/Include/core_cm4.h **** 
1167:libs/CMSIS/Include/core_cm4.h ****     This function reads the priority for the specified interrupt. The interrupt
1168:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1169:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1170:libs/CMSIS/Include/core_cm4.h **** 
1171:libs/CMSIS/Include/core_cm4.h ****     The returned priority value is automatically aligned to the implemented
1172:libs/CMSIS/Include/core_cm4.h ****     priority bits of the microcontroller.
1173:libs/CMSIS/Include/core_cm4.h **** 
1174:libs/CMSIS/Include/core_cm4.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1175:libs/CMSIS/Include/core_cm4.h ****     \return             Interrupt Priority
1176:libs/CMSIS/Include/core_cm4.h ****  */
1177:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1178:libs/CMSIS/Include/core_cm4.h **** {
1179:libs/CMSIS/Include/core_cm4.h **** 
1180:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1181:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1182:libs/CMSIS/Include/core_cm4.h ****   else {
1183:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1184:libs/CMSIS/Include/core_cm4.h **** }
1185:libs/CMSIS/Include/core_cm4.h **** 
1186:libs/CMSIS/Include/core_cm4.h **** 
1187:libs/CMSIS/Include/core_cm4.h **** /** \brief  Encode Priority
1188:libs/CMSIS/Include/core_cm4.h **** 
1189:libs/CMSIS/Include/core_cm4.h ****     This function encodes the priority for an interrupt with the given priority group,
1190:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1191:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1192:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1193:libs/CMSIS/Include/core_cm4.h **** 
1194:libs/CMSIS/Include/core_cm4.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1195:libs/CMSIS/Include/core_cm4.h **** 
1196:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1197:libs/CMSIS/Include/core_cm4.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1198:libs/CMSIS/Include/core_cm4.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1199:libs/CMSIS/Include/core_cm4.h ****     \return                        Encoded priority for the interrupt
1200:libs/CMSIS/Include/core_cm4.h ****  */
1201:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1202:libs/CMSIS/Include/core_cm4.h **** {
1203:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1204:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1205:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1206:libs/CMSIS/Include/core_cm4.h **** 
1207:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1208:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1209:libs/CMSIS/Include/core_cm4.h **** 
1210:libs/CMSIS/Include/core_cm4.h ****   return (
1211:libs/CMSIS/Include/core_cm4.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1212:libs/CMSIS/Include/core_cm4.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1213:libs/CMSIS/Include/core_cm4.h ****          );
1214:libs/CMSIS/Include/core_cm4.h **** }
1215:libs/CMSIS/Include/core_cm4.h **** 
1216:libs/CMSIS/Include/core_cm4.h **** 
1217:libs/CMSIS/Include/core_cm4.h **** /** \brief  Decode Priority
1218:libs/CMSIS/Include/core_cm4.h **** 
1219:libs/CMSIS/Include/core_cm4.h ****     This function decodes an interrupt priority value with the given priority group to
1220:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1221:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1222:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1223:libs/CMSIS/Include/core_cm4.h **** 
1224:libs/CMSIS/Include/core_cm4.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1225:libs/CMSIS/Include/core_cm4.h **** 
1226:libs/CMSIS/Include/core_cm4.h ****     \param [in]         Priority   Priority value
1227:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1228:libs/CMSIS/Include/core_cm4.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1229:libs/CMSIS/Include/core_cm4.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1230:libs/CMSIS/Include/core_cm4.h ****  */
1231:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1232:libs/CMSIS/Include/core_cm4.h **** {
1233:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1234:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1235:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1236:libs/CMSIS/Include/core_cm4.h **** 
1237:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1238:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1239:libs/CMSIS/Include/core_cm4.h **** 
1240:libs/CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1241:libs/CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1242:libs/CMSIS/Include/core_cm4.h **** }
1243:libs/CMSIS/Include/core_cm4.h **** 
1244:libs/CMSIS/Include/core_cm4.h **** 
1245:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Reset
1246:libs/CMSIS/Include/core_cm4.h **** 
1247:libs/CMSIS/Include/core_cm4.h ****     This function initiate a system reset request to reset the MCU.
1248:libs/CMSIS/Include/core_cm4.h ****  */
1249:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SystemReset(void)
1250:libs/CMSIS/Include/core_cm4.h **** {
1251:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1252:libs/CMSIS/Include/core_cm4.h ****                                                                   buffered write are completed befo
1253:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1254:libs/CMSIS/Include/core_cm4.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1255:libs/CMSIS/Include/core_cm4.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1256:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure completion of memory acces
1257:libs/CMSIS/Include/core_cm4.h ****   while(1);                                                    /* wait until reset */
1258:libs/CMSIS/Include/core_cm4.h **** }
1259:libs/CMSIS/Include/core_cm4.h **** 
1260:libs/CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1261:libs/CMSIS/Include/core_cm4.h **** 
1262:libs/CMSIS/Include/core_cm4.h **** 
1263:libs/CMSIS/Include/core_cm4.h **** 
1264:libs/CMSIS/Include/core_cm4.h **** /* ##################################    SysTick function  ########################################
1265:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1266:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1267:libs/CMSIS/Include/core_cm4.h ****   @{
1268:libs/CMSIS/Include/core_cm4.h ****  */
1269:libs/CMSIS/Include/core_cm4.h **** 
1270:libs/CMSIS/Include/core_cm4.h **** #if (__Vendor_SysTickConfig == 0)
1271:libs/CMSIS/Include/core_cm4.h **** 
1272:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Tick Configuration
1273:libs/CMSIS/Include/core_cm4.h **** 
1274:libs/CMSIS/Include/core_cm4.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1275:libs/CMSIS/Include/core_cm4.h ****     Counter is in free running mode to generate periodical interrupts.
1276:libs/CMSIS/Include/core_cm4.h **** 
1277:libs/CMSIS/Include/core_cm4.h ****     \param [in]  ticks  Number of ticks between two interrupts
1278:libs/CMSIS/Include/core_cm4.h ****     \return          0  Function succeeded
1279:libs/CMSIS/Include/core_cm4.h ****     \return          1  Function failed
1280:libs/CMSIS/Include/core_cm4.h ****  */
1281:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1282:libs/CMSIS/Include/core_cm4.h **** {
1283:libs/CMSIS/Include/core_cm4.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
1284:libs/CMSIS/Include/core_cm4.h **** 
1285:libs/CMSIS/Include/core_cm4.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 128              		.loc 2 1285 0
 129 0016 9209     		lsrs	r2, r2, #6
 130              	.LVL10:
 131 0018 013A     		subs	r2, r2, #1
 132              	.LVL11:
 133 001a 4EF21003 		movw	r3, #57360
 134 001e CEF20003 		movt	r3, 57344
 135 0022 5A60     		str	r2, [r3, #4]
 136              	.LVL12:
 137              	.LBB10:
 138              	.LBB11:
1159:libs/CMSIS/Include/core_cm4.h ****   else {
 139              		.loc 2 1159 0
 140 0024 4FF46D42 		mov	r2, #60672
 141              	.LVL13:
 142 0028 CEF20002 		movt	r2, 57344
 143 002c F021     		movs	r1, #240
 144 002e 82F82310 		strb	r1, [r2, #35]
 145              	.LVL14:
 146              	.LBE11:
 147              	.LBE10:
1286:libs/CMSIS/Include/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
1287:libs/CMSIS/Include/core_cm4.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 148              		.loc 2 1287 0
 149 0032 0022     		movs	r2, #0
 150 0034 9A60     		str	r2, [r3, #8]
1288:libs/CMSIS/Include/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 151              		.loc 2 1288 0
 152 0036 0722     		movs	r2, #7
 153 0038 1A60     		str	r2, [r3]
 154 003a 7047     		bx	lr
 155              	.LBE9:
 156              	.LBE8:
 157              		.cfi_endproc
 158              	.LFE111:
 160              		.section	.text.idle_blinky,"ax",%progbits
 161              		.align	2
 162              		.global	idle_blinky
 163              		.thumb
 164              		.thumb_func
 166              	idle_blinky:
 167              	.LFB112:
  59:src/main.c    **** 
 168              		.loc 1 59 0
 169              		.cfi_startproc
 170              		@ Volatile: function does not return.
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              	.LVL15:
 174 0000 80B5     		push	{r7, lr}
 175              	.LCFI2:
 176              		.cfi_def_cfa_offset 8
 177              		.cfi_offset 7, -8
 178              		.cfi_offset 14, -4
  61:src/main.c    ****     while(1) {
 179              		.loc 1 61 0
 180 0002 4FF44060 		mov	r0, #3072
 181              	.LVL16:
 182 0006 C4F20200 		movt	r0, 16386
 183 000a 1021     		movs	r1, #16
 184 000c FFF7FEFF 		bl	GPIO_SetBits
 185              	.LVL17:
  63:src/main.c    ****         delay_ms(500);
 186              		.loc 1 63 0
 187 0010 4FF44064 		mov	r4, #3072
 188 0014 C4F20204 		movt	r4, 16386
 189 0018 4FF48059 		mov	r9, #4096
  64:src/main.c    **** 
 190              		.loc 1 64 0
 191 001c 4FF4FA75 		mov	r5, #500
  66:src/main.c    ****         delay_ms(500);
 192              		.loc 1 66 0
 193 0020 4FF40058 		mov	r8, #8192
  69:src/main.c    ****         delay_ms(500);
 194              		.loc 1 69 0
 195 0024 4FF48047 		mov	r7, #16384
  72:src/main.c    ****         delay_ms(500);
 196              		.loc 1 72 0
 197 0028 4FF40046 		mov	r6, #32768
 198              	.L6:
  63:src/main.c    ****         delay_ms(500);
 199              		.loc 1 63 0 discriminator 1
 200 002c 2046     		mov	r0, r4
 201 002e 4946     		mov	r1, r9
 202 0030 FFF7FEFF 		bl	GPIO_SetBits
 203              	.LVL18:
  64:src/main.c    **** 
 204              		.loc 1 64 0 discriminator 1
 205 0034 2846     		mov	r0, r5
 206 0036 FFF7FEFF 		bl	delay_ms
 207              	.LVL19:
  66:src/main.c    ****         delay_ms(500);
 208              		.loc 1 66 0 discriminator 1
 209 003a 2046     		mov	r0, r4
 210 003c 4146     		mov	r1, r8
 211 003e FFF7FEFF 		bl	GPIO_SetBits
 212              	.LVL20:
  67:src/main.c    **** 
 213              		.loc 1 67 0 discriminator 1
 214 0042 2846     		mov	r0, r5
 215 0044 FFF7FEFF 		bl	delay_ms
 216              	.LVL21:
  69:src/main.c    ****         delay_ms(500);
 217              		.loc 1 69 0 discriminator 1
 218 0048 2046     		mov	r0, r4
 219 004a 3946     		mov	r1, r7
 220 004c FFF7FEFF 		bl	GPIO_SetBits
 221              	.LVL22:
  70:src/main.c    **** 
 222              		.loc 1 70 0 discriminator 1
 223 0050 2846     		mov	r0, r5
 224 0052 FFF7FEFF 		bl	delay_ms
 225              	.LVL23:
  72:src/main.c    ****         delay_ms(500);
 226              		.loc 1 72 0 discriminator 1
 227 0056 2046     		mov	r0, r4
 228 0058 3146     		mov	r1, r6
 229 005a FFF7FEFF 		bl	GPIO_SetBits
 230              	.LVL24:
  73:src/main.c    **** 
 231              		.loc 1 73 0 discriminator 1
 232 005e 2846     		mov	r0, r5
 233 0060 FFF7FEFF 		bl	delay_ms
 234              	.LVL25:
  75:src/main.c    ****         delay_ms(500);
 235              		.loc 1 75 0 discriminator 1
 236 0064 2046     		mov	r0, r4
 237 0066 4FF47041 		mov	r1, #61440
 238 006a FFF7FEFF 		bl	GPIO_ResetBits
 239              	.LVL26:
  76:src/main.c    **** 
 240              		.loc 1 76 0 discriminator 1
 241 006e 2846     		mov	r0, r5
 242 0070 FFF7FEFF 		bl	delay_ms
 243              	.LVL27:
 244 0074 DAE7     		b	.L6
 245              		.cfi_endproc
 246              	.LFE112:
 248 0076 00BF     		.section	.text.USART1_IRQHandler,"ax",%progbits
 249              		.align	2
 250              		.global	USART1_IRQHandler
 251              		.thumb
 252              		.thumb_func
 254              	USART1_IRQHandler:
 255              	.LFB113:
  84:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
 256              		.loc 1 84 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260 0000 70B5     		push	{r4, r5, r6, lr}
 261              	.LCFI3:
 262              		.cfi_def_cfa_offset 16
 263              		.cfi_offset 4, -16
 264              		.cfi_offset 5, -12
 265              		.cfi_offset 6, -8
 266              		.cfi_offset 14, -4
 267 0002 84B0     		sub	sp, sp, #16
 268              	.LCFI4:
 269              		.cfi_def_cfa_offset 32
  86:src/main.c    ****         static unsigned int count=0;
 270              		.loc 1 86 0
 271 0004 4FF48050 		mov	r0, #4096
 272 0008 C4F20100 		movt	r0, 16385
 273 000c 40F22551 		movw	r1, #1317
 274 0010 FFF7FEFF 		bl	USART_GetITStatus
 275              	.LVL28:
 276 0014 0028     		cmp	r0, #0
 277 0016 00F09780 		beq	.L7
 278              	.LBB12:
  91:src/main.c    **** 
 279              		.loc 1 91 0
 280 001a 4FF48053 		mov	r3, #4096
 281 001e C4F20103 		movt	r3, 16385
 282 0022 9988     		ldrh	r1, [r3, #4]
 283 0024 C9B2     		uxtb	r1, r1
 284              	.LVL29:
  94:src/main.c    ****             USART1_rtos.write_pos--;
 285              		.loc 1 94 0
 286 0026 7F29     		cmp	r1, #127
 287 0028 18BF     		it	ne
 288 002a 0829     		cmpne	r1, #8
 289 002c 1AD1     		bne	.L9
  95:src/main.c    ****             USART1_rtos.buffer[USART1_rtos.write_pos] = '\r';
 290              		.loc 1 95 0
 291 002e 40F20003 		movw	r3, #:lower16:USART1_rtos
 292 0032 C0F20003 		movt	r3, #:upper16:USART1_rtos
 293 0036 1A68     		ldr	r2, [r3]
 294 0038 013A     		subs	r2, r2, #1
 295 003a 1A60     		str	r2, [r3]
  96:src/main.c    ****             USART_put(USART1, '\b');
 296              		.loc 1 96 0
 297 003c 1344     		add	r3, r3, r2
 298 003e 0D22     		movs	r2, #13
 299 0040 1A77     		strb	r2, [r3, #28]
  97:src/main.c    ****             USART_put(USART1, ' ');
 300              		.loc 1 97 0
 301 0042 4FF48054 		mov	r4, #4096
 302 0046 C4F20104 		movt	r4, 16385
 303 004a 2046     		mov	r0, r4
 304 004c 0821     		movs	r1, #8
 305              	.LVL30:
 306 004e FFF7FEFF 		bl	USART_put
 307              	.LVL31:
  98:src/main.c    ****             USART_put(USART1, '\b');
 308              		.loc 1 98 0
 309 0052 2046     		mov	r0, r4
 310 0054 2021     		movs	r1, #32
 311 0056 FFF7FEFF 		bl	USART_put
 312              	.LVL32:
  99:src/main.c    ****             return;
 313              		.loc 1 99 0
 314 005a 2046     		mov	r0, r4
 315 005c 0821     		movs	r1, #8
 316 005e FFF7FEFF 		bl	USART_put
 317              	.LVL33:
 100:src/main.c    **** 
 318              		.loc 1 100 0
 319 0062 71E0     		b	.L7
 320              	.LVL34:
 321              	.L9:
 106:src/main.c    ****             count++;
 322              		.loc 1 106 0
 323 0064 0D29     		cmp	r1, #13
 324 0066 26D0     		beq	.L10
 107:src/main.c    ****         if (USART1_rtos.write_pos == USART_BUFFER_LEN-1) USART1_rtos.write_pos=0;
 325              		.loc 1 107 0
 326 0068 40F20003 		movw	r3, #:lower16:.LANCHOR1
 327 006c C0F20003 		movt	r3, #:upper16:.LANCHOR1
 328 0070 1A68     		ldr	r2, [r3]
 329 0072 0132     		adds	r2, r2, #1
 330 0074 1A60     		str	r2, [r3]
 108:src/main.c    **** 
 331              		.loc 1 108 0
 332 0076 40F20003 		movw	r3, #:lower16:USART1_rtos
 333 007a C0F20003 		movt	r3, #:upper16:USART1_rtos
 334 007e 1A68     		ldr	r2, [r3]
 335 0080 40F22B13 		movw	r3, #299
 336 0084 9A42     		cmp	r2, r3
 337 0086 01BF     		itttt	eq
 338 0088 40F20003 		movweq	r3, #:lower16:USART1_rtos
 339 008c C0F20003 		movteq	r3, #:upper16:USART1_rtos
 340 0090 0022     		moveq	r2, #0
 341 0092 1A60     		streq	r2, [r3]
 110:src/main.c    ****             USART_put(USART1, t);
 342              		.loc 1 110 0
 343 0094 40F20004 		movw	r4, #:lower16:USART1_rtos
 344 0098 C0F20004 		movt	r4, #:upper16:USART1_rtos
 345 009c 2368     		ldr	r3, [r4]
 346 009e 2344     		add	r3, r3, r4
 347 00a0 1977     		strb	r1, [r3, #28]
 111:src/main.c    ****             USART1_rtos.write_pos++;
 348              		.loc 1 111 0
 349 00a2 4FF48050 		mov	r0, #4096
 350 00a6 C4F20100 		movt	r0, 16385
 351 00aa FFF7FEFF 		bl	USART_put
 352              	.LVL35:
 112:src/main.c    **** 
 353              		.loc 1 112 0
 354 00ae 2368     		ldr	r3, [r4]
 355 00b0 0133     		adds	r3, r3, #1
 356 00b2 2360     		str	r3, [r4]
 357 00b4 48E0     		b	.L7
 358              	.LVL36:
 359              	.L10:
 117:src/main.c    ****                 
 360              		.loc 1 117 0
 361 00b6 40F20003 		movw	r3, #:lower16:.LANCHOR1
 362 00ba C0F20003 		movt	r3, #:upper16:.LANCHOR1
 363 00be 1B68     		ldr	r3, [r3]
 364 00c0 002B     		cmp	r3, #0
 365 00c2 37D0     		beq	.L12
 366              	.LBB13:
 119:src/main.c    **** 
 367              		.loc 1 119 0
 368 00c4 40F20004 		movw	r4, #:lower16:USART1_rtos
 369 00c8 C0F20004 		movt	r4, #:upper16:USART1_rtos
 370 00cc 2368     		ldr	r3, [r4]
 371 00ce 2344     		add	r3, r3, r4
 372 00d0 0D22     		movs	r2, #13
 373 00d2 1A77     		strb	r2, [r3, #28]
 121:src/main.c    **** 
 374              		.loc 1 121 0
 375 00d4 4FF48050 		mov	r0, #4096
 376 00d8 C4F20100 		movt	r0, 16385
 377 00dc 40F20001 		movw	r1, #:lower16:.LC0
 378              	.LVL37:
 379 00e0 C0F20001 		movt	r1, #:upper16:.LC0
 380 00e4 FFF7FEFF 		bl	USART_puts
 381              	.LVL38:
 126:src/main.c    **** 
 382              		.loc 1 126 0
 383 00e8 2268     		ldr	r2, [r4]
 384 00ea 40F20006 		movw	r6, #:lower16:.LANCHOR1
 385 00ee C0F20006 		movt	r6, #:upper16:.LANCHOR1
 386 00f2 3368     		ldr	r3, [r6]
 387 00f4 D31A     		subs	r3, r2, r3
 388 00f6 2344     		add	r3, r3, r4
 389              	.LVL39:
 129:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 390              		.loc 1 129 0
 391 00f8 0922     		movs	r2, #9
 392 00fa 0092     		str	r2, [sp]
 393 00fc 0025     		movs	r5, #0
 394 00fe 0195     		str	r5, [sp, #4]
 395 0100 0295     		str	r5, [sp, #8]
 396 0102 0395     		str	r5, [sp, #12]
 397 0104 40F20000 		movw	r0, #:lower16:vUSART_command_handler
 398 0108 C0F20000 		movt	r0, #:upper16:vUSART_command_handler
 399 010c 40F20001 		movw	r1, #:lower16:.LC1
 400 0110 C0F20001 		movt	r1, #:upper16:.LC1
 401 0114 4FF4EA72 		mov	r2, #468
 402 0118 1C33     		adds	r3, r3, #28
 403              	.LVL40:
 404 011a FFF7FEFF 		bl	xTaskGenericCreate
 405              	.LVL41:
 133:src/main.c    **** 
 406              		.loc 1 133 0
 407 011e A069     		ldr	r0, [r4, #24]
 408 0120 2946     		mov	r1, r5
 409 0122 2A46     		mov	r2, r5
 410 0124 2B46     		mov	r3, r5
 411 0126 FFF7FEFF 		bl	xQueueGenericSend
 412              	.LVL42:
 135:src/main.c    ****                 USART1_rtos.write_pos++;
 413              		.loc 1 135 0
 414 012a 3560     		str	r5, [r6]
 136:src/main.c    **** 
 415              		.loc 1 136 0
 416 012c 2368     		ldr	r3, [r4]
 417 012e 0133     		adds	r3, r3, #1
 418 0130 2360     		str	r3, [r4]
 419              	.LBE13:
 420 0132 09E0     		b	.L7
 421              	.LVL43:
 422              	.L12:
 139:src/main.c    **** 		}
 423              		.loc 1 139 0
 424 0134 4FF48050 		mov	r0, #4096
 425 0138 C4F20100 		movt	r0, 16385
 426 013c 40F20001 		movw	r1, #:lower16:.LC0
 427              	.LVL44:
 428 0140 C0F20001 		movt	r1, #:upper16:.LC0
 429 0144 FFF7FEFF 		bl	USART_puts
 430              	.LVL45:
 431              	.L7:
 432              	.LBE12:
 142:src/main.c    **** 
 433              		.loc 1 142 0
 434 0148 04B0     		add	sp, sp, #16
 435              		@ sp needed
 436 014a 70BD     		pop	{r4, r5, r6, pc}
 437              		.cfi_endproc
 438              	.LFE113:
 440              		.section	.text.USART1_Init,"ax",%progbits
 441              		.align	2
 442              		.global	USART1_Init
 443              		.thumb
 444              		.thumb_func
 446              	USART1_Init:
 447              	.LFB114:
 202:src/main.c    **** 
 448              		.loc 1 202 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 32
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452 0000 30B5     		push	{r4, r5, lr}
 453              	.LCFI5:
 454              		.cfi_def_cfa_offset 12
 455              		.cfi_offset 4, -12
 456              		.cfi_offset 5, -8
 457              		.cfi_offset 14, -4
 458 0002 89B0     		sub	sp, sp, #36
 459              	.LCFI6:
 460              		.cfi_def_cfa_offset 48
 204:src/main.c    **** 
 461              		.loc 1 204 0
 462 0004 0220     		movs	r0, #2
 463 0006 0121     		movs	r1, #1
 464 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 465              	.LVL46:
 206:src/main.c    **** 
 466              		.loc 1 206 0
 467 000c 1020     		movs	r0, #16
 468 000e 0121     		movs	r1, #1
 469 0010 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 470              	.LVL47:
 217:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 471              		.loc 1 217 0
 472 0014 C023     		movs	r3, #192
 473 0016 0693     		str	r3, [sp, #24]
 218:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 474              		.loc 1 218 0
 475 0018 0223     		movs	r3, #2
 476 001a 8DF81C30 		strb	r3, [sp, #28]
 219:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 477              		.loc 1 219 0
 478 001e 0024     		movs	r4, #0
 479 0020 8DF81E40 		strb	r4, [sp, #30]
 220:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 480              		.loc 1 220 0
 481 0024 8DF81F40 		strb	r4, [sp, #31]
 221:src/main.c    **** 	GPIO_Init(GPIOB, &GPIO_InitStructure);
 482              		.loc 1 221 0
 483 0028 8DF81D30 		strb	r3, [sp, #29]
 222:src/main.c    **** 
 484              		.loc 1 222 0
 485 002c 4FF48065 		mov	r5, #1024
 486 0030 C4F20205 		movt	r5, 16386
 487 0034 2846     		mov	r0, r5
 488 0036 06A9     		add	r1, sp, #24
 489 0038 FFF7FEFF 		bl	GPIO_Init
 490              	.LVL48:
 226:src/main.c    **** 	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
 491              		.loc 1 226 0
 492 003c 2846     		mov	r0, r5
 493 003e 0621     		movs	r1, #6
 494 0040 0722     		movs	r2, #7
 495 0042 FFF7FEFF 		bl	GPIO_PinAFConfig
 496              	.LVL49:
 227:src/main.c    **** 
 497              		.loc 1 227 0
 498 0046 2846     		mov	r0, r5
 499 0048 0721     		movs	r1, #7
 500 004a 0A46     		mov	r2, r1
 501 004c FFF7FEFF 		bl	GPIO_PinAFConfig
 502              	.LVL50:
 231:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 503              		.loc 1 231 0
 504 0050 4FF41643 		mov	r3, #38400
 505 0054 0293     		str	r3, [sp, #8]
 232:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 506              		.loc 1 232 0
 507 0056 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 233:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 508              		.loc 1 233 0
 509 005a ADF80E40 		strh	r4, [sp, #14]	@ movhi
 234:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 510              		.loc 1 234 0
 511 005e ADF81040 		strh	r4, [sp, #16]	@ movhi
 235:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 512              		.loc 1 235 0
 513 0062 ADF81440 		strh	r4, [sp, #20]	@ movhi
 236:src/main.c    **** 
 514              		.loc 1 236 0
 515 0066 0C23     		movs	r3, #12
 516 0068 ADF81230 		strh	r3, [sp, #18]	@ movhi
 239:src/main.c    **** 
 517              		.loc 1 239 0
 518 006c 4FF48055 		mov	r5, #4096
 519 0070 C4F20105 		movt	r5, 16385
 520 0074 2846     		mov	r0, r5
 521 0076 02A9     		add	r1, sp, #8
 522 0078 FFF7FEFF 		bl	USART_Init
 523              	.LVL51:
 242:src/main.c    **** 
 524              		.loc 1 242 0
 525 007c 2846     		mov	r0, r5
 526 007e 40F22551 		movw	r1, #1317
 527 0082 0122     		movs	r2, #1
 528 0084 FFF7FEFF 		bl	USART_ITConfig
 529              	.LVL52:
 244:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 530              		.loc 1 244 0
 531 0088 2523     		movs	r3, #37
 532 008a 8DF80430 		strb	r3, [sp, #4]
 245:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 533              		.loc 1 245 0
 534 008e 8DF80540 		strb	r4, [sp, #5]
 246:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 535              		.loc 1 246 0
 536 0092 8DF80640 		strb	r4, [sp, #6]
 247:src/main.c    **** 
 537              		.loc 1 247 0
 538 0096 0124     		movs	r4, #1
 539 0098 8DF80740 		strb	r4, [sp, #7]
 249:src/main.c    **** 
 540              		.loc 1 249 0
 541 009c 01A8     		add	r0, sp, #4
 542 009e FFF7FEFF 		bl	NVIC_Init
 543              	.LVL53:
 251:src/main.c    **** 
 544              		.loc 1 251 0
 545 00a2 2846     		mov	r0, r5
 546 00a4 2146     		mov	r1, r4
 547 00a6 FFF7FEFF 		bl	USART_Cmd
 548              	.LVL54:
 254:src/main.c    **** void initx(void){
 549              		.loc 1 254 0
 550 00aa 09B0     		add	sp, sp, #36
 551              		@ sp needed
 552 00ac 30BD     		pop	{r4, r5, pc}
 553              		.cfi_endproc
 554              	.LFE114:
 556 00ae 00BF     		.section	.text.initx,"ax",%progbits
 557              		.align	2
 558              		.global	initx
 559              		.thumb
 560              		.thumb_func
 562              	initx:
 563              	.LFB115:
 255:src/main.c    **** 	//Enable GPIO Clocks For USART2
 564              		.loc 1 255 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 32
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 569              	.LCFI7:
 570              		.cfi_def_cfa_offset 20
 571              		.cfi_offset 4, -20
 572              		.cfi_offset 5, -16
 573              		.cfi_offset 6, -12
 574              		.cfi_offset 7, -8
 575              		.cfi_offset 14, -4
 576 0002 89B0     		sub	sp, sp, #36
 577              	.LCFI8:
 578              		.cfi_def_cfa_offset 56
 257:src/main.c    **** 
 579              		.loc 1 257 0
 580 0004 0120     		movs	r0, #1
 581 0006 0146     		mov	r1, r0
 582 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 583              	.LVL55:
 260:src/main.c    **** 
 584              		.loc 1 260 0
 585 000c 4FF40030 		mov	r0, #131072
 586 0010 0121     		movs	r1, #1
 587 0012 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 588              	.LVL56:
 271:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 589              		.loc 1 271 0
 590 0016 0C27     		movs	r7, #12
 591 0018 0697     		str	r7, [sp, #24]
 272:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 592              		.loc 1 272 0
 593 001a 0226     		movs	r6, #2
 594 001c 8DF81C60 		strb	r6, [sp, #28]
 273:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 595              		.loc 1 273 0
 596 0020 0024     		movs	r4, #0
 597 0022 8DF81E40 		strb	r4, [sp, #30]
 274:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 598              		.loc 1 274 0
 599 0026 8DF81F40 		strb	r4, [sp, #31]
 275:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 600              		.loc 1 275 0
 601 002a 8DF81D60 		strb	r6, [sp, #29]
 276:src/main.c    **** 
 602              		.loc 1 276 0
 603 002e 2546     		mov	r5, r4
 604 0030 C4F20205 		movt	r5, 16386
 605 0034 2846     		mov	r0, r5
 606 0036 06A9     		add	r1, sp, #24
 607 0038 FFF7FEFF 		bl	GPIO_Init
 608              	.LVL57:
 280:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 609              		.loc 1 280 0
 610 003c 2846     		mov	r0, r5
 611 003e 3146     		mov	r1, r6
 612 0040 0722     		movs	r2, #7
 613 0042 FFF7FEFF 		bl	GPIO_PinAFConfig
 614              	.LVL58:
 281:src/main.c    **** 
 615              		.loc 1 281 0
 616 0046 2846     		mov	r0, r5
 617 0048 0321     		movs	r1, #3
 618 004a 0722     		movs	r2, #7
 619 004c FFF7FEFF 		bl	GPIO_PinAFConfig
 620              	.LVL59:
 284:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 621              		.loc 1 284 0
 622 0050 0820     		movs	r0, #8
 623 0052 0121     		movs	r1, #1
 624 0054 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 625              	.LVL60:
 285:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 626              		.loc 1 285 0
 627 0058 4FF47043 		mov	r3, #61440
 628 005c 0693     		str	r3, [sp, #24]
 286:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 629              		.loc 1 286 0
 630 005e 0125     		movs	r5, #1
 631 0060 8DF81C50 		strb	r5, [sp, #28]
 287:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 632              		.loc 1 287 0
 633 0064 8DF81E40 		strb	r4, [sp, #30]
 288:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 634              		.loc 1 288 0
 635 0068 0323     		movs	r3, #3
 636 006a 8DF81D30 		strb	r3, [sp, #29]
 289:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 637              		.loc 1 289 0
 638 006e 8DF81F40 		strb	r4, [sp, #31]
 290:src/main.c    **** 
 639              		.loc 1 290 0
 640 0072 4FF44060 		mov	r0, #3072
 641 0076 C4F20200 		movt	r0, 16386
 642 007a 06A9     		add	r1, sp, #24
 643 007c FFF7FEFF 		bl	GPIO_Init
 644              	.LVL61:
 293:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 645              		.loc 1 293 0
 646 0080 4FF41643 		mov	r3, #38400
 647 0084 0293     		str	r3, [sp, #8]
 294:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 648              		.loc 1 294 0
 649 0086 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 295:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 650              		.loc 1 295 0
 651 008a ADF80E40 		strh	r4, [sp, #14]	@ movhi
 296:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 652              		.loc 1 296 0
 653 008e ADF81040 		strh	r4, [sp, #16]	@ movhi
 297:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 654              		.loc 1 297 0
 655 0092 ADF81440 		strh	r4, [sp, #20]	@ movhi
 298:src/main.c    **** 
 656              		.loc 1 298 0
 657 0096 ADF81270 		strh	r7, [sp, #18]	@ movhi
 301:src/main.c    **** 
 658              		.loc 1 301 0
 659 009a 4FF48846 		mov	r6, #17408
 660 009e C4F20006 		movt	r6, 16384
 661 00a2 3046     		mov	r0, r6
 662 00a4 02A9     		add	r1, sp, #8
 663 00a6 FFF7FEFF 		bl	USART_Init
 664              	.LVL62:
 304:src/main.c    **** 
 665              		.loc 1 304 0
 666 00aa 3046     		mov	r0, r6
 667 00ac 40F22551 		movw	r1, #1317
 668 00b0 2A46     		mov	r2, r5
 669 00b2 FFF7FEFF 		bl	USART_ITConfig
 670              	.LVL63:
 306:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 671              		.loc 1 306 0
 672 00b6 2623     		movs	r3, #38
 673 00b8 8DF80430 		strb	r3, [sp, #4]
 307:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 674              		.loc 1 307 0
 675 00bc 8DF80540 		strb	r4, [sp, #5]
 308:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 676              		.loc 1 308 0
 677 00c0 8DF80640 		strb	r4, [sp, #6]
 309:src/main.c    **** 
 678              		.loc 1 309 0
 679 00c4 8DF80750 		strb	r5, [sp, #7]
 311:src/main.c    **** 
 680              		.loc 1 311 0
 681 00c8 01A8     		add	r0, sp, #4
 682 00ca FFF7FEFF 		bl	NVIC_Init
 683              	.LVL64:
 313:src/main.c    **** 
 684              		.loc 1 313 0
 685 00ce 3046     		mov	r0, r6
 686 00d0 2946     		mov	r1, r5
 687 00d2 FFF7FEFF 		bl	USART_Cmd
 688              	.LVL65:
 315:src/main.c    **** 
 689              		.loc 1 315 0
 690 00d6 09B0     		add	sp, sp, #36
 691              		@ sp needed
 692 00d8 F0BD     		pop	{r4, r5, r6, r7, pc}
 693              		.cfi_endproc
 694              	.LFE115:
 696 00da 00BF     		.section	.text.TIM_PWM_init,"ax",%progbits
 697              		.align	2
 698              		.global	TIM_PWM_init
 699              		.thumb
 700              		.thumb_func
 702              	TIM_PWM_init:
 703              	.LFB116:
 317:src/main.c    ****     //TIMER SETUP
 704              		.loc 1 317 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 32
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 708 0000 70B5     		push	{r4, r5, r6, lr}
 709              	.LCFI9:
 710              		.cfi_def_cfa_offset 16
 711              		.cfi_offset 4, -16
 712              		.cfi_offset 5, -12
 713              		.cfi_offset 6, -8
 714              		.cfi_offset 14, -4
 715 0002 88B0     		sub	sp, sp, #32
 716              	.LCFI10:
 717              		.cfi_def_cfa_offset 48
 319:src/main.c    ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); //USART1
 718              		.loc 1 319 0
 719 0004 0420     		movs	r0, #4
 720 0006 0121     		movs	r1, #1
 721 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 722              	.LVL66:
 320:src/main.c    **** 
 723              		.loc 1 320 0
 724 000c 0120     		movs	r0, #1
 725 000e 0146     		mov	r1, r0
 726 0010 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 727              	.LVL67:
 325:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 84;
 728              		.loc 1 325 0
 729 0014 44F61F63 		movw	r3, #19999
 730 0018 0693     		str	r3, [sp, #24]
 326:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;//TIM_CKD_DIV1;
 731              		.loc 1 326 0
 732 001a 5423     		movs	r3, #84
 733 001c ADF81430 		strh	r3, [sp, #20]	@ movhi
 327:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 734              		.loc 1 327 0
 735 0020 0025     		movs	r5, #0
 736 0022 ADF81C50 		strh	r5, [sp, #28]	@ movhi
 328:src/main.c    **** 
 737              		.loc 1 328 0
 738 0026 ADF81650 		strh	r5, [sp, #22]	@ movhi
 330:src/main.c    ****     TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);
 739              		.loc 1 330 0
 740 002a 4FF40064 		mov	r4, #2048
 741 002e C4F20004 		movt	r4, 16384
 742 0032 2046     		mov	r0, r4
 743 0034 05A9     		add	r1, sp, #20
 744 0036 FFF7FEFF 		bl	TIM_TimeBaseInit
 745              	.LVL68:
 331:src/main.c    **** 
 746              		.loc 1 331 0
 747 003a 2846     		mov	r0, r5
 748 003c C4F20100 		movt	r0, 16385
 749 0040 05A9     		add	r1, sp, #20
 750 0042 FFF7FEFF 		bl	TIM_TimeBaseInit
 751              	.LVL69:
 338:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 752              		.loc 1 338 0
 753 0046 6023     		movs	r3, #96
 754 0048 ADF80030 		strh	r3, [sp]	@ movhi
 339:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0;
 755              		.loc 1 339 0
 756 004c 0126     		movs	r6, #1
 757 004e ADF80260 		strh	r6, [sp, #2]	@ movhi
 340:src/main.c    ****     TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 758              		.loc 1 340 0
 759 0052 0295     		str	r5, [sp, #8]
 341:src/main.c    ****     
 760              		.loc 1 341 0
 761 0054 ADF80C50 		strh	r5, [sp, #12]	@ movhi
 345:src/main.c    ****     TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 762              		.loc 1 345 0
 763 0058 2046     		mov	r0, r4
 764 005a 6946     		mov	r1, sp
 765 005c FFF7FEFF 		bl	TIM_OC1Init
 766              	.LVL70:
 346:src/main.c    **** 
 767              		.loc 1 346 0
 768 0060 2046     		mov	r0, r4
 769 0062 0821     		movs	r1, #8
 770 0064 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 771              	.LVL71:
 348:src/main.c    ****     TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 772              		.loc 1 348 0
 773 0068 2046     		mov	r0, r4
 774 006a 6946     		mov	r1, sp
 775 006c FFF7FEFF 		bl	TIM_OC2Init
 776              	.LVL72:
 349:src/main.c    **** 
 777              		.loc 1 349 0
 778 0070 2046     		mov	r0, r4
 779 0072 0821     		movs	r1, #8
 780 0074 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 781              	.LVL73:
 352:src/main.c    ****     TIM_Cmd(TIM4, ENABLE);
 782              		.loc 1 352 0
 783 0078 2046     		mov	r0, r4
 784 007a 3146     		mov	r1, r6
 785 007c FFF7FEFF 		bl	TIM_ARRPreloadConfig
 786              	.LVL74:
 353:src/main.c    **** }
 787              		.loc 1 353 0
 788 0080 2046     		mov	r0, r4
 789 0082 3146     		mov	r1, r6
 790 0084 FFF7FEFF 		bl	TIM_Cmd
 791              	.LVL75:
 354:src/main.c    **** 
 792              		.loc 1 354 0
 793 0088 08B0     		add	sp, sp, #32
 794              		@ sp needed
 795 008a 70BD     		pop	{r4, r5, r6, pc}
 796              		.cfi_endproc
 797              	.LFE116:
 799              		.section	.text.vACSystem_Init,"ax",%progbits
 800              		.align	2
 801              		.global	vACSystem_Init
 802              		.thumb
 803              		.thumb_func
 805              	vACSystem_Init:
 806              	.LFB117:
 422:src/main.c    ****     USART_rtos_packet packet, packet1;
 807              		.loc 1 422 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 32
 810              		@ frame_needed = 0, uses_anonymous_args = 0
 811 0000 70B5     		push	{r4, r5, r6, lr}
 812              	.LCFI11:
 813              		.cfi_def_cfa_offset 16
 814              		.cfi_offset 4, -16
 815              		.cfi_offset 5, -12
 816              		.cfi_offset 6, -8
 817              		.cfi_offset 14, -4
 818 0002 88B0     		sub	sp, sp, #32
 819              	.LCFI12:
 820              		.cfi_def_cfa_offset 48
 424:src/main.c    ****     USART_rtos_puts(&packet, "Init AC System...");
 821              		.loc 1 424 0
 822 0004 40F20006 		movw	r6, #:lower16:USART1_rtos
 823 0008 C0F20006 		movt	r6, #:upper16:USART1_rtos
 824 000c 08AD     		add	r5, sp, #32
 825 000e 45F8106D 		str	r6, [r5, #-16]!
 425:src/main.c    **** 
 826              		.loc 1 425 0
 827 0012 2846     		mov	r0, r5
 828 0014 40F20001 		movw	r1, #:lower16:.LC2
 829 0018 C0F20001 		movt	r1, #:upper16:.LC2
 830 001c FFF7FEFF 		bl	USART_rtos_puts
 831              	.LVL76:
 428:src/main.c    **** 
 832              		.loc 1 428 0
 833 0020 40F20003 		movw	r3, #:lower16:AC
 834 0024 C0F20003 		movt	r3, #:upper16:AC
 430:src/main.c    **** //    USART_puts(USART2, "AC successfully initialized...\r\n");
 835              		.loc 1 430 0
 836 0028 0122     		movs	r2, #1
 837 002a 1A70     		strb	r2, [r3]
 433:src/main.c    ****     USART_rtos_puts(&packet1, " OK\r\n");
 838              		.loc 1 433 0
 839 002c 08AC     		add	r4, sp, #32
 840 002e 44F8206D 		str	r6, [r4, #-32]!
 434:src/main.c    **** 
 841              		.loc 1 434 0
 842 0032 6846     		mov	r0, sp
 843 0034 40F20001 		movw	r1, #:lower16:.LC3
 844 0038 C0F20001 		movt	r1, #:upper16:.LC3
 845 003c FFF7FEFF 		bl	USART_rtos_puts
 846              	.LVL77:
 437:src/main.c    ****     USART_rtos_wait_send(&packet1);
 847              		.loc 1 437 0
 848 0040 2846     		mov	r0, r5
 849 0042 FFF7FEFF 		bl	USART_rtos_wait_send
 850              	.LVL78:
 438:src/main.c    **** 
 851              		.loc 1 438 0
 852 0046 6846     		mov	r0, sp
 853 0048 FFF7FEFF 		bl	USART_rtos_wait_send
 854              	.LVL79:
 440:src/main.c    **** }
 855              		.loc 1 440 0
 856 004c 0020     		movs	r0, #0
 857 004e FFF7FEFF 		bl	vTaskDelete
 858              	.LVL80:
 441:src/main.c    **** 
 859              		.loc 1 441 0
 860 0052 08B0     		add	sp, sp, #32
 861              		@ sp needed
 862 0054 70BD     		pop	{r4, r5, r6, pc}
 863              		.cfi_endproc
 864              	.LFE117:
 866 0056 00BF     		.section	.text.vLightingSystem_Init,"ax",%progbits
 867              		.align	2
 868              		.global	vLightingSystem_Init
 869              		.thumb
 870              		.thumb_func
 872              	vLightingSystem_Init:
 873              	.LFB118:
 443:src/main.c    ****     //USART_rtos_puts(USART2, "Init Lighting System...");
 874              		.loc 1 443 0
 875              		.cfi_startproc
 876              		@ args = 0, pretend = 0, frame = 0
 877              		@ frame_needed = 0, uses_anonymous_args = 0
 878 0000 08B5     		push	{r3, lr}
 879              	.LCFI13:
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 3, -8
 882              		.cfi_offset 14, -4
 446:src/main.c    **** 
 883              		.loc 1 446 0
 884 0002 40F20003 		movw	r3, #:lower16:lighting
 885 0006 C0F20003 		movt	r3, #:upper16:lighting
 448:src/main.c    ****     //USART_puts(USART2, "Lighting successfully initialized...\r\n");
 886              		.loc 1 448 0
 887 000a 0122     		movs	r2, #1
 888 000c 1A74     		strb	r2, [r3, #16]
 453:src/main.c    **** }
 889              		.loc 1 453 0
 890 000e 0020     		movs	r0, #0
 891 0010 FFF7FEFF 		bl	vTaskDelete
 892              	.LVL81:
 893 0014 08BD     		pop	{r3, pc}
 894              		.cfi_endproc
 895              	.LFE118:
 897 0016 00BF     		.section	.text.HydroponicUDS_Init,"ax",%progbits
 898              		.align	2
 899              		.global	HydroponicUDS_Init
 900              		.thumb
 901              		.thumb_func
 903              	HydroponicUDS_Init:
 904              	.LFB119:
 457:src/main.c    **** 
 905              		.loc 1 457 0
 906              		.cfi_startproc
 907              		@ args = 0, pretend = 0, frame = 8
 908              		@ frame_needed = 0, uses_anonymous_args = 0
 909 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 910              	.LCFI14:
 911              		.cfi_def_cfa_offset 24
 912              		.cfi_offset 4, -24
 913              		.cfi_offset 5, -20
 914              		.cfi_offset 6, -16
 915              		.cfi_offset 7, -12
 916              		.cfi_offset 8, -8
 917              		.cfi_offset 14, -4
 918 0004 82B0     		sub	sp, sp, #8
 919              	.LCFI15:
 920              		.cfi_def_cfa_offset 32
 459:src/main.c    ****     hydroponics.UDS_PHDown.state = MODULE_RUNNING;
 921              		.loc 1 459 0
 922 0006 40F20004 		movw	r4, #:lower16:hydroponics
 923 000a C0F20004 		movt	r4, #:upper16:hydroponics
 924 000e 0025     		movs	r5, #0
 925 0010 84F82850 		strb	r5, [r4, #40]
 460:src/main.c    ****     hydroponics.UDS_Nutrient.state = MODULE_RUNNING;
 926              		.loc 1 460 0
 927 0014 84F85450 		strb	r5, [r4, #84]
 461:src/main.c    **** 
 928              		.loc 1 461 0
 929 0018 84F88050 		strb	r5, [r4, #128]
 468:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP; //PP
 930              		.loc 1 468 0
 931 001c 4FF00808 		mov	r8, #8
 932 0020 CDF80080 		str	r8, [sp]
 469:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 933              		.loc 1 469 0
 934 0024 8DF80650 		strb	r5, [sp, #6]
 470:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 935              		.loc 1 470 0
 936 0028 8DF80450 		strb	r5, [sp, #4]
 471:src/main.c    **** 
 937              		.loc 1 471 0
 938 002c 0323     		movs	r3, #3
 939 002e 8DF80530 		strb	r3, [sp, #5]
 473:src/main.c    **** 
 940              		.loc 1 473 0
 941 0032 4FF44066 		mov	r6, #3072
 942 0036 C4F20206 		movt	r6, 16386
 943 003a 3046     		mov	r0, r6
 944 003c 6946     		mov	r1, sp
 945 003e FFF7FEFF 		bl	GPIO_Init
 946              	.LVL82:
 475:src/main.c    **** 	gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_NOPULL;
 947              		.loc 1 475 0
 948 0042 1027     		movs	r7, #16
 949 0044 0097     		str	r7, [sp]
 476:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 950              		.loc 1 476 0
 951 0046 8DF80750 		strb	r5, [sp, #7]
 477:src/main.c    ****     GPIO_Init(GPIOD, &gpio_ultrasonic);
 952              		.loc 1 477 0
 953 004a 0123     		movs	r3, #1
 954 004c 8DF80430 		strb	r3, [sp, #4]
 478:src/main.c    **** 
 955              		.loc 1 478 0
 956 0050 3046     		mov	r0, r6
 957 0052 6946     		mov	r1, sp
 958 0054 FFF7FEFF 		bl	GPIO_Init
 959              	.LVL83:
 480:src/main.c    ****     hydroponics.UDS_PHUp.port_in = UDS_PHUP_PORT_IN;
 960              		.loc 1 480 0
 961 0058 A4F81C80 		strh	r8, [r4, #28]	@ movhi
 481:src/main.c    ****     hydroponics.UDS_PHUp.pin_out = UDS_PHUP_PIN_OUT;
 962              		.loc 1 481 0
 963 005c 6661     		str	r6, [r4, #20]
 482:src/main.c    ****     hydroponics.UDS_PHUp.port_out = UDS_PHUP_PORT_OUT;
 964              		.loc 1 482 0
 965 005e E783     		strh	r7, [r4, #30]	@ movhi
 483:src/main.c    **** 
 966              		.loc 1 483 0
 967 0060 A661     		str	r6, [r4, #24]
 486:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_PHDown);
 968              		.loc 1 486 0
 969 0062 04F11400 		add	r0, r4, #20
 970 0066 FFF7FEFF 		bl	UDS_Module_Init
 971              	.LVL84:
 487:src/main.c    ****     UDS_Module_Init(&hydroponics.UDS_Nutrient);
 972              		.loc 1 487 0
 973 006a 04F14000 		add	r0, r4, #64
 974 006e FFF7FEFF 		bl	UDS_Module_Init
 975              	.LVL85:
 488:src/main.c    **** 
 976              		.loc 1 488 0
 977 0072 04F16C00 		add	r0, r4, #108
 978 0076 FFF7FEFF 		bl	UDS_Module_Init
 979              	.LVL86:
 492:src/main.c    **** void HydroponicPPumps_Init(void) {
 980              		.loc 1 492 0
 981 007a 02B0     		add	sp, sp, #8
 982              		@ sp needed
 983 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 984              		.cfi_endproc
 985              	.LFE119:
 987              		.section	.text.HydroponicPPumps_Init,"ax",%progbits
 988              		.align	2
 989              		.global	HydroponicPPumps_Init
 990              		.thumb
 991              		.thumb_func
 993              	HydroponicPPumps_Init:
 994              	.LFB120:
 493:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 995              		.loc 1 493 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 8
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1000              	.LCFI16:
 1001              		.cfi_def_cfa_offset 20
 1002              		.cfi_offset 4, -20
 1003              		.cfi_offset 5, -16
 1004              		.cfi_offset 6, -12
 1005              		.cfi_offset 7, -8
 1006              		.cfi_offset 14, -4
 1007 0002 83B0     		sub	sp, sp, #12
 1008              	.LCFI17:
 1009              		.cfi_def_cfa_offset 32
 494:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
 1010              		.loc 1 494 0
 1011 0004 0420     		movs	r0, #4
 1012 0006 0121     		movs	r1, #1
 1013 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1014              	.LVL87:
 497:src/main.c    **** 	gpio_ppump.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1015              		.loc 1 497 0
 1016 000c 4027     		movs	r7, #64
 1017 000e 0097     		str	r7, [sp]
 498:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT;
 1018              		.loc 1 498 0
 1019 0010 0025     		movs	r5, #0
 1020 0012 8DF80750 		strb	r5, [sp, #7]
 499:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; //PP
 1021              		.loc 1 499 0
 1022 0016 0123     		movs	r3, #1
 1023 0018 8DF80430 		strb	r3, [sp, #4]
 500:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 1024              		.loc 1 500 0
 1025 001c 8DF80650 		strb	r5, [sp, #6]
 501:src/main.c    ****     GPIO_Init(GPIOC, &gpio_ppump);
 1026              		.loc 1 501 0
 1027 0020 0223     		movs	r3, #2
 1028 0022 8DF80530 		strb	r3, [sp, #5]
 502:src/main.c    **** 
 1029              		.loc 1 502 0
 1030 0026 4FF40066 		mov	r6, #2048
 1031 002a C4F20206 		movt	r6, 16386
 1032 002e 3046     		mov	r0, r6
 1033 0030 6946     		mov	r1, sp
 1034 0032 FFF7FEFF 		bl	GPIO_Init
 1035              	.LVL88:
 512:src/main.c    ****     hydroponics.PPump_PHDown.pin_out = GPIO_Pin_6;
 1036              		.loc 1 512 0
 1037 0036 40F20004 		movw	r4, #:lower16:hydroponics
 1038 003a C0F20004 		movt	r4, #:upper16:hydroponics
 1039 003e 2663     		str	r6, [r4, #48]
 513:src/main.c    **** 
 1040              		.loc 1 513 0
 1041 0040 A786     		strh	r7, [r4, #52]	@ movhi
 515:src/main.c    ****     hydroponics.PPump_PHDown.state = MODULE_RUNNING;
 1042              		.loc 1 515 0
 1043 0042 2573     		strb	r5, [r4, #12]
 516:src/main.c    ****     hydroponics.PPump_Nutrient.state = MODULE_RUNNING;
 1044              		.loc 1 516 0
 1045 0044 84F83850 		strb	r5, [r4, #56]
 517:src/main.c    **** 
 1046              		.loc 1 517 0
 1047 0048 84F86450 		strb	r5, [r4, #100]
 519:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_PHDown, &hydroponics.UDS_PHDown);
 1048              		.loc 1 519 0
 1049 004c 201D     		adds	r0, r4, #4
 1050 004e 04F11401 		add	r1, r4, #20
 1051 0052 FFF7FEFF 		bl	PPump_Module_Init
 1052              	.LVL89:
 520:src/main.c    ****     PPump_Module_Init(&hydroponics.PPump_Nutrient, &hydroponics.UDS_Nutrient);
 1053              		.loc 1 520 0
 1054 0056 04F13000 		add	r0, r4, #48
 1055 005a E119     		adds	r1, r4, r7
 1056 005c FFF7FEFF 		bl	PPump_Module_Init
 1057              	.LVL90:
 521:src/main.c    **** 
 1058              		.loc 1 521 0
 1059 0060 04F15C00 		add	r0, r4, #92
 1060 0064 04F16C01 		add	r1, r4, #108
 1061 0068 FFF7FEFF 		bl	PPump_Module_Init
 1062              	.LVL91:
 531:src/main.c    **** 
 1063              		.loc 1 531 0
 1064 006c 03B0     		add	sp, sp, #12
 1065              		@ sp needed
 1066 006e F0BD     		pop	{r4, r5, r6, r7, pc}
 1067              		.cfi_endproc
 1068              	.LFE120:
 1070              		.section	.text.vHydroponicSystem_Init,"ax",%progbits
 1071              		.align	2
 1072              		.global	vHydroponicSystem_Init
 1073              		.thumb
 1074              		.thumb_func
 1076              	vHydroponicSystem_Init:
 1077              	.LFB121:
 533:src/main.c    **** 
 1078              		.loc 1 533 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 32
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082 0000 30B5     		push	{r4, r5, lr}
 1083              	.LCFI18:
 1084              		.cfi_def_cfa_offset 12
 1085              		.cfi_offset 4, -12
 1086              		.cfi_offset 5, -8
 1087              		.cfi_offset 14, -4
 1088 0002 89B0     		sub	sp, sp, #36
 1089              	.LCFI19:
 1090              		.cfi_def_cfa_offset 48
 536:src/main.c    ****     USART_rtos_puts(&packet, " Init Hydroponic System...");
 1091              		.loc 1 536 0
 1092 0004 40F20003 		movw	r3, #:lower16:USART1_rtos
 1093 0008 C0F20003 		movt	r3, #:upper16:USART1_rtos
 1094 000c 08A8     		add	r0, sp, #32
 1095 000e 40F8103D 		str	r3, [r0, #-16]!
 537:src/main.c    **** 
 1096              		.loc 1 537 0
 1097 0012 40F20001 		movw	r1, #:lower16:.LC4
 1098 0016 C0F20001 		movt	r1, #:upper16:.LC4
 1099 001a FFF7FEFF 		bl	USART_rtos_puts
 1100              	.LVL92:
 539:src/main.c    **** 
 1101              		.loc 1 539 0
 1102 001e 40F20004 		movw	r4, #:lower16:hydroponics
 1103 0022 C0F20004 		movt	r4, #:upper16:hydroponics
 1104 0026 0025     		movs	r5, #0
 1105 0028 2570     		strb	r5, [r4]
 541:src/main.c    ****     HydroponicUDS_Init();
 1106              		.loc 1 541 0
 1107 002a FFF7FEFF 		bl	HydroponicPPumps_Init
 1108              	.LVL93:
 542:src/main.c    **** 
 1109              		.loc 1 542 0
 1110 002e FFF7FEFF 		bl	HydroponicUDS_Init
 1111              	.LVL94:
 546:src/main.c    ****     PHMeter_Module_Init(&hydroponics.PHMeter_Resvoir);
 1112              		.loc 1 546 0
 1113 0032 84F89050 		strb	r5, [r4, #144]
 547:src/main.c    **** 
 1114              		.loc 1 547 0
 1115 0036 04F18800 		add	r0, r4, #136
 1116 003a FFF7FEFF 		bl	PHMeter_Module_Init
 1117              	.LVL95:
 551:src/main.c    ****         hydroponics.PPump_PHDown.state == MODULE_STANDBY &&
 1118              		.loc 1 551 0
 1119 003e 237B     		ldrb	r3, [r4, #12]	@ zero_extendqisi2
 1120 0040 012B     		cmp	r3, #1
 1121 0042 1AD1     		bne	.L21
 552:src/main.c    ****         hydroponics.PPump_Nutrient.state == MODULE_STANDBY &&  
 1122              		.loc 1 552 0 discriminator 1
 1123 0044 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 551:src/main.c    ****         hydroponics.PPump_PHDown.state == MODULE_STANDBY &&
 1124              		.loc 1 551 0 discriminator 1
 1125 0048 012B     		cmp	r3, #1
 1126 004a 16D1     		bne	.L21
 553:src/main.c    ****         hydroponics.UDS_PHUp.state == MODULE_STANDBY &&
 1127              		.loc 1 553 0
 1128 004c 94F86430 		ldrb	r3, [r4, #100]	@ zero_extendqisi2
 552:src/main.c    ****         hydroponics.PPump_Nutrient.state == MODULE_STANDBY &&  
 1129              		.loc 1 552 0
 1130 0050 012B     		cmp	r3, #1
 1131 0052 12D1     		bne	.L21
 554:src/main.c    ****         hydroponics.UDS_PHDown.state == MODULE_STANDBY &&
 1132              		.loc 1 554 0
 1133 0054 94F82830 		ldrb	r3, [r4, #40]	@ zero_extendqisi2
 553:src/main.c    ****         hydroponics.UDS_PHUp.state == MODULE_STANDBY &&
 1134              		.loc 1 553 0
 1135 0058 012B     		cmp	r3, #1
 1136 005a 0ED1     		bne	.L21
 555:src/main.c    ****         hydroponics.UDS_Nutrient.state == MODULE_STANDBY &&
 1137              		.loc 1 555 0
 1138 005c 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 554:src/main.c    ****         hydroponics.UDS_PHDown.state == MODULE_STANDBY &&
 1139              		.loc 1 554 0
 1140 0060 012B     		cmp	r3, #1
 1141 0062 0AD1     		bne	.L21
 556:src/main.c    ****         hydroponics.PHMeter_Resvoir.state == MODULE_STANDBY) {
 1142              		.loc 1 556 0
 1143 0064 94F88030 		ldrb	r3, [r4, #128]	@ zero_extendqisi2
 555:src/main.c    ****         hydroponics.UDS_Nutrient.state == MODULE_STANDBY &&
 1144              		.loc 1 555 0
 1145 0068 012B     		cmp	r3, #1
 1146 006a 06D1     		bne	.L21
 557:src/main.c    **** 
 1147              		.loc 1 557 0
 1148 006c 94F89030 		ldrb	r3, [r4, #144]	@ zero_extendqisi2
 556:src/main.c    ****         hydroponics.PHMeter_Resvoir.state == MODULE_STANDBY) {
 1149              		.loc 1 556 0
 1150 0070 012B     		cmp	r3, #1
 1151 0072 02D1     		bne	.L21
 559:src/main.c    ****         //USART_puts(USART2, "Hydroponics successfully initialized...\r\n");
 1152              		.loc 1 559 0
 1153 0074 0122     		movs	r2, #1
 1154 0076 2270     		strb	r2, [r4]
 1155 0078 05E0     		b	.L22
 1156              	.L21:
 566:src/main.c    ****         //xTaskCreate(vHydroponicSystem_Init, (signed char*)"vHydroponicSystem_Init", 64, NULL, tsk
 1157              		.loc 1 566 0
 1158 007a 40F20003 		movw	r3, #:lower16:hydroponics
 1159 007e C0F20003 		movt	r3, #:upper16:hydroponics
 1160 0082 0322     		movs	r2, #3
 1161 0084 1A70     		strb	r2, [r3]
 1162              	.L22:
 575:src/main.c    ****     USART_rtos_puts(&packet1, " Ok\r\n");
 1163              		.loc 1 575 0
 1164 0086 40F20003 		movw	r3, #:lower16:USART1_rtos
 1165 008a C0F20003 		movt	r3, #:upper16:USART1_rtos
 1166 008e 08AC     		add	r4, sp, #32
 1167 0090 44F8203D 		str	r3, [r4, #-32]!
 576:src/main.c    **** 
 1168              		.loc 1 576 0
 1169 0094 6846     		mov	r0, sp
 1170 0096 40F20001 		movw	r1, #:lower16:.LC5
 1171 009a C0F20001 		movt	r1, #:upper16:.LC5
 1172 009e FFF7FEFF 		bl	USART_rtos_puts
 1173              	.LVL96:
 578:src/main.c    ****     USART_rtos_wait_send(&packet1);
 1174              		.loc 1 578 0
 1175 00a2 04A8     		add	r0, sp, #16
 1176 00a4 FFF7FEFF 		bl	USART_rtos_wait_send
 1177              	.LVL97:
 579:src/main.c    **** 
 1178              		.loc 1 579 0
 1179 00a8 6846     		mov	r0, sp
 1180 00aa FFF7FEFF 		bl	USART_rtos_wait_send
 1181              	.LVL98:
 581:src/main.c    **** 
 1182              		.loc 1 581 0
 1183 00ae 0020     		movs	r0, #0
 1184 00b0 FFF7FEFF 		bl	vTaskDelete
 1185              	.LVL99:
 583:src/main.c    **** 
 1186              		.loc 1 583 0
 1187 00b4 09B0     		add	sp, sp, #36
 1188              		@ sp needed
 1189 00b6 30BD     		pop	{r4, r5, pc}
 1190              		.cfi_endproc
 1191              	.LFE121:
 1193              		.section	.text.vLight_task,"ax",%progbits
 1194              		.align	2
 1195              		.global	vLight_task
 1196              		.thumb
 1197              		.thumb_func
 1199              	vLight_task:
 1200              	.LFB122:
 585:src/main.c    ****     /*
 1201              		.loc 1 585 0
 1202              		.cfi_startproc
 1203              		@ args = 0, pretend = 0, frame = 0
 1204              		@ frame_needed = 0, uses_anonymous_args = 0
 1205              	.LVL100:
 1206 0000 70B5     		push	{r4, r5, r6, lr}
 1207              	.LCFI20:
 1208              		.cfi_def_cfa_offset 16
 1209              		.cfi_offset 4, -16
 1210              		.cfi_offset 5, -12
 1211              		.cfi_offset 6, -8
 1212              		.cfi_offset 14, -4
 598:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1213              		.loc 1 598 0
 1214 0002 0026     		movs	r6, #0
 599:src/main.c    ****         }
 1215              		.loc 1 599 0
 1216 0004 4EF68065 		movw	r5, #61056
 1217 0008 C0F23605 		movt	r5, 54
 1218              	.LVL101:
 1219              	.L26:
 598:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1220              		.loc 1 598 0
 1221 000c 3446     		mov	r4, r6
 1222 000e 03E0     		b	.L24
 1223              	.LVL102:
 1224              	.L25:
 599:src/main.c    ****         }
 1225              		.loc 1 599 0 discriminator 2
 1226 0010 2846     		mov	r0, r5
 1227 0012 FFF7FEFF 		bl	vTaskDelay
 1228              	.LVL103:
 598:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1229              		.loc 1 598 0 discriminator 2
 1230 0016 0134     		adds	r4, r4, #1
 1231              	.LVL104:
 1232              	.L24:
 598:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1233              		.loc 1 598 0 is_stmt 0 discriminator 1
 1234 0018 042C     		cmp	r4, #4
 1235 001a F9DD     		ble	.L25
 1236 001c F6E7     		b	.L26
 1237              		.cfi_endproc
 1238              	.LFE122:
 1240 001e 00BF     		.section	.text.vUDS_read_distance,"ax",%progbits
 1241              		.align	2
 1242              		.global	vUDS_read_distance
 1243              		.thumb
 1244              		.thumb_func
 1246              	vUDS_read_distance:
 1247              	.LFB123:
 608:src/main.c    **** 
 1248              		.loc 1 608 0 is_stmt 1
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 16
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              	.LVL105:
 1253 0000 30B5     		push	{r4, r5, lr}
 1254              	.LCFI21:
 1255              		.cfi_def_cfa_offset 12
 1256              		.cfi_offset 4, -12
 1257              		.cfi_offset 5, -8
 1258              		.cfi_offset 14, -4
 1259 0002 85B0     		sub	sp, sp, #20
 1260              	.LCFI22:
 1261              		.cfi_def_cfa_offset 32
 1262 0004 0446     		mov	r4, r0
 611:src/main.c    **** 
 1263              		.loc 1 611 0
 1264 0006 40F20002 		movw	r2, #:lower16:USART1_rtos
 1265 000a C0F20002 		movt	r2, #:upper16:USART1_rtos
 1266 000e 04A8     		add	r0, sp, #16
 1267              	.LVL106:
 1268 0010 40F8102D 		str	r2, [r0, #-16]!
 613:src/main.c    **** 
 1269              		.loc 1 613 0
 1270 0014 6846     		mov	r0, sp
 1271 0016 40F20001 		movw	r1, #:lower16:.LC6
 1272 001a C0F20001 		movt	r1, #:upper16:.LC6
 1273 001e FFF7FEFF 		bl	USART_rtos_puts
 1274              	.LVL107:
 615:src/main.c    ****    int v = UDS_read_distance(module); 
 1275              		.loc 1 615 0
 1276 0022 FFF7FEFF 		bl	vPortEnterCritical
 1277              	.LVL108:
 616:src/main.c    ****    taskEXIT_CRITICAL();
 1278              		.loc 1 616 0
 1279 0026 2046     		mov	r0, r4
 1280 0028 FFF7FEFF 		bl	UDS_read_distance
 1281              	.LVL109:
 1282 002c 0546     		mov	r5, r0
 1283              	.LVL110:
 617:src/main.c    **** 
 1284              		.loc 1 617 0
 1285 002e FFF7FEFF 		bl	vPortExitCritical
 1286              	.LVL111:
 621:src/main.c    ****    USART_put_int(USART1, v);
 1287              		.loc 1 621 0
 1288 0032 4FF48054 		mov	r4, #4096
 1289              	.LVL112:
 1290 0036 C4F20104 		movt	r4, 16385
 1291 003a 2046     		mov	r0, r4
 1292 003c 40F20001 		movw	r1, #:lower16:.LC7
 1293 0040 C0F20001 		movt	r1, #:upper16:.LC7
 1294 0044 FFF7FEFF 		bl	USART_puts
 1295              	.LVL113:
 622:src/main.c    ****    USART_puts(USART1, "\r\n");
 1296              		.loc 1 622 0
 1297 0048 2046     		mov	r0, r4
 1298 004a 2946     		mov	r1, r5
 1299 004c FFF7FEFF 		bl	USART_put_int
 1300              	.LVL114:
 623:src/main.c    ****    //USART_rtos_sputs(&packet, "Distance: %d", v);
 1301              		.loc 1 623 0
 1302 0050 2046     		mov	r0, r4
 1303 0052 40F20001 		movw	r1, #:lower16:.LC0
 1304 0056 C0F20001 		movt	r1, #:upper16:.LC0
 1305 005a FFF7FEFF 		bl	USART_puts
 1306              	.LVL115:
 629:src/main.c    **** 
 1307              		.loc 1 629 0
 1308 005e 2046     		mov	r0, r4
 1309 0060 40F20001 		movw	r1, #:lower16:.LC8
 1310 0064 C0F20001 		movt	r1, #:upper16:.LC8
 1311 0068 FFF7FEFF 		bl	USART_puts
 1312              	.LVL116:
 631:src/main.c    **** }
 1313              		.loc 1 631 0
 1314 006c 0020     		movs	r0, #0
 1315 006e FFF7FEFF 		bl	vTaskDelete
 1316              	.LVL117:
 632:src/main.c    **** 
 1317              		.loc 1 632 0
 1318 0072 05B0     		add	sp, sp, #20
 1319              		@ sp needed
 1320 0074 30BD     		pop	{r4, r5, pc}
 1321              		.cfi_endproc
 1322              	.LFE123:
 1324 0076 00BF     		.section	.text.vPPump_dispense,"ax",%progbits
 1325              		.align	2
 1326              		.global	vPPump_dispense
 1327              		.thumb
 1328              		.thumb_func
 1330              	vPPump_dispense:
 1331              	.LFB125:
 648:src/main.c    **** }
 649:src/main.c    **** 
 650:src/main.c    **** void vPPump_dispense(vPPump_parameters *params) {
 1332              		.loc 1 650 0
 1333              		.cfi_startproc
 1334              		@ args = 0, pretend = 0, frame = 0
 1335              		@ frame_needed = 0, uses_anonymous_args = 0
 1336              	.LVL118:
 1337 0000 38B5     		push	{r3, r4, r5, lr}
 1338              	.LCFI23:
 1339              		.cfi_def_cfa_offset 16
 1340              		.cfi_offset 3, -16
 1341              		.cfi_offset 4, -12
 1342              		.cfi_offset 5, -8
 1343              		.cfi_offset 14, -4
 1344 0002 0446     		mov	r4, r0
 651:src/main.c    ****     params->ppump->state = MODULE_RUNNING; 
 1345              		.loc 1 651 0
 1346 0004 0368     		ldr	r3, [r0]
 1347 0006 0025     		movs	r5, #0
 1348 0008 1D72     		strb	r5, [r3, #8]
 652:src/main.c    ****     //GPIO_WriteBit(params->port, params->pin, Bit_SET);
 653:src/main.c    ****     //USART2_rtos_puts("Starting to dispense...\r\n");
 654:src/main.c    ****     
 655:src/main.c    ****     taskENTER_CRITICAL();
 1349              		.loc 1 655 0
 1350 000a FFF7FEFF 		bl	vPortEnterCritical
 1351              	.LVL119:
 656:src/main.c    ****     PPump_Module_dispense(params->ppump, params->amount);
 1352              		.loc 1 656 0
 1353 000e 2068     		ldr	r0, [r4]
 1354 0010 6168     		ldr	r1, [r4, #4]
 1355 0012 FFF7FEFF 		bl	PPump_Module_dispense
 1356              	.LVL120:
 657:src/main.c    **** 
 658:src/main.c    ****     taskEXIT_CRITICAL();
 1357              		.loc 1 658 0
 1358 0016 FFF7FEFF 		bl	vPortExitCritical
 1359              	.LVL121:
 659:src/main.c    ****     //    TEST_PH_VALUE+=5;
 660:src/main.c    **** 
 661:src/main.c    ****     params->ppump->state = MODULE_EXECUTED; 
 1360              		.loc 1 661 0
 1361 001a 2368     		ldr	r3, [r4]
 1362 001c 0222     		movs	r2, #2
 1363 001e 1A72     		strb	r2, [r3, #8]
 662:src/main.c    **** 
 663:src/main.c    ****     vTaskDelete(NULL);
 1364              		.loc 1 663 0
 1365 0020 2846     		mov	r0, r5
 1366 0022 FFF7FEFF 		bl	vTaskDelete
 1367              	.LVL122:
 1368 0026 38BD     		pop	{r3, r4, r5, pc}
 1369              		.cfi_endproc
 1370              	.LFE125:
 1372              		.section	.text.vPH_task,"ax",%progbits
 1373              		.align	2
 1374              		.global	vPH_task
 1375              		.thumb
 1376              		.thumb_func
 1378              	vPH_task:
 1379              	.LFB126:
 664:src/main.c    **** }
 665:src/main.c    **** 
 666:src/main.c    **** void vPH_task(void) {
 1380              		.loc 1 666 0
 1381              		.cfi_startproc
 1382              		@ args = 0, pretend = 0, frame = 104
 1383              		@ frame_needed = 0, uses_anonymous_args = 0
 1384 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1385              	.LCFI24:
 1386              		.cfi_def_cfa_offset 36
 1387              		.cfi_offset 4, -36
 1388              		.cfi_offset 5, -32
 1389              		.cfi_offset 6, -28
 1390              		.cfi_offset 7, -24
 1391              		.cfi_offset 8, -20
 1392              		.cfi_offset 9, -16
 1393              		.cfi_offset 10, -12
 1394              		.cfi_offset 11, -8
 1395              		.cfi_offset 14, -4
 1396 0004 9FB0     		sub	sp, sp, #124
 1397              	.LCFI25:
 1398              		.cfi_def_cfa_offset 160
 667:src/main.c    ****     static int16_t counter = 24 - 1; //24 hours
 668:src/main.c    **** 
 669:src/main.c    ****     USART_rtos_packet packet, packet1, packet2, packet3;
 670:src/main.c    **** 
 671:src/main.c    ****     packet.USARTx_rtos = packet1.USARTx_rtos = packet2.USARTx_rtos = packet3.USARTx_rtos = &USART1_
 1399              		.loc 1 671 0
 1400 0006 40F20003 		movw	r3, #:lower16:USART1_rtos
 1401 000a C0F20003 		movt	r3, #:upper16:USART1_rtos
 1402 000e 0E93     		str	r3, [sp, #56]
 1403 0010 1293     		str	r3, [sp, #72]
 1404 0012 1693     		str	r3, [sp, #88]
 1405 0014 1EA8     		add	r0, sp, #120
 1406 0016 40F8103D 		str	r3, [r0, #-16]!
 672:src/main.c    ****     USART_rtos_puts(&packet, "PH Task Launched...\r\n");
 1407              		.loc 1 672 0
 1408 001a 40F20001 		movw	r1, #:lower16:.LC9
 1409 001e C0F20001 		movt	r1, #:upper16:.LC9
 1410 0022 FFF7FEFF 		bl	USART_rtos_puts
 1411              	.LVL123:
 673:src/main.c    **** 
 674:src/main.c    ****     unsigned portBASE_TYPE parent_priority = uxTaskPriorityGet(NULL);
 1412              		.loc 1 674 0
 1413 0026 0020     		movs	r0, #0
 1414 0028 FFF7FEFF 		bl	uxTaskPriorityGet
 1415              	.LVL124:
 1416 002c 8246     		mov	r10, r0
 1417              	.LVL125:
 1418              	.LBB14:
 675:src/main.c    **** 
 676:src/main.c    ****     while (1) {
 677:src/main.c    **** 
 678:src/main.c    ****         if (hydroponics.PHMeter_Resvoir.mutex == NULL) {
 1419              		.loc 1 678 0
 1420 002e 40F20004 		movw	r4, #:lower16:hydroponics
 1421 0032 C0F20004 		movt	r4, #:upper16:hydroponics
 679:src/main.c    ****             hydroponics.PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
 680:src/main.c    ****             continue;
 681:src/main.c    ****         }
 682:src/main.c    **** 
 683:src/main.c    ****        //add if sepamphore is not null error check
 684:src/main.c    ****         int TARGET_PH_REACHED = 0;
 685:src/main.c    ****          //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
 686:src/main.c    ****         
 687:src/main.c    ****         if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
 688:src/main.c    ****             USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");
 1422              		.loc 1 688 0
 1423 0036 40F20003 		movw	r3, #:lower16:.LC10
 1424 003a C0F20003 		movt	r3, #:upper16:.LC10
 1425 003e 0793     		str	r3, [sp, #28]
 1426              	.LBB15:
 689:src/main.c    **** 
 690:src/main.c    ****             hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
 691:src/main.c    ****             while (!TARGET_PH_REACHED) {
 692:src/main.c    ****                 vPPump_parameters ppump_params;
 693:src/main.c    ****                 portTickType start_time;
 694:src/main.c    ****                 portTickType end_time;
 695:src/main.c    **** 
 696:src/main.c    ****                 xTaskCreate(vPH_read_value, (signed char*)"PH Read", 128, &hydroponics.PHMeter_Resv
 1427              		.loc 1 696 0
 1428 0040 40F20007 		movw	r7, #:lower16:vPH_read_value
 1429 0044 C0F20007 		movt	r7, #:upper16:vPH_read_value
 1430 0048 40F20006 		movw	r6, #:lower16:.LC11
 1431 004c C0F20006 		movt	r6, #:upper16:.LC11
 697:src/main.c    **** 
 698:src/main.c    ****                 while(hydroponics.PHMeter_Resvoir.state != MODULE_EXECUTED);
 699:src/main.c    **** 
 700:src/main.c    ****                 int value = hydroponics.PHMeter_Resvoir.value; 
 701:src/main.c    ****                 char msg[20];
 702:src/main.c    ****                 packet3.msg = msg;
 703:src/main.c    ****                 USART_rtos_sputs(&packet3, "PH VALUE: %d\r\n", value);
 1432              		.loc 1 703 0
 1433 0050 40F2000B 		movw	fp, #:lower16:.LC12
 1434 0054 C0F2000B 		movt	fp, #:upper16:.LC12
 1435              	.LVL126:
 1436              	.L46:
 1437              	.LBE15:
 678:src/main.c    ****             hydroponics.PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
 1438              		.loc 1 678 0
 1439 0058 D4F88C00 		ldr	r0, [r4, #140]
 1440 005c 20B9     		cbnz	r0, .L31
 679:src/main.c    ****             continue;
 1441              		.loc 1 679 0
 1442 005e FFF7FEFF 		bl	xQueueCreateMutex
 1443              	.LVL127:
 1444 0062 C4F88C00 		str	r0, [r4, #140]
 680:src/main.c    ****         }
 1445              		.loc 1 680 0
 1446 0066 F7E7     		b	.L46
 1447              	.L31:
 1448              	.LVL128:
 687:src/main.c    ****             USART_rtos_puts(&packet1, "Acquired mutex for PHMeter...\r\n");
 1449              		.loc 1 687 0
 1450 0068 0021     		movs	r1, #0
 1451 006a 4FF0FF32 		mov	r2, #-1
 1452 006e 0B46     		mov	r3, r1
 1453 0070 FFF7FEFF 		bl	xQueueGenericReceive
 1454              	.LVL129:
 1455 0074 0128     		cmp	r0, #1
 1456 0076 40F08180 		bne	.L33
 688:src/main.c    **** 
 1457              		.loc 1 688 0
 1458 007a 16A8     		add	r0, sp, #88
 1459 007c 0799     		ldr	r1, [sp, #28]
 1460 007e FFF7FEFF 		bl	USART_rtos_puts
 1461              	.LVL130:
 690:src/main.c    ****             while (!TARGET_PH_REACHED) {
 1462              		.loc 1 690 0
 1463 0082 0123     		movs	r3, #1
 1464 0084 84F89030 		strb	r3, [r4, #144]
 684:src/main.c    ****          //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
 1465              		.loc 1 684 0
 1466 0088 4FF00008 		mov	r8, #0
 1467              	.LBB16:
 704:src/main.c    **** 
 705:src/main.c    ****                 hydroponics.PHMeter_Resvoir.state = MODULE_STANDBY;
 706:src/main.c    **** 
 707:src/main.c    ****                 int amount;
 708:src/main.c    ****                 PPump_Module *ppump;
 709:src/main.c    **** 
 710:src/main.c    ****                 if (value < hydroponics.target_ph){
 711:src/main.c    ****                     USART_rtos_puts(&packet2, "Adding PH Up...\r\n");
 712:src/main.c    ****                     TEST_PH_VALUE+=5;
 713:src/main.c    ****                  ///   USART_rtos_puts(USART2, "ADDING PH UP\r\n");
 714:src/main.c    ****                     amount = hydroponics.target_ph - value;
 715:src/main.c    ****                     ppump = &hydroponics.PPump_PHUp;
 716:src/main.c    **** 
 717:src/main.c    ****                 }
 718:src/main.c    ****                 else if (value > hydroponics.target_ph) {
 719:src/main.c    ****                     USART_rtos_puts(&packet2, "Adding PH DOwn...\r\n");
 720:src/main.c    ****                     TEST_PH_VALUE-=5;
 721:src/main.c    ****                     amount = value - hydroponics.target_ph;
 722:src/main.c    ****                     ppump = &hydroponics.PPump_PHDown;
 723:src/main.c    **** 
 724:src/main.c    ****                 }
 725:src/main.c    ****                 else {
 726:src/main.c    ****                     TARGET_PH_REACHED = 1;
 727:src/main.c    ****                     USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
 1468              		.loc 1 727 0
 1469 008c 40F20003 		movw	r3, #:lower16:.LC15
 1470 0090 C0F20003 		movt	r3, #:upper16:.LC15
 1471 0094 0693     		str	r3, [sp, #24]
 1472              	.LBE16:
 691:src/main.c    ****                 vPPump_parameters ppump_params;
 1473              		.loc 1 691 0
 1474 0096 6EE0     		b	.L45
 1475              	.LVL131:
 1476              	.L41:
 1477              	.LBB17:
 696:src/main.c    **** 
 1478              		.loc 1 696 0
 1479 0098 0AF10103 		add	r3, r10, #1
 1480 009c 0093     		str	r3, [sp]
 1481 009e 0023     		movs	r3, #0
 1482 00a0 0193     		str	r3, [sp, #4]
 1483 00a2 0293     		str	r3, [sp, #8]
 1484 00a4 0393     		str	r3, [sp, #12]
 1485 00a6 3846     		mov	r0, r7
 1486 00a8 3146     		mov	r1, r6
 1487 00aa 8022     		movs	r2, #128
 1488 00ac 3A4B     		ldr	r3, .L47
 1489 00ae FFF7FEFF 		bl	xTaskGenericCreate
 1490              	.LVL132:
 1491              	.L35:
 698:src/main.c    **** 
 1492              		.loc 1 698 0 discriminator 1
 1493 00b2 94F89030 		ldrb	r3, [r4, #144]	@ zero_extendqisi2
 1494 00b6 022B     		cmp	r3, #2
 1495 00b8 FBD1     		bne	.L35
 700:src/main.c    ****                 char msg[20];
 1496              		.loc 1 700 0
 1497 00ba D4F88850 		ldr	r5, [r4, #136]
 1498              	.LVL133:
 702:src/main.c    ****                 USART_rtos_sputs(&packet3, "PH VALUE: %d\r\n", value);
 1499              		.loc 1 702 0
 1500 00be 09AB     		add	r3, sp, #36
 1501 00c0 0F93     		str	r3, [sp, #60]
 703:src/main.c    **** 
 1502              		.loc 1 703 0
 1503 00c2 0EA8     		add	r0, sp, #56
 1504 00c4 5946     		mov	r1, fp
 1505 00c6 2A46     		mov	r2, r5
 1506 00c8 FFF7FEFF 		bl	USART_rtos_sputs
 1507              	.LVL134:
 705:src/main.c    **** 
 1508              		.loc 1 705 0
 1509 00cc 0123     		movs	r3, #1
 1510 00ce 84F89030 		strb	r3, [r4, #144]
 710:src/main.c    ****                     USART_rtos_puts(&packet2, "Adding PH Up...\r\n");
 1511              		.loc 1 710 0
 1512 00d2 D4F89430 		ldr	r3, [r4, #148]
 1513 00d6 AB42     		cmp	r3, r5
 1514 00d8 14DD     		ble	.L36
 711:src/main.c    ****                     TEST_PH_VALUE+=5;
 1515              		.loc 1 711 0
 1516 00da 12A8     		add	r0, sp, #72
 1517 00dc 40F20001 		movw	r1, #:lower16:.LC13
 1518 00e0 C0F20001 		movt	r1, #:upper16:.LC13
 1519 00e4 FFF7FEFF 		bl	USART_rtos_puts
 1520              	.LVL135:
 712:src/main.c    ****                  ///   USART_rtos_puts(USART2, "ADDING PH UP\r\n");
 1521              		.loc 1 712 0
 1522 00e8 40F20003 		movw	r3, #:lower16:.LANCHOR0
 1523 00ec C0F20003 		movt	r3, #:upper16:.LANCHOR0
 1524 00f0 1A68     		ldr	r2, [r3]
 1525 00f2 0532     		adds	r2, r2, #5
 1526 00f4 1A60     		str	r2, [r3]
 714:src/main.c    ****                     ppump = &hydroponics.PPump_PHUp;
 1527              		.loc 1 714 0
 1528 00f6 D4F89430 		ldr	r3, [r4, #148]
 1529 00fa 5B1B     		subs	r3, r3, r5
 1530 00fc 0593     		str	r3, [sp, #20]
 1531              	.LVL136:
 715:src/main.c    **** 
 1532              		.loc 1 715 0
 1533 00fe 04F10409 		add	r9, r4, #4
 1534 0102 1DE0     		b	.L37
 1535              	.LVL137:
 1536              	.L36:
 718:src/main.c    ****                     USART_rtos_puts(&packet2, "Adding PH DOwn...\r\n");
 1537              		.loc 1 718 0
 1538 0104 9D42     		cmp	r5, r3
 1539 0106 14DD     		ble	.L38
 719:src/main.c    ****                     TEST_PH_VALUE-=5;
 1540              		.loc 1 719 0
 1541 0108 12A8     		add	r0, sp, #72
 1542 010a 40F20001 		movw	r1, #:lower16:.LC14
 1543 010e C0F20001 		movt	r1, #:upper16:.LC14
 1544 0112 FFF7FEFF 		bl	USART_rtos_puts
 1545              	.LVL138:
 720:src/main.c    ****                     amount = value - hydroponics.target_ph;
 1546              		.loc 1 720 0
 1547 0116 40F20003 		movw	r3, #:lower16:.LANCHOR0
 1548 011a C0F20003 		movt	r3, #:upper16:.LANCHOR0
 1549 011e 1A68     		ldr	r2, [r3]
 1550 0120 053A     		subs	r2, r2, #5
 1551 0122 1A60     		str	r2, [r3]
 721:src/main.c    ****                     ppump = &hydroponics.PPump_PHDown;
 1552              		.loc 1 721 0
 1553 0124 D4F89430 		ldr	r3, [r4, #148]
 1554 0128 EB1A     		subs	r3, r5, r3
 1555 012a 0593     		str	r3, [sp, #20]
 1556              	.LVL139:
 722:src/main.c    **** 
 1557              		.loc 1 722 0
 1558 012c 04F13009 		add	r9, r4, #48
 1559 0130 06E0     		b	.L37
 1560              	.LVL140:
 1561              	.L38:
 1562              		.loc 1 727 0
 1563 0132 12A8     		add	r0, sp, #72
 1564 0134 0699     		ldr	r1, [sp, #24]
 1565 0136 FFF7FEFF 		bl	USART_rtos_puts
 1566              	.LVL141:
 726:src/main.c    ****                     USART_rtos_puts(&packet2, "Stabilized PH...\r\n");
 1567              		.loc 1 726 0
 1568 013a 4FF00108 		mov	r8, #1
 728:src/main.c    ****                     continue;
 1569              		.loc 1 728 0
 1570 013e 1AE0     		b	.L45
 1571              	.LVL142:
 1572              	.L37:
 729:src/main.c    ****                 };
 730:src/main.c    **** 
 731:src/main.c    ****                 start_time = xTaskGetTickCount();
 1573              		.loc 1 731 0
 1574 0140 FFF7FEFF 		bl	xTaskGetTickCount
 1575              	.LVL143:
 1576 0144 0890     		str	r0, [sp, #32]
 732:src/main.c    ****                 end_time = (portTickType)(1000*hydroponics.ph_delay) / portTICK_RATE_MS;
 1577              		.loc 1 732 0
 1578 0146 D4F89830 		ldr	r3, [r4, #152]
 1579 014a 4FF47A75 		mov	r5, #1000
 1580              	.LVL144:
 1581 014e 05FB03F5 		mul	r5, r5, r3
 1582              	.LVL145:
 733:src/main.c    **** 
 734:src/main.c    ****                 if (xSemaphoreTake(hydroponics.PHMeter_Resvoir.mutex, portMAX_DELAY) == pdTRUE) {
 1583              		.loc 1 734 0
 1584 0152 D4F88C00 		ldr	r0, [r4, #140]
 1585 0156 0021     		movs	r1, #0
 1586 0158 4FF0FF32 		mov	r2, #-1
 1587 015c 0B46     		mov	r3, r1
 1588 015e FFF7FEFF 		bl	xQueueGenericReceive
 1589              	.LVL146:
 1590 0162 0128     		cmp	r0, #1
 1591 0164 07D1     		bne	.L45
 735:src/main.c    ****                     PPump_Module_dispense(ppump, amount);
 1592              		.loc 1 735 0
 1593 0166 4846     		mov	r0, r9
 1594 0168 0599     		ldr	r1, [sp, #20]
 1595 016a FFF7FEFF 		bl	PPump_Module_dispense
 1596              	.LVL147:
 736:src/main.c    ****                 }
 737:src/main.c    ****                 else {
 738:src/main.c    ****                     continue;
 739:src/main.c    ****                 }
 740:src/main.c    **** 
 741:src/main.c    ****                 vTaskDelayUntil(&start_time, end_time);
 1597              		.loc 1 741 0
 1598 016e 08A8     		add	r0, sp, #32
 1599 0170 2946     		mov	r1, r5
 1600 0172 FFF7FEFF 		bl	vTaskDelayUntil
 1601              	.LVL148:
 1602              	.L45:
 1603              	.LBE17:
 691:src/main.c    ****                 vPPump_parameters ppump_params;
 1604              		.loc 1 691 0 discriminator 1
 1605 0176 B8F1000F 		cmp	r8, #0
 1606 017a 8DD0     		beq	.L41
 1607              	.LVL149:
 1608              	.L33:
 684:src/main.c    ****          //MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
 1609              		.loc 1 684 0 discriminator 1
 1610 017c 0025     		movs	r5, #0
 742:src/main.c    **** 
 743:src/main.c    ****                 switch (ppump_params.ppump->state) {
 744:src/main.c    ****                     case MODULE_EXECUTED: 
 745:src/main.c    ****                       ///  USART_rtos_puts(USART2, "VPPUMP EXITED SUCCESSFULLY!\r\n");
 746:src/main.c    ****                         break;
 747:src/main.c    ****                     case MODULE_ERROR:
 748:src/main.c    ****                        /// USART_rtos_puts(USART2, "VPPUMP EXITED WITH AN ERROR!\r\n");
 749:src/main.c    ****                         break;
 750:src/main.c    ****                 }
 751:src/main.c    ****             }
 752:src/main.c    ****         }
 753:src/main.c    ****         int i;
 754:src/main.c    ****         for(i=0; i<counter; i++) {
 755:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1611              		.loc 1 755 0 discriminator 1
 1612 017e 4EF68068 		movw	r8, #61056
 1613 0182 C0F23608 		movt	r8, 54
 1614 0186 03E0     		b	.L42
 1615              	.LVL150:
 1616              	.L43:
 1617              		.loc 1 755 0 is_stmt 0 discriminator 2
 1618 0188 4046     		mov	r0, r8
 1619 018a FFF7FEFF 		bl	vTaskDelay
 1620              	.LVL151:
 754:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1621              		.loc 1 754 0 is_stmt 1 discriminator 2
 1622 018e 0135     		adds	r5, r5, #1
 1623              	.LVL152:
 1624              	.L42:
 754:src/main.c    ****             vTaskDelay((portTickType)(1000*3600) / portTICK_RATE_MS);
 1625              		.loc 1 754 0 is_stmt 0 discriminator 1
 1626 0190 162D     		cmp	r5, #22
 1627 0192 F9DD     		ble	.L43
 1628 0194 60E7     		b	.L46
 1629              	.L48:
 1630 0196 00BF     		.align	2
 1631              	.L47:
 1632 0198 88000000 		.word	hydroponics+136
 1633              	.LBE14:
 1634              		.cfi_endproc
 1635              	.LFE126:
 1637              		.section	.text.vRTC_Init,"ax",%progbits
 1638              		.align	2
 1639              		.global	vRTC_Init
 1640              		.thumb
 1641              		.thumb_func
 1643              	vRTC_Init:
 1644              	.LFB127:
 756:src/main.c    ****         }
 757:src/main.c    ****     }
 758:src/main.c    ****     vTaskDelete(NULL);
 759:src/main.c    **** }
 760:src/main.c    **** 
 761:src/main.c    **** 
 762:src/main.c    **** typedef struct {
 763:src/main.c    ****     char ucMessageID;
 764:src/main.c    ****     //char u
 765:src/main.c    **** 
 766:src/main.c    **** } command_data;
 767:src/main.c    **** 
 768:src/main.c    **** #define HEX_2_DEC(val) (((val)/16)*10+((val)%16))
 769:src/main.c    **** 
 770:src/main.c    **** void vRTC_Init(void) {
 1645              		.loc 1 770 0 is_stmt 1
 1646              		.cfi_startproc
 1647              		@ args = 0, pretend = 0, frame = 24
 1648              		@ frame_needed = 0, uses_anonymous_args = 0
 1649 0000 30B5     		push	{r4, r5, lr}
 1650              	.LCFI26:
 1651              		.cfi_def_cfa_offset 12
 1652              		.cfi_offset 4, -12
 1653              		.cfi_offset 5, -8
 1654              		.cfi_offset 14, -4
 1655 0002 87B0     		sub	sp, sp, #28
 1656              	.LCFI27:
 1657              		.cfi_def_cfa_offset 40
 771:src/main.c    ****     RTC_InitTypeDef RTC_InitStructure;
 772:src/main.c    ****     RTC_TimeTypeDef RTC_TimeStructure;
 773:src/main.c    ****     RTC_DateTypeDef RTC_DateStructure;
 774:src/main.c    **** 
 775:src/main.c    ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR, ENABLE);
 1658              		.loc 1 775 0
 1659 0004 4FF08050 		mov	r0, #268435456
 1660 0008 0121     		movs	r1, #1
 1661 000a FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1662              	.LVL153:
 776:src/main.c    ****     PWR_BackupAccessCmd(ENABLE);
 1663              		.loc 1 776 0
 1664 000e 0120     		movs	r0, #1
 1665 0010 FFF7FEFF 		bl	PWR_BackupAccessCmd
 1666              	.LVL154:
 777:src/main.c    **** 
 778:src/main.c    ****     RCC_LSICmd(ENABLE);
 1667              		.loc 1 778 0
 1668 0014 0120     		movs	r0, #1
 1669 0016 FFF7FEFF 		bl	RCC_LSICmd
 1670              	.LVL155:
 779:src/main.c    ****     while(RCC_GetFlagStatus(RCC_FLAG_LSIRDY) == RESET);
 1671              		.loc 1 779 0
 1672 001a 6124     		movs	r4, #97
 1673              	.L50:
 1674              		.loc 1 779 0 is_stmt 0 discriminator 1
 1675 001c 2046     		mov	r0, r4
 1676 001e FFF7FEFF 		bl	RCC_GetFlagStatus
 1677              	.LVL156:
 1678 0022 0028     		cmp	r0, #0
 1679 0024 FAD0     		beq	.L50
 780:src/main.c    ****     RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 1680              		.loc 1 780 0 is_stmt 1
 1681 0026 4FF40070 		mov	r0, #512
 1682 002a FFF7FEFF 		bl	RCC_RTCCLKConfig
 1683              	.LVL157:
 781:src/main.c    ****     RCC_RTCCLKCmd(ENABLE);
 1684              		.loc 1 781 0
 1685 002e 0120     		movs	r0, #1
 1686 0030 FFF7FEFF 		bl	RCC_RTCCLKCmd
 1687              	.LVL158:
 782:src/main.c    ****     RTC_WaitForSynchro();
 1688              		.loc 1 782 0
 1689 0034 FFF7FEFF 		bl	RTC_WaitForSynchro
 1690              	.LVL159:
 783:src/main.c    **** 
 784:src/main.c    ****     if (RTC_ReadBackupRegister(RTC_BKP_DR0)!=0x9527) {
 1691              		.loc 1 784 0
 1692 0038 0020     		movs	r0, #0
 1693 003a FFF7FEFF 		bl	RTC_ReadBackupRegister
 1694              	.LVL160:
 1695 003e 49F22753 		movw	r3, #38183
 1696 0042 9842     		cmp	r0, r3
 1697 0044 39D0     		beq	.L51
 785:src/main.c    ****         RTC_WriteProtectionCmd(DISABLE); 
 1698              		.loc 1 785 0
 1699 0046 0020     		movs	r0, #0
 1700 0048 FFF7FEFF 		bl	RTC_WriteProtectionCmd
 1701              	.LVL161:
 786:src/main.c    ****         RTC_EnterInitMode();
 1702              		.loc 1 786 0
 1703 004c FFF7FEFF 		bl	RTC_EnterInitMode
 1704              	.LVL162:
 787:src/main.c    **** 
 788:src/main.c    ****         RTC_InitStructure.RTC_HourFormat = RTC_HourFormat_24;
 1705              		.loc 1 788 0
 1706 0050 0024     		movs	r4, #0
 1707 0052 0394     		str	r4, [sp, #12]
 789:src/main.c    ****         RTC_InitStructure.RTC_AsynchPrediv = 0x7D-1;
 1708              		.loc 1 789 0
 1709 0054 7C23     		movs	r3, #124
 1710 0056 0493     		str	r3, [sp, #16]
 790:src/main.c    ****         RTC_InitStructure.RTC_SynchPrediv = 0xFF-1;
 1711              		.loc 1 790 0
 1712 0058 FE23     		movs	r3, #254
 1713 005a 0593     		str	r3, [sp, #20]
 791:src/main.c    ****         RTC_Init(&RTC_InitStructure);
 1714              		.loc 1 791 0
 1715 005c 03A8     		add	r0, sp, #12
 1716 005e FFF7FEFF 		bl	RTC_Init
 1717              	.LVL163:
 792:src/main.c    **** 
 793:src/main.c    ****         RTC_TimeStructure.RTC_Seconds = 0x00;
 1718              		.loc 1 793 0
 1719 0062 8DF80A40 		strb	r4, [sp, #10]
 794:src/main.c    ****         RTC_TimeStructure.RTC_Minutes = 0x01;
 1720              		.loc 1 794 0
 1721 0066 0125     		movs	r5, #1
 1722 0068 8DF80950 		strb	r5, [sp, #9]
 795:src/main.c    ****         RTC_TimeStructure.RTC_Hours = 0x01;
 1723              		.loc 1 795 0
 1724 006c 8DF80850 		strb	r5, [sp, #8]
 796:src/main.c    ****         RTC_TimeStructure.RTC_H12 = RTC_H12_AM;
 1725              		.loc 1 796 0
 1726 0070 8DF80B40 		strb	r4, [sp, #11]
 797:src/main.c    ****         RTC_SetTime(RTC_Format_BCD,&RTC_TimeStructure);
 1727              		.loc 1 797 0
 1728 0074 2846     		mov	r0, r5
 1729 0076 02A9     		add	r1, sp, #8
 1730 0078 FFF7FEFF 		bl	RTC_SetTime
 1731              	.LVL164:
 798:src/main.c    **** 
 799:src/main.c    ****         RTC_DateStructure.RTC_Date = 30;
 1732              		.loc 1 799 0
 1733 007c 1E23     		movs	r3, #30
 1734 007e 8DF80630 		strb	r3, [sp, #6]
 800:src/main.c    ****         RTC_DateStructure.RTC_Month = 5;
 1735              		.loc 1 800 0
 1736 0082 0523     		movs	r3, #5
 1737 0084 8DF80530 		strb	r3, [sp, #5]
 801:src/main.c    ****         RTC_DateStructure.RTC_WeekDay= RTC_Weekday_Thursday;
 1738              		.loc 1 801 0
 1739 0088 0423     		movs	r3, #4
 1740 008a 8DF80430 		strb	r3, [sp, #4]
 802:src/main.c    ****         RTC_DateStructure.RTC_Year = 12;
 1741              		.loc 1 802 0
 1742 008e 0C23     		movs	r3, #12
 1743 0090 8DF80730 		strb	r3, [sp, #7]
 803:src/main.c    ****         RTC_SetDate(RTC_Format_BCD,&RTC_DateStructure);
 1744              		.loc 1 803 0
 1745 0094 2846     		mov	r0, r5
 1746 0096 01A9     		add	r1, sp, #4
 1747 0098 FFF7FEFF 		bl	RTC_SetDate
 1748              	.LVL165:
 804:src/main.c    **** 
 805:src/main.c    ****         RTC_ExitInitMode();
 1749              		.loc 1 805 0
 1750 009c FFF7FEFF 		bl	RTC_ExitInitMode
 1751              	.LVL166:
 806:src/main.c    ****         RTC_WriteBackupRegister(RTC_BKP_DR0,0X9527);
 1752              		.loc 1 806 0
 1753 00a0 2046     		mov	r0, r4
 1754 00a2 49F22751 		movw	r1, #38183
 1755 00a6 FFF7FEFF 		bl	RTC_WriteBackupRegister
 1756              	.LVL167:
 807:src/main.c    ****         RTC_WriteProtectionCmd(ENABLE);
 1757              		.loc 1 807 0
 1758 00aa 2846     		mov	r0, r5
 1759 00ac FFF7FEFF 		bl	RTC_WriteProtectionCmd
 1760              	.LVL168:
 808:src/main.c    ****         RTC_WriteBackupRegister(RTC_BKP_DR0,0x9527);  //Initialization is complete, set the flag
 1761              		.loc 1 808 0
 1762 00b0 2046     		mov	r0, r4
 1763 00b2 49F22751 		movw	r1, #38183
 1764 00b6 FFF7FEFF 		bl	RTC_WriteBackupRegister
 1765              	.LVL169:
 1766              	.L51:
 809:src/main.c    ****     }
 810:src/main.c    **** 
 811:src/main.c    ****       PWR_BackupAccessCmd(DISABLE);
 1767              		.loc 1 811 0
 1768 00ba 0020     		movs	r0, #0
 1769 00bc FFF7FEFF 		bl	PWR_BackupAccessCmd
 1770              	.LVL170:
 812:src/main.c    **** }
 1771              		.loc 1 812 0
 1772 00c0 07B0     		add	sp, sp, #28
 1773              		@ sp needed
 1774 00c2 30BD     		pop	{r4, r5, pc}
 1775              		.cfi_endproc
 1776              	.LFE127:
 1778              		.section	.text.vIncrementDay,"ax",%progbits
 1779              		.align	2
 1780              		.global	vIncrementDay
 1781              		.thumb
 1782              		.thumb_func
 1784              	vIncrementDay:
 1785              	.LFB128:
 813:src/main.c    **** //Main Function
 814:src/main.c    **** 
 815:src/main.c    **** void vIncrementDay(void) {
 1786              		.loc 1 815 0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 8
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 1790 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1791              	.LCFI28:
 1792              		.cfi_def_cfa_offset 32
 1793              		.cfi_offset 4, -32
 1794              		.cfi_offset 5, -28
 1795              		.cfi_offset 6, -24
 1796              		.cfi_offset 7, -20
 1797              		.cfi_offset 8, -16
 1798              		.cfi_offset 9, -12
 1799              		.cfi_offset 10, -8
 1800              		.cfi_offset 14, -4
 1801 0004 82B0     		sub	sp, sp, #8
 1802              	.LCFI29:
 1803              		.cfi_def_cfa_offset 40
 816:src/main.c    ****     RTC_TimeTypeDef t;
 817:src/main.c    ****     portTickType xLastWake = xTaskGetTickCount();
 1804              		.loc 1 817 0
 1805 0006 FFF7FEFF 		bl	xTaskGetTickCount
 1806              	.LVL171:
 1807 000a 0DF10809 		add	r9, sp, #8
 1808 000e 49F8080D 		str	r0, [r9, #-8]!
 1809              	.LBB18:
 818:src/main.c    **** 
 819:src/main.c    **** 
 820:src/main.c    ****     while(1) {
 821:src/main.c    ****         int i;
 822:src/main.c    ****         for(i=0; i<23; i++){
 1810              		.loc 1 822 0
 1811 0012 0025     		movs	r5, #0
 823:src/main.c    ****             /*
 824:src/main.c    ****             USART_rtos_packet packet;
 825:src/main.c    ****             packet.USARTx_rtos = &USART1_rtos; 
 826:src/main.c    **** */
 827:src/main.c    ****             vTaskDelayUntil(&xLastWake, ((1000*3600) / portTICK_RATE_MS));
 1812              		.loc 1 827 0
 1813 0014 4EF6806A 		movw	r10, #61056
 1814 0018 C0F2360A 		movt	r10, 54
 828:src/main.c    ****             xLastWake = xTaskGetTickCount();
 829:src/main.c    ****             RTC_GetTime(RTC_Format_BIN, &t);
 830:src/main.c    **** 
 831:src/main.c    ****             USART_put_int(USART1, t.RTC_Hours);
 1815              		.loc 1 831 0
 1816 001c 4FF48054 		mov	r4, #4096
 1817 0020 C4F20104 		movt	r4, 16385
 832:src/main.c    ****             USART_put(USART1, ':');
 833:src/main.c    ****             USART_put_int(USART1, t.RTC_Minutes);
 834:src/main.c    ****             USART_puts(USART1, " (");
 1818              		.loc 1 834 0
 1819 0024 40F20008 		movw	r8, #:lower16:.LC16
 1820 0028 C0F20008 		movt	r8, #:upper16:.LC16
 835:src/main.c    ****             USART_put_int(USART1, i);
 836:src/main.c    ****             USART_puts(USART1, ")\r\n");
 1821              		.loc 1 836 0
 1822 002c 40F20007 		movw	r7, #:lower16:.LC17
 1823 0030 C0F20007 		movt	r7, #:upper16:.LC17
 837:src/main.c    **** 
 838:src/main.c    **** 
 839:src/main.c    ****            /* 
 840:src/main.c    ****             char buffer[60]; 
 841:src/main.c    ****             packet.msg = buffer;
 842:src/main.c    ****             USART_rtos_sputs(&packet, "HELLO%d\r\n", 69);
 843:src/main.c    **** */
 844:src/main.c    **** 
 845:src/main.c    ****             //USART_rtos_sputs(&packet, "%d:%d (%d)\r\n", t.RTC_Hours, t.RTC_Minutes, i);
 846:src/main.c    **** //            USART_rtos_wait_send(&packet);
 847:src/main.c    **** 
 848:src/main.c    **** 
 849:src/main.c    ****            
 850:src/main.c    ****             //USART_puts(USART1, "5\r\n");
 851:src/main.c    **** 
 852:src/main.c    ****         }
 853:src/main.c    ****         USART_puts(USART1, "=----DONE----=\r\n");
 1824              		.loc 1 853 0
 1825 0034 40F20006 		movw	r6, #:lower16:.LC18
 1826 0038 C0F20006 		movt	r6, #:upper16:.LC18
 1827 003c 25E0     		b	.L57
 1828              	.LVL172:
 1829              	.L55:
 827:src/main.c    ****             xLastWake = xTaskGetTickCount();
 1830              		.loc 1 827 0 discriminator 2
 1831 003e 6846     		mov	r0, sp
 1832 0040 5146     		mov	r1, r10
 1833 0042 FFF7FEFF 		bl	vTaskDelayUntil
 1834              	.LVL173:
 828:src/main.c    ****             RTC_GetTime(RTC_Format_BIN, &t);
 1835              		.loc 1 828 0 discriminator 2
 1836 0046 FFF7FEFF 		bl	xTaskGetTickCount
 1837              	.LVL174:
 1838 004a 0090     		str	r0, [sp]
 829:src/main.c    **** 
 1839              		.loc 1 829 0 discriminator 2
 1840 004c 0020     		movs	r0, #0
 1841 004e 01A9     		add	r1, sp, #4
 1842 0050 FFF7FEFF 		bl	RTC_GetTime
 1843              	.LVL175:
 831:src/main.c    ****             USART_put(USART1, ':');
 1844              		.loc 1 831 0 discriminator 2
 1845 0054 2046     		mov	r0, r4
 1846 0056 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 1847 005a FFF7FEFF 		bl	USART_put_int
 1848              	.LVL176:
 832:src/main.c    ****             USART_put_int(USART1, t.RTC_Minutes);
 1849              		.loc 1 832 0 discriminator 2
 1850 005e 2046     		mov	r0, r4
 1851 0060 3A21     		movs	r1, #58
 1852 0062 FFF7FEFF 		bl	USART_put
 1853              	.LVL177:
 833:src/main.c    ****             USART_puts(USART1, " (");
 1854              		.loc 1 833 0 discriminator 2
 1855 0066 2046     		mov	r0, r4
 1856 0068 9DF80510 		ldrb	r1, [sp, #5]	@ zero_extendqisi2
 1857 006c FFF7FEFF 		bl	USART_put_int
 1858              	.LVL178:
 834:src/main.c    ****             USART_put_int(USART1, i);
 1859              		.loc 1 834 0 discriminator 2
 1860 0070 2046     		mov	r0, r4
 1861 0072 4146     		mov	r1, r8
 1862 0074 FFF7FEFF 		bl	USART_puts
 1863              	.LVL179:
 835:src/main.c    ****             USART_puts(USART1, ")\r\n");
 1864              		.loc 1 835 0 discriminator 2
 1865 0078 2046     		mov	r0, r4
 1866 007a 2946     		mov	r1, r5
 1867 007c FFF7FEFF 		bl	USART_put_int
 1868              	.LVL180:
 836:src/main.c    **** 
 1869              		.loc 1 836 0 discriminator 2
 1870 0080 2046     		mov	r0, r4
 1871 0082 3946     		mov	r1, r7
 1872 0084 FFF7FEFF 		bl	USART_puts
 1873              	.LVL181:
 822:src/main.c    ****             /*
 1874              		.loc 1 822 0 discriminator 2
 1875 0088 0135     		adds	r5, r5, #1
 1876              	.LVL182:
 1877              	.L57:
 822:src/main.c    ****             /*
 1878              		.loc 1 822 0 is_stmt 0 discriminator 1
 1879 008a 162D     		cmp	r5, #22
 1880 008c D7DD     		ble	.L55
 1881              		.loc 1 853 0 is_stmt 1
 1882 008e 2046     		mov	r0, r4
 1883 0090 3146     		mov	r1, r6
 1884 0092 FFF7FEFF 		bl	USART_puts
 1885              	.LVL183:
 822:src/main.c    ****             /*
 1886              		.loc 1 822 0
 1887 0096 0025     		movs	r5, #0
 1888              	.LVL184:
 1889              	.LBE18:
 854:src/main.c    ****     }
 1890              		.loc 1 854 0
 1891 0098 F7E7     		b	.L57
 1892              		.cfi_endproc
 1893              	.LFE128:
 1895 009a 00BF     		.section	.text.main,"ax",%progbits
 1896              		.align	2
 1897              		.global	main
 1898              		.thumb
 1899              		.thumb_func
 1901              	main:
 1902              	.LFB129:
 855:src/main.c    **** }
 856:src/main.c    **** 
 857:src/main.c    **** int main(void){
 1903              		.loc 1 857 0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 48
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1908              	.LCFI30:
 1909              		.cfi_def_cfa_offset 32
 1910              		.cfi_offset 4, -32
 1911              		.cfi_offset 5, -28
 1912              		.cfi_offset 6, -24
 1913              		.cfi_offset 7, -20
 1914              		.cfi_offset 8, -16
 1915              		.cfi_offset 9, -12
 1916              		.cfi_offset 10, -8
 1917              		.cfi_offset 14, -4
 1918 0004 8CB0     		sub	sp, sp, #48
 1919              	.LCFI31:
 1920              		.cfi_def_cfa_offset 80
 858:src/main.c    **** 	//Call initx(); To Initialize USART & GPIO
 859:src/main.c    **** 
 860:src/main.c    **** 	initx();
 1921              		.loc 1 860 0
 1922 0006 FFF7FEFF 		bl	initx
 1923              	.LVL185:
 861:src/main.c    ****     USART1_Init();
 1924              		.loc 1 861 0
 1925 000a FFF7FEFF 		bl	USART1_Init
 1926              	.LVL186:
 862:src/main.c    ****     init_us_timer();
 1927              		.loc 1 862 0
 1928 000e FFF7FEFF 		bl	init_us_timer
 1929              	.LVL187:
 863:src/main.c    ****     vRTC_Init();
 1930              		.loc 1 863 0
 1931 0012 FFF7FEFF 		bl	vRTC_Init
 1932              	.LVL188:
 864:src/main.c    **** 
 865:src/main.c    **** 
 866:src/main.c    ****     USART_rtos_init(&USART1_rtos, USART1);
 1933              		.loc 1 866 0
 1934 0016 40F20004 		movw	r4, #:lower16:USART1_rtos
 1935 001a C0F20004 		movt	r4, #:upper16:USART1_rtos
 1936 001e 4FF48055 		mov	r5, #4096
 1937 0022 C4F20105 		movt	r5, 16385
 1938 0026 2046     		mov	r0, r4
 1939 0028 2946     		mov	r1, r5
 1940 002a FFF7FEFF 		bl	USART_rtos_init
 1941              	.LVL189:
 867:src/main.c    ****     setup_output(&USART1_rtos);
 1942              		.loc 1 867 0
 1943 002e 2046     		mov	r0, r4
 1944 0030 FFF7FEFF 		bl	setup_output
 1945              	.LVL190:
 868:src/main.c    **** 
 869:src/main.c    ****     //CLOCK_SetClockTo168MHz();
 870:src/main.c    ****    // setSysTick();
 871:src/main.c    **** 
 872:src/main.c    ****     int i;
 873:src/main.c    **** 
 874:src/main.c    ****     USART_puts(USART1, "\nBooting up...\r\n");
 1946              		.loc 1 874 0
 1947 0034 2846     		mov	r0, r5
 1948 0036 40F20001 		movw	r1, #:lower16:.LC19
 1949 003a C0F20001 		movt	r1, #:upper16:.LC19
 1950 003e FFF7FEFF 		bl	USART_puts
 1951              	.LVL191:
 875:src/main.c    ****     for(i=0; i<2; i++) { 
 1952              		.loc 1 875 0
 1953 0042 0025     		movs	r5, #0
 876:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 1954              		.loc 1 876 0
 1955 0044 4FF44064 		mov	r4, #3072
 1956 0048 C4F20204 		movt	r4, 16386
 1957 004c 4FF4805A 		mov	r10, #4096
 877:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
 1958              		.loc 1 877 0
 1959 0050 4FF40059 		mov	r9, #8192
 878:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
 1960              		.loc 1 878 0
 1961 0054 4FF48048 		mov	r8, #16384
 879:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
 1962              		.loc 1 879 0
 1963 0058 4FF40047 		mov	r7, #32768
 880:src/main.c    ****         delay_ms(500);
 1964              		.loc 1 880 0
 1965 005c 4FF4FA76 		mov	r6, #500
 875:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 1966              		.loc 1 875 0
 1967 0060 1BE0     		b	.L59
 1968              	.LVL192:
 1969              	.L60:
 876:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
 1970              		.loc 1 876 0 discriminator 2
 1971 0062 2046     		mov	r0, r4
 1972 0064 5146     		mov	r1, r10
 1973 0066 FFF7FEFF 		bl	GPIO_SetBits
 1974              	.LVL193:
 877:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
 1975              		.loc 1 877 0 discriminator 2
 1976 006a 2046     		mov	r0, r4
 1977 006c 4946     		mov	r1, r9
 1978 006e FFF7FEFF 		bl	GPIO_SetBits
 1979              	.LVL194:
 878:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
 1980              		.loc 1 878 0 discriminator 2
 1981 0072 2046     		mov	r0, r4
 1982 0074 4146     		mov	r1, r8
 1983 0076 FFF7FEFF 		bl	GPIO_SetBits
 1984              	.LVL195:
 879:src/main.c    ****         delay_ms(500);
 1985              		.loc 1 879 0 discriminator 2
 1986 007a 2046     		mov	r0, r4
 1987 007c 3946     		mov	r1, r7
 1988 007e FFF7FEFF 		bl	GPIO_SetBits
 1989              	.LVL196:
 1990              		.loc 1 880 0 discriminator 2
 1991 0082 3046     		mov	r0, r6
 1992 0084 FFF7FEFF 		bl	delay_ms
 1993              	.LVL197:
 881:src/main.c    **** 
 882:src/main.c    ****         GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 1994              		.loc 1 882 0 discriminator 2
 1995 0088 2046     		mov	r0, r4
 1996 008a 4FF47041 		mov	r1, #61440
 1997 008e FFF7FEFF 		bl	GPIO_ResetBits
 1998              	.LVL198:
 883:src/main.c    ****         delay_ms(500);
 1999              		.loc 1 883 0 discriminator 2
 2000 0092 3046     		mov	r0, r6
 2001 0094 FFF7FEFF 		bl	delay_ms
 2002              	.LVL199:
 875:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 2003              		.loc 1 875 0 discriminator 2
 2004 0098 0135     		adds	r5, r5, #1
 2005              	.LVL200:
 2006              	.L59:
 875:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 2007              		.loc 1 875 0 is_stmt 0 discriminator 1
 2008 009a 012D     		cmp	r5, #1
 2009 009c E1DD     		ble	.L60
 884:src/main.c    ****     }
 885:src/main.c    **** 
 886:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 2010              		.loc 1 886 0 is_stmt 1
 2011 009e 1020     		movs	r0, #16
 2012 00a0 0121     		movs	r1, #1
 2013 00a2 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 2014              	.LVL201:
 887:src/main.c    **** 
 888:src/main.c    **** 
 889:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
 890:src/main.c    **** 
 891:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_5; 
 2015              		.loc 1 891 0
 2016 00a6 2027     		movs	r7, #32
 2017 00a8 0A97     		str	r7, [sp, #40]
 892:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; 
 2018              		.loc 1 892 0
 2019 00aa 0026     		movs	r6, #0
 2020 00ac 8DF82E60 		strb	r6, [sp, #46]
 893:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT; 
 2021              		.loc 1 893 0
 2022 00b0 0125     		movs	r5, #1
 2023              	.LVL202:
 2024 00b2 8DF82C50 		strb	r5, [sp, #44]
 894:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 2025              		.loc 1 894 0
 2026 00b6 0223     		movs	r3, #2
 2027 00b8 8DF82D30 		strb	r3, [sp, #45]
 895:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ppump);
 2028              		.loc 1 895 0
 2029 00bc 4FF48054 		mov	r4, #4096
 2030 00c0 C4F20204 		movt	r4, 16386
 2031 00c4 2046     		mov	r0, r4
 2032 00c6 0AA9     		add	r1, sp, #40
 2033 00c8 FFF7FEFF 		bl	GPIO_Init
 2034              	.LVL203:
 896:src/main.c    **** 
 897:src/main.c    ****     GPIO_ResetBits(GPIOE, GPIO_Pin_5);
 2035              		.loc 1 897 0
 2036 00cc 2046     		mov	r0, r4
 2037 00ce 3946     		mov	r1, r7
 2038 00d0 FFF7FEFF 		bl	GPIO_ResetBits
 2039              	.LVL204:
 898:src/main.c    **** 
 899:src/main.c    **** 
 900:src/main.c    **** /*
 901:src/main.c    ****     RTC_TimeTypeDef t;
 902:src/main.c    ****     for(i=0; i<10; i++) {
 903:src/main.c    ****         RTC_GetTime(RTC_Format_BIN, &t);
 904:src/main.c    ****         USART_put_int(USART1, t.RTC_Seconds);
 905:src/main.c    ****         USART_puts(USART1, "\r\n");
 906:src/main.c    ****         delay_ms(1000);
 907:src/main.c    ****     }
 908:src/main.c    **** 
 909:src/main.c    ****     USART_puts(USART1, "======\r\n");
 910:src/main.c    **** */
 911:src/main.c    **** /*
 912:src/main.c    ****     GPIO_InitTypeDef gpio_ppump;
 913:src/main.c    **** 
 914:src/main.c    ****     gpio_ppump.GPIO_Pin = GPIO_Pin_6; 
 915:src/main.c    ****     gpio_ppump.GPIO_OType = GPIO_OType_PP; 
 916:src/main.c    ****     gpio_ppump.GPIO_Mode = GPIO_Mode_OUT; 
 917:src/main.c    ****     gpio_ppump.GPIO_Speed = GPIO_Speed_50MHz;
 918:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ppump);
 919:src/main.c    **** 
 920:src/main.c    **** 
 921:src/main.c    ****     PPump_Typedef ppump;
 922:src/main.c    ****     ppump.pin_out = GPIO_Pin_6;
 923:src/main.c    ****     ppump.port_out = GPIOE;
 924:src/main.c    ****     ppump.ml_per_m = 60;
 925:src/main.c    **** 
 926:src/main.c    ****         USART_puts(USART1, "DISPENSING...\r\n");
 927:src/main.c    ****         GPIO_SetBits(GPIOE, GPIO_Pin_6);
 928:src/main.c    **** 
 929:src/main.c    **** */
 930:src/main.c    **** 
 931:src/main.c    **** 
 932:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 2040              		.loc 1 932 0
 2041 00d4 0420     		movs	r0, #4
 2042 00d6 2946     		mov	r1, r5
 2043 00d8 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 2044              	.LVL205:
 933:src/main.c    **** 
 934:src/main.c    ****     GPIO_InitTypeDef gpio_ultrasonic;
 935:src/main.c    **** 
 936:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_7; //echo
 2045              		.loc 1 936 0
 2046 00dc 8027     		movs	r7, #128
 2047 00de 0897     		str	r7, [sp, #32]
 937:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP;
 2048              		.loc 1 937 0
 2049 00e0 8DF82660 		strb	r6, [sp, #38]
 938:src/main.c    ****     //gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_DOWN;
 939:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 2050              		.loc 1 939 0
 2051 00e4 8DF82460 		strb	r6, [sp, #36]
 940:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_100MHz;
 2052              		.loc 1 940 0
 2053 00e8 0323     		movs	r3, #3
 2054 00ea 8DF82530 		strb	r3, [sp, #37]
 941:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ultrasonic);
 2055              		.loc 1 941 0
 2056 00ee 2046     		mov	r0, r4
 2057 00f0 08A9     		add	r1, sp, #32
 2058 00f2 FFF7FEFF 		bl	GPIO_Init
 2059              	.LVL206:
 942:src/main.c    **** 
 943:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_8; //trigger
 2060              		.loc 1 943 0
 2061 00f6 4FF48076 		mov	r6, #256
 2062 00fa 0896     		str	r6, [sp, #32]
 944:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 2063              		.loc 1 944 0
 2064 00fc 8DF82450 		strb	r5, [sp, #36]
 945:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ultrasonic);
 2065              		.loc 1 945 0
 2066 0100 2046     		mov	r0, r4
 2067 0102 08A9     		add	r1, sp, #32
 2068 0104 FFF7FEFF 		bl	GPIO_Init
 2069              	.LVL207:
 946:src/main.c    **** 
 947:src/main.c    **** 
 948:src/main.c    **** 
 949:src/main.c    ****     UDS_Module uds;
 950:src/main.c    **** 
 951:src/main.c    ****     uds.port_in = GPIOE;
 2070              		.loc 1 951 0
 2071 0108 0194     		str	r4, [sp, #4]
 952:src/main.c    ****     uds.pin_in = GPIO_Pin_7;
 2072              		.loc 1 952 0
 2073 010a ADF80C70 		strh	r7, [sp, #12]	@ movhi
 953:src/main.c    ****     uds.port_out = GPIOE;
 2074              		.loc 1 953 0
 2075 010e 0294     		str	r4, [sp, #8]
 954:src/main.c    ****     uds.pin_out = GPIO_Pin_8;
 2076              		.loc 1 954 0
 2077 0110 ADF80E60 		strh	r6, [sp, #14]	@ movhi
 955:src/main.c    ****     uds.timeout = 500;
 2078              		.loc 1 955 0
 2079 0114 4FF4FA73 		mov	r3, #500
 2080 0118 ADF81030 		strh	r3, [sp, #16]	@ movhi
 956:src/main.c    **** 
 957:src/main.c    ****     UDS_Module_Init(&uds);
 2081              		.loc 1 957 0
 2082 011c 01A8     		add	r0, sp, #4
 2083 011e FFF7FEFF 		bl	UDS_Module_Init
 2084              	.LVL208:
 958:src/main.c    **** 
 959:src/main.c    **** 
 960:src/main.c    ****     USART_puts(USART1, "Starting UDS...\r\n");
 2085              		.loc 1 960 0
 2086 0122 4FF48050 		mov	r0, #4096
 2087 0126 C4F20100 		movt	r0, 16385
 2088 012a 40F20001 		movw	r1, #:lower16:.LC20
 2089 012e C0F20001 		movt	r1, #:upper16:.LC20
 2090 0132 FFF7FEFF 		bl	USART_puts
 2091              	.LVL209:
 2092              	.LBB19:
 961:src/main.c    ****     while(1) {
 962:src/main.c    ****         int d = UDS_Module_distance(&uds);
 963:src/main.c    ****         USART_puts(USART1, "Distance: ");
 2093              		.loc 1 963 0
 2094 0136 4FF48054 		mov	r4, #4096
 2095 013a C4F20104 		movt	r4, 16385
 2096 013e 40F20007 		movw	r7, #:lower16:.LC21
 2097 0142 C0F20007 		movt	r7, #:upper16:.LC21
 964:src/main.c    ****         USART_put_int(USART1, d);
 965:src/main.c    ****         USART_puts(USART1, "\r\n");
 2098              		.loc 1 965 0
 2099 0146 40F20006 		movw	r6, #:lower16:.LC0
 2100 014a C0F20006 		movt	r6, #:upper16:.LC0
 966:src/main.c    ****         delay_ms(1000);
 2101              		.loc 1 966 0
 2102 014e 4FF47A78 		mov	r8, #1000
 2103              	.L61:
 962:src/main.c    ****         USART_puts(USART1, "Distance: ");
 2104              		.loc 1 962 0 discriminator 1
 2105 0152 01A8     		add	r0, sp, #4
 2106 0154 FFF7FEFF 		bl	UDS_Module_distance
 2107              	.LVL210:
 2108 0158 0546     		mov	r5, r0
 2109              	.LVL211:
 963:src/main.c    ****         USART_put_int(USART1, d);
 2110              		.loc 1 963 0 discriminator 1
 2111 015a 2046     		mov	r0, r4
 2112              	.LVL212:
 2113 015c 3946     		mov	r1, r7
 2114 015e FFF7FEFF 		bl	USART_puts
 2115              	.LVL213:
 964:src/main.c    ****         USART_puts(USART1, "\r\n");
 2116              		.loc 1 964 0 discriminator 1
 2117 0162 2046     		mov	r0, r4
 2118 0164 2946     		mov	r1, r5
 2119 0166 FFF7FEFF 		bl	USART_put_int
 2120              	.LVL214:
 965:src/main.c    ****         delay_ms(1000);
 2121              		.loc 1 965 0 discriminator 1
 2122 016a 2046     		mov	r0, r4
 2123 016c 3146     		mov	r1, r6
 2124 016e FFF7FEFF 		bl	USART_puts
 2125              	.LVL215:
 2126              		.loc 1 966 0 discriminator 1
 2127 0172 4046     		mov	r0, r8
 2128 0174 FFF7FEFF 		bl	delay_ms
 2129              	.LVL216:
 2130 0178 EBE7     		b	.L61
 2131              	.LBE19:
 2132              		.cfi_endproc
 2133              	.LFE129:
 2135              		.global	TEST_PH_VALUE
 2136              		.comm	AC,76,4
 2137              		.comm	lighting,28,4
 2138              		.comm	hydroponics,156,4
 2139              		.comm	USART2_rtos,328,4
 2140              		.comm	USART1_rtos,328,4
 2141 017a 00BF     		.section	.bss.count.9746,"aw",%nobits
 2142              		.align	2
 2143              		.set	.LANCHOR1,. + 0
 2146              	count.9746:
 2147 0000 00000000 		.space	4
 2148              		.section	.rodata.str1.4,"aMS",%progbits,1
 2149              		.align	2
 2150              	.LC0:
 2151 0000 0D0A00   		.ascii	"\015\012\000"
 2152 0003 00       		.space	1
 2153              	.LC1:
 2154 0004 76555341 		.ascii	"vUSART_command_handler\000"
 2154      52545F63 
 2154      6F6D6D61 
 2154      6E645F68 
 2154      616E646C 
 2155 001b 00       		.space	1
 2156              	.LC2:
 2157 001c 496E6974 		.ascii	"Init AC System...\000"
 2157      20414320 
 2157      53797374 
 2157      656D2E2E 
 2157      2E00
 2158 002e 0000     		.space	2
 2159              	.LC3:
 2160 0030 204F4B0D 		.ascii	" OK\015\012\000"
 2160      0A00
 2161 0036 0000     		.space	2
 2162              	.LC4:
 2163 0038 20496E69 		.ascii	" Init Hydroponic System...\000"
 2163      74204879 
 2163      64726F70 
 2163      6F6E6963 
 2163      20537973 
 2164 0053 00       		.space	1
 2165              	.LC5:
 2166 0054 204F6B0D 		.ascii	" Ok\015\012\000"
 2166      0A00
 2167 005a 0000     		.space	2
 2168              	.LC6:
 2169 005c 52656164 		.ascii	"Reading Ultrasonic Distance Sensor...\015\012\000"
 2169      696E6720 
 2169      556C7472 
 2169      61736F6E 
 2169      69632044 
 2170              	.LC7:
 2171 0084 0D0A4469 		.ascii	"\015\012Distance: \000"
 2171      7374616E 
 2171      63653A20 
 2171      00
 2172 0091 000000   		.space	3
 2173              	.LC8:
 2174 0094 4655434B 		.ascii	"FUCK\000"
 2174      00
 2175 0099 000000   		.space	3
 2176              	.LC9:
 2177 009c 50482054 		.ascii	"PH Task Launched...\015\012\000"
 2177      61736B20 
 2177      4C61756E 
 2177      63686564 
 2177      2E2E2E0D 
 2178 00b2 0000     		.space	2
 2179              	.LC10:
 2180 00b4 41637175 		.ascii	"Acquired mutex for PHMeter...\015\012\000"
 2180      69726564 
 2180      206D7574 
 2180      65782066 
 2180      6F722050 
 2181              	.LC11:
 2182 00d4 50482052 		.ascii	"PH Read\000"
 2182      65616400 
 2183              	.LC12:
 2184 00dc 50482056 		.ascii	"PH VALUE: %d\015\012\000"
 2184      414C5545 
 2184      3A202564 
 2184      0D0A00
 2185 00eb 00       		.space	1
 2186              	.LC13:
 2187 00ec 41646469 		.ascii	"Adding PH Up...\015\012\000"
 2187      6E672050 
 2187      48205570 
 2187      2E2E2E0D 
 2187      0A00
 2188 00fe 0000     		.space	2
 2189              	.LC14:
 2190 0100 41646469 		.ascii	"Adding PH DOwn...\015\012\000"
 2190      6E672050 
 2190      4820444F 
 2190      776E2E2E 
 2190      2E0D0A00 
 2191              	.LC15:
 2192 0114 53746162 		.ascii	"Stabilized PH...\015\012\000"
 2192      696C697A 
 2192      65642050 
 2192      482E2E2E 
 2192      0D0A00
 2193 0127 00       		.space	1
 2194              	.LC16:
 2195 0128 202800   		.ascii	" (\000"
 2196 012b 00       		.space	1
 2197              	.LC17:
 2198 012c 290D0A00 		.ascii	")\015\012\000"
 2199              	.LC18:
 2200 0130 3D2D2D2D 		.ascii	"=----DONE----=\015\012\000"
 2200      2D444F4E 
 2200      452D2D2D 
 2200      2D3D0D0A 
 2200      00
 2201 0141 000000   		.space	3
 2202              	.LC19:
 2203 0144 0A426F6F 		.ascii	"\012Booting up...\015\012\000"
 2203      74696E67 
 2203      2075702E 
 2203      2E2E0D0A 
 2203      00
 2204 0155 000000   		.space	3
 2205              	.LC20:
 2206 0158 53746172 		.ascii	"Starting UDS...\015\012\000"
 2206      74696E67 
 2206      20554453 
 2206      2E2E2E0D 
 2206      0A00
 2207 016a 0000     		.space	2
 2208              	.LC21:
 2209 016c 44697374 		.ascii	"Distance: \000"
 2209      616E6365 
 2209      3A2000
 2210 0177 00       		.section	.data.TEST_PH_VALUE,"aw",%progbits
 2211              		.align	2
 2212              		.set	.LANCHOR0,. + 0
 2215              	TEST_PH_VALUE:
 2216 0000 32000000 		.word	50
 2217              		.text
 2218              	.Letext0:
 2219              		.file 3 "FreeRTOS/Source/include/projdefs.h"
 2220              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2221              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 2222              		.file 6 "/usr/include/newlib/stdint.h"
 2223              		.file 7 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 2224              		.file 8 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rtc.h"
 2225              		.file 9 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 2226              		.file 10 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 2227              		.file 11 "libs/STM32F4xx_StdPeriph_Driver/inc/misc.h"
 2228              		.file 12 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 2229              		.file 13 "FreeRTOS/Source/include/task.h"
 2230              		.file 14 "FreeRTOS/Source/include/queue.h"
 2231              		.file 15 "FreeRTOS/Source/include/semphr.h"
 2232              		.file 16 "src/module.h"
 2233              		.file 17 "src/usart_rtos.h"
 2234              		.file 18 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
 2235              		.file 19 "src/command_parser.h"
 2236              		.file 20 "src/ustime.h"
 2237              		.file 21 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 2238              		.file 22 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_pwr.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccbUU0Sq.s:20     .text.vUSART_command_handler:0000000000000000 $t
     /tmp/ccbUU0Sq.s:25     .text.vUSART_command_handler:0000000000000000 vUSART_command_handler
     /tmp/ccbUU0Sq.s:59     .text.vPH_read_value:0000000000000000 $t
     /tmp/ccbUU0Sq.s:64     .text.vPH_read_value:0000000000000000 vPH_read_value
     /tmp/ccbUU0Sq.s:2212   .data.TEST_PH_VALUE:0000000000000000 .LANCHOR0
     /tmp/ccbUU0Sq.s:105    .text.setSysTick:0000000000000000 $t
     /tmp/ccbUU0Sq.s:110    .text.setSysTick:0000000000000000 setSysTick
     /tmp/ccbUU0Sq.s:161    .text.idle_blinky:0000000000000000 $t
     /tmp/ccbUU0Sq.s:166    .text.idle_blinky:0000000000000000 idle_blinky
     /tmp/ccbUU0Sq.s:249    .text.USART1_IRQHandler:0000000000000000 $t
     /tmp/ccbUU0Sq.s:254    .text.USART1_IRQHandler:0000000000000000 USART1_IRQHandler
                            *COM*:0000000000000148 USART1_rtos
     /tmp/ccbUU0Sq.s:2143   .bss.count.9746:0000000000000000 .LANCHOR1
     /tmp/ccbUU0Sq.s:2150   .rodata.str1.4:0000000000000000 .LC0
     /tmp/ccbUU0Sq.s:2153   .rodata.str1.4:0000000000000004 .LC1
     /tmp/ccbUU0Sq.s:441    .text.USART1_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:446    .text.USART1_Init:0000000000000000 USART1_Init
     /tmp/ccbUU0Sq.s:557    .text.initx:0000000000000000 $t
     /tmp/ccbUU0Sq.s:562    .text.initx:0000000000000000 initx
     /tmp/ccbUU0Sq.s:697    .text.TIM_PWM_init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:702    .text.TIM_PWM_init:0000000000000000 TIM_PWM_init
     /tmp/ccbUU0Sq.s:800    .text.vACSystem_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:805    .text.vACSystem_Init:0000000000000000 vACSystem_Init
     /tmp/ccbUU0Sq.s:2156   .rodata.str1.4:000000000000001c .LC2
                            *COM*:000000000000004c AC
     /tmp/ccbUU0Sq.s:2159   .rodata.str1.4:0000000000000030 .LC3
     /tmp/ccbUU0Sq.s:867    .text.vLightingSystem_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:872    .text.vLightingSystem_Init:0000000000000000 vLightingSystem_Init
                            *COM*:000000000000001c lighting
     /tmp/ccbUU0Sq.s:898    .text.HydroponicUDS_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:903    .text.HydroponicUDS_Init:0000000000000000 HydroponicUDS_Init
                            *COM*:000000000000009c hydroponics
     /tmp/ccbUU0Sq.s:988    .text.HydroponicPPumps_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:993    .text.HydroponicPPumps_Init:0000000000000000 HydroponicPPumps_Init
     /tmp/ccbUU0Sq.s:1071   .text.vHydroponicSystem_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1076   .text.vHydroponicSystem_Init:0000000000000000 vHydroponicSystem_Init
     /tmp/ccbUU0Sq.s:2162   .rodata.str1.4:0000000000000038 .LC4
     /tmp/ccbUU0Sq.s:2165   .rodata.str1.4:0000000000000054 .LC5
     /tmp/ccbUU0Sq.s:1194   .text.vLight_task:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1199   .text.vLight_task:0000000000000000 vLight_task
     /tmp/ccbUU0Sq.s:1241   .text.vUDS_read_distance:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1246   .text.vUDS_read_distance:0000000000000000 vUDS_read_distance
     /tmp/ccbUU0Sq.s:2168   .rodata.str1.4:000000000000005c .LC6
     /tmp/ccbUU0Sq.s:2170   .rodata.str1.4:0000000000000084 .LC7
     /tmp/ccbUU0Sq.s:2173   .rodata.str1.4:0000000000000094 .LC8
     /tmp/ccbUU0Sq.s:1325   .text.vPPump_dispense:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1330   .text.vPPump_dispense:0000000000000000 vPPump_dispense
     /tmp/ccbUU0Sq.s:1373   .text.vPH_task:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1378   .text.vPH_task:0000000000000000 vPH_task
     /tmp/ccbUU0Sq.s:2176   .rodata.str1.4:000000000000009c .LC9
     /tmp/ccbUU0Sq.s:2179   .rodata.str1.4:00000000000000b4 .LC10
     /tmp/ccbUU0Sq.s:2181   .rodata.str1.4:00000000000000d4 .LC11
     /tmp/ccbUU0Sq.s:2183   .rodata.str1.4:00000000000000dc .LC12
     /tmp/ccbUU0Sq.s:2191   .rodata.str1.4:0000000000000114 .LC15
     /tmp/ccbUU0Sq.s:2186   .rodata.str1.4:00000000000000ec .LC13
     /tmp/ccbUU0Sq.s:2189   .rodata.str1.4:0000000000000100 .LC14
     /tmp/ccbUU0Sq.s:1632   .text.vPH_task:0000000000000198 $d
     /tmp/ccbUU0Sq.s:1638   .text.vRTC_Init:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1643   .text.vRTC_Init:0000000000000000 vRTC_Init
     /tmp/ccbUU0Sq.s:1779   .text.vIncrementDay:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1784   .text.vIncrementDay:0000000000000000 vIncrementDay
     /tmp/ccbUU0Sq.s:2194   .rodata.str1.4:0000000000000128 .LC16
     /tmp/ccbUU0Sq.s:2197   .rodata.str1.4:000000000000012c .LC17
     /tmp/ccbUU0Sq.s:2199   .rodata.str1.4:0000000000000130 .LC18
     /tmp/ccbUU0Sq.s:1896   .text.main:0000000000000000 $t
     /tmp/ccbUU0Sq.s:1901   .text.main:0000000000000000 main
     /tmp/ccbUU0Sq.s:2202   .rodata.str1.4:0000000000000144 .LC19
     /tmp/ccbUU0Sq.s:2205   .rodata.str1.4:0000000000000158 .LC20
     /tmp/ccbUU0Sq.s:2208   .rodata.str1.4:000000000000016c .LC21
     /tmp/ccbUU0Sq.s:2215   .data.TEST_PH_VALUE:0000000000000000 TEST_PH_VALUE
                            *COM*:0000000000000148 USART2_rtos
     /tmp/ccbUU0Sq.s:2142   .bss.count.9746:0000000000000000 $d
     /tmp/ccbUU0Sq.s:2146   .bss.count.9746:0000000000000000 count.9746
     /tmp/ccbUU0Sq.s:2149   .rodata.str1.4:0000000000000000 $d
     /tmp/ccbUU0Sq.s:2211   .data.TEST_PH_VALUE:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.55.a343614a17c4367a6359a1f530d6d32b
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.74.fc794e36cd6c91c3b4695c74d78d9ccd
                           .group:0000000000000000 wm4.portmacro.h.69.a7e264ae32accd81a6ffb6f75a8356fe
                           .group:0000000000000000 wm4.portable.h.315.489c085dbd13c768c8594a7d23ef5545
                           .group:0000000000000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a1d4f27d190f434afd0502fdd510d30a
                           .group:0000000000000000 wm4.list.h.84.e713c47e239b06424d7c93968625e34d
                           .group:0000000000000000 wm4.task.h.73.ea72fb74b80a9cae261e97c6a9e3f3a7
                           .group:0000000000000000 wm4.queue.h.56.a4282b659085ac883e461fc7ab8aecd1
                           .group:0000000000000000 wm4.semphr.h.65.53591bdf1c84eee2eae05897a780c325
                           .group:0000000000000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:0000000000000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:0000000000000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.math.h.35.13c5bec129ef04ad1bb0a1152b29c624
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.64.0f05fa42cfe2db7fc44729a52d3ba948
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02
                           .group:0000000000000000 wm4.stdarg.h.31.48e922dd0aaedfb616aafd8a7b7a4949
                           .group:0000000000000000 wm4.unistd.h.2.6ce1b91c4223f6078c1b210c7538c1d2
                           .group:0000000000000000 wm4.unistd.h.259.3e3d3a4e9d73b9fe8a562fa63b167224
                           .group:0000000000000000 wm4.command_parser.h.2.5e0bdc6818b1caaa7320b37894727a8a
                           .group:0000000000000000 wm4.hbconfig.h.1.8c53e223caaee027b70c973f3757ec5e

UNDEFINED SYMBOLS
replace_char
command_routing
vTaskDelete
xQueueGenericSend
SystemCoreClock
GPIO_SetBits
delay_ms
GPIO_ResetBits
USART_GetITStatus
USART_put
USART_puts
xTaskGenericCreate
RCC_AHB1PeriphClockCmd
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
USART_Init
USART_ITConfig
NVIC_Init
USART_Cmd
RCC_APB1PeriphClockCmd
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_ARRPreloadConfig
TIM_Cmd
USART_rtos_puts
USART_rtos_wait_send
UDS_Module_Init
PPump_Module_Init
PHMeter_Module_Init
vTaskDelay
vPortEnterCritical
UDS_read_distance
vPortExitCritical
USART_put_int
PPump_Module_dispense
uxTaskPriorityGet
xQueueCreateMutex
xQueueGenericReceive
USART_rtos_sputs
xTaskGetTickCount
vTaskDelayUntil
PWR_BackupAccessCmd
RCC_LSICmd
RCC_GetFlagStatus
RCC_RTCCLKConfig
RCC_RTCCLKCmd
RTC_WaitForSynchro
RTC_ReadBackupRegister
RTC_WriteProtectionCmd
RTC_EnterInitMode
RTC_Init
RTC_SetTime
RTC_SetDate
RTC_ExitInitMode
RTC_WriteBackupRegister
RTC_GetTime
init_us_timer
USART_rtos_init
setup_output
UDS_Module_distance
