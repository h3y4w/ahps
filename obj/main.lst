   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.idle_blinky,"ax",%progbits
  20              		.align	2
  21              		.global	idle_blinky
  22              		.thumb
  23              		.thumb_func
  25              	idle_blinky:
  26              	.LFB118:
  27              		.file 1 "src/main.c"
   1:src/main.c    **** /**
   2:src/main.c    ****  * Copyright (C) 2013 Chetan Patil, http://chetanpatil.info
   3:src/main.c    ****  * 
   4:src/main.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a copy
   5:src/main.c    ****  * of this software and associated documentation files (the "Software"), to deal
   6:src/main.c    ****  * in the Software without restriction, including without limitation the rights
   7:src/main.c    ****  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   8:src/main.c    ****  * copies of the Software, and to permit persons to whom the Software is
   9:src/main.c    ****  * furnished to do so, subject to the following conditions:
  10:src/main.c    ****  * 
  11:src/main.c    ****  * The above copyright notice and this permission notice shall be included in
  12:src/main.c    ****  * all copies or substantial portions of the Software.
  13:src/main.c    ****  * 
  14:src/main.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  15:src/main.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  16:src/main.c    ****  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  17:src/main.c    ****  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  18:src/main.c    ****  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  19:src/main.c    ****  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  20:src/main.c    ****  * THE SOFTWARE.
  21:src/main.c    ****  * 
  22:src/main.c    ****  * @author Chetan Patil | http://chetanpatil.info
  23:src/main.c    ****  */
  24:src/main.c    **** 
  25:src/main.c    **** //Example code to loop back the data sent to USART2 on STM32F4DISCOVERY
  26:src/main.c    **** 
  27:src/main.c    **** //Inlcude header files
  28:src/main.c    **** #include "FreeRTOS.h"
  29:src/main.c    **** #include "task.h"
  30:src/main.c    **** #include "semphr.h"
  31:src/main.c    **** #include <math.h>
  32:src/main.c    **** #include <stdio.h>
  33:src/main.c    **** #include <stdlib.h>
  34:src/main.c    **** #include "hbperiph.h"
  35:src/main.c    **** #include "clock.h"
  36:src/main.c    **** 
  37:src/main.c    **** //Task For Sending Data Via USART
  38:src/main.c    **** 
  39:src/main.c    **** 
  40:src/main.c    **** #define MAX_STRLEN 300 // this is the maximum string length of our string in characters
  41:src/main.c    **** volatile char received_string[MAX_STRLEN+1]; // this will hold the recieved string
  42:src/main.c    **** 
  43:src/main.c    **** uint8_t write_pos = 0;
  44:src/main.c    **** uint8_t read_pos = 0;
  45:src/main.c    **** 
  46:src/main.c    **** volatile uint8_t input_lock = 0;
  47:src/main.c    **** 
  48:src/main.c    **** 
  49:src/main.c    **** void setSysTick(void){
  50:src/main.c    ****     if (SysTick_Config(SystemCoreClock / 1000)) {
  51:src/main.c    ****         while (1){};
  52:src/main.c    ****     }
  53:src/main.c    **** }
  54:src/main.c    **** 
  55:src/main.c    **** void USART_put(USART_TypeDef* USARTx, volatile char c) {
  56:src/main.c    ****     // wait until data register is empty
  57:src/main.c    ****     while(!(USARTx->SR & 0x00000040) );
  58:src/main.c    ****     USART_SendData(USARTx, c);
  59:src/main.c    **** }
  60:src/main.c    **** 
  61:src/main.c    **** void USART_puts(USART_TypeDef* USARTx, volatile char *s){
  62:src/main.c    **** 	while(*s){
  63:src/main.c    ****         USART_put(USARTx, *s);
  64:src/main.c    **** 		*s++;
  65:src/main.c    **** 	}
  66:src/main.c    **** }
  67:src/main.c    **** 
  68:src/main.c    **** void USART_put_int(USART_TypeDef* USARTx, int number) {
  69:src/main.c    ****     uint8_t neg = 0;
  70:src/main.c    **** 
  71:src/main.c    ****     if (number < 0) {
  72:src/main.c    ****         number*=-1;
  73:src/main.c    ****         neg = 1;
  74:src/main.c    ****     }
  75:src/main.c    ****     char value[10];
  76:src/main.c    ****     int i=0;
  77:src/main.c    ****     do {
  78:src/main.c    ****         value[i++] = (char)(number % 10) + '0';
  79:src/main.c    ****         number /= 10;
  80:src/main.c    ****     } while (number);
  81:src/main.c    **** 
  82:src/main.c    ****     if (neg) USART_put(USARTx, '-');    
  83:src/main.c    ****     while(i) {
  84:src/main.c    ****         USART_put(USARTx, value[--i]);
  85:src/main.c    ****     }
  86:src/main.c    **** }
  87:src/main.c    **** 
  88:src/main.c    **** void USART_getline(void) {
  89:src/main.c    ****     if (!input_lock) {
  90:src/main.c    ****         input_lock=1;
  91:src/main.c    ****         while(input_lock){
  92:src/main.c    ****             delay_ms(250);
  93:src/main.c    ****             GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_SET);
  94:src/main.c    ****             delay_ms(250);
  95:src/main.c    ****             GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_RESET);
  96:src/main.c    ****         }
  97:src/main.c    ****     }
  98:src/main.c    **** }
  99:src/main.c    **** 
 100:src/main.c    **** char USART_getkey(void) {
 101:src/main.c    ****     static char prev_key;
 102:src/main.c    ****     prev_key = received_string[write_pos-1];
 103:src/main.c    ****     while (prev_key == received_string[write_pos-1]);
 104:src/main.c    ****     return received_string[write_pos-1]; 
 105:src/main.c    **** }
 106:src/main.c    **** 
 107:src/main.c    **** int USART_nextline_length(void) {
 108:src/main.c    ****     int i;
 109:src/main.c    ****     for(i=read_pos; received_string[i]!='\r'; i++);
 110:src/main.c    **** 
 111:src/main.c    ****     return (i-read_pos)+1;
 112:src/main.c    **** }
 113:src/main.c    **** /*
 114:src/main.c    **** int char_array_compare(char *str, char end, char *str2 char end2) {
 115:src/main.c    ****     while (*str != end || *str2 != end2) {
 116:src/main.c    ****         if (str != str2) return 0;
 117:src/main.c    ****     }
 118:src/main.c    **** 
 119:src/main.c    ****     return 1;
 120:src/main.c    **** }
 121:src/main.c    **** */
 122:src/main.c    **** void handle_uart_command(char *command) {
 123:src/main.c    **** 
 124:src/main.c    ****     USART_puts(USART2, "Command: ");
 125:src/main.c    **** 
 126:src/main.c    ****     char *pos = command;
 127:src/main.c    **** /*
 128:src/main.c    ****     while(*command != '\r') {
 129:src/main.c    ****         if (*command == ' ') {
 130:src/main.c    ****             while (pos != command) {
 131:src/main.c    ****                 if (pos == )
 132:src/main.c    ****                 //something like this in python command[pos1:pos2] == "command1"
 133:src/main.c    ****                 pos++;
 134:src/main.c    ****             }
 135:src/main.c    ****         }
 136:src/main.c    ****         USART_put(USART2, *command);
 137:src/main.c    ****         command++;
 138:src/main.c    ****     }
 139:src/main.c    ****     */
 140:src/main.c    **** 
 141:src/main.c    ****     USART_puts(USART2, "\r\n");
 142:src/main.c    ****     vTaskDelete(NULL);
 143:src/main.c    **** }
 144:src/main.c    **** 
 145:src/main.c    **** void idle_blinky (void *pvParameters) {
  28              		.loc 1 145 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              	.LVL0:
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
 146:src/main.c    ****     while(1) {
 147:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
  39              		.loc 1 147 0
  40 0002 4FF44064 		mov	r4, #3072
  41 0006 C4F20204 		movt	r4, 16386
  42 000a 4FF48059 		mov	r9, #4096
 148:src/main.c    ****         delay_ms(500);
  43              		.loc 1 148 0
  44 000e 4FF4FA75 		mov	r5, #500
 149:src/main.c    **** 
 150:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
  45              		.loc 1 150 0
  46 0012 4FF40058 		mov	r8, #8192
 151:src/main.c    ****         delay_ms(500);
 152:src/main.c    **** 
 153:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
  47              		.loc 1 153 0
  48 0016 4FF48047 		mov	r7, #16384
 154:src/main.c    ****         delay_ms(500);
 155:src/main.c    **** 
 156:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
  49              		.loc 1 156 0
  50 001a 4FF40046 		mov	r6, #32768
  51              	.LVL1:
  52              	.L2:
 147:src/main.c    ****         delay_ms(500);
  53              		.loc 1 147 0 discriminator 1
  54 001e 2046     		mov	r0, r4
  55 0020 4946     		mov	r1, r9
  56 0022 FFF7FEFF 		bl	GPIO_SetBits
  57              	.LVL2:
 148:src/main.c    **** 
  58              		.loc 1 148 0 discriminator 1
  59 0026 2846     		mov	r0, r5
  60 0028 FFF7FEFF 		bl	delay_ms
  61              	.LVL3:
 150:src/main.c    ****         delay_ms(500);
  62              		.loc 1 150 0 discriminator 1
  63 002c 2046     		mov	r0, r4
  64 002e 4146     		mov	r1, r8
  65 0030 FFF7FEFF 		bl	GPIO_SetBits
  66              	.LVL4:
 151:src/main.c    **** 
  67              		.loc 1 151 0 discriminator 1
  68 0034 2846     		mov	r0, r5
  69 0036 FFF7FEFF 		bl	delay_ms
  70              	.LVL5:
 153:src/main.c    ****         delay_ms(500);
  71              		.loc 1 153 0 discriminator 1
  72 003a 2046     		mov	r0, r4
  73 003c 3946     		mov	r1, r7
  74 003e FFF7FEFF 		bl	GPIO_SetBits
  75              	.LVL6:
 154:src/main.c    **** 
  76              		.loc 1 154 0 discriminator 1
  77 0042 2846     		mov	r0, r5
  78 0044 FFF7FEFF 		bl	delay_ms
  79              	.LVL7:
  80              		.loc 1 156 0 discriminator 1
  81 0048 2046     		mov	r0, r4
  82 004a 3146     		mov	r1, r6
  83 004c FFF7FEFF 		bl	GPIO_SetBits
  84              	.LVL8:
 157:src/main.c    ****         delay_ms(500);
  85              		.loc 1 157 0 discriminator 1
  86 0050 2846     		mov	r0, r5
  87 0052 FFF7FEFF 		bl	delay_ms
  88              	.LVL9:
 158:src/main.c    **** 
 159:src/main.c    ****         GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
  89              		.loc 1 159 0 discriminator 1
  90 0056 2046     		mov	r0, r4
  91 0058 4FF47041 		mov	r1, #61440
  92 005c FFF7FEFF 		bl	GPIO_ResetBits
  93              	.LVL10:
 160:src/main.c    ****         delay_ms(500);
  94              		.loc 1 160 0 discriminator 1
  95 0060 2846     		mov	r0, r5
  96 0062 FFF7FEFF 		bl	delay_ms
  97              	.LVL11:
  98 0066 DAE7     		b	.L2
  99              		.cfi_endproc
 100              	.LFE118:
 102              		.section	.text.setSysTick,"ax",%progbits
 103              		.align	2
 104              		.global	setSysTick
 105              		.thumb
 106              		.thumb_func
 108              	setSysTick:
 109              	.LFB110:
  49:src/main.c    ****     if (SysTick_Config(SystemCoreClock / 1000)) {
 110              		.loc 1 49 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
  50:src/main.c    ****         while (1){};
 115              		.loc 1 50 0
 116 0000 40F20003 		movw	r3, #:lower16:SystemCoreClock
 117 0004 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 118 0008 1A68     		ldr	r2, [r3]
 119 000a 44F6D353 		movw	r3, #19923
 120 000e C1F26203 		movt	r3, 4194
 121 0012 A3FB0212 		umull	r1, r2, r3, r2
 122              	.LVL12:
 123              	.LBB8:
 124              	.LBB9:
 125              		.file 2 "libs/CMSIS/Include/core_cm4.h"
   1:libs/CMSIS/Include/core_cm4.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cm4.h ****  * @file     core_cm4.h
   3:libs/CMSIS/Include/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:libs/CMSIS/Include/core_cm4.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cm4.h ****  * @date     19. July 2011
   6:libs/CMSIS/Include/core_cm4.h ****  *
   7:libs/CMSIS/Include/core_cm4.h ****  * @note
   8:libs/CMSIS/Include/core_cm4.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cm4.h ****  *
  10:libs/CMSIS/Include/core_cm4.h ****  * @par
  11:libs/CMSIS/Include/core_cm4.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:libs/CMSIS/Include/core_cm4.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:libs/CMSIS/Include/core_cm4.h ****  * within development tools that are supporting such ARM based processors.
  14:libs/CMSIS/Include/core_cm4.h ****  *
  15:libs/CMSIS/Include/core_cm4.h ****  * @par
  16:libs/CMSIS/Include/core_cm4.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cm4.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cm4.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cm4.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cm4.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cm4.h ****  *
  22:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cm4.h **** #if defined ( __ICCARM__ )
  24:libs/CMSIS/Include/core_cm4.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:libs/CMSIS/Include/core_cm4.h **** #endif
  26:libs/CMSIS/Include/core_cm4.h **** 
  27:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
  28:libs/CMSIS/Include/core_cm4.h ****  extern "C" {
  29:libs/CMSIS/Include/core_cm4.h **** #endif
  30:libs/CMSIS/Include/core_cm4.h **** 
  31:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  32:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  33:libs/CMSIS/Include/core_cm4.h **** 
  34:libs/CMSIS/Include/core_cm4.h **** 
  35:libs/CMSIS/Include/core_cm4.h **** /** \mainpage CMSIS Cortex-M4
  36:libs/CMSIS/Include/core_cm4.h **** 
  37:libs/CMSIS/Include/core_cm4.h ****   This documentation describes the CMSIS Cortex-M Core Peripheral Access Layer.
  38:libs/CMSIS/Include/core_cm4.h ****   It consists of:
  39:libs/CMSIS/Include/core_cm4.h **** 
  40:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M Core Register Definitions
  41:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M functions
  42:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M instructions
  43:libs/CMSIS/Include/core_cm4.h ****      - Cortex-M SIMD instructions
  44:libs/CMSIS/Include/core_cm4.h **** 
  45:libs/CMSIS/Include/core_cm4.h ****   The CMSIS Cortex-M4 Core Peripheral Access Layer contains C and assembly functions that ease
  46:libs/CMSIS/Include/core_cm4.h ****   access to the Cortex-M Core
  47:libs/CMSIS/Include/core_cm4.h ****  */
  48:libs/CMSIS/Include/core_cm4.h **** 
  49:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_MISRA_Exceptions  CMSIS MISRA-C:2004 Compliance Exceptions
  50:libs/CMSIS/Include/core_cm4.h ****   CMSIS violates following MISRA-C2004 Rules:
  51:libs/CMSIS/Include/core_cm4.h ****   
  52:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 8.5, object/function definition in header file.<br>
  53:libs/CMSIS/Include/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'. 
  54:libs/CMSIS/Include/core_cm4.h **** 
  55:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Required Rule 18.4, declaration of union type or object of union type: '{.
  56:libs/CMSIS/Include/core_cm4.h ****      Unions are used for effective representation of core registers.
  57:libs/CMSIS/Include/core_cm4.h ****    
  58:libs/CMSIS/Include/core_cm4.h ****    - Violates MISRA 2004 Advisory Rule 19.7, Function-like macro defined.<br>
  59:libs/CMSIS/Include/core_cm4.h ****      Function-like macros are used to allow more efficient code. 
  60:libs/CMSIS/Include/core_cm4.h **** 
  61:libs/CMSIS/Include/core_cm4.h ****  */
  62:libs/CMSIS/Include/core_cm4.h **** 
  63:libs/CMSIS/Include/core_cm4.h **** 
  64:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
  65:libs/CMSIS/Include/core_cm4.h ****  *                 CMSIS definitions
  66:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
  67:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_definitions CMSIS Core Definitions
  68:libs/CMSIS/Include/core_cm4.h ****   This file defines all structures and symbols for CMSIS core:
  69:libs/CMSIS/Include/core_cm4.h ****    - CMSIS version number
  70:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core
  71:libs/CMSIS/Include/core_cm4.h ****    - Cortex-M core Revision Number
  72:libs/CMSIS/Include/core_cm4.h ****   @{
  73:libs/CMSIS/Include/core_cm4.h ****  */
  74:libs/CMSIS/Include/core_cm4.h **** 
  75:libs/CMSIS/Include/core_cm4.h **** /*  CMSIS CM4 definitions */
  76:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x02)                                                       /*!<
  77:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x10)                                                       /*!<
  78:libs/CMSIS/Include/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16) | __CM4_CMSIS_VERSION_SUB) /*!<
  79:libs/CMSIS/Include/core_cm4.h **** 
  80:libs/CMSIS/Include/core_cm4.h **** #define __CORTEX_M                (0x04)                                                       /*!<
  81:libs/CMSIS/Include/core_cm4.h **** 
  82:libs/CMSIS/Include/core_cm4.h **** 
  83:libs/CMSIS/Include/core_cm4.h **** #if   defined ( __CC_ARM )
  84:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  85:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  86:libs/CMSIS/Include/core_cm4.h **** 
  87:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
  88:libs/CMSIS/Include/core_cm4.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  89:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  90:libs/CMSIS/Include/core_cm4.h **** 
  91:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
  92:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  93:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  94:libs/CMSIS/Include/core_cm4.h **** 
  95:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
  96:libs/CMSIS/Include/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  97:libs/CMSIS/Include/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  98:libs/CMSIS/Include/core_cm4.h **** 
  99:libs/CMSIS/Include/core_cm4.h **** #endif
 100:libs/CMSIS/Include/core_cm4.h **** 
 101:libs/CMSIS/Include/core_cm4.h **** /*!< __FPU_USED to be checked prior to making use of FPU specific registers and functions */
 102:libs/CMSIS/Include/core_cm4.h **** #if defined ( __CC_ARM )
 103:libs/CMSIS/Include/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 104:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 105:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 106:libs/CMSIS/Include/core_cm4.h ****     #else
 107:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 108:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 109:libs/CMSIS/Include/core_cm4.h ****     #endif
 110:libs/CMSIS/Include/core_cm4.h ****   #else
 111:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 112:libs/CMSIS/Include/core_cm4.h ****   #endif
 113:libs/CMSIS/Include/core_cm4.h **** 
 114:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __ICCARM__ )
 115:libs/CMSIS/Include/core_cm4.h ****   #if defined __ARMVFP__
 116:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 117:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 118:libs/CMSIS/Include/core_cm4.h ****     #else
 119:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 120:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 121:libs/CMSIS/Include/core_cm4.h ****     #endif
 122:libs/CMSIS/Include/core_cm4.h ****   #else
 123:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 124:libs/CMSIS/Include/core_cm4.h ****   #endif
 125:libs/CMSIS/Include/core_cm4.h **** 
 126:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __GNUC__ )
 127:libs/CMSIS/Include/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 128:libs/CMSIS/Include/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 129:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       1
 130:libs/CMSIS/Include/core_cm4.h ****     #else
 131:libs/CMSIS/Include/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 132:libs/CMSIS/Include/core_cm4.h ****       #define __FPU_USED       0
 133:libs/CMSIS/Include/core_cm4.h ****     #endif
 134:libs/CMSIS/Include/core_cm4.h ****   #else
 135:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 136:libs/CMSIS/Include/core_cm4.h ****   #endif
 137:libs/CMSIS/Include/core_cm4.h **** 
 138:libs/CMSIS/Include/core_cm4.h **** #elif defined ( __TASKING__ )
 139:libs/CMSIS/Include/core_cm4.h ****     /* add preprocessor checks to define __FPU_USED */
 140:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_USED         0
 141:libs/CMSIS/Include/core_cm4.h **** #endif
 142:libs/CMSIS/Include/core_cm4.h **** 
 143:libs/CMSIS/Include/core_cm4.h **** #include <stdint.h>                      /*!< standard types definitions                      */
 144:libs/CMSIS/Include/core_cm4.h **** #include <core_cmInstr.h>                /*!< Core Instruction Access                         */
 145:libs/CMSIS/Include/core_cm4.h **** #include <core_cmFunc.h>                 /*!< Core Function Access                            */
 146:libs/CMSIS/Include/core_cm4.h **** #include <core_cm4_simd.h>               /*!< Compiler specific SIMD Intrinsics               */
 147:libs/CMSIS/Include/core_cm4.h **** 
 148:libs/CMSIS/Include/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 149:libs/CMSIS/Include/core_cm4.h **** 
 150:libs/CMSIS/Include/core_cm4.h **** #ifndef __CMSIS_GENERIC
 151:libs/CMSIS/Include/core_cm4.h **** 
 152:libs/CMSIS/Include/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 153:libs/CMSIS/Include/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 154:libs/CMSIS/Include/core_cm4.h **** 
 155:libs/CMSIS/Include/core_cm4.h **** /* check device defines and use defaults */
 156:libs/CMSIS/Include/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 157:libs/CMSIS/Include/core_cm4.h ****   #ifndef __CM4_REV
 158:libs/CMSIS/Include/core_cm4.h ****     #define __CM4_REV               0x0000
 159:libs/CMSIS/Include/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 160:libs/CMSIS/Include/core_cm4.h ****   #endif
 161:libs/CMSIS/Include/core_cm4.h **** 
 162:libs/CMSIS/Include/core_cm4.h ****   #ifndef __FPU_PRESENT
 163:libs/CMSIS/Include/core_cm4.h ****     #define __FPU_PRESENT             0
 164:libs/CMSIS/Include/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 165:libs/CMSIS/Include/core_cm4.h ****   #endif
 166:libs/CMSIS/Include/core_cm4.h **** 
 167:libs/CMSIS/Include/core_cm4.h ****   #ifndef __MPU_PRESENT
 168:libs/CMSIS/Include/core_cm4.h ****     #define __MPU_PRESENT             0
 169:libs/CMSIS/Include/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 170:libs/CMSIS/Include/core_cm4.h ****   #endif
 171:libs/CMSIS/Include/core_cm4.h **** 
 172:libs/CMSIS/Include/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 173:libs/CMSIS/Include/core_cm4.h ****     #define __NVIC_PRIO_BITS          4
 174:libs/CMSIS/Include/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 175:libs/CMSIS/Include/core_cm4.h ****   #endif
 176:libs/CMSIS/Include/core_cm4.h **** 
 177:libs/CMSIS/Include/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 178:libs/CMSIS/Include/core_cm4.h ****     #define __Vendor_SysTickConfig    0
 179:libs/CMSIS/Include/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 180:libs/CMSIS/Include/core_cm4.h ****   #endif
 181:libs/CMSIS/Include/core_cm4.h **** #endif
 182:libs/CMSIS/Include/core_cm4.h **** 
 183:libs/CMSIS/Include/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 184:libs/CMSIS/Include/core_cm4.h **** #ifdef __cplusplus
 185:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile             /*!< defines 'read only' permissions                 */
 186:libs/CMSIS/Include/core_cm4.h **** #else
 187:libs/CMSIS/Include/core_cm4.h ****   #define   __I     volatile const       /*!< defines 'read only' permissions                 */
 188:libs/CMSIS/Include/core_cm4.h **** #endif
 189:libs/CMSIS/Include/core_cm4.h **** #define     __O     volatile             /*!< defines 'write only' permissions                */
 190:libs/CMSIS/Include/core_cm4.h **** #define     __IO    volatile             /*!< defines 'read / write' permissions              */
 191:libs/CMSIS/Include/core_cm4.h **** 
 192:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_core_definitions */
 193:libs/CMSIS/Include/core_cm4.h **** 
 194:libs/CMSIS/Include/core_cm4.h **** 
 195:libs/CMSIS/Include/core_cm4.h **** 
 196:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
 197:libs/CMSIS/Include/core_cm4.h ****  *                 Register Abstraction
 198:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
 199:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_core_register CMSIS Core Register
 200:libs/CMSIS/Include/core_cm4.h ****   Core Register contain:
 201:libs/CMSIS/Include/core_cm4.h ****   - Core Register
 202:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Register
 203:libs/CMSIS/Include/core_cm4.h ****   - Core SCB Register
 204:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Register
 205:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Register
 206:libs/CMSIS/Include/core_cm4.h ****   - Core MPU Register
 207:libs/CMSIS/Include/core_cm4.h ****   - Core FPU Register
 208:libs/CMSIS/Include/core_cm4.h **** */
 209:libs/CMSIS/Include/core_cm4.h **** 
 210:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 211:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CORE CMSIS Core
 212:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Registers
 213:libs/CMSIS/Include/core_cm4.h ****   @{
 214:libs/CMSIS/Include/core_cm4.h ****  */
 215:libs/CMSIS/Include/core_cm4.h **** 
 216:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 217:libs/CMSIS/Include/core_cm4.h ****  */
 218:libs/CMSIS/Include/core_cm4.h **** typedef union
 219:libs/CMSIS/Include/core_cm4.h **** {
 220:libs/CMSIS/Include/core_cm4.h ****   struct
 221:libs/CMSIS/Include/core_cm4.h ****   {
 222:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 223:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 224:libs/CMSIS/Include/core_cm4.h **** #else
 225:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 226:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 227:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 228:libs/CMSIS/Include/core_cm4.h **** #endif
 229:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 230:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 231:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 232:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 233:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 234:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 235:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 236:libs/CMSIS/Include/core_cm4.h **** } APSR_Type;
 237:libs/CMSIS/Include/core_cm4.h **** 
 238:libs/CMSIS/Include/core_cm4.h **** 
 239:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 240:libs/CMSIS/Include/core_cm4.h ****  */
 241:libs/CMSIS/Include/core_cm4.h **** typedef union
 242:libs/CMSIS/Include/core_cm4.h **** {
 243:libs/CMSIS/Include/core_cm4.h ****   struct
 244:libs/CMSIS/Include/core_cm4.h ****   {
 245:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 246:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 247:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 248:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 249:libs/CMSIS/Include/core_cm4.h **** } IPSR_Type;
 250:libs/CMSIS/Include/core_cm4.h **** 
 251:libs/CMSIS/Include/core_cm4.h **** 
 252:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 253:libs/CMSIS/Include/core_cm4.h ****  */
 254:libs/CMSIS/Include/core_cm4.h **** typedef union
 255:libs/CMSIS/Include/core_cm4.h **** {
 256:libs/CMSIS/Include/core_cm4.h ****   struct
 257:libs/CMSIS/Include/core_cm4.h ****   {
 258:libs/CMSIS/Include/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 259:libs/CMSIS/Include/core_cm4.h **** #if (__CORTEX_M != 0x04)
 260:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 261:libs/CMSIS/Include/core_cm4.h **** #else
 262:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 263:libs/CMSIS/Include/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 264:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 265:libs/CMSIS/Include/core_cm4.h **** #endif
 266:libs/CMSIS/Include/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 267:libs/CMSIS/Include/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 268:libs/CMSIS/Include/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 269:libs/CMSIS/Include/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 270:libs/CMSIS/Include/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 271:libs/CMSIS/Include/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 272:libs/CMSIS/Include/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 273:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 274:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 275:libs/CMSIS/Include/core_cm4.h **** } xPSR_Type;
 276:libs/CMSIS/Include/core_cm4.h **** 
 277:libs/CMSIS/Include/core_cm4.h **** 
 278:libs/CMSIS/Include/core_cm4.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 279:libs/CMSIS/Include/core_cm4.h ****  */
 280:libs/CMSIS/Include/core_cm4.h **** typedef union
 281:libs/CMSIS/Include/core_cm4.h **** {
 282:libs/CMSIS/Include/core_cm4.h ****   struct
 283:libs/CMSIS/Include/core_cm4.h ****   {
 284:libs/CMSIS/Include/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 285:libs/CMSIS/Include/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 286:libs/CMSIS/Include/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 287:libs/CMSIS/Include/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 288:libs/CMSIS/Include/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access                  */
 289:libs/CMSIS/Include/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 290:libs/CMSIS/Include/core_cm4.h **** } CONTROL_Type;
 291:libs/CMSIS/Include/core_cm4.h **** 
 292:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CORE */
 293:libs/CMSIS/Include/core_cm4.h **** 
 294:libs/CMSIS/Include/core_cm4.h **** 
 295:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 296:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_NVIC CMSIS NVIC
 297:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M NVIC Registers
 298:libs/CMSIS/Include/core_cm4.h ****   @{
 299:libs/CMSIS/Include/core_cm4.h ****  */
 300:libs/CMSIS/Include/core_cm4.h **** 
 301:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 302:libs/CMSIS/Include/core_cm4.h ****  */
 303:libs/CMSIS/Include/core_cm4.h **** typedef struct
 304:libs/CMSIS/Include/core_cm4.h **** {
 305:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 306:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[24];
 307:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 308:libs/CMSIS/Include/core_cm4.h ****        uint32_t RSERVED1[24];
 309:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 310:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[24];
 311:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 312:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED3[24];
 313:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 314:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED4[56];
 315:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 316:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED5[644];
 317:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 318:libs/CMSIS/Include/core_cm4.h **** }  NVIC_Type;
 319:libs/CMSIS/Include/core_cm4.h **** 
 320:libs/CMSIS/Include/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 321:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 322:libs/CMSIS/Include/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 323:libs/CMSIS/Include/core_cm4.h **** 
 324:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 325:libs/CMSIS/Include/core_cm4.h **** 
 326:libs/CMSIS/Include/core_cm4.h **** 
 327:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 328:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCB CMSIS SCB
 329:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control Block Registers
 330:libs/CMSIS/Include/core_cm4.h ****   @{
 331:libs/CMSIS/Include/core_cm4.h ****  */
 332:libs/CMSIS/Include/core_cm4.h **** 
 333:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control Block (SCB).
 334:libs/CMSIS/Include/core_cm4.h ****  */
 335:libs/CMSIS/Include/core_cm4.h **** typedef struct
 336:libs/CMSIS/Include/core_cm4.h **** {
 337:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 338:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 339:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 340:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 341:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 342:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 343:libs/CMSIS/Include/core_cm4.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 344:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 345:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 346:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 347:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 348:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 349:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 350:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 351:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 352:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 353:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 354:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 355:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 356:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[5];
 357:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 358:libs/CMSIS/Include/core_cm4.h **** } SCB_Type;
 359:libs/CMSIS/Include/core_cm4.h **** 
 360:libs/CMSIS/Include/core_cm4.h **** /* SCB CPUID Register Definitions */
 361:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 362:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 363:libs/CMSIS/Include/core_cm4.h **** 
 364:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 365:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 366:libs/CMSIS/Include/core_cm4.h **** 
 367:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 368:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 369:libs/CMSIS/Include/core_cm4.h **** 
 370:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 371:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 372:libs/CMSIS/Include/core_cm4.h **** 
 373:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 374:libs/CMSIS/Include/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 375:libs/CMSIS/Include/core_cm4.h **** 
 376:libs/CMSIS/Include/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 377:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 378:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 379:libs/CMSIS/Include/core_cm4.h **** 
 380:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 381:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 382:libs/CMSIS/Include/core_cm4.h **** 
 383:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 384:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 385:libs/CMSIS/Include/core_cm4.h **** 
 386:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 387:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 388:libs/CMSIS/Include/core_cm4.h **** 
 389:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 390:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 391:libs/CMSIS/Include/core_cm4.h **** 
 392:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 393:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 394:libs/CMSIS/Include/core_cm4.h **** 
 395:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 396:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 397:libs/CMSIS/Include/core_cm4.h **** 
 398:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 399:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 400:libs/CMSIS/Include/core_cm4.h **** 
 401:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 402:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 403:libs/CMSIS/Include/core_cm4.h **** 
 404:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 405:libs/CMSIS/Include/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 406:libs/CMSIS/Include/core_cm4.h **** 
 407:libs/CMSIS/Include/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 408:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 409:libs/CMSIS/Include/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 410:libs/CMSIS/Include/core_cm4.h **** 
 411:libs/CMSIS/Include/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 412:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 413:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 414:libs/CMSIS/Include/core_cm4.h **** 
 415:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 416:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 417:libs/CMSIS/Include/core_cm4.h **** 
 418:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 419:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 420:libs/CMSIS/Include/core_cm4.h **** 
 421:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 422:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 423:libs/CMSIS/Include/core_cm4.h **** 
 424:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 425:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 426:libs/CMSIS/Include/core_cm4.h **** 
 427:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 428:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 429:libs/CMSIS/Include/core_cm4.h **** 
 430:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 431:libs/CMSIS/Include/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 432:libs/CMSIS/Include/core_cm4.h **** 
 433:libs/CMSIS/Include/core_cm4.h **** /* SCB System Control Register Definitions */
 434:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 435:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 436:libs/CMSIS/Include/core_cm4.h **** 
 437:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 438:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 439:libs/CMSIS/Include/core_cm4.h **** 
 440:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 441:libs/CMSIS/Include/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 442:libs/CMSIS/Include/core_cm4.h **** 
 443:libs/CMSIS/Include/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 444:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 445:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 446:libs/CMSIS/Include/core_cm4.h **** 
 447:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 448:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 449:libs/CMSIS/Include/core_cm4.h **** 
 450:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 451:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 452:libs/CMSIS/Include/core_cm4.h **** 
 453:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 454:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 455:libs/CMSIS/Include/core_cm4.h **** 
 456:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 457:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 458:libs/CMSIS/Include/core_cm4.h **** 
 459:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 460:libs/CMSIS/Include/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 461:libs/CMSIS/Include/core_cm4.h **** 
 462:libs/CMSIS/Include/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 463:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 464:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 465:libs/CMSIS/Include/core_cm4.h **** 
 466:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 467:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 468:libs/CMSIS/Include/core_cm4.h **** 
 469:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 470:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 471:libs/CMSIS/Include/core_cm4.h **** 
 472:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 473:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 474:libs/CMSIS/Include/core_cm4.h **** 
 475:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 476:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 477:libs/CMSIS/Include/core_cm4.h **** 
 478:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 479:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 480:libs/CMSIS/Include/core_cm4.h **** 
 481:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 482:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 483:libs/CMSIS/Include/core_cm4.h **** 
 484:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 485:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 486:libs/CMSIS/Include/core_cm4.h **** 
 487:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 488:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 489:libs/CMSIS/Include/core_cm4.h **** 
 490:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 491:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 492:libs/CMSIS/Include/core_cm4.h **** 
 493:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 494:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 495:libs/CMSIS/Include/core_cm4.h **** 
 496:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 497:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 498:libs/CMSIS/Include/core_cm4.h **** 
 499:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 500:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 501:libs/CMSIS/Include/core_cm4.h **** 
 502:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 503:libs/CMSIS/Include/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 504:libs/CMSIS/Include/core_cm4.h **** 
 505:libs/CMSIS/Include/core_cm4.h **** /* SCB Configurable Fault Status Registers Definitions */
 506:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 507:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 508:libs/CMSIS/Include/core_cm4.h **** 
 509:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 510:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 511:libs/CMSIS/Include/core_cm4.h **** 
 512:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 513:libs/CMSIS/Include/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 514:libs/CMSIS/Include/core_cm4.h **** 
 515:libs/CMSIS/Include/core_cm4.h **** /* SCB Hard Fault Status Registers Definitions */
 516:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 517:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 518:libs/CMSIS/Include/core_cm4.h **** 
 519:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 520:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 521:libs/CMSIS/Include/core_cm4.h **** 
 522:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 523:libs/CMSIS/Include/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 524:libs/CMSIS/Include/core_cm4.h **** 
 525:libs/CMSIS/Include/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 526:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 527:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 528:libs/CMSIS/Include/core_cm4.h **** 
 529:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 530:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 531:libs/CMSIS/Include/core_cm4.h **** 
 532:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 533:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 534:libs/CMSIS/Include/core_cm4.h **** 
 535:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 536:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 537:libs/CMSIS/Include/core_cm4.h **** 
 538:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 539:libs/CMSIS/Include/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 540:libs/CMSIS/Include/core_cm4.h **** 
 541:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCB */
 542:libs/CMSIS/Include/core_cm4.h **** 
 543:libs/CMSIS/Include/core_cm4.h **** 
 544:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 545:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SCnSCB CMSIS System Control and ID Register not in the SCB
 546:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Control and ID Register not in the SCB
 547:libs/CMSIS/Include/core_cm4.h ****   @{
 548:libs/CMSIS/Include/core_cm4.h ****  */
 549:libs/CMSIS/Include/core_cm4.h **** 
 550:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 551:libs/CMSIS/Include/core_cm4.h ****  */
 552:libs/CMSIS/Include/core_cm4.h **** typedef struct
 553:libs/CMSIS/Include/core_cm4.h **** {
 554:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 555:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 556:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 557:libs/CMSIS/Include/core_cm4.h **** } SCnSCB_Type;
 558:libs/CMSIS/Include/core_cm4.h **** 
 559:libs/CMSIS/Include/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 560:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 561:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 562:libs/CMSIS/Include/core_cm4.h **** 
 563:libs/CMSIS/Include/core_cm4.h **** /* Auxiliary Control Register Definitions */
 564:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9                                          /*!< ACTLR: 
 565:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 566:libs/CMSIS/Include/core_cm4.h **** 
 567:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8                                          /*!< ACTLR: 
 568:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 569:libs/CMSIS/Include/core_cm4.h **** 
 570:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 571:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 572:libs/CMSIS/Include/core_cm4.h **** 
 573:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 574:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 575:libs/CMSIS/Include/core_cm4.h **** 
 576:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 577:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 578:libs/CMSIS/Include/core_cm4.h **** 
 579:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 580:libs/CMSIS/Include/core_cm4.h **** 
 581:libs/CMSIS/Include/core_cm4.h **** 
 582:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 583:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_SysTick CMSIS SysTick
 584:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M System Timer Registers
 585:libs/CMSIS/Include/core_cm4.h ****   @{
 586:libs/CMSIS/Include/core_cm4.h ****  */
 587:libs/CMSIS/Include/core_cm4.h **** 
 588:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the System Timer (SysTick).
 589:libs/CMSIS/Include/core_cm4.h ****  */
 590:libs/CMSIS/Include/core_cm4.h **** typedef struct
 591:libs/CMSIS/Include/core_cm4.h **** {
 592:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 593:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 594:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 595:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 596:libs/CMSIS/Include/core_cm4.h **** } SysTick_Type;
 597:libs/CMSIS/Include/core_cm4.h **** 
 598:libs/CMSIS/Include/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 599:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 600:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 601:libs/CMSIS/Include/core_cm4.h **** 
 602:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 603:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 604:libs/CMSIS/Include/core_cm4.h **** 
 605:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 606:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 607:libs/CMSIS/Include/core_cm4.h **** 
 608:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 609:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 610:libs/CMSIS/Include/core_cm4.h **** 
 611:libs/CMSIS/Include/core_cm4.h **** /* SysTick Reload Register Definitions */
 612:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 613:libs/CMSIS/Include/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 614:libs/CMSIS/Include/core_cm4.h **** 
 615:libs/CMSIS/Include/core_cm4.h **** /* SysTick Current Register Definitions */
 616:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 617:libs/CMSIS/Include/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 618:libs/CMSIS/Include/core_cm4.h **** 
 619:libs/CMSIS/Include/core_cm4.h **** /* SysTick Calibration Register Definitions */
 620:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 621:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 622:libs/CMSIS/Include/core_cm4.h **** 
 623:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 624:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 625:libs/CMSIS/Include/core_cm4.h **** 
 626:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 627:libs/CMSIS/Include/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 628:libs/CMSIS/Include/core_cm4.h **** 
 629:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 630:libs/CMSIS/Include/core_cm4.h **** 
 631:libs/CMSIS/Include/core_cm4.h **** 
 632:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 633:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_ITM CMSIS ITM
 634:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Instrumentation Trace Macrocell (ITM)
 635:libs/CMSIS/Include/core_cm4.h ****   @{
 636:libs/CMSIS/Include/core_cm4.h ****  */
 637:libs/CMSIS/Include/core_cm4.h **** 
 638:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 639:libs/CMSIS/Include/core_cm4.h ****  */
 640:libs/CMSIS/Include/core_cm4.h **** typedef struct
 641:libs/CMSIS/Include/core_cm4.h **** {
 642:libs/CMSIS/Include/core_cm4.h ****   __O  union
 643:libs/CMSIS/Include/core_cm4.h ****   {
 644:libs/CMSIS/Include/core_cm4.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 645:libs/CMSIS/Include/core_cm4.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 646:libs/CMSIS/Include/core_cm4.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 647:libs/CMSIS/Include/core_cm4.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 648:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[864];
 649:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 650:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED1[15];
 651:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 652:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED2[15];
 653:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 654:libs/CMSIS/Include/core_cm4.h **** } ITM_Type;
 655:libs/CMSIS/Include/core_cm4.h **** 
 656:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 657:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0                                          /*!< ITM TPR
 658:libs/CMSIS/Include/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)             /*!< ITM TPR
 659:libs/CMSIS/Include/core_cm4.h **** 
 660:libs/CMSIS/Include/core_cm4.h **** /* ITM Trace Control Register Definitions */
 661:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23                                          /*!< ITM TCR
 662:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                   /*!< ITM TCR
 663:libs/CMSIS/Include/core_cm4.h **** 
 664:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16                                          /*!< ITM TCR
 665:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)          /*!< ITM TCR
 666:libs/CMSIS/Include/core_cm4.h **** 
 667:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10                                          /*!< ITM TCR
 668:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                /*!< ITM TCR
 669:libs/CMSIS/Include/core_cm4.h **** 
 670:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8                                          /*!< ITM TCR
 671:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)             /*!< ITM TCR
 672:libs/CMSIS/Include/core_cm4.h **** 
 673:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4                                          /*!< ITM TCR
 674:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                 /*!< ITM TCR
 675:libs/CMSIS/Include/core_cm4.h **** 
 676:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Pos                   3                                          /*!< ITM TCR
 677:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TXENA_Msk                  (1UL << ITM_TCR_TXENA_Pos)                  /*!< ITM TCR
 678:libs/CMSIS/Include/core_cm4.h **** 
 679:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2                                          /*!< ITM TCR
 680:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                /*!< ITM TCR
 681:libs/CMSIS/Include/core_cm4.h **** 
 682:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1                                          /*!< ITM TCR
 683:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                  /*!< ITM TCR
 684:libs/CMSIS/Include/core_cm4.h **** 
 685:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0                                          /*!< ITM TCR
 686:libs/CMSIS/Include/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                 /*!< ITM TCR
 687:libs/CMSIS/Include/core_cm4.h **** 
 688:libs/CMSIS/Include/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 689:libs/CMSIS/Include/core_cm4.h **** 
 690:libs/CMSIS/Include/core_cm4.h **** 
 691:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 692:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 693:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_MPU CMSIS MPU
 694:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Memory Protection Unit (MPU)
 695:libs/CMSIS/Include/core_cm4.h ****   @{
 696:libs/CMSIS/Include/core_cm4.h ****  */
 697:libs/CMSIS/Include/core_cm4.h **** 
 698:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 699:libs/CMSIS/Include/core_cm4.h ****  */
 700:libs/CMSIS/Include/core_cm4.h **** typedef struct
 701:libs/CMSIS/Include/core_cm4.h **** {
 702:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 703:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 704:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 705:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 706:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 707:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
 708:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
 709:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
 710:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
 711:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
 712:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
 713:libs/CMSIS/Include/core_cm4.h **** } MPU_Type;
 714:libs/CMSIS/Include/core_cm4.h **** 
 715:libs/CMSIS/Include/core_cm4.h **** /* MPU Type Register */
 716:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 717:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 718:libs/CMSIS/Include/core_cm4.h **** 
 719:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 720:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 721:libs/CMSIS/Include/core_cm4.h **** 
 722:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 723:libs/CMSIS/Include/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 724:libs/CMSIS/Include/core_cm4.h **** 
 725:libs/CMSIS/Include/core_cm4.h **** /* MPU Control Register */
 726:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 727:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 728:libs/CMSIS/Include/core_cm4.h **** 
 729:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 730:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 731:libs/CMSIS/Include/core_cm4.h **** 
 732:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 733:libs/CMSIS/Include/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 734:libs/CMSIS/Include/core_cm4.h **** 
 735:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Number Register */
 736:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 737:libs/CMSIS/Include/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
 738:libs/CMSIS/Include/core_cm4.h **** 
 739:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Base Address Register */
 740:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 741:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 742:libs/CMSIS/Include/core_cm4.h **** 
 743:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 744:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 745:libs/CMSIS/Include/core_cm4.h **** 
 746:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 747:libs/CMSIS/Include/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 748:libs/CMSIS/Include/core_cm4.h **** 
 749:libs/CMSIS/Include/core_cm4.h **** /* MPU Region Attribute and Size Register */
 750:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 751:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 752:libs/CMSIS/Include/core_cm4.h **** 
 753:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 754:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 755:libs/CMSIS/Include/core_cm4.h **** 
 756:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 757:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 758:libs/CMSIS/Include/core_cm4.h **** 
 759:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 760:libs/CMSIS/Include/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
 761:libs/CMSIS/Include/core_cm4.h **** 
 762:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_MPU */
 763:libs/CMSIS/Include/core_cm4.h **** #endif
 764:libs/CMSIS/Include/core_cm4.h **** 
 765:libs/CMSIS/Include/core_cm4.h **** 
 766:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
 767:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 768:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_FPU CMSIS FPU
 769:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Floating Point Unit (FPU)
 770:libs/CMSIS/Include/core_cm4.h ****   @{
 771:libs/CMSIS/Include/core_cm4.h ****  */
 772:libs/CMSIS/Include/core_cm4.h **** 
 773:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Floating Point Unit (FPU).
 774:libs/CMSIS/Include/core_cm4.h ****  */
 775:libs/CMSIS/Include/core_cm4.h **** typedef struct
 776:libs/CMSIS/Include/core_cm4.h **** {
 777:libs/CMSIS/Include/core_cm4.h ****        uint32_t RESERVED0[1];
 778:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCCR;                   /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
 779:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPCAR;                   /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
 780:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t FPDSCR;                  /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
 781:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR0;                   /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
 782:libs/CMSIS/Include/core_cm4.h ****   __I  uint32_t MVFR1;                   /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
 783:libs/CMSIS/Include/core_cm4.h **** } FPU_Type;
 784:libs/CMSIS/Include/core_cm4.h **** 
 785:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Control Register */
 786:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31                                             /*!< FPCC
 787:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
 788:libs/CMSIS/Include/core_cm4.h **** 
 789:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30                                             /*!< FPCC
 790:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
 791:libs/CMSIS/Include/core_cm4.h **** 
 792:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8                                             /*!< FPCC
 793:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
 794:libs/CMSIS/Include/core_cm4.h **** 
 795:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6                                             /*!< FPCC
 796:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
 797:libs/CMSIS/Include/core_cm4.h **** 
 798:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5                                             /*!< FPCC
 799:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
 800:libs/CMSIS/Include/core_cm4.h **** 
 801:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4                                             /*!< FPCC
 802:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
 803:libs/CMSIS/Include/core_cm4.h **** 
 804:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3                                             /*!< FPCC
 805:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
 806:libs/CMSIS/Include/core_cm4.h **** 
 807:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1                                             /*!< FPCC
 808:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
 809:libs/CMSIS/Include/core_cm4.h **** 
 810:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0                                             /*!< FPCC
 811:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL << FPU_FPCCR_LSPACT_Pos)                  /*!< FPCC
 812:libs/CMSIS/Include/core_cm4.h **** 
 813:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Context Address Register */
 814:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3                                             /*!< FPCA
 815:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
 816:libs/CMSIS/Include/core_cm4.h **** 
 817:libs/CMSIS/Include/core_cm4.h **** /* Floating-Point Default Status Control Register */
 818:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26                                             /*!< FPDS
 819:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
 820:libs/CMSIS/Include/core_cm4.h **** 
 821:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25                                             /*!< FPDS
 822:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
 823:libs/CMSIS/Include/core_cm4.h **** 
 824:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24                                             /*!< FPDS
 825:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
 826:libs/CMSIS/Include/core_cm4.h **** 
 827:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22                                             /*!< FPDS
 828:libs/CMSIS/Include/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
 829:libs/CMSIS/Include/core_cm4.h **** 
 830:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 0 */
 831:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28                                             /*!< MVFR
 832:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
 833:libs/CMSIS/Include/core_cm4.h **** 
 834:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24                                             /*!< MVFR
 835:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
 836:libs/CMSIS/Include/core_cm4.h **** 
 837:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20                                             /*!< MVFR
 838:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
 839:libs/CMSIS/Include/core_cm4.h **** 
 840:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16                                             /*!< MVFR
 841:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
 842:libs/CMSIS/Include/core_cm4.h **** 
 843:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12                                             /*!< MVFR
 844:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
 845:libs/CMSIS/Include/core_cm4.h **** 
 846:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8                                             /*!< MVFR
 847:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
 848:libs/CMSIS/Include/core_cm4.h **** 
 849:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4                                             /*!< MVFR
 850:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
 851:libs/CMSIS/Include/core_cm4.h **** 
 852:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0                                             /*!< MVFR
 853:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL << FPU_MVFR0_A_SIMD_registers_Pos)      /*!< MVFR
 854:libs/CMSIS/Include/core_cm4.h **** 
 855:libs/CMSIS/Include/core_cm4.h **** /* Media and FP Feature Register 1 */
 856:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28                                             /*!< MVFR
 857:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
 858:libs/CMSIS/Include/core_cm4.h **** 
 859:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24                                             /*!< MVFR
 860:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
 861:libs/CMSIS/Include/core_cm4.h **** 
 862:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4                                             /*!< MVFR
 863:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
 864:libs/CMSIS/Include/core_cm4.h **** 
 865:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0                                             /*!< MVFR
 866:libs/CMSIS/Include/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL << FPU_MVFR1_FtZ_mode_Pos)              /*!< MVFR
 867:libs/CMSIS/Include/core_cm4.h **** 
 868:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_FPU */
 869:libs/CMSIS/Include/core_cm4.h **** #endif
 870:libs/CMSIS/Include/core_cm4.h **** 
 871:libs/CMSIS/Include/core_cm4.h **** 
 872:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 873:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_CoreDebug CMSIS Core Debug
 874:libs/CMSIS/Include/core_cm4.h ****   Type definitions for the Cortex-M Core Debug Registers
 875:libs/CMSIS/Include/core_cm4.h ****   @{
 876:libs/CMSIS/Include/core_cm4.h ****  */
 877:libs/CMSIS/Include/core_cm4.h **** 
 878:libs/CMSIS/Include/core_cm4.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
 879:libs/CMSIS/Include/core_cm4.h ****  */
 880:libs/CMSIS/Include/core_cm4.h **** typedef struct
 881:libs/CMSIS/Include/core_cm4.h **** {
 882:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
 883:libs/CMSIS/Include/core_cm4.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
 884:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
 885:libs/CMSIS/Include/core_cm4.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
 886:libs/CMSIS/Include/core_cm4.h **** } CoreDebug_Type;
 887:libs/CMSIS/Include/core_cm4.h **** 
 888:libs/CMSIS/Include/core_cm4.h **** /* Debug Halting Control and Status Register */
 889:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 890:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 891:libs/CMSIS/Include/core_cm4.h **** 
 892:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 893:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 894:libs/CMSIS/Include/core_cm4.h **** 
 895:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 896:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 897:libs/CMSIS/Include/core_cm4.h **** 
 898:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 899:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 900:libs/CMSIS/Include/core_cm4.h **** 
 901:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 902:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 903:libs/CMSIS/Include/core_cm4.h **** 
 904:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 905:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 906:libs/CMSIS/Include/core_cm4.h **** 
 907:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 908:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 909:libs/CMSIS/Include/core_cm4.h **** 
 910:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 911:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 912:libs/CMSIS/Include/core_cm4.h **** 
 913:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 914:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 915:libs/CMSIS/Include/core_cm4.h **** 
 916:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 917:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 918:libs/CMSIS/Include/core_cm4.h **** 
 919:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 920:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 921:libs/CMSIS/Include/core_cm4.h **** 
 922:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 923:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 924:libs/CMSIS/Include/core_cm4.h **** 
 925:libs/CMSIS/Include/core_cm4.h **** /* Debug Core Register Selector Register */
 926:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 927:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 928:libs/CMSIS/Include/core_cm4.h **** 
 929:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 930:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 931:libs/CMSIS/Include/core_cm4.h **** 
 932:libs/CMSIS/Include/core_cm4.h **** /* Debug Exception and Monitor Control Register */
 933:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 934:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 935:libs/CMSIS/Include/core_cm4.h **** 
 936:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 937:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 938:libs/CMSIS/Include/core_cm4.h **** 
 939:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 940:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 941:libs/CMSIS/Include/core_cm4.h **** 
 942:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 943:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 944:libs/CMSIS/Include/core_cm4.h **** 
 945:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 946:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 947:libs/CMSIS/Include/core_cm4.h **** 
 948:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 949:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 950:libs/CMSIS/Include/core_cm4.h **** 
 951:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 952:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 953:libs/CMSIS/Include/core_cm4.h **** 
 954:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 955:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 956:libs/CMSIS/Include/core_cm4.h **** 
 957:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 958:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 959:libs/CMSIS/Include/core_cm4.h **** 
 960:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 961:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 962:libs/CMSIS/Include/core_cm4.h **** 
 963:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 964:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 965:libs/CMSIS/Include/core_cm4.h **** 
 966:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 967:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 968:libs/CMSIS/Include/core_cm4.h **** 
 969:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 970:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 971:libs/CMSIS/Include/core_cm4.h **** 
 972:libs/CMSIS/Include/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
 973:libs/CMSIS/Include/core_cm4.h **** 
 974:libs/CMSIS/Include/core_cm4.h **** 
 975:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_core_register
 976:libs/CMSIS/Include/core_cm4.h ****   @{
 977:libs/CMSIS/Include/core_cm4.h ****  */
 978:libs/CMSIS/Include/core_cm4.h **** 
 979:libs/CMSIS/Include/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
 980:libs/CMSIS/Include/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 981:libs/CMSIS/Include/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
 982:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
 983:libs/CMSIS/Include/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 984:libs/CMSIS/Include/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 985:libs/CMSIS/Include/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 986:libs/CMSIS/Include/core_cm4.h **** 
 987:libs/CMSIS/Include/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
 988:libs/CMSIS/Include/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 989:libs/CMSIS/Include/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 990:libs/CMSIS/Include/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 991:libs/CMSIS/Include/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
 992:libs/CMSIS/Include/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 993:libs/CMSIS/Include/core_cm4.h **** 
 994:libs/CMSIS/Include/core_cm4.h **** #if (__MPU_PRESENT == 1)
 995:libs/CMSIS/Include/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 996:libs/CMSIS/Include/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 997:libs/CMSIS/Include/core_cm4.h **** #endif
 998:libs/CMSIS/Include/core_cm4.h **** 
 999:libs/CMSIS/Include/core_cm4.h **** #if (__FPU_PRESENT == 1)
1000:libs/CMSIS/Include/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit     
1001:libs/CMSIS/Include/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit     
1002:libs/CMSIS/Include/core_cm4.h **** #endif
1003:libs/CMSIS/Include/core_cm4.h **** 
1004:libs/CMSIS/Include/core_cm4.h **** /*@} */
1005:libs/CMSIS/Include/core_cm4.h **** 
1006:libs/CMSIS/Include/core_cm4.h **** 
1007:libs/CMSIS/Include/core_cm4.h **** 
1008:libs/CMSIS/Include/core_cm4.h **** /*******************************************************************************
1009:libs/CMSIS/Include/core_cm4.h ****  *                Hardware Abstraction Layer
1010:libs/CMSIS/Include/core_cm4.h ****  ******************************************************************************/
1011:libs/CMSIS/Include/core_cm4.h **** /** \defgroup CMSIS_Core_FunctionInterface CMSIS Core Function Interface
1012:libs/CMSIS/Include/core_cm4.h ****   Core Function Interface contains:
1013:libs/CMSIS/Include/core_cm4.h ****   - Core NVIC Functions
1014:libs/CMSIS/Include/core_cm4.h ****   - Core SysTick Functions
1015:libs/CMSIS/Include/core_cm4.h ****   - Core Debug Functions
1016:libs/CMSIS/Include/core_cm4.h ****   - Core Register Access Functions
1017:libs/CMSIS/Include/core_cm4.h **** */
1018:libs/CMSIS/Include/core_cm4.h **** 
1019:libs/CMSIS/Include/core_cm4.h **** 
1020:libs/CMSIS/Include/core_cm4.h **** 
1021:libs/CMSIS/Include/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1022:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1023:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_NVICFunctions CMSIS Core NVIC Functions
1024:libs/CMSIS/Include/core_cm4.h ****   @{
1025:libs/CMSIS/Include/core_cm4.h ****  */
1026:libs/CMSIS/Include/core_cm4.h **** 
1027:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Priority Grouping
1028:libs/CMSIS/Include/core_cm4.h **** 
1029:libs/CMSIS/Include/core_cm4.h ****   This function sets the priority grouping field using the required unlock sequence.
1030:libs/CMSIS/Include/core_cm4.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1031:libs/CMSIS/Include/core_cm4.h ****   Only values from 0..7 are used.
1032:libs/CMSIS/Include/core_cm4.h ****   In case of a conflict between priority grouping and available
1033:libs/CMSIS/Include/core_cm4.h ****   priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1034:libs/CMSIS/Include/core_cm4.h **** 
1035:libs/CMSIS/Include/core_cm4.h ****     \param [in]      PriorityGroup  Priority grouping field
1036:libs/CMSIS/Include/core_cm4.h ****  */
1037:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1038:libs/CMSIS/Include/core_cm4.h **** {
1039:libs/CMSIS/Include/core_cm4.h ****   uint32_t reg_value;
1040:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1041:libs/CMSIS/Include/core_cm4.h **** 
1042:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1043:libs/CMSIS/Include/core_cm4.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1044:libs/CMSIS/Include/core_cm4.h ****   reg_value  =  (reg_value                                 |
1045:libs/CMSIS/Include/core_cm4.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1046:libs/CMSIS/Include/core_cm4.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1047:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR =  reg_value;
1048:libs/CMSIS/Include/core_cm4.h **** }
1049:libs/CMSIS/Include/core_cm4.h **** 
1050:libs/CMSIS/Include/core_cm4.h **** 
1051:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Priority Grouping
1052:libs/CMSIS/Include/core_cm4.h **** 
1053:libs/CMSIS/Include/core_cm4.h ****   This function gets the priority grouping from NVIC Interrupt Controller.
1054:libs/CMSIS/Include/core_cm4.h ****   Priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1055:libs/CMSIS/Include/core_cm4.h **** 
1056:libs/CMSIS/Include/core_cm4.h ****     \return                Priority grouping field
1057:libs/CMSIS/Include/core_cm4.h ****  */
1058:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1059:libs/CMSIS/Include/core_cm4.h **** {
1060:libs/CMSIS/Include/core_cm4.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1061:libs/CMSIS/Include/core_cm4.h **** }
1062:libs/CMSIS/Include/core_cm4.h **** 
1063:libs/CMSIS/Include/core_cm4.h **** 
1064:libs/CMSIS/Include/core_cm4.h **** /** \brief  Enable External Interrupt
1065:libs/CMSIS/Include/core_cm4.h **** 
1066:libs/CMSIS/Include/core_cm4.h ****     This function enables a device specific interrupt in the NVIC interrupt controller.
1067:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1068:libs/CMSIS/Include/core_cm4.h **** 
1069:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to enable
1070:libs/CMSIS/Include/core_cm4.h ****  */
1071:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1072:libs/CMSIS/Include/core_cm4.h **** {
1073:libs/CMSIS/Include/core_cm4.h **** /*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
1074:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32
1075:libs/CMSIS/Include/core_cm4.h **** }
1076:libs/CMSIS/Include/core_cm4.h **** 
1077:libs/CMSIS/Include/core_cm4.h **** 
1078:libs/CMSIS/Include/core_cm4.h **** /** \brief  Disable External Interrupt
1079:libs/CMSIS/Include/core_cm4.h **** 
1080:libs/CMSIS/Include/core_cm4.h ****     This function disables a device specific interrupt in the NVIC interrupt controller.
1081:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1082:libs/CMSIS/Include/core_cm4.h **** 
1083:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the external interrupt to disable
1084:libs/CMSIS/Include/core_cm4.h ****  */
1085:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1086:libs/CMSIS/Include/core_cm4.h **** {
1087:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1088:libs/CMSIS/Include/core_cm4.h **** }
1089:libs/CMSIS/Include/core_cm4.h **** 
1090:libs/CMSIS/Include/core_cm4.h **** 
1091:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Pending Interrupt
1092:libs/CMSIS/Include/core_cm4.h **** 
1093:libs/CMSIS/Include/core_cm4.h ****     This function reads the pending register in the NVIC and returns the pending bit
1094:libs/CMSIS/Include/core_cm4.h ****     for the specified interrupt.
1095:libs/CMSIS/Include/core_cm4.h **** 
1096:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get pending
1097:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not pending
1098:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is pending
1099:libs/CMSIS/Include/core_cm4.h ****  */
1100:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1101:libs/CMSIS/Include/core_cm4.h **** {
1102:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1103:libs/CMSIS/Include/core_cm4.h **** }
1104:libs/CMSIS/Include/core_cm4.h **** 
1105:libs/CMSIS/Include/core_cm4.h **** 
1106:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Pending Interrupt
1107:libs/CMSIS/Include/core_cm4.h **** 
1108:libs/CMSIS/Include/core_cm4.h ****     This function sets the pending bit for the specified interrupt.
1109:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1110:libs/CMSIS/Include/core_cm4.h **** 
1111:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set pending
1112:libs/CMSIS/Include/core_cm4.h ****  */
1113:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1114:libs/CMSIS/Include/core_cm4.h **** {
1115:libs/CMSIS/Include/core_cm4.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1116:libs/CMSIS/Include/core_cm4.h **** }
1117:libs/CMSIS/Include/core_cm4.h **** 
1118:libs/CMSIS/Include/core_cm4.h **** 
1119:libs/CMSIS/Include/core_cm4.h **** /** \brief  Clear Pending Interrupt
1120:libs/CMSIS/Include/core_cm4.h **** 
1121:libs/CMSIS/Include/core_cm4.h ****     This function clears the pending bit for the specified interrupt.
1122:libs/CMSIS/Include/core_cm4.h ****     The interrupt number cannot be a negative value.
1123:libs/CMSIS/Include/core_cm4.h **** 
1124:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for clear pending
1125:libs/CMSIS/Include/core_cm4.h ****  */
1126:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1127:libs/CMSIS/Include/core_cm4.h **** {
1128:libs/CMSIS/Include/core_cm4.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1129:libs/CMSIS/Include/core_cm4.h **** }
1130:libs/CMSIS/Include/core_cm4.h **** 
1131:libs/CMSIS/Include/core_cm4.h **** 
1132:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Active Interrupt
1133:libs/CMSIS/Include/core_cm4.h **** 
1134:libs/CMSIS/Include/core_cm4.h ****     This function reads the active register in NVIC and returns the active bit.
1135:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for get active
1136:libs/CMSIS/Include/core_cm4.h ****     \return             0  Interrupt status is not active
1137:libs/CMSIS/Include/core_cm4.h ****     \return             1  Interrupt status is active
1138:libs/CMSIS/Include/core_cm4.h ****  */
1139:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1140:libs/CMSIS/Include/core_cm4.h **** {
1141:libs/CMSIS/Include/core_cm4.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1142:libs/CMSIS/Include/core_cm4.h **** }
1143:libs/CMSIS/Include/core_cm4.h **** 
1144:libs/CMSIS/Include/core_cm4.h **** 
1145:libs/CMSIS/Include/core_cm4.h **** /** \brief  Set Interrupt Priority
1146:libs/CMSIS/Include/core_cm4.h **** 
1147:libs/CMSIS/Include/core_cm4.h ****     This function sets the priority for the specified interrupt. The interrupt
1148:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1149:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1150:libs/CMSIS/Include/core_cm4.h **** 
1151:libs/CMSIS/Include/core_cm4.h ****     Note: The priority cannot be set for every core interrupt.
1152:libs/CMSIS/Include/core_cm4.h **** 
1153:libs/CMSIS/Include/core_cm4.h ****     \param [in]      IRQn  Number of the interrupt for set priority
1154:libs/CMSIS/Include/core_cm4.h ****     \param [in]  priority  Priority to set
1155:libs/CMSIS/Include/core_cm4.h ****  */
1156:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1157:libs/CMSIS/Include/core_cm4.h **** {
1158:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1159:libs/CMSIS/Include/core_cm4.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1160:libs/CMSIS/Include/core_cm4.h ****   else {
1161:libs/CMSIS/Include/core_cm4.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1162:libs/CMSIS/Include/core_cm4.h **** }
1163:libs/CMSIS/Include/core_cm4.h **** 
1164:libs/CMSIS/Include/core_cm4.h **** 
1165:libs/CMSIS/Include/core_cm4.h **** /** \brief  Get Interrupt Priority
1166:libs/CMSIS/Include/core_cm4.h **** 
1167:libs/CMSIS/Include/core_cm4.h ****     This function reads the priority for the specified interrupt. The interrupt
1168:libs/CMSIS/Include/core_cm4.h ****     number can be positive to specify an external (device specific)
1169:libs/CMSIS/Include/core_cm4.h ****     interrupt, or negative to specify an internal (core) interrupt.
1170:libs/CMSIS/Include/core_cm4.h **** 
1171:libs/CMSIS/Include/core_cm4.h ****     The returned priority value is automatically aligned to the implemented
1172:libs/CMSIS/Include/core_cm4.h ****     priority bits of the microcontroller.
1173:libs/CMSIS/Include/core_cm4.h **** 
1174:libs/CMSIS/Include/core_cm4.h ****     \param [in]   IRQn  Number of the interrupt for get priority
1175:libs/CMSIS/Include/core_cm4.h ****     \return             Interrupt Priority
1176:libs/CMSIS/Include/core_cm4.h ****  */
1177:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1178:libs/CMSIS/Include/core_cm4.h **** {
1179:libs/CMSIS/Include/core_cm4.h **** 
1180:libs/CMSIS/Include/core_cm4.h ****   if(IRQn < 0) {
1181:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1182:libs/CMSIS/Include/core_cm4.h ****   else {
1183:libs/CMSIS/Include/core_cm4.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1184:libs/CMSIS/Include/core_cm4.h **** }
1185:libs/CMSIS/Include/core_cm4.h **** 
1186:libs/CMSIS/Include/core_cm4.h **** 
1187:libs/CMSIS/Include/core_cm4.h **** /** \brief  Encode Priority
1188:libs/CMSIS/Include/core_cm4.h **** 
1189:libs/CMSIS/Include/core_cm4.h ****     This function encodes the priority for an interrupt with the given priority group,
1190:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1191:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1192:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1193:libs/CMSIS/Include/core_cm4.h **** 
1194:libs/CMSIS/Include/core_cm4.h ****     The returned priority value can be used for NVIC_SetPriority(...) function
1195:libs/CMSIS/Include/core_cm4.h **** 
1196:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1197:libs/CMSIS/Include/core_cm4.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0)
1198:libs/CMSIS/Include/core_cm4.h ****     \param [in]       SubPriority  Sub priority value (starting from 0)
1199:libs/CMSIS/Include/core_cm4.h ****     \return                        Encoded priority for the interrupt
1200:libs/CMSIS/Include/core_cm4.h ****  */
1201:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1202:libs/CMSIS/Include/core_cm4.h **** {
1203:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1204:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1205:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1206:libs/CMSIS/Include/core_cm4.h **** 
1207:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1208:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1209:libs/CMSIS/Include/core_cm4.h **** 
1210:libs/CMSIS/Include/core_cm4.h ****   return (
1211:libs/CMSIS/Include/core_cm4.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1212:libs/CMSIS/Include/core_cm4.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1213:libs/CMSIS/Include/core_cm4.h ****          );
1214:libs/CMSIS/Include/core_cm4.h **** }
1215:libs/CMSIS/Include/core_cm4.h **** 
1216:libs/CMSIS/Include/core_cm4.h **** 
1217:libs/CMSIS/Include/core_cm4.h **** /** \brief  Decode Priority
1218:libs/CMSIS/Include/core_cm4.h **** 
1219:libs/CMSIS/Include/core_cm4.h ****     This function decodes an interrupt priority value with the given priority group to
1220:libs/CMSIS/Include/core_cm4.h ****     preemptive priority value and sub priority value.
1221:libs/CMSIS/Include/core_cm4.h ****     In case of a conflict between priority grouping and available
1222:libs/CMSIS/Include/core_cm4.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1223:libs/CMSIS/Include/core_cm4.h **** 
1224:libs/CMSIS/Include/core_cm4.h ****     The priority value can be retrieved with NVIC_GetPriority(...) function
1225:libs/CMSIS/Include/core_cm4.h **** 
1226:libs/CMSIS/Include/core_cm4.h ****     \param [in]         Priority   Priority value
1227:libs/CMSIS/Include/core_cm4.h ****     \param [in]     PriorityGroup  Used priority group
1228:libs/CMSIS/Include/core_cm4.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0)
1229:libs/CMSIS/Include/core_cm4.h ****     \param [out]     pSubPriority  Sub priority value (starting from 0)
1230:libs/CMSIS/Include/core_cm4.h ****  */
1231:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1232:libs/CMSIS/Include/core_cm4.h **** {
1233:libs/CMSIS/Include/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1234:libs/CMSIS/Include/core_cm4.h ****   uint32_t PreemptPriorityBits;
1235:libs/CMSIS/Include/core_cm4.h ****   uint32_t SubPriorityBits;
1236:libs/CMSIS/Include/core_cm4.h **** 
1237:libs/CMSIS/Include/core_cm4.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1238:libs/CMSIS/Include/core_cm4.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1239:libs/CMSIS/Include/core_cm4.h **** 
1240:libs/CMSIS/Include/core_cm4.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1241:libs/CMSIS/Include/core_cm4.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1242:libs/CMSIS/Include/core_cm4.h **** }
1243:libs/CMSIS/Include/core_cm4.h **** 
1244:libs/CMSIS/Include/core_cm4.h **** 
1245:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Reset
1246:libs/CMSIS/Include/core_cm4.h **** 
1247:libs/CMSIS/Include/core_cm4.h ****     This function initiate a system reset request to reset the MCU.
1248:libs/CMSIS/Include/core_cm4.h ****  */
1249:libs/CMSIS/Include/core_cm4.h **** static __INLINE void NVIC_SystemReset(void)
1250:libs/CMSIS/Include/core_cm4.h **** {
1251:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1252:libs/CMSIS/Include/core_cm4.h ****                                                                   buffered write are completed befo
1253:libs/CMSIS/Include/core_cm4.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1254:libs/CMSIS/Include/core_cm4.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1255:libs/CMSIS/Include/core_cm4.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1256:libs/CMSIS/Include/core_cm4.h ****   __DSB();                                                     /* Ensure completion of memory acces
1257:libs/CMSIS/Include/core_cm4.h ****   while(1);                                                    /* wait until reset */
1258:libs/CMSIS/Include/core_cm4.h **** }
1259:libs/CMSIS/Include/core_cm4.h **** 
1260:libs/CMSIS/Include/core_cm4.h **** /*@} end of CMSIS_Core_NVICFunctions */
1261:libs/CMSIS/Include/core_cm4.h **** 
1262:libs/CMSIS/Include/core_cm4.h **** 
1263:libs/CMSIS/Include/core_cm4.h **** 
1264:libs/CMSIS/Include/core_cm4.h **** /* ##################################    SysTick function  ########################################
1265:libs/CMSIS/Include/core_cm4.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1266:libs/CMSIS/Include/core_cm4.h ****     \defgroup CMSIS_Core_SysTickFunctions CMSIS Core SysTick Functions
1267:libs/CMSIS/Include/core_cm4.h ****   @{
1268:libs/CMSIS/Include/core_cm4.h ****  */
1269:libs/CMSIS/Include/core_cm4.h **** 
1270:libs/CMSIS/Include/core_cm4.h **** #if (__Vendor_SysTickConfig == 0)
1271:libs/CMSIS/Include/core_cm4.h **** 
1272:libs/CMSIS/Include/core_cm4.h **** /** \brief  System Tick Configuration
1273:libs/CMSIS/Include/core_cm4.h **** 
1274:libs/CMSIS/Include/core_cm4.h ****     This function initialises the system tick timer and its interrupt and start the system tick tim
1275:libs/CMSIS/Include/core_cm4.h ****     Counter is in free running mode to generate periodical interrupts.
1276:libs/CMSIS/Include/core_cm4.h **** 
1277:libs/CMSIS/Include/core_cm4.h ****     \param [in]  ticks  Number of ticks between two interrupts
1278:libs/CMSIS/Include/core_cm4.h ****     \return          0  Function succeeded
1279:libs/CMSIS/Include/core_cm4.h ****     \return          1  Function failed
1280:libs/CMSIS/Include/core_cm4.h ****  */
1281:libs/CMSIS/Include/core_cm4.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1282:libs/CMSIS/Include/core_cm4.h **** {
1283:libs/CMSIS/Include/core_cm4.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
1284:libs/CMSIS/Include/core_cm4.h **** 
1285:libs/CMSIS/Include/core_cm4.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 126              		.loc 2 1285 0
 127 0016 9209     		lsrs	r2, r2, #6
 128              	.LVL13:
 129 0018 013A     		subs	r2, r2, #1
 130              	.LVL14:
 131 001a 4EF21003 		movw	r3, #57360
 132 001e CEF20003 		movt	r3, 57344
 133 0022 5A60     		str	r2, [r3, #4]
 134              	.LVL15:
 135              	.LBB10:
 136              	.LBB11:
1159:libs/CMSIS/Include/core_cm4.h ****   else {
 137              		.loc 2 1159 0
 138 0024 4FF46D42 		mov	r2, #60672
 139              	.LVL16:
 140 0028 CEF20002 		movt	r2, 57344
 141 002c F021     		movs	r1, #240
 142 002e 82F82310 		strb	r1, [r2, #35]
 143              	.LVL17:
 144              	.LBE11:
 145              	.LBE10:
1286:libs/CMSIS/Include/core_cm4.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
1287:libs/CMSIS/Include/core_cm4.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 146              		.loc 2 1287 0
 147 0032 0022     		movs	r2, #0
 148 0034 9A60     		str	r2, [r3, #8]
1288:libs/CMSIS/Include/core_cm4.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 149              		.loc 2 1288 0
 150 0036 0722     		movs	r2, #7
 151 0038 1A60     		str	r2, [r3]
 152 003a 7047     		bx	lr
 153              	.LBE9:
 154              	.LBE8:
 155              		.cfi_endproc
 156              	.LFE110:
 158              		.section	.text.USART_put,"ax",%progbits
 159              		.align	2
 160              		.global	USART_put
 161              		.thumb
 162              		.thumb_func
 164              	USART_put:
 165              	.LFB111:
  55:src/main.c    ****     // wait until data register is empty
 166              		.loc 1 55 0
 167              		.cfi_startproc
 168              		@ args = 0, pretend = 0, frame = 8
 169              		@ frame_needed = 0, uses_anonymous_args = 0
 170              	.LVL18:
 171 0000 00B5     		push	{lr}
 172              	.LCFI1:
 173              		.cfi_def_cfa_offset 4
 174              		.cfi_offset 14, -4
 175 0002 83B0     		sub	sp, sp, #12
 176              	.LCFI2:
 177              		.cfi_def_cfa_offset 16
 178 0004 8DF80710 		strb	r1, [sp, #7]
 179              	.L5:
  57:src/main.c    ****     USART_SendData(USARTx, c);
 180              		.loc 1 57 0 discriminator 1
 181 0008 0388     		ldrh	r3, [r0]
 182 000a 03F04003 		and	r3, r3, #64
 183 000e 9BB2     		uxth	r3, r3
 184 0010 002B     		cmp	r3, #0
 185 0012 F9D0     		beq	.L5
  58:src/main.c    **** }
 186              		.loc 1 58 0
 187 0014 9DF80710 		ldrb	r1, [sp, #7]	@ zero_extendqisi2
 188              	.LVL19:
 189 0018 FFF7FEFF 		bl	USART_SendData
 190              	.LVL20:
  59:src/main.c    **** 
 191              		.loc 1 59 0
 192 001c 03B0     		add	sp, sp, #12
 193              		@ sp needed
 194 001e 5DF804FB 		ldr	pc, [sp], #4
 195              		.cfi_endproc
 196              	.LFE111:
 198 0022 00BF     		.section	.text.USART_puts,"ax",%progbits
 199              		.align	2
 200              		.global	USART_puts
 201              		.thumb
 202              		.thumb_func
 204              	USART_puts:
 205              	.LFB112:
  61:src/main.c    **** 	while(*s){
 206              		.loc 1 61 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210              	.LVL21:
 211 0000 70B5     		push	{r4, r5, r6, lr}
 212              	.LCFI3:
 213              		.cfi_def_cfa_offset 16
 214              		.cfi_offset 4, -16
 215              		.cfi_offset 5, -12
 216              		.cfi_offset 6, -8
 217              		.cfi_offset 14, -4
 218 0002 0646     		mov	r6, r0
 219 0004 0C46     		mov	r4, r1
  62:src/main.c    ****         USART_put(USARTx, *s);
 220              		.loc 1 62 0
 221 0006 07E0     		b	.L8
 222              	.LVL22:
 223              	.L9:
  63:src/main.c    **** 		*s++;
 224              		.loc 1 63 0
 225 0008 2546     		mov	r5, r4
 226 000a 15F8011B 		ldrb	r1, [r5], #1	@ zero_extendqisi2
 227 000e 3046     		mov	r0, r6
 228 0010 FFF7FEFF 		bl	USART_put
 229              	.LVL23:
  64:src/main.c    **** 	}
 230              		.loc 1 64 0
 231 0014 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 232 0016 2C46     		mov	r4, r5
 233              	.LVL24:
 234              	.L8:
  62:src/main.c    ****         USART_put(USARTx, *s);
 235              		.loc 1 62 0 discriminator 1
 236 0018 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 237 001a 13F0FF0F 		tst	r3, #255
 238 001e F3D1     		bne	.L9
  66:src/main.c    **** 
 239              		.loc 1 66 0
 240 0020 70BD     		pop	{r4, r5, r6, pc}
 241              		.cfi_endproc
 242              	.LFE112:
 244 0022 00BF     		.section	.text.handle_uart_command,"ax",%progbits
 245              		.align	2
 246              		.global	handle_uart_command
 247              		.thumb
 248              		.thumb_func
 250              	handle_uart_command:
 251              	.LFB117:
 122:src/main.c    **** 
 252              		.loc 1 122 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL25:
 257 0000 10B5     		push	{r4, lr}
 258              	.LCFI4:
 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 4, -8
 261              		.cfi_offset 14, -4
 124:src/main.c    **** 
 262              		.loc 1 124 0
 263 0002 4FF48844 		mov	r4, #17408
 264 0006 C4F20004 		movt	r4, 16384
 265 000a 2046     		mov	r0, r4
 266              	.LVL26:
 267 000c 40F20001 		movw	r1, #:lower16:.LC0
 268 0010 C0F20001 		movt	r1, #:upper16:.LC0
 269 0014 FFF7FEFF 		bl	USART_puts
 270              	.LVL27:
 141:src/main.c    ****     vTaskDelete(NULL);
 271              		.loc 1 141 0
 272 0018 2046     		mov	r0, r4
 273 001a 40F20001 		movw	r1, #:lower16:.LC1
 274 001e C0F20001 		movt	r1, #:upper16:.LC1
 275 0022 FFF7FEFF 		bl	USART_puts
 276              	.LVL28:
 142:src/main.c    **** }
 277              		.loc 1 142 0
 278 0026 0020     		movs	r0, #0
 279 0028 FFF7FEFF 		bl	vTaskDelete
 280              	.LVL29:
 281 002c 10BD     		pop	{r4, pc}
 282              		.cfi_endproc
 283              	.LFE117:
 285              		.section	.text.vPH_read_value,"ax",%progbits
 286              		.align	2
 287              		.global	vPH_read_value
 288              		.thumb
 289              		.thumb_func
 291              	vPH_read_value:
 292              	.LFB127:
 161:src/main.c    **** 
 162:src/main.c    **** 
 163:src/main.c    ****     }
 164:src/main.c    **** 
 165:src/main.c    **** }
 166:src/main.c    **** 
 167:src/main.c    **** 
 168:src/main.c    **** void USART_readline(char *buffer, uint8_t length) {
 169:src/main.c    ****     int i;
 170:src/main.c    ****  //   static uint8_t first=1;
 171:src/main.c    **** 
 172:src/main.c    ****     buffer[length-1] = '\0';
 173:src/main.c    **** 
 174:src/main.c    ****     //for(i=0; received_string[read_pos]!='\r' && buffer[i]!='\0'; i++) {
 175:src/main.c    ****     for(i=0; i<length-1;i++){
 176:src/main.c    ****         if (read_pos == MAX_STRLEN-1) read_pos=0;
 177:src/main.c    ****         buffer[i] = received_string[read_pos];
 178:src/main.c    ****         read_pos++;
 179:src/main.c    ****     }
 180:src/main.c    ****    // if (!first) read_pos++; //This skips the previous Carriage return added to the end of data ad
 181:src/main.c    ****     //else first = 0;
 182:src/main.c    ****     read_pos++;
 183:src/main.c    **** 
 184:src/main.c    **** }
 185:src/main.c    **** 
 186:src/main.c    **** void USART_readline_int(int *num) {
 187:src/main.c    ****     *(num) = 0;
 188:src/main.c    ****     int i=0;
 189:src/main.c    ****     uint8_t neg = 0;
 190:src/main.c    **** 
 191:src/main.c    ****     int len = USART_nextline_length();
 192:src/main.c    ****     char buffer[len];
 193:src/main.c    ****     USART_readline(buffer, len);
 194:src/main.c    **** 
 195:src/main.c    ****     if (buffer[i] == '-') {
 196:src/main.c    ****         i++;
 197:src/main.c    ****         neg = 1;
 198:src/main.c    **** 
 199:src/main.c    ****     }
 200:src/main.c    **** 
 201:src/main.c    ****     for(i; buffer[i]!='\0'; i++) {
 202:src/main.c    ****         if (buffer[i] >= '0' && buffer[i]<='9'){
 203:src/main.c    ****             *(num) *= 10; 
 204:src/main.c    ****             *(num) += buffer[i]-'0';
 205:src/main.c    ****         }
 206:src/main.c    **** 
 207:src/main.c    ****         else {
 208:src/main.c    ****             break;
 209:src/main.c    ****         }    
 210:src/main.c    ****     }
 211:src/main.c    **** 
 212:src/main.c    ****     if (neg) {
 213:src/main.c    ****         *(num) *= -1;
 214:src/main.c    ****     }
 215:src/main.c    **** 
 216:src/main.c    **** }
 217:src/main.c    **** 
 218:src/main.c    **** void USART2_IRQHandler(void){
 219:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
 220:src/main.c    **** 	if( USART_GetITStatus(USART2, USART_IT_RXNE)){
 221:src/main.c    ****         static uint8_t count=0;
 222:src/main.c    **** 
 223:src/main.c    **** 		
 224:src/main.c    **** 		//static uint8_t cnt = 0; // this counter is used to determine the string length
 225:src/main.c    **** 		char t = USART2->DR; // the character from the USART2 data register is saved in t
 226:src/main.c    **** 
 227:src/main.c    ****         if (write_pos == MAX_STRLEN-1) write_pos=0;
 228:src/main.c    **** 
 229:src/main.c    ****         if (t == 8 || t== 127) {
 230:src/main.c    ****             write_pos--;
 231:src/main.c    ****             received_string[write_pos] = '\r';
 232:src/main.c    ****             USART_put(USART2, '\b');
 233:src/main.c    ****             USART_put(USART2, ' ');
 234:src/main.c    ****             USART_put(USART2, '\b');
 235:src/main.c    ****             return;
 236:src/main.c    **** 
 237:src/main.c    ****         }
 238:src/main.c    **** 
 239:src/main.c    **** 		// check if the received character is not the LF character (used to determine end of string) 
 240:src/main.c    **** 		// or the if the maximum string length has been been reached 
 241:src/main.c    **** 		else if/*(*/ (t != '\r')/* && (cnt< MAX_STRLEN-1) )*/{ 
 242:src/main.c    ****             count++;
 243:src/main.c    **** 			received_string[/*cnt*/write_pos] = t;
 244:src/main.c    ****             USART_put(USART2, t);
 245:src/main.c    **** 
 246:src/main.c    **** 		}
 247:src/main.c    **** 
 248:src/main.c    **** 		else{ // otherwise reset the character counter and print newline 
 249:src/main.c    ****             if (count != 0) {
 250:src/main.c    ****                 
 251:src/main.c    ****                 received_string[/*cnt*/write_pos] = '\r';
 252:src/main.c    ****                 USART_puts(USART2, "\r\n");
 253:src/main.c    **** 
 254:src/main.c    ****                 char *command = &received_string[write_pos-count];
 255:src/main.c    **** 
 256:src/main.c    ****                 xTaskCreate(handle_uart_command, (signed char*)"handle_uart_command", 128, command,
 257:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 258:src/main.c    **** 
 259:src/main.c    **** 
 260:src/main.c    ****                 input_lock = 0;
 261:src/main.c    ****                 count = 0;
 262:src/main.c    ****             }
 263:src/main.c    ****             else USART_puts(USART2, "\r\n");
 264:src/main.c    **** 		}
 265:src/main.c    ****         write_pos++;
 266:src/main.c    **** 	}
 267:src/main.c    **** }
 268:src/main.c    **** 
 269:src/main.c    **** 
 270:src/main.c    **** 
 271:src/main.c    **** //Initialize GPIO and USART2
 272:src/main.c    **** void initx(void){
 273:src/main.c    **** 	//Enable GPIO Clocks For USART2
 274:src/main.c    ****         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 275:src/main.c    **** 
 276:src/main.c    **** 	//Enable Clocks for USART2
 277:src/main.c    ****         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);	
 278:src/main.c    **** 
 279:src/main.c    **** 	//Structure With Data For GPIO Configuration
 280:src/main.c    **** 	GPIO_InitTypeDef GPIO_InitStructure;
 281:src/main.c    **** 
 282:src/main.c    **** 	//Structure With Data For USART Configuration
 283:src/main.c    **** 	USART_InitTypeDef USART_InitStructure;
 284:src/main.c    **** 
 285:src/main.c    ****     NVIC_InitTypeDef NVIC_InitStructure;
 286:src/main.c    **** 
 287:src/main.c    **** 	//GPIO Configuration
 288:src/main.c    ****   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 289:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 290:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 291:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 292:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 293:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 294:src/main.c    **** 
 295:src/main.c    **** 
 296:src/main.c    **** 	//Connect USART pins to AF
 297:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 298:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 299:src/main.c    **** 
 300:src/main.c    **** 	//Initialize LED
 301:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 302:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 303:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 304:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 305:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 306:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 307:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 308:src/main.c    **** 
 309:src/main.c    **** 	//USART Parameters
 310:src/main.c    **** 	USART_InitStructure.USART_BaudRate = 38400;
 311:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 312:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 313:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 314:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 315:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 316:src/main.c    **** 
 317:src/main.c    **** 	//Configuring And Enabling USART2
 318:src/main.c    **** 	USART_Init(USART2, &USART_InitStructure);
 319:src/main.c    **** 
 320:src/main.c    **** 
 321:src/main.c    ****     USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 322:src/main.c    **** 
 323:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 324:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 325:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 326:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 327:src/main.c    **** 
 328:src/main.c    ****     NVIC_Init(&NVIC_InitStructure);
 329:src/main.c    **** 
 330:src/main.c    **** 	USART_Cmd(USART2, ENABLE);
 331:src/main.c    **** 
 332:src/main.c    **** }
 333:src/main.c    **** 
 334:src/main.c    **** void TIM_PWM_init() {
 335:src/main.c    ****     //TIMER SETUP
 336:src/main.c    ****     RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 337:src/main.c    **** 
 338:src/main.c    ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStruct;
 339:src/main.c    **** 
 340:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Period = 19999;
 341:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 84;
 342:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;//TIM_CKD_DIV1;
 343:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 344:src/main.c    **** 
 345:src/main.c    ****     TIM_TimeBaseInit(TIM4, &TIM_TimeBaseInitStruct);
 346:src/main.c    **** 
 347:src/main.c    **** 
 348:src/main.c    ****     //pwm setup
 349:src/main.c    ****     
 350:src/main.c    ****     TIM_OCInitTypeDef TIM_OCInitStruct;
 351:src/main.c    ****     
 352:src/main.c    ****     TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 353:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 354:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0;
 355:src/main.c    ****     TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 356:src/main.c    ****     
 357:src/main.c    **** 
 358:src/main.c    **** 
 359:src/main.c    ****     TIM_OC1Init(TIM4, &TIM_OCInitStruct); //channel 1
 360:src/main.c    ****     TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 361:src/main.c    **** 
 362:src/main.c    ****     TIM_OC2Init(TIM4, &TIM_OCInitStruct); // channel 2
 363:src/main.c    ****     TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 364:src/main.c    **** 
 365:src/main.c    **** 
 366:src/main.c    ****     TIM_ARRPreloadConfig(TIM4, ENABLE);
 367:src/main.c    ****     TIM_Cmd(TIM4, ENABLE);
 368:src/main.c    **** }
 369:src/main.c    **** 
 370:src/main.c    **** 
 371:src/main.c    **** 
 372:src/main.c    **** 
 373:src/main.c    **** enum Module_State {MODULE_RUNNING, MODULE_STANDBY, MODULE_EXECUTED, MODULE_ERROR};
 374:src/main.c    **** enum System_State {SYSTEM_WRITING, SYSTEM_WRITTEN, SYSTEM_READ};
 375:src/main.c    **** 
 376:src/main.c    **** 
 377:src/main.c    **** 
 378:src/main.c    **** 
 379:src/main.c    **** 
 380:src/main.c    **** typedef struct{
 381:src/main.c    ****     volatile uint16_t *CCR;
 382:src/main.c    ****     uint16_t offset;
 383:src/main.c    ****     uint8_t ratio;
 384:src/main.c    ****     uint8_t last_pos;
 385:src/main.c    ****     uint8_t current_pos;
 386:src/main.c    ****     enum Module_State state;
 387:src/main.c    **** } Servo_Module;
 388:src/main.c    **** 
 389:src/main.c    **** typedef struct {
 390:src/main.c    ****     int value;
 391:src/main.c    ****     xSemaphoreHandle mutex;
 392:src/main.c    ****     enum Module_State state;
 393:src/main.c    **** } PHMeter_Module;
 394:src/main.c    **** 
 395:src/main.c    **** typedef struct {
 396:src/main.c    ****     int distance;
 397:src/main.c    ****     int lighton;
 398:src/main.c    ****     enum Module_State state;
 399:src/main.c    ****     Servo_Module *servo;
 400:src/main.c    **** }Light_Module;
 401:src/main.c    **** 
 402:src/main.c    **** typedef struct {
 403:src/main.c    ****     int value;
 404:src/main.c    ****     xSemaphoreHandle mutex;
 405:src/main.c    ****     enum Module_State state;
 406:src/main.c    **** } Temperature_Module;
 407:src/main.c    **** 
 408:src/main.c    **** typedef struct {
 409:src/main.c    ****     float tank;
 410:src/main.c    ****     GPIO_TypeDef port_out;
 411:src/main.c    ****     uint16_t pin_out;
 412:src/main.c    ****     enum Module_State state;
 413:src/main.c    ****     xSemaphoreHandle mutex;
 414:src/main.c    ****     int tank_height;
 415:src/main.c    **** } PPump_Module;
 416:src/main.c    **** 
 417:src/main.c    **** typedef struct {
 418:src/main.c    ****     GPIO_TypeDef port_in;
 419:src/main.c    ****     GPIO_TypeDef port_out;
 420:src/main.c    ****     uint16_t pin_in;
 421:src/main.c    ****     uint16_t pin_out;
 422:src/main.c    ****     uint16_t timeout;
 423:src/main.c    ****     xSemaphoreHandle mutex;
 424:src/main.c    ****     enum Module_State state;
 425:src/main.c    ****     int value;
 426:src/main.c    **** } UDS_Module; //(U)ltrasonic (D)istance (S)ensor
 427:src/main.c    **** 
 428:src/main.c    **** typedef struct {
 429:src/main.c    ****     GPIO_TypeDef port_out;
 430:src/main.c    ****     uint16_t pin_out;
 431:src/main.c    ****     uint16_t speed;
 432:src/main.c    **** 
 433:src/main.c    **** } Fan_Module;
 434:src/main.c    **** 
 435:src/main.c    **** typedef struct {
 436:src/main.c    ****     PPump_Module *ppump;
 437:src/main.c    ****     int amount;
 438:src/main.c    **** 
 439:src/main.c    **** } vPPump_parameters;
 440:src/main.c    **** 
 441:src/main.c    **** typedef struct {
 442:src/main.c    ****     portTickType delay ;
 443:src/main.c    ****     int target_ph;
 444:src/main.c    **** } vPH_parameters;
 445:src/main.c    **** 
 446:src/main.c    **** typedef struct {
 447:src/main.c    ****     int status;
 448:src/main.c    ****     int delay;
 449:src/main.c    **** } vLight_parameters;
 450:src/main.c    **** 
 451:src/main.c    **** typedef struct {
 452:src/main.c    ****     enum System_State state;
 453:src/main.c    ****     PPump_Module *PPump_PHUP;
 454:src/main.c    ****     PPump_Module *PPump_PHDOWN;
 455:src/main.c    ****     PPump_Module *PPump_NUTRIENT;
 456:src/main.c    ****     uint16_t nutrient_schedule[52];
 457:src/main.c    ****     uint16_t ph_schedule[52];
 458:src/main.c    **** } HydroponicSystem;
 459:src/main.c    **** 
 460:src/main.c    **** 
 461:src/main.c    **** typedef struct {
 462:src/main.c    ****     Light_Module Lighting; //change to Lighting_Module
 463:src/main.c    ****     enum System_State state;
 464:src/main.c    ****     uint16_t lighting_schedule[52]; // array with weekly lighting schedule 
 465:src/main.c    ****     uint16_t distance_schedule[52]; 
 466:src/main.c    **** } LightingSystem;
 467:src/main.c    **** 
 468:src/main.c    **** typedef struct {
 469:src/main.c    ****     enum System_State state;
 470:src/main.c    ****     Fan_Module Fan_Reservoir; //fans the water
 471:src/main.c    ****     Fan_Module Fan_Plant; //fans the plants
 472:src/main.c    ****     Fan_Module Fan_In; //brings in co2
 473:src/main.c    ****     Fan_Module Fan_Out; //puts out oxygen through carbon filter
 474:src/main.c    ****     Temperature_Module Temperature_Resevoir; // straightforward, above comments apply here
 475:src/main.c    ****     Temperature_Module Temperature_Plant;
 476:src/main.c    **** } ACSystem;
 477:src/main.c    **** /*
 478:src/main.c    **** void System_update_member(NULL *system_member, NULL* member_value ) {
 479:src/main.c    ****     if (system_member && member_value) {
 480:src/main.c    ****         //do an if stsatement to check if system member and member value are of the same type
 481:src/main.c    ****         return;
 482:src/main.c    ****     }
 483:src/main.c    ****     //error
 484:src/main.c    **** }
 485:src/main.c    **** */
 486:src/main.c    **** PPump_Module PPump_PHUP;
 487:src/main.c    **** UDS_Module UDS_PHUP;
 488:src/main.c    **** 
 489:src/main.c    **** PPump_Module PPump_PHDOWN;
 490:src/main.c    **** UDS_Module UDS_PHDOWN;
 491:src/main.c    **** 
 492:src/main.c    **** PPump_Module PPump_NUTRIENT;
 493:src/main.c    **** UDS_Module UDS_NUTRIENT;
 494:src/main.c    **** 
 495:src/main.c    **** PHMeter_Module PHMeter_Resvoir;
 496:src/main.c    **** 
 497:src/main.c    **** 
 498:src/main.c    **** 
 499:src/main.c    **** void PHMeter_Init(PHMeter_Module *module) {
 500:src/main.c    ****     if (module) {
 501:src/main.c    ****         module->state = MODULE_STANDBY;
 502:src/main.c    ****     }
 503:src/main.c    **** }
 504:src/main.c    **** 
 505:src/main.c    **** void PPump_Init(PPump_Module *module, UDS_Module *sensor) {
 506:src/main.c    ****     if (module) {
 507:src/main.c    ****         //use sensor to calculate distance Make this a task.  One parent task for getting tank size
 508:src/main.c    ****         sensor->value = 8;
 509:src/main.c    ****         sensor->state = MODULE_EXECUTED;
 510:src/main.c    ****         module->tank = 100*(sensor->value/module->tank_height);
 511:src/main.c    ****         module->state = MODULE_STANDBY;
 512:src/main.c    ****     }
 513:src/main.c    **** 
 514:src/main.c    **** }
 515:src/main.c    **** 
 516:src/main.c    **** void vLight_task(vLight_parameters *params) {
 517:src/main.c    ****     USART_puts(USART2, "Executed Light_task\r\n");
 518:src/main.c    ****     /*
 519:src/main.c    ****     Light_set(params->status);
 520:src/main.c    ****     int height = Plant_get_height();
 521:src/main.c    ****     Light_distance_set(distance+height);
 522:src/main.c    **** 
 523:src/main.c    ****     //maybe look for something like recurring task
 524:src/main.c    ****     //you need to find a way to change variable while its waiting;
 525:src/main.c    ****     */
 526:src/main.c    ****     vTaskDelete(NULL);
 527:src/main.c    **** } 
 528:src/main.c    **** 
 529:src/main.c    **** int TEST_PH_VALUE = 50;
 530:src/main.c    **** 
 531:src/main.c    **** 
 532:src/main.c    **** void vPH_read_value(PHMeter_Module *meter) {
 293              		.loc 1 532 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              	.LVL30:
 298 0000 10B5     		push	{r4, lr}
 299              	.LCFI5:
 300              		.cfi_def_cfa_offset 8
 301              		.cfi_offset 4, -8
 302              		.cfi_offset 14, -4
 303 0002 0446     		mov	r4, r0
 533:src/main.c    ****     meter->state = MODULE_RUNNING;
 304              		.loc 1 533 0
 305 0004 0023     		movs	r3, #0
 306 0006 0372     		strb	r3, [r0, #8]
 534:src/main.c    ****     if (xSemaphoreTake(meter->mutex, (portTickType) 100) == pdTRUE) {
 307              		.loc 1 534 0
 308 0008 4068     		ldr	r0, [r0, #4]
 309              	.LVL31:
 310 000a 1946     		mov	r1, r3
 311 000c 6422     		movs	r2, #100
 312 000e FFF7FEFF 		bl	xQueueGenericReceive
 313              	.LVL32:
 314 0012 0128     		cmp	r0, #1
 315 0014 18D1     		bne	.L12
 535:src/main.c    ****         USART_puts(USART2, "Read pH Meter...\r\n");
 316              		.loc 1 535 0
 317 0016 4FF48840 		mov	r0, #17408
 318 001a C4F20000 		movt	r0, 16384
 319 001e 40F20001 		movw	r1, #:lower16:.LC2
 320 0022 C0F20001 		movt	r1, #:upper16:.LC2
 321 0026 FFF7FEFF 		bl	USART_puts
 322              	.LVL33:
 536:src/main.c    ****         meter->value = TEST_PH_VALUE;
 323              		.loc 1 536 0
 324 002a 40F20003 		movw	r3, #:lower16:.LANCHOR0
 325 002e C0F20003 		movt	r3, #:upper16:.LANCHOR0
 326 0032 1B68     		ldr	r3, [r3]
 327 0034 2360     		str	r3, [r4]
 537:src/main.c    ****         meter->state = MODULE_EXECUTED;
 328              		.loc 1 537 0
 329 0036 0223     		movs	r3, #2
 330 0038 2372     		strb	r3, [r4, #8]
 538:src/main.c    ****         xSemaphoreGive(meter->mutex);
 331              		.loc 1 538 0
 332 003a 6068     		ldr	r0, [r4, #4]
 333 003c 0021     		movs	r1, #0
 334 003e 0A46     		mov	r2, r1
 335 0040 0B46     		mov	r3, r1
 336 0042 FFF7FEFF 		bl	xQueueGenericSend
 337              	.LVL34:
 338 0046 09E0     		b	.L13
 339              	.L12:
 539:src/main.c    **** 
 540:src/main.c    ****     }
 541:src/main.c    **** 
 542:src/main.c    ****     else {
 543:src/main.c    ****         USART_puts(USART2, "COULDNT TAKE SEMAPHORE");
 340              		.loc 1 543 0
 341 0048 4FF48840 		mov	r0, #17408
 342 004c C4F20000 		movt	r0, 16384
 343 0050 40F20001 		movw	r1, #:lower16:.LC3
 344 0054 C0F20001 		movt	r1, #:upper16:.LC3
 345 0058 FFF7FEFF 		bl	USART_puts
 346              	.LVL35:
 347              	.L13:
 544:src/main.c    **** 
 545:src/main.c    ****     }
 546:src/main.c    **** 
 547:src/main.c    ****     vTaskDelete(NULL);
 348              		.loc 1 547 0
 349 005c 0020     		movs	r0, #0
 350 005e FFF7FEFF 		bl	vTaskDelete
 351              	.LVL36:
 352 0062 10BD     		pop	{r4, pc}
 353              		.cfi_endproc
 354              	.LFE127:
 356              		.section	.text.vPPump_dispense,"ax",%progbits
 357              		.align	2
 358              		.global	vPPump_dispense
 359              		.thumb
 360              		.thumb_func
 362              	vPPump_dispense:
 363              	.LFB128:
 548:src/main.c    **** 
 549:src/main.c    **** }
 550:src/main.c    **** 
 551:src/main.c    **** void vPPump_dispense(vPPump_parameters *params) {
 364              		.loc 1 551 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              	.LVL37:
 369 0000 10B5     		push	{r4, lr}
 370              	.LCFI6:
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 4, -8
 373              		.cfi_offset 14, -4
 374 0002 0446     		mov	r4, r0
 552:src/main.c    ****     params->ppump->state = MODULE_RUNNING; 
 375              		.loc 1 552 0
 376 0004 0268     		ldr	r2, [r0]
 377 0006 0023     		movs	r3, #0
 378 0008 82F82E30 		strb	r3, [r2, #46]
 553:src/main.c    ****     if (xSemaphoreTake(PHMeter_Resvoir.mutex, (portTickType) 100) == pdTRUE) {
 379              		.loc 1 553 0
 380 000c 40F20002 		movw	r2, #:lower16:PHMeter_Resvoir
 381 0010 C0F20002 		movt	r2, #:upper16:PHMeter_Resvoir
 382 0014 5068     		ldr	r0, [r2, #4]
 383              	.LVL38:
 384 0016 1946     		mov	r1, r3
 385 0018 6422     		movs	r2, #100
 386 001a FFF7FEFF 		bl	xQueueGenericReceive
 387              	.LVL39:
 388 001e 0128     		cmp	r0, #1
 389 0020 43D1     		bne	.L15
 390              	.LVL40:
 391              	.LBB12:
 554:src/main.c    ****         const int ppump_speed = 1;
 555:src/main.c    ****         //GPIO_WriteBit(params->port, params->pin, Bit_SET);
 556:src/main.c    ****         USART_puts(USART2, "Starting to dispense...\r\n");
 392              		.loc 1 556 0
 393 0022 4FF48840 		mov	r0, #17408
 394 0026 C4F20000 		movt	r0, 16384
 395 002a 40F20001 		movw	r1, #:lower16:.LC4
 396 002e C0F20001 		movt	r1, #:upper16:.LC4
 397 0032 FFF7FEFF 		bl	USART_puts
 398              	.LVL41:
 557:src/main.c    ****         if (params->ppump == &PPump_PHUP) TEST_PH_VALUE+=5;
 399              		.loc 1 557 0
 400 0036 2268     		ldr	r2, [r4]
 401 0038 40F20003 		movw	r3, #:lower16:PPump_PHUP
 402 003c C0F20003 		movt	r3, #:upper16:PPump_PHUP
 403 0040 9A42     		cmp	r2, r3
 404 0042 07D1     		bne	.L16
 405              		.loc 1 557 0 is_stmt 0 discriminator 1
 406 0044 40F20003 		movw	r3, #:lower16:.LANCHOR0
 407 0048 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 408 004c 1A68     		ldr	r2, [r3]
 409 004e 0532     		adds	r2, r2, #5
 410 0050 1A60     		str	r2, [r3]
 411 0052 0DE0     		b	.L17
 412              	.L16:
 558:src/main.c    ****         else if(params->ppump == &PPump_PHDOWN) TEST_PH_VALUE-=5; 
 413              		.loc 1 558 0 is_stmt 1
 414 0054 40F20003 		movw	r3, #:lower16:PPump_PHDOWN
 415 0058 C0F20003 		movt	r3, #:upper16:PPump_PHDOWN
 416 005c 9A42     		cmp	r2, r3
 417 005e 01BF     		itttt	eq
 418 0060 40F20003 		movweq	r3, #:lower16:.LANCHOR0
 419 0064 C0F20003 		movteq	r3, #:upper16:.LANCHOR0
 420 0068 1A68     		ldreq	r2, [r3]
 421 006a 053A     		subeq	r2, r2, #5
 422 006c 08BF     		it	eq
 423 006e 1A60     		streq	r2, [r3]
 424              	.L17:
 425              	.LVL42:
 559:src/main.c    **** 
 560:src/main.c    ****         portTickType xDelay = (1000 * ppump_speed) / portTICK_RATE_MS;
 561:src/main.c    ****         vTaskDelay(xDelay);
 426              		.loc 1 561 0 discriminator 1
 427 0070 4FF47A70 		mov	r0, #1000
 428 0074 FFF7FEFF 		bl	vTaskDelay
 429              	.LVL43:
 562:src/main.c    ****         USART_puts(USART2, "Finished dispensing\r\n");
 430              		.loc 1 562 0 discriminator 1
 431 0078 4FF48840 		mov	r0, #17408
 432 007c C4F20000 		movt	r0, 16384
 433 0080 40F20001 		movw	r1, #:lower16:.LC5
 434 0084 C0F20001 		movt	r1, #:upper16:.LC5
 435 0088 FFF7FEFF 		bl	USART_puts
 436              	.LVL44:
 563:src/main.c    ****         xSemaphoreGive(PHMeter_Resvoir.mutex);
 437              		.loc 1 563 0 discriminator 1
 438 008c 40F20003 		movw	r3, #:lower16:PHMeter_Resvoir
 439 0090 C0F20003 		movt	r3, #:upper16:PHMeter_Resvoir
 440 0094 5868     		ldr	r0, [r3, #4]
 441 0096 0021     		movs	r1, #0
 442 0098 0A46     		mov	r2, r1
 443 009a 0B46     		mov	r3, r1
 444 009c FFF7FEFF 		bl	xQueueGenericSend
 445              	.LVL45:
 564:src/main.c    ****         params->ppump->state = MODULE_EXECUTED; 
 446              		.loc 1 564 0 discriminator 1
 447 00a0 2368     		ldr	r3, [r4]
 448 00a2 0222     		movs	r2, #2
 449 00a4 83F82E20 		strb	r2, [r3, #46]
 450              	.LBE12:
 451 00a8 09E0     		b	.L18
 452              	.LVL46:
 453              	.L15:
 565:src/main.c    **** 
 566:src/main.c    ****     }
 567:src/main.c    **** 
 568:src/main.c    ****     else {
 569:src/main.c    ****         USART_puts(USART2, "PPUMP_DISPENSE COULDNT GET MUTEX\r\n");
 454              		.loc 1 569 0
 455 00aa 4FF48840 		mov	r0, #17408
 456 00ae C4F20000 		movt	r0, 16384
 457 00b2 40F20001 		movw	r1, #:lower16:.LC6
 458 00b6 C0F20001 		movt	r1, #:upper16:.LC6
 459 00ba FFF7FEFF 		bl	USART_puts
 460              	.LVL47:
 461              	.L18:
 570:src/main.c    ****     }
 571:src/main.c    ****     vTaskDelete(NULL);
 462              		.loc 1 571 0
 463 00be 0020     		movs	r0, #0
 464 00c0 FFF7FEFF 		bl	vTaskDelete
 465              	.LVL48:
 466 00c4 10BD     		pop	{r4, pc}
 467              		.cfi_endproc
 468              	.LFE128:
 470 00c6 00BF     		.section	.text.USART_put_int,"ax",%progbits
 471              		.align	2
 472              		.global	USART_put_int
 473              		.thumb
 474              		.thumb_func
 476              	USART_put_int:
 477              	.LFB113:
  68:src/main.c    ****     uint8_t neg = 0;
 478              		.loc 1 68 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 16
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482              	.LVL49:
 483 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 484              	.LCFI7:
 485              		.cfi_def_cfa_offset 20
 486              		.cfi_offset 4, -20
 487              		.cfi_offset 5, -16
 488              		.cfi_offset 6, -12
 489              		.cfi_offset 7, -8
 490              		.cfi_offset 14, -4
 491 0002 85B0     		sub	sp, sp, #20
 492              	.LCFI8:
 493              		.cfi_def_cfa_offset 40
 494 0004 0646     		mov	r6, r0
 495              	.LVL50:
  71:src/main.c    ****         number*=-1;
 496              		.loc 1 71 0
 497 0006 0029     		cmp	r1, #0
  72:src/main.c    ****         neg = 1;
 498              		.loc 1 72 0
 499 0008 BABF     		itte	lt
 500 000a 4942     		rsblt	r1, r1, #0
 501              	.LVL51:
  73:src/main.c    ****     }
 502              		.loc 1 73 0
 503 000c 0127     		movlt	r7, #1
  69:src/main.c    **** 
 504              		.loc 1 69 0
 505 000e 0027     		movge	r7, #0
 506              	.LVL52:
  76:src/main.c    ****     do {
 507              		.loc 1 76 0
 508 0010 0022     		movs	r2, #0
  78:src/main.c    ****         number /= 10;
 509              		.loc 1 78 0
 510 0012 46F26760 		movw	r0, #26215
 511              	.LVL53:
 512 0016 C6F26660 		movt	r0, 26214
 513              	.LVL54:
 514              	.L21:
  78:src/main.c    ****         number /= 10;
 515              		.loc 1 78 0 is_stmt 0 discriminator 1
 516 001a 541C     		adds	r4, r2, #1
 517              	.LVL55:
 518 001c 80FB0135 		smull	r3, r5, r0, r1
 519 0020 CB17     		asrs	r3, r1, #31
 520 0022 C3EBA503 		rsb	r3, r3, r5, asr #2
 521 0026 1D46     		mov	r5, r3
 522 0028 03EB8303 		add	r3, r3, r3, lsl #2
 523 002c A1EB4303 		sub	r3, r1, r3, lsl #1
 524 0030 DBB2     		uxtb	r3, r3
 525 0032 04A9     		add	r1, sp, #16
 526              	.LVL56:
 527 0034 0A44     		add	r2, r2, r1
 528 0036 3033     		adds	r3, r3, #48
 529 0038 02F80C3C 		strb	r3, [r2, #-12]
  79:src/main.c    ****     } while (number);
 530              		.loc 1 79 0 is_stmt 1 discriminator 1
 531 003c 2946     		mov	r1, r5
 532              	.LVL57:
  78:src/main.c    ****         number /= 10;
 533              		.loc 1 78 0 discriminator 1
 534 003e 2246     		mov	r2, r4
  80:src/main.c    **** 
 535              		.loc 1 80 0 discriminator 1
 536 0040 002D     		cmp	r5, #0
 537 0042 EAD1     		bne	.L21
  82:src/main.c    ****     while(i) {
 538              		.loc 1 82 0
 539 0044 67B1     		cbz	r7, .L27
  82:src/main.c    ****     while(i) {
 540              		.loc 1 82 0 is_stmt 0 discriminator 1
 541 0046 3046     		mov	r0, r6
 542 0048 2D21     		movs	r1, #45
 543              	.LVL58:
 544 004a FFF7FEFF 		bl	USART_put
 545              	.LVL59:
 546 004e 07E0     		b	.L27
 547              	.L24:
  84:src/main.c    ****     }
 548              		.loc 1 84 0 is_stmt 1
 549 0050 013C     		subs	r4, r4, #1
 550              	.LVL60:
 551 0052 04AB     		add	r3, sp, #16
 552 0054 2344     		add	r3, r3, r4
 553 0056 3046     		mov	r0, r6
 554 0058 13F80C1C 		ldrb	r1, [r3, #-12]	@ zero_extendqisi2
 555 005c FFF7FEFF 		bl	USART_put
 556              	.LVL61:
 557              	.L27:
  83:src/main.c    ****         USART_put(USARTx, value[--i]);
 558              		.loc 1 83 0 discriminator 1
 559 0060 002C     		cmp	r4, #0
 560 0062 F5D1     		bne	.L24
  86:src/main.c    **** 
 561              		.loc 1 86 0
 562 0064 05B0     		add	sp, sp, #20
 563              		@ sp needed
 564 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 565              		.cfi_endproc
 566              	.LFE113:
 568              		.section	.text.vPH_task,"ax",%progbits
 569              		.align	2
 570              		.global	vPH_task
 571              		.thumb
 572              		.thumb_func
 574              	vPH_task:
 575              	.LFB129:
 572:src/main.c    **** }
 573:src/main.c    **** 
 574:src/main.c    **** 
 575:src/main.c    **** void vPH_task(vPH_parameters *params) {
 576              		.loc 1 575 0
 577              		.cfi_startproc
 578              		@ args = 0, pretend = 0, frame = 16
 579              		@ frame_needed = 0, uses_anonymous_args = 0
 580              	.LVL62:
 581 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 582              	.LCFI9:
 583              		.cfi_def_cfa_offset 36
 584              		.cfi_offset 4, -36
 585              		.cfi_offset 5, -32
 586              		.cfi_offset 6, -28
 587              		.cfi_offset 7, -24
 588              		.cfi_offset 8, -20
 589              		.cfi_offset 9, -16
 590              		.cfi_offset 10, -12
 591              		.cfi_offset 11, -8
 592              		.cfi_offset 14, -4
 593 0004 89B0     		sub	sp, sp, #36
 594              	.LCFI10:
 595              		.cfi_def_cfa_offset 72
 596 0006 8146     		mov	r9, r0
 576:src/main.c    ****     USART_puts(USART2, "-----------------\r\n(1)target ph: ");
 597              		.loc 1 576 0
 598 0008 4FF48844 		mov	r4, #17408
 599 000c C4F20004 		movt	r4, 16384
 600 0010 2046     		mov	r0, r4
 601              	.LVL63:
 602 0012 40F20001 		movw	r1, #:lower16:.LC7
 603 0016 C0F20001 		movt	r1, #:upper16:.LC7
 604 001a FFF7FEFF 		bl	USART_puts
 605              	.LVL64:
 577:src/main.c    ****     USART_put_int(USART2, params->target_ph);
 606              		.loc 1 577 0
 607 001e 2046     		mov	r0, r4
 608 0020 D9F80410 		ldr	r1, [r9, #4]
 609 0024 FFF7FEFF 		bl	USART_put_int
 610              	.LVL65:
 578:src/main.c    ****     USART_puts(USART2, "\r\n");
 611              		.loc 1 578 0
 612 0028 2046     		mov	r0, r4
 613 002a 40F20001 		movw	r1, #:lower16:.LC1
 614 002e C0F20001 		movt	r1, #:upper16:.LC1
 615 0032 FFF7FEFF 		bl	USART_puts
 616              	.LVL66:
 579:src/main.c    **** 
 580:src/main.c    ****     USART_puts(USART2, "Executing PH_task...\r\n");
 617              		.loc 1 580 0
 618 0036 2046     		mov	r0, r4
 619 0038 40F20001 		movw	r1, #:lower16:.LC8
 620 003c C0F20001 		movt	r1, #:upper16:.LC8
 621 0040 FFF7FEFF 		bl	USART_puts
 622              	.LVL67:
 581:src/main.c    **** 
 582:src/main.c    ****     PHMeter_Resvoir.mutex = xSemaphoreCreateMutex();
 623              		.loc 1 582 0
 624 0044 FFF7FEFF 		bl	xQueueCreateMutex
 625              	.LVL68:
 626 0048 40F20004 		movw	r4, #:lower16:PHMeter_Resvoir
 627 004c C0F20004 		movt	r4, #:upper16:PHMeter_Resvoir
 628 0050 6060     		str	r0, [r4, #4]
 583:src/main.c    ****     xSemaphoreGive(PHMeter_Resvoir.mutex);
 629              		.loc 1 583 0
 630 0052 0021     		movs	r1, #0
 631 0054 0A46     		mov	r2, r1
 632 0056 0B46     		mov	r3, r1
 633 0058 FFF7FEFF 		bl	xQueueGenericSend
 634              	.LVL69:
 584:src/main.c    **** 
 585:src/main.c    **** 
 586:src/main.c    ****     if (PHMeter_Resvoir.mutex == NULL) USART_puts(USART2, "PH_METER->mutex == NULL\r\n");
 635              		.loc 1 586 0
 636 005c 6368     		ldr	r3, [r4, #4]
 637 005e 4BB9     		cbnz	r3, .L29
 638              		.loc 1 586 0 is_stmt 0 discriminator 1
 639 0060 4FF48840 		mov	r0, #17408
 640 0064 C4F20000 		movt	r0, 16384
 641 0068 40F20001 		movw	r1, #:lower16:.LC9
 642 006c C0F20001 		movt	r1, #:upper16:.LC9
 643 0070 FFF7FEFF 		bl	USART_puts
 644              	.LVL70:
 645              	.L29:
 587:src/main.c    **** 
 588:src/main.c    ****     //PH_CHANGING = 1; use this so the web console knows when changes are happening
 589:src/main.c    ****    //add if sepamphore is not null error check
 590:src/main.c    ****     int read_ph=1; 
 591:src/main.c    ****     int TARGET_PH_REACHED = 0;
 592:src/main.c    ****     /*
 593:src/main.c    ****      *
 594:src/main.c    ****      *
 595:src/main.c    ****      *
 596:src/main.c    ****      * MAKE SUB TASKS CREATED INCREMENT ITS PRIORITY BY ONE RELATIVE TO PARENT TASK
 597:src/main.c    ****      */
 598:src/main.c    **** //    params->target_ph = 100;
 599:src/main.c    ****     USART_puts(USART2, "-----------------\r\ntarget ph: ");
 646              		.loc 1 599 0 is_stmt 1
 647 0074 4FF48844 		mov	r4, #17408
 648 0078 C4F20004 		movt	r4, 16384
 649 007c 2046     		mov	r0, r4
 650 007e 40F20001 		movw	r1, #:lower16:.LC10
 651 0082 C0F20001 		movt	r1, #:upper16:.LC10
 652 0086 FFF7FEFF 		bl	USART_puts
 653              	.LVL71:
 600:src/main.c    ****     USART_put_int(USART2, params->target_ph);
 654              		.loc 1 600 0
 655 008a 2046     		mov	r0, r4
 656 008c D9F80410 		ldr	r1, [r9, #4]
 657 0090 FFF7FEFF 		bl	USART_put_int
 658              	.LVL72:
 601:src/main.c    ****     USART_puts(USART2, "\r\n");
 659              		.loc 1 601 0
 660 0094 2046     		mov	r0, r4
 661 0096 40F20001 		movw	r1, #:lower16:.LC1
 662 009a C0F20001 		movt	r1, #:upper16:.LC1
 663 009e FFF7FEFF 		bl	USART_puts
 664              	.LVL73:
 590:src/main.c    ****     int TARGET_PH_REACHED = 0;
 665              		.loc 1 590 0
 666 00a2 0125     		movs	r5, #1
 602:src/main.c    **** 
 603:src/main.c    ****     while (!TARGET_PH_REACHED) {
 604:src/main.c    **** 
 605:src/main.c    ****         if (read_ph){ 
 606:src/main.c    ****             read_ph=0;
 607:src/main.c    ****             xTaskCreate(vPH_read_value, (signed char*)"PH Read", 128, &PHMeter_Resvoir, tskIDLE_PRI
 667              		.loc 1 607 0
 668 00a4 40F20007 		movw	r7, #:lower16:vPH_read_value
 669 00a8 C0F20007 		movt	r7, #:upper16:vPH_read_value
 670 00ac 40F20006 		movw	r6, #:lower16:.LC11
 671 00b0 C0F20006 		movt	r6, #:upper16:.LC11
 672 00b4 40F20004 		movw	r4, #:lower16:PHMeter_Resvoir
 673 00b8 C0F20004 		movt	r4, #:upper16:PHMeter_Resvoir
 608:src/main.c    ****         }
 609:src/main.c    **** 
 610:src/main.c    ****         vTaskDelay((portTickType) 500 / portTICK_RATE_MS);
 611:src/main.c    **** 
 612:src/main.c    ****         if (PHMeter_Resvoir.state == MODULE_EXECUTED) { 
 613:src/main.c    ****             if (xSemaphoreTake(PHMeter_Resvoir.mutex, (portTickType) 10) == pdTRUE) {
 614:src/main.c    ****                 int value = PHMeter_Resvoir.value; 
 615:src/main.c    **** 
 616:src/main.c    ****                 USART_puts(USART2, "METER READ SUCCESSFULLY. PH=");
 617:src/main.c    ****                 USART_put_int(USART2, value);
 618:src/main.c    ****                 USART_puts(USART2, "\ttarget_PH=");
 619:src/main.c    ****                 USART_put_int(USART2, params->target_ph);
 620:src/main.c    ****                 USART_puts(USART2, "\r\n");
 621:src/main.c    ****                 vPPump_parameters ppump_params;
 622:src/main.c    **** 
 623:src/main.c    ****                 xSemaphoreGive(PHMeter_Resvoir.mutex);
 624:src/main.c    ****   
 625:src/main.c    ****                 if (value < params->target_ph){
 626:src/main.c    ****                     USART_puts(USART2, "ADDING PH UP\r\n");
 627:src/main.c    ****                     ppump_params.amount = params->target_ph - value;
 628:src/main.c    ****                     ppump_params.ppump = &PPump_PHUP;
 629:src/main.c    ****                     
 630:src/main.c    ****                     xTaskCreate(vPPump_dispense, (signed char*)"PP", 128, &ppump_params, tskIDLE_PR
 631:src/main.c    **** 
 632:src/main.c    ****                 }
 633:src/main.c    ****                 else if (value > params->target_ph) {
 634:src/main.c    ****                     USART_puts(USART2, "ADDING PH DOWN\r\n");
 635:src/main.c    ****                     ppump_params.amount = value - params->target_ph;
 636:src/main.c    ****                     ppump_params.ppump = &PPump_PHDOWN;
 637:src/main.c    **** 
 638:src/main.c    ****                     xTaskCreate(vPPump_dispense, (signed char*)"PP", 128, &ppump_params, tskIDLE_PR
 639:src/main.c    **** 
 640:src/main.c    ****                 }
 641:src/main.c    ****                 else {
 642:src/main.c    ****                     USART_puts(USART2, "STABILIZED PH LEVELS @");
 643:src/main.c    ****                     USART_put_int(USART2, value);
 644:src/main.c    ****                     USART_puts(USART2, "\r\n");
 645:src/main.c    ****                     break;
 646:src/main.c    ****                 };
 647:src/main.c    **** 
 648:src/main.c    ****                 read_ph=1;
 649:src/main.c    ****                 while(ppump_params.ppump->state == MODULE_RUNNING) {
 650:src/main.c    ****                     taskYIELD();
 651:src/main.c    ****                 }
 652:src/main.c    **** 
 653:src/main.c    ****                 switch (ppump_params.ppump->state) {
 654:src/main.c    ****                     case MODULE_EXECUTED: 
 655:src/main.c    ****                         break;
 656:src/main.c    ****                     case MODULE_ERROR:
 657:src/main.c    ****                         break;
 658:src/main.c    **** 
 659:src/main.c    ****                 }
 660:src/main.c    **** 
 661:src/main.c    ****             }
 662:src/main.c    ****             else {
 663:src/main.c    ****                 USART_puts(USART2, "COULDNT ACCESS SAFELY IN PH_TASK\r\n");
 674              		.loc 1 663 0
 675 00bc 40F2000A 		movw	r10, #:lower16:.LC18
 676 00c0 C0F2000A 		movt	r10, #:upper16:.LC18
 677              	.LBB13:
 616:src/main.c    ****                 USART_put_int(USART2, value);
 678              		.loc 1 616 0
 679 00c4 40F2000B 		movw	fp, #:lower16:.LC12
 680 00c8 C0F2000B 		movt	fp, #:upper16:.LC12
 618:src/main.c    ****                 USART_put_int(USART2, params->target_ph);
 681              		.loc 1 618 0
 682 00cc 40F20003 		movw	r3, #:lower16:.LC13
 683 00d0 C0F20003 		movt	r3, #:upper16:.LC13
 684 00d4 0593     		str	r3, [sp, #20]
 685              	.LBE13:
 603:src/main.c    **** 
 686              		.loc 1 603 0
 687 00d6 C2E0     		b	.L41
 688              	.LVL74:
 689              	.L39:
 607:src/main.c    ****         }
 690              		.loc 1 607 0
 691 00d8 0423     		movs	r3, #4
 692 00da 0093     		str	r3, [sp]
 693 00dc 0025     		movs	r5, #0
 694 00de 0195     		str	r5, [sp, #4]
 695 00e0 0295     		str	r5, [sp, #8]
 696 00e2 0395     		str	r5, [sp, #12]
 697 00e4 3846     		mov	r0, r7
 698 00e6 3146     		mov	r1, r6
 699 00e8 8022     		movs	r2, #128
 700 00ea 2346     		mov	r3, r4
 701 00ec FFF7FEFF 		bl	xTaskGenericCreate
 702              	.LVL75:
 703              	.L40:
 610:src/main.c    **** 
 704              		.loc 1 610 0
 705 00f0 4FF4FA70 		mov	r0, #500
 706 00f4 FFF7FEFF 		bl	vTaskDelay
 707              	.LVL76:
 612:src/main.c    ****             if (xSemaphoreTake(PHMeter_Resvoir.mutex, (portTickType) 10) == pdTRUE) {
 708              		.loc 1 612 0
 709 00f8 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 710 00fa 022B     		cmp	r3, #2
 711 00fc 40F0AF80 		bne	.L41
 613:src/main.c    ****                 int value = PHMeter_Resvoir.value; 
 712              		.loc 1 613 0
 713 0100 6068     		ldr	r0, [r4, #4]
 714 0102 0021     		movs	r1, #0
 715 0104 0A22     		movs	r2, #10
 716 0106 0B46     		mov	r3, r1
 717 0108 FFF7FEFF 		bl	xQueueGenericReceive
 718              	.LVL77:
 719 010c 0128     		cmp	r0, #1
 720 010e 40F09D80 		bne	.L32
 721              	.LBB14:
 614:src/main.c    **** 
 722              		.loc 1 614 0
 723 0112 D4F80080 		ldr	r8, [r4]
 724              	.LVL78:
 616:src/main.c    ****                 USART_put_int(USART2, value);
 725              		.loc 1 616 0
 726 0116 4FF48845 		mov	r5, #17408
 727              	.LVL79:
 728 011a C4F20005 		movt	r5, 16384
 729 011e 2846     		mov	r0, r5
 730 0120 5946     		mov	r1, fp
 731 0122 FFF7FEFF 		bl	USART_puts
 732              	.LVL80:
 617:src/main.c    ****                 USART_puts(USART2, "\ttarget_PH=");
 733              		.loc 1 617 0
 734 0126 2846     		mov	r0, r5
 735 0128 4146     		mov	r1, r8
 736 012a FFF7FEFF 		bl	USART_put_int
 737              	.LVL81:
 618:src/main.c    ****                 USART_put_int(USART2, params->target_ph);
 738              		.loc 1 618 0
 739 012e 2846     		mov	r0, r5
 740 0130 0599     		ldr	r1, [sp, #20]
 741 0132 FFF7FEFF 		bl	USART_puts
 742              	.LVL82:
 619:src/main.c    ****                 USART_puts(USART2, "\r\n");
 743              		.loc 1 619 0
 744 0136 2846     		mov	r0, r5
 745 0138 D9F80410 		ldr	r1, [r9, #4]
 746 013c FFF7FEFF 		bl	USART_put_int
 747              	.LVL83:
 620:src/main.c    ****                 vPPump_parameters ppump_params;
 748              		.loc 1 620 0
 749 0140 2846     		mov	r0, r5
 750 0142 40F20001 		movw	r1, #:lower16:.LC1
 751 0146 C0F20001 		movt	r1, #:upper16:.LC1
 752 014a FFF7FEFF 		bl	USART_puts
 753              	.LVL84:
 623:src/main.c    ****   
 754              		.loc 1 623 0
 755 014e 6068     		ldr	r0, [r4, #4]
 756 0150 0021     		movs	r1, #0
 757 0152 0A46     		mov	r2, r1
 758 0154 0B46     		mov	r3, r1
 759 0156 FFF7FEFF 		bl	xQueueGenericSend
 760              	.LVL85:
 625:src/main.c    ****                     USART_puts(USART2, "ADDING PH UP\r\n");
 761              		.loc 1 625 0
 762 015a D9F80430 		ldr	r3, [r9, #4]
 763 015e 4345     		cmp	r3, r8
 764 0160 27DD     		ble	.L33
 626:src/main.c    ****                     ppump_params.amount = params->target_ph - value;
 765              		.loc 1 626 0
 766 0162 4FF48840 		mov	r0, #17408
 767 0166 C4F20000 		movt	r0, 16384
 768 016a 40F20001 		movw	r1, #:lower16:.LC14
 769 016e C0F20001 		movt	r1, #:upper16:.LC14
 770 0172 FFF7FEFF 		bl	USART_puts
 771              	.LVL86:
 627:src/main.c    ****                     ppump_params.ppump = &PPump_PHUP;
 772              		.loc 1 627 0
 773 0176 D9F80430 		ldr	r3, [r9, #4]
 774 017a C8EB0303 		rsb	r3, r8, r3
 775 017e 0793     		str	r3, [sp, #28]
 628:src/main.c    ****                     
 776              		.loc 1 628 0
 777 0180 40F20002 		movw	r2, #:lower16:PPump_PHUP
 778 0184 C0F20002 		movt	r2, #:upper16:PPump_PHUP
 779 0188 08AB     		add	r3, sp, #32
 780 018a 43F8082D 		str	r2, [r3, #-8]!
 630:src/main.c    **** 
 781              		.loc 1 630 0
 782 018e 0322     		movs	r2, #3
 783 0190 0092     		str	r2, [sp]
 784 0192 0022     		movs	r2, #0
 785 0194 0192     		str	r2, [sp, #4]
 786 0196 0292     		str	r2, [sp, #8]
 787 0198 0392     		str	r2, [sp, #12]
 788 019a 40F20000 		movw	r0, #:lower16:vPPump_dispense
 789 019e C0F20000 		movt	r0, #:upper16:vPPump_dispense
 790 01a2 40F20001 		movw	r1, #:lower16:.LC15
 791 01a6 C0F20001 		movt	r1, #:upper16:.LC15
 792 01aa 8022     		movs	r2, #128
 793 01ac FFF7FEFF 		bl	xTaskGenericCreate
 794              	.LVL87:
 795 01b0 45E0     		b	.L42
 796              	.L33:
 633:src/main.c    ****                     USART_puts(USART2, "ADDING PH DOWN\r\n");
 797              		.loc 1 633 0
 798 01b2 9845     		cmp	r8, r3
 799 01b4 27DD     		ble	.L35
 634:src/main.c    ****                     ppump_params.amount = value - params->target_ph;
 800              		.loc 1 634 0
 801 01b6 4FF48840 		mov	r0, #17408
 802 01ba C4F20000 		movt	r0, 16384
 803 01be 40F20001 		movw	r1, #:lower16:.LC16
 804 01c2 C0F20001 		movt	r1, #:upper16:.LC16
 805 01c6 FFF7FEFF 		bl	USART_puts
 806              	.LVL88:
 635:src/main.c    ****                     ppump_params.ppump = &PPump_PHDOWN;
 807              		.loc 1 635 0
 808 01ca D9F80430 		ldr	r3, [r9, #4]
 809 01ce C3EB0803 		rsb	r3, r3, r8
 810 01d2 0793     		str	r3, [sp, #28]
 636:src/main.c    **** 
 811              		.loc 1 636 0
 812 01d4 40F20002 		movw	r2, #:lower16:PPump_PHDOWN
 813 01d8 C0F20002 		movt	r2, #:upper16:PPump_PHDOWN
 814 01dc 08AB     		add	r3, sp, #32
 815 01de 43F8082D 		str	r2, [r3, #-8]!
 638:src/main.c    **** 
 816              		.loc 1 638 0
 817 01e2 0322     		movs	r2, #3
 818 01e4 0092     		str	r2, [sp]
 819 01e6 0022     		movs	r2, #0
 820 01e8 0192     		str	r2, [sp, #4]
 821 01ea 0292     		str	r2, [sp, #8]
 822 01ec 0392     		str	r2, [sp, #12]
 823 01ee 40F20000 		movw	r0, #:lower16:vPPump_dispense
 824 01f2 C0F20000 		movt	r0, #:upper16:vPPump_dispense
 825 01f6 40F20001 		movw	r1, #:lower16:.LC15
 826 01fa C0F20001 		movt	r1, #:upper16:.LC15
 827 01fe 8022     		movs	r2, #128
 828 0200 FFF7FEFF 		bl	xTaskGenericCreate
 829              	.LVL89:
 830 0204 1BE0     		b	.L42
 831              	.L35:
 642:src/main.c    ****                     USART_put_int(USART2, value);
 832              		.loc 1 642 0
 833 0206 4FF48844 		mov	r4, #17408
 834 020a C4F20004 		movt	r4, 16384
 835 020e 2046     		mov	r0, r4
 836 0210 40F20001 		movw	r1, #:lower16:.LC17
 837 0214 C0F20001 		movt	r1, #:upper16:.LC17
 838 0218 FFF7FEFF 		bl	USART_puts
 839              	.LVL90:
 643:src/main.c    ****                     USART_puts(USART2, "\r\n");
 840              		.loc 1 643 0
 841 021c 2046     		mov	r0, r4
 842 021e 4146     		mov	r1, r8
 843 0220 FFF7FEFF 		bl	USART_put_int
 844              	.LVL91:
 644:src/main.c    ****                     break;
 845              		.loc 1 644 0
 846 0224 2046     		mov	r0, r4
 847 0226 40F20001 		movw	r1, #:lower16:.LC1
 848 022a C0F20001 		movt	r1, #:upper16:.LC1
 849 022e FFF7FEFF 		bl	USART_puts
 850              	.LVL92:
 851              	.LBE14:
 664:src/main.c    ****             }
 665:src/main.c    ****             PHMeter_Resvoir.state = MODULE_STANDBY;
 666:src/main.c    ****         }
 667:src/main.c    ****     }
 668:src/main.c    ****     //PH_CHANGING = 0;  
 669:src/main.c    ****     vTaskDelete(NULL);
 852              		.loc 1 669 0
 853 0232 0020     		movs	r0, #0
 854 0234 FFF7FEFF 		bl	vTaskDelete
 855              	.LVL93:
 856 0238 15E0     		b	.L43
 857              	.L37:
 858              	.LBB15:
 650:src/main.c    ****                 }
 859              		.loc 1 650 0
 860 023a FFF7FEFF 		bl	vPortYieldFromISR
 861              	.LVL94:
 862              	.L42:
 649:src/main.c    ****                     taskYIELD();
 863              		.loc 1 649 0 discriminator 1
 864 023e 069B     		ldr	r3, [sp, #24]
 865 0240 93F82E30 		ldrb	r3, [r3, #46]	@ zero_extendqisi2
 866 0244 002B     		cmp	r3, #0
 867 0246 F8D0     		beq	.L37
 648:src/main.c    ****                 while(ppump_params.ppump->state == MODULE_RUNNING) {
 868              		.loc 1 648 0
 869 0248 0125     		movs	r5, #1
 870              	.LBE15:
 871 024a 06E0     		b	.L38
 872              	.LVL95:
 873              	.L32:
 663:src/main.c    ****             }
 874              		.loc 1 663 0
 875 024c 4FF48840 		mov	r0, #17408
 876 0250 C4F20000 		movt	r0, 16384
 877 0254 5146     		mov	r1, r10
 878 0256 FFF7FEFF 		bl	USART_puts
 879              	.LVL96:
 880              	.L38:
 665:src/main.c    ****         }
 881              		.loc 1 665 0
 882 025a 0123     		movs	r3, #1
 883 025c 2372     		strb	r3, [r4, #8]
 884              	.LVL97:
 885              	.L41:
 605:src/main.c    ****             read_ph=0;
 886              		.loc 1 605 0 discriminator 1
 887 025e 002D     		cmp	r5, #0
 888 0260 3FF446AF 		beq	.L40
 889 0264 38E7     		b	.L39
 890              	.LVL98:
 891              	.L43:
 670:src/main.c    **** }
 892              		.loc 1 670 0
 893 0266 09B0     		add	sp, sp, #36
 894              		@ sp needed
 895 0268 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 896              		.cfi_endproc
 897              	.LFE129:
 899              		.section	.text.USART_getline,"ax",%progbits
 900              		.align	2
 901              		.global	USART_getline
 902              		.thumb
 903              		.thumb_func
 905              	USART_getline:
 906              	.LFB114:
  88:src/main.c    ****     if (!input_lock) {
 907              		.loc 1 88 0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 912              	.LCFI11:
 913              		.cfi_def_cfa_offset 32
 914              		.cfi_offset 3, -32
 915              		.cfi_offset 4, -28
 916              		.cfi_offset 5, -24
 917              		.cfi_offset 6, -20
 918              		.cfi_offset 7, -16
 919              		.cfi_offset 8, -12
 920              		.cfi_offset 9, -8
 921              		.cfi_offset 14, -4
  89:src/main.c    ****         input_lock=1;
 922              		.loc 1 89 0
 923 0004 40F20003 		movw	r3, #:lower16:.LANCHOR1
 924 0008 C0F20003 		movt	r3, #:upper16:.LANCHOR1
 925 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 926 000e 13F0FF0F 		tst	r3, #255
 927 0012 25D1     		bne	.L44
  90:src/main.c    ****         while(input_lock){
 928              		.loc 1 90 0
 929 0014 40F20003 		movw	r3, #:lower16:.LANCHOR1
 930 0018 C0F20003 		movt	r3, #:upper16:.LANCHOR1
 931 001c 0122     		movs	r2, #1
 932 001e 1A70     		strb	r2, [r3]
  91:src/main.c    ****             delay_ms(250);
 933              		.loc 1 91 0
 934 0020 1F46     		mov	r7, r3
  92:src/main.c    ****             GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_SET);
 935              		.loc 1 92 0
 936 0022 FA26     		movs	r6, #250
  93:src/main.c    ****             delay_ms(250);
 937              		.loc 1 93 0
 938 0024 4FF44064 		mov	r4, #3072
 939 0028 C4F20204 		movt	r4, 16386
 940 002c 4FF48055 		mov	r5, #4096
 941 0030 9146     		mov	r9, r2
  95:src/main.c    ****         }
 942              		.loc 1 95 0
 943 0032 4FF00008 		mov	r8, #0
  91:src/main.c    ****             delay_ms(250);
 944              		.loc 1 91 0
 945 0036 0FE0     		b	.L46
 946              	.L47:
  92:src/main.c    ****             GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_SET);
 947              		.loc 1 92 0
 948 0038 3046     		mov	r0, r6
 949 003a FFF7FEFF 		bl	delay_ms
 950              	.LVL99:
  93:src/main.c    ****             delay_ms(250);
 951              		.loc 1 93 0
 952 003e 2046     		mov	r0, r4
 953 0040 2946     		mov	r1, r5
 954 0042 4A46     		mov	r2, r9
 955 0044 FFF7FEFF 		bl	GPIO_WriteBit
 956              	.LVL100:
  94:src/main.c    ****             GPIO_WriteBit(GPIOD, GPIO_Pin_12, Bit_RESET);
 957              		.loc 1 94 0
 958 0048 3046     		mov	r0, r6
 959 004a FFF7FEFF 		bl	delay_ms
 960              	.LVL101:
  95:src/main.c    ****         }
 961              		.loc 1 95 0
 962 004e 2046     		mov	r0, r4
 963 0050 2946     		mov	r1, r5
 964 0052 4246     		mov	r2, r8
 965 0054 FFF7FEFF 		bl	GPIO_WriteBit
 966              	.LVL102:
 967              	.L46:
  91:src/main.c    ****             delay_ms(250);
 968              		.loc 1 91 0 discriminator 1
 969 0058 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 970 005a 13F0FF0F 		tst	r3, #255
 971 005e EBD1     		bne	.L47
 972              	.L44:
 973 0060 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 974              		.cfi_endproc
 975              	.LFE114:
 977              		.section	.text.USART_getkey,"ax",%progbits
 978              		.align	2
 979              		.global	USART_getkey
 980              		.thumb
 981              		.thumb_func
 983              	USART_getkey:
 984              	.LFB115:
 100:src/main.c    ****     static char prev_key;
 985              		.loc 1 100 0
 986              		.cfi_startproc
 987              		@ args = 0, pretend = 0, frame = 0
 988              		@ frame_needed = 0, uses_anonymous_args = 0
 989              		@ link register save eliminated.
 990 0000 10B4     		push	{r4}
 991              	.LCFI12:
 992              		.cfi_def_cfa_offset 4
 993              		.cfi_offset 4, -4
 102:src/main.c    ****     while (prev_key == received_string[write_pos-1]);
 994              		.loc 1 102 0
 995 0002 40F20003 		movw	r3, #:lower16:.LANCHOR2
 996 0006 C0F20003 		movt	r3, #:upper16:.LANCHOR2
 997 000a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 998 000c 0139     		subs	r1, r1, #1
 999 000e 40F20003 		movw	r3, #:lower16:received_string
 1000 0012 C0F20003 		movt	r3, #:upper16:received_string
 1001 0016 5A5C     		ldrb	r2, [r3, r1]	@ zero_extendqisi2
 1002 0018 40F20003 		movw	r3, #:lower16:.LANCHOR3
 1003 001c C0F20003 		movt	r3, #:upper16:.LANCHOR3
 1004 0020 1A70     		strb	r2, [r3]
 103:src/main.c    ****     return received_string[write_pos-1]; 
 1005              		.loc 1 103 0
 1006 0022 40F20004 		movw	r4, #:lower16:received_string
 1007 0026 C0F20004 		movt	r4, #:upper16:received_string
 1008 002a 1846     		mov	r0, r3
 1009              	.L49:
 103:src/main.c    ****     return received_string[write_pos-1]; 
 1010              		.loc 1 103 0 is_stmt 0 discriminator 1
 1011 002c 625C     		ldrb	r2, [r4, r1]	@ zero_extendqisi2
 1012 002e D2B2     		uxtb	r2, r2
 1013 0030 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 1014 0032 9A42     		cmp	r2, r3
 1015 0034 FAD0     		beq	.L49
 104:src/main.c    **** }
 1016              		.loc 1 104 0 is_stmt 1
 1017 0036 40F20003 		movw	r3, #:lower16:received_string
 1018 003a C0F20003 		movt	r3, #:upper16:received_string
 1019 003e 585C     		ldrb	r0, [r3, r1]	@ zero_extendqisi2
 105:src/main.c    **** 
 1020              		.loc 1 105 0
 1021 0040 5DF8044B 		ldr	r4, [sp], #4
 1022 0044 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE115:
 1026 0046 00BF     		.section	.text.USART_nextline_length,"ax",%progbits
 1027              		.align	2
 1028              		.global	USART_nextline_length
 1029              		.thumb
 1030              		.thumb_func
 1032              	USART_nextline_length:
 1033              	.LFB116:
 107:src/main.c    ****     int i;
 1034              		.loc 1 107 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 0
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 109:src/main.c    **** 
 1039              		.loc 1 109 0
 1040 0000 40F20003 		movw	r3, #:lower16:.LANCHOR4
 1041 0004 C0F20003 		movt	r3, #:upper16:.LANCHOR4
 1042 0008 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 1043              	.LVL103:
 1044 000a 0346     		mov	r3, r0
 1045 000c 40F20001 		movw	r1, #:lower16:received_string
 1046 0010 C0F20001 		movt	r1, #:upper16:received_string
 1047 0014 00E0     		b	.L52
 1048              	.LVL104:
 1049              	.L53:
 109:src/main.c    **** 
 1050              		.loc 1 109 0 is_stmt 0 discriminator 2
 1051 0016 0133     		adds	r3, r3, #1
 1052              	.LVL105:
 1053              	.L52:
 109:src/main.c    **** 
 1054              		.loc 1 109 0 discriminator 1
 1055 0018 CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 1056 001a D2B2     		uxtb	r2, r2
 1057 001c 0D2A     		cmp	r2, #13
 1058 001e FAD1     		bne	.L53
 111:src/main.c    **** }
 1059              		.loc 1 111 0 is_stmt 1
 1060 0020 181A     		subs	r0, r3, r0
 112:src/main.c    **** /*
 1061              		.loc 1 112 0
 1062 0022 0130     		adds	r0, r0, #1
 1063 0024 7047     		bx	lr
 1064              		.cfi_endproc
 1065              	.LFE116:
 1067 0026 00BF     		.section	.text.USART_readline,"ax",%progbits
 1068              		.align	2
 1069              		.global	USART_readline
 1070              		.thumb
 1071              		.thumb_func
 1073              	USART_readline:
 1074              	.LFB119:
 168:src/main.c    ****     int i;
 1075              		.loc 1 168 0
 1076              		.cfi_startproc
 1077              		@ args = 0, pretend = 0, frame = 0
 1078              		@ frame_needed = 0, uses_anonymous_args = 0
 1079              		@ link register save eliminated.
 1080              	.LVL106:
 1081 0000 30B4     		push	{r4, r5}
 1082              	.LCFI13:
 1083              		.cfi_def_cfa_offset 8
 1084              		.cfi_offset 4, -8
 1085              		.cfi_offset 5, -4
 172:src/main.c    **** 
 1086              		.loc 1 172 0
 1087 0002 4A1E     		subs	r2, r1, #1
 1088 0004 0023     		movs	r3, #0
 1089 0006 8354     		strb	r3, [r0, r2]
 1090              	.LVL107:
 175:src/main.c    ****         if (read_pos == MAX_STRLEN-1) read_pos=0;
 1091              		.loc 1 175 0
 1092 0008 1146     		mov	r1, r2
 1093              	.LVL108:
 177:src/main.c    ****         read_pos++;
 1094              		.loc 1 177 0
 1095 000a 40F20002 		movw	r2, #:lower16:.LANCHOR4
 1096 000e C0F20002 		movt	r2, #:upper16:.LANCHOR4
 1097 0012 40F20005 		movw	r5, #:lower16:received_string
 1098 0016 C0F20005 		movt	r5, #:upper16:received_string
 175:src/main.c    ****         if (read_pos == MAX_STRLEN-1) read_pos=0;
 1099              		.loc 1 175 0
 1100 001a 06E0     		b	.L55
 1101              	.LVL109:
 1102              	.L56:
 177:src/main.c    ****         read_pos++;
 1103              		.loc 1 177 0
 1104 001c 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 1105 001e 2C5D     		ldrb	r4, [r5, r4]	@ zero_extendqisi2
 1106 0020 C454     		strb	r4, [r0, r3]
 178:src/main.c    ****     }
 1107              		.loc 1 178 0
 1108 0022 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
 1109 0024 0134     		adds	r4, r4, #1
 1110 0026 1470     		strb	r4, [r2]
 175:src/main.c    ****         if (read_pos == MAX_STRLEN-1) read_pos=0;
 1111              		.loc 1 175 0
 1112 0028 0133     		adds	r3, r3, #1
 1113              	.LVL110:
 1114              	.L55:
 175:src/main.c    ****         if (read_pos == MAX_STRLEN-1) read_pos=0;
 1115              		.loc 1 175 0 is_stmt 0 discriminator 1
 1116 002a 9942     		cmp	r1, r3
 1117 002c F6DC     		bgt	.L56
 182:src/main.c    **** 
 1118              		.loc 1 182 0 is_stmt 1
 1119 002e 40F20003 		movw	r3, #:lower16:.LANCHOR4
 1120              	.LVL111:
 1121 0032 C0F20003 		movt	r3, #:upper16:.LANCHOR4
 1122 0036 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1123 0038 0132     		adds	r2, r2, #1
 1124 003a 1A70     		strb	r2, [r3]
 184:src/main.c    **** 
 1125              		.loc 1 184 0
 1126 003c 30BC     		pop	{r4, r5}
 1127 003e 7047     		bx	lr
 1128              		.cfi_endproc
 1129              	.LFE119:
 1131              		.section	.text.USART_readline_int,"ax",%progbits
 1132              		.align	2
 1133              		.global	USART_readline_int
 1134              		.thumb
 1135              		.thumb_func
 1137              	USART_readline_int:
 1138              	.LFB120:
 186:src/main.c    ****     *(num) = 0;
 1139              		.loc 1 186 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 0
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143              	.LVL112:
 1144 0000 B0B5     		push	{r4, r5, r7, lr}
 1145              	.LCFI14:
 1146              		.cfi_def_cfa_offset 16
 1147              		.cfi_offset 4, -16
 1148              		.cfi_offset 5, -12
 1149              		.cfi_offset 7, -8
 1150              		.cfi_offset 14, -4
 1151 0002 00AF     		add	r7, sp, #0
 1152              	.LCFI15:
 1153              		.cfi_def_cfa_register 7
 1154 0004 0446     		mov	r4, r0
 187:src/main.c    ****     int i=0;
 1155              		.loc 1 187 0
 1156 0006 0023     		movs	r3, #0
 1157 0008 0360     		str	r3, [r0]
 1158              	.LVL113:
 191:src/main.c    ****     char buffer[len];
 1159              		.loc 1 191 0
 1160 000a FFF7FEFF 		bl	USART_nextline_length
 1161              	.LVL114:
 1162 000e 0146     		mov	r1, r0
 1163              	.LVL115:
 192:src/main.c    ****     USART_readline(buffer, len);
 1164              		.loc 1 192 0
 1165 0010 C31D     		adds	r3, r0, #7
 1166 0012 23F00703 		bic	r3, r3, #7
 1167 0016 ADEB030D 		sub	sp, sp, r3
 1168 001a 6D46     		mov	r5, sp
 1169              	.LVL116:
 193:src/main.c    **** 
 1170              		.loc 1 193 0
 1171 001c 6846     		mov	r0, sp
 1172              	.LVL117:
 1173 001e C9B2     		uxtb	r1, r1
 1174              	.LVL118:
 1175 0020 FFF7FEFF 		bl	USART_readline
 1176              	.LVL119:
 195:src/main.c    ****         i++;
 1177              		.loc 1 195 0
 1178 0024 9DF80030 		ldrb	r3, [sp]	@ zero_extendqisi2
 1179 0028 2D2B     		cmp	r3, #45
 189:src/main.c    **** 
 1180              		.loc 1 189 0
 1181 002a 14BF     		ite	ne
 1182 002c 0020     		movne	r0, #0
 197:src/main.c    **** 
 1183              		.loc 1 197 0
 1184 002e 0120     		moveq	r0, #1
 196:src/main.c    ****         neg = 1;
 1185              		.loc 1 196 0
 1186 0030 0346     		mov	r3, r0
 1187 0032 0CE0     		b	.L64
 1188              	.LVL120:
 1189              	.L61:
 202:src/main.c    ****             *(num) *= 10; 
 1190              		.loc 1 202 0
 1191 0034 303A     		subs	r2, r2, #48
 1192 0036 D2B2     		uxtb	r2, r2
 1193 0038 092A     		cmp	r2, #9
 1194 003a 0BD8     		bhi	.L60
 203:src/main.c    ****             *(num) += buffer[i]-'0';
 1195              		.loc 1 203 0
 1196 003c 2268     		ldr	r2, [r4]
 1197 003e 02EB8202 		add	r2, r2, r2, lsl #2
 204:src/main.c    ****         }
 1198              		.loc 1 204 0
 1199 0042 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 1200 0044 3039     		subs	r1, r1, #48
 1201 0046 01EB4202 		add	r2, r1, r2, lsl #1
 1202 004a 2260     		str	r2, [r4]
 201:src/main.c    ****         if (buffer[i] >= '0' && buffer[i]<='9'){
 1203              		.loc 1 201 0
 1204 004c 0133     		adds	r3, r3, #1
 1205              	.LVL121:
 1206              	.L64:
 201:src/main.c    ****         if (buffer[i] >= '0' && buffer[i]<='9'){
 1207              		.loc 1 201 0 is_stmt 0 discriminator 1
 1208 004e EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 1209 0050 002A     		cmp	r2, #0
 1210 0052 EFD1     		bne	.L61
 1211              	.L60:
 212:src/main.c    ****         *(num) *= -1;
 1212              		.loc 1 212 0 is_stmt 1
 1213 0054 10B1     		cbz	r0, .L57
 213:src/main.c    ****     }
 1214              		.loc 1 213 0
 1215 0056 2368     		ldr	r3, [r4]
 1216              	.LVL122:
 1217 0058 5B42     		negs	r3, r3
 1218 005a 2360     		str	r3, [r4]
 1219              	.L57:
 216:src/main.c    **** 
 1220              		.loc 1 216 0
 1221 005c BD46     		mov	sp, r7
 1222              		@ sp needed
 1223 005e B0BD     		pop	{r4, r5, r7, pc}
 1224              		.cfi_endproc
 1225              	.LFE120:
 1227              		.section	.text.USART2_IRQHandler,"ax",%progbits
 1228              		.align	2
 1229              		.global	USART2_IRQHandler
 1230              		.thumb
 1231              		.thumb_func
 1233              	USART2_IRQHandler:
 1234              	.LFB121:
 218:src/main.c    **** 	// check if the USART2 receive interrupt flag was set
 1235              		.loc 1 218 0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 0, uses_anonymous_args = 0
 1239 0000 70B5     		push	{r4, r5, r6, lr}
 1240              	.LCFI16:
 1241              		.cfi_def_cfa_offset 16
 1242              		.cfi_offset 4, -16
 1243              		.cfi_offset 5, -12
 1244              		.cfi_offset 6, -8
 1245              		.cfi_offset 14, -4
 1246 0002 84B0     		sub	sp, sp, #16
 1247              	.LCFI17:
 1248              		.cfi_def_cfa_offset 32
 220:src/main.c    ****         static uint8_t count=0;
 1249              		.loc 1 220 0
 1250 0004 4FF48840 		mov	r0, #17408
 1251 0008 C4F20000 		movt	r0, 16384
 1252 000c 40F22551 		movw	r1, #1317
 1253 0010 FFF7FEFF 		bl	USART_GetITStatus
 1254              	.LVL123:
 1255 0014 0028     		cmp	r0, #0
 1256 0016 00F08F80 		beq	.L65
 1257              	.LBB16:
 225:src/main.c    **** 
 1258              		.loc 1 225 0
 1259 001a 4FF48843 		mov	r3, #17408
 1260 001e C4F20003 		movt	r3, 16384
 1261 0022 9988     		ldrh	r1, [r3, #4]
 1262 0024 C9B2     		uxtb	r1, r1
 1263              	.LVL124:
 229:src/main.c    ****             write_pos--;
 1264              		.loc 1 229 0
 1265 0026 7F29     		cmp	r1, #127
 1266 0028 18BF     		it	ne
 1267 002a 0829     		cmpne	r1, #8
 1268 002c 1ED1     		bne	.L67
 230:src/main.c    ****             received_string[write_pos] = '\r';
 1269              		.loc 1 230 0
 1270 002e 40F20003 		movw	r3, #:lower16:.LANCHOR2
 1271 0032 C0F20003 		movt	r3, #:upper16:.LANCHOR2
 1272 0036 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1273 0038 013A     		subs	r2, r2, #1
 1274 003a D2B2     		uxtb	r2, r2
 1275 003c 1A70     		strb	r2, [r3]
 231:src/main.c    ****             USART_put(USART2, '\b');
 1276              		.loc 1 231 0
 1277 003e 40F20003 		movw	r3, #:lower16:received_string
 1278 0042 C0F20003 		movt	r3, #:upper16:received_string
 1279 0046 0D21     		movs	r1, #13
 1280              	.LVL125:
 1281 0048 9954     		strb	r1, [r3, r2]
 232:src/main.c    ****             USART_put(USART2, ' ');
 1282              		.loc 1 232 0
 1283 004a 4FF48844 		mov	r4, #17408
 1284 004e C4F20004 		movt	r4, 16384
 1285 0052 2046     		mov	r0, r4
 1286 0054 0821     		movs	r1, #8
 1287 0056 FFF7FEFF 		bl	USART_put
 1288              	.LVL126:
 233:src/main.c    ****             USART_put(USART2, '\b');
 1289              		.loc 1 233 0
 1290 005a 2046     		mov	r0, r4
 1291 005c 2021     		movs	r1, #32
 1292 005e FFF7FEFF 		bl	USART_put
 1293              	.LVL127:
 234:src/main.c    ****             return;
 1294              		.loc 1 234 0
 1295 0062 2046     		mov	r0, r4
 1296 0064 0821     		movs	r1, #8
 1297 0066 FFF7FEFF 		bl	USART_put
 1298              	.LVL128:
 235:src/main.c    **** 
 1299              		.loc 1 235 0
 1300 006a 65E0     		b	.L65
 1301              	.LVL129:
 1302              	.L67:
 241:src/main.c    ****             count++;
 1303              		.loc 1 241 0
 1304 006c 0D29     		cmp	r1, #13
 1305 006e 17D0     		beq	.L68
 242:src/main.c    **** 			received_string[/*cnt*/write_pos] = t;
 1306              		.loc 1 242 0
 1307 0070 40F20003 		movw	r3, #:lower16:.LANCHOR5
 1308 0074 C0F20003 		movt	r3, #:upper16:.LANCHOR5
 1309 0078 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1310 007a 0132     		adds	r2, r2, #1
 1311 007c 1A70     		strb	r2, [r3]
 243:src/main.c    ****             USART_put(USART2, t);
 1312              		.loc 1 243 0
 1313 007e 40F20003 		movw	r3, #:lower16:.LANCHOR2
 1314 0082 C0F20003 		movt	r3, #:upper16:.LANCHOR2
 1315 0086 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1316 0088 40F20003 		movw	r3, #:lower16:received_string
 1317 008c C0F20003 		movt	r3, #:upper16:received_string
 1318 0090 9954     		strb	r1, [r3, r2]
 244:src/main.c    **** 
 1319              		.loc 1 244 0
 1320 0092 4FF48840 		mov	r0, #17408
 1321 0096 C4F20000 		movt	r0, 16384
 1322 009a FFF7FEFF 		bl	USART_put
 1323              	.LVL130:
 1324 009e 44E0     		b	.L69
 1325              	.LVL131:
 1326              	.L68:
 249:src/main.c    ****                 
 1327              		.loc 1 249 0
 1328 00a0 40F20003 		movw	r3, #:lower16:.LANCHOR5
 1329 00a4 C0F20003 		movt	r3, #:upper16:.LANCHOR5
 1330 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1331 00aa A3B3     		cbz	r3, .L70
 1332              	.LBB17:
 251:src/main.c    ****                 USART_puts(USART2, "\r\n");
 1333              		.loc 1 251 0
 1334 00ac 40F20004 		movw	r4, #:lower16:.LANCHOR2
 1335 00b0 C0F20004 		movt	r4, #:upper16:.LANCHOR2
 1336 00b4 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 1337 00b6 40F20006 		movw	r6, #:lower16:received_string
 1338 00ba C0F20006 		movt	r6, #:upper16:received_string
 1339 00be 0D22     		movs	r2, #13
 1340 00c0 F254     		strb	r2, [r6, r3]
 252:src/main.c    **** 
 1341              		.loc 1 252 0
 1342 00c2 4FF48840 		mov	r0, #17408
 1343 00c6 C4F20000 		movt	r0, 16384
 1344 00ca 40F20001 		movw	r1, #:lower16:.LC1
 1345              	.LVL132:
 1346 00ce C0F20001 		movt	r1, #:upper16:.LC1
 1347 00d2 FFF7FEFF 		bl	USART_puts
 1348              	.LVL133:
 254:src/main.c    **** 
 1349              		.loc 1 254 0
 1350 00d6 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1351 00d8 40F20005 		movw	r5, #:lower16:.LANCHOR5
 1352 00dc C0F20005 		movt	r5, #:upper16:.LANCHOR5
 1353 00e0 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 1354 00e2 D31A     		subs	r3, r2, r3
 1355              	.LVL134:
 256:src/main.c    **** //                xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY
 1356              		.loc 1 256 0
 1357 00e4 0122     		movs	r2, #1
 1358 00e6 0092     		str	r2, [sp]
 1359 00e8 0024     		movs	r4, #0
 1360 00ea 0194     		str	r4, [sp, #4]
 1361 00ec 0294     		str	r4, [sp, #8]
 1362 00ee 0394     		str	r4, [sp, #12]
 1363 00f0 40F20000 		movw	r0, #:lower16:handle_uart_command
 1364 00f4 C0F20000 		movt	r0, #:upper16:handle_uart_command
 1365 00f8 40F20001 		movw	r1, #:lower16:.LC19
 1366 00fc C0F20001 		movt	r1, #:upper16:.LC19
 1367 0100 8022     		movs	r2, #128
 1368 0102 3344     		add	r3, r3, r6
 1369              	.LVL135:
 1370 0104 FFF7FEFF 		bl	xTaskGenericCreate
 1371              	.LVL136:
 260:src/main.c    ****                 count = 0;
 1372              		.loc 1 260 0
 1373 0108 40F20003 		movw	r3, #:lower16:.LANCHOR1
 1374 010c C0F20003 		movt	r3, #:upper16:.LANCHOR1
 1375 0110 1C70     		strb	r4, [r3]
 261:src/main.c    ****             }
 1376              		.loc 1 261 0
 1377 0112 2C70     		strb	r4, [r5]
 1378              	.LBE17:
 1379 0114 09E0     		b	.L69
 1380              	.LVL137:
 1381              	.L70:
 263:src/main.c    **** 		}
 1382              		.loc 1 263 0
 1383 0116 4FF48840 		mov	r0, #17408
 1384 011a C4F20000 		movt	r0, 16384
 1385 011e 40F20001 		movw	r1, #:lower16:.LC1
 1386              	.LVL138:
 1387 0122 C0F20001 		movt	r1, #:upper16:.LC1
 1388 0126 FFF7FEFF 		bl	USART_puts
 1389              	.LVL139:
 1390              	.L69:
 265:src/main.c    **** 	}
 1391              		.loc 1 265 0
 1392 012a 40F20003 		movw	r3, #:lower16:.LANCHOR2
 1393 012e C0F20003 		movt	r3, #:upper16:.LANCHOR2
 1394 0132 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1395 0134 0132     		adds	r2, r2, #1
 1396 0136 1A70     		strb	r2, [r3]
 1397              	.L65:
 1398              	.LBE16:
 267:src/main.c    **** 
 1399              		.loc 1 267 0
 1400 0138 04B0     		add	sp, sp, #16
 1401              		@ sp needed
 1402 013a 70BD     		pop	{r4, r5, r6, pc}
 1403              		.cfi_endproc
 1404              	.LFE121:
 1406              		.section	.text.initx,"ax",%progbits
 1407              		.align	2
 1408              		.global	initx
 1409              		.thumb
 1410              		.thumb_func
 1412              	initx:
 1413              	.LFB122:
 272:src/main.c    **** 	//Enable GPIO Clocks For USART2
 1414              		.loc 1 272 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 32
 1417              		@ frame_needed = 0, uses_anonymous_args = 0
 1418 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1419              	.LCFI18:
 1420              		.cfi_def_cfa_offset 20
 1421              		.cfi_offset 4, -20
 1422              		.cfi_offset 5, -16
 1423              		.cfi_offset 6, -12
 1424              		.cfi_offset 7, -8
 1425              		.cfi_offset 14, -4
 1426 0002 89B0     		sub	sp, sp, #36
 1427              	.LCFI19:
 1428              		.cfi_def_cfa_offset 56
 274:src/main.c    **** 
 1429              		.loc 1 274 0
 1430 0004 0120     		movs	r0, #1
 1431 0006 0146     		mov	r1, r0
 1432 0008 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1433              	.LVL140:
 277:src/main.c    **** 
 1434              		.loc 1 277 0
 1435 000c 4FF40030 		mov	r0, #131072
 1436 0010 0121     		movs	r1, #1
 1437 0012 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1438              	.LVL141:
 288:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 1439              		.loc 1 288 0
 1440 0016 0C27     		movs	r7, #12
 1441 0018 0697     		str	r7, [sp, #24]
 289:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1442              		.loc 1 289 0
 1443 001a 0226     		movs	r6, #2
 1444 001c 8DF81C60 		strb	r6, [sp, #28]
 290:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1445              		.loc 1 290 0
 1446 0020 0024     		movs	r4, #0
 1447 0022 8DF81E40 		strb	r4, [sp, #30]
 291:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1448              		.loc 1 291 0
 1449 0026 8DF81F40 		strb	r4, [sp, #31]
 292:src/main.c    **** 	GPIO_Init(GPIOA, &GPIO_InitStructure);
 1450              		.loc 1 292 0
 1451 002a 8DF81D60 		strb	r6, [sp, #29]
 293:src/main.c    **** 
 1452              		.loc 1 293 0
 1453 002e 2546     		mov	r5, r4
 1454 0030 C4F20205 		movt	r5, 16386
 1455 0034 2846     		mov	r0, r5
 1456 0036 06A9     		add	r1, sp, #24
 1457 0038 FFF7FEFF 		bl	GPIO_Init
 1458              	.LVL142:
 297:src/main.c    **** 	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 1459              		.loc 1 297 0
 1460 003c 2846     		mov	r0, r5
 1461 003e 3146     		mov	r1, r6
 1462 0040 0722     		movs	r2, #7
 1463 0042 FFF7FEFF 		bl	GPIO_PinAFConfig
 1464              	.LVL143:
 298:src/main.c    **** 
 1465              		.loc 1 298 0
 1466 0046 2846     		mov	r0, r5
 1467 0048 0321     		movs	r1, #3
 1468 004a 0722     		movs	r2, #7
 1469 004c FFF7FEFF 		bl	GPIO_PinAFConfig
 1470              	.LVL144:
 301:src/main.c    **** 	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 1471              		.loc 1 301 0
 1472 0050 0820     		movs	r0, #8
 1473 0052 0121     		movs	r1, #1
 1474 0054 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1475              	.LVL145:
 302:src/main.c    **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 1476              		.loc 1 302 0
 1477 0058 4FF47043 		mov	r3, #61440
 1478 005c 0693     		str	r3, [sp, #24]
 303:src/main.c    **** 	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1479              		.loc 1 303 0
 1480 005e 0125     		movs	r5, #1
 1481 0060 8DF81C50 		strb	r5, [sp, #28]
 304:src/main.c    **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 1482              		.loc 1 304 0
 1483 0064 8DF81E40 		strb	r4, [sp, #30]
 305:src/main.c    **** 	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 1484              		.loc 1 305 0
 1485 0068 0323     		movs	r3, #3
 1486 006a 8DF81D30 		strb	r3, [sp, #29]
 306:src/main.c    **** 	GPIO_Init(GPIOD, &GPIO_InitStructure);
 1487              		.loc 1 306 0
 1488 006e 8DF81F40 		strb	r4, [sp, #31]
 307:src/main.c    **** 
 1489              		.loc 1 307 0
 1490 0072 4FF44060 		mov	r0, #3072
 1491 0076 C4F20200 		movt	r0, 16386
 1492 007a 06A9     		add	r1, sp, #24
 1493 007c FFF7FEFF 		bl	GPIO_Init
 1494              	.LVL146:
 310:src/main.c    **** 	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 1495              		.loc 1 310 0
 1496 0080 4FF41643 		mov	r3, #38400
 1497 0084 0293     		str	r3, [sp, #8]
 311:src/main.c    **** 	USART_InitStructure.USART_StopBits = USART_StopBits_1;
 1498              		.loc 1 311 0
 1499 0086 ADF80C40 		strh	r4, [sp, #12]	@ movhi
 312:src/main.c    **** 	USART_InitStructure.USART_Parity = USART_Parity_No ;
 1500              		.loc 1 312 0
 1501 008a ADF80E40 		strh	r4, [sp, #14]	@ movhi
 313:src/main.c    **** 	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 1502              		.loc 1 313 0
 1503 008e ADF81040 		strh	r4, [sp, #16]	@ movhi
 314:src/main.c    ****     USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx ;
 1504              		.loc 1 314 0
 1505 0092 ADF81440 		strh	r4, [sp, #20]	@ movhi
 315:src/main.c    **** 
 1506              		.loc 1 315 0
 1507 0096 ADF81270 		strh	r7, [sp, #18]	@ movhi
 318:src/main.c    **** 
 1508              		.loc 1 318 0
 1509 009a 4FF48846 		mov	r6, #17408
 1510 009e C4F20006 		movt	r6, 16384
 1511 00a2 3046     		mov	r0, r6
 1512 00a4 02A9     		add	r1, sp, #8
 1513 00a6 FFF7FEFF 		bl	USART_Init
 1514              	.LVL147:
 321:src/main.c    **** 
 1515              		.loc 1 321 0
 1516 00aa 3046     		mov	r0, r6
 1517 00ac 40F22551 		movw	r1, #1317
 1518 00b0 2A46     		mov	r2, r5
 1519 00b2 FFF7FEFF 		bl	USART_ITConfig
 1520              	.LVL148:
 323:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 1521              		.loc 1 323 0
 1522 00b6 2623     		movs	r3, #38
 1523 00b8 8DF80430 		strb	r3, [sp, #4]
 324:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1524              		.loc 1 324 0
 1525 00bc 8DF80540 		strb	r4, [sp, #5]
 325:src/main.c    ****     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1526              		.loc 1 325 0
 1527 00c0 8DF80640 		strb	r4, [sp, #6]
 326:src/main.c    **** 
 1528              		.loc 1 326 0
 1529 00c4 8DF80750 		strb	r5, [sp, #7]
 328:src/main.c    **** 
 1530              		.loc 1 328 0
 1531 00c8 01A8     		add	r0, sp, #4
 1532 00ca FFF7FEFF 		bl	NVIC_Init
 1533              	.LVL149:
 330:src/main.c    **** 
 1534              		.loc 1 330 0
 1535 00ce 3046     		mov	r0, r6
 1536 00d0 2946     		mov	r1, r5
 1537 00d2 FFF7FEFF 		bl	USART_Cmd
 1538              	.LVL150:
 332:src/main.c    **** 
 1539              		.loc 1 332 0
 1540 00d6 09B0     		add	sp, sp, #36
 1541              		@ sp needed
 1542 00d8 F0BD     		pop	{r4, r5, r6, r7, pc}
 1543              		.cfi_endproc
 1544              	.LFE122:
 1546 00da 00BF     		.section	.text.TIM_PWM_init,"ax",%progbits
 1547              		.align	2
 1548              		.global	TIM_PWM_init
 1549              		.thumb
 1550              		.thumb_func
 1552              	TIM_PWM_init:
 1553              	.LFB123:
 334:src/main.c    ****     //TIMER SETUP
 1554              		.loc 1 334 0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 32
 1557              		@ frame_needed = 0, uses_anonymous_args = 0
 1558 0000 70B5     		push	{r4, r5, r6, lr}
 1559              	.LCFI20:
 1560              		.cfi_def_cfa_offset 16
 1561              		.cfi_offset 4, -16
 1562              		.cfi_offset 5, -12
 1563              		.cfi_offset 6, -8
 1564              		.cfi_offset 14, -4
 1565 0002 88B0     		sub	sp, sp, #32
 1566              	.LCFI21:
 1567              		.cfi_def_cfa_offset 48
 336:src/main.c    **** 
 1568              		.loc 1 336 0
 1569 0004 0420     		movs	r0, #4
 1570 0006 0121     		movs	r1, #1
 1571 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 1572              	.LVL151:
 340:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_Prescaler = 84;
 1573              		.loc 1 340 0
 1574 000c 44F61F63 		movw	r3, #19999
 1575 0010 0693     		str	r3, [sp, #24]
 341:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;//TIM_CKD_DIV1;
 1576              		.loc 1 341 0
 1577 0012 5423     		movs	r3, #84
 1578 0014 ADF81430 		strh	r3, [sp, #20]	@ movhi
 342:src/main.c    ****     TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
 1579              		.loc 1 342 0
 1580 0018 0025     		movs	r5, #0
 1581 001a ADF81C50 		strh	r5, [sp, #28]	@ movhi
 343:src/main.c    **** 
 1582              		.loc 1 343 0
 1583 001e ADF81650 		strh	r5, [sp, #22]	@ movhi
 345:src/main.c    **** 
 1584              		.loc 1 345 0
 1585 0022 4FF40064 		mov	r4, #2048
 1586 0026 C4F20004 		movt	r4, 16384
 1587 002a 2046     		mov	r0, r4
 1588 002c 05A9     		add	r1, sp, #20
 1589 002e FFF7FEFF 		bl	TIM_TimeBaseInit
 1590              	.LVL152:
 352:src/main.c    ****     TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 1591              		.loc 1 352 0
 1592 0032 6023     		movs	r3, #96
 1593 0034 ADF80030 		strh	r3, [sp]	@ movhi
 353:src/main.c    ****     TIM_OCInitStruct.TIM_Pulse = 0;
 1594              		.loc 1 353 0
 1595 0038 0126     		movs	r6, #1
 1596 003a ADF80260 		strh	r6, [sp, #2]	@ movhi
 354:src/main.c    ****     TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 1597              		.loc 1 354 0
 1598 003e 0295     		str	r5, [sp, #8]
 355:src/main.c    ****     
 1599              		.loc 1 355 0
 1600 0040 ADF80C50 		strh	r5, [sp, #12]	@ movhi
 359:src/main.c    ****     TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 1601              		.loc 1 359 0
 1602 0044 2046     		mov	r0, r4
 1603 0046 6946     		mov	r1, sp
 1604 0048 FFF7FEFF 		bl	TIM_OC1Init
 1605              	.LVL153:
 360:src/main.c    **** 
 1606              		.loc 1 360 0
 1607 004c 2046     		mov	r0, r4
 1608 004e 0821     		movs	r1, #8
 1609 0050 FFF7FEFF 		bl	TIM_OC1PreloadConfig
 1610              	.LVL154:
 362:src/main.c    ****     TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 1611              		.loc 1 362 0
 1612 0054 2046     		mov	r0, r4
 1613 0056 6946     		mov	r1, sp
 1614 0058 FFF7FEFF 		bl	TIM_OC2Init
 1615              	.LVL155:
 363:src/main.c    **** 
 1616              		.loc 1 363 0
 1617 005c 2046     		mov	r0, r4
 1618 005e 0821     		movs	r1, #8
 1619 0060 FFF7FEFF 		bl	TIM_OC2PreloadConfig
 1620              	.LVL156:
 366:src/main.c    ****     TIM_Cmd(TIM4, ENABLE);
 1621              		.loc 1 366 0
 1622 0064 2046     		mov	r0, r4
 1623 0066 3146     		mov	r1, r6
 1624 0068 FFF7FEFF 		bl	TIM_ARRPreloadConfig
 1625              	.LVL157:
 367:src/main.c    **** }
 1626              		.loc 1 367 0
 1627 006c 2046     		mov	r0, r4
 1628 006e 3146     		mov	r1, r6
 1629 0070 FFF7FEFF 		bl	TIM_Cmd
 1630              	.LVL158:
 368:src/main.c    **** 
 1631              		.loc 1 368 0
 1632 0074 08B0     		add	sp, sp, #32
 1633              		@ sp needed
 1634 0076 70BD     		pop	{r4, r5, r6, pc}
 1635              		.cfi_endproc
 1636              	.LFE123:
 1638              		.section	.text.PHMeter_Init,"ax",%progbits
 1639              		.align	2
 1640              		.global	PHMeter_Init
 1641              		.thumb
 1642              		.thumb_func
 1644              	PHMeter_Init:
 1645              	.LFB124:
 499:src/main.c    ****     if (module) {
 1646              		.loc 1 499 0
 1647              		.cfi_startproc
 1648              		@ args = 0, pretend = 0, frame = 0
 1649              		@ frame_needed = 0, uses_anonymous_args = 0
 1650              		@ link register save eliminated.
 1651              	.LVL159:
 500:src/main.c    ****         module->state = MODULE_STANDBY;
 1652              		.loc 1 500 0
 1653 0000 08B1     		cbz	r0, .L73
 501:src/main.c    ****     }
 1654              		.loc 1 501 0
 1655 0002 0122     		movs	r2, #1
 1656 0004 0272     		strb	r2, [r0, #8]
 1657              	.L73:
 1658 0006 7047     		bx	lr
 1659              		.cfi_endproc
 1660              	.LFE124:
 1662              		.section	.text.PPump_Init,"ax",%progbits
 1663              		.align	2
 1664              		.global	PPump_Init
 1665              		.thumb
 1666              		.thumb_func
 1668              	PPump_Init:
 1669              	.LFB125:
 505:src/main.c    ****     if (module) {
 1670              		.loc 1 505 0
 1671              		.cfi_startproc
 1672              		@ args = 0, pretend = 0, frame = 0
 1673              		@ frame_needed = 0, uses_anonymous_args = 0
 1674              		@ link register save eliminated.
 1675              	.LVL160:
 506:src/main.c    ****         //use sensor to calculate distance Make this a task.  One parent task for getting tank size
 1676              		.loc 1 506 0
 1677 0000 0346     		mov	r3, r0
 1678 0002 98B1     		cbz	r0, .L75
 508:src/main.c    ****         sensor->state = MODULE_EXECUTED;
 1679              		.loc 1 508 0
 1680 0004 0822     		movs	r2, #8
 1681 0006 0A66     		str	r2, [r1, #96]
 509:src/main.c    ****         module->tank = 100*(sensor->value/module->tank_height);
 1682              		.loc 1 509 0
 1683 0008 0220     		movs	r0, #2
 1684              	.LVL161:
 1685 000a 81F85C00 		strb	r0, [r1, #92]
 510:src/main.c    ****         module->state = MODULE_STANDBY;
 1686              		.loc 1 510 0
 1687 000e 596B     		ldr	r1, [r3, #52]
 1688              	.LVL162:
 1689 0010 92FBF1F2 		sdiv	r2, r2, r1
 1690 0014 6421     		movs	r1, #100
 1691 0016 01FB02F2 		mul	r2, r1, r2
 1692 001a 07EE102A 		fmsr	s14, r2	@ int
 1693 001e F8EEC77A 		fsitos	s15, s14
 1694 0022 C3ED007A 		fsts	s15, [r3]
 511:src/main.c    ****     }
 1695              		.loc 1 511 0
 1696 0026 0122     		movs	r2, #1
 1697 0028 83F82E20 		strb	r2, [r3, #46]
 1698              	.L75:
 1699 002c 7047     		bx	lr
 1700              		.cfi_endproc
 1701              	.LFE125:
 1703 002e 00BF     		.section	.text.vLight_task,"ax",%progbits
 1704              		.align	2
 1705              		.global	vLight_task
 1706              		.thumb
 1707              		.thumb_func
 1709              	vLight_task:
 1710              	.LFB126:
 516:src/main.c    ****     USART_puts(USART2, "Executed Light_task\r\n");
 1711              		.loc 1 516 0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 1715              	.LVL163:
 1716 0000 08B5     		push	{r3, lr}
 1717              	.LCFI22:
 1718              		.cfi_def_cfa_offset 8
 1719              		.cfi_offset 3, -8
 1720              		.cfi_offset 14, -4
 517:src/main.c    ****     /*
 1721              		.loc 1 517 0
 1722 0002 4FF48840 		mov	r0, #17408
 1723              	.LVL164:
 1724 0006 C4F20000 		movt	r0, 16384
 1725 000a 40F20001 		movw	r1, #:lower16:.LC20
 1726 000e C0F20001 		movt	r1, #:upper16:.LC20
 1727 0012 FFF7FEFF 		bl	USART_puts
 1728              	.LVL165:
 526:src/main.c    **** } 
 1729              		.loc 1 526 0
 1730 0016 0020     		movs	r0, #0
 1731 0018 FFF7FEFF 		bl	vTaskDelete
 1732              	.LVL166:
 1733 001c 08BD     		pop	{r3, pc}
 1734              		.cfi_endproc
 1735              	.LFE126:
 1737 001e 00BF     		.section	.text.main,"ax",%progbits
 1738              		.align	2
 1739              		.global	main
 1740              		.thumb
 1741              		.thumb_func
 1743              	main:
 1744              	.LFB130:
 671:src/main.c    **** 
 672:src/main.c    ****     vPH_parameters ph_p;
 673:src/main.c    **** 
 674:src/main.c    **** //Main Function
 675:src/main.c    **** int main(void){
 1745              		.loc 1 675 0
 1746              		.cfi_startproc
 1747              		@ args = 0, pretend = 0, frame = 56
 1748              		@ frame_needed = 0, uses_anonymous_args = 0
 1749 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1750              	.LCFI23:
 1751              		.cfi_def_cfa_offset 32
 1752              		.cfi_offset 4, -32
 1753              		.cfi_offset 5, -28
 1754              		.cfi_offset 6, -24
 1755              		.cfi_offset 7, -20
 1756              		.cfi_offset 8, -16
 1757              		.cfi_offset 9, -12
 1758              		.cfi_offset 10, -8
 1759              		.cfi_offset 14, -4
 1760 0004 92B0     		sub	sp, sp, #72
 1761              	.LCFI24:
 1762              		.cfi_def_cfa_offset 104
 676:src/main.c    **** 	//Call initx(); To Initialize USART & GPIO
 677:src/main.c    **** 
 678:src/main.c    **** 	initx();
 1763              		.loc 1 678 0
 1764 0006 FFF7FEFF 		bl	initx
 1765              	.LVL167:
 679:src/main.c    ****     init_us_timer();
 1766              		.loc 1 679 0
 1767 000a FFF7FEFF 		bl	init_us_timer
 1768              	.LVL168:
 680:src/main.c    ****     //
 681:src/main.c    ****     //CLOCK_SetClockTo168MHz();
 682:src/main.c    ****     //setSysTick();
 683:src/main.c    **** 
 684:src/main.c    **** 
 685:src/main.c    ****     int i;
 686:src/main.c    **** 
 687:src/main.c    ****     USART_puts(USART2, "Booting up...\r\n");
 1769              		.loc 1 687 0
 1770 000e 4FF48840 		mov	r0, #17408
 1771 0012 C4F20000 		movt	r0, 16384
 1772 0016 40F20001 		movw	r1, #:lower16:.LC21
 1773 001a C0F20001 		movt	r1, #:upper16:.LC21
 1774 001e FFF7FEFF 		bl	USART_puts
 1775              	.LVL169:
 688:src/main.c    ****     for(i=0; i<2; i++) { 
 1776              		.loc 1 688 0
 1777 0022 0025     		movs	r5, #0
 689:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 1778              		.loc 1 689 0
 1779 0024 4FF44064 		mov	r4, #3072
 1780 0028 C4F20204 		movt	r4, 16386
 1781 002c 4FF4805A 		mov	r10, #4096
 690:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
 1782              		.loc 1 690 0
 1783 0030 4FF40059 		mov	r9, #8192
 691:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
 1784              		.loc 1 691 0
 1785 0034 4FF48048 		mov	r8, #16384
 692:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
 1786              		.loc 1 692 0
 1787 0038 4FF40047 		mov	r7, #32768
 693:src/main.c    ****         delay_ms(500);
 1788              		.loc 1 693 0
 1789 003c 4FF4FA76 		mov	r6, #500
 688:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 1790              		.loc 1 688 0
 1791 0040 1BE0     		b	.L79
 1792              	.LVL170:
 1793              	.L80:
 689:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_13);
 1794              		.loc 1 689 0 discriminator 2
 1795 0042 2046     		mov	r0, r4
 1796 0044 5146     		mov	r1, r10
 1797 0046 FFF7FEFF 		bl	GPIO_SetBits
 1798              	.LVL171:
 690:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_14);
 1799              		.loc 1 690 0 discriminator 2
 1800 004a 2046     		mov	r0, r4
 1801 004c 4946     		mov	r1, r9
 1802 004e FFF7FEFF 		bl	GPIO_SetBits
 1803              	.LVL172:
 691:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_15);
 1804              		.loc 1 691 0 discriminator 2
 1805 0052 2046     		mov	r0, r4
 1806 0054 4146     		mov	r1, r8
 1807 0056 FFF7FEFF 		bl	GPIO_SetBits
 1808              	.LVL173:
 692:src/main.c    ****         delay_ms(500);
 1809              		.loc 1 692 0 discriminator 2
 1810 005a 2046     		mov	r0, r4
 1811 005c 3946     		mov	r1, r7
 1812 005e FFF7FEFF 		bl	GPIO_SetBits
 1813              	.LVL174:
 1814              		.loc 1 693 0 discriminator 2
 1815 0062 3046     		mov	r0, r6
 1816 0064 FFF7FEFF 		bl	delay_ms
 1817              	.LVL175:
 694:src/main.c    **** 
 695:src/main.c    ****         GPIO_ResetBits(GPIOD, GPIO_Pin_12|GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
 1818              		.loc 1 695 0 discriminator 2
 1819 0068 2046     		mov	r0, r4
 1820 006a 4FF47041 		mov	r1, #61440
 1821 006e FFF7FEFF 		bl	GPIO_ResetBits
 1822              	.LVL176:
 696:src/main.c    ****         delay_ms(500);
 1823              		.loc 1 696 0 discriminator 2
 1824 0072 3046     		mov	r0, r6
 1825 0074 FFF7FEFF 		bl	delay_ms
 1826              	.LVL177:
 688:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 1827              		.loc 1 688 0 discriminator 2
 1828 0078 0135     		adds	r5, r5, #1
 1829              	.LVL178:
 1830              	.L79:
 688:src/main.c    ****         GPIO_SetBits(GPIOD, GPIO_Pin_12);
 1831              		.loc 1 688 0 is_stmt 0 discriminator 1
 1832 007a 012D     		cmp	r5, #1
 1833 007c E1DD     		ble	.L80
 697:src/main.c    **** 
 698:src/main.c    ****     }
 699:src/main.c    **** 
 700:src/main.c    **** 
 701:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 1834              		.loc 1 701 0 is_stmt 1
 1835 007e 1020     		movs	r0, #16
 1836 0080 0121     		movs	r1, #1
 1837 0082 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1838              	.LVL179:
 702:src/main.c    **** 
 703:src/main.c    ****     GPIO_InitTypeDef gpio_ultrasonic;
 704:src/main.c    **** 
 705:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_0;
 1839              		.loc 1 705 0
 1840 0086 0126     		movs	r6, #1
 1841 0088 1096     		str	r6, [sp, #64]
 706:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP; //PP
 1842              		.loc 1 706 0
 1843 008a 0024     		movs	r4, #0
 1844 008c 8DF84640 		strb	r4, [sp, #70]
 707:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_OUT;
 1845              		.loc 1 707 0
 1846 0090 8DF84460 		strb	r6, [sp, #68]
 708:src/main.c    ****     //gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_NOPULL;
 709:src/main.c    **** 
 710:src/main.c    ****     gpio_ultrasonic.GPIO_Speed = GPIO_Speed_50MHz;
 1847              		.loc 1 710 0
 1848 0094 0225     		movs	r5, #2
 1849              	.LVL180:
 1850 0096 8DF84550 		strb	r5, [sp, #69]
 711:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ultrasonic);
 1851              		.loc 1 711 0
 1852 009a 4FF48057 		mov	r7, #4096
 1853 009e C4F20207 		movt	r7, 16386
 1854 00a2 3846     		mov	r0, r7
 1855 00a4 10A9     		add	r1, sp, #64
 1856 00a6 FFF7FEFF 		bl	GPIO_Init
 1857              	.LVL181:
 712:src/main.c    **** 
 713:src/main.c    **** 
 714:src/main.c    ****     gpio_ultrasonic.GPIO_Pin = GPIO_Pin_1;
 1858              		.loc 1 714 0
 1859 00aa 1095     		str	r5, [sp, #64]
 715:src/main.c    ****     gpio_ultrasonic.GPIO_OType = GPIO_OType_PP;
 1860              		.loc 1 715 0
 1861 00ac 8DF84640 		strb	r4, [sp, #70]
 716:src/main.c    ****     //gpio_ultrasonic.GPIO_PuPd = GPIO_PuPd_DOWN;
 717:src/main.c    ****     gpio_ultrasonic.GPIO_Mode = GPIO_Mode_IN;
 1862              		.loc 1 717 0
 1863 00b0 8DF84440 		strb	r4, [sp, #68]
 718:src/main.c    ****     GPIO_Init(GPIOE, &gpio_ultrasonic);
 1864              		.loc 1 718 0
 1865 00b4 3846     		mov	r0, r7
 1866 00b6 10A9     		add	r1, sp, #64
 1867 00b8 FFF7FEFF 		bl	GPIO_Init
 1868              	.LVL182:
 719:src/main.c    **** 
 720:src/main.c    ****     Ultrasonic_Typedef sensor;
 721:src/main.c    ****     ultrasonic_init(&sensor, GPIOE, GPIOE, GPIO_Pin_1, GPIO_Pin_0, 300); 
 1869              		.loc 1 721 0
 1870 00bc 0096     		str	r6, [sp]
 1871 00be 4FF49673 		mov	r3, #300
 1872 00c2 0193     		str	r3, [sp, #4]
 1873 00c4 0CA8     		add	r0, sp, #48
 1874 00c6 3946     		mov	r1, r7
 1875 00c8 3A46     		mov	r2, r7
 1876 00ca 2B46     		mov	r3, r5
 1877 00cc FFF7FEFF 		bl	ultrasonic_init
 1878              	.LVL183:
 722:src/main.c    ****     
 723:src/main.c    **** 
 724:src/main.c    ****     /*
 725:src/main.c    ****     while (1) {
 726:src/main.c    ****         USART_puts(USART2, "Type 'Enter'");
 727:src/main.c    ****         USART_getline();
 728:src/main.c    ****         int d = ultrasonic_read_distance(&sensor);
 729:src/main.c    ****         USART_puts(USART2, "Distance: ");
 730:src/main.c    ****         USART_put_int(USART2, d);
 731:src/main.c    ****         USART_puts(USART2, "\r\n");
 732:src/main.c    ****     }
 733:src/main.c    ****     */
 734:src/main.c    ****     //SERVO SETUP
 735:src/main.c    ****     TIM_PWM_init();
 1879              		.loc 1 735 0
 1880 00d0 FFF7FEFF 		bl	TIM_PWM_init
 1881              	.LVL184:
 736:src/main.c    **** 
 737:src/main.c    **** 	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 1882              		.loc 1 737 0
 1883 00d4 2846     		mov	r0, r5
 1884 00d6 3146     		mov	r1, r6
 1885 00d8 FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 1886              	.LVL185:
 738:src/main.c    ****     GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4);
 1887              		.loc 1 738 0
 1888 00dc 4FF48067 		mov	r7, #1024
 1889 00e0 C4F20207 		movt	r7, 16386
 1890 00e4 3846     		mov	r0, r7
 1891 00e6 0721     		movs	r1, #7
 1892 00e8 2A46     		mov	r2, r5
 1893 00ea FFF7FEFF 		bl	GPIO_PinAFConfig
 1894              	.LVL186:
 739:src/main.c    ****     GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
 1895              		.loc 1 739 0
 1896 00ee 3846     		mov	r0, r7
 1897 00f0 0621     		movs	r1, #6
 1898 00f2 2A46     		mov	r2, r5
 1899 00f4 FFF7FEFF 		bl	GPIO_PinAFConfig
 1900              	.LVL187:
 740:src/main.c    **** 
 741:src/main.c    **** 
 742:src/main.c    **** 
 743:src/main.c    **** 
 744:src/main.c    ****     GPIO_InitTypeDef GPIO_InitStructServo;
 745:src/main.c    **** 
 746:src/main.c    ****     GPIO_InitStructServo.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 1901              		.loc 1 746 0
 1902 00f8 C023     		movs	r3, #192
 1903 00fa 0A93     		str	r3, [sp, #40]
 747:src/main.c    ****     GPIO_InitStructServo.GPIO_OType = GPIO_OType_PP;
 1904              		.loc 1 747 0
 1905 00fc 8DF82E40 		strb	r4, [sp, #46]
 748:src/main.c    ****     GPIO_InitStructServo.GPIO_PuPd = GPIO_PuPd_UP;
 1906              		.loc 1 748 0
 1907 0100 8DF82F60 		strb	r6, [sp, #47]
 749:src/main.c    ****     GPIO_InitStructServo.GPIO_Mode = GPIO_Mode_AF;
 1908              		.loc 1 749 0
 1909 0104 8DF82C50 		strb	r5, [sp, #44]
 750:src/main.c    ****     GPIO_InitStructServo.GPIO_Speed = GPIO_Speed_100MHz;
 1910              		.loc 1 750 0
 1911 0108 0323     		movs	r3, #3
 1912 010a 8DF82D30 		strb	r3, [sp, #45]
 751:src/main.c    ****     GPIO_Init(GPIOB, &GPIO_InitStructServo);
 1913              		.loc 1 751 0
 1914 010e 3846     		mov	r0, r7
 1915 0110 0AA9     		add	r1, sp, #40
 1916 0112 FFF7FEFF 		bl	GPIO_Init
 1917              	.LVL188:
 752:src/main.c    **** 
 753:src/main.c    **** 
 754:src/main.c    ****     Servo_Typedef servo1, servo2;
 755:src/main.c    ****     servo_init(&servo1, &(TIM4->CCR1), 500, 1850/*61*/); //up and down servo
 1918              		.loc 1 755 0
 1919 0116 07A8     		add	r0, sp, #28
 1920 0118 40F63401 		movw	r1, #2100
 1921 011c C4F20001 		movt	r1, 16384
 1922 0120 4FF4FA72 		mov	r2, #500
 1923 0124 40F23A73 		movw	r3, #1850
 1924 0128 FFF7FEFF 		bl	servo_init
 1925              	.LVL189:
 756:src/main.c    ****     servo_init(&servo2, &(TIM4->CCR2), 500, 1000);
 1926              		.loc 1 756 0
 1927 012c 04A8     		add	r0, sp, #16
 1928 012e 40F63801 		movw	r1, #2104
 1929 0132 C4F20001 		movt	r1, 16384
 1930 0136 4FF4FA72 		mov	r2, #500
 1931 013a 4FF47A73 		mov	r3, #1000
 1932 013e FFF7FEFF 		bl	servo_init
 1933              	.LVL190:
 757:src/main.c    ****     servo_set_degrees(&servo1, 90);
 1934              		.loc 1 757 0
 1935 0142 07A8     		add	r0, sp, #28
 1936 0144 5A21     		movs	r1, #90
 1937 0146 FFF7FEFF 		bl	servo_set_degrees
 1938              	.LVL191:
 758:src/main.c    **** 
 759:src/main.c    ****     char hello[] = "hello";
 760:src/main.c    **** 
 761:src/main.c    ****     xTaskCreate(idle_blinky, (signed char*)"idle_blinky", 128, NULL, tskIDLE_PRIORITY, NULL);
 1939              		.loc 1 761 0
 1940 014a 0094     		str	r4, [sp]
 1941 014c 0194     		str	r4, [sp, #4]
 1942 014e 0294     		str	r4, [sp, #8]
 1943 0150 0394     		str	r4, [sp, #12]
 1944 0152 40F20000 		movw	r0, #:lower16:idle_blinky
 1945 0156 C0F20000 		movt	r0, #:upper16:idle_blinky
 1946 015a 40F20001 		movw	r1, #:lower16:.LC22
 1947 015e C0F20001 		movt	r1, #:upper16:.LC22
 1948 0162 8022     		movs	r2, #128
 1949 0164 2346     		mov	r3, r4
 1950 0166 FFF7FEFF 		bl	xTaskGenericCreate
 1951              	.LVL192:
 762:src/main.c    **** 
 763:src/main.c    **** 
 764:src/main.c    ****     PPump_PHUP.tank_height = 10;
 1952              		.loc 1 764 0
 1953 016a 40F20006 		movw	r6, #:lower16:PPump_PHUP
 1954 016e C0F20006 		movt	r6, #:upper16:PPump_PHUP
 1955 0172 0A22     		movs	r2, #10
 1956 0174 7263     		str	r2, [r6, #52]
 765:src/main.c    ****     PPump_PHDOWN.tank_height = 10;
 1957              		.loc 1 765 0
 1958 0176 40F20003 		movw	r3, #:lower16:PPump_PHDOWN
 1959 017a C0F20003 		movt	r3, #:upper16:PPump_PHDOWN
 1960 017e 5A63     		str	r2, [r3, #52]
 766:src/main.c    **** 
 767:src/main.c    ****     PPump_Init(&PPump_PHUP, &UDS_PHUP);
 1961              		.loc 1 767 0
 1962 0180 3046     		mov	r0, r6
 1963 0182 40F20001 		movw	r1, #:lower16:UDS_PHUP
 1964 0186 C0F20001 		movt	r1, #:upper16:UDS_PHUP
 1965 018a FFF7FEFF 		bl	PPump_Init
 1966              	.LVL193:
 768:src/main.c    ****     PPump_Init(&PPump_PHUP, &UDS_PHDOWN);
 1967              		.loc 1 768 0
 1968 018e 3046     		mov	r0, r6
 1969 0190 40F20001 		movw	r1, #:lower16:UDS_PHDOWN
 1970 0194 C0F20001 		movt	r1, #:upper16:UDS_PHDOWN
 1971 0198 FFF7FEFF 		bl	PPump_Init
 1972              	.LVL194:
 769:src/main.c    **** 
 770:src/main.c    ****     ph_p.target_ph = 20;
 1973              		.loc 1 770 0
 1974 019c 40F20006 		movw	r6, #:lower16:ph_p
 1975 01a0 C0F20006 		movt	r6, #:upper16:ph_p
 1976 01a4 1423     		movs	r3, #20
 1977 01a6 7360     		str	r3, [r6, #4]
 771:src/main.c    **** 
 772:src/main.c    **** 
 773:src/main.c    ****     vLight_parameters light_p;
 774:src/main.c    ****     //ph_p.target_ph = 200;
 775:src/main.c    **** 
 776:src/main.c    **** 
 777:src/main.c    ****     //xTaskCreate(vLight_task, (signed char*)"vLight", 128, &light_p, tskIDLE_PRIORITY+1, NULL);
 778:src/main.c    **** 
 779:src/main.c    **** 
 780:src/main.c    ****     xTaskCreate(vPH_task, (signed char*)"vPH", 128, &ph_p, tskIDLE_PRIORITY+2, NULL);
 1978              		.loc 1 780 0
 1979 01a8 0095     		str	r5, [sp]
 1980 01aa 0194     		str	r4, [sp, #4]
 1981 01ac 0294     		str	r4, [sp, #8]
 1982 01ae 0394     		str	r4, [sp, #12]
 1983 01b0 40F20000 		movw	r0, #:lower16:vPH_task
 1984 01b4 C0F20000 		movt	r0, #:upper16:vPH_task
 1985 01b8 40F20001 		movw	r1, #:lower16:.LC23
 1986 01bc C0F20001 		movt	r1, #:upper16:.LC23
 1987 01c0 8022     		movs	r2, #128
 1988 01c2 3346     		mov	r3, r6
 1989 01c4 FFF7FEFF 		bl	xTaskGenericCreate
 1990              	.LVL195:
 781:src/main.c    **** 
 782:src/main.c    ****     //ph_p.target_ph = 100;
 783:src/main.c    **** 
 784:src/main.c    ****     USART_puts(USART2, "-----------------\r\n(2)target ph: ");
 1991              		.loc 1 784 0
 1992 01c8 4FF48845 		mov	r5, #17408
 1993 01cc C4F20005 		movt	r5, 16384
 1994 01d0 2846     		mov	r0, r5
 1995 01d2 40F20001 		movw	r1, #:lower16:.LC24
 1996 01d6 C0F20001 		movt	r1, #:upper16:.LC24
 1997 01da FFF7FEFF 		bl	USART_puts
 1998              	.LVL196:
 785:src/main.c    ****     USART_put_int(USART2, ph_p.target_ph);
 1999              		.loc 1 785 0
 2000 01de 2846     		mov	r0, r5
 2001 01e0 7168     		ldr	r1, [r6, #4]
 2002 01e2 FFF7FEFF 		bl	USART_put_int
 2003              	.LVL197:
 786:src/main.c    ****     USART_puts(USART2, "\r\n");
 2004              		.loc 1 786 0
 2005 01e6 2846     		mov	r0, r5
 2006 01e8 40F20001 		movw	r1, #:lower16:.LC1
 2007 01ec C0F20001 		movt	r1, #:upper16:.LC1
 2008 01f0 FFF7FEFF 		bl	USART_puts
 2009              	.LVL198:
 787:src/main.c    **** 
 788:src/main.c    **** 
 789:src/main.c    **** 
 790:src/main.c    **** 
 791:src/main.c    **** 
 792:src/main.c    **** 
 793:src/main.c    ****  //   xTaskCreate(handle_uart_command, (signed char*)"handle_uart_command", 128, hello, tskIDLE_PRI
 794:src/main.c    **** 
 795:src/main.c    **** 
 796:src/main.c    **** 	//xTaskCreate(UsartTask, (signed char*)"UsartTask", 128, NULL, tskIDLE_PRIORITY+1, NULL);
 797:src/main.c    **** 
 798:src/main.c    **** 	//Call Scheduler
 799:src/main.c    **** 	vTaskStartScheduler();
 2010              		.loc 1 799 0
 2011 01f4 FFF7FEFF 		bl	vTaskStartScheduler
 2012              	.LVL199:
 800:src/main.c    ****     //
 801:src/main.c    ****     
 802:src/main.c    ****    
 803:src/main.c    **** 
 804:src/main.c    **** }
 2013              		.loc 1 804 0
 2014 01f8 2046     		mov	r0, r4
 2015 01fa 12B0     		add	sp, sp, #72
 2016              		@ sp needed
 2017 01fc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 2018              		.cfi_endproc
 2019              	.LFE130:
 2021              		.comm	ph_p,8,4
 2022              		.global	TEST_PH_VALUE
 2023              		.comm	PHMeter_Resvoir,12,4
 2024              		.comm	UDS_NUTRIENT,100,4
 2025              		.comm	PPump_NUTRIENT,56,4
 2026              		.comm	UDS_PHDOWN,100,4
 2027              		.comm	PPump_PHDOWN,56,4
 2028              		.comm	UDS_PHUP,100,4
 2029              		.comm	PPump_PHUP,56,4
 2030              		.global	input_lock
 2031              		.global	read_pos
 2032              		.global	write_pos
 2033              		.comm	received_string,301,4
 2034              		.section	.bss.input_lock,"aw",%nobits
 2035              		.set	.LANCHOR1,. + 0
 2038              	input_lock:
 2039 0000 00       		.space	1
 2040              		.section	.bss.count.9477,"aw",%nobits
 2041              		.set	.LANCHOR5,. + 0
 2044              	count.9477:
 2045 0000 00       		.space	1
 2046              		.section	.rodata.str1.4,"aMS",%progbits,1
 2047              		.align	2
 2048              	.LC0:
 2049 0000 436F6D6D 		.ascii	"Command: \000"
 2049      616E643A 
 2049      2000
 2050 000a 0000     		.space	2
 2051              	.LC1:
 2052 000c 0D0A00   		.ascii	"\015\012\000"
 2053 000f 00       		.space	1
 2054              	.LC2:
 2055 0010 52656164 		.ascii	"Read pH Meter...\015\012\000"
 2055      20704820 
 2055      4D657465 
 2055      722E2E2E 
 2055      0D0A00
 2056 0023 00       		.space	1
 2057              	.LC3:
 2058 0024 434F554C 		.ascii	"COULDNT TAKE SEMAPHORE\000"
 2058      444E5420 
 2058      54414B45 
 2058      2053454D 
 2058      4150484F 
 2059 003b 00       		.space	1
 2060              	.LC4:
 2061 003c 53746172 		.ascii	"Starting to dispense...\015\012\000"
 2061      74696E67 
 2061      20746F20 
 2061      64697370 
 2061      656E7365 
 2062 0056 0000     		.space	2
 2063              	.LC5:
 2064 0058 46696E69 		.ascii	"Finished dispensing\015\012\000"
 2064      73686564 
 2064      20646973 
 2064      70656E73 
 2064      696E670D 
 2065 006e 0000     		.space	2
 2066              	.LC6:
 2067 0070 5050554D 		.ascii	"PPUMP_DISPENSE COULDNT GET MUTEX\015\012\000"
 2067      505F4449 
 2067      5350454E 
 2067      53452043 
 2067      4F554C44 
 2068 0093 00       		.space	1
 2069              	.LC7:
 2070 0094 2D2D2D2D 		.ascii	"-----------------\015\012(1)target ph: \000"
 2070      2D2D2D2D 
 2070      2D2D2D2D 
 2070      2D2D2D2D 
 2070      2D0D0A28 
 2071 00b6 0000     		.space	2
 2072              	.LC8:
 2073 00b8 45786563 		.ascii	"Executing PH_task...\015\012\000"
 2073      7574696E 
 2073      67205048 
 2073      5F746173 
 2073      6B2E2E2E 
 2074 00cf 00       		.space	1
 2075              	.LC9:
 2076 00d0 50485F4D 		.ascii	"PH_METER->mutex == NULL\015\012\000"
 2076      45544552 
 2076      2D3E6D75 
 2076      74657820 
 2076      3D3D204E 
 2077 00ea 0000     		.space	2
 2078              	.LC10:
 2079 00ec 2D2D2D2D 		.ascii	"-----------------\015\012target ph: \000"
 2079      2D2D2D2D 
 2079      2D2D2D2D 
 2079      2D2D2D2D 
 2079      2D0D0A74 
 2080 010b 00       		.space	1
 2081              	.LC11:
 2082 010c 50482052 		.ascii	"PH Read\000"
 2082      65616400 
 2083              	.LC12:
 2084 0114 4D455445 		.ascii	"METER READ SUCCESSFULLY. PH=\000"
 2084      52205245 
 2084      41442053 
 2084      55434345 
 2084      53534655 
 2085 0131 000000   		.space	3
 2086              	.LC13:
 2087 0134 09746172 		.ascii	"\011target_PH=\000"
 2087      6765745F 
 2087      50483D00 
 2088              	.LC14:
 2089 0140 41444449 		.ascii	"ADDING PH UP\015\012\000"
 2089      4E472050 
 2089      48205550 
 2089      0D0A00
 2090 014f 00       		.space	1
 2091              	.LC15:
 2092 0150 505000   		.ascii	"PP\000"
 2093 0153 00       		.space	1
 2094              	.LC16:
 2095 0154 41444449 		.ascii	"ADDING PH DOWN\015\012\000"
 2095      4E472050 
 2095      4820444F 
 2095      574E0D0A 
 2095      00
 2096 0165 000000   		.space	3
 2097              	.LC17:
 2098 0168 53544142 		.ascii	"STABILIZED PH LEVELS @\000"
 2098      494C495A 
 2098      45442050 
 2098      48204C45 
 2098      56454C53 
 2099 017f 00       		.space	1
 2100              	.LC18:
 2101 0180 434F554C 		.ascii	"COULDNT ACCESS SAFELY IN PH_TASK\015\012\000"
 2101      444E5420 
 2101      41434345 
 2101      53532053 
 2101      4146454C 
 2102 01a3 00       		.space	1
 2103              	.LC19:
 2104 01a4 68616E64 		.ascii	"handle_uart_command\000"
 2104      6C655F75 
 2104      6172745F 
 2104      636F6D6D 
 2104      616E6400 
 2105              	.LC20:
 2106 01b8 45786563 		.ascii	"Executed Light_task\015\012\000"
 2106      75746564 
 2106      204C6967 
 2106      68745F74 
 2106      61736B0D 
 2107 01ce 0000     		.space	2
 2108              	.LC21:
 2109 01d0 426F6F74 		.ascii	"Booting up...\015\012\000"
 2109      696E6720 
 2109      75702E2E 
 2109      2E0D0A00 
 2110              	.LC22:
 2111 01e0 69646C65 		.ascii	"idle_blinky\000"
 2111      5F626C69 
 2111      6E6B7900 
 2112              	.LC23:
 2113 01ec 76504800 		.ascii	"vPH\000"
 2114              	.LC24:
 2115 01f0 2D2D2D2D 		.ascii	"-----------------\015\012(2)target ph: \000"
 2115      2D2D2D2D 
 2115      2D2D2D2D 
 2115      2D2D2D2D 
 2115      2D0D0A28 
 2116 0212 0000     		.section	.bss.read_pos,"aw",%nobits
 2117              		.set	.LANCHOR4,. + 0
 2120              	read_pos:
 2121 0000 00       		.space	1
 2122              		.section	.bss.prev_key.9437,"aw",%nobits
 2123              		.set	.LANCHOR3,. + 0
 2126              	prev_key.9437:
 2127 0000 00       		.space	1
 2128              		.section	.data.TEST_PH_VALUE,"aw",%progbits
 2129              		.align	2
 2130              		.set	.LANCHOR0,. + 0
 2133              	TEST_PH_VALUE:
 2134 0000 32000000 		.word	50
 2135              		.section	.bss.write_pos,"aw",%nobits
 2136              		.set	.LANCHOR2,. + 0
 2139              	write_pos:
 2140 0000 00       		.space	1
 2141              		.text
 2142              	.Letext0:
 2143              		.file 3 "FreeRTOS/Source/include/projdefs.h"
 2144              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2145              		.file 5 "/usr/include/newlib/machine/_default_types.h"
 2146              		.file 6 "/usr/include/newlib/stdint.h"
 2147              		.file 7 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h"
 2148              		.file 8 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_tim.h"
 2149              		.file 9 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 2150              		.file 10 "libs/STM32F4xx_StdPeriph_Driver/inc/misc.h"
 2151              		.file 11 "FreeRTOS/Source/include/../../Source/portable/GCC/ARM_CM4F/portmacro.h"
 2152              		.file 12 "FreeRTOS/Source/include/task.h"
 2153              		.file 13 "FreeRTOS/Source/include/queue.h"
 2154              		.file 14 "FreeRTOS/Source/include/semphr.h"
 2155              		.file 15 "src/hbperiph.h"
 2156              		.file 16 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
 2157              		.file 17 "src/ustime.h"
 2158              		.file 18 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccBDDoeA.s:20     .text.idle_blinky:0000000000000000 $t
     /tmp/ccBDDoeA.s:25     .text.idle_blinky:0000000000000000 idle_blinky
     /tmp/ccBDDoeA.s:103    .text.setSysTick:0000000000000000 $t
     /tmp/ccBDDoeA.s:108    .text.setSysTick:0000000000000000 setSysTick
     /tmp/ccBDDoeA.s:159    .text.USART_put:0000000000000000 $t
     /tmp/ccBDDoeA.s:164    .text.USART_put:0000000000000000 USART_put
     /tmp/ccBDDoeA.s:199    .text.USART_puts:0000000000000000 $t
     /tmp/ccBDDoeA.s:204    .text.USART_puts:0000000000000000 USART_puts
     /tmp/ccBDDoeA.s:245    .text.handle_uart_command:0000000000000000 $t
     /tmp/ccBDDoeA.s:250    .text.handle_uart_command:0000000000000000 handle_uart_command
     /tmp/ccBDDoeA.s:2048   .rodata.str1.4:0000000000000000 .LC0
     /tmp/ccBDDoeA.s:2051   .rodata.str1.4:000000000000000c .LC1
     /tmp/ccBDDoeA.s:286    .text.vPH_read_value:0000000000000000 $t
     /tmp/ccBDDoeA.s:291    .text.vPH_read_value:0000000000000000 vPH_read_value
     /tmp/ccBDDoeA.s:2054   .rodata.str1.4:0000000000000010 .LC2
     /tmp/ccBDDoeA.s:2130   .data.TEST_PH_VALUE:0000000000000000 .LANCHOR0
     /tmp/ccBDDoeA.s:2057   .rodata.str1.4:0000000000000024 .LC3
     /tmp/ccBDDoeA.s:357    .text.vPPump_dispense:0000000000000000 $t
     /tmp/ccBDDoeA.s:362    .text.vPPump_dispense:0000000000000000 vPPump_dispense
                            *COM*:000000000000000c PHMeter_Resvoir
     /tmp/ccBDDoeA.s:2060   .rodata.str1.4:000000000000003c .LC4
                            *COM*:0000000000000038 PPump_PHUP
                            *COM*:0000000000000038 PPump_PHDOWN
     /tmp/ccBDDoeA.s:2063   .rodata.str1.4:0000000000000058 .LC5
     /tmp/ccBDDoeA.s:2066   .rodata.str1.4:0000000000000070 .LC6
     /tmp/ccBDDoeA.s:471    .text.USART_put_int:0000000000000000 $t
     /tmp/ccBDDoeA.s:476    .text.USART_put_int:0000000000000000 USART_put_int
     /tmp/ccBDDoeA.s:569    .text.vPH_task:0000000000000000 $t
     /tmp/ccBDDoeA.s:574    .text.vPH_task:0000000000000000 vPH_task
     /tmp/ccBDDoeA.s:2069   .rodata.str1.4:0000000000000094 .LC7
     /tmp/ccBDDoeA.s:2072   .rodata.str1.4:00000000000000b8 .LC8
     /tmp/ccBDDoeA.s:2075   .rodata.str1.4:00000000000000d0 .LC9
     /tmp/ccBDDoeA.s:2078   .rodata.str1.4:00000000000000ec .LC10
     /tmp/ccBDDoeA.s:2081   .rodata.str1.4:000000000000010c .LC11
     /tmp/ccBDDoeA.s:2100   .rodata.str1.4:0000000000000180 .LC18
     /tmp/ccBDDoeA.s:2083   .rodata.str1.4:0000000000000114 .LC12
     /tmp/ccBDDoeA.s:2086   .rodata.str1.4:0000000000000134 .LC13
     /tmp/ccBDDoeA.s:2088   .rodata.str1.4:0000000000000140 .LC14
     /tmp/ccBDDoeA.s:2091   .rodata.str1.4:0000000000000150 .LC15
     /tmp/ccBDDoeA.s:2094   .rodata.str1.4:0000000000000154 .LC16
     /tmp/ccBDDoeA.s:2097   .rodata.str1.4:0000000000000168 .LC17
     /tmp/ccBDDoeA.s:900    .text.USART_getline:0000000000000000 $t
     /tmp/ccBDDoeA.s:905    .text.USART_getline:0000000000000000 USART_getline
     /tmp/ccBDDoeA.s:2035   .bss.input_lock:0000000000000000 .LANCHOR1
     /tmp/ccBDDoeA.s:978    .text.USART_getkey:0000000000000000 $t
     /tmp/ccBDDoeA.s:983    .text.USART_getkey:0000000000000000 USART_getkey
     /tmp/ccBDDoeA.s:2136   .bss.write_pos:0000000000000000 .LANCHOR2
                            *COM*:000000000000012d received_string
     /tmp/ccBDDoeA.s:2123   .bss.prev_key.9437:0000000000000000 .LANCHOR3
     /tmp/ccBDDoeA.s:1027   .text.USART_nextline_length:0000000000000000 $t
     /tmp/ccBDDoeA.s:1032   .text.USART_nextline_length:0000000000000000 USART_nextline_length
     /tmp/ccBDDoeA.s:2117   .bss.read_pos:0000000000000000 .LANCHOR4
     /tmp/ccBDDoeA.s:1068   .text.USART_readline:0000000000000000 $t
     /tmp/ccBDDoeA.s:1073   .text.USART_readline:0000000000000000 USART_readline
     /tmp/ccBDDoeA.s:1132   .text.USART_readline_int:0000000000000000 $t
     /tmp/ccBDDoeA.s:1137   .text.USART_readline_int:0000000000000000 USART_readline_int
     /tmp/ccBDDoeA.s:1228   .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccBDDoeA.s:1233   .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccBDDoeA.s:2041   .bss.count.9477:0000000000000000 .LANCHOR5
     /tmp/ccBDDoeA.s:2103   .rodata.str1.4:00000000000001a4 .LC19
     /tmp/ccBDDoeA.s:1407   .text.initx:0000000000000000 $t
     /tmp/ccBDDoeA.s:1412   .text.initx:0000000000000000 initx
     /tmp/ccBDDoeA.s:1547   .text.TIM_PWM_init:0000000000000000 $t
     /tmp/ccBDDoeA.s:1552   .text.TIM_PWM_init:0000000000000000 TIM_PWM_init
     /tmp/ccBDDoeA.s:1639   .text.PHMeter_Init:0000000000000000 $t
     /tmp/ccBDDoeA.s:1644   .text.PHMeter_Init:0000000000000000 PHMeter_Init
     /tmp/ccBDDoeA.s:1663   .text.PPump_Init:0000000000000000 $t
     /tmp/ccBDDoeA.s:1668   .text.PPump_Init:0000000000000000 PPump_Init
     /tmp/ccBDDoeA.s:1704   .text.vLight_task:0000000000000000 $t
     /tmp/ccBDDoeA.s:1709   .text.vLight_task:0000000000000000 vLight_task
     /tmp/ccBDDoeA.s:2105   .rodata.str1.4:00000000000001b8 .LC20
     /tmp/ccBDDoeA.s:1738   .text.main:0000000000000000 $t
     /tmp/ccBDDoeA.s:1743   .text.main:0000000000000000 main
     /tmp/ccBDDoeA.s:2108   .rodata.str1.4:00000000000001d0 .LC21
     /tmp/ccBDDoeA.s:2110   .rodata.str1.4:00000000000001e0 .LC22
                            *COM*:0000000000000064 UDS_PHUP
                            *COM*:0000000000000064 UDS_PHDOWN
                            *COM*:0000000000000008 ph_p
     /tmp/ccBDDoeA.s:2112   .rodata.str1.4:00000000000001ec .LC23
     /tmp/ccBDDoeA.s:2114   .rodata.str1.4:00000000000001f0 .LC24
     /tmp/ccBDDoeA.s:2133   .data.TEST_PH_VALUE:0000000000000000 TEST_PH_VALUE
                            *COM*:0000000000000064 UDS_NUTRIENT
                            *COM*:0000000000000038 PPump_NUTRIENT
     /tmp/ccBDDoeA.s:2038   .bss.input_lock:0000000000000000 input_lock
     /tmp/ccBDDoeA.s:2120   .bss.read_pos:0000000000000000 read_pos
     /tmp/ccBDDoeA.s:2139   .bss.write_pos:0000000000000000 write_pos
     /tmp/ccBDDoeA.s:2039   .bss.input_lock:0000000000000000 $d
     /tmp/ccBDDoeA.s:2044   .bss.count.9477:0000000000000000 count.9477
     /tmp/ccBDDoeA.s:2045   .bss.count.9477:0000000000000000 $d
     /tmp/ccBDDoeA.s:2047   .rodata.str1.4:0000000000000000 $d
     /tmp/ccBDDoeA.s:2121   .bss.read_pos:0000000000000000 $d
     /tmp/ccBDDoeA.s:2126   .bss.prev_key.9437:0000000000000000 prev_key.9437
     /tmp/ccBDDoeA.s:2127   .bss.prev_key.9437:0000000000000000 $d
     /tmp/ccBDDoeA.s:2129   .data.TEST_PH_VALUE:0000000000000000 $d
     /tmp/ccBDDoeA.s:2140   .bss.write_pos:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:0000000000000000 wm4.projdefs.h.55.cdae9ead80b5a2ac004f41bb277aad45
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.55.a343614a17c4367a6359a1f530d6d32b
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.FreeRTOSConfig.h.74.fc794e36cd6c91c3b4695c74d78d9ccd
                           .group:0000000000000000 wm4.portmacro.h.69.a7e264ae32accd81a6ffb6f75a8356fe
                           .group:0000000000000000 wm4.portable.h.315.489c085dbd13c768c8594a7d23ef5545
                           .group:0000000000000000 wm4.mpu_wrappers.h.55.46a4a008a193040c38098e9a5f07ff9d
                           .group:0000000000000000 wm4.FreeRTOS.h.136.a1d4f27d190f434afd0502fdd510d30a
                           .group:0000000000000000 wm4.list.h.84.e713c47e239b06424d7c93968625e34d
                           .group:0000000000000000 wm4.task.h.73.ea72fb74b80a9cae261e97c6a9e3f3a7
                           .group:0000000000000000 wm4.queue.h.56.a4282b659085ac883e461fc7ab8aecd1
                           .group:0000000000000000 wm4.semphr.h.65.53591bdf1c84eee2eae05897a780c325
                           .group:0000000000000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:0000000000000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:0000000000000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:0000000000000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:0000000000000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:0000000000000000 wm4.math.h.35.13c5bec129ef04ad1bb0a1152b29c624
                           .group:0000000000000000 wm4.stdio.h.27.3fc80220048df77954e38daec3bb9670
                           .group:0000000000000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.80.56707660962b21991903f1fee7c13bb3
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.64.0f05fa42cfe2db7fc44729a52d3ba948
                           .group:0000000000000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.53.1a82a3cc35cb0a04319c41bcf41d2a02

UNDEFINED SYMBOLS
GPIO_SetBits
delay_ms
GPIO_ResetBits
SystemCoreClock
USART_SendData
vTaskDelete
xQueueGenericReceive
xQueueGenericSend
vTaskDelay
xQueueCreateMutex
xTaskGenericCreate
vPortYieldFromISR
GPIO_WriteBit
USART_GetITStatus
RCC_AHB1PeriphClockCmd
RCC_APB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
USART_Init
USART_ITConfig
NVIC_Init
USART_Cmd
TIM_TimeBaseInit
TIM_OC1Init
TIM_OC1PreloadConfig
TIM_OC2Init
TIM_OC2PreloadConfig
TIM_ARRPreloadConfig
TIM_Cmd
init_us_timer
ultrasonic_init
servo_init
servo_set_degrees
vTaskStartScheduler
