   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	ADC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  28              		.loc 1 207 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32 0000 80B5     		push	{r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 00AF     		add	r7, sp, #0
  38              	.LCFI1:
  39              		.cfi_def_cfa_register 7
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  40              		.loc 1 209 0
  41 0004 4FF48070 		mov	r0, #256
  42 0008 0121     		movs	r1, #1
  43 000a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  44              		.loc 1 212 0
  45 000e 4FF48070 		mov	r0, #256
  46 0012 0021     		movs	r1, #0
  47 0014 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  48              		.loc 1 213 0
  49 0018 80BD     		pop	{r7, pc}
  50              		.cfi_endproc
  51              	.LFE110:
  53 001a 00BF     		.section	.text.ADC_Init,"ax",%progbits
  54              		.align	2
  55              		.global	ADC_Init
  56              		.thumb
  57              		.thumb_func
  59              	ADC_Init:
  60              	.LFB111:
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  61              		.loc 1 229 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 16
  64              		@ frame_needed = 1, uses_anonymous_args = 0
  65              		@ link register save eliminated.
  66 0000 80B4     		push	{r7}
  67              	.LCFI2:
  68              		.cfi_def_cfa_offset 4
  69              		.cfi_offset 7, -4
  70 0002 85B0     		sub	sp, sp, #20
  71              	.LCFI3:
  72              		.cfi_def_cfa_offset 24
  73 0004 00AF     		add	r7, sp, #0
  74              	.LCFI4:
  75              		.cfi_def_cfa_register 7
  76 0006 7860     		str	r0, [r7, #4]
  77 0008 3960     		str	r1, [r7]
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  78              		.loc 1 230 0
  79 000a 0023     		movs	r3, #0
  80 000c FB60     		str	r3, [r7, #12]
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  81              		.loc 1 231 0
  82 000e 0023     		movs	r3, #0
  83 0010 FB72     		strb	r3, [r7, #11]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  84              		.loc 1 244 0
  85 0012 7B68     		ldr	r3, [r7, #4]
  86 0014 5B68     		ldr	r3, [r3, #4]
  87 0016 FB60     		str	r3, [r7, #12]
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  88              		.loc 1 247 0
  89 0018 FB68     		ldr	r3, [r7, #12]
  90 001a 23F04073 		bic	r3, r3, #50331648
  91 001e 23F48073 		bic	r3, r3, #256
  92 0022 FB60     		str	r3, [r7, #12]
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  93              		.loc 1 252 0
  94 0024 3B68     		ldr	r3, [r7]
  95 0026 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  96 0028 1A02     		lsls	r2, r3, #8
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  97              		.loc 1 253 0
  98 002a 3B68     		ldr	r3, [r7]
  99 002c 1B68     		ldr	r3, [r3]
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
 100              		.loc 1 252 0
 101 002e 1343     		orrs	r3, r3, r2
 102 0030 FA68     		ldr	r2, [r7, #12]
 103 0032 1343     		orrs	r3, r3, r2
 104 0034 FB60     		str	r3, [r7, #12]
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 105              		.loc 1 255 0
 106 0036 7B68     		ldr	r3, [r7, #4]
 107 0038 FA68     		ldr	r2, [r7, #12]
 108 003a 5A60     		str	r2, [r3, #4]
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 109              		.loc 1 258 0
 110 003c 7B68     		ldr	r3, [r7, #4]
 111 003e 9B68     		ldr	r3, [r3, #8]
 112 0040 FB60     		str	r3, [r7, #12]
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 113              		.loc 1 261 0
 114 0042 FA68     		ldr	r2, [r7, #12]
 115 0044 4FF2FD73 		movw	r3, #63485
 116 0048 CCF2FF03 		movt	r3, 49407
 117 004c 1340     		ands	r3, r3, r2
 118 004e FB60     		str	r3, [r7, #12]
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 119              		.loc 1 269 0
 120 0050 3B68     		ldr	r3, [r7]
 121 0052 1A69     		ldr	r2, [r3, #16]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 122              		.loc 1 270 0
 123 0054 3B68     		ldr	r3, [r7]
 124 0056 DB68     		ldr	r3, [r3, #12]
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 125              		.loc 1 269 0
 126 0058 1A43     		orrs	r2, r2, r3
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 127              		.loc 1 271 0
 128 005a 3B68     		ldr	r3, [r7]
 129 005c 9B68     		ldr	r3, [r3, #8]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 130              		.loc 1 270 0
 131 005e 1A43     		orrs	r2, r2, r3
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 132              		.loc 1 272 0
 133 0060 3B68     		ldr	r3, [r7]
 134 0062 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 135 0064 5B00     		lsls	r3, r3, #1
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 136              		.loc 1 269 0
 137 0066 1343     		orrs	r3, r3, r2
 138 0068 FA68     		ldr	r2, [r7, #12]
 139 006a 1343     		orrs	r3, r3, r2
 140 006c FB60     		str	r3, [r7, #12]
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 141              		.loc 1 275 0
 142 006e 7B68     		ldr	r3, [r7, #4]
 143 0070 FA68     		ldr	r2, [r7, #12]
 144 0072 9A60     		str	r2, [r3, #8]
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 145              		.loc 1 278 0
 146 0074 7B68     		ldr	r3, [r7, #4]
 147 0076 DB6A     		ldr	r3, [r3, #44]
 148 0078 FB60     		str	r3, [r7, #12]
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 149              		.loc 1 281 0
 150 007a FB68     		ldr	r3, [r7, #12]
 151 007c 23F47003 		bic	r3, r3, #15728640
 152 0080 FB60     		str	r3, [r7, #12]
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 153              		.loc 1 285 0
 154 0082 3B68     		ldr	r3, [r7]
 155 0084 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 156 0086 013B     		subs	r3, r3, #1
 157 0088 DAB2     		uxtb	r2, r3
 158 008a FB7A     		ldrb	r3, [r7, #11]
 159 008c 1343     		orrs	r3, r3, r2
 160 008e FB72     		strb	r3, [r7, #11]
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 161              		.loc 1 286 0
 162 0090 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 163 0092 1B05     		lsls	r3, r3, #20
 164 0094 FA68     		ldr	r2, [r7, #12]
 165 0096 1343     		orrs	r3, r3, r2
 166 0098 FB60     		str	r3, [r7, #12]
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 167              		.loc 1 289 0
 168 009a 7B68     		ldr	r3, [r7, #4]
 169 009c FA68     		ldr	r2, [r7, #12]
 170 009e DA62     		str	r2, [r3, #44]
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 171              		.loc 1 290 0
 172 00a0 1437     		adds	r7, r7, #20
 173 00a2 BD46     		mov	sp, r7
 174              		@ sp needed
 175 00a4 5DF8047B 		ldr	r7, [sp], #4
 176 00a8 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE111:
 180 00aa 00BF     		.section	.text.ADC_StructInit,"ax",%progbits
 181              		.align	2
 182              		.global	ADC_StructInit
 183              		.thumb
 184              		.thumb_func
 186              	ADC_StructInit:
 187              	.LFB112:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 188              		.loc 1 304 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 8
 191              		@ frame_needed = 1, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193 0000 80B4     		push	{r7}
 194              	.LCFI5:
 195              		.cfi_def_cfa_offset 4
 196              		.cfi_offset 7, -4
 197 0002 83B0     		sub	sp, sp, #12
 198              	.LCFI6:
 199              		.cfi_def_cfa_offset 16
 200 0004 00AF     		add	r7, sp, #0
 201              	.LCFI7:
 202              		.cfi_def_cfa_register 7
 203 0006 7860     		str	r0, [r7, #4]
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 204              		.loc 1 306 0
 205 0008 7B68     		ldr	r3, [r7, #4]
 206 000a 0022     		movs	r2, #0
 207 000c 1A60     		str	r2, [r3]
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 208              		.loc 1 309 0
 209 000e 7B68     		ldr	r3, [r7, #4]
 210 0010 0022     		movs	r2, #0
 211 0012 1A71     		strb	r2, [r3, #4]
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 212              		.loc 1 312 0
 213 0014 7B68     		ldr	r3, [r7, #4]
 214 0016 0022     		movs	r2, #0
 215 0018 5A71     		strb	r2, [r3, #5]
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 216              		.loc 1 315 0
 217 001a 7B68     		ldr	r3, [r7, #4]
 218 001c 0022     		movs	r2, #0
 219 001e 9A60     		str	r2, [r3, #8]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 220              		.loc 1 318 0
 221 0020 7B68     		ldr	r3, [r7, #4]
 222 0022 0022     		movs	r2, #0
 223 0024 DA60     		str	r2, [r3, #12]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 224              		.loc 1 321 0
 225 0026 7B68     		ldr	r3, [r7, #4]
 226 0028 0022     		movs	r2, #0
 227 002a 1A61     		str	r2, [r3, #16]
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 228              		.loc 1 324 0
 229 002c 7B68     		ldr	r3, [r7, #4]
 230 002e 0122     		movs	r2, #1
 231 0030 1A75     		strb	r2, [r3, #20]
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 232              		.loc 1 325 0
 233 0032 0C37     		adds	r7, r7, #12
 234 0034 BD46     		mov	sp, r7
 235              		@ sp needed
 236 0036 5DF8047B 		ldr	r7, [sp], #4
 237 003a 7047     		bx	lr
 238              		.cfi_endproc
 239              	.LFE112:
 241              		.section	.text.ADC_CommonInit,"ax",%progbits
 242              		.align	2
 243              		.global	ADC_CommonInit
 244              		.thumb
 245              		.thumb_func
 247              	ADC_CommonInit:
 248              	.LFB113:
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 249              		.loc 1 335 0
 250              		.cfi_startproc
 251              		@ args = 0, pretend = 0, frame = 16
 252              		@ frame_needed = 1, uses_anonymous_args = 0
 253              		@ link register save eliminated.
 254 0000 80B4     		push	{r7}
 255              	.LCFI8:
 256              		.cfi_def_cfa_offset 4
 257              		.cfi_offset 7, -4
 258 0002 85B0     		sub	sp, sp, #20
 259              	.LCFI9:
 260              		.cfi_def_cfa_offset 24
 261 0004 00AF     		add	r7, sp, #0
 262              	.LCFI10:
 263              		.cfi_def_cfa_register 7
 264 0006 7860     		str	r0, [r7, #4]
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 265              		.loc 1 336 0
 266 0008 0023     		movs	r3, #0
 267 000a FB60     		str	r3, [r7, #12]
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 268              		.loc 1 344 0
 269 000c 4FF40C53 		mov	r3, #8960
 270 0010 C4F20103 		movt	r3, 16385
 271 0014 5B68     		ldr	r3, [r3, #4]
 272 0016 FB60     		str	r3, [r7, #12]
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 273              		.loc 1 347 0
 274 0018 FA68     		ldr	r2, [r7, #12]
 275 001a 43F2E003 		movw	r3, #12512
 276 001e CFF6FC73 		movt	r3, 65532
 277 0022 1340     		ands	r3, r3, r2
 278 0024 FB60     		str	r3, [r7, #12]
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 279              		.loc 1 355 0
 280 0026 7B68     		ldr	r3, [r7, #4]
 281 0028 1A68     		ldr	r2, [r3]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 282              		.loc 1 356 0
 283 002a 7B68     		ldr	r3, [r7, #4]
 284 002c 5B68     		ldr	r3, [r3, #4]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 285              		.loc 1 355 0
 286 002e 1A43     		orrs	r2, r2, r3
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 287              		.loc 1 357 0
 288 0030 7B68     		ldr	r3, [r7, #4]
 289 0032 9B68     		ldr	r3, [r3, #8]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 290              		.loc 1 356 0
 291 0034 1A43     		orrs	r2, r2, r3
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 292              		.loc 1 358 0
 293 0036 7B68     		ldr	r3, [r7, #4]
 294 0038 DB68     		ldr	r3, [r3, #12]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 295              		.loc 1 355 0
 296 003a 1343     		orrs	r3, r3, r2
 297 003c FA68     		ldr	r2, [r7, #12]
 298 003e 1343     		orrs	r3, r3, r2
 299 0040 FB60     		str	r3, [r7, #12]
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 300              		.loc 1 361 0
 301 0042 4FF40C53 		mov	r3, #8960
 302 0046 C4F20103 		movt	r3, 16385
 303 004a FA68     		ldr	r2, [r7, #12]
 304 004c 5A60     		str	r2, [r3, #4]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 305              		.loc 1 362 0
 306 004e 1437     		adds	r7, r7, #20
 307 0050 BD46     		mov	sp, r7
 308              		@ sp needed
 309 0052 5DF8047B 		ldr	r7, [sp], #4
 310 0056 7047     		bx	lr
 311              		.cfi_endproc
 312              	.LFE113:
 314              		.section	.text.ADC_CommonStructInit,"ax",%progbits
 315              		.align	2
 316              		.global	ADC_CommonStructInit
 317              		.thumb
 318              		.thumb_func
 320              	ADC_CommonStructInit:
 321              	.LFB114:
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 322              		.loc 1 371 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 8
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 0000 80B4     		push	{r7}
 328              	.LCFI11:
 329              		.cfi_def_cfa_offset 4
 330              		.cfi_offset 7, -4
 331 0002 83B0     		sub	sp, sp, #12
 332              	.LCFI12:
 333              		.cfi_def_cfa_offset 16
 334 0004 00AF     		add	r7, sp, #0
 335              	.LCFI13:
 336              		.cfi_def_cfa_register 7
 337 0006 7860     		str	r0, [r7, #4]
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 338              		.loc 1 373 0
 339 0008 7B68     		ldr	r3, [r7, #4]
 340 000a 0022     		movs	r2, #0
 341 000c 1A60     		str	r2, [r3]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 342              		.loc 1 376 0
 343 000e 7B68     		ldr	r3, [r7, #4]
 344 0010 0022     		movs	r2, #0
 345 0012 5A60     		str	r2, [r3, #4]
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 346              		.loc 1 379 0
 347 0014 7B68     		ldr	r3, [r7, #4]
 348 0016 0022     		movs	r2, #0
 349 0018 9A60     		str	r2, [r3, #8]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 350              		.loc 1 382 0
 351 001a 7B68     		ldr	r3, [r7, #4]
 352 001c 0022     		movs	r2, #0
 353 001e DA60     		str	r2, [r3, #12]
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 354              		.loc 1 383 0
 355 0020 0C37     		adds	r7, r7, #12
 356 0022 BD46     		mov	sp, r7
 357              		@ sp needed
 358 0024 5DF8047B 		ldr	r7, [sp], #4
 359 0028 7047     		bx	lr
 360              		.cfi_endproc
 361              	.LFE114:
 363 002a 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 364              		.align	2
 365              		.global	ADC_Cmd
 366              		.thumb
 367              		.thumb_func
 369              	ADC_Cmd:
 370              	.LFB115:
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 371              		.loc 1 393 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 8
 374              		@ frame_needed = 1, uses_anonymous_args = 0
 375              		@ link register save eliminated.
 376 0000 80B4     		push	{r7}
 377              	.LCFI14:
 378              		.cfi_def_cfa_offset 4
 379              		.cfi_offset 7, -4
 380 0002 83B0     		sub	sp, sp, #12
 381              	.LCFI15:
 382              		.cfi_def_cfa_offset 16
 383 0004 00AF     		add	r7, sp, #0
 384              	.LCFI16:
 385              		.cfi_def_cfa_register 7
 386 0006 7860     		str	r0, [r7, #4]
 387 0008 0B46     		mov	r3, r1
 388 000a FB70     		strb	r3, [r7, #3]
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 389              		.loc 1 397 0
 390 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 391 000e 002B     		cmp	r3, #0
 392 0010 06D0     		beq	.L7
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 393              		.loc 1 400 0
 394 0012 7B68     		ldr	r3, [r7, #4]
 395 0014 9B68     		ldr	r3, [r3, #8]
 396 0016 43F00102 		orr	r2, r3, #1
 397 001a 7B68     		ldr	r3, [r7, #4]
 398 001c 9A60     		str	r2, [r3, #8]
 399 001e 05E0     		b	.L6
 400              	.L7:
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 401              		.loc 1 405 0
 402 0020 7B68     		ldr	r3, [r7, #4]
 403 0022 9B68     		ldr	r3, [r3, #8]
 404 0024 23F00102 		bic	r2, r3, #1
 405 0028 7B68     		ldr	r3, [r7, #4]
 406 002a 9A60     		str	r2, [r3, #8]
 407              	.L6:
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 408              		.loc 1 407 0
 409 002c 0C37     		adds	r7, r7, #12
 410 002e BD46     		mov	sp, r7
 411              		@ sp needed
 412 0030 5DF8047B 		ldr	r7, [sp], #4
 413 0034 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE115:
 417 0036 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 418              		.align	2
 419              		.global	ADC_AnalogWatchdogCmd
 420              		.thumb
 421              		.thumb_func
 423              	ADC_AnalogWatchdogCmd:
 424              	.LFB116:
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 425              		.loc 1 451 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 16
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429              		@ link register save eliminated.
 430 0000 80B4     		push	{r7}
 431              	.LCFI17:
 432              		.cfi_def_cfa_offset 4
 433              		.cfi_offset 7, -4
 434 0002 85B0     		sub	sp, sp, #20
 435              	.LCFI18:
 436              		.cfi_def_cfa_offset 24
 437 0004 00AF     		add	r7, sp, #0
 438              	.LCFI19:
 439              		.cfi_def_cfa_register 7
 440 0006 7860     		str	r0, [r7, #4]
 441 0008 3960     		str	r1, [r7]
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 442              		.loc 1 452 0
 443 000a 0023     		movs	r3, #0
 444 000c FB60     		str	r3, [r7, #12]
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 445              		.loc 1 458 0
 446 000e 7B68     		ldr	r3, [r7, #4]
 447 0010 5B68     		ldr	r3, [r3, #4]
 448 0012 FB60     		str	r3, [r7, #12]
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 449              		.loc 1 461 0
 450 0014 FB68     		ldr	r3, [r7, #12]
 451 0016 23F44003 		bic	r3, r3, #12582912
 452 001a 23F40073 		bic	r3, r3, #512
 453 001e FB60     		str	r3, [r7, #12]
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 454              		.loc 1 464 0
 455 0020 FA68     		ldr	r2, [r7, #12]
 456 0022 3B68     		ldr	r3, [r7]
 457 0024 1343     		orrs	r3, r3, r2
 458 0026 FB60     		str	r3, [r7, #12]
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 459              		.loc 1 467 0
 460 0028 7B68     		ldr	r3, [r7, #4]
 461 002a FA68     		ldr	r2, [r7, #12]
 462 002c 5A60     		str	r2, [r3, #4]
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 463              		.loc 1 468 0
 464 002e 1437     		adds	r7, r7, #20
 465 0030 BD46     		mov	sp, r7
 466              		@ sp needed
 467 0032 5DF8047B 		ldr	r7, [sp], #4
 468 0036 7047     		bx	lr
 469              		.cfi_endproc
 470              	.LFE116:
 472              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 473              		.align	2
 474              		.global	ADC_AnalogWatchdogThresholdsConfig
 475              		.thumb
 476              		.thumb_func
 478              	ADC_AnalogWatchdogThresholdsConfig:
 479              	.LFB117:
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 480              		.loc 1 481 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 8
 483              		@ frame_needed = 1, uses_anonymous_args = 0
 484              		@ link register save eliminated.
 485 0000 80B4     		push	{r7}
 486              	.LCFI20:
 487              		.cfi_def_cfa_offset 4
 488              		.cfi_offset 7, -4
 489 0002 83B0     		sub	sp, sp, #12
 490              	.LCFI21:
 491              		.cfi_def_cfa_offset 16
 492 0004 00AF     		add	r7, sp, #0
 493              	.LCFI22:
 494              		.cfi_def_cfa_register 7
 495 0006 7860     		str	r0, [r7, #4]
 496 0008 1346     		mov	r3, r2
 497 000a 0A46     		mov	r2, r1	@ movhi
 498 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 499 000e 3B80     		strh	r3, [r7]	@ movhi
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 500              		.loc 1 488 0
 501 0010 7A88     		ldrh	r2, [r7, #2]
 502 0012 7B68     		ldr	r3, [r7, #4]
 503 0014 5A62     		str	r2, [r3, #36]
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 504              		.loc 1 491 0
 505 0016 3A88     		ldrh	r2, [r7]
 506 0018 7B68     		ldr	r3, [r7, #4]
 507 001a 9A62     		str	r2, [r3, #40]
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 508              		.loc 1 492 0
 509 001c 0C37     		adds	r7, r7, #12
 510 001e BD46     		mov	sp, r7
 511              		@ sp needed
 512 0020 5DF8047B 		ldr	r7, [sp], #4
 513 0024 7047     		bx	lr
 514              		.cfi_endproc
 515              	.LFE117:
 517 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 518              		.align	2
 519              		.global	ADC_AnalogWatchdogSingleChannelConfig
 520              		.thumb
 521              		.thumb_func
 523              	ADC_AnalogWatchdogSingleChannelConfig:
 524              	.LFB118:
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 525              		.loc 1 521 0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 16
 528              		@ frame_needed = 1, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 530 0000 80B4     		push	{r7}
 531              	.LCFI23:
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 7, -4
 534 0002 85B0     		sub	sp, sp, #20
 535              	.LCFI24:
 536              		.cfi_def_cfa_offset 24
 537 0004 00AF     		add	r7, sp, #0
 538              	.LCFI25:
 539              		.cfi_def_cfa_register 7
 540 0006 7860     		str	r0, [r7, #4]
 541 0008 0B46     		mov	r3, r1
 542 000a FB70     		strb	r3, [r7, #3]
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 543              		.loc 1 522 0
 544 000c 0023     		movs	r3, #0
 545 000e FB60     		str	r3, [r7, #12]
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 546              		.loc 1 528 0
 547 0010 7B68     		ldr	r3, [r7, #4]
 548 0012 5B68     		ldr	r3, [r3, #4]
 549 0014 FB60     		str	r3, [r7, #12]
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 550              		.loc 1 531 0
 551 0016 FB68     		ldr	r3, [r7, #12]
 552 0018 23F01F03 		bic	r3, r3, #31
 553 001c FB60     		str	r3, [r7, #12]
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 554              		.loc 1 534 0
 555 001e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 556 0020 FA68     		ldr	r2, [r7, #12]
 557 0022 1343     		orrs	r3, r3, r2
 558 0024 FB60     		str	r3, [r7, #12]
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 559              		.loc 1 537 0
 560 0026 7B68     		ldr	r3, [r7, #4]
 561 0028 FA68     		ldr	r2, [r7, #12]
 562 002a 5A60     		str	r2, [r3, #4]
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 563              		.loc 1 538 0
 564 002c 1437     		adds	r7, r7, #20
 565 002e BD46     		mov	sp, r7
 566              		@ sp needed
 567 0030 5DF8047B 		ldr	r7, [sp], #4
 568 0034 7047     		bx	lr
 569              		.cfi_endproc
 570              	.LFE118:
 572 0036 00BF     		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 573              		.align	2
 574              		.global	ADC_TempSensorVrefintCmd
 575              		.thumb
 576              		.thumb_func
 578              	ADC_TempSensorVrefintCmd:
 579              	.LFB119:
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 580              		.loc 1 586 0
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 8
 583              		@ frame_needed = 1, uses_anonymous_args = 0
 584              		@ link register save eliminated.
 585 0000 80B4     		push	{r7}
 586              	.LCFI26:
 587              		.cfi_def_cfa_offset 4
 588              		.cfi_offset 7, -4
 589 0002 83B0     		sub	sp, sp, #12
 590              	.LCFI27:
 591              		.cfi_def_cfa_offset 16
 592 0004 00AF     		add	r7, sp, #0
 593              	.LCFI28:
 594              		.cfi_def_cfa_register 7
 595 0006 0346     		mov	r3, r0
 596 0008 FB71     		strb	r3, [r7, #7]
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 597              		.loc 1 589 0
 598 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 599 000c 002B     		cmp	r3, #0
 600 000e 0CD0     		beq	.L13
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 601              		.loc 1 592 0
 602 0010 4FF40C53 		mov	r3, #8960
 603 0014 C4F20103 		movt	r3, 16385
 604 0018 4FF40C52 		mov	r2, #8960
 605 001c C4F20102 		movt	r2, 16385
 606 0020 5268     		ldr	r2, [r2, #4]
 607 0022 42F40002 		orr	r2, r2, #8388608
 608 0026 5A60     		str	r2, [r3, #4]
 609 0028 0BE0     		b	.L12
 610              	.L13:
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 611              		.loc 1 597 0
 612 002a 4FF40C53 		mov	r3, #8960
 613 002e C4F20103 		movt	r3, 16385
 614 0032 4FF40C52 		mov	r2, #8960
 615 0036 C4F20102 		movt	r2, 16385
 616 003a 5268     		ldr	r2, [r2, #4]
 617 003c 22F40002 		bic	r2, r2, #8388608
 618 0040 5A60     		str	r2, [r3, #4]
 619              	.L12:
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 620              		.loc 1 599 0
 621 0042 0C37     		adds	r7, r7, #12
 622 0044 BD46     		mov	sp, r7
 623              		@ sp needed
 624 0046 5DF8047B 		ldr	r7, [sp], #4
 625 004a 7047     		bx	lr
 626              		.cfi_endproc
 627              	.LFE119:
 629              		.section	.text.ADC_VBATCmd,"ax",%progbits
 630              		.align	2
 631              		.global	ADC_VBATCmd
 632              		.thumb
 633              		.thumb_func
 635              	ADC_VBATCmd:
 636              	.LFB120:
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 637              		.loc 1 608 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 8
 640              		@ frame_needed = 1, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 642 0000 80B4     		push	{r7}
 643              	.LCFI29:
 644              		.cfi_def_cfa_offset 4
 645              		.cfi_offset 7, -4
 646 0002 83B0     		sub	sp, sp, #12
 647              	.LCFI30:
 648              		.cfi_def_cfa_offset 16
 649 0004 00AF     		add	r7, sp, #0
 650              	.LCFI31:
 651              		.cfi_def_cfa_register 7
 652 0006 0346     		mov	r3, r0
 653 0008 FB71     		strb	r3, [r7, #7]
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 654              		.loc 1 611 0
 655 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 656 000c 002B     		cmp	r3, #0
 657 000e 0CD0     		beq	.L16
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 658              		.loc 1 614 0
 659 0010 4FF40C53 		mov	r3, #8960
 660 0014 C4F20103 		movt	r3, 16385
 661 0018 4FF40C52 		mov	r2, #8960
 662 001c C4F20102 		movt	r2, 16385
 663 0020 5268     		ldr	r2, [r2, #4]
 664 0022 42F48002 		orr	r2, r2, #4194304
 665 0026 5A60     		str	r2, [r3, #4]
 666 0028 0BE0     		b	.L15
 667              	.L16:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 668              		.loc 1 619 0
 669 002a 4FF40C53 		mov	r3, #8960
 670 002e C4F20103 		movt	r3, 16385
 671 0032 4FF40C52 		mov	r2, #8960
 672 0036 C4F20102 		movt	r2, 16385
 673 003a 5268     		ldr	r2, [r2, #4]
 674 003c 22F48002 		bic	r2, r2, #4194304
 675 0040 5A60     		str	r2, [r3, #4]
 676              	.L15:
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 677              		.loc 1 621 0
 678 0042 0C37     		adds	r7, r7, #12
 679 0044 BD46     		mov	sp, r7
 680              		@ sp needed
 681 0046 5DF8047B 		ldr	r7, [sp], #4
 682 004a 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE120:
 686              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 687              		.align	2
 688              		.global	ADC_RegularChannelConfig
 689              		.thumb
 690              		.thumb_func
 692              	ADC_RegularChannelConfig:
 693              	.LFB121:
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 694              		.loc 1 709 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 16
 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 699 0000 80B4     		push	{r7}
 700              	.LCFI32:
 701              		.cfi_def_cfa_offset 4
 702              		.cfi_offset 7, -4
 703 0002 85B0     		sub	sp, sp, #20
 704              	.LCFI33:
 705              		.cfi_def_cfa_offset 24
 706 0004 00AF     		add	r7, sp, #0
 707              	.LCFI34:
 708              		.cfi_def_cfa_register 7
 709 0006 7860     		str	r0, [r7, #4]
 710 0008 F970     		strb	r1, [r7, #3]
 711 000a BA70     		strb	r2, [r7, #2]
 712 000c 7B70     		strb	r3, [r7, #1]
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 713              		.loc 1 710 0
 714 000e 0023     		movs	r3, #0
 715 0010 FB60     		str	r3, [r7, #12]
 716 0012 0023     		movs	r3, #0
 717 0014 BB60     		str	r3, [r7, #8]
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 718              		.loc 1 718 0
 719 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 720 0018 092B     		cmp	r3, #9
 721 001a 23D9     		bls	.L19
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 722              		.loc 1 721 0
 723 001c 7B68     		ldr	r3, [r7, #4]
 724 001e DB68     		ldr	r3, [r3, #12]
 725 0020 FB60     		str	r3, [r7, #12]
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 726              		.loc 1 724 0
 727 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 728 0024 A3F10A02 		sub	r2, r3, #10
 729 0028 1346     		mov	r3, r2
 730 002a 5B00     		lsls	r3, r3, #1
 731 002c 1344     		add	r3, r3, r2
 732 002e 0722     		movs	r2, #7
 733 0030 02FA03F3 		lsl	r3, r2, r3
 734 0034 BB60     		str	r3, [r7, #8]
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 735              		.loc 1 727 0
 736 0036 BB68     		ldr	r3, [r7, #8]
 737 0038 DB43     		mvns	r3, r3
 738 003a FA68     		ldr	r2, [r7, #12]
 739 003c 1340     		ands	r3, r3, r2
 740 003e FB60     		str	r3, [r7, #12]
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 741              		.loc 1 730 0
 742 0040 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 743 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 744 0044 A3F10A02 		sub	r2, r3, #10
 745 0048 1346     		mov	r3, r2
 746 004a 5B00     		lsls	r3, r3, #1
 747 004c 1344     		add	r3, r3, r2
 748 004e 01FA03F3 		lsl	r3, r1, r3
 749 0052 BB60     		str	r3, [r7, #8]
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 750              		.loc 1 733 0
 751 0054 FA68     		ldr	r2, [r7, #12]
 752 0056 BB68     		ldr	r3, [r7, #8]
 753 0058 1343     		orrs	r3, r3, r2
 754 005a FB60     		str	r3, [r7, #12]
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 755              		.loc 1 736 0
 756 005c 7B68     		ldr	r3, [r7, #4]
 757 005e FA68     		ldr	r2, [r7, #12]
 758 0060 DA60     		str	r2, [r3, #12]
 759 0062 1EE0     		b	.L20
 760              	.L19:
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 761              		.loc 1 741 0
 762 0064 7B68     		ldr	r3, [r7, #4]
 763 0066 1B69     		ldr	r3, [r3, #16]
 764 0068 FB60     		str	r3, [r7, #12]
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 765              		.loc 1 744 0
 766 006a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 767 006c 1346     		mov	r3, r2
 768 006e 5B00     		lsls	r3, r3, #1
 769 0070 1344     		add	r3, r3, r2
 770 0072 0722     		movs	r2, #7
 771 0074 02FA03F3 		lsl	r3, r2, r3
 772 0078 BB60     		str	r3, [r7, #8]
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 773              		.loc 1 747 0
 774 007a BB68     		ldr	r3, [r7, #8]
 775 007c DB43     		mvns	r3, r3
 776 007e FA68     		ldr	r2, [r7, #12]
 777 0080 1340     		ands	r3, r3, r2
 778 0082 FB60     		str	r3, [r7, #12]
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 779              		.loc 1 750 0
 780 0084 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 781 0086 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 782 0088 1346     		mov	r3, r2
 783 008a 5B00     		lsls	r3, r3, #1
 784 008c 1344     		add	r3, r3, r2
 785 008e 01FA03F3 		lsl	r3, r1, r3
 786 0092 BB60     		str	r3, [r7, #8]
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 787              		.loc 1 753 0
 788 0094 FA68     		ldr	r2, [r7, #12]
 789 0096 BB68     		ldr	r3, [r7, #8]
 790 0098 1343     		orrs	r3, r3, r2
 791 009a FB60     		str	r3, [r7, #12]
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 792              		.loc 1 756 0
 793 009c 7B68     		ldr	r3, [r7, #4]
 794 009e FA68     		ldr	r2, [r7, #12]
 795 00a0 1A61     		str	r2, [r3, #16]
 796              	.L20:
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 797              		.loc 1 759 0
 798 00a2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 799 00a4 062B     		cmp	r3, #6
 800 00a6 21D8     		bhi	.L21
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 801              		.loc 1 762 0
 802 00a8 7B68     		ldr	r3, [r7, #4]
 803 00aa 5B6B     		ldr	r3, [r3, #52]
 804 00ac FB60     		str	r3, [r7, #12]
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 805              		.loc 1 765 0
 806 00ae BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 807 00b0 5A1E     		subs	r2, r3, #1
 808 00b2 1346     		mov	r3, r2
 809 00b4 9B00     		lsls	r3, r3, #2
 810 00b6 1344     		add	r3, r3, r2
 811 00b8 1F22     		movs	r2, #31
 812 00ba 02FA03F3 		lsl	r3, r2, r3
 813 00be BB60     		str	r3, [r7, #8]
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 814              		.loc 1 768 0
 815 00c0 BB68     		ldr	r3, [r7, #8]
 816 00c2 DB43     		mvns	r3, r3
 817 00c4 FA68     		ldr	r2, [r7, #12]
 818 00c6 1340     		ands	r3, r3, r2
 819 00c8 FB60     		str	r3, [r7, #12]
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 820              		.loc 1 771 0
 821 00ca F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 822 00cc BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 823 00ce 5A1E     		subs	r2, r3, #1
 824 00d0 1346     		mov	r3, r2
 825 00d2 9B00     		lsls	r3, r3, #2
 826 00d4 1344     		add	r3, r3, r2
 827 00d6 01FA03F3 		lsl	r3, r1, r3
 828 00da BB60     		str	r3, [r7, #8]
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 829              		.loc 1 774 0
 830 00dc FA68     		ldr	r2, [r7, #12]
 831 00de BB68     		ldr	r3, [r7, #8]
 832 00e0 1343     		orrs	r3, r3, r2
 833 00e2 FB60     		str	r3, [r7, #12]
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 834              		.loc 1 777 0
 835 00e4 7B68     		ldr	r3, [r7, #4]
 836 00e6 FA68     		ldr	r2, [r7, #12]
 837 00e8 5A63     		str	r2, [r3, #52]
 838 00ea 47E0     		b	.L18
 839              	.L21:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 840              		.loc 1 780 0
 841 00ec BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 842 00ee 0C2B     		cmp	r3, #12
 843 00f0 21D8     		bhi	.L23
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 844              		.loc 1 783 0
 845 00f2 7B68     		ldr	r3, [r7, #4]
 846 00f4 1B6B     		ldr	r3, [r3, #48]
 847 00f6 FB60     		str	r3, [r7, #12]
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 848              		.loc 1 786 0
 849 00f8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 850 00fa DA1F     		subs	r2, r3, #7
 851 00fc 1346     		mov	r3, r2
 852 00fe 9B00     		lsls	r3, r3, #2
 853 0100 1344     		add	r3, r3, r2
 854 0102 1F22     		movs	r2, #31
 855 0104 02FA03F3 		lsl	r3, r2, r3
 856 0108 BB60     		str	r3, [r7, #8]
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 857              		.loc 1 789 0
 858 010a BB68     		ldr	r3, [r7, #8]
 859 010c DB43     		mvns	r3, r3
 860 010e FA68     		ldr	r2, [r7, #12]
 861 0110 1340     		ands	r3, r3, r2
 862 0112 FB60     		str	r3, [r7, #12]
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 863              		.loc 1 792 0
 864 0114 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 865 0116 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 866 0118 DA1F     		subs	r2, r3, #7
 867 011a 1346     		mov	r3, r2
 868 011c 9B00     		lsls	r3, r3, #2
 869 011e 1344     		add	r3, r3, r2
 870 0120 01FA03F3 		lsl	r3, r1, r3
 871 0124 BB60     		str	r3, [r7, #8]
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 872              		.loc 1 795 0
 873 0126 FA68     		ldr	r2, [r7, #12]
 874 0128 BB68     		ldr	r3, [r7, #8]
 875 012a 1343     		orrs	r3, r3, r2
 876 012c FB60     		str	r3, [r7, #12]
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 877              		.loc 1 798 0
 878 012e 7B68     		ldr	r3, [r7, #4]
 879 0130 FA68     		ldr	r2, [r7, #12]
 880 0132 1A63     		str	r2, [r3, #48]
 881 0134 22E0     		b	.L18
 882              	.L23:
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 883              		.loc 1 804 0
 884 0136 7B68     		ldr	r3, [r7, #4]
 885 0138 DB6A     		ldr	r3, [r3, #44]
 886 013a FB60     		str	r3, [r7, #12]
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 887              		.loc 1 807 0
 888 013c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 889 013e A3F10D02 		sub	r2, r3, #13
 890 0142 1346     		mov	r3, r2
 891 0144 9B00     		lsls	r3, r3, #2
 892 0146 1344     		add	r3, r3, r2
 893 0148 1F22     		movs	r2, #31
 894 014a 02FA03F3 		lsl	r3, r2, r3
 895 014e BB60     		str	r3, [r7, #8]
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 896              		.loc 1 810 0
 897 0150 BB68     		ldr	r3, [r7, #8]
 898 0152 DB43     		mvns	r3, r3
 899 0154 FA68     		ldr	r2, [r7, #12]
 900 0156 1340     		ands	r3, r3, r2
 901 0158 FB60     		str	r3, [r7, #12]
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 902              		.loc 1 813 0
 903 015a F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 904 015c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 905 015e A3F10D02 		sub	r2, r3, #13
 906 0162 1346     		mov	r3, r2
 907 0164 9B00     		lsls	r3, r3, #2
 908 0166 1344     		add	r3, r3, r2
 909 0168 01FA03F3 		lsl	r3, r1, r3
 910 016c BB60     		str	r3, [r7, #8]
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 911              		.loc 1 816 0
 912 016e FA68     		ldr	r2, [r7, #12]
 913 0170 BB68     		ldr	r3, [r7, #8]
 914 0172 1343     		orrs	r3, r3, r2
 915 0174 FB60     		str	r3, [r7, #12]
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 916              		.loc 1 819 0
 917 0176 7B68     		ldr	r3, [r7, #4]
 918 0178 FA68     		ldr	r2, [r7, #12]
 919 017a DA62     		str	r2, [r3, #44]
 920              	.L18:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 921              		.loc 1 821 0
 922 017c 1437     		adds	r7, r7, #20
 923 017e BD46     		mov	sp, r7
 924              		@ sp needed
 925 0180 5DF8047B 		ldr	r7, [sp], #4
 926 0184 7047     		bx	lr
 927              		.cfi_endproc
 928              	.LFE121:
 930 0186 00BF     		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 931              		.align	2
 932              		.global	ADC_SoftwareStartConv
 933              		.thumb
 934              		.thumb_func
 936              	ADC_SoftwareStartConv:
 937              	.LFB122:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 938              		.loc 1 829 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 8
 941              		@ frame_needed = 1, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943 0000 80B4     		push	{r7}
 944              	.LCFI35:
 945              		.cfi_def_cfa_offset 4
 946              		.cfi_offset 7, -4
 947 0002 83B0     		sub	sp, sp, #12
 948              	.LCFI36:
 949              		.cfi_def_cfa_offset 16
 950 0004 00AF     		add	r7, sp, #0
 951              	.LCFI37:
 952              		.cfi_def_cfa_register 7
 953 0006 7860     		str	r0, [r7, #4]
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 954              		.loc 1 834 0
 955 0008 7B68     		ldr	r3, [r7, #4]
 956 000a 9B68     		ldr	r3, [r3, #8]
 957 000c 43F08042 		orr	r2, r3, #1073741824
 958 0010 7B68     		ldr	r3, [r7, #4]
 959 0012 9A60     		str	r2, [r3, #8]
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 960              		.loc 1 835 0
 961 0014 0C37     		adds	r7, r7, #12
 962 0016 BD46     		mov	sp, r7
 963              		@ sp needed
 964 0018 5DF8047B 		ldr	r7, [sp], #4
 965 001c 7047     		bx	lr
 966              		.cfi_endproc
 967              	.LFE122:
 969 001e 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 970              		.align	2
 971              		.global	ADC_GetSoftwareStartConvStatus
 972              		.thumb
 973              		.thumb_func
 975              	ADC_GetSoftwareStartConvStatus:
 976              	.LFB123:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 977              		.loc 1 843 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 16
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981              		@ link register save eliminated.
 982 0000 80B4     		push	{r7}
 983              	.LCFI38:
 984              		.cfi_def_cfa_offset 4
 985              		.cfi_offset 7, -4
 986 0002 85B0     		sub	sp, sp, #20
 987              	.LCFI39:
 988              		.cfi_def_cfa_offset 24
 989 0004 00AF     		add	r7, sp, #0
 990              	.LCFI40:
 991              		.cfi_def_cfa_register 7
 992 0006 7860     		str	r0, [r7, #4]
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 993              		.loc 1 844 0
 994 0008 0023     		movs	r3, #0
 995 000a FB73     		strb	r3, [r7, #15]
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 996              		.loc 1 849 0
 997 000c 7B68     		ldr	r3, [r7, #4]
 998 000e 9B68     		ldr	r3, [r3, #8]
 999 0010 03F48003 		and	r3, r3, #4194304
 1000 0014 002B     		cmp	r3, #0
 1001 0016 02D0     		beq	.L26
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1002              		.loc 1 852 0
 1003 0018 0123     		movs	r3, #1
 1004 001a FB73     		strb	r3, [r7, #15]
 1005 001c 01E0     		b	.L27
 1006              	.L26:
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1007              		.loc 1 857 0
 1008 001e 0023     		movs	r3, #0
 1009 0020 FB73     		strb	r3, [r7, #15]
 1010              	.L27:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1011              		.loc 1 861 0
 1012 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1013              		.loc 1 862 0
 1014 0024 1846     		mov	r0, r3
 1015 0026 1437     		adds	r7, r7, #20
 1016 0028 BD46     		mov	sp, r7
 1017              		@ sp needed
 1018 002a 5DF8047B 		ldr	r7, [sp], #4
 1019 002e 7047     		bx	lr
 1020              		.cfi_endproc
 1021              	.LFE123:
 1023              		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 1024              		.align	2
 1025              		.global	ADC_EOCOnEachRegularChannelCmd
 1026              		.thumb
 1027              		.thumb_func
 1029              	ADC_EOCOnEachRegularChannelCmd:
 1030              	.LFB124:
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1031              		.loc 1 873 0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 8
 1034              		@ frame_needed = 1, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
 1036 0000 80B4     		push	{r7}
 1037              	.LCFI41:
 1038              		.cfi_def_cfa_offset 4
 1039              		.cfi_offset 7, -4
 1040 0002 83B0     		sub	sp, sp, #12
 1041              	.LCFI42:
 1042              		.cfi_def_cfa_offset 16
 1043 0004 00AF     		add	r7, sp, #0
 1044              	.LCFI43:
 1045              		.cfi_def_cfa_register 7
 1046 0006 7860     		str	r0, [r7, #4]
 1047 0008 0B46     		mov	r3, r1
 1048 000a FB70     		strb	r3, [r7, #3]
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1049              		.loc 1 878 0
 1050 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1051 000e 002B     		cmp	r3, #0
 1052 0010 06D0     		beq	.L30
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1053              		.loc 1 881 0
 1054 0012 7B68     		ldr	r3, [r7, #4]
 1055 0014 9B68     		ldr	r3, [r3, #8]
 1056 0016 43F48062 		orr	r2, r3, #1024
 1057 001a 7B68     		ldr	r3, [r7, #4]
 1058 001c 9A60     		str	r2, [r3, #8]
 1059 001e 05E0     		b	.L29
 1060              	.L30:
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 1061              		.loc 1 886 0
 1062 0020 7B68     		ldr	r3, [r7, #4]
 1063 0022 9B68     		ldr	r3, [r3, #8]
 1064 0024 23F48062 		bic	r2, r3, #1024
 1065 0028 7B68     		ldr	r3, [r7, #4]
 1066 002a 9A60     		str	r2, [r3, #8]
 1067              	.L29:
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1068              		.loc 1 888 0
 1069 002c 0C37     		adds	r7, r7, #12
 1070 002e BD46     		mov	sp, r7
 1071              		@ sp needed
 1072 0030 5DF8047B 		ldr	r7, [sp], #4
 1073 0034 7047     		bx	lr
 1074              		.cfi_endproc
 1075              	.LFE124:
 1077 0036 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 1078              		.align	2
 1079              		.global	ADC_ContinuousModeCmd
 1080              		.thumb
 1081              		.thumb_func
 1083              	ADC_ContinuousModeCmd:
 1084              	.LFB125:
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1085              		.loc 1 898 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 8
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 1090 0000 80B4     		push	{r7}
 1091              	.LCFI44:
 1092              		.cfi_def_cfa_offset 4
 1093              		.cfi_offset 7, -4
 1094 0002 83B0     		sub	sp, sp, #12
 1095              	.LCFI45:
 1096              		.cfi_def_cfa_offset 16
 1097 0004 00AF     		add	r7, sp, #0
 1098              	.LCFI46:
 1099              		.cfi_def_cfa_register 7
 1100 0006 7860     		str	r0, [r7, #4]
 1101 0008 0B46     		mov	r3, r1
 1102 000a FB70     		strb	r3, [r7, #3]
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1103              		.loc 1 903 0
 1104 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1105 000e 002B     		cmp	r3, #0
 1106 0010 06D0     		beq	.L33
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1107              		.loc 1 906 0
 1108 0012 7B68     		ldr	r3, [r7, #4]
 1109 0014 9B68     		ldr	r3, [r3, #8]
 1110 0016 43F00202 		orr	r2, r3, #2
 1111 001a 7B68     		ldr	r3, [r7, #4]
 1112 001c 9A60     		str	r2, [r3, #8]
 1113 001e 05E0     		b	.L32
 1114              	.L33:
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 1115              		.loc 1 911 0
 1116 0020 7B68     		ldr	r3, [r7, #4]
 1117 0022 9B68     		ldr	r3, [r3, #8]
 1118 0024 23F00202 		bic	r2, r3, #2
 1119 0028 7B68     		ldr	r3, [r7, #4]
 1120 002a 9A60     		str	r2, [r3, #8]
 1121              	.L32:
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1122              		.loc 1 913 0
 1123 002c 0C37     		adds	r7, r7, #12
 1124 002e BD46     		mov	sp, r7
 1125              		@ sp needed
 1126 0030 5DF8047B 		ldr	r7, [sp], #4
 1127 0034 7047     		bx	lr
 1128              		.cfi_endproc
 1129              	.LFE125:
 1131 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 1132              		.align	2
 1133              		.global	ADC_DiscModeChannelCountConfig
 1134              		.thumb
 1135              		.thumb_func
 1137              	ADC_DiscModeChannelCountConfig:
 1138              	.LFB126:
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1139              		.loc 1 924 0
 1140              		.cfi_startproc
 1141              		@ args = 0, pretend = 0, frame = 16
 1142              		@ frame_needed = 1, uses_anonymous_args = 0
 1143              		@ link register save eliminated.
 1144 0000 80B4     		push	{r7}
 1145              	.LCFI47:
 1146              		.cfi_def_cfa_offset 4
 1147              		.cfi_offset 7, -4
 1148 0002 85B0     		sub	sp, sp, #20
 1149              	.LCFI48:
 1150              		.cfi_def_cfa_offset 24
 1151 0004 00AF     		add	r7, sp, #0
 1152              	.LCFI49:
 1153              		.cfi_def_cfa_register 7
 1154 0006 7860     		str	r0, [r7, #4]
 1155 0008 0B46     		mov	r3, r1
 1156 000a FB70     		strb	r3, [r7, #3]
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1157              		.loc 1 925 0
 1158 000c 0023     		movs	r3, #0
 1159 000e FB60     		str	r3, [r7, #12]
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1160              		.loc 1 926 0
 1161 0010 0023     		movs	r3, #0
 1162 0012 BB60     		str	r3, [r7, #8]
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1163              		.loc 1 933 0
 1164 0014 7B68     		ldr	r3, [r7, #4]
 1165 0016 5B68     		ldr	r3, [r3, #4]
 1166 0018 FB60     		str	r3, [r7, #12]
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1167              		.loc 1 936 0
 1168 001a FB68     		ldr	r3, [r7, #12]
 1169 001c 23F46043 		bic	r3, r3, #57344
 1170 0020 FB60     		str	r3, [r7, #12]
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1171              		.loc 1 939 0
 1172 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1173 0024 013B     		subs	r3, r3, #1
 1174 0026 BB60     		str	r3, [r7, #8]
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1175              		.loc 1 940 0
 1176 0028 BB68     		ldr	r3, [r7, #8]
 1177 002a 5B03     		lsls	r3, r3, #13
 1178 002c FA68     		ldr	r2, [r7, #12]
 1179 002e 1343     		orrs	r3, r3, r2
 1180 0030 FB60     		str	r3, [r7, #12]
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1181              		.loc 1 943 0
 1182 0032 7B68     		ldr	r3, [r7, #4]
 1183 0034 FA68     		ldr	r2, [r7, #12]
 1184 0036 5A60     		str	r2, [r3, #4]
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1185              		.loc 1 944 0
 1186 0038 1437     		adds	r7, r7, #20
 1187 003a BD46     		mov	sp, r7
 1188              		@ sp needed
 1189 003c 5DF8047B 		ldr	r7, [sp], #4
 1190 0040 7047     		bx	lr
 1191              		.cfi_endproc
 1192              	.LFE126:
 1194 0042 00BF     		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 1195              		.align	2
 1196              		.global	ADC_DiscModeCmd
 1197              		.thumb
 1198              		.thumb_func
 1200              	ADC_DiscModeCmd:
 1201              	.LFB127:
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1202              		.loc 1 956 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 8
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207 0000 80B4     		push	{r7}
 1208              	.LCFI50:
 1209              		.cfi_def_cfa_offset 4
 1210              		.cfi_offset 7, -4
 1211 0002 83B0     		sub	sp, sp, #12
 1212              	.LCFI51:
 1213              		.cfi_def_cfa_offset 16
 1214 0004 00AF     		add	r7, sp, #0
 1215              	.LCFI52:
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
 1218 0008 0B46     		mov	r3, r1
 1219 000a FB70     		strb	r3, [r7, #3]
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1220              		.loc 1 961 0
 1221 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1222 000e 002B     		cmp	r3, #0
 1223 0010 06D0     		beq	.L37
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1224              		.loc 1 964 0
 1225 0012 7B68     		ldr	r3, [r7, #4]
 1226 0014 5B68     		ldr	r3, [r3, #4]
 1227 0016 43F40062 		orr	r2, r3, #2048
 1228 001a 7B68     		ldr	r3, [r7, #4]
 1229 001c 5A60     		str	r2, [r3, #4]
 1230 001e 05E0     		b	.L36
 1231              	.L37:
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 1232              		.loc 1 969 0
 1233 0020 7B68     		ldr	r3, [r7, #4]
 1234 0022 5B68     		ldr	r3, [r3, #4]
 1235 0024 23F40062 		bic	r2, r3, #2048
 1236 0028 7B68     		ldr	r3, [r7, #4]
 1237 002a 5A60     		str	r2, [r3, #4]
 1238              	.L36:
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1239              		.loc 1 971 0
 1240 002c 0C37     		adds	r7, r7, #12
 1241 002e BD46     		mov	sp, r7
 1242              		@ sp needed
 1243 0030 5DF8047B 		ldr	r7, [sp], #4
 1244 0034 7047     		bx	lr
 1245              		.cfi_endproc
 1246              	.LFE127:
 1248 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1249              		.align	2
 1250              		.global	ADC_GetConversionValue
 1251              		.thumb
 1252              		.thumb_func
 1254              	ADC_GetConversionValue:
 1255              	.LFB128:
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1256              		.loc 1 979 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 8
 1259              		@ frame_needed = 1, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 1261 0000 80B4     		push	{r7}
 1262              	.LCFI53:
 1263              		.cfi_def_cfa_offset 4
 1264              		.cfi_offset 7, -4
 1265 0002 83B0     		sub	sp, sp, #12
 1266              	.LCFI54:
 1267              		.cfi_def_cfa_offset 16
 1268 0004 00AF     		add	r7, sp, #0
 1269              	.LCFI55:
 1270              		.cfi_def_cfa_register 7
 1271 0006 7860     		str	r0, [r7, #4]
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1272              		.loc 1 984 0
 1273 0008 7B68     		ldr	r3, [r7, #4]
 1274 000a DB6C     		ldr	r3, [r3, #76]
 1275 000c 9BB2     		uxth	r3, r3
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1276              		.loc 1 985 0
 1277 000e 1846     		mov	r0, r3
 1278 0010 0C37     		adds	r7, r7, #12
 1279 0012 BD46     		mov	sp, r7
 1280              		@ sp needed
 1281 0014 5DF8047B 		ldr	r7, [sp], #4
 1282 0018 7047     		bx	lr
 1283              		.cfi_endproc
 1284              	.LFE128:
 1286 001a 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1287              		.align	2
 1288              		.global	ADC_GetMultiModeConversionValue
 1289              		.thumb
 1290              		.thumb_func
 1292              	ADC_GetMultiModeConversionValue:
 1293              	.LFB129:
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1294              		.loc 1 1000 0
 1295              		.cfi_startproc
 1296              		@ args = 0, pretend = 0, frame = 0
 1297              		@ frame_needed = 1, uses_anonymous_args = 0
 1298              		@ link register save eliminated.
 1299 0000 80B4     		push	{r7}
 1300              	.LCFI56:
 1301              		.cfi_def_cfa_offset 4
 1302              		.cfi_offset 7, -4
 1303 0002 00AF     		add	r7, sp, #0
 1304              	.LCFI57:
 1305              		.cfi_def_cfa_register 7
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1306              		.loc 1 1002 0
 1307 0004 42F20833 		movw	r3, #8968
 1308 0008 C4F20103 		movt	r3, 16385
 1309 000c 1B68     		ldr	r3, [r3]
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1310              		.loc 1 1003 0
 1311 000e 1846     		mov	r0, r3
 1312 0010 BD46     		mov	sp, r7
 1313              		@ sp needed
 1314 0012 5DF8047B 		ldr	r7, [sp], #4
 1315 0016 7047     		bx	lr
 1316              		.cfi_endproc
 1317              	.LFE129:
 1319              		.section	.text.ADC_DMACmd,"ax",%progbits
 1320              		.align	2
 1321              		.global	ADC_DMACmd
 1322              		.thumb
 1323              		.thumb_func
 1325              	ADC_DMACmd:
 1326              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1327              		.loc 1 1049 0
 1328              		.cfi_startproc
 1329              		@ args = 0, pretend = 0, frame = 8
 1330              		@ frame_needed = 1, uses_anonymous_args = 0
 1331              		@ link register save eliminated.
 1332 0000 80B4     		push	{r7}
 1333              	.LCFI58:
 1334              		.cfi_def_cfa_offset 4
 1335              		.cfi_offset 7, -4
 1336 0002 83B0     		sub	sp, sp, #12
 1337              	.LCFI59:
 1338              		.cfi_def_cfa_offset 16
 1339 0004 00AF     		add	r7, sp, #0
 1340              	.LCFI60:
 1341              		.cfi_def_cfa_register 7
 1342 0006 7860     		str	r0, [r7, #4]
 1343 0008 0B46     		mov	r3, r1
 1344 000a FB70     		strb	r3, [r7, #3]
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1345              		.loc 1 1053 0
 1346 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1347 000e 002B     		cmp	r3, #0
 1348 0010 06D0     		beq	.L44
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1349              		.loc 1 1056 0
 1350 0012 7B68     		ldr	r3, [r7, #4]
 1351 0014 9B68     		ldr	r3, [r3, #8]
 1352 0016 43F48072 		orr	r2, r3, #256
 1353 001a 7B68     		ldr	r3, [r7, #4]
 1354 001c 9A60     		str	r2, [r3, #8]
 1355 001e 05E0     		b	.L43
 1356              	.L44:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1357              		.loc 1 1061 0
 1358 0020 7B68     		ldr	r3, [r7, #4]
 1359 0022 9B68     		ldr	r3, [r3, #8]
 1360 0024 23F48072 		bic	r2, r3, #256
 1361 0028 7B68     		ldr	r3, [r7, #4]
 1362 002a 9A60     		str	r2, [r3, #8]
 1363              	.L43:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1364              		.loc 1 1063 0
 1365 002c 0C37     		adds	r7, r7, #12
 1366 002e BD46     		mov	sp, r7
 1367              		@ sp needed
 1368 0030 5DF8047B 		ldr	r7, [sp], #4
 1369 0034 7047     		bx	lr
 1370              		.cfi_endproc
 1371              	.LFE130:
 1373 0036 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 1374              		.align	2
 1375              		.global	ADC_DMARequestAfterLastTransferCmd
 1376              		.thumb
 1377              		.thumb_func
 1379              	ADC_DMARequestAfterLastTransferCmd:
 1380              	.LFB131:
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1381              		.loc 1 1073 0
 1382              		.cfi_startproc
 1383              		@ args = 0, pretend = 0, frame = 8
 1384              		@ frame_needed = 1, uses_anonymous_args = 0
 1385              		@ link register save eliminated.
 1386 0000 80B4     		push	{r7}
 1387              	.LCFI61:
 1388              		.cfi_def_cfa_offset 4
 1389              		.cfi_offset 7, -4
 1390 0002 83B0     		sub	sp, sp, #12
 1391              	.LCFI62:
 1392              		.cfi_def_cfa_offset 16
 1393 0004 00AF     		add	r7, sp, #0
 1394              	.LCFI63:
 1395              		.cfi_def_cfa_register 7
 1396 0006 7860     		str	r0, [r7, #4]
 1397 0008 0B46     		mov	r3, r1
 1398 000a FB70     		strb	r3, [r7, #3]
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1399              		.loc 1 1077 0
 1400 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1401 000e 002B     		cmp	r3, #0
 1402 0010 06D0     		beq	.L47
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1403              		.loc 1 1080 0
 1404 0012 7B68     		ldr	r3, [r7, #4]
 1405 0014 9B68     		ldr	r3, [r3, #8]
 1406 0016 43F40072 		orr	r2, r3, #512
 1407 001a 7B68     		ldr	r3, [r7, #4]
 1408 001c 9A60     		str	r2, [r3, #8]
 1409 001e 05E0     		b	.L46
 1410              	.L47:
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1411              		.loc 1 1085 0
 1412 0020 7B68     		ldr	r3, [r7, #4]
 1413 0022 9B68     		ldr	r3, [r3, #8]
 1414 0024 23F40072 		bic	r2, r3, #512
 1415 0028 7B68     		ldr	r3, [r7, #4]
 1416 002a 9A60     		str	r2, [r3, #8]
 1417              	.L46:
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1418              		.loc 1 1087 0
 1419 002c 0C37     		adds	r7, r7, #12
 1420 002e BD46     		mov	sp, r7
 1421              		@ sp needed
 1422 0030 5DF8047B 		ldr	r7, [sp], #4
 1423 0034 7047     		bx	lr
 1424              		.cfi_endproc
 1425              	.LFE131:
 1427 0036 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1428              		.align	2
 1429              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1430              		.thumb
 1431              		.thumb_func
 1433              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1434              	.LFB132:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1435              		.loc 1 1100 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 8
 1438              		@ frame_needed = 1, uses_anonymous_args = 0
 1439              		@ link register save eliminated.
 1440 0000 80B4     		push	{r7}
 1441              	.LCFI64:
 1442              		.cfi_def_cfa_offset 4
 1443              		.cfi_offset 7, -4
 1444 0002 83B0     		sub	sp, sp, #12
 1445              	.LCFI65:
 1446              		.cfi_def_cfa_offset 16
 1447 0004 00AF     		add	r7, sp, #0
 1448              	.LCFI66:
 1449              		.cfi_def_cfa_register 7
 1450 0006 0346     		mov	r3, r0
 1451 0008 FB71     		strb	r3, [r7, #7]
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1452              		.loc 1 1103 0
 1453 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1454 000c 002B     		cmp	r3, #0
 1455 000e 0CD0     		beq	.L50
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1456              		.loc 1 1106 0
 1457 0010 4FF40C53 		mov	r3, #8960
 1458 0014 C4F20103 		movt	r3, 16385
 1459 0018 4FF40C52 		mov	r2, #8960
 1460 001c C4F20102 		movt	r2, 16385
 1461 0020 5268     		ldr	r2, [r2, #4]
 1462 0022 42F40052 		orr	r2, r2, #8192
 1463 0026 5A60     		str	r2, [r3, #4]
 1464 0028 0BE0     		b	.L49
 1465              	.L50:
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1466              		.loc 1 1111 0
 1467 002a 4FF40C53 		mov	r3, #8960
 1468 002e C4F20103 		movt	r3, 16385
 1469 0032 4FF40C52 		mov	r2, #8960
 1470 0036 C4F20102 		movt	r2, 16385
 1471 003a 5268     		ldr	r2, [r2, #4]
 1472 003c 22F40052 		bic	r2, r2, #8192
 1473 0040 5A60     		str	r2, [r3, #4]
 1474              	.L49:
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1475              		.loc 1 1113 0
 1476 0042 0C37     		adds	r7, r7, #12
 1477 0044 BD46     		mov	sp, r7
 1478              		@ sp needed
 1479 0046 5DF8047B 		ldr	r7, [sp], #4
 1480 004a 7047     		bx	lr
 1481              		.cfi_endproc
 1482              	.LFE132:
 1484              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1485              		.align	2
 1486              		.global	ADC_InjectedChannelConfig
 1487              		.thumb
 1488              		.thumb_func
 1490              	ADC_InjectedChannelConfig:
 1491              	.LFB133:
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1492              		.loc 1 1187 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 24
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496              		@ link register save eliminated.
 1497 0000 80B4     		push	{r7}
 1498              	.LCFI67:
 1499              		.cfi_def_cfa_offset 4
 1500              		.cfi_offset 7, -4
 1501 0002 87B0     		sub	sp, sp, #28
 1502              	.LCFI68:
 1503              		.cfi_def_cfa_offset 32
 1504 0004 00AF     		add	r7, sp, #0
 1505              	.LCFI69:
 1506              		.cfi_def_cfa_register 7
 1507 0006 7860     		str	r0, [r7, #4]
 1508 0008 F970     		strb	r1, [r7, #3]
 1509 000a BA70     		strb	r2, [r7, #2]
 1510 000c 7B70     		strb	r3, [r7, #1]
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1511              		.loc 1 1188 0
 1512 000e 0023     		movs	r3, #0
 1513 0010 7B61     		str	r3, [r7, #20]
 1514 0012 0023     		movs	r3, #0
 1515 0014 3B61     		str	r3, [r7, #16]
 1516 0016 0023     		movs	r3, #0
 1517 0018 FB60     		str	r3, [r7, #12]
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1518              		.loc 1 1195 0
 1519 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1520 001c 092B     		cmp	r3, #9
 1521 001e 23D9     		bls	.L53
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1522              		.loc 1 1198 0
 1523 0020 7B68     		ldr	r3, [r7, #4]
 1524 0022 DB68     		ldr	r3, [r3, #12]
 1525 0024 7B61     		str	r3, [r7, #20]
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1526              		.loc 1 1200 0
 1527 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1528 0028 A3F10A02 		sub	r2, r3, #10
 1529 002c 1346     		mov	r3, r2
 1530 002e 5B00     		lsls	r3, r3, #1
 1531 0030 1344     		add	r3, r3, r2
 1532 0032 0722     		movs	r2, #7
 1533 0034 02FA03F3 		lsl	r3, r2, r3
 1534 0038 3B61     		str	r3, [r7, #16]
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1535              		.loc 1 1202 0
 1536 003a 3B69     		ldr	r3, [r7, #16]
 1537 003c DB43     		mvns	r3, r3
 1538 003e 7A69     		ldr	r2, [r7, #20]
 1539 0040 1340     		ands	r3, r3, r2
 1540 0042 7B61     		str	r3, [r7, #20]
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1541              		.loc 1 1204 0
 1542 0044 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1543 0046 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1544 0048 A3F10A02 		sub	r2, r3, #10
 1545 004c 1346     		mov	r3, r2
 1546 004e 5B00     		lsls	r3, r3, #1
 1547 0050 1344     		add	r3, r3, r2
 1548 0052 01FA03F3 		lsl	r3, r1, r3
 1549 0056 3B61     		str	r3, [r7, #16]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1550              		.loc 1 1206 0
 1551 0058 7A69     		ldr	r2, [r7, #20]
 1552 005a 3B69     		ldr	r3, [r7, #16]
 1553 005c 1343     		orrs	r3, r3, r2
 1554 005e 7B61     		str	r3, [r7, #20]
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1555              		.loc 1 1208 0
 1556 0060 7B68     		ldr	r3, [r7, #4]
 1557 0062 7A69     		ldr	r2, [r7, #20]
 1558 0064 DA60     		str	r2, [r3, #12]
 1559 0066 1EE0     		b	.L54
 1560              	.L53:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1561              		.loc 1 1213 0
 1562 0068 7B68     		ldr	r3, [r7, #4]
 1563 006a 1B69     		ldr	r3, [r3, #16]
 1564 006c 7B61     		str	r3, [r7, #20]
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1565              		.loc 1 1215 0
 1566 006e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1567 0070 1346     		mov	r3, r2
 1568 0072 5B00     		lsls	r3, r3, #1
 1569 0074 1344     		add	r3, r3, r2
 1570 0076 0722     		movs	r2, #7
 1571 0078 02FA03F3 		lsl	r3, r2, r3
 1572 007c 3B61     		str	r3, [r7, #16]
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1573              		.loc 1 1217 0
 1574 007e 3B69     		ldr	r3, [r7, #16]
 1575 0080 DB43     		mvns	r3, r3
 1576 0082 7A69     		ldr	r2, [r7, #20]
 1577 0084 1340     		ands	r3, r3, r2
 1578 0086 7B61     		str	r3, [r7, #20]
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1579              		.loc 1 1219 0
 1580 0088 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1581 008a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1582 008c 1346     		mov	r3, r2
 1583 008e 5B00     		lsls	r3, r3, #1
 1584 0090 1344     		add	r3, r3, r2
 1585 0092 01FA03F3 		lsl	r3, r1, r3
 1586 0096 3B61     		str	r3, [r7, #16]
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1587              		.loc 1 1221 0
 1588 0098 7A69     		ldr	r2, [r7, #20]
 1589 009a 3B69     		ldr	r3, [r7, #16]
 1590 009c 1343     		orrs	r3, r3, r2
 1591 009e 7B61     		str	r3, [r7, #20]
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1592              		.loc 1 1223 0
 1593 00a0 7B68     		ldr	r3, [r7, #4]
 1594 00a2 7A69     		ldr	r2, [r7, #20]
 1595 00a4 1A61     		str	r2, [r3, #16]
 1596              	.L54:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1597              		.loc 1 1227 0
 1598 00a6 7B68     		ldr	r3, [r7, #4]
 1599 00a8 9B6B     		ldr	r3, [r3, #56]
 1600 00aa 7B61     		str	r3, [r7, #20]
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1601              		.loc 1 1229 0
 1602 00ac 7B69     		ldr	r3, [r7, #20]
 1603 00ae 03F44013 		and	r3, r3, #3145728
 1604 00b2 1B0D     		lsrs	r3, r3, #20
 1605 00b4 FB60     		str	r3, [r7, #12]
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1606              		.loc 1 1231 0
 1607 00b6 FB68     		ldr	r3, [r7, #12]
 1608 00b8 DBB2     		uxtb	r3, r3
 1609 00ba BA78     		ldrb	r2, [r7, #2]
 1610 00bc D31A     		subs	r3, r2, r3
 1611 00be DBB2     		uxtb	r3, r3
 1612 00c0 0233     		adds	r3, r3, #2
 1613 00c2 DBB2     		uxtb	r3, r3
 1614 00c4 1A46     		mov	r2, r3
 1615 00c6 1346     		mov	r3, r2
 1616 00c8 9B00     		lsls	r3, r3, #2
 1617 00ca 1344     		add	r3, r3, r2
 1618 00cc 1F22     		movs	r2, #31
 1619 00ce 02FA03F3 		lsl	r3, r2, r3
 1620 00d2 3B61     		str	r3, [r7, #16]
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1621              		.loc 1 1233 0
 1622 00d4 3B69     		ldr	r3, [r7, #16]
 1623 00d6 DB43     		mvns	r3, r3
 1624 00d8 7A69     		ldr	r2, [r7, #20]
 1625 00da 1340     		ands	r3, r3, r2
 1626 00dc 7B61     		str	r3, [r7, #20]
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1627              		.loc 1 1235 0
 1628 00de F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1629 00e0 FB68     		ldr	r3, [r7, #12]
 1630 00e2 DBB2     		uxtb	r3, r3
 1631 00e4 BA78     		ldrb	r2, [r7, #2]
 1632 00e6 D31A     		subs	r3, r2, r3
 1633 00e8 DBB2     		uxtb	r3, r3
 1634 00ea 0233     		adds	r3, r3, #2
 1635 00ec DBB2     		uxtb	r3, r3
 1636 00ee 1A46     		mov	r2, r3
 1637 00f0 1346     		mov	r3, r2
 1638 00f2 9B00     		lsls	r3, r3, #2
 1639 00f4 1344     		add	r3, r3, r2
 1640 00f6 01FA03F3 		lsl	r3, r1, r3
 1641 00fa 3B61     		str	r3, [r7, #16]
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1642              		.loc 1 1237 0
 1643 00fc 7A69     		ldr	r2, [r7, #20]
 1644 00fe 3B69     		ldr	r3, [r7, #16]
 1645 0100 1343     		orrs	r3, r3, r2
 1646 0102 7B61     		str	r3, [r7, #20]
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1647              		.loc 1 1239 0
 1648 0104 7B68     		ldr	r3, [r7, #4]
 1649 0106 7A69     		ldr	r2, [r7, #20]
 1650 0108 9A63     		str	r2, [r3, #56]
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1651              		.loc 1 1240 0
 1652 010a 1C37     		adds	r7, r7, #28
 1653 010c BD46     		mov	sp, r7
 1654              		@ sp needed
 1655 010e 5DF8047B 		ldr	r7, [sp], #4
 1656 0112 7047     		bx	lr
 1657              		.cfi_endproc
 1658              	.LFE133:
 1660              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1661              		.align	2
 1662              		.global	ADC_InjectedSequencerLengthConfig
 1663              		.thumb
 1664              		.thumb_func
 1666              	ADC_InjectedSequencerLengthConfig:
 1667              	.LFB134:
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1668              		.loc 1 1250 0
 1669              		.cfi_startproc
 1670              		@ args = 0, pretend = 0, frame = 16
 1671              		@ frame_needed = 1, uses_anonymous_args = 0
 1672              		@ link register save eliminated.
 1673 0000 80B4     		push	{r7}
 1674              	.LCFI70:
 1675              		.cfi_def_cfa_offset 4
 1676              		.cfi_offset 7, -4
 1677 0002 85B0     		sub	sp, sp, #20
 1678              	.LCFI71:
 1679              		.cfi_def_cfa_offset 24
 1680 0004 00AF     		add	r7, sp, #0
 1681              	.LCFI72:
 1682              		.cfi_def_cfa_register 7
 1683 0006 7860     		str	r0, [r7, #4]
 1684 0008 0B46     		mov	r3, r1
 1685 000a FB70     		strb	r3, [r7, #3]
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1686              		.loc 1 1251 0
 1687 000c 0023     		movs	r3, #0
 1688 000e FB60     		str	r3, [r7, #12]
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1689              		.loc 1 1252 0
 1690 0010 0023     		movs	r3, #0
 1691 0012 BB60     		str	r3, [r7, #8]
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1692              		.loc 1 1258 0
 1693 0014 7B68     		ldr	r3, [r7, #4]
 1694 0016 9B6B     		ldr	r3, [r3, #56]
 1695 0018 FB60     		str	r3, [r7, #12]
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1696              		.loc 1 1261 0
 1697 001a FB68     		ldr	r3, [r7, #12]
 1698 001c 23F44013 		bic	r3, r3, #3145728
 1699 0020 FB60     		str	r3, [r7, #12]
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1700              		.loc 1 1264 0
 1701 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1702 0024 013B     		subs	r3, r3, #1
 1703 0026 BB60     		str	r3, [r7, #8]
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1704              		.loc 1 1265 0
 1705 0028 BB68     		ldr	r3, [r7, #8]
 1706 002a 1B05     		lsls	r3, r3, #20
 1707 002c FA68     		ldr	r2, [r7, #12]
 1708 002e 1343     		orrs	r3, r3, r2
 1709 0030 FB60     		str	r3, [r7, #12]
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1710              		.loc 1 1268 0
 1711 0032 7B68     		ldr	r3, [r7, #4]
 1712 0034 FA68     		ldr	r2, [r7, #12]
 1713 0036 9A63     		str	r2, [r3, #56]
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1714              		.loc 1 1269 0
 1715 0038 1437     		adds	r7, r7, #20
 1716 003a BD46     		mov	sp, r7
 1717              		@ sp needed
 1718 003c 5DF8047B 		ldr	r7, [sp], #4
 1719 0040 7047     		bx	lr
 1720              		.cfi_endproc
 1721              	.LFE134:
 1723 0042 00BF     		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1724              		.align	2
 1725              		.global	ADC_SetInjectedOffset
 1726              		.thumb
 1727              		.thumb_func
 1729              	ADC_SetInjectedOffset:
 1730              	.LFB135:
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1731              		.loc 1 1285 0
 1732              		.cfi_startproc
 1733              		@ args = 0, pretend = 0, frame = 16
 1734              		@ frame_needed = 1, uses_anonymous_args = 0
 1735              		@ link register save eliminated.
 1736 0000 80B4     		push	{r7}
 1737              	.LCFI73:
 1738              		.cfi_def_cfa_offset 4
 1739              		.cfi_offset 7, -4
 1740 0002 85B0     		sub	sp, sp, #20
 1741              	.LCFI74:
 1742              		.cfi_def_cfa_offset 24
 1743 0004 00AF     		add	r7, sp, #0
 1744              	.LCFI75:
 1745              		.cfi_def_cfa_register 7
 1746 0006 7860     		str	r0, [r7, #4]
 1747 0008 1346     		mov	r3, r2
 1748 000a 0A46     		mov	r2, r1
 1749 000c FA70     		strb	r2, [r7, #3]
 1750 000e 3B80     		strh	r3, [r7]	@ movhi
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1751              		.loc 1 1286 0
 1752 0010 0023     		movs	r3, #0
 1753 0012 FB60     		str	r3, [r7, #12]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1754              		.loc 1 1292 0
 1755 0014 7B68     		ldr	r3, [r7, #4]
 1756 0016 FB60     		str	r3, [r7, #12]
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1757              		.loc 1 1293 0
 1758 0018 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1759 001a FB68     		ldr	r3, [r7, #12]
 1760 001c 1344     		add	r3, r3, r2
 1761 001e FB60     		str	r3, [r7, #12]
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1762              		.loc 1 1296 0
 1763 0020 FB68     		ldr	r3, [r7, #12]
 1764 0022 3A88     		ldrh	r2, [r7]
 1765 0024 1A60     		str	r2, [r3]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1766              		.loc 1 1297 0
 1767 0026 1437     		adds	r7, r7, #20
 1768 0028 BD46     		mov	sp, r7
 1769              		@ sp needed
 1770 002a 5DF8047B 		ldr	r7, [sp], #4
 1771 002e 7047     		bx	lr
 1772              		.cfi_endproc
 1773              	.LFE135:
 1775              		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1776              		.align	2
 1777              		.global	ADC_ExternalTrigInjectedConvConfig
 1778              		.thumb
 1779              		.thumb_func
 1781              	ADC_ExternalTrigInjectedConvConfig:
 1782              	.LFB136:
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1783              		.loc 1 1323 0
 1784              		.cfi_startproc
 1785              		@ args = 0, pretend = 0, frame = 16
 1786              		@ frame_needed = 1, uses_anonymous_args = 0
 1787              		@ link register save eliminated.
 1788 0000 80B4     		push	{r7}
 1789              	.LCFI76:
 1790              		.cfi_def_cfa_offset 4
 1791              		.cfi_offset 7, -4
 1792 0002 85B0     		sub	sp, sp, #20
 1793              	.LCFI77:
 1794              		.cfi_def_cfa_offset 24
 1795 0004 00AF     		add	r7, sp, #0
 1796              	.LCFI78:
 1797              		.cfi_def_cfa_register 7
 1798 0006 7860     		str	r0, [r7, #4]
 1799 0008 3960     		str	r1, [r7]
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1800              		.loc 1 1324 0
 1801 000a 0023     		movs	r3, #0
 1802 000c FB60     		str	r3, [r7, #12]
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1803              		.loc 1 1330 0
 1804 000e 7B68     		ldr	r3, [r7, #4]
 1805 0010 9B68     		ldr	r3, [r3, #8]
 1806 0012 FB60     		str	r3, [r7, #12]
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1807              		.loc 1 1333 0
 1808 0014 FB68     		ldr	r3, [r7, #12]
 1809 0016 23F47023 		bic	r3, r3, #983040
 1810 001a FB60     		str	r3, [r7, #12]
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1811              		.loc 1 1336 0
 1812 001c FA68     		ldr	r2, [r7, #12]
 1813 001e 3B68     		ldr	r3, [r7]
 1814 0020 1343     		orrs	r3, r3, r2
 1815 0022 FB60     		str	r3, [r7, #12]
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1816              		.loc 1 1339 0
 1817 0024 7B68     		ldr	r3, [r7, #4]
 1818 0026 FA68     		ldr	r2, [r7, #12]
 1819 0028 9A60     		str	r2, [r3, #8]
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1820              		.loc 1 1340 0
 1821 002a 1437     		adds	r7, r7, #20
 1822 002c BD46     		mov	sp, r7
 1823              		@ sp needed
 1824 002e 5DF8047B 		ldr	r7, [sp], #4
 1825 0032 7047     		bx	lr
 1826              		.cfi_endproc
 1827              	.LFE136:
 1829              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1830              		.align	2
 1831              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1832              		.thumb
 1833              		.thumb_func
 1835              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1836              	.LFB137:
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1837              		.loc 1 1357 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 16
 1840              		@ frame_needed = 1, uses_anonymous_args = 0
 1841              		@ link register save eliminated.
 1842 0000 80B4     		push	{r7}
 1843              	.LCFI79:
 1844              		.cfi_def_cfa_offset 4
 1845              		.cfi_offset 7, -4
 1846 0002 85B0     		sub	sp, sp, #20
 1847              	.LCFI80:
 1848              		.cfi_def_cfa_offset 24
 1849 0004 00AF     		add	r7, sp, #0
 1850              	.LCFI81:
 1851              		.cfi_def_cfa_register 7
 1852 0006 7860     		str	r0, [r7, #4]
 1853 0008 3960     		str	r1, [r7]
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1854              		.loc 1 1358 0
 1855 000a 0023     		movs	r3, #0
 1856 000c FB60     		str	r3, [r7, #12]
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1857              		.loc 1 1363 0
 1858 000e 7B68     		ldr	r3, [r7, #4]
 1859 0010 9B68     		ldr	r3, [r3, #8]
 1860 0012 FB60     		str	r3, [r7, #12]
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1861              		.loc 1 1365 0
 1862 0014 FB68     		ldr	r3, [r7, #12]
 1863 0016 23F44013 		bic	r3, r3, #3145728
 1864 001a FB60     		str	r3, [r7, #12]
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1865              		.loc 1 1367 0
 1866 001c FA68     		ldr	r2, [r7, #12]
 1867 001e 3B68     		ldr	r3, [r7]
 1868 0020 1343     		orrs	r3, r3, r2
 1869 0022 FB60     		str	r3, [r7, #12]
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1870              		.loc 1 1369 0
 1871 0024 7B68     		ldr	r3, [r7, #4]
 1872 0026 FA68     		ldr	r2, [r7, #12]
 1873 0028 9A60     		str	r2, [r3, #8]
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1874              		.loc 1 1370 0
 1875 002a 1437     		adds	r7, r7, #20
 1876 002c BD46     		mov	sp, r7
 1877              		@ sp needed
 1878 002e 5DF8047B 		ldr	r7, [sp], #4
 1879 0032 7047     		bx	lr
 1880              		.cfi_endproc
 1881              	.LFE137:
 1883              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1884              		.align	2
 1885              		.global	ADC_SoftwareStartInjectedConv
 1886              		.thumb
 1887              		.thumb_func
 1889              	ADC_SoftwareStartInjectedConv:
 1890              	.LFB138:
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1891              		.loc 1 1378 0
 1892              		.cfi_startproc
 1893              		@ args = 0, pretend = 0, frame = 8
 1894              		@ frame_needed = 1, uses_anonymous_args = 0
 1895              		@ link register save eliminated.
 1896 0000 80B4     		push	{r7}
 1897              	.LCFI82:
 1898              		.cfi_def_cfa_offset 4
 1899              		.cfi_offset 7, -4
 1900 0002 83B0     		sub	sp, sp, #12
 1901              	.LCFI83:
 1902              		.cfi_def_cfa_offset 16
 1903 0004 00AF     		add	r7, sp, #0
 1904              	.LCFI84:
 1905              		.cfi_def_cfa_register 7
 1906 0006 7860     		str	r0, [r7, #4]
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1907              		.loc 1 1382 0
 1908 0008 7B68     		ldr	r3, [r7, #4]
 1909 000a 9B68     		ldr	r3, [r3, #8]
 1910 000c 43F48002 		orr	r2, r3, #4194304
 1911 0010 7B68     		ldr	r3, [r7, #4]
 1912 0012 9A60     		str	r2, [r3, #8]
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1913              		.loc 1 1383 0
 1914 0014 0C37     		adds	r7, r7, #12
 1915 0016 BD46     		mov	sp, r7
 1916              		@ sp needed
 1917 0018 5DF8047B 		ldr	r7, [sp], #4
 1918 001c 7047     		bx	lr
 1919              		.cfi_endproc
 1920              	.LFE138:
 1922 001e 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1923              		.align	2
 1924              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1925              		.thumb
 1926              		.thumb_func
 1928              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1929              	.LFB139:
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1930              		.loc 1 1391 0
 1931              		.cfi_startproc
 1932              		@ args = 0, pretend = 0, frame = 16
 1933              		@ frame_needed = 1, uses_anonymous_args = 0
 1934              		@ link register save eliminated.
 1935 0000 80B4     		push	{r7}
 1936              	.LCFI85:
 1937              		.cfi_def_cfa_offset 4
 1938              		.cfi_offset 7, -4
 1939 0002 85B0     		sub	sp, sp, #20
 1940              	.LCFI86:
 1941              		.cfi_def_cfa_offset 24
 1942 0004 00AF     		add	r7, sp, #0
 1943              	.LCFI87:
 1944              		.cfi_def_cfa_register 7
 1945 0006 7860     		str	r0, [r7, #4]
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1946              		.loc 1 1392 0
 1947 0008 0023     		movs	r3, #0
 1948 000a FB73     		strb	r3, [r7, #15]
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1949              		.loc 1 1397 0
 1950 000c 7B68     		ldr	r3, [r7, #4]
 1951 000e 9B68     		ldr	r3, [r3, #8]
 1952 0010 03F48003 		and	r3, r3, #4194304
 1953 0014 002B     		cmp	r3, #0
 1954 0016 02D0     		beq	.L61
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1955              		.loc 1 1400 0
 1956 0018 0123     		movs	r3, #1
 1957 001a FB73     		strb	r3, [r7, #15]
 1958 001c 01E0     		b	.L62
 1959              	.L61:
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1960              		.loc 1 1405 0
 1961 001e 0023     		movs	r3, #0
 1962 0020 FB73     		strb	r3, [r7, #15]
 1963              	.L62:
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1964              		.loc 1 1408 0
 1965 0022 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1966              		.loc 1 1409 0
 1967 0024 1846     		mov	r0, r3
 1968 0026 1437     		adds	r7, r7, #20
 1969 0028 BD46     		mov	sp, r7
 1970              		@ sp needed
 1971 002a 5DF8047B 		ldr	r7, [sp], #4
 1972 002e 7047     		bx	lr
 1973              		.cfi_endproc
 1974              	.LFE139:
 1976              		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1977              		.align	2
 1978              		.global	ADC_AutoInjectedConvCmd
 1979              		.thumb
 1980              		.thumb_func
 1982              	ADC_AutoInjectedConvCmd:
 1983              	.LFB140:
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1984              		.loc 1 1420 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 8
 1987              		@ frame_needed = 1, uses_anonymous_args = 0
 1988              		@ link register save eliminated.
 1989 0000 80B4     		push	{r7}
 1990              	.LCFI88:
 1991              		.cfi_def_cfa_offset 4
 1992              		.cfi_offset 7, -4
 1993 0002 83B0     		sub	sp, sp, #12
 1994              	.LCFI89:
 1995              		.cfi_def_cfa_offset 16
 1996 0004 00AF     		add	r7, sp, #0
 1997              	.LCFI90:
 1998              		.cfi_def_cfa_register 7
 1999 0006 7860     		str	r0, [r7, #4]
 2000 0008 0B46     		mov	r3, r1
 2001 000a FB70     		strb	r3, [r7, #3]
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2002              		.loc 1 1424 0
 2003 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2004 000e 002B     		cmp	r3, #0
 2005 0010 06D0     		beq	.L65
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 2006              		.loc 1 1427 0
 2007 0012 7B68     		ldr	r3, [r7, #4]
 2008 0014 5B68     		ldr	r3, [r3, #4]
 2009 0016 43F48062 		orr	r2, r3, #1024
 2010 001a 7B68     		ldr	r3, [r7, #4]
 2011 001c 5A60     		str	r2, [r3, #4]
 2012 001e 05E0     		b	.L64
 2013              	.L65:
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 2014              		.loc 1 1432 0
 2015 0020 7B68     		ldr	r3, [r7, #4]
 2016 0022 5B68     		ldr	r3, [r3, #4]
 2017 0024 23F48062 		bic	r2, r3, #1024
 2018 0028 7B68     		ldr	r3, [r7, #4]
 2019 002a 5A60     		str	r2, [r3, #4]
 2020              	.L64:
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2021              		.loc 1 1434 0
 2022 002c 0C37     		adds	r7, r7, #12
 2023 002e BD46     		mov	sp, r7
 2024              		@ sp needed
 2025 0030 5DF8047B 		ldr	r7, [sp], #4
 2026 0034 7047     		bx	lr
 2027              		.cfi_endproc
 2028              	.LFE140:
 2030 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 2031              		.align	2
 2032              		.global	ADC_InjectedDiscModeCmd
 2033              		.thumb
 2034              		.thumb_func
 2036              	ADC_InjectedDiscModeCmd:
 2037              	.LFB141:
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2038              		.loc 1 1446 0
 2039              		.cfi_startproc
 2040              		@ args = 0, pretend = 0, frame = 8
 2041              		@ frame_needed = 1, uses_anonymous_args = 0
 2042              		@ link register save eliminated.
 2043 0000 80B4     		push	{r7}
 2044              	.LCFI91:
 2045              		.cfi_def_cfa_offset 4
 2046              		.cfi_offset 7, -4
 2047 0002 83B0     		sub	sp, sp, #12
 2048              	.LCFI92:
 2049              		.cfi_def_cfa_offset 16
 2050 0004 00AF     		add	r7, sp, #0
 2051              	.LCFI93:
 2052              		.cfi_def_cfa_register 7
 2053 0006 7860     		str	r0, [r7, #4]
 2054 0008 0B46     		mov	r3, r1
 2055 000a FB70     		strb	r3, [r7, #3]
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2056              		.loc 1 1450 0
 2057 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2058 000e 002B     		cmp	r3, #0
 2059 0010 06D0     		beq	.L68
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2060              		.loc 1 1453 0
 2061 0012 7B68     		ldr	r3, [r7, #4]
 2062 0014 5B68     		ldr	r3, [r3, #4]
 2063 0016 43F48052 		orr	r2, r3, #4096
 2064 001a 7B68     		ldr	r3, [r7, #4]
 2065 001c 5A60     		str	r2, [r3, #4]
 2066 001e 05E0     		b	.L67
 2067              	.L68:
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 2068              		.loc 1 1458 0
 2069 0020 7B68     		ldr	r3, [r7, #4]
 2070 0022 5B68     		ldr	r3, [r3, #4]
 2071 0024 23F48052 		bic	r2, r3, #4096
 2072 0028 7B68     		ldr	r3, [r7, #4]
 2073 002a 5A60     		str	r2, [r3, #4]
 2074              	.L67:
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2075              		.loc 1 1460 0
 2076 002c 0C37     		adds	r7, r7, #12
 2077 002e BD46     		mov	sp, r7
 2078              		@ sp needed
 2079 0030 5DF8047B 		ldr	r7, [sp], #4
 2080 0034 7047     		bx	lr
 2081              		.cfi_endproc
 2082              	.LFE141:
 2084 0036 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 2085              		.align	2
 2086              		.global	ADC_GetInjectedConversionValue
 2087              		.thumb
 2088              		.thumb_func
 2090              	ADC_GetInjectedConversionValue:
 2091              	.LFB142:
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2092              		.loc 1 1474 0
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 16
 2095              		@ frame_needed = 1, uses_anonymous_args = 0
 2096              		@ link register save eliminated.
 2097 0000 80B4     		push	{r7}
 2098              	.LCFI94:
 2099              		.cfi_def_cfa_offset 4
 2100              		.cfi_offset 7, -4
 2101 0002 85B0     		sub	sp, sp, #20
 2102              	.LCFI95:
 2103              		.cfi_def_cfa_offset 24
 2104 0004 00AF     		add	r7, sp, #0
 2105              	.LCFI96:
 2106              		.cfi_def_cfa_register 7
 2107 0006 7860     		str	r0, [r7, #4]
 2108 0008 0B46     		mov	r3, r1
 2109 000a FB70     		strb	r3, [r7, #3]
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2110              		.loc 1 1475 0
 2111 000c 0023     		movs	r3, #0
 2112 000e FB60     		str	r3, [r7, #12]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2113              		.loc 1 1481 0
 2114 0010 7B68     		ldr	r3, [r7, #4]
 2115 0012 FB60     		str	r3, [r7, #12]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2116              		.loc 1 1482 0
 2117 0014 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2118 0016 FB68     		ldr	r3, [r7, #12]
 2119 0018 1344     		add	r3, r3, r2
 2120 001a 2833     		adds	r3, r3, #40
 2121 001c FB60     		str	r3, [r7, #12]
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2122              		.loc 1 1485 0
 2123 001e FB68     		ldr	r3, [r7, #12]
 2124 0020 1B68     		ldr	r3, [r3]
 2125 0022 9BB2     		uxth	r3, r3
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2126              		.loc 1 1486 0
 2127 0024 1846     		mov	r0, r3
 2128 0026 1437     		adds	r7, r7, #20
 2129 0028 BD46     		mov	sp, r7
 2130              		@ sp needed
 2131 002a 5DF8047B 		ldr	r7, [sp], #4
 2132 002e 7047     		bx	lr
 2133              		.cfi_endproc
 2134              	.LFE142:
 2136              		.section	.text.ADC_ITConfig,"ax",%progbits
 2137              		.align	2
 2138              		.global	ADC_ITConfig
 2139              		.thumb
 2140              		.thumb_func
 2142              	ADC_ITConfig:
 2143              	.LFB143:
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2144              		.loc 1 1582 0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 16
 2147              		@ frame_needed = 1, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
 2149 0000 80B4     		push	{r7}
 2150              	.LCFI97:
 2151              		.cfi_def_cfa_offset 4
 2152              		.cfi_offset 7, -4
 2153 0002 85B0     		sub	sp, sp, #20
 2154              	.LCFI98:
 2155              		.cfi_def_cfa_offset 24
 2156 0004 00AF     		add	r7, sp, #0
 2157              	.LCFI99:
 2158              		.cfi_def_cfa_register 7
 2159 0006 7860     		str	r0, [r7, #4]
 2160 0008 1346     		mov	r3, r2
 2161 000a 0A46     		mov	r2, r1	@ movhi
 2162 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 2163 000e 7B70     		strb	r3, [r7, #1]
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2164              		.loc 1 1583 0
 2165 0010 0023     		movs	r3, #0
 2166 0012 FB60     		str	r3, [r7, #12]
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2167              		.loc 1 1590 0
 2168 0014 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2169 0016 DBB2     		uxtb	r3, r3
 2170 0018 FB60     		str	r3, [r7, #12]
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2171              		.loc 1 1591 0
 2172 001a FB68     		ldr	r3, [r7, #12]
 2173 001c 0122     		movs	r2, #1
 2174 001e 02FA03F3 		lsl	r3, r2, r3
 2175 0022 FB60     		str	r3, [r7, #12]
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2176              		.loc 1 1593 0
 2177 0024 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2178 0026 002B     		cmp	r3, #0
 2179 0028 06D0     		beq	.L73
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2180              		.loc 1 1596 0
 2181 002a 7B68     		ldr	r3, [r7, #4]
 2182 002c 5A68     		ldr	r2, [r3, #4]
 2183 002e FB68     		ldr	r3, [r7, #12]
 2184 0030 1A43     		orrs	r2, r2, r3
 2185 0032 7B68     		ldr	r3, [r7, #4]
 2186 0034 5A60     		str	r2, [r3, #4]
 2187 0036 06E0     		b	.L72
 2188              	.L73:
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 2189              		.loc 1 1601 0
 2190 0038 7B68     		ldr	r3, [r7, #4]
 2191 003a 5A68     		ldr	r2, [r3, #4]
 2192 003c FB68     		ldr	r3, [r7, #12]
 2193 003e DB43     		mvns	r3, r3
 2194 0040 1A40     		ands	r2, r2, r3
 2195 0042 7B68     		ldr	r3, [r7, #4]
 2196 0044 5A60     		str	r2, [r3, #4]
 2197              	.L72:
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2198              		.loc 1 1603 0
 2199 0046 1437     		adds	r7, r7, #20
 2200 0048 BD46     		mov	sp, r7
 2201              		@ sp needed
 2202 004a 5DF8047B 		ldr	r7, [sp], #4
 2203 004e 7047     		bx	lr
 2204              		.cfi_endproc
 2205              	.LFE143:
 2207              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2208              		.align	2
 2209              		.global	ADC_GetFlagStatus
 2210              		.thumb
 2211              		.thumb_func
 2213              	ADC_GetFlagStatus:
 2214              	.LFB144:
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2215              		.loc 1 1619 0
 2216              		.cfi_startproc
 2217              		@ args = 0, pretend = 0, frame = 16
 2218              		@ frame_needed = 1, uses_anonymous_args = 0
 2219              		@ link register save eliminated.
 2220 0000 80B4     		push	{r7}
 2221              	.LCFI100:
 2222              		.cfi_def_cfa_offset 4
 2223              		.cfi_offset 7, -4
 2224 0002 85B0     		sub	sp, sp, #20
 2225              	.LCFI101:
 2226              		.cfi_def_cfa_offset 24
 2227 0004 00AF     		add	r7, sp, #0
 2228              	.LCFI102:
 2229              		.cfi_def_cfa_register 7
 2230 0006 7860     		str	r0, [r7, #4]
 2231 0008 0B46     		mov	r3, r1
 2232 000a FB70     		strb	r3, [r7, #3]
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2233              		.loc 1 1620 0
 2234 000c 0023     		movs	r3, #0
 2235 000e FB73     		strb	r3, [r7, #15]
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2236              		.loc 1 1626 0
 2237 0010 7B68     		ldr	r3, [r7, #4]
 2238 0012 1A68     		ldr	r2, [r3]
 2239 0014 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2240 0016 1340     		ands	r3, r3, r2
 2241 0018 002B     		cmp	r3, #0
 2242 001a 02D0     		beq	.L76
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2243              		.loc 1 1629 0
 2244 001c 0123     		movs	r3, #1
 2245 001e FB73     		strb	r3, [r7, #15]
 2246 0020 01E0     		b	.L77
 2247              	.L76:
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2248              		.loc 1 1634 0
 2249 0022 0023     		movs	r3, #0
 2250 0024 FB73     		strb	r3, [r7, #15]
 2251              	.L77:
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2252              		.loc 1 1637 0
 2253 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2254              		.loc 1 1638 0
 2255 0028 1846     		mov	r0, r3
 2256 002a 1437     		adds	r7, r7, #20
 2257 002c BD46     		mov	sp, r7
 2258              		@ sp needed
 2259 002e 5DF8047B 		ldr	r7, [sp], #4
 2260 0032 7047     		bx	lr
 2261              		.cfi_endproc
 2262              	.LFE144:
 2264              		.section	.text.ADC_ClearFlag,"ax",%progbits
 2265              		.align	2
 2266              		.global	ADC_ClearFlag
 2267              		.thumb
 2268              		.thumb_func
 2270              	ADC_ClearFlag:
 2271              	.LFB145:
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2272              		.loc 1 1654 0
 2273              		.cfi_startproc
 2274              		@ args = 0, pretend = 0, frame = 8
 2275              		@ frame_needed = 1, uses_anonymous_args = 0
 2276              		@ link register save eliminated.
 2277 0000 80B4     		push	{r7}
 2278              	.LCFI103:
 2279              		.cfi_def_cfa_offset 4
 2280              		.cfi_offset 7, -4
 2281 0002 83B0     		sub	sp, sp, #12
 2282              	.LCFI104:
 2283              		.cfi_def_cfa_offset 16
 2284 0004 00AF     		add	r7, sp, #0
 2285              	.LCFI105:
 2286              		.cfi_def_cfa_register 7
 2287 0006 7860     		str	r0, [r7, #4]
 2288 0008 0B46     		mov	r3, r1
 2289 000a FB70     		strb	r3, [r7, #3]
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2290              		.loc 1 1660 0
 2291 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2292 000e DA43     		mvns	r2, r3
 2293 0010 7B68     		ldr	r3, [r7, #4]
 2294 0012 1A60     		str	r2, [r3]
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2295              		.loc 1 1661 0
 2296 0014 0C37     		adds	r7, r7, #12
 2297 0016 BD46     		mov	sp, r7
 2298              		@ sp needed
 2299 0018 5DF8047B 		ldr	r7, [sp], #4
 2300 001c 7047     		bx	lr
 2301              		.cfi_endproc
 2302              	.LFE145:
 2304 001e 00BF     		.section	.text.ADC_GetITStatus,"ax",%progbits
 2305              		.align	2
 2306              		.global	ADC_GetITStatus
 2307              		.thumb
 2308              		.thumb_func
 2310              	ADC_GetITStatus:
 2311              	.LFB146:
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2312              		.loc 1 1675 0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 24
 2315              		@ frame_needed = 1, uses_anonymous_args = 0
 2316              		@ link register save eliminated.
 2317 0000 80B4     		push	{r7}
 2318              	.LCFI106:
 2319              		.cfi_def_cfa_offset 4
 2320              		.cfi_offset 7, -4
 2321 0002 87B0     		sub	sp, sp, #28
 2322              	.LCFI107:
 2323              		.cfi_def_cfa_offset 32
 2324 0004 00AF     		add	r7, sp, #0
 2325              	.LCFI108:
 2326              		.cfi_def_cfa_register 7
 2327 0006 7860     		str	r0, [r7, #4]
 2328 0008 0B46     		mov	r3, r1
 2329 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2330              		.loc 1 1676 0
 2331 000c 0023     		movs	r3, #0
 2332 000e FB75     		strb	r3, [r7, #23]
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2333              		.loc 1 1677 0
 2334 0010 0023     		movs	r3, #0
 2335 0012 3B61     		str	r3, [r7, #16]
 2336 0014 0023     		movs	r3, #0
 2337 0016 FB60     		str	r3, [r7, #12]
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2338              		.loc 1 1684 0
 2339 0018 7B88     		ldrh	r3, [r7, #2]
 2340 001a 1B0A     		lsrs	r3, r3, #8
 2341 001c 9BB2     		uxth	r3, r3
 2342 001e 3B61     		str	r3, [r7, #16]
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2343              		.loc 1 1687 0
 2344 0020 7B68     		ldr	r3, [r7, #4]
 2345 0022 5A68     		ldr	r2, [r3, #4]
 2346 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2347 0026 DBB2     		uxtb	r3, r3
 2348 0028 0121     		movs	r1, #1
 2349 002a 01FA03F3 		lsl	r3, r1, r3
 2350 002e 1340     		ands	r3, r3, r2
 2351 0030 FB60     		str	r3, [r7, #12]
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2352              		.loc 1 1690 0
 2353 0032 7B68     		ldr	r3, [r7, #4]
 2354 0034 1A68     		ldr	r2, [r3]
 2355 0036 3B69     		ldr	r3, [r7, #16]
 2356 0038 1340     		ands	r3, r3, r2
 2357 003a 002B     		cmp	r3, #0
 2358 003c 05D0     		beq	.L81
 2359              		.loc 1 1690 0 is_stmt 0 discriminator 1
 2360 003e FB68     		ldr	r3, [r7, #12]
 2361 0040 002B     		cmp	r3, #0
 2362 0042 02D0     		beq	.L81
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2363              		.loc 1 1693 0 is_stmt 1
 2364 0044 0123     		movs	r3, #1
 2365 0046 FB75     		strb	r3, [r7, #23]
 2366 0048 01E0     		b	.L82
 2367              	.L81:
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2368              		.loc 1 1698 0
 2369 004a 0023     		movs	r3, #0
 2370 004c FB75     		strb	r3, [r7, #23]
 2371              	.L82:
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2372              		.loc 1 1701 0
 2373 004e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2374              		.loc 1 1702 0
 2375 0050 1846     		mov	r0, r3
 2376 0052 1C37     		adds	r7, r7, #28
 2377 0054 BD46     		mov	sp, r7
 2378              		@ sp needed
 2379 0056 5DF8047B 		ldr	r7, [sp], #4
 2380 005a 7047     		bx	lr
 2381              		.cfi_endproc
 2382              	.LFE146:
 2384              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2385              		.align	2
 2386              		.global	ADC_ClearITPendingBit
 2387              		.thumb
 2388              		.thumb_func
 2390              	ADC_ClearITPendingBit:
 2391              	.LFB147:
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2392              		.loc 1 1716 0
 2393              		.cfi_startproc
 2394              		@ args = 0, pretend = 0, frame = 16
 2395              		@ frame_needed = 1, uses_anonymous_args = 0
 2396              		@ link register save eliminated.
 2397 0000 80B4     		push	{r7}
 2398              	.LCFI109:
 2399              		.cfi_def_cfa_offset 4
 2400              		.cfi_offset 7, -4
 2401 0002 85B0     		sub	sp, sp, #20
 2402              	.LCFI110:
 2403              		.cfi_def_cfa_offset 24
 2404 0004 00AF     		add	r7, sp, #0
 2405              	.LCFI111:
 2406              		.cfi_def_cfa_register 7
 2407 0006 7860     		str	r0, [r7, #4]
 2408 0008 0B46     		mov	r3, r1
 2409 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2410              		.loc 1 1717 0
 2411 000c 0023     		movs	r3, #0
 2412 000e FB73     		strb	r3, [r7, #15]
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2413              		.loc 1 1722 0
 2414 0010 7B88     		ldrh	r3, [r7, #2]
 2415 0012 1B0A     		lsrs	r3, r3, #8
 2416 0014 9BB2     		uxth	r3, r3
 2417 0016 FB73     		strb	r3, [r7, #15]
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2418              		.loc 1 1724 0
 2419 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2420 001a DA43     		mvns	r2, r3
 2421 001c 7B68     		ldr	r3, [r7, #4]
 2422 001e 1A60     		str	r2, [r3]
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 2423              		.loc 1 1725 0
 2424 0020 1437     		adds	r7, r7, #20
 2425 0022 BD46     		mov	sp, r7
 2426              		@ sp needed
 2427 0024 5DF8047B 		ldr	r7, [sp], #4
 2428 0028 7047     		bx	lr
 2429              		.cfi_endproc
 2430              	.LFE147:
 2432 002a 00BF     		.text
 2433              	.Letext0:
 2434              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2435              		.file 3 "/usr/include/newlib/stdint.h"
 2436              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2437              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h"
 2438              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_adc.c
     /tmp/ccOOs4hM.s:20     .text.ADC_DeInit:0000000000000000 $t
     /tmp/ccOOs4hM.s:25     .text.ADC_DeInit:0000000000000000 ADC_DeInit
     /tmp/ccOOs4hM.s:54     .text.ADC_Init:0000000000000000 $t
     /tmp/ccOOs4hM.s:59     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/ccOOs4hM.s:181    .text.ADC_StructInit:0000000000000000 $t
     /tmp/ccOOs4hM.s:186    .text.ADC_StructInit:0000000000000000 ADC_StructInit
     /tmp/ccOOs4hM.s:242    .text.ADC_CommonInit:0000000000000000 $t
     /tmp/ccOOs4hM.s:247    .text.ADC_CommonInit:0000000000000000 ADC_CommonInit
     /tmp/ccOOs4hM.s:315    .text.ADC_CommonStructInit:0000000000000000 $t
     /tmp/ccOOs4hM.s:320    .text.ADC_CommonStructInit:0000000000000000 ADC_CommonStructInit
     /tmp/ccOOs4hM.s:364    .text.ADC_Cmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:369    .text.ADC_Cmd:0000000000000000 ADC_Cmd
     /tmp/ccOOs4hM.s:418    .text.ADC_AnalogWatchdogCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:423    .text.ADC_AnalogWatchdogCmd:0000000000000000 ADC_AnalogWatchdogCmd
     /tmp/ccOOs4hM.s:473    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:478    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccOOs4hM.s:518    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:523    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccOOs4hM.s:573    .text.ADC_TempSensorVrefintCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:578    .text.ADC_TempSensorVrefintCmd:0000000000000000 ADC_TempSensorVrefintCmd
     /tmp/ccOOs4hM.s:630    .text.ADC_VBATCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:635    .text.ADC_VBATCmd:0000000000000000 ADC_VBATCmd
     /tmp/ccOOs4hM.s:687    .text.ADC_RegularChannelConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:692    .text.ADC_RegularChannelConfig:0000000000000000 ADC_RegularChannelConfig
     /tmp/ccOOs4hM.s:931    .text.ADC_SoftwareStartConv:0000000000000000 $t
     /tmp/ccOOs4hM.s:936    .text.ADC_SoftwareStartConv:0000000000000000 ADC_SoftwareStartConv
     /tmp/ccOOs4hM.s:970    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 $t
     /tmp/ccOOs4hM.s:975    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccOOs4hM.s:1024   .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1029   .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccOOs4hM.s:1078   .text.ADC_ContinuousModeCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1083   .text.ADC_ContinuousModeCmd:0000000000000000 ADC_ContinuousModeCmd
     /tmp/ccOOs4hM.s:1132   .text.ADC_DiscModeChannelCountConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:1137   .text.ADC_DiscModeChannelCountConfig:0000000000000000 ADC_DiscModeChannelCountConfig
     /tmp/ccOOs4hM.s:1195   .text.ADC_DiscModeCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1200   .text.ADC_DiscModeCmd:0000000000000000 ADC_DiscModeCmd
     /tmp/ccOOs4hM.s:1249   .text.ADC_GetConversionValue:0000000000000000 $t
     /tmp/ccOOs4hM.s:1254   .text.ADC_GetConversionValue:0000000000000000 ADC_GetConversionValue
     /tmp/ccOOs4hM.s:1287   .text.ADC_GetMultiModeConversionValue:0000000000000000 $t
     /tmp/ccOOs4hM.s:1292   .text.ADC_GetMultiModeConversionValue:0000000000000000 ADC_GetMultiModeConversionValue
     /tmp/ccOOs4hM.s:1320   .text.ADC_DMACmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1325   .text.ADC_DMACmd:0000000000000000 ADC_DMACmd
     /tmp/ccOOs4hM.s:1374   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1379   .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccOOs4hM.s:1428   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1433   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccOOs4hM.s:1485   .text.ADC_InjectedChannelConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:1490   .text.ADC_InjectedChannelConfig:0000000000000000 ADC_InjectedChannelConfig
     /tmp/ccOOs4hM.s:1661   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:1666   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccOOs4hM.s:1724   .text.ADC_SetInjectedOffset:0000000000000000 $t
     /tmp/ccOOs4hM.s:1729   .text.ADC_SetInjectedOffset:0000000000000000 ADC_SetInjectedOffset
     /tmp/ccOOs4hM.s:1776   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:1781   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccOOs4hM.s:1830   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:1835   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccOOs4hM.s:1884   .text.ADC_SoftwareStartInjectedConv:0000000000000000 $t
     /tmp/ccOOs4hM.s:1889   .text.ADC_SoftwareStartInjectedConv:0000000000000000 ADC_SoftwareStartInjectedConv
     /tmp/ccOOs4hM.s:1923   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 $t
     /tmp/ccOOs4hM.s:1928   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccOOs4hM.s:1977   .text.ADC_AutoInjectedConvCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:1982   .text.ADC_AutoInjectedConvCmd:0000000000000000 ADC_AutoInjectedConvCmd
     /tmp/ccOOs4hM.s:2031   .text.ADC_InjectedDiscModeCmd:0000000000000000 $t
     /tmp/ccOOs4hM.s:2036   .text.ADC_InjectedDiscModeCmd:0000000000000000 ADC_InjectedDiscModeCmd
     /tmp/ccOOs4hM.s:2085   .text.ADC_GetInjectedConversionValue:0000000000000000 $t
     /tmp/ccOOs4hM.s:2090   .text.ADC_GetInjectedConversionValue:0000000000000000 ADC_GetInjectedConversionValue
     /tmp/ccOOs4hM.s:2137   .text.ADC_ITConfig:0000000000000000 $t
     /tmp/ccOOs4hM.s:2142   .text.ADC_ITConfig:0000000000000000 ADC_ITConfig
     /tmp/ccOOs4hM.s:2208   .text.ADC_GetFlagStatus:0000000000000000 $t
     /tmp/ccOOs4hM.s:2213   .text.ADC_GetFlagStatus:0000000000000000 ADC_GetFlagStatus
     /tmp/ccOOs4hM.s:2265   .text.ADC_ClearFlag:0000000000000000 $t
     /tmp/ccOOs4hM.s:2270   .text.ADC_ClearFlag:0000000000000000 ADC_ClearFlag
     /tmp/ccOOs4hM.s:2305   .text.ADC_GetITStatus:0000000000000000 $t
     /tmp/ccOOs4hM.s:2310   .text.ADC_GetITStatus:0000000000000000 ADC_GetITStatus
     /tmp/ccOOs4hM.s:2385   .text.ADC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccOOs4hM.s:2390   .text.ADC_ClearITPendingBit:0000000000000000 ADC_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
