   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_adc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.ADC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	ADC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	ADC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  28              		.loc 1 207 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  37              		.loc 1 209 0
  38 0002 4FF48070 		mov	r0, #256
  39 0006 0121     		movs	r1, #1
  40 0008 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  41              	.LVL0:
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  42              		.loc 1 212 0
  43 000c 4FF48070 		mov	r0, #256
  44 0010 0021     		movs	r1, #0
  45 0012 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  46              	.LVL1:
  47 0016 08BD     		pop	{r3, pc}
  48              		.cfi_endproc
  49              	.LFE110:
  51              		.section	.text.ADC_Init,"ax",%progbits
  52              		.align	2
  53              		.global	ADC_Init
  54              		.thumb
  55              		.thumb_func
  57              	ADC_Init:
  58              	.LFB111:
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  59              		.loc 1 229 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL2:
  65 0000 10B4     		push	{r4}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 4, -4
  69              	.LVL3:
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  70              		.loc 1 244 0
  71 0002 4268     		ldr	r2, [r0, #4]
  72              	.LVL4:
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  73              		.loc 1 247 0
  74 0004 22F04072 		bic	r2, r2, #50331648
  75              	.LVL5:
  76 0008 22F48072 		bic	r2, r2, #256
  77              	.LVL6:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  78              		.loc 1 252 0
  79 000c 0C79     		ldrb	r4, [r1, #4]	@ zero_extendqisi2
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  80              		.loc 1 253 0
  81 000e 0B68     		ldr	r3, [r1]
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  82              		.loc 1 252 0
  83 0010 43EA0423 		orr	r3, r3, r4, lsl #8
  84 0014 1343     		orrs	r3, r3, r2
  85              	.LVL7:
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
  86              		.loc 1 255 0
  87 0016 4360     		str	r3, [r0, #4]
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
  88              		.loc 1 258 0
  89 0018 8268     		ldr	r2, [r0, #8]
  90              	.LVL8:
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
  91              		.loc 1 261 0
  92 001a 4FF2FD73 		movw	r3, #63485
  93 001e CCF2FF03 		movt	r3, 49407
  94              	.LVL9:
  95 0022 1340     		ands	r3, r3, r2
  96              	.LVL10:
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
  97              		.loc 1 269 0
  98 0024 0C69     		ldr	r4, [r1, #16]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
  99              		.loc 1 270 0
 100 0026 CA68     		ldr	r2, [r1, #12]
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 101              		.loc 1 269 0
 102 0028 1443     		orrs	r4, r4, r2
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 103              		.loc 1 271 0
 104 002a 8A68     		ldr	r2, [r1, #8]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 105              		.loc 1 270 0
 106 002c 2243     		orrs	r2, r2, r4
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 107              		.loc 1 272 0
 108 002e 4C79     		ldrb	r4, [r1, #5]	@ zero_extendqisi2
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 109              		.loc 1 269 0
 110 0030 42EA4402 		orr	r2, r2, r4, lsl #1
 111 0034 1343     		orrs	r3, r3, r2
 112              	.LVL11:
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 113              		.loc 1 275 0
 114 0036 8360     		str	r3, [r0, #8]
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 115              		.loc 1 278 0
 116 0038 C26A     		ldr	r2, [r0, #44]
 117              	.LVL12:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 118              		.loc 1 281 0
 119 003a 22F47002 		bic	r2, r2, #15728640
 120              	.LVL13:
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 121              		.loc 1 285 0
 122 003e 0B7D     		ldrb	r3, [r1, #20]	@ zero_extendqisi2
 123 0040 013B     		subs	r3, r3, #1
 124 0042 DBB2     		uxtb	r3, r3
 125              	.LVL14:
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 126              		.loc 1 286 0
 127 0044 42EA0353 		orr	r3, r2, r3, lsl #20
 128              	.LVL15:
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 129              		.loc 1 289 0
 130 0048 C362     		str	r3, [r0, #44]
 131              	.LVL16:
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 132              		.loc 1 290 0
 133 004a 5DF8044B 		ldr	r4, [sp], #4
 134 004e 7047     		bx	lr
 135              		.cfi_endproc
 136              	.LFE111:
 138              		.section	.text.ADC_StructInit,"ax",%progbits
 139              		.align	2
 140              		.global	ADC_StructInit
 141              		.thumb
 142              		.thumb_func
 144              	ADC_StructInit:
 145              	.LFB112:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 146              		.loc 1 304 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
 151              	.LVL17:
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 152              		.loc 1 306 0
 153 0000 0023     		movs	r3, #0
 154 0002 0360     		str	r3, [r0]
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 155              		.loc 1 309 0
 156 0004 0371     		strb	r3, [r0, #4]
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 157              		.loc 1 312 0
 158 0006 4371     		strb	r3, [r0, #5]
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 159              		.loc 1 315 0
 160 0008 8360     		str	r3, [r0, #8]
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 161              		.loc 1 318 0
 162 000a C360     		str	r3, [r0, #12]
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 163              		.loc 1 321 0
 164 000c 0361     		str	r3, [r0, #16]
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 165              		.loc 1 324 0
 166 000e 0123     		movs	r3, #1
 167 0010 0375     		strb	r3, [r0, #20]
 168 0012 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE112:
 172              		.section	.text.ADC_CommonInit,"ax",%progbits
 173              		.align	2
 174              		.global	ADC_CommonInit
 175              		.thumb
 176              		.thumb_func
 178              	ADC_CommonInit:
 179              	.LFB113:
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 180              		.loc 1 335 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184              		@ link register save eliminated.
 185              	.LVL18:
 186 0000 10B4     		push	{r4}
 187              	.LCFI2:
 188              		.cfi_def_cfa_offset 4
 189              		.cfi_offset 4, -4
 190              	.LVL19:
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 191              		.loc 1 344 0
 192 0002 4FF40C52 		mov	r2, #8960
 193 0006 C4F20102 		movt	r2, 16385
 194 000a 5168     		ldr	r1, [r2, #4]
 195              	.LVL20:
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 196              		.loc 1 347 0
 197 000c 43F2E003 		movw	r3, #12512
 198 0010 CFF6FC73 		movt	r3, 65532
 199              	.LVL21:
 200 0014 0B40     		ands	r3, r3, r1
 201              	.LVL22:
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 202              		.loc 1 355 0
 203 0016 0468     		ldr	r4, [r0]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 204              		.loc 1 356 0
 205 0018 4168     		ldr	r1, [r0, #4]
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 206              		.loc 1 355 0
 207 001a 0C43     		orrs	r4, r4, r1
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 208              		.loc 1 357 0
 209 001c 8168     		ldr	r1, [r0, #8]
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 210              		.loc 1 356 0
 211 001e 2143     		orrs	r1, r1, r4
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 212              		.loc 1 358 0
 213 0020 C068     		ldr	r0, [r0, #12]
 214              	.LVL23:
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 215              		.loc 1 355 0
 216 0022 0143     		orrs	r1, r1, r0
 217 0024 0B43     		orrs	r3, r3, r1
 218              	.LVL24:
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 219              		.loc 1 361 0
 220 0026 5360     		str	r3, [r2, #4]
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 221              		.loc 1 362 0
 222 0028 5DF8044B 		ldr	r4, [sp], #4
 223 002c 7047     		bx	lr
 224              		.cfi_endproc
 225              	.LFE113:
 227 002e 00BF     		.section	.text.ADC_CommonStructInit,"ax",%progbits
 228              		.align	2
 229              		.global	ADC_CommonStructInit
 230              		.thumb
 231              		.thumb_func
 233              	ADC_CommonStructInit:
 234              	.LFB114:
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 235              		.loc 1 371 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240              	.LVL25:
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 241              		.loc 1 373 0
 242 0000 0023     		movs	r3, #0
 243 0002 0360     		str	r3, [r0]
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 244              		.loc 1 376 0
 245 0004 4360     		str	r3, [r0, #4]
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 246              		.loc 1 379 0
 247 0006 8360     		str	r3, [r0, #8]
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 248              		.loc 1 382 0
 249 0008 C360     		str	r3, [r0, #12]
 250 000a 7047     		bx	lr
 251              		.cfi_endproc
 252              	.LFE114:
 254              		.section	.text.ADC_Cmd,"ax",%progbits
 255              		.align	2
 256              		.global	ADC_Cmd
 257              		.thumb
 258              		.thumb_func
 260              	ADC_Cmd:
 261              	.LFB115:
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 262              		.loc 1 393 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266              		@ link register save eliminated.
 267              	.LVL26:
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 268              		.loc 1 397 0
 269 0000 21B1     		cbz	r1, .L7
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 270              		.loc 1 400 0
 271 0002 8368     		ldr	r3, [r0, #8]
 272 0004 43F00103 		orr	r3, r3, #1
 273 0008 8360     		str	r3, [r0, #8]
 274 000a 7047     		bx	lr
 275              	.L7:
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 276              		.loc 1 405 0
 277 000c 8368     		ldr	r3, [r0, #8]
 278 000e 23F00103 		bic	r3, r3, #1
 279 0012 8360     		str	r3, [r0, #8]
 280 0014 7047     		bx	lr
 281              		.cfi_endproc
 282              	.LFE115:
 284 0016 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 285              		.align	2
 286              		.global	ADC_AnalogWatchdogCmd
 287              		.thumb
 288              		.thumb_func
 290              	ADC_AnalogWatchdogCmd:
 291              	.LFB116:
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 292              		.loc 1 451 0
 293              		.cfi_startproc
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297              	.LVL27:
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 298              		.loc 1 458 0
 299 0000 4368     		ldr	r3, [r0, #4]
 300              	.LVL28:
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 301              		.loc 1 461 0
 302 0002 23F44003 		bic	r3, r3, #12582912
 303              	.LVL29:
 304 0006 23F40073 		bic	r3, r3, #512
 305              	.LVL30:
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 306              		.loc 1 464 0
 307 000a 1943     		orrs	r1, r1, r3
 308              	.LVL31:
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 309              		.loc 1 467 0
 310 000c 4160     		str	r1, [r0, #4]
 311 000e 7047     		bx	lr
 312              		.cfi_endproc
 313              	.LFE116:
 315              		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 316              		.align	2
 317              		.global	ADC_AnalogWatchdogThresholdsConfig
 318              		.thumb
 319              		.thumb_func
 321              	ADC_AnalogWatchdogThresholdsConfig:
 322              	.LFB117:
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 323              		.loc 1 481 0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
 328              	.LVL32:
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 329              		.loc 1 488 0
 330 0000 4162     		str	r1, [r0, #36]
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 331              		.loc 1 491 0
 332 0002 8262     		str	r2, [r0, #40]
 333 0004 7047     		bx	lr
 334              		.cfi_endproc
 335              	.LFE117:
 337 0006 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 338              		.align	2
 339              		.global	ADC_AnalogWatchdogSingleChannelConfig
 340              		.thumb
 341              		.thumb_func
 343              	ADC_AnalogWatchdogSingleChannelConfig:
 344              	.LFB118:
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 345              		.loc 1 521 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 0
 348              		@ frame_needed = 0, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350              	.LVL33:
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 351              		.loc 1 528 0
 352 0000 4368     		ldr	r3, [r0, #4]
 353              	.LVL34:
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 354              		.loc 1 531 0
 355 0002 23F01F03 		bic	r3, r3, #31
 356              	.LVL35:
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 357              		.loc 1 534 0
 358 0006 1943     		orrs	r1, r1, r3
 359              	.LVL36:
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 360              		.loc 1 537 0
 361 0008 4160     		str	r1, [r0, #4]
 362 000a 7047     		bx	lr
 363              		.cfi_endproc
 364              	.LFE118:
 366              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 367              		.align	2
 368              		.global	ADC_TempSensorVrefintCmd
 369              		.thumb
 370              		.thumb_func
 372              	ADC_TempSensorVrefintCmd:
 373              	.LFB119:
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 374              		.loc 1 586 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379              	.LVL37:
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 380              		.loc 1 589 0
 381 0000 40B1     		cbz	r0, .L13
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 382              		.loc 1 592 0
 383 0002 4FF40C53 		mov	r3, #8960
 384 0006 C4F20103 		movt	r3, 16385
 385 000a 5A68     		ldr	r2, [r3, #4]
 386 000c 42F40002 		orr	r2, r2, #8388608
 387 0010 5A60     		str	r2, [r3, #4]
 388 0012 7047     		bx	lr
 389              	.L13:
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 390              		.loc 1 597 0
 391 0014 4FF40C53 		mov	r3, #8960
 392 0018 C4F20103 		movt	r3, 16385
 393 001c 5A68     		ldr	r2, [r3, #4]
 394 001e 22F40002 		bic	r2, r2, #8388608
 395 0022 5A60     		str	r2, [r3, #4]
 396 0024 7047     		bx	lr
 397              		.cfi_endproc
 398              	.LFE119:
 400 0026 00BF     		.section	.text.ADC_VBATCmd,"ax",%progbits
 401              		.align	2
 402              		.global	ADC_VBATCmd
 403              		.thumb
 404              		.thumb_func
 406              	ADC_VBATCmd:
 407              	.LFB120:
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 408              		.loc 1 608 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413              	.LVL38:
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 414              		.loc 1 611 0
 415 0000 40B1     		cbz	r0, .L16
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 416              		.loc 1 614 0
 417 0002 4FF40C53 		mov	r3, #8960
 418 0006 C4F20103 		movt	r3, 16385
 419 000a 5A68     		ldr	r2, [r3, #4]
 420 000c 42F48002 		orr	r2, r2, #4194304
 421 0010 5A60     		str	r2, [r3, #4]
 422 0012 7047     		bx	lr
 423              	.L16:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 424              		.loc 1 619 0
 425 0014 4FF40C53 		mov	r3, #8960
 426 0018 C4F20103 		movt	r3, 16385
 427 001c 5A68     		ldr	r2, [r3, #4]
 428 001e 22F48002 		bic	r2, r2, #4194304
 429 0022 5A60     		str	r2, [r3, #4]
 430 0024 7047     		bx	lr
 431              		.cfi_endproc
 432              	.LFE120:
 434 0026 00BF     		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 435              		.align	2
 436              		.global	ADC_RegularChannelConfig
 437              		.thumb
 438              		.thumb_func
 440              	ADC_RegularChannelConfig:
 441              	.LFB121:
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 442              		.loc 1 709 0
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 0
 445              		@ frame_needed = 0, uses_anonymous_args = 0
 446              		@ link register save eliminated.
 447              	.LVL39:
 448 0000 70B4     		push	{r4, r5, r6}
 449              	.LCFI3:
 450              		.cfi_def_cfa_offset 12
 451              		.cfi_offset 4, -12
 452              		.cfi_offset 5, -8
 453              		.cfi_offset 6, -4
 454              	.LVL40:
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 455              		.loc 1 718 0
 456 0002 0929     		cmp	r1, #9
 457 0004 0ED9     		bls	.L19
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 458              		.loc 1 721 0
 459 0006 C668     		ldr	r6, [r0, #12]
 460              	.LVL41:
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 461              		.loc 1 724 0
 462 0008 A1F10A04 		sub	r4, r1, #10
 463 000c 04EB4404 		add	r4, r4, r4, lsl #1
 464 0010 0725     		movs	r5, #7
 465 0012 A540     		lsls	r5, r5, r4
 466              	.LVL42:
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 467              		.loc 1 727 0
 468 0014 26EA0505 		bic	r5, r6, r5
 469              	.LVL43:
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 470              		.loc 1 730 0
 471 0018 03FA04F4 		lsl	r4, r3, r4
 472              	.LVL44:
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 473              		.loc 1 733 0
 474 001c 45EA0403 		orr	r3, r5, r4
 475              	.LVL45:
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 476              		.loc 1 736 0
 477 0020 C360     		str	r3, [r0, #12]
 478 0022 0BE0     		b	.L20
 479              	.LVL46:
 480              	.L19:
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 481              		.loc 1 741 0
 482 0024 0669     		ldr	r6, [r0, #16]
 483              	.LVL47:
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 484              		.loc 1 744 0
 485 0026 01EB4104 		add	r4, r1, r1, lsl #1
 486 002a 0725     		movs	r5, #7
 487 002c A540     		lsls	r5, r5, r4
 488              	.LVL48:
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 489              		.loc 1 747 0
 490 002e 26EA0505 		bic	r5, r6, r5
 491              	.LVL49:
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 492              		.loc 1 750 0
 493 0032 03FA04F4 		lsl	r4, r3, r4
 494              	.LVL50:
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 495              		.loc 1 753 0
 496 0036 45EA0403 		orr	r3, r5, r4
 497              	.LVL51:
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 498              		.loc 1 756 0
 499 003a 0361     		str	r3, [r0, #16]
 500              	.L20:
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 501              		.loc 1 759 0
 502 003c 062A     		cmp	r2, #6
 503 003e 0CD8     		bhi	.L21
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 504              		.loc 1 762 0
 505 0040 446B     		ldr	r4, [r0, #52]
 506              	.LVL52:
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 507              		.loc 1 765 0
 508 0042 013A     		subs	r2, r2, #1
 509              	.LVL53:
 510 0044 02EB8202 		add	r2, r2, r2, lsl #2
 511 0048 1F23     		movs	r3, #31
 512 004a 9340     		lsls	r3, r3, r2
 513              	.LVL54:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 514              		.loc 1 768 0
 515 004c 24EA0303 		bic	r3, r4, r3
 516              	.LVL55:
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 517              		.loc 1 771 0
 518 0050 9140     		lsls	r1, r1, r2
 519              	.LVL56:
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 520              		.loc 1 774 0
 521 0052 43EA0102 		orr	r2, r3, r1
 522              	.LVL57:
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 523              		.loc 1 777 0
 524 0056 4263     		str	r2, [r0, #52]
 525 0058 1AE0     		b	.L18
 526              	.LVL58:
 527              	.L21:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 528              		.loc 1 780 0
 529 005a 0C2A     		cmp	r2, #12
 530 005c 0CD8     		bhi	.L23
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 531              		.loc 1 783 0
 532 005e 046B     		ldr	r4, [r0, #48]
 533              	.LVL59:
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 534              		.loc 1 786 0
 535 0060 073A     		subs	r2, r2, #7
 536              	.LVL60:
 537 0062 02EB8202 		add	r2, r2, r2, lsl #2
 538 0066 1F23     		movs	r3, #31
 539 0068 9340     		lsls	r3, r3, r2
 540              	.LVL61:
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 541              		.loc 1 789 0
 542 006a 24EA0303 		bic	r3, r4, r3
 543              	.LVL62:
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 544              		.loc 1 792 0
 545 006e 9140     		lsls	r1, r1, r2
 546              	.LVL63:
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 547              		.loc 1 795 0
 548 0070 43EA0102 		orr	r2, r3, r1
 549              	.LVL64:
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 550              		.loc 1 798 0
 551 0074 0263     		str	r2, [r0, #48]
 552 0076 0BE0     		b	.L18
 553              	.LVL65:
 554              	.L23:
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 555              		.loc 1 804 0
 556 0078 C46A     		ldr	r4, [r0, #44]
 557              	.LVL66:
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 558              		.loc 1 807 0
 559 007a 0D3A     		subs	r2, r2, #13
 560              	.LVL67:
 561 007c 02EB8202 		add	r2, r2, r2, lsl #2
 562 0080 1F23     		movs	r3, #31
 563 0082 9340     		lsls	r3, r3, r2
 564              	.LVL68:
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 565              		.loc 1 810 0
 566 0084 24EA0303 		bic	r3, r4, r3
 567              	.LVL69:
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 568              		.loc 1 813 0
 569 0088 9140     		lsls	r1, r1, r2
 570              	.LVL70:
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 571              		.loc 1 816 0
 572 008a 43EA0102 		orr	r2, r3, r1
 573              	.LVL71:
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 574              		.loc 1 819 0
 575 008e C262     		str	r2, [r0, #44]
 576              	.L18:
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 577              		.loc 1 821 0
 578 0090 70BC     		pop	{r4, r5, r6}
 579 0092 7047     		bx	lr
 580              		.cfi_endproc
 581              	.LFE121:
 583              		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 584              		.align	2
 585              		.global	ADC_SoftwareStartConv
 586              		.thumb
 587              		.thumb_func
 589              	ADC_SoftwareStartConv:
 590              	.LFB122:
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 591              		.loc 1 829 0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 596              	.LVL72:
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 597              		.loc 1 834 0
 598 0000 8368     		ldr	r3, [r0, #8]
 599 0002 43F08043 		orr	r3, r3, #1073741824
 600 0006 8360     		str	r3, [r0, #8]
 601 0008 7047     		bx	lr
 602              		.cfi_endproc
 603              	.LFE122:
 605 000a 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 606              		.align	2
 607              		.global	ADC_GetSoftwareStartConvStatus
 608              		.thumb
 609              		.thumb_func
 611              	ADC_GetSoftwareStartConvStatus:
 612              	.LFB123:
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 613              		.loc 1 843 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              		@ link register save eliminated.
 618              	.LVL73:
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 619              		.loc 1 849 0
 620 0000 8068     		ldr	r0, [r0, #8]
 621              	.LVL74:
 622 0002 00F48000 		and	r0, r0, #4194304
 623              	.LVL75:
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 624              		.loc 1 862 0
 625 0006 0030     		adds	r0, r0, #0
 626 0008 18BF     		it	ne
 627 000a 0120     		movne	r0, #1
 628              	.LVL76:
 629 000c 7047     		bx	lr
 630              		.cfi_endproc
 631              	.LFE123:
 633 000e 00BF     		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 634              		.align	2
 635              		.global	ADC_EOCOnEachRegularChannelCmd
 636              		.thumb
 637              		.thumb_func
 639              	ADC_EOCOnEachRegularChannelCmd:
 640              	.LFB124:
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 641              		.loc 1 873 0
 642              		.cfi_startproc
 643              		@ args = 0, pretend = 0, frame = 0
 644              		@ frame_needed = 0, uses_anonymous_args = 0
 645              		@ link register save eliminated.
 646              	.LVL77:
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 647              		.loc 1 878 0
 648 0000 21B1     		cbz	r1, .L29
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 649              		.loc 1 881 0
 650 0002 8368     		ldr	r3, [r0, #8]
 651 0004 43F48063 		orr	r3, r3, #1024
 652 0008 8360     		str	r3, [r0, #8]
 653 000a 7047     		bx	lr
 654              	.L29:
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 655              		.loc 1 886 0
 656 000c 8368     		ldr	r3, [r0, #8]
 657 000e 23F48063 		bic	r3, r3, #1024
 658 0012 8360     		str	r3, [r0, #8]
 659 0014 7047     		bx	lr
 660              		.cfi_endproc
 661              	.LFE124:
 663 0016 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 664              		.align	2
 665              		.global	ADC_ContinuousModeCmd
 666              		.thumb
 667              		.thumb_func
 669              	ADC_ContinuousModeCmd:
 670              	.LFB125:
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 671              		.loc 1 898 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 0
 674              		@ frame_needed = 0, uses_anonymous_args = 0
 675              		@ link register save eliminated.
 676              	.LVL78:
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 677              		.loc 1 903 0
 678 0000 21B1     		cbz	r1, .L32
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 679              		.loc 1 906 0
 680 0002 8368     		ldr	r3, [r0, #8]
 681 0004 43F00203 		orr	r3, r3, #2
 682 0008 8360     		str	r3, [r0, #8]
 683 000a 7047     		bx	lr
 684              	.L32:
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 685              		.loc 1 911 0
 686 000c 8368     		ldr	r3, [r0, #8]
 687 000e 23F00203 		bic	r3, r3, #2
 688 0012 8360     		str	r3, [r0, #8]
 689 0014 7047     		bx	lr
 690              		.cfi_endproc
 691              	.LFE125:
 693 0016 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 694              		.align	2
 695              		.global	ADC_DiscModeChannelCountConfig
 696              		.thumb
 697              		.thumb_func
 699              	ADC_DiscModeChannelCountConfig:
 700              	.LFB126:
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 701              		.loc 1 924 0
 702              		.cfi_startproc
 703              		@ args = 0, pretend = 0, frame = 0
 704              		@ frame_needed = 0, uses_anonymous_args = 0
 705              		@ link register save eliminated.
 706              	.LVL79:
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 707              		.loc 1 933 0
 708 0000 4368     		ldr	r3, [r0, #4]
 709              	.LVL80:
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 710              		.loc 1 936 0
 711 0002 23F46043 		bic	r3, r3, #57344
 712              	.LVL81:
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 713              		.loc 1 939 0
 714 0006 0139     		subs	r1, r1, #1
 715              	.LVL82:
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 716              		.loc 1 940 0
 717 0008 43EA4133 		orr	r3, r3, r1, lsl #13
 718              	.LVL83:
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 719              		.loc 1 943 0
 720 000c 4360     		str	r3, [r0, #4]
 721 000e 7047     		bx	lr
 722              		.cfi_endproc
 723              	.LFE126:
 725              		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 726              		.align	2
 727              		.global	ADC_DiscModeCmd
 728              		.thumb
 729              		.thumb_func
 731              	ADC_DiscModeCmd:
 732              	.LFB127:
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 733              		.loc 1 956 0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              		@ link register save eliminated.
 738              	.LVL84:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 739              		.loc 1 961 0
 740 0000 21B1     		cbz	r1, .L36
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 741              		.loc 1 964 0
 742 0002 4368     		ldr	r3, [r0, #4]
 743 0004 43F40063 		orr	r3, r3, #2048
 744 0008 4360     		str	r3, [r0, #4]
 745 000a 7047     		bx	lr
 746              	.L36:
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 747              		.loc 1 969 0
 748 000c 4368     		ldr	r3, [r0, #4]
 749 000e 23F40063 		bic	r3, r3, #2048
 750 0012 4360     		str	r3, [r0, #4]
 751 0014 7047     		bx	lr
 752              		.cfi_endproc
 753              	.LFE127:
 755 0016 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 756              		.align	2
 757              		.global	ADC_GetConversionValue
 758              		.thumb
 759              		.thumb_func
 761              	ADC_GetConversionValue:
 762              	.LFB128:
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 763              		.loc 1 979 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768              	.LVL85:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 769              		.loc 1 984 0
 770 0000 C06C     		ldr	r0, [r0, #76]
 771              	.LVL86:
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 772              		.loc 1 985 0
 773 0002 80B2     		uxth	r0, r0
 774 0004 7047     		bx	lr
 775              		.cfi_endproc
 776              	.LFE128:
 778 0006 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 779              		.align	2
 780              		.global	ADC_GetMultiModeConversionValue
 781              		.thumb
 782              		.thumb_func
 784              	ADC_GetMultiModeConversionValue:
 785              	.LFB129:
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 786              		.loc 1 1000 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 791              		.loc 1 1002 0
 792 0000 42F20833 		movw	r3, #8968
 793 0004 C4F20103 		movt	r3, 16385
 794 0008 1868     		ldr	r0, [r3]
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 795              		.loc 1 1003 0
 796 000a 7047     		bx	lr
 797              		.cfi_endproc
 798              	.LFE129:
 800              		.section	.text.ADC_DMACmd,"ax",%progbits
 801              		.align	2
 802              		.global	ADC_DMACmd
 803              		.thumb
 804              		.thumb_func
 806              	ADC_DMACmd:
 807              	.LFB130:
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 808              		.loc 1 1049 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 0
 811              		@ frame_needed = 0, uses_anonymous_args = 0
 812              		@ link register save eliminated.
 813              	.LVL87:
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 814              		.loc 1 1053 0
 815 0000 21B1     		cbz	r1, .L41
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 816              		.loc 1 1056 0
 817 0002 8368     		ldr	r3, [r0, #8]
 818 0004 43F48073 		orr	r3, r3, #256
 819 0008 8360     		str	r3, [r0, #8]
 820 000a 7047     		bx	lr
 821              	.L41:
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 822              		.loc 1 1061 0
 823 000c 8368     		ldr	r3, [r0, #8]
 824 000e 23F48073 		bic	r3, r3, #256
 825 0012 8360     		str	r3, [r0, #8]
 826 0014 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE130:
 830 0016 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 831              		.align	2
 832              		.global	ADC_DMARequestAfterLastTransferCmd
 833              		.thumb
 834              		.thumb_func
 836              	ADC_DMARequestAfterLastTransferCmd:
 837              	.LFB131:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 838              		.loc 1 1073 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 843              	.LVL88:
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 844              		.loc 1 1077 0
 845 0000 21B1     		cbz	r1, .L44
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 846              		.loc 1 1080 0
 847 0002 8368     		ldr	r3, [r0, #8]
 848 0004 43F40073 		orr	r3, r3, #512
 849 0008 8360     		str	r3, [r0, #8]
 850 000a 7047     		bx	lr
 851              	.L44:
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 852              		.loc 1 1085 0
 853 000c 8368     		ldr	r3, [r0, #8]
 854 000e 23F40073 		bic	r3, r3, #512
 855 0012 8360     		str	r3, [r0, #8]
 856 0014 7047     		bx	lr
 857              		.cfi_endproc
 858              	.LFE131:
 860 0016 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 861              		.align	2
 862              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 863              		.thumb
 864              		.thumb_func
 866              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 867              	.LFB132:
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 868              		.loc 1 1100 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 0
 871              		@ frame_needed = 0, uses_anonymous_args = 0
 872              		@ link register save eliminated.
 873              	.LVL89:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 874              		.loc 1 1103 0
 875 0000 40B1     		cbz	r0, .L47
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 876              		.loc 1 1106 0
 877 0002 4FF40C53 		mov	r3, #8960
 878 0006 C4F20103 		movt	r3, 16385
 879 000a 5A68     		ldr	r2, [r3, #4]
 880 000c 42F40052 		orr	r2, r2, #8192
 881 0010 5A60     		str	r2, [r3, #4]
 882 0012 7047     		bx	lr
 883              	.L47:
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 884              		.loc 1 1111 0
 885 0014 4FF40C53 		mov	r3, #8960
 886 0018 C4F20103 		movt	r3, 16385
 887 001c 5A68     		ldr	r2, [r3, #4]
 888 001e 22F40052 		bic	r2, r2, #8192
 889 0022 5A60     		str	r2, [r3, #4]
 890 0024 7047     		bx	lr
 891              		.cfi_endproc
 892              	.LFE132:
 894 0026 00BF     		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 895              		.align	2
 896              		.global	ADC_InjectedChannelConfig
 897              		.thumb
 898              		.thumb_func
 900              	ADC_InjectedChannelConfig:
 901              	.LFB133:
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 902              		.loc 1 1187 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907              	.LVL90:
 908 0000 70B4     		push	{r4, r5, r6}
 909              	.LCFI4:
 910              		.cfi_def_cfa_offset 12
 911              		.cfi_offset 4, -12
 912              		.cfi_offset 5, -8
 913              		.cfi_offset 6, -4
 914              	.LVL91:
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 915              		.loc 1 1195 0
 916 0002 0929     		cmp	r1, #9
 917 0004 0ED9     		bls	.L50
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 918              		.loc 1 1198 0
 919 0006 C668     		ldr	r6, [r0, #12]
 920              	.LVL92:
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 921              		.loc 1 1200 0
 922 0008 A1F10A04 		sub	r4, r1, #10
 923 000c 04EB4404 		add	r4, r4, r4, lsl #1
 924 0010 0725     		movs	r5, #7
 925 0012 A540     		lsls	r5, r5, r4
 926              	.LVL93:
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 927              		.loc 1 1202 0
 928 0014 26EA0505 		bic	r5, r6, r5
 929              	.LVL94:
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 930              		.loc 1 1204 0
 931 0018 03FA04F4 		lsl	r4, r3, r4
 932              	.LVL95:
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 933              		.loc 1 1206 0
 934 001c 45EA0403 		orr	r3, r5, r4
 935              	.LVL96:
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 936              		.loc 1 1208 0
 937 0020 C360     		str	r3, [r0, #12]
 938 0022 0BE0     		b	.L51
 939              	.LVL97:
 940              	.L50:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 941              		.loc 1 1213 0
 942 0024 0669     		ldr	r6, [r0, #16]
 943              	.LVL98:
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 944              		.loc 1 1215 0
 945 0026 01EB4104 		add	r4, r1, r1, lsl #1
 946 002a 0725     		movs	r5, #7
 947 002c A540     		lsls	r5, r5, r4
 948              	.LVL99:
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 949              		.loc 1 1217 0
 950 002e 26EA0505 		bic	r5, r6, r5
 951              	.LVL100:
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 952              		.loc 1 1219 0
 953 0032 03FA04F4 		lsl	r4, r3, r4
 954              	.LVL101:
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 955              		.loc 1 1221 0
 956 0036 45EA0403 		orr	r3, r5, r4
 957              	.LVL102:
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 958              		.loc 1 1223 0
 959 003a 0361     		str	r3, [r0, #16]
 960              	.L51:
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 961              		.loc 1 1227 0
 962 003c 846B     		ldr	r4, [r0, #56]
 963              	.LVL103:
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 964              		.loc 1 1229 0
 965 003e C4F30153 		ubfx	r3, r4, #20, #2
 966              	.LVL104:
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 967              		.loc 1 1231 0
 968 0042 D31A     		subs	r3, r2, r3
 969              	.LVL105:
 970 0044 0233     		adds	r3, r3, #2
 971 0046 DBB2     		uxtb	r3, r3
 972 0048 03EB8303 		add	r3, r3, r3, lsl #2
 973 004c 1F22     		movs	r2, #31
 974              	.LVL106:
 975 004e 9A40     		lsls	r2, r2, r3
 976              	.LVL107:
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 977              		.loc 1 1233 0
 978 0050 24EA0204 		bic	r4, r4, r2
 979              	.LVL108:
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 980              		.loc 1 1235 0
 981 0054 9940     		lsls	r1, r1, r3
 982              	.LVL109:
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 983              		.loc 1 1237 0
 984 0056 44EA0103 		orr	r3, r4, r1
 985              	.LVL110:
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 986              		.loc 1 1239 0
 987 005a 8363     		str	r3, [r0, #56]
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 988              		.loc 1 1240 0
 989 005c 70BC     		pop	{r4, r5, r6}
 990 005e 7047     		bx	lr
 991              		.cfi_endproc
 992              	.LFE133:
 994              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 995              		.align	2
 996              		.global	ADC_InjectedSequencerLengthConfig
 997              		.thumb
 998              		.thumb_func
 1000              	ADC_InjectedSequencerLengthConfig:
 1001              	.LFB134:
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1002              		.loc 1 1250 0
 1003              		.cfi_startproc
 1004              		@ args = 0, pretend = 0, frame = 0
 1005              		@ frame_needed = 0, uses_anonymous_args = 0
 1006              		@ link register save eliminated.
 1007              	.LVL111:
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1008              		.loc 1 1258 0
 1009 0000 836B     		ldr	r3, [r0, #56]
 1010              	.LVL112:
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1011              		.loc 1 1261 0
 1012 0002 23F44013 		bic	r3, r3, #3145728
 1013              	.LVL113:
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1014              		.loc 1 1264 0
 1015 0006 0139     		subs	r1, r1, #1
 1016              	.LVL114:
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1017              		.loc 1 1265 0
 1018 0008 43EA0153 		orr	r3, r3, r1, lsl #20
 1019              	.LVL115:
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1020              		.loc 1 1268 0
 1021 000c 8363     		str	r3, [r0, #56]
 1022 000e 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE134:
 1026              		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1027              		.align	2
 1028              		.global	ADC_SetInjectedOffset
 1029              		.thumb
 1030              		.thumb_func
 1032              	ADC_SetInjectedOffset:
 1033              	.LFB135:
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1034              		.loc 1 1285 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 8
 1037              		@ frame_needed = 0, uses_anonymous_args = 0
 1038              		@ link register save eliminated.
 1039              	.LVL116:
 1040 0000 82B0     		sub	sp, sp, #8
 1041              	.LCFI5:
 1042              		.cfi_def_cfa_offset 8
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1043              		.loc 1 1286 0
 1044 0002 0023     		movs	r3, #0
 1045 0004 0193     		str	r3, [sp, #4]
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1046              		.loc 1 1292 0
 1047 0006 0190     		str	r0, [sp, #4]
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1048              		.loc 1 1293 0
 1049 0008 019B     		ldr	r3, [sp, #4]
 1050 000a 1944     		add	r1, r1, r3
 1051              	.LVL117:
 1052 000c 0191     		str	r1, [sp, #4]
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1053              		.loc 1 1296 0
 1054 000e 019B     		ldr	r3, [sp, #4]
 1055 0010 1A60     		str	r2, [r3]
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1056              		.loc 1 1297 0
 1057 0012 02B0     		add	sp, sp, #8
 1058              		@ sp needed
 1059 0014 7047     		bx	lr
 1060              		.cfi_endproc
 1061              	.LFE135:
 1063 0016 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1064              		.align	2
 1065              		.global	ADC_ExternalTrigInjectedConvConfig
 1066              		.thumb
 1067              		.thumb_func
 1069              	ADC_ExternalTrigInjectedConvConfig:
 1070              	.LFB136:
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1071              		.loc 1 1323 0
 1072              		.cfi_startproc
 1073              		@ args = 0, pretend = 0, frame = 0
 1074              		@ frame_needed = 0, uses_anonymous_args = 0
 1075              		@ link register save eliminated.
 1076              	.LVL118:
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1077              		.loc 1 1330 0
 1078 0000 8368     		ldr	r3, [r0, #8]
 1079              	.LVL119:
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1080              		.loc 1 1333 0
 1081 0002 23F47023 		bic	r3, r3, #983040
 1082              	.LVL120:
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1083              		.loc 1 1336 0
 1084 0006 1943     		orrs	r1, r1, r3
 1085              	.LVL121:
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1086              		.loc 1 1339 0
 1087 0008 8160     		str	r1, [r0, #8]
 1088 000a 7047     		bx	lr
 1089              		.cfi_endproc
 1090              	.LFE136:
 1092              		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1093              		.align	2
 1094              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1095              		.thumb
 1096              		.thumb_func
 1098              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1099              	.LFB137:
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1100              		.loc 1 1357 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL122:
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1106              		.loc 1 1363 0
 1107 0000 8368     		ldr	r3, [r0, #8]
 1108              	.LVL123:
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1109              		.loc 1 1365 0
 1110 0002 23F44013 		bic	r3, r3, #3145728
 1111              	.LVL124:
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1112              		.loc 1 1367 0
 1113 0006 1943     		orrs	r1, r1, r3
 1114              	.LVL125:
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1115              		.loc 1 1369 0
 1116 0008 8160     		str	r1, [r0, #8]
 1117 000a 7047     		bx	lr
 1118              		.cfi_endproc
 1119              	.LFE137:
 1121              		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1122              		.align	2
 1123              		.global	ADC_SoftwareStartInjectedConv
 1124              		.thumb
 1125              		.thumb_func
 1127              	ADC_SoftwareStartInjectedConv:
 1128              	.LFB138:
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1129              		.loc 1 1378 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 0
 1132              		@ frame_needed = 0, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134              	.LVL126:
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1135              		.loc 1 1382 0
 1136 0000 8368     		ldr	r3, [r0, #8]
 1137 0002 43F48003 		orr	r3, r3, #4194304
 1138 0006 8360     		str	r3, [r0, #8]
 1139 0008 7047     		bx	lr
 1140              		.cfi_endproc
 1141              	.LFE138:
 1143 000a 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1144              		.align	2
 1145              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1146              		.thumb
 1147              		.thumb_func
 1149              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1150              	.LFB139:
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1151              		.loc 1 1391 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 0
 1154              		@ frame_needed = 0, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156              	.LVL127:
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1157              		.loc 1 1397 0
 1158 0000 8068     		ldr	r0, [r0, #8]
 1159              	.LVL128:
 1160 0002 00F48000 		and	r0, r0, #4194304
 1161              	.LVL129:
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1162              		.loc 1 1409 0
 1163 0006 0030     		adds	r0, r0, #0
 1164 0008 18BF     		it	ne
 1165 000a 0120     		movne	r0, #1
 1166              	.LVL130:
 1167 000c 7047     		bx	lr
 1168              		.cfi_endproc
 1169              	.LFE139:
 1171 000e 00BF     		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1172              		.align	2
 1173              		.global	ADC_AutoInjectedConvCmd
 1174              		.thumb
 1175              		.thumb_func
 1177              	ADC_AutoInjectedConvCmd:
 1178              	.LFB140:
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1179              		.loc 1 1420 0
 1180              		.cfi_startproc
 1181              		@ args = 0, pretend = 0, frame = 0
 1182              		@ frame_needed = 0, uses_anonymous_args = 0
 1183              		@ link register save eliminated.
 1184              	.LVL131:
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1185              		.loc 1 1424 0
 1186 0000 21B1     		cbz	r1, .L61
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1187              		.loc 1 1427 0
 1188 0002 4368     		ldr	r3, [r0, #4]
 1189 0004 43F48063 		orr	r3, r3, #1024
 1190 0008 4360     		str	r3, [r0, #4]
 1191 000a 7047     		bx	lr
 1192              	.L61:
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1193              		.loc 1 1432 0
 1194 000c 4368     		ldr	r3, [r0, #4]
 1195 000e 23F48063 		bic	r3, r3, #1024
 1196 0012 4360     		str	r3, [r0, #4]
 1197 0014 7047     		bx	lr
 1198              		.cfi_endproc
 1199              	.LFE140:
 1201 0016 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 1202              		.align	2
 1203              		.global	ADC_InjectedDiscModeCmd
 1204              		.thumb
 1205              		.thumb_func
 1207              	ADC_InjectedDiscModeCmd:
 1208              	.LFB141:
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1209              		.loc 1 1446 0
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 0
 1212              		@ frame_needed = 0, uses_anonymous_args = 0
 1213              		@ link register save eliminated.
 1214              	.LVL132:
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1215              		.loc 1 1450 0
 1216 0000 21B1     		cbz	r1, .L64
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 1217              		.loc 1 1453 0
 1218 0002 4368     		ldr	r3, [r0, #4]
 1219 0004 43F48053 		orr	r3, r3, #4096
 1220 0008 4360     		str	r3, [r0, #4]
 1221 000a 7047     		bx	lr
 1222              	.L64:
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 1223              		.loc 1 1458 0
 1224 000c 4368     		ldr	r3, [r0, #4]
 1225 000e 23F48053 		bic	r3, r3, #4096
 1226 0012 4360     		str	r3, [r0, #4]
 1227 0014 7047     		bx	lr
 1228              		.cfi_endproc
 1229              	.LFE141:
 1231 0016 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 1232              		.align	2
 1233              		.global	ADC_GetInjectedConversionValue
 1234              		.thumb
 1235              		.thumb_func
 1237              	ADC_GetInjectedConversionValue:
 1238              	.LFB142:
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1239              		.loc 1 1474 0
 1240              		.cfi_startproc
 1241              		@ args = 0, pretend = 0, frame = 8
 1242              		@ frame_needed = 0, uses_anonymous_args = 0
 1243              		@ link register save eliminated.
 1244              	.LVL133:
 1245 0000 82B0     		sub	sp, sp, #8
 1246              	.LCFI6:
 1247              		.cfi_def_cfa_offset 8
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 1248              		.loc 1 1475 0
 1249 0002 0023     		movs	r3, #0
 1250 0004 0193     		str	r3, [sp, #4]
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1251              		.loc 1 1481 0
 1252 0006 0190     		str	r0, [sp, #4]
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 1253              		.loc 1 1482 0
 1254 0008 019B     		ldr	r3, [sp, #4]
 1255 000a 1944     		add	r1, r1, r3
 1256              	.LVL134:
 1257 000c 01F12803 		add	r3, r1, #40
 1258 0010 0193     		str	r3, [sp, #4]
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 1259              		.loc 1 1485 0
 1260 0012 019B     		ldr	r3, [sp, #4]
 1261 0014 1868     		ldr	r0, [r3]
 1262              	.LVL135:
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1263              		.loc 1 1486 0
 1264 0016 80B2     		uxth	r0, r0
 1265 0018 02B0     		add	sp, sp, #8
 1266              		@ sp needed
 1267 001a 7047     		bx	lr
 1268              		.cfi_endproc
 1269              	.LFE142:
 1271              		.section	.text.ADC_ITConfig,"ax",%progbits
 1272              		.align	2
 1273              		.global	ADC_ITConfig
 1274              		.thumb
 1275              		.thumb_func
 1277              	ADC_ITConfig:
 1278              	.LFB143:
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1279              		.loc 1 1582 0
 1280              		.cfi_startproc
 1281              		@ args = 0, pretend = 0, frame = 0
 1282              		@ frame_needed = 0, uses_anonymous_args = 0
 1283              		@ link register save eliminated.
 1284              	.LVL136:
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 1285              		.loc 1 1590 0
 1286 0000 C9B2     		uxtb	r1, r1
 1287              	.LVL137:
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 1288              		.loc 1 1591 0
 1289 0002 0123     		movs	r3, #1
 1290 0004 03FA01F1 		lsl	r1, r3, r1
 1291              	.LVL138:
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1292              		.loc 1 1593 0
 1293 0008 1AB1     		cbz	r2, .L68
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 1294              		.loc 1 1596 0
 1295 000a 4368     		ldr	r3, [r0, #4]
 1296 000c 1943     		orrs	r1, r1, r3
 1297              	.LVL139:
 1298 000e 4160     		str	r1, [r0, #4]
 1299 0010 7047     		bx	lr
 1300              	.LVL140:
 1301              	.L68:
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 1302              		.loc 1 1601 0
 1303 0012 4368     		ldr	r3, [r0, #4]
 1304 0014 23EA0101 		bic	r1, r3, r1
 1305              	.LVL141:
 1306 0018 4160     		str	r1, [r0, #4]
 1307 001a 7047     		bx	lr
 1308              		.cfi_endproc
 1309              	.LFE143:
 1311              		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 1312              		.align	2
 1313              		.global	ADC_GetFlagStatus
 1314              		.thumb
 1315              		.thumb_func
 1317              	ADC_GetFlagStatus:
 1318              	.LFB144:
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1319              		.loc 1 1619 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 1324              	.LVL142:
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 1325              		.loc 1 1626 0
 1326 0000 0068     		ldr	r0, [r0]
 1327              	.LVL143:
 1328 0002 0840     		ands	r0, r0, r1
 1329              	.LVL144:
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1330              		.loc 1 1638 0
 1331 0004 0030     		adds	r0, r0, #0
 1332 0006 18BF     		it	ne
 1333 0008 0120     		movne	r0, #1
 1334              	.LVL145:
 1335 000a 7047     		bx	lr
 1336              		.cfi_endproc
 1337              	.LFE144:
 1339              		.section	.text.ADC_ClearFlag,"ax",%progbits
 1340              		.align	2
 1341              		.global	ADC_ClearFlag
 1342              		.thumb
 1343              		.thumb_func
 1345              	ADC_ClearFlag:
 1346              	.LFB145:
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1347              		.loc 1 1654 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 0
 1350              		@ frame_needed = 0, uses_anonymous_args = 0
 1351              		@ link register save eliminated.
 1352              	.LVL146:
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 1353              		.loc 1 1660 0
 1354 0000 C943     		mvns	r1, r1
 1355              	.LVL147:
 1356 0002 0160     		str	r1, [r0]
 1357 0004 7047     		bx	lr
 1358              		.cfi_endproc
 1359              	.LFE145:
 1361 0006 00BF     		.section	.text.ADC_GetITStatus,"ax",%progbits
 1362              		.align	2
 1363              		.global	ADC_GetITStatus
 1364              		.thumb
 1365              		.thumb_func
 1367              	ADC_GetITStatus:
 1368              	.LFB146:
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1369              		.loc 1 1675 0
 1370              		.cfi_startproc
 1371              		@ args = 0, pretend = 0, frame = 0
 1372              		@ frame_needed = 0, uses_anonymous_args = 0
 1373              		@ link register save eliminated.
 1374              	.LVL148:
 1375 0000 10B4     		push	{r4}
 1376              	.LCFI7:
 1377              		.cfi_def_cfa_offset 4
 1378              		.cfi_offset 4, -4
 1379              	.LVL149:
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 1380              		.loc 1 1687 0
 1381 0002 4268     		ldr	r2, [r0, #4]
 1382 0004 CBB2     		uxtb	r3, r1
 1383 0006 0124     		movs	r4, #1
 1384 0008 04FA03F3 		lsl	r3, r4, r3
 1385 000c 1A40     		ands	r2, r2, r3
 1386              	.LVL150:
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 1387              		.loc 1 1690 0
 1388 000e 0368     		ldr	r3, [r0]
 1389 0010 13EA1121 		ands	r1, r3, r1, lsr #8
 1390              	.LVL151:
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1391              		.loc 1 1698 0
 1392 0014 08BF     		it	eq
 1393 0016 0020     		moveq	r0, #0
 1394              	.LVL152:
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 1395              		.loc 1 1690 0
 1396 0018 03D0     		beq	.L75
 1397              		.loc 1 1698 0 discriminator 1
 1398 001a 101C     		adds	r0, r2, #0
 1399 001c 18BF     		it	ne
 1400 001e 0120     		movne	r0, #1
 1401 0020 FFE7     		b	.L75
 1402              	.L75:
 1403              	.LVL153:
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1404              		.loc 1 1702 0
 1405 0022 5DF8044B 		ldr	r4, [sp], #4
 1406 0026 7047     		bx	lr
 1407              		.cfi_endproc
 1408              	.LFE146:
 1410              		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 1411              		.align	2
 1412              		.global	ADC_ClearITPendingBit
 1413              		.thumb
 1414              		.thumb_func
 1416              	ADC_ClearITPendingBit:
 1417              	.LFB147:
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1418              		.loc 1 1716 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 0
 1421              		@ frame_needed = 0, uses_anonymous_args = 0
 1422              		@ link register save eliminated.
 1423              	.LVL154:
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 1424              		.loc 1 1724 0
 1425 0000 6FEA1121 		mvn	r1, r1, lsr #8
 1426              	.LVL155:
 1427 0004 0160     		str	r1, [r0]
 1428 0006 7047     		bx	lr
 1429              		.cfi_endproc
 1430              	.LFE147:
 1432              		.text
 1433              	.Letext0:
 1434              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1435              		.file 3 "/usr/include/newlib/stdint.h"
 1436              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1437              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_adc.h"
 1438              		.file 6 "libs/CMSIS/Include/core_cm4.h"
 1439              		.file 7 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_adc.c
     /tmp/ccOGjAPu.s:20     .text.ADC_DeInit:0000000000000000 $t
     /tmp/ccOGjAPu.s:25     .text.ADC_DeInit:0000000000000000 ADC_DeInit
     /tmp/ccOGjAPu.s:52     .text.ADC_Init:0000000000000000 $t
     /tmp/ccOGjAPu.s:57     .text.ADC_Init:0000000000000000 ADC_Init
     /tmp/ccOGjAPu.s:139    .text.ADC_StructInit:0000000000000000 $t
     /tmp/ccOGjAPu.s:144    .text.ADC_StructInit:0000000000000000 ADC_StructInit
     /tmp/ccOGjAPu.s:173    .text.ADC_CommonInit:0000000000000000 $t
     /tmp/ccOGjAPu.s:178    .text.ADC_CommonInit:0000000000000000 ADC_CommonInit
     /tmp/ccOGjAPu.s:228    .text.ADC_CommonStructInit:0000000000000000 $t
     /tmp/ccOGjAPu.s:233    .text.ADC_CommonStructInit:0000000000000000 ADC_CommonStructInit
     /tmp/ccOGjAPu.s:255    .text.ADC_Cmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:260    .text.ADC_Cmd:0000000000000000 ADC_Cmd
     /tmp/ccOGjAPu.s:285    .text.ADC_AnalogWatchdogCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:290    .text.ADC_AnalogWatchdogCmd:0000000000000000 ADC_AnalogWatchdogCmd
     /tmp/ccOGjAPu.s:316    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:321    .text.ADC_AnalogWatchdogThresholdsConfig:0000000000000000 ADC_AnalogWatchdogThresholdsConfig
     /tmp/ccOGjAPu.s:338    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:343    .text.ADC_AnalogWatchdogSingleChannelConfig:0000000000000000 ADC_AnalogWatchdogSingleChannelConfig
     /tmp/ccOGjAPu.s:367    .text.ADC_TempSensorVrefintCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:372    .text.ADC_TempSensorVrefintCmd:0000000000000000 ADC_TempSensorVrefintCmd
     /tmp/ccOGjAPu.s:401    .text.ADC_VBATCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:406    .text.ADC_VBATCmd:0000000000000000 ADC_VBATCmd
     /tmp/ccOGjAPu.s:435    .text.ADC_RegularChannelConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:440    .text.ADC_RegularChannelConfig:0000000000000000 ADC_RegularChannelConfig
     /tmp/ccOGjAPu.s:584    .text.ADC_SoftwareStartConv:0000000000000000 $t
     /tmp/ccOGjAPu.s:589    .text.ADC_SoftwareStartConv:0000000000000000 ADC_SoftwareStartConv
     /tmp/ccOGjAPu.s:606    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 $t
     /tmp/ccOGjAPu.s:611    .text.ADC_GetSoftwareStartConvStatus:0000000000000000 ADC_GetSoftwareStartConvStatus
     /tmp/ccOGjAPu.s:634    .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:639    .text.ADC_EOCOnEachRegularChannelCmd:0000000000000000 ADC_EOCOnEachRegularChannelCmd
     /tmp/ccOGjAPu.s:664    .text.ADC_ContinuousModeCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:669    .text.ADC_ContinuousModeCmd:0000000000000000 ADC_ContinuousModeCmd
     /tmp/ccOGjAPu.s:694    .text.ADC_DiscModeChannelCountConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:699    .text.ADC_DiscModeChannelCountConfig:0000000000000000 ADC_DiscModeChannelCountConfig
     /tmp/ccOGjAPu.s:726    .text.ADC_DiscModeCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:731    .text.ADC_DiscModeCmd:0000000000000000 ADC_DiscModeCmd
     /tmp/ccOGjAPu.s:756    .text.ADC_GetConversionValue:0000000000000000 $t
     /tmp/ccOGjAPu.s:761    .text.ADC_GetConversionValue:0000000000000000 ADC_GetConversionValue
     /tmp/ccOGjAPu.s:779    .text.ADC_GetMultiModeConversionValue:0000000000000000 $t
     /tmp/ccOGjAPu.s:784    .text.ADC_GetMultiModeConversionValue:0000000000000000 ADC_GetMultiModeConversionValue
     /tmp/ccOGjAPu.s:801    .text.ADC_DMACmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:806    .text.ADC_DMACmd:0000000000000000 ADC_DMACmd
     /tmp/ccOGjAPu.s:831    .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:836    .text.ADC_DMARequestAfterLastTransferCmd:0000000000000000 ADC_DMARequestAfterLastTransferCmd
     /tmp/ccOGjAPu.s:861    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:866    .text.ADC_MultiModeDMARequestAfterLastTransferCmd:0000000000000000 ADC_MultiModeDMARequestAfterLastTransferCmd
     /tmp/ccOGjAPu.s:895    .text.ADC_InjectedChannelConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:900    .text.ADC_InjectedChannelConfig:0000000000000000 ADC_InjectedChannelConfig
     /tmp/ccOGjAPu.s:995    .text.ADC_InjectedSequencerLengthConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:1000   .text.ADC_InjectedSequencerLengthConfig:0000000000000000 ADC_InjectedSequencerLengthConfig
     /tmp/ccOGjAPu.s:1027   .text.ADC_SetInjectedOffset:0000000000000000 $t
     /tmp/ccOGjAPu.s:1032   .text.ADC_SetInjectedOffset:0000000000000000 ADC_SetInjectedOffset
     /tmp/ccOGjAPu.s:1064   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:1069   .text.ADC_ExternalTrigInjectedConvConfig:0000000000000000 ADC_ExternalTrigInjectedConvConfig
     /tmp/ccOGjAPu.s:1093   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:1098   .text.ADC_ExternalTrigInjectedConvEdgeConfig:0000000000000000 ADC_ExternalTrigInjectedConvEdgeConfig
     /tmp/ccOGjAPu.s:1122   .text.ADC_SoftwareStartInjectedConv:0000000000000000 $t
     /tmp/ccOGjAPu.s:1127   .text.ADC_SoftwareStartInjectedConv:0000000000000000 ADC_SoftwareStartInjectedConv
     /tmp/ccOGjAPu.s:1144   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 $t
     /tmp/ccOGjAPu.s:1149   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:0000000000000000 ADC_GetSoftwareStartInjectedConvCmdStatus
     /tmp/ccOGjAPu.s:1172   .text.ADC_AutoInjectedConvCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:1177   .text.ADC_AutoInjectedConvCmd:0000000000000000 ADC_AutoInjectedConvCmd
     /tmp/ccOGjAPu.s:1202   .text.ADC_InjectedDiscModeCmd:0000000000000000 $t
     /tmp/ccOGjAPu.s:1207   .text.ADC_InjectedDiscModeCmd:0000000000000000 ADC_InjectedDiscModeCmd
     /tmp/ccOGjAPu.s:1232   .text.ADC_GetInjectedConversionValue:0000000000000000 $t
     /tmp/ccOGjAPu.s:1237   .text.ADC_GetInjectedConversionValue:0000000000000000 ADC_GetInjectedConversionValue
     /tmp/ccOGjAPu.s:1272   .text.ADC_ITConfig:0000000000000000 $t
     /tmp/ccOGjAPu.s:1277   .text.ADC_ITConfig:0000000000000000 ADC_ITConfig
     /tmp/ccOGjAPu.s:1312   .text.ADC_GetFlagStatus:0000000000000000 $t
     /tmp/ccOGjAPu.s:1317   .text.ADC_GetFlagStatus:0000000000000000 ADC_GetFlagStatus
     /tmp/ccOGjAPu.s:1340   .text.ADC_ClearFlag:0000000000000000 $t
     /tmp/ccOGjAPu.s:1345   .text.ADC_ClearFlag:0000000000000000 ADC_ClearFlag
     /tmp/ccOGjAPu.s:1362   .text.ADC_GetITStatus:0000000000000000 $t
     /tmp/ccOGjAPu.s:1367   .text.ADC_GetITStatus:0000000000000000 ADC_GetITStatus
     /tmp/ccOGjAPu.s:1411   .text.ADC_ClearITPendingBit:0000000000000000 $t
     /tmp/ccOGjAPu.s:1416   .text.ADC_ClearITPendingBit:0000000000000000 ADC_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_can.h.44.c7481a9870302edec9e3d0d405631faa
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
