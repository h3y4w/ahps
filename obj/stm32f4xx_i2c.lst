   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_i2c.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.I2C_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	I2C_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	I2C_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @file    stm32f4xx_i2c.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @version V1.0.0RC1
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @date    25-August-2011
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          functionalities of the Inter-integrated circuit (I2C)
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Data transfers
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - PEC management
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - Interrupts, events and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                 How to use this driver
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          ===================================================================
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          1. Enable peripheral clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2Cx, ENABLE)
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             function for I2C1, I2C2 or I2C3.
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          2. Enable SDA, SCL  and SMBA (when used) GPIO clocks using 
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             RCC_AHBPeriphClockCmd() function. 
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          3. Peripherals alternate function: 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Connect the pin to the desired peripherals' Alternate 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   Function (AF) using GPIO_PinAFConfig() function
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Configure the desired pin in alternate function by:
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Select the type, pull-up/pull-down and output speed via 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   GPIO_PuPd, GPIO_OType and GPIO_Speed members
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 - Call GPIO_Init() function
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Recommended configuration is Push-Pull, Pull-up, Open-Drain.
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                 Add an external pull up if necessary (typically 4.7 KOhm).      
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *        
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          4. Program the Mode, duty cycle , Own address, Ack, Speed and Acknowledged
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             Address using the I2C_Init() function.
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          5. Optionally you can enable/configure the following parameters without
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             re-initialization (i.e there is no need to call again I2C_Init() function):
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the acknowledge feature using I2C_AcknowledgeConfig() function
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the dual addressing mode using I2C_DualAddressCmd() function
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the general call using the I2C_GeneralCallCmd() function
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the clock stretching using I2C_StretchClockCmd() function
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the fast mode duty cycle using the I2C_FastModeDutyCycleConfig()
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                function.
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Configure the NACK position for Master Receiver mode in case of 
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                2 bytes reception using the function I2C_NACKPositionConfig().  
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - Enable the PEC Calculation using I2C_CalculatePEC() function
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              - For SMBus Mode: 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Enable the Address Resolution Protocol (ARP) using I2C_ARPCmd() function
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the SMBusAlert pin using I2C_SMBusAlertConfig() function
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          6. Enable the NVIC and the corresponding interrupt using the function 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             I2C_ITConfig() if you need to use interrupt mode. 
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          7. When using the DMA mode 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Configure the DMA using DMA_Init() function
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                   - Active the needed channel Request using I2C_DMACmd() or
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                     I2C_DMALastTransferCmd() function.
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *              @note When using DMA mode, I2C interrupts may be used at the same time to
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                    control the communication flow (Start/Stop/Ack... events and errors).
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          8. Enable the I2C using the I2C_Cmd() function.
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          9. Enable the DMA using the DMA_Cmd() function when using DMA mode in the 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *             transfers. 
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  @endverbatim
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @attention
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ******************************************************************************  
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Includes ------------------------------------------------------------------*/
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_i2c.h"
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #include "stm32f4xx_rcc.h"
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C 
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief I2C driver modules
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */ 
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private typedef -----------------------------------------------------------*/
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private define ------------------------------------------------------------*/
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define CR1_CLEAR_MASK    ((uint16_t)0xFBF5)      /*<! I2C registers Masks */
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define FLAG_MASK         ((uint32_t)0x00FFFFFF)  /*<! I2C FLAG mask */
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** #define ITEN_MASK         ((uint32_t)0x07000000)  /*<! I2C Interrupt Enable mask */
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private macro -------------------------------------------------------------*/
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private variables ---------------------------------------------------------*/
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private function prototypes -----------------------------------------------*/
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /* Private functions ---------------------------------------------------------*/
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Private_Functions
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group1 Initialization and Configuration functions
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Initialization and Configuration functions 
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                    Initialization and Configuration functions
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DeInit(I2C_TypeDef* I2Cx)
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
  28              		.loc 1 133 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2Cx == I2C1)
  38              		.loc 1 137 0
  39 0002 4FF4A843 		mov	r3, #21504
  40 0006 C4F20003 		movt	r3, 16384
  41 000a 9842     		cmp	r0, r3
  42 000c 0AD1     		bne	.L2
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C1 reset state */
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
  43              		.loc 1 140 0
  44 000e 4FF40010 		mov	r0, #2097152
  45              	.LVL1:
  46 0012 0121     		movs	r1, #1
  47 0014 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  48              	.LVL2:
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C1 from reset state */
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
  49              		.loc 1 142 0
  50 0018 4FF40010 		mov	r0, #2097152
  51 001c 0021     		movs	r1, #0
  52 001e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  53              	.LVL3:
  54 0022 08BD     		pop	{r3, pc}
  55              	.LVL4:
  56              	.L2:
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else if (I2Cx == I2C2)
  57              		.loc 1 144 0
  58 0024 4FF4B043 		mov	r3, #22528
  59 0028 C4F20003 		movt	r3, 16384
  60 002c 9842     		cmp	r0, r3
  61 002e 0AD1     		bne	.L4
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable I2C2 reset state */
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
  62              		.loc 1 147 0
  63 0030 4FF48000 		mov	r0, #4194304
  64              	.LVL5:
  65 0034 0121     		movs	r1, #1
  66 0036 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              	.LVL6:
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Release I2C2 from reset state */
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
  68              		.loc 1 149 0
  69 003a 4FF48000 		mov	r0, #4194304
  70 003e 0021     		movs	r1, #0
  71 0040 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72              	.LVL7:
  73 0044 08BD     		pop	{r3, pc}
  74              	.LVL8:
  75              	.L4:
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2Cx == I2C3)
  76              		.loc 1 153 0
  77 0046 4FF4B843 		mov	r3, #23552
  78 004a C4F20003 		movt	r3, 16384
  79 004e 9842     		cmp	r0, r3
  80 0050 09D1     		bne	.L1
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Enable I2C3 reset state */
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
  81              		.loc 1 156 0
  82 0052 4FF40000 		mov	r0, #8388608
  83              	.LVL9:
  84 0056 0121     		movs	r1, #1
  85 0058 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  86              	.LVL10:
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Release I2C3 from reset state */
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
  87              		.loc 1 158 0
  88 005c 4FF40000 		mov	r0, #8388608
  89 0060 0021     		movs	r1, #0
  90 0062 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  91              	.LVL11:
  92              	.L1:
  93 0066 08BD     		pop	{r3, pc}
  94              		.cfi_endproc
  95              	.LFE110:
  97              		.section	.text.I2C_Init,"ax",%progbits
  98              		.align	2
  99              		.global	I2C_Init
 100              		.thumb
 101              		.thumb_func
 103              	I2C_Init:
 104              	.LFB111:
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Initializes the I2Cx peripheral according to the specified 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         parameters in the I2C_InitStruct.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         (I2C peripheral input clock) must be a multiple of 10 MHz.  
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         the configuration information for the specified I2C peripheral.
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 105              		.loc 1 176 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 16
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              	.LVL12:
 110 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 111              	.LCFI1:
 112              		.cfi_def_cfa_offset 20
 113              		.cfi_offset 4, -20
 114              		.cfi_offset 5, -16
 115              		.cfi_offset 6, -12
 116              		.cfi_offset 7, -8
 117              		.cfi_offset 14, -4
 118 0002 85B0     		sub	sp, sp, #20
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 40
 121 0004 0446     		mov	r4, r0
 122 0006 0D46     		mov	r5, r1
 123              	.LVL13:
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0, freqrange = 0;
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t result = 0x04;
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t pclk1 = 8000000;
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_ClocksTypeDef  rcc_clocks;
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLOCK_SPEED(I2C_InitStruct->I2C_ClockSpeed));
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_MODE(I2C_InitStruct->I2C_Mode));
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_InitStruct->I2C_DutyCycle));
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_OWN_ADDRESS1(I2C_InitStruct->I2C_OwnAddress1));
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR2 Configuration ------------------------*/
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR2 value */
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR2;
 124              		.loc 1 192 0
 125 0008 8688     		ldrh	r6, [r0, #4]
 126              	.LVL14:
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear frequency FREQ[5:0] bits */
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 127              		.loc 1 194 0
 128 000a 26F03F06 		bic	r6, r6, #63
 129              	.LVL15:
 130 000e 3604     		lsls	r6, r6, #16
 131 0010 360C     		lsrs	r6, r6, #16
 132              	.LVL16:
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get pclk1 frequency value */
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   RCC_GetClocksFreq(&rcc_clocks);
 133              		.loc 1 196 0
 134 0012 6846     		mov	r0, sp
 135              	.LVL17:
 136 0014 FFF7FEFF 		bl	RCC_GetClocksFreq
 137              	.LVL18:
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   pclk1 = rcc_clocks.PCLK1_Frequency;
 138              		.loc 1 197 0
 139 0018 0299     		ldr	r1, [sp, #8]
 140              	.LVL19:
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set frequency bits depending on pclk1 value */
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   freqrange = (uint16_t)(pclk1 / 1000000);
 141              		.loc 1 199 0
 142 001a 4DF68363 		movw	r3, #56963
 143 001e C4F21B33 		movt	r3, 17179
 144 0022 A3FB0123 		umull	r2, r3, r3, r1
 145 0026 980C     		lsrs	r0, r3, #18
 146 0028 87B2     		uxth	r7, r0
 147              	.LVL20:
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= freqrange;
 148              		.loc 1 200 0
 149 002a 3E43     		orrs	r6, r6, r7
 150              	.LVL21:
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR2 */
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR2 = tmpreg;
 151              		.loc 1 202 0
 152 002c A680     		strh	r6, [r4, #4]	@ movhi
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CCR Configuration ------------------------*/
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Disable the selected I2C peripheral to configure TRISE */
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 153              		.loc 1 206 0
 154 002e 2388     		ldrh	r3, [r4]
 155 0030 23F00103 		bic	r3, r3, #1
 156 0034 1B04     		lsls	r3, r3, #16
 157 0036 1B0C     		lsrs	r3, r3, #16
 158 0038 2380     		strh	r3, [r4]	@ movhi
 159              	.LVL22:
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset tmpreg value */
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear F/S, DUTY and CCR[11:0] bits */
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = 0;
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in standard mode */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 160              		.loc 1 212 0
 161 003a 2A68     		ldr	r2, [r5]
 162 003c 48F2A063 		movw	r3, #34464
 163 0040 C0F20103 		movt	r3, 1
 164 0044 9A42     		cmp	r2, r3
 165 0046 09D8     		bhi	.L6
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Standard mode speed calculate */
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 166              		.loc 1 215 0
 167 0048 5300     		lsls	r3, r2, #1
 168 004a B1FBF3F3 		udiv	r3, r1, r3
 169              	.LVL23:
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x4*/
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (result < 0x04)
 170              		.loc 1 217 0
 171 004e 9BB2     		uxth	r3, r3
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = 0x04;  
 172              		.loc 1 220 0
 173 0050 032B     		cmp	r3, #3
 174 0052 98BF     		it	ls
 175 0054 0423     		movls	r3, #4
 176              	.LVL24:
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value for standard mode */
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= result;	  
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for standard mode */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = freqrange + 1; 
 177              		.loc 1 225 0
 178 0056 0137     		adds	r7, r7, #1
 179 0058 2784     		strh	r7, [r4, #32]	@ movhi
 180 005a 27E0     		b	.L8
 181              	.LVL25:
 182              	.L6:
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure speed in fast mode */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      input clock) must be a multiple of 10 MHz */
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 183              		.loc 1 232 0
 184 005c EE88     		ldrh	r6, [r5, #6]
 185 005e 4BF6FF73 		movw	r3, #49151
 186 0062 9E42     		cmp	r6, r3
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 2 */
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 187              		.loc 1 235 0
 188 0064 03BF     		ittte	eq
 189 0066 02EB4202 		addeq	r2, r2, r2, lsl #1
 190 006a B1FBF2F3 		udiveq	r3, r1, r2
 191 006e 9BB2     		uxtheq	r3, r3
 192              	.LVL26:
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 193              		.loc 1 240 0
 194 0070 02EB8202 		addne	r2, r2, r2, lsl #2
 195 0074 1FBF     		itttt	ne
 196 0076 02EB8202 		addne	r2, r2, r2, lsl #2
 197 007a B1FBF2F3 		udivne	r3, r1, r2
 198              	.LVL27:
 199 007e 9BB2     		uxthne	r3, r3
 200              	.LVL28:
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set DUTY bit */
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= I2C_DutyCycle_16_9;
 201              		.loc 1 242 0
 202 0080 43F48043 		orrne	r3, r3, #16384
 203              	.LVL29:
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Test if CCR value is under 0x1*/
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     if ((result & I2C_CCR_CCR) == 0)
 204              		.loc 1 246 0
 205 0084 C3F30B02 		ubfx	r2, r3, #0, #12
 206 0088 0AB9     		cbnz	r2, .L11
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     {
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       /* Set minimum allowed value */
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       result |= (uint16_t)0x0001;  
 207              		.loc 1 249 0
 208 008a 43F00103 		orr	r3, r3, #1
 209              	.LVL30:
 210              	.L11:
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     }
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set speed value and set F/S bit for fast mode */
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 211              		.loc 1 252 0
 212 008e 43F40043 		orr	r3, r3, #32768
 213              	.LVL31:
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set Maximum Rise Time for fast mode */
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 214              		.loc 1 254 0
 215 0092 4FF49672 		mov	r2, #300
 216 0096 00FB02F0 		mul	r0, r0, r2
 217              	.LVL32:
 218 009a 44F6D352 		movw	r2, #19923
 219 009e C1F26202 		movt	r2, 4194
 220 00a2 82FB0012 		smull	r1, r2, r2, r0
 221              	.LVL33:
 222 00a6 9211     		asrs	r2, r2, #6
 223 00a8 0132     		adds	r2, r2, #1
 224 00aa 2284     		strh	r2, [r4, #32]	@ movhi
 225              	.LVL34:
 226              	.L8:
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CCR */
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CCR = tmpreg;
 227              		.loc 1 258 0
 228 00ac A383     		strh	r3, [r4, #28]	@ movhi
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Enable the selected I2C peripheral */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 |= I2C_CR1_PE;
 229              		.loc 1 260 0
 230 00ae 2388     		ldrh	r3, [r4]
 231              	.LVL35:
 232 00b0 9BB2     		uxth	r3, r3
 233 00b2 43F00103 		orr	r3, r3, #1
 234 00b6 2380     		strh	r3, [r4]	@ movhi
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx CR1 Configuration ------------------------*/
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx CR1 value */
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->CR1;
 235              		.loc 1 264 0
 236 00b8 2388     		ldrh	r3, [r4]
 237              	.LVL36:
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear ACK, SMBTYPE and  SMBUS bits */
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= CR1_CLEAR_MASK;
 238              		.loc 1 266 0
 239 00ba 23F48163 		bic	r3, r3, #1032
 240              	.LVL37:
 241 00be 23F00203 		bic	r3, r3, #2
 242 00c2 1B04     		lsls	r3, r3, #16
 243 00c4 1B0C     		lsrs	r3, r3, #16
 244              	.LVL38:
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Configure I2Cx: mode and acknowledgement */
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set ACK bit according to I2C_Ack value */
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 245              		.loc 1 270 0
 246 00c6 A988     		ldrh	r1, [r5, #4]
 247 00c8 6A89     		ldrh	r2, [r5, #10]
 248 00ca 0A43     		orrs	r2, r2, r1
 249 00cc 1343     		orrs	r3, r3, r2
 250              	.LVL39:
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write to I2Cx CR1 */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->CR1 = tmpreg;
 251              		.loc 1 272 0
 252 00ce 2380     		strh	r3, [r4]	@ movhi
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------------------- I2Cx OAR1 Configuration -----------------------*/
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own Address1 and acknowledged address */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 253              		.loc 1 276 0
 254 00d0 AA89     		ldrh	r2, [r5, #12]
 255 00d2 2B89     		ldrh	r3, [r5, #8]
 256              	.LVL40:
 257 00d4 1343     		orrs	r3, r3, r2
 258 00d6 2381     		strh	r3, [r4, #8]	@ movhi
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 259              		.loc 1 277 0
 260 00d8 05B0     		add	sp, sp, #20
 261              		@ sp needed
 262 00da F0BD     		pop	{r4, r5, r6, r7, pc}
 263              		.cfi_endproc
 264              	.LFE111:
 266              		.section	.text.I2C_StructInit,"ax",%progbits
 267              		.align	2
 268              		.global	I2C_StructInit
 269              		.thumb
 270              		.thumb_func
 272              	I2C_StructInit:
 273              	.LFB112:
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Fills each I2C_InitStruct member with its default value.
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 274              		.loc 1 285 0
 275              		.cfi_startproc
 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278              		@ link register save eliminated.
 279              	.LVL41:
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*---------------- Reset I2C init structure parameters values ----------------*/
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* initialize the I2C_ClockSpeed member */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_ClockSpeed = 5000;
 280              		.loc 1 288 0
 281 0000 41F28833 		movw	r3, #5000
 282 0004 0360     		str	r3, [r0]
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Mode member */
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 283              		.loc 1 290 0
 284 0006 0023     		movs	r3, #0
 285 0008 8380     		strh	r3, [r0, #4]	@ movhi
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_DutyCycle member */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 286              		.loc 1 292 0
 287 000a 4BF6FF72 		movw	r2, #49151
 288 000e C280     		strh	r2, [r0, #6]	@ movhi
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_OwnAddress1 member */
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_OwnAddress1 = 0;
 289              		.loc 1 294 0
 290 0010 0381     		strh	r3, [r0, #8]	@ movhi
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_Ack member */
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 291              		.loc 1 296 0
 292 0012 4381     		strh	r3, [r0, #10]	@ movhi
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Initialize the I2C_AcknowledgedAddress member */
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 293              		.loc 1 298 0
 294 0014 4FF48043 		mov	r3, #16384
 295 0018 8381     		strh	r3, [r0, #12]	@ movhi
 296 001a 7047     		bx	lr
 297              		.cfi_endproc
 298              	.LFE112:
 300              		.section	.text.I2C_Cmd,"ax",%progbits
 301              		.align	2
 302              		.global	I2C_Cmd
 303              		.thumb
 304              		.thumb_func
 306              	I2C_Cmd:
 307              	.LFB113:
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C peripheral.
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx peripheral. 
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 308              		.loc 1 309 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              		@ link register save eliminated.
 313              	.LVL42:
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 314              		.loc 1 313 0
 315 0000 29B1     		cbz	r1, .L15
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C peripheral */
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PE;
 316              		.loc 1 316 0
 317 0002 0388     		ldrh	r3, [r0]
 318 0004 9BB2     		uxth	r3, r3
 319 0006 43F00103 		orr	r3, r3, #1
 320 000a 0380     		strh	r3, [r0]	@ movhi
 321 000c 7047     		bx	lr
 322              	.L15:
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C peripheral */
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 323              		.loc 1 321 0
 324 000e 0388     		ldrh	r3, [r0]
 325 0010 23F00103 		bic	r3, r3, #1
 326 0014 1B04     		lsls	r3, r3, #16
 327 0016 1B0C     		lsrs	r3, r3, #16
 328 0018 0380     		strh	r3, [r0]	@ movhi
 329 001a 7047     		bx	lr
 330              		.cfi_endproc
 331              	.LFE113:
 333              		.section	.text.I2C_GenerateSTART,"ax",%progbits
 334              		.align	2
 335              		.global	I2C_GenerateSTART
 336              		.thumb
 337              		.thumb_func
 339              	I2C_GenerateSTART:
 340              	.LFB114:
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication START condition.
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C START condition generation.
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 341              		.loc 1 333 0
 342              		.cfi_startproc
 343              		@ args = 0, pretend = 0, frame = 0
 344              		@ frame_needed = 0, uses_anonymous_args = 0
 345              		@ link register save eliminated.
 346              	.LVL43:
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 347              		.loc 1 337 0
 348 0000 29B1     		cbz	r1, .L18
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a START condition */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_START;
 349              		.loc 1 340 0
 350 0002 0388     		ldrh	r3, [r0]
 351 0004 9BB2     		uxth	r3, r3
 352 0006 43F48073 		orr	r3, r3, #256
 353 000a 0380     		strh	r3, [r0]	@ movhi
 354 000c 7047     		bx	lr
 355              	.L18:
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the START condition generation */
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 356              		.loc 1 345 0
 357 000e 0388     		ldrh	r3, [r0]
 358 0010 23F48073 		bic	r3, r3, #256
 359 0014 1B04     		lsls	r3, r3, #16
 360 0016 1B0C     		lsrs	r3, r3, #16
 361 0018 0380     		strh	r3, [r0]	@ movhi
 362 001a 7047     		bx	lr
 363              		.cfi_endproc
 364              	.LFE114:
 366              		.section	.text.I2C_GenerateSTOP,"ax",%progbits
 367              		.align	2
 368              		.global	I2C_GenerateSTOP
 369              		.thumb
 370              		.thumb_func
 372              	I2C_GenerateSTOP:
 373              	.LFB115:
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Generates I2Cx communication STOP condition.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C STOP condition generation.
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 374              		.loc 1 357 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 0, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379              	.LVL44:
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 380              		.loc 1 361 0
 381 0000 29B1     		cbz	r1, .L21
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Generate a STOP condition */
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_STOP;
 382              		.loc 1 364 0
 383 0002 0388     		ldrh	r3, [r0]
 384 0004 9BB2     		uxth	r3, r3
 385 0006 43F40073 		orr	r3, r3, #512
 386 000a 0380     		strh	r3, [r0]	@ movhi
 387 000c 7047     		bx	lr
 388              	.L21:
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the STOP condition generation */
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 389              		.loc 1 369 0
 390 000e 0388     		ldrh	r3, [r0]
 391 0010 23F40073 		bic	r3, r3, #512
 392 0014 1B04     		lsls	r3, r3, #16
 393 0016 1B0C     		lsrs	r3, r3, #16
 394 0018 0380     		strh	r3, [r0]	@ movhi
 395 001a 7047     		bx	lr
 396              		.cfi_endproc
 397              	.LFE115:
 399              		.section	.text.I2C_Send7bitAddress,"ax",%progbits
 400              		.align	2
 401              		.global	I2C_Send7bitAddress
 402              		.thumb
 403              		.thumb_func
 405              	I2C_Send7bitAddress:
 406              	.LFB116:
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Transmits the address byte to select the slave device.
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the slave address which will be transmitted
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Direction: specifies whether the I2C device will be a Transmitter
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         or a Receiver. 
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Transmitter: Transmitter mode
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Direction_Receiver: Receiver mode
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 407              		.loc 1 385 0
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 412              	.LVL45:
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DIRECTION(I2C_Direction));
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Test on the direction to set/reset the read/write bit */
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_Direction != I2C_Direction_Transmitter)
 413              		.loc 1 390 0
 414 0000 12B1     		cbz	r2, .L24
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Set the address bit0 for read */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address |= I2C_OAR1_ADD0;
 415              		.loc 1 393 0
 416 0002 41F00101 		orr	r1, r1, #1
 417              	.LVL46:
 418 0006 01E0     		b	.L25
 419              	.L24:
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Reset the address bit0 for write */
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 420              		.loc 1 398 0
 421 0008 01F0FE01 		and	r1, r1, #254
 422              	.LVL47:
 423              	.L25:
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Send the address */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Address;
 424              		.loc 1 401 0
 425 000c 0182     		strh	r1, [r0, #16]	@ movhi
 426 000e 7047     		bx	lr
 427              		.cfi_endproc
 428              	.LFE116:
 430              		.section	.text.I2C_AcknowledgeConfig,"ax",%progbits
 431              		.align	2
 432              		.global	I2C_AcknowledgeConfig
 433              		.thumb
 434              		.thumb_func
 436              	I2C_AcknowledgeConfig:
 437              	.LFB117:
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C acknowledge feature.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C Acknowledgement.
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 438              		.loc 1 412 0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 442              		@ link register save eliminated.
 443              	.LVL48:
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 444              		.loc 1 416 0
 445 0000 29B1     		cbz	r1, .L27
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the acknowledgement */
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ACK;
 446              		.loc 1 419 0
 447 0002 0388     		ldrh	r3, [r0]
 448 0004 9BB2     		uxth	r3, r3
 449 0006 43F48063 		orr	r3, r3, #1024
 450 000a 0380     		strh	r3, [r0]	@ movhi
 451 000c 7047     		bx	lr
 452              	.L27:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the acknowledgement */
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 453              		.loc 1 424 0
 454 000e 0388     		ldrh	r3, [r0]
 455 0010 23F48063 		bic	r3, r3, #1024
 456 0014 1B04     		lsls	r3, r3, #16
 457 0016 1B0C     		lsrs	r3, r3, #16
 458 0018 0380     		strh	r3, [r0]	@ movhi
 459 001a 7047     		bx	lr
 460              		.cfi_endproc
 461              	.LFE117:
 463              		.section	.text.I2C_OwnAddress2Config,"ax",%progbits
 464              		.align	2
 465              		.global	I2C_OwnAddress2Config
 466              		.thumb
 467              		.thumb_func
 469              	I2C_OwnAddress2Config:
 470              	.LFB118:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Configures the specified I2C own address2.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Address: specifies the 7bit I2C own address2.
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 471              		.loc 1 435 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 0
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475              		@ link register save eliminated.
 476              	.LVL49:
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint16_t tmpreg = 0;
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the old register value */
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg = I2Cx->OAR2;
 477              		.loc 1 442 0
 478 0000 8389     		ldrh	r3, [r0, #12]
 479              	.LVL50:
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Reset I2Cx Own address2 bit [7:1] */
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 480              		.loc 1 445 0
 481 0002 23F0FE03 		bic	r3, r3, #254
 482              	.LVL51:
 483 0006 1B04     		lsls	r3, r3, #16
 484 0008 1B0C     		lsrs	r3, r3, #16
 485              	.LVL52:
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Set I2Cx Own address2 */
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 486              		.loc 1 448 0
 487 000a 01F0FE01 		and	r1, r1, #254
 488              	.LVL53:
 489 000e 0B43     		orrs	r3, r3, r1
 490              	.LVL54:
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Store the new register value */
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->OAR2 = tmpreg;
 491              		.loc 1 451 0
 492 0010 8381     		strh	r3, [r0, #12]	@ movhi
 493 0012 7047     		bx	lr
 494              		.cfi_endproc
 495              	.LFE118:
 497              		.section	.text.I2C_DualAddressCmd,"ax",%progbits
 498              		.align	2
 499              		.global	I2C_DualAddressCmd
 500              		.thumb
 501              		.thumb_func
 503              	I2C_DualAddressCmd:
 504              	.LFB119:
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C dual addressing mode.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C dual addressing mode.
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 505              		.loc 1 462 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              		@ link register save eliminated.
 510              	.LVL55:
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 511              		.loc 1 466 0
 512 0000 29B1     		cbz	r1, .L31
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable dual addressing mode */
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 513              		.loc 1 469 0
 514 0002 8389     		ldrh	r3, [r0, #12]
 515 0004 9BB2     		uxth	r3, r3
 516 0006 43F00103 		orr	r3, r3, #1
 517 000a 8381     		strh	r3, [r0, #12]	@ movhi
 518 000c 7047     		bx	lr
 519              	.L31:
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable dual addressing mode */
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 520              		.loc 1 474 0
 521 000e 8389     		ldrh	r3, [r0, #12]
 522 0010 23F00103 		bic	r3, r3, #1
 523 0014 1B04     		lsls	r3, r3, #16
 524 0016 1B0C     		lsrs	r3, r3, #16
 525 0018 8381     		strh	r3, [r0, #12]	@ movhi
 526 001a 7047     		bx	lr
 527              		.cfi_endproc
 528              	.LFE119:
 530              		.section	.text.I2C_GeneralCallCmd,"ax",%progbits
 531              		.align	2
 532              		.global	I2C_GeneralCallCmd
 533              		.thumb
 534              		.thumb_func
 536              	I2C_GeneralCallCmd:
 537              	.LFB120:
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C general call feature.
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C General call.
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 538              		.loc 1 486 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 543              	.LVL56:
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 544              		.loc 1 490 0
 545 0000 29B1     		cbz	r1, .L34
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable generall call */
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENGC;
 546              		.loc 1 493 0
 547 0002 0388     		ldrh	r3, [r0]
 548 0004 9BB2     		uxth	r3, r3
 549 0006 43F04003 		orr	r3, r3, #64
 550 000a 0380     		strh	r3, [r0]	@ movhi
 551 000c 7047     		bx	lr
 552              	.L34:
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable generall call */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 553              		.loc 1 498 0
 554 000e 0388     		ldrh	r3, [r0]
 555 0010 23F04003 		bic	r3, r3, #64
 556 0014 1B04     		lsls	r3, r3, #16
 557 0016 1B0C     		lsrs	r3, r3, #16
 558 0018 0380     		strh	r3, [r0]	@ movhi
 559 001a 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE120:
 563              		.section	.text.I2C_SoftwareResetCmd,"ax",%progbits
 564              		.align	2
 565              		.global	I2C_SoftwareResetCmd
 566              		.thumb
 567              		.thumb_func
 569              	I2C_SoftwareResetCmd:
 570              	.LFB121:
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C software reset.
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   When software reset is enabled, the I2C IOs are released (this can
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         be useful to recover from bus errors).  
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C software reset.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 571              		.loc 1 512 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 0
 574              		@ frame_needed = 0, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576              	.LVL57:
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 577              		.loc 1 516 0
 578 0000 39B1     		cbz	r1, .L37
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral under reset */
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_SWRST;
 579              		.loc 1 519 0
 580 0002 0388     		ldrh	r3, [r0]
 581 0004 6FEA4343 		mvn	r3, r3, lsl #17
 582 0008 6FEA5343 		mvn	r3, r3, lsr #17
 583 000c 9BB2     		uxth	r3, r3
 584 000e 0380     		strh	r3, [r0]	@ movhi
 585 0010 7047     		bx	lr
 586              	.L37:
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Peripheral not under reset */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 587              		.loc 1 524 0
 588 0012 0388     		ldrh	r3, [r0]
 589 0014 C3F30E03 		ubfx	r3, r3, #0, #15
 590 0018 0380     		strh	r3, [r0]	@ movhi
 591 001a 7047     		bx	lr
 592              		.cfi_endproc
 593              	.LFE121:
 595              		.section	.text.I2C_StretchClockCmd,"ax",%progbits
 596              		.align	2
 597              		.global	I2C_StretchClockCmd
 598              		.thumb
 599              		.thumb_func
 601              	I2C_StretchClockCmd:
 602              	.LFB122:
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C Clock stretching.
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx Clock stretching.
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 603              		.loc 1 536 0
 604              		.cfi_startproc
 605              		@ args = 0, pretend = 0, frame = 0
 606              		@ frame_needed = 0, uses_anonymous_args = 0
 607              		@ link register save eliminated.
 608              	.LVL58:
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState == DISABLE)
 609              		.loc 1 540 0
 610 0000 29B9     		cbnz	r1, .L40
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C Clock stretching */
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 611              		.loc 1 543 0
 612 0002 0388     		ldrh	r3, [r0]
 613 0004 9BB2     		uxth	r3, r3
 614 0006 43F08003 		orr	r3, r3, #128
 615 000a 0380     		strh	r3, [r0]	@ movhi
 616 000c 7047     		bx	lr
 617              	.L40:
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C Clock stretching */
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 618              		.loc 1 548 0
 619 000e 0388     		ldrh	r3, [r0]
 620 0010 23F08003 		bic	r3, r3, #128
 621 0014 1B04     		lsls	r3, r3, #16
 622 0016 1B0C     		lsrs	r3, r3, #16
 623 0018 0380     		strh	r3, [r0]	@ movhi
 624 001a 7047     		bx	lr
 625              		.cfi_endproc
 626              	.LFE122:
 628              		.section	.text.I2C_FastModeDutyCycleConfig,"ax",%progbits
 629              		.align	2
 630              		.global	I2C_FastModeDutyCycleConfig
 631              		.thumb
 632              		.thumb_func
 634              	I2C_FastModeDutyCycleConfig:
 635              	.LFB123:
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C fast mode duty cycle.
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_DutyCycle: specifies the fast mode duty cycle.
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 636              		.loc 1 562 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 0
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640              		@ link register save eliminated.
 641              	.LVL59:
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 642              		.loc 1 566 0
 643 0000 B1F5804F 		cmp	r1, #16384
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=2 */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR &= I2C_DutyCycle_2;
 644              		.loc 1 569 0
 645 0004 838B     		ldrh	r3, [r0, #28]
 646 0006 1DBF     		ittte	ne
 647 0008 23F48043 		bicne	r3, r3, #16384
 648 000c 1B04     		lslne	r3, r3, #16
 649 000e 1B0C     		lsrne	r3, r3, #16
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C fast mode Tlow/Thigh=16/9 */
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CCR |= I2C_DutyCycle_16_9;
 650              		.loc 1 574 0
 651 0010 9BB2     		uxtheq	r3, r3
 652 0012 08BF     		it	eq
 653 0014 43F48043 		orreq	r3, r3, #16384
 654 0018 8383     		strh	r3, [r0, #28]	@ movhi
 655 001a 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE123:
 659              		.section	.text.I2C_NACKPositionConfig,"ax",%progbits
 660              		.align	2
 661              		.global	I2C_NACKPositionConfig
 662              		.thumb
 663              		.thumb_func
 665              	I2C_NACKPositionConfig:
 666              	.LFB124:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C NACK position in master receiver mode.
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   This function is useful in I2C Master Receiver mode when the number
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         of data to be received is equal to 2. In this case, this function 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         should be called (with parameter I2C_NACKPosition_Next) before data 
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         reception starts,as described in the 2-byte reception procedure 
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         recommended in Reference Manual in Section: Master receiver.                
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_NACKPosition: specifies the NACK position. 
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Next: indicates that the next byte will be the last
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                        received byte.  
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_NACKPosition_Current: indicates that current byte is the last 
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                           received byte.
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_PECPositionConfig() 
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in SMBUS mode. 
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 667              		.loc 1 600 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              		@ link register save eliminated.
 672              	.LVL60:
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the input parameter */
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_NACKPosition == I2C_NACKPosition_Next)
 673              		.loc 1 606 0
 674 0000 B1F5006F 		cmp	r1, #2048
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is the last received byte */
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_NACKPosition_Next;
 675              		.loc 1 609 0
 676 0004 0388     		ldrh	r3, [r0]
 677 0006 07BF     		ittee	eq
 678 0008 9BB2     		uxtheq	r3, r3
 679 000a 43F40063 		orreq	r3, r3, #2048
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is the last received byte */
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_NACKPosition_Current;
 680              		.loc 1 614 0
 681 000e 23F40063 		bicne	r3, r3, #2048
 682 0012 1B04     		lslne	r3, r3, #16
 683 0014 18BF     		it	ne
 684 0016 1B0C     		lsrne	r3, r3, #16
 685 0018 0380     		strh	r3, [r0]	@ movhi
 686 001a 7047     		bx	lr
 687              		.cfi_endproc
 688              	.LFE124:
 690              		.section	.text.I2C_SMBusAlertConfig,"ax",%progbits
 691              		.align	2
 692              		.global	I2C_SMBusAlertConfig
 693              		.thumb
 694              		.thumb_func
 696              	I2C_SMBusAlertConfig:
 697              	.LFB125:
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Drives the SMBusAlert pin high or low for the specified I2C.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_SMBusAlert: specifies SMBAlert pin level. 
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 698              		.loc 1 628 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 0
 701              		@ frame_needed = 0, uses_anonymous_args = 0
 702              		@ link register save eliminated.
 703              	.LVL61:
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 704              		.loc 1 632 0
 705 0000 B1F5005F 		cmp	r1, #8192
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin Low */
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_SMBusAlert_Low;
 706              		.loc 1 635 0
 707 0004 0388     		ldrh	r3, [r0]
 708 0006 07BF     		ittee	eq
 709 0008 9BB2     		uxtheq	r3, r3
 710 000a 43F40053 		orreq	r3, r3, #8192
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Drive the SMBusAlert pin High  */
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_SMBusAlert_High;
 711              		.loc 1 640 0
 712 000e 23F40053 		bicne	r3, r3, #8192
 713 0012 1B04     		lslne	r3, r3, #16
 714 0014 18BF     		it	ne
 715 0016 1B0C     		lsrne	r3, r3, #16
 716 0018 0380     		strh	r3, [r0]	@ movhi
 717 001a 7047     		bx	lr
 718              		.cfi_endproc
 719              	.LFE125:
 721              		.section	.text.I2C_ARPCmd,"ax",%progbits
 722              		.align	2
 723              		.global	I2C_ARPCmd
 724              		.thumb
 725              		.thumb_func
 727              	I2C_ARPCmd:
 728              	.LFB126:
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C ARP.
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx ARP. 
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 729              		.loc 1 652 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734              	.LVL62:
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 735              		.loc 1 656 0
 736 0000 29B1     		cbz	r1, .L52
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C ARP */
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENARP;
 737              		.loc 1 659 0
 738 0002 0388     		ldrh	r3, [r0]
 739 0004 9BB2     		uxth	r3, r3
 740 0006 43F01003 		orr	r3, r3, #16
 741 000a 0380     		strh	r3, [r0]	@ movhi
 742 000c 7047     		bx	lr
 743              	.L52:
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C ARP */
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 744              		.loc 1 664 0
 745 000e 0388     		ldrh	r3, [r0]
 746 0010 23F01003 		bic	r3, r3, #16
 747 0014 1B04     		lsls	r3, r3, #16
 748 0016 1B0C     		lsrs	r3, r3, #16
 749 0018 0380     		strh	r3, [r0]	@ movhi
 750 001a 7047     		bx	lr
 751              		.cfi_endproc
 752              	.LFE126:
 754              		.section	.text.I2C_SendData,"ax",%progbits
 755              		.align	2
 756              		.global	I2C_SendData
 757              		.thumb
 758              		.thumb_func
 760              	I2C_SendData:
 761              	.LFB127:
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group2 Data transfers functions
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Data transfers functions 
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                         Data transfers functions
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Sends a data byte through the I2Cx peripheral.
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  Data: Byte to be transmitted..
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 762              		.loc 1 690 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 767              	.LVL63:
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Write in the DR register the data to be sent */
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->DR = Data;
 768              		.loc 1 694 0
 769 0000 0182     		strh	r1, [r0, #16]	@ movhi
 770 0002 7047     		bx	lr
 771              		.cfi_endproc
 772              	.LFE127:
 774              		.section	.text.I2C_ReceiveData,"ax",%progbits
 775              		.align	2
 776              		.global	I2C_ReceiveData
 777              		.thumb
 778              		.thumb_func
 780              	I2C_ReceiveData:
 781              	.LFB128:
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the most recent received data by the I2Cx peripheral.
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the received data.
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 782              		.loc 1 703 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787              	.LVL64:
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the data in the DR register */
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (uint8_t)I2Cx->DR;
 788              		.loc 1 707 0
 789 0000 008A     		ldrh	r0, [r0, #16]
 790              	.LVL65:
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 791              		.loc 1 708 0
 792 0002 C0B2     		uxtb	r0, r0
 793 0004 7047     		bx	lr
 794              		.cfi_endproc
 795              	.LFE128:
 797 0006 00BF     		.section	.text.I2C_TransmitPEC,"ax",%progbits
 798              		.align	2
 799              		.global	I2C_TransmitPEC
 800              		.thumb
 801              		.thumb_func
 803              	I2C_TransmitPEC:
 804              	.LFB129:
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group3 PEC management functions
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   PEC management functions 
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          PEC management functions
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C PEC transfer.
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C PEC transmission.
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 805              		.loc 1 734 0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 810              	.LVL66:
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 811              		.loc 1 738 0
 812 0000 29B1     		cbz	r1, .L57
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC transmission */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_PEC;
 813              		.loc 1 741 0
 814 0002 0388     		ldrh	r3, [r0]
 815 0004 9BB2     		uxth	r3, r3
 816 0006 43F48053 		orr	r3, r3, #4096
 817 000a 0380     		strh	r3, [r0]	@ movhi
 818 000c 7047     		bx	lr
 819              	.L57:
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC transmission */
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 820              		.loc 1 746 0
 821 000e 0388     		ldrh	r3, [r0]
 822 0010 23F48053 		bic	r3, r3, #4096
 823 0014 1B04     		lsls	r3, r3, #16
 824 0016 1B0C     		lsrs	r3, r3, #16
 825 0018 0380     		strh	r3, [r0]	@ movhi
 826 001a 7047     		bx	lr
 827              		.cfi_endproc
 828              	.LFE129:
 830              		.section	.text.I2C_PECPositionConfig,"ax",%progbits
 831              		.align	2
 832              		.global	I2C_PECPositionConfig
 833              		.thumb
 834              		.thumb_func
 836              	I2C_PECPositionConfig:
 837              	.LFB130:
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Selects the specified I2C PEC position.
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_PECPosition: specifies the PEC position. 
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Next: indicates that the next byte is PEC
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_PECPosition_Current: indicates that current byte is PEC
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *       
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note    This function configures the same bit (POS) as I2C_NACKPositionConfig()
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          but is intended to be used in SMBUS mode while I2C_NACKPositionConfig() 
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          is intended to used in I2C mode.
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 838              		.loc 1 765 0
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 0
 841              		@ frame_needed = 0, uses_anonymous_args = 0
 842              		@ link register save eliminated.
 843              	.LVL67:
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (I2C_PECPosition == I2C_PECPosition_Next)
 844              		.loc 1 769 0
 845 0000 B1F5006F 		cmp	r1, #2048
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next byte in shift register is PEC */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_PECPosition_Next;
 846              		.loc 1 772 0
 847 0004 0388     		ldrh	r3, [r0]
 848 0006 07BF     		ittee	eq
 849 0008 9BB2     		uxtheq	r3, r3
 850 000a 43F40063 		orreq	r3, r3, #2048
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Current byte in shift register is PEC */
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= I2C_PECPosition_Current;
 851              		.loc 1 777 0
 852 000e 23F40063 		bicne	r3, r3, #2048
 853 0012 1B04     		lslne	r3, r3, #16
 854 0014 18BF     		it	ne
 855 0016 1B0C     		lsrne	r3, r3, #16
 856 0018 0380     		strh	r3, [r0]	@ movhi
 857 001a 7047     		bx	lr
 858              		.cfi_endproc
 859              	.LFE130:
 861              		.section	.text.I2C_CalculatePEC,"ax",%progbits
 862              		.align	2
 863              		.global	I2C_CalculatePEC
 864              		.thumb
 865              		.thumb_func
 867              	I2C_CalculatePEC:
 868              	.LFB131:
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the PEC value calculation of the transferred bytes.
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2Cx PEC value calculation.
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 869              		.loc 1 789 0
 870              		.cfi_startproc
 871              		@ args = 0, pretend = 0, frame = 0
 872              		@ frame_needed = 0, uses_anonymous_args = 0
 873              		@ link register save eliminated.
 874              	.LVL68:
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 875              		.loc 1 793 0
 876 0000 29B1     		cbz	r1, .L63
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C PEC calculation */
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 |= I2C_CR1_ENPEC;
 877              		.loc 1 796 0
 878 0002 0388     		ldrh	r3, [r0]
 879 0004 9BB2     		uxth	r3, r3
 880 0006 43F02003 		orr	r3, r3, #32
 881 000a 0380     		strh	r3, [r0]	@ movhi
 882 000c 7047     		bx	lr
 883              	.L63:
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C PEC calculation */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 884              		.loc 1 801 0
 885 000e 0388     		ldrh	r3, [r0]
 886 0010 23F02003 		bic	r3, r3, #32
 887 0014 1B04     		lsls	r3, r3, #16
 888 0016 1B0C     		lsrs	r3, r3, #16
 889 0018 0380     		strh	r3, [r0]	@ movhi
 890 001a 7047     		bx	lr
 891              		.cfi_endproc
 892              	.LFE131:
 894              		.section	.text.I2C_GetPEC,"ax",%progbits
 895              		.align	2
 896              		.global	I2C_GetPEC
 897              		.thumb
 898              		.thumb_func
 900              	I2C_GetPEC:
 901              	.LFB132:
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the PEC value for the specified I2C.
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The PEC value.
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 902              		.loc 1 811 0
 903              		.cfi_startproc
 904              		@ args = 0, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 906              		@ link register save eliminated.
 907              	.LVL69:
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected I2C PEC value */
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return ((I2Cx->SR2) >> 8);
 908              		.loc 1 815 0
 909 0000 008B     		ldrh	r0, [r0, #24]
 910              	.LVL70:
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 911              		.loc 1 816 0
 912 0002 C0F30720 		ubfx	r0, r0, #8, #8
 913 0006 7047     		bx	lr
 914              		.cfi_endproc
 915              	.LFE132:
 917              		.section	.text.I2C_DMACmd,"ax",%progbits
 918              		.align	2
 919              		.global	I2C_DMACmd
 920              		.thumb
 921              		.thumb_func
 923              	I2C_DMACmd:
 924              	.LFB133:
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group4 DMA transfers management functions
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   DMA transfers management functions 
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                          DMA transfers management functions
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C DMA channels 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   requests.
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C DMA requests.
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA transfer.
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 925              		.loc 1 844 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930              	.LVL71:
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 931              		.loc 1 848 0
 932 0000 29B1     		cbz	r1, .L67
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C DMA requests */
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_DMAEN;
 933              		.loc 1 851 0
 934 0002 8388     		ldrh	r3, [r0, #4]
 935 0004 9BB2     		uxth	r3, r3
 936 0006 43F40063 		orr	r3, r3, #2048
 937 000a 8380     		strh	r3, [r0, #4]	@ movhi
 938 000c 7047     		bx	lr
 939              	.L67:
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C DMA requests */
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 940              		.loc 1 856 0
 941 000e 8388     		ldrh	r3, [r0, #4]
 942 0010 23F40063 		bic	r3, r3, #2048
 943 0014 1B04     		lsls	r3, r3, #16
 944 0016 1B0C     		lsrs	r3, r3, #16
 945 0018 8380     		strh	r3, [r0, #4]	@ movhi
 946 001a 7047     		bx	lr
 947              		.cfi_endproc
 948              	.LFE133:
 950              		.section	.text.I2C_DMALastTransferCmd,"ax",%progbits
 951              		.align	2
 952              		.global	I2C_DMALastTransferCmd
 953              		.thumb
 954              		.thumb_func
 956              	I2C_DMALastTransferCmd:
 957              	.LFB134:
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Specifies that the next DMA transfer is the last one.
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the I2C DMA last transfer.
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 958              		.loc 1 868 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963              	.LVL72:
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 964              		.loc 1 872 0
 965 0000 29B1     		cbz	r1, .L70
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is the last transfer */
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_CR2_LAST;
 966              		.loc 1 875 0
 967 0002 8388     		ldrh	r3, [r0, #4]
 968 0004 9BB2     		uxth	r3, r3
 969 0006 43F48053 		orr	r3, r3, #4096
 970 000a 8380     		strh	r3, [r0, #4]	@ movhi
 971 000c 7047     		bx	lr
 972              	.L70:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Next DMA transfer is not the last transfer */
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 973              		.loc 1 880 0
 974 000e 8388     		ldrh	r3, [r0, #4]
 975 0010 23F48053 		bic	r3, r3, #4096
 976 0014 1B04     		lsls	r3, r3, #16
 977 0016 1B0C     		lsrs	r3, r3, #16
 978 0018 8380     		strh	r3, [r0, #4]	@ movhi
 979 001a 7047     		bx	lr
 980              		.cfi_endproc
 981              	.LFE134:
 983              		.section	.text.I2C_ReadRegister,"ax",%progbits
 984              		.align	2
 985              		.global	I2C_ReadRegister
 986              		.thumb
 987              		.thumb_func
 989              	I2C_ReadRegister:
 990              	.LFB135:
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @}
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /** @defgroup I2C_Group5 Interrupts events and flags management functions
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *  @brief   Interrupts, events and flags management functions
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  *
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @verbatim   
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                 Interrupts, events and flags management functions
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This section provides functions allowing to configure the I2C Interrupts 
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   sources and check or clear the flags or pending bits status.
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   The user should identify which mode will be used in his application to manage 
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   the communication: Polling mode, Interrupt mode or DMA mode. 
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           I2C State Monitoring Functions                    
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================   
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   This I2C driver provides three different ways for I2C state monitoring
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   depending on the application requirements and constraints:
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      1. Basic state monitoring (Using I2C_CheckEvent() function)
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It compares the status registers (SR1 and SR2) content to a given event
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         (can be the combination of one or more flags).
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         It returns SUCCESS if the current status includes the given flags 
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         and returns ERROR if one or more flags are missing in the current status.
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for most applications as well as for startup 
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                activity since the events are fully described in the product reference 
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                manual (RM0090).
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is also suitable for users who need to define their own events.
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - If an error occurs (ie. error flags are set besides to the monitored 
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                flags), the I2C_CheckEvent() function may return SUCCESS despite 
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the communication hold or corrupted real state. 
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                In this case, it is advised to use error interrupts to monitor 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the error events and handle them in the interrupt IRQ handler.
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      @note 
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****          For error management, it is advised to use the following functions:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ITConfig() to configure and enable the error interrupts (I2C_IT_ERR).
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2Cx_ER_IRQHandler() which is called when the error interrupt occurs.
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              Where x is the peripheral instance (I2C1, I2C2 ...)
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_GetFlagStatus() or I2C_GetITStatus()  to be called into the 
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              I2Cx_ER_IRQHandler() function in order to determine which error occurred.
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****            - I2C_ClearFlag() or I2C_ClearITPendingBit() and/or I2C_SoftwareResetCmd() 
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and/or I2C_GenerateStop() in order to clear the error flag and source 
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              and return to correct  communication status.
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      2. Advanced state monitoring (Using the function I2C_GetLastEvent())
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -------------------------------------------------------------------- 
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         Using the function I2C_GetLastEvent() which returns the image of both status 
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         registers in a single word (uint32_t) (Status Register 2 value is shifted left 
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****         by 16 bits and concatenated to Status Register 1).
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function is suitable for the same applications above but it 
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                allows to overcome the mentioned limitation of I2C_GetFlagStatus() 
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function.
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - The returned value could be compared to events already defined in 
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                the library (stm32f4xx_i2c.h) or to custom values defined by user.
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                This function is suitable when multiple flags are monitored at the 
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                same time.
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - At the opposite of I2C_CheckEvent() function, this function allows 
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                user to choose when an event is accepted (when all events flags are 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                set and no other flags are set or just when the needed flags are set 
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                like I2C_CheckEvent() function.
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - User may need to define his own events.
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Same remark concerning the error management is applicable for this 
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                function if user decides to check only regular communication flags 
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                (and ignores error flags).
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      3. Flag-based state monitoring (Using the function I2C_GetFlagStatus())
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      -----------------------------------------------------------------------
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****      
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       Using the function I2C_GetFlagStatus() which simply returns the status of 
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****       one single flag (ie. I2C_FLAG_RXNE ...). 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - When to use
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - This function could be used for specific applications or in debug 
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                phase.
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - It is suitable when only one flag checking is needed (most I2C 
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                events are monitored through multiple flags).
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****           - Limitations: 
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - When calling this function, the Status register is accessed. 
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                Some flags are cleared when the status register is accessed. 
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                So checking the status of one Flag, may clear other ones.
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****              - Function may need to be called twice or more in order to monitor 
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                one single event.
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    For detailed description of Events, please refer to section I2C_Events in 
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    stm32f4xx_i2c.h file.
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****        
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** @endverbatim
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @{
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****    
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Reads the specified I2C register and returns its value.
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_Register: specifies the register to read.
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR1:  CR1 register.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CR2:   CR2 register.
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR1:  OAR1 register.
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_OAR2:  OAR2 register.
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_DR:    DR register.
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR1:   SR1 register.
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_SR2:   SR2 register.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_CCR:   CCR register.
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_Register_TRISE: TRISE register.
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The value of the read register.
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 991              		.loc 1 1006 0
 992              		.cfi_startproc
 993              		@ args = 0, pretend = 0, frame = 8
 994              		@ frame_needed = 0, uses_anonymous_args = 0
 995              		@ link register save eliminated.
 996              	.LVL73:
 997 0000 82B0     		sub	sp, sp, #8
 998              	.LCFI3:
 999              		.cfi_def_cfa_offset 8
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t tmp = 0;
 1000              		.loc 1 1007 0
 1001 0002 0023     		movs	r3, #0
 1002 0004 0193     		str	r3, [sp, #4]
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_REGISTER(I2C_Register));
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp = (uint32_t) I2Cx;
 1003              		.loc 1 1013 0
 1004 0006 0190     		str	r0, [sp, #4]
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   tmp += I2C_Register;
 1005              		.loc 1 1014 0
 1006 0008 019B     		ldr	r3, [sp, #4]
 1007 000a 1944     		add	r1, r1, r3
 1008              	.LVL74:
 1009 000c 0191     		str	r1, [sp, #4]
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the selected register value */
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return (*(__IO uint16_t *) tmp);
 1010              		.loc 1 1017 0
 1011 000e 019B     		ldr	r3, [sp, #4]
 1012 0010 1888     		ldrh	r0, [r3]
 1013              	.LVL75:
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1014              		.loc 1 1018 0
 1015 0012 80B2     		uxth	r0, r0
 1016 0014 02B0     		add	sp, sp, #8
 1017              		@ sp needed
 1018 0016 7047     		bx	lr
 1019              		.cfi_endproc
 1020              	.LFE135:
 1022              		.section	.text.I2C_ITConfig,"ax",%progbits
 1023              		.align	2
 1024              		.global	I2C_ITConfig
 1025              		.thumb
 1026              		.thumb_func
 1028              	I2C_ITConfig:
 1029              	.LFB136:
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Enables or disables the specified I2C interrupts.
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the I2C interrupts sources to be enabled or disabled. 
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BUF: Buffer interrupt mask
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_EVT: Event interrupt mask
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ERR: Error interrupt mask
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  NewState: new state of the specified I2C interrupts.
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be: ENABLE or DISABLE.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1030              		.loc 1 1033 0
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 0, uses_anonymous_args = 0
 1034              		@ link register save eliminated.
 1035              	.LVL76:
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CONFIG_IT(I2C_IT));
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (NewState != DISABLE)
 1036              		.loc 1 1039 0
 1037 0000 22B1     		cbz	r2, .L74
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Enable the selected I2C interrupts */
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 |= I2C_IT;
 1038              		.loc 1 1042 0
 1039 0002 8388     		ldrh	r3, [r0, #4]
 1040 0004 9BB2     		uxth	r3, r3
 1041 0006 1943     		orrs	r1, r1, r3
 1042              	.LVL77:
 1043 0008 8180     		strh	r1, [r0, #4]	@ movhi
 1044 000a 7047     		bx	lr
 1045              	.LVL78:
 1046              	.L74:
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Disable the selected I2C interrupts */
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2Cx->CR2 &= (uint16_t)~I2C_IT;
 1047              		.loc 1 1047 0
 1048 000c 8388     		ldrh	r3, [r0, #4]
 1049 000e C943     		mvns	r1, r1
 1050              	.LVL79:
 1051 0010 89B2     		uxth	r1, r1
 1052 0012 1940     		ands	r1, r1, r3
 1053 0014 8180     		strh	r1, [r0, #4]	@ movhi
 1054 0016 7047     		bx	lr
 1055              		.cfi_endproc
 1056              	.LFE136:
 1058              		.section	.text.I2C_CheckEvent,"ax",%progbits
 1059              		.align	2
 1060              		.global	I2C_CheckEvent
 1061              		.thumb
 1062              		.thumb_func
 1064              	I2C_CheckEvent:
 1065              	.LFB137:
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           1. Basic state monitoring                    
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the last I2Cx Event is equal to the one passed
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         as parameter.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_EVENT: specifies the event to be checked. 
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED: EV1
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED: EV1
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED: EV1
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED: EV1
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED: EV1
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_RECEIVED: EV2
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF): EV2
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL): EV2
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_BYTE_TRANSMITTED: EV3
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF): EV3
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg (I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL): EV3
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_ACK_FAILURE: EV3_2
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_SLAVE_STOP_DETECTED: EV4
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_SELECT: EV5
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED: EV6     
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED: EV6
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_RECEIVED: EV7
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTING: EV8
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_BYTE_TRANSMITTED: EV8_2
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_EVENT_MASTER_MODE_ADDRESS10: EV9
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval An ErrorStatus enumeration value:
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - SUCCESS: Last event is equal to the I2C_EVENT
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *           - ERROR: Last event is different from the I2C_EVENT
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1066              		.loc 1 1092 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 0
 1069              		@ frame_needed = 0, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071              	.LVL80:
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ErrorStatus status = ERROR;
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_EVENT(I2C_EVENT));
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1072              		.loc 1 1102 0
 1073 0000 838A     		ldrh	r3, [r0, #20]
 1074 0002 9BB2     		uxth	r3, r3
 1075              	.LVL81:
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1076              		.loc 1 1103 0
 1077 0004 028B     		ldrh	r2, [r0, #24]
 1078              	.LVL82:
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1079              		.loc 1 1107 0
 1080 0006 43EA0243 		orr	r3, r3, r2, lsl #16
 1081              	.LVL83:
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check whether the last event contains the I2C_EVENT */
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if ((lastevent & I2C_EVENT) == I2C_EVENT)
 1082              		.loc 1 1110 0
 1083 000a 03EA0100 		and	r0, r3, r1
 1084              	.LVL84:
 1085 000e 20F07F40 		bic	r0, r0, #-16777216
 1086              	.LVL85:
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* SUCCESS: last event is equal to I2C_EVENT */
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = SUCCESS;
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* ERROR: last event is different from I2C_EVENT */
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     status = ERROR;
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return status;
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1087              		.loc 1 1122 0
 1088 0012 8842     		cmp	r0, r1
 1089 0014 14BF     		ite	ne
 1090 0016 0020     		movne	r0, #0
 1091              	.LVL86:
 1092 0018 0120     		moveq	r0, #1
 1093 001a 7047     		bx	lr
 1094              		.cfi_endproc
 1095              	.LFE137:
 1097              		.section	.text.I2C_GetLastEvent,"ax",%progbits
 1098              		.align	2
 1099              		.global	I2C_GetLastEvent
 1100              		.thumb
 1101              		.thumb_func
 1103              	I2C_GetLastEvent:
 1104              	.LFB138:
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           2. Advanced state monitoring                   
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Returns the last I2Cx Event.
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *     
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   For detailed description of Events, please refer to section I2C_Events
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *         in stm32f4xx_i2c.h file.
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *    
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The last event
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1105              		.loc 1 1140 0
 1106              		.cfi_startproc
 1107              		@ args = 0, pretend = 0, frame = 0
 1108              		@ frame_needed = 0, uses_anonymous_args = 0
 1109              		@ link register save eliminated.
 1110              	.LVL87:
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t lastevent = 0;
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flag1 = 0, flag2 = 0;
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read the I2Cx status register */
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag1 = I2Cx->SR1;
 1111              		.loc 1 1148 0
 1112 0000 838A     		ldrh	r3, [r0, #20]
 1113 0002 9BB2     		uxth	r3, r3
 1114              	.LVL88:
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = I2Cx->SR2;
 1115              		.loc 1 1149 0
 1116 0004 008B     		ldrh	r0, [r0, #24]
 1117              	.LVL89:
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flag2 = flag2 << 16;
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the last event value from I2C status register */
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   lastevent = (flag1 | flag2) & FLAG_MASK;
 1118              		.loc 1 1153 0
 1119 0006 43EA0040 		orr	r0, r3, r0, lsl #16
 1120              	.LVL90:
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return status */
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return lastevent;
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1121              		.loc 1 1157 0
 1122 000a 20F07F40 		bic	r0, r0, #-16777216
 1123              	.LVL91:
 1124 000e 7047     		bx	lr
 1125              		.cfi_endproc
 1126              	.LFE138:
 1128              		.section	.text.I2C_GetFlagStatus,"ax",%progbits
 1129              		.align	2
 1130              		.global	I2C_GetFlagStatus
 1131              		.thumb
 1132              		.thumb_func
 1134              	I2C_GetFlagStatus:
 1135              	.LFB139:
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /*
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****                           3. Flag-based state monitoring                   
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  ===============================================================================  
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****  */
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C flag is set or not.
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to check. 
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_DUALF: Dual flag (Slave mode)
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBHOST: SMBus host header (Slave mode)
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode)
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_GENCALL: General call header flag (Slave mode)
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TRA: Transmitter/Receiver flag
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BUSY: Bus busy flag
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_MSL: Master/Slave flag
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TXE: Data register empty flag (Transmitter)
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_RXNE: Data register not empty (Receiver) flag
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_STOPF: Stop detection flag (Slave mode)
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADD10: 10-bit header sent flag (Master mode)
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BTF: Byte transfer finished flag
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ADDR: Address sent flag (Master mode) "ADSL"
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                                Address matched flag (Slave mode)"ENDAD"
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_FLAG (SET or RESET).
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1136              		.loc 1 1195 0
 1137              		.cfi_startproc
 1138              		@ args = 0, pretend = 0, frame = 8
 1139              		@ frame_needed = 0, uses_anonymous_args = 0
 1140              		@ link register save eliminated.
 1141              	.LVL92:
 1142 0000 82B0     		sub	sp, sp, #8
 1143              	.LCFI4:
 1144              		.cfi_def_cfa_offset 8
 1145              	.LVL93:
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   FlagStatus bitstatus = RESET;
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   __IO uint32_t i2creg = 0, i2cxbase = 0;
 1146              		.loc 1 1197 0
 1147 0002 0023     		movs	r3, #0
 1148 0004 0193     		str	r3, [sp, #4]
 1149 0006 0093     		str	r3, [sp]
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_FLAG(I2C_FLAG));
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2Cx peripheral base address */
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2cxbase = (uint32_t)I2Cx;
 1150              		.loc 1 1204 0
 1151 0008 0090     		str	r0, [sp]
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Read flag register index */
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   i2creg = I2C_FLAG >> 28;
 1152              		.loc 1 1207 0
 1153 000a 0B0F     		lsrs	r3, r1, #28
 1154 000c 0193     		str	r3, [sp, #4]
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_FLAG &= FLAG_MASK;
 1155              		.loc 1 1210 0
 1156 000e 21F07F41 		bic	r1, r1, #-16777216
 1157              	.LVL94:
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(i2creg != 0)
 1158              		.loc 1 1212 0
 1159 0012 019B     		ldr	r3, [sp, #4]
 1160 0014 1BB1     		cbz	r3, .L81
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR1 register address */
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x14;
 1161              		.loc 1 1215 0
 1162 0016 009B     		ldr	r3, [sp]
 1163 0018 1433     		adds	r3, r3, #20
 1164 001a 0093     		str	r3, [sp]
 1165 001c 03E0     		b	.L82
 1166              	.L81:
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Flag in I2Cx SR2 Register */
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 1167              		.loc 1 1220 0
 1168 001e 090C     		lsrs	r1, r1, #16
 1169              	.LVL95:
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* Get the I2Cx SR2 register address */
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     i2cxbase += 0x18;
 1170              		.loc 1 1222 0
 1171 0020 009B     		ldr	r3, [sp]
 1172 0022 1833     		adds	r3, r3, #24
 1173 0024 0093     		str	r3, [sp]
 1174              	.L82:
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 1175              		.loc 1 1225 0
 1176 0026 009B     		ldr	r3, [sp]
 1177 0028 1B68     		ldr	r3, [r3]
 1178 002a 03EA0100 		and	r0, r3, r1
 1179              	.LVL96:
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is set */
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_FLAG is reset */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_FLAG status */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1180              		.loc 1 1238 0
 1181 002e 0030     		adds	r0, r0, #0
 1182 0030 18BF     		it	ne
 1183 0032 0120     		movne	r0, #1
 1184              	.LVL97:
 1185 0034 02B0     		add	sp, sp, #8
 1186              		@ sp needed
 1187 0036 7047     		bx	lr
 1188              		.cfi_endproc
 1189              	.LFE139:
 1191              		.section	.text.I2C_ClearFlag,"ax",%progbits
 1192              		.align	2
 1193              		.global	I2C_ClearFlag
 1194              		.thumb
 1195              		.thumb_func
 1197              	I2C_ClearFlag:
 1198              	.LFB140:
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's pending flags.
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_FLAG: specifies the flag to clear. 
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_SMBALERT: SMBus Alert flag
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_TIMEOUT: Timeout or Tlow error flag
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_PECERR: PEC error in reception flag
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode)
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_AF: Acknowledge failure flag
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_ARLO: Arbitration lost flag (Master mode)
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_FLAG_BERR: Bus error flag
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *   
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetFlagStatus()) followed by a write operation 
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetFlagStatus()) followed by writing the 
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          second byte of the address in DR register.
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetFlagStatus()) followed by a 
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetFlagStatus()) followed by a read operation to 
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_GetFlagStatus()) followed by a write operation to I2C_DR
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          register (I2C_SendData()).
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *  
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1199              		.loc 1 1272 0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 1203              		@ link register save eliminated.
 1204              	.LVL98:
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_FLAG & FLAG_MASK;
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1205              		.loc 1 1280 0
 1206 0000 C943     		mvns	r1, r1
 1207              	.LVL99:
 1208 0002 89B2     		uxth	r1, r1
 1209              	.LVL100:
 1210 0004 8182     		strh	r1, [r0, #20]	@ movhi
 1211 0006 7047     		bx	lr
 1212              		.cfi_endproc
 1213              	.LFE140:
 1215              		.section	.text.I2C_GetITStatus,"ax",%progbits
 1216              		.align	2
 1217              		.global	I2C_GetITStatus
 1218              		.thumb
 1219              		.thumb_func
 1221              	I2C_GetITStatus:
 1222              	.LFB141:
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Checks whether the specified I2C interrupt has occurred or not.
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt source to check. 
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be one of the following values:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert flag
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error flag
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception flag
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun flag (Slave mode)
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure flag
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost flag (Master mode)
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error flag
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TXE: Data register empty flag (Transmitter)
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_RXNE: Data register not empty (Receiver) flag
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_STOPF: Stop detection flag (Slave mode)
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADD10: 10-bit header sent flag (Master mode)
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BTF: Byte transfer finished flag
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ADDR: Address sent flag (Master mode) "ADSL"
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *                              Address matched flag (Slave mode)"ENDAD"
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SB: Start bit flag (Master mode)
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval The new state of I2C_IT (SET or RESET).
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1223              		.loc 1 1306 0
 1224              		.cfi_startproc
 1225              		@ args = 0, pretend = 0, frame = 0
 1226              		@ frame_needed = 0, uses_anonymous_args = 0
 1227              		@ link register save eliminated.
 1228              	.LVL101:
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   ITStatus bitstatus = RESET;
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t enablestatus = 0;
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_GET_IT(I2C_IT));
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check if the interrupt source is enabled or not */
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 1229              		.loc 1 1315 0
 1230 0000 01F0E062 		and	r2, r1, #117440512
 1231 0004 8388     		ldrh	r3, [r0, #4]
 1232 0006 03EA1242 		and	r2, r3, r2, lsr #16
 1233              	.LVL102:
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get bit[23:0] of the flag */
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2C_IT &= FLAG_MASK;
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the status of the specified I2C flag */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 1234              		.loc 1 1321 0
 1235 000a 838A     		ldrh	r3, [r0, #20]
 1236 000c 9BB2     		uxth	r3, r3
 1237 000e 1942     		tst	r1, r3
 1238 0010 03D0     		beq	.L88
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is set */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = SET;
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   else
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   {
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     /* I2C_IT is reset */
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****     bitstatus = RESET;
 1239              		.loc 1 1329 0 discriminator 1
 1240 0012 101C     		adds	r0, r2, #0
 1241              	.LVL103:
 1242 0014 18BF     		it	ne
 1243 0016 0120     		movne	r0, #1
 1244 0018 7047     		bx	lr
 1245              	.LVL104:
 1246              	.L88:
 1247              		.loc 1 1329 0 is_stmt 0
 1248 001a 0020     		movs	r0, #0
 1249              	.LVL105:
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   }
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Return the I2C_IT status */
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   return  bitstatus;
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** }
 1250              		.loc 1 1333 0 is_stmt 1
 1251 001c 7047     		bx	lr
 1252              		.cfi_endproc
 1253              	.LFE141:
 1255 001e 00BF     		.section	.text.I2C_ClearITPendingBit,"ax",%progbits
 1256              		.align	2
 1257              		.global	I2C_ClearITPendingBit
 1258              		.thumb
 1259              		.thumb_func
 1261              	I2C_ClearITPendingBit:
 1262              	.LFB142:
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** /**
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @brief  Clears the I2Cx's interrupt pending bits.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @param  I2C_IT: specifies the interrupt pending bit to clear. 
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          This parameter can be any combination of the following values:
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_SMBALERT: SMBus Alert interrupt
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_TIMEOUT: Timeout or Tlow error interrupt
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_PECERR: PEC error in reception  interrupt
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode)
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_AF: Acknowledge failure interrupt
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_ARLO: Arbitration lost interrupt (Master mode)
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *            @arg I2C_IT_BERR: Bus error interrupt
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * 
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   STOPF (STOP detection) is cleared by software sequence: a read operation 
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          to I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_CR1 register (I2C_Cmd() to re-enable the I2C peripheral).
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADD10 (10-bit header sent) is cleared by software sequence: a read 
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 (I2C_GetITStatus()) followed by writing the second 
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          byte of the address in I2C_DR register.
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   BTF (Byte Transfer Finished) is cleared by software sequence: a read 
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          operation to I2C_SR1 register (I2C_GetITStatus()) followed by a 
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          read/write to I2C_DR register (I2C_SendData()).
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   ADDR (Address sent) is cleared by software sequence: a read operation to 
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a read operation to 
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR2 register ((void)(I2Cx->SR2)).
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @note   SB (Start Bit) is cleared by software sequence: a read operation to 
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   *          I2C_DR register (I2C_SendData()).
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   * @retval None
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   */
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** {
 1263              		.loc 1 1366 0
 1264              		.cfi_startproc
 1265              		@ args = 0, pretend = 0, frame = 0
 1266              		@ frame_needed = 0, uses_anonymous_args = 0
 1267              		@ link register save eliminated.
 1268              	.LVL106:
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   uint32_t flagpos = 0;
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Check the parameters */
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_ALL_PERIPH(I2Cx));
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   assert_param(IS_I2C_CLEAR_IT(I2C_IT));
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Get the I2C flag position */
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   flagpos = I2C_IT & FLAG_MASK;
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c **** 
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   /* Clear the selected I2C flag */
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_i2c.c ****   I2Cx->SR1 = (uint16_t)~flagpos;
 1269              		.loc 1 1376 0
 1270 0000 C943     		mvns	r1, r1
 1271              	.LVL107:
 1272 0002 89B2     		uxth	r1, r1
 1273              	.LVL108:
 1274 0004 8182     		strh	r1, [r0, #20]	@ movhi
 1275 0006 7047     		bx	lr
 1276              		.cfi_endproc
 1277              	.LFE142:
 1279              		.text
 1280              	.Letext0:
 1281              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1282              		.file 3 "/usr/include/newlib/stdint.h"
 1283              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1284              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1285              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_i2c.h"
 1286              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_i2c.c
     /tmp/cceHjt6T.s:20     .text.I2C_DeInit:0000000000000000 $t
     /tmp/cceHjt6T.s:25     .text.I2C_DeInit:0000000000000000 I2C_DeInit
     /tmp/cceHjt6T.s:98     .text.I2C_Init:0000000000000000 $t
     /tmp/cceHjt6T.s:103    .text.I2C_Init:0000000000000000 I2C_Init
     /tmp/cceHjt6T.s:267    .text.I2C_StructInit:0000000000000000 $t
     /tmp/cceHjt6T.s:272    .text.I2C_StructInit:0000000000000000 I2C_StructInit
     /tmp/cceHjt6T.s:301    .text.I2C_Cmd:0000000000000000 $t
     /tmp/cceHjt6T.s:306    .text.I2C_Cmd:0000000000000000 I2C_Cmd
     /tmp/cceHjt6T.s:334    .text.I2C_GenerateSTART:0000000000000000 $t
     /tmp/cceHjt6T.s:339    .text.I2C_GenerateSTART:0000000000000000 I2C_GenerateSTART
     /tmp/cceHjt6T.s:367    .text.I2C_GenerateSTOP:0000000000000000 $t
     /tmp/cceHjt6T.s:372    .text.I2C_GenerateSTOP:0000000000000000 I2C_GenerateSTOP
     /tmp/cceHjt6T.s:400    .text.I2C_Send7bitAddress:0000000000000000 $t
     /tmp/cceHjt6T.s:405    .text.I2C_Send7bitAddress:0000000000000000 I2C_Send7bitAddress
     /tmp/cceHjt6T.s:431    .text.I2C_AcknowledgeConfig:0000000000000000 $t
     /tmp/cceHjt6T.s:436    .text.I2C_AcknowledgeConfig:0000000000000000 I2C_AcknowledgeConfig
     /tmp/cceHjt6T.s:464    .text.I2C_OwnAddress2Config:0000000000000000 $t
     /tmp/cceHjt6T.s:469    .text.I2C_OwnAddress2Config:0000000000000000 I2C_OwnAddress2Config
     /tmp/cceHjt6T.s:498    .text.I2C_DualAddressCmd:0000000000000000 $t
     /tmp/cceHjt6T.s:503    .text.I2C_DualAddressCmd:0000000000000000 I2C_DualAddressCmd
     /tmp/cceHjt6T.s:531    .text.I2C_GeneralCallCmd:0000000000000000 $t
     /tmp/cceHjt6T.s:536    .text.I2C_GeneralCallCmd:0000000000000000 I2C_GeneralCallCmd
     /tmp/cceHjt6T.s:564    .text.I2C_SoftwareResetCmd:0000000000000000 $t
     /tmp/cceHjt6T.s:569    .text.I2C_SoftwareResetCmd:0000000000000000 I2C_SoftwareResetCmd
     /tmp/cceHjt6T.s:596    .text.I2C_StretchClockCmd:0000000000000000 $t
     /tmp/cceHjt6T.s:601    .text.I2C_StretchClockCmd:0000000000000000 I2C_StretchClockCmd
     /tmp/cceHjt6T.s:629    .text.I2C_FastModeDutyCycleConfig:0000000000000000 $t
     /tmp/cceHjt6T.s:634    .text.I2C_FastModeDutyCycleConfig:0000000000000000 I2C_FastModeDutyCycleConfig
     /tmp/cceHjt6T.s:660    .text.I2C_NACKPositionConfig:0000000000000000 $t
     /tmp/cceHjt6T.s:665    .text.I2C_NACKPositionConfig:0000000000000000 I2C_NACKPositionConfig
     /tmp/cceHjt6T.s:691    .text.I2C_SMBusAlertConfig:0000000000000000 $t
     /tmp/cceHjt6T.s:696    .text.I2C_SMBusAlertConfig:0000000000000000 I2C_SMBusAlertConfig
     /tmp/cceHjt6T.s:722    .text.I2C_ARPCmd:0000000000000000 $t
     /tmp/cceHjt6T.s:727    .text.I2C_ARPCmd:0000000000000000 I2C_ARPCmd
     /tmp/cceHjt6T.s:755    .text.I2C_SendData:0000000000000000 $t
     /tmp/cceHjt6T.s:760    .text.I2C_SendData:0000000000000000 I2C_SendData
     /tmp/cceHjt6T.s:775    .text.I2C_ReceiveData:0000000000000000 $t
     /tmp/cceHjt6T.s:780    .text.I2C_ReceiveData:0000000000000000 I2C_ReceiveData
     /tmp/cceHjt6T.s:798    .text.I2C_TransmitPEC:0000000000000000 $t
     /tmp/cceHjt6T.s:803    .text.I2C_TransmitPEC:0000000000000000 I2C_TransmitPEC
     /tmp/cceHjt6T.s:831    .text.I2C_PECPositionConfig:0000000000000000 $t
     /tmp/cceHjt6T.s:836    .text.I2C_PECPositionConfig:0000000000000000 I2C_PECPositionConfig
     /tmp/cceHjt6T.s:862    .text.I2C_CalculatePEC:0000000000000000 $t
     /tmp/cceHjt6T.s:867    .text.I2C_CalculatePEC:0000000000000000 I2C_CalculatePEC
     /tmp/cceHjt6T.s:895    .text.I2C_GetPEC:0000000000000000 $t
     /tmp/cceHjt6T.s:900    .text.I2C_GetPEC:0000000000000000 I2C_GetPEC
     /tmp/cceHjt6T.s:918    .text.I2C_DMACmd:0000000000000000 $t
     /tmp/cceHjt6T.s:923    .text.I2C_DMACmd:0000000000000000 I2C_DMACmd
     /tmp/cceHjt6T.s:951    .text.I2C_DMALastTransferCmd:0000000000000000 $t
     /tmp/cceHjt6T.s:956    .text.I2C_DMALastTransferCmd:0000000000000000 I2C_DMALastTransferCmd
     /tmp/cceHjt6T.s:984    .text.I2C_ReadRegister:0000000000000000 $t
     /tmp/cceHjt6T.s:989    .text.I2C_ReadRegister:0000000000000000 I2C_ReadRegister
     /tmp/cceHjt6T.s:1023   .text.I2C_ITConfig:0000000000000000 $t
     /tmp/cceHjt6T.s:1028   .text.I2C_ITConfig:0000000000000000 I2C_ITConfig
     /tmp/cceHjt6T.s:1059   .text.I2C_CheckEvent:0000000000000000 $t
     /tmp/cceHjt6T.s:1064   .text.I2C_CheckEvent:0000000000000000 I2C_CheckEvent
     /tmp/cceHjt6T.s:1098   .text.I2C_GetLastEvent:0000000000000000 $t
     /tmp/cceHjt6T.s:1103   .text.I2C_GetLastEvent:0000000000000000 I2C_GetLastEvent
     /tmp/cceHjt6T.s:1129   .text.I2C_GetFlagStatus:0000000000000000 $t
     /tmp/cceHjt6T.s:1134   .text.I2C_GetFlagStatus:0000000000000000 I2C_GetFlagStatus
     /tmp/cceHjt6T.s:1192   .text.I2C_ClearFlag:0000000000000000 $t
     /tmp/cceHjt6T.s:1197   .text.I2C_ClearFlag:0000000000000000 I2C_ClearFlag
     /tmp/cceHjt6T.s:1216   .text.I2C_GetITStatus:0000000000000000 $t
     /tmp/cceHjt6T.s:1221   .text.I2C_GetITStatus:0000000000000000 I2C_GetITStatus
     /tmp/cceHjt6T.s:1256   .text.I2C_ClearITPendingBit:0000000000000000 $t
     /tmp/cceHjt6T.s:1261   .text.I2C_ClearITPendingBit:0000000000000000 I2C_ClearITPendingBit
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.76.3c9979b3ce248ca579603f7d17639bfd

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
