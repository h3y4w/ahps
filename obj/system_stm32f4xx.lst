   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"system_stm32f4xx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SetSysClock,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	SetSysClock:
  25              	.LFB112:
  26              		.file 1 "src/system_stm32f4xx.c"
   1:src/system_stm32f4xx.c **** /**
   2:src/system_stm32f4xx.c ****   ******************************************************************************
   3:src/system_stm32f4xx.c ****   * @file    system_stm32f4xx.c
   4:src/system_stm32f4xx.c ****   * @author  MCD Application Team
   5:src/system_stm32f4xx.c ****   * @version V1.0.0
   6:src/system_stm32f4xx.c ****   * @date    19-September-2011
   7:src/system_stm32f4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   8:src/system_stm32f4xx.c ****   *          This file contains the system clock configuration for STM32F4xx devices,
   9:src/system_stm32f4xx.c ****   *          and is generated by the clock configuration tool
  10:src/system_stm32f4xx.c ****   *          stm32f4xx_Clock_Configuration_V1.0.0.xls
  11:src/system_stm32f4xx.c ****   *             
  12:src/system_stm32f4xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:src/system_stm32f4xx.c ****   *     user application:
  14:src/system_stm32f4xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:src/system_stm32f4xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:src/system_stm32f4xx.c ****   *                      depending on the configuration made in the clock xls tool. 
  17:src/system_stm32f4xx.c ****   *                      This function is called at startup just after reset and 
  18:src/system_stm32f4xx.c ****   *                      before branch to main program. This call is made inside
  19:src/system_stm32f4xx.c ****   *                      the "startup_stm32f4xx.s" file.
  20:src/system_stm32f4xx.c ****   *
  21:src/system_stm32f4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:src/system_stm32f4xx.c ****   *                                  by the user application to setup the SysTick 
  23:src/system_stm32f4xx.c ****   *                                  timer or configure other parameters.
  24:src/system_stm32f4xx.c ****   *                                     
  25:src/system_stm32f4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:src/system_stm32f4xx.c ****   *                                 be called whenever the core clock is changed
  27:src/system_stm32f4xx.c ****   *                                 during program execution.
  28:src/system_stm32f4xx.c ****   *
  29:src/system_stm32f4xx.c ****   * 2. After each device reset the HSI (16 MHz) is used as system clock source.
  30:src/system_stm32f4xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
  31:src/system_stm32f4xx.c ****   *    configure the system clock before to branch to main program.
  32:src/system_stm32f4xx.c ****   *
  33:src/system_stm32f4xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:src/system_stm32f4xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:src/system_stm32f4xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:src/system_stm32f4xx.c ****   *
  37:src/system_stm32f4xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz, refer to "HSE_VALUE" define
  38:src/system_stm32f4xx.c ****   *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
  39:src/system_stm32f4xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:src/system_stm32f4xx.c ****   *    value to your own configuration.
  41:src/system_stm32f4xx.c ****   *
  42:src/system_stm32f4xx.c ****   * 5. This file configures the system clock as follows:
  43:src/system_stm32f4xx.c ****   *=============================================================================
  44:src/system_stm32f4xx.c ****   *=============================================================================
  45:src/system_stm32f4xx.c ****   *        Supported STM32F4xx device revision    | Rev A
  46:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  47:src/system_stm32f4xx.c ****   *        System Clock source                    | PLL (HSE)
  48:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  49:src/system_stm32f4xx.c ****   *        SYSCLK(Hz)                             | 168000000
  50:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  51:src/system_stm32f4xx.c ****   *        HCLK(Hz)                               | 168000000
  52:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  53:src/system_stm32f4xx.c ****   *        AHB Prescaler                          | 1
  54:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  55:src/system_stm32f4xx.c ****   *        APB1 Prescaler                         | 4
  56:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  57:src/system_stm32f4xx.c ****   *        APB2 Prescaler                         | 2
  58:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  59:src/system_stm32f4xx.c ****   *        HSE Frequency(Hz)                      | 8000000
  60:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  61:src/system_stm32f4xx.c ****   *        PLL_M                                  | 8
  62:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  63:src/system_stm32f4xx.c ****   *        PLL_N                                  | 336
  64:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  65:src/system_stm32f4xx.c ****   *        PLL_P                                  | 2
  66:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  67:src/system_stm32f4xx.c ****   *        PLL_Q                                  | 7
  68:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  69:src/system_stm32f4xx.c ****   *        PLLI2S_N                               | 192
  70:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  71:src/system_stm32f4xx.c ****   *        PLLI2S_R                               | 5
  72:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  73:src/system_stm32f4xx.c ****   *        I2S input clock(Hz)                    | 38400000
  74:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  75:src/system_stm32f4xx.c ****   *        VDD(V)                                 | 3.3
  76:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  77:src/system_stm32f4xx.c ****   *        High Performance mode                  | Enabled
  78:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  79:src/system_stm32f4xx.c ****   *        Flash Latency(WS)                      | 5
  80:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  81:src/system_stm32f4xx.c ****   *        Prefetch Buffer                        | OFF
  82:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  83:src/system_stm32f4xx.c ****   *        Instruction cache                      | ON
  84:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  85:src/system_stm32f4xx.c ****   *        Data cache                             | ON
  86:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  87:src/system_stm32f4xx.c ****   *        Require 48MHz for USB OTG FS,          | Enabled
  88:src/system_stm32f4xx.c ****   *        SDIO and RNG clock                     |
  89:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  90:src/system_stm32f4xx.c ****   *=============================================================================
  91:src/system_stm32f4xx.c ****   ****************************************************************************** 
  92:src/system_stm32f4xx.c ****   * @attention
  93:src/system_stm32f4xx.c ****   *
  94:src/system_stm32f4xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  95:src/system_stm32f4xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  96:src/system_stm32f4xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  97:src/system_stm32f4xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  98:src/system_stm32f4xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  99:src/system_stm32f4xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 100:src/system_stm32f4xx.c ****   *
 101:src/system_stm32f4xx.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 102:src/system_stm32f4xx.c ****   ******************************************************************************
 103:src/system_stm32f4xx.c ****   */
 104:src/system_stm32f4xx.c **** 
 105:src/system_stm32f4xx.c **** /** @addtogroup CMSIS
 106:src/system_stm32f4xx.c ****   * @{
 107:src/system_stm32f4xx.c ****   */
 108:src/system_stm32f4xx.c **** 
 109:src/system_stm32f4xx.c **** /** @addtogroup stm32f4xx_system
 110:src/system_stm32f4xx.c ****   * @{
 111:src/system_stm32f4xx.c ****   */  
 112:src/system_stm32f4xx.c ****   
 113:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Includes
 114:src/system_stm32f4xx.c ****   * @{
 115:src/system_stm32f4xx.c ****   */
 116:src/system_stm32f4xx.c **** 
 117:src/system_stm32f4xx.c **** #include "stm32f4xx.h"
 118:src/system_stm32f4xx.c **** 
 119:src/system_stm32f4xx.c **** /**
 120:src/system_stm32f4xx.c ****   * @}
 121:src/system_stm32f4xx.c ****   */
 122:src/system_stm32f4xx.c **** 
 123:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
 124:src/system_stm32f4xx.c ****   * @{
 125:src/system_stm32f4xx.c ****   */
 126:src/system_stm32f4xx.c **** 
 127:src/system_stm32f4xx.c **** /**
 128:src/system_stm32f4xx.c ****   * @}
 129:src/system_stm32f4xx.c ****   */
 130:src/system_stm32f4xx.c **** 
 131:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Defines
 132:src/system_stm32f4xx.c ****   * @{
 133:src/system_stm32f4xx.c ****   */
 134:src/system_stm32f4xx.c **** 
 135:src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 136:src/system_stm32f4xx.c ****      on STM324xG_EVAL board as data memory  */
 137:src/system_stm32f4xx.c **** /* #define DATA_IN_ExtSRAM */
 138:src/system_stm32f4xx.c **** 
 139:src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:src/system_stm32f4xx.c ****      Internal SRAM. */
 141:src/system_stm32f4xx.c **** /* #define VECT_TAB_SRAM */
 142:src/system_stm32f4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
 143:src/system_stm32f4xx.c ****                                    This value must be a multiple of 0x200. */
 144:src/system_stm32f4xx.c **** 
 145:src/system_stm32f4xx.c **** 
 146:src/system_stm32f4xx.c **** /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
 147:src/system_stm32f4xx.c **** #define PLL_M      8
 148:src/system_stm32f4xx.c **** #define PLL_N      336
 149:src/system_stm32f4xx.c **** 
 150:src/system_stm32f4xx.c **** /* SYSCLK = PLL_VCO / PLL_P */
 151:src/system_stm32f4xx.c **** #define PLL_P      2
 152:src/system_stm32f4xx.c **** 
 153:src/system_stm32f4xx.c **** /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
 154:src/system_stm32f4xx.c **** #define PLL_Q      7
 155:src/system_stm32f4xx.c **** 
 156:src/system_stm32f4xx.c **** /* PLLI2S_VCO = (HSE_VALUE Or HSI_VALUE / PLL_M) * PLLI2S_N
 157:src/system_stm32f4xx.c ****    I2SCLK = PLLI2S_VCO / PLLI2S_R */
 158:src/system_stm32f4xx.c **** #define PLLI2S_N   192
 159:src/system_stm32f4xx.c **** #define PLLI2S_R   5
 160:src/system_stm32f4xx.c **** 
 161:src/system_stm32f4xx.c **** /**
 162:src/system_stm32f4xx.c ****   * @}
 163:src/system_stm32f4xx.c ****   */
 164:src/system_stm32f4xx.c **** 
 165:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Macros
 166:src/system_stm32f4xx.c ****   * @{
 167:src/system_stm32f4xx.c ****   */
 168:src/system_stm32f4xx.c **** 
 169:src/system_stm32f4xx.c **** /**
 170:src/system_stm32f4xx.c ****   * @}
 171:src/system_stm32f4xx.c ****   */
 172:src/system_stm32f4xx.c **** 
 173:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Variables
 174:src/system_stm32f4xx.c ****   * @{
 175:src/system_stm32f4xx.c ****   */
 176:src/system_stm32f4xx.c **** 
 177:src/system_stm32f4xx.c ****   uint32_t SystemCoreClock = 168000000;
 178:src/system_stm32f4xx.c **** 
 179:src/system_stm32f4xx.c ****   __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 180:src/system_stm32f4xx.c **** 
 181:src/system_stm32f4xx.c **** /**
 182:src/system_stm32f4xx.c ****   * @}
 183:src/system_stm32f4xx.c ****   */
 184:src/system_stm32f4xx.c **** 
 185:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
 186:src/system_stm32f4xx.c ****   * @{
 187:src/system_stm32f4xx.c ****   */
 188:src/system_stm32f4xx.c **** 
 189:src/system_stm32f4xx.c **** static void SetSysClock(void);
 190:src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 191:src/system_stm32f4xx.c ****   static void SystemInit_ExtMemCtl(void); 
 192:src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 193:src/system_stm32f4xx.c **** 
 194:src/system_stm32f4xx.c **** /**
 195:src/system_stm32f4xx.c ****   * @}
 196:src/system_stm32f4xx.c ****   */
 197:src/system_stm32f4xx.c **** 
 198:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Functions
 199:src/system_stm32f4xx.c ****   * @{
 200:src/system_stm32f4xx.c ****   */
 201:src/system_stm32f4xx.c **** 
 202:src/system_stm32f4xx.c **** /**
 203:src/system_stm32f4xx.c ****   * @brief  Setup the microcontroller system
 204:src/system_stm32f4xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 205:src/system_stm32f4xx.c ****   *         SystemFrequency variable.
 206:src/system_stm32f4xx.c ****   * @param  None
 207:src/system_stm32f4xx.c ****   * @retval None
 208:src/system_stm32f4xx.c ****   */
 209:src/system_stm32f4xx.c **** void SystemInit(void)
 210:src/system_stm32f4xx.c **** {
 211:src/system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 212:src/system_stm32f4xx.c ****   /* Set HSION bit */
 213:src/system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
 214:src/system_stm32f4xx.c **** 
 215:src/system_stm32f4xx.c ****   /* Reset CFGR register */
 216:src/system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
 217:src/system_stm32f4xx.c **** 
 218:src/system_stm32f4xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 219:src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
 220:src/system_stm32f4xx.c **** 
 221:src/system_stm32f4xx.c ****   /* Reset PLLCFGR register */
 222:src/system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
 223:src/system_stm32f4xx.c **** 
 224:src/system_stm32f4xx.c ****   /* Reset HSEBYP bit */
 225:src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
 226:src/system_stm32f4xx.c **** 
 227:src/system_stm32f4xx.c ****   /* Disable all interrupts */
 228:src/system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
 229:src/system_stm32f4xx.c **** 
 230:src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 231:src/system_stm32f4xx.c ****   SystemInit_ExtMemCtl(); 
 232:src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 233:src/system_stm32f4xx.c ****          
 234:src/system_stm32f4xx.c ****   /* Configure the System clock source, PLL Multiplier and Divider factors, 
 235:src/system_stm32f4xx.c ****      AHB/APBx prescalers and Flash settings ----------------------------------*/
 236:src/system_stm32f4xx.c ****   SetSysClock();
 237:src/system_stm32f4xx.c **** 
 238:src/system_stm32f4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 239:src/system_stm32f4xx.c **** #ifdef VECT_TAB_SRAM
 240:src/system_stm32f4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 241:src/system_stm32f4xx.c **** #else
 242:src/system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 243:src/system_stm32f4xx.c **** #endif
 244:src/system_stm32f4xx.c **** }
 245:src/system_stm32f4xx.c **** 
 246:src/system_stm32f4xx.c **** /**
 247:src/system_stm32f4xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 248:src/system_stm32f4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 249:src/system_stm32f4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 250:src/system_stm32f4xx.c ****   *         other parameters.
 251:src/system_stm32f4xx.c ****   *           
 252:src/system_stm32f4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 253:src/system_stm32f4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 254:src/system_stm32f4xx.c ****   *         based on this variable will be incorrect.         
 255:src/system_stm32f4xx.c ****   *     
 256:src/system_stm32f4xx.c ****   * @note   - The system frequency computed by this function is not the real 
 257:src/system_stm32f4xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 258:src/system_stm32f4xx.c ****   *           constant and the selected clock source:
 259:src/system_stm32f4xx.c ****   *             
 260:src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 261:src/system_stm32f4xx.c ****   *                                              
 262:src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 263:src/system_stm32f4xx.c ****   *                          
 264:src/system_stm32f4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 265:src/system_stm32f4xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 266:src/system_stm32f4xx.c ****   *         
 267:src/system_stm32f4xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 268:src/system_stm32f4xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 269:src/system_stm32f4xx.c ****   *             in voltage and temperature.   
 270:src/system_stm32f4xx.c ****   *    
 271:src/system_stm32f4xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 272:src/system_stm32f4xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 273:src/system_stm32f4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 274:src/system_stm32f4xx.c ****   *              have wrong result.
 275:src/system_stm32f4xx.c ****   *                
 276:src/system_stm32f4xx.c ****   *         - The result of this function could be not correct when using fractional
 277:src/system_stm32f4xx.c ****   *           value for HSE crystal.
 278:src/system_stm32f4xx.c ****   *     
 279:src/system_stm32f4xx.c ****   * @param  None
 280:src/system_stm32f4xx.c ****   * @retval None
 281:src/system_stm32f4xx.c ****   */
 282:src/system_stm32f4xx.c **** void SystemCoreClockUpdate(void)
 283:src/system_stm32f4xx.c **** {
 284:src/system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 285:src/system_stm32f4xx.c ****   
 286:src/system_stm32f4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 287:src/system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 288:src/system_stm32f4xx.c **** 
 289:src/system_stm32f4xx.c ****   switch (tmp)
 290:src/system_stm32f4xx.c ****   {
 291:src/system_stm32f4xx.c ****     case 0x00:  /* HSI used as system clock source */
 292:src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 293:src/system_stm32f4xx.c ****       break;
 294:src/system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 295:src/system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 296:src/system_stm32f4xx.c ****       break;
 297:src/system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 298:src/system_stm32f4xx.c **** 
 299:src/system_stm32f4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 300:src/system_stm32f4xx.c ****          SYSCLK = PLL_VCO / PLL_P
 301:src/system_stm32f4xx.c ****          */    
 302:src/system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 303:src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 304:src/system_stm32f4xx.c ****       
 305:src/system_stm32f4xx.c ****       if (pllsource != 0)
 306:src/system_stm32f4xx.c ****       {
 307:src/system_stm32f4xx.c ****         /* HSE used as PLL clock source */
 308:src/system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 309:src/system_stm32f4xx.c ****       }
 310:src/system_stm32f4xx.c ****       else
 311:src/system_stm32f4xx.c ****       {
 312:src/system_stm32f4xx.c ****         /* HSI used as PLL clock source */
 313:src/system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 314:src/system_stm32f4xx.c ****       }
 315:src/system_stm32f4xx.c **** 
 316:src/system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 317:src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 318:src/system_stm32f4xx.c ****       break;
 319:src/system_stm32f4xx.c ****     default:
 320:src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 321:src/system_stm32f4xx.c ****       break;
 322:src/system_stm32f4xx.c ****   }
 323:src/system_stm32f4xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 324:src/system_stm32f4xx.c ****   /* Get HCLK prescaler */
 325:src/system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 326:src/system_stm32f4xx.c ****   /* HCLK frequency */
 327:src/system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 328:src/system_stm32f4xx.c **** }
 329:src/system_stm32f4xx.c **** 
 330:src/system_stm32f4xx.c **** /**
 331:src/system_stm32f4xx.c ****   * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
 332:src/system_stm32f4xx.c ****   *         AHB/APBx prescalers and Flash settings
 333:src/system_stm32f4xx.c ****   * @Note   This function should be called only once the RCC clock configuration  
 334:src/system_stm32f4xx.c ****   *         is reset to the default reset state (done in SystemInit() function).   
 335:src/system_stm32f4xx.c ****   * @param  None
 336:src/system_stm32f4xx.c ****   * @retval None
 337:src/system_stm32f4xx.c ****   */
 338:src/system_stm32f4xx.c **** static void SetSysClock(void)
 339:src/system_stm32f4xx.c **** {
  27              		.loc 1 339 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 340:src/system_stm32f4xx.c **** /******************************************************************************/
 341:src/system_stm32f4xx.c **** /*            PLL (clocked by HSE) used as System clock source                */
 342:src/system_stm32f4xx.c **** /******************************************************************************/
 343:src/system_stm32f4xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
  35              		.loc 1 343 0
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
  38 0006 0093     		str	r3, [sp]
 344:src/system_stm32f4xx.c ****   
 345:src/system_stm32f4xx.c ****   /* Enable HSE */
 346:src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
  39              		.loc 1 346 0
  40 0008 4FF46053 		mov	r3, #14336
  41 000c C4F20203 		movt	r3, 16386
  42 0010 1A68     		ldr	r2, [r3]
  43 0012 42F48032 		orr	r2, r2, #65536
  44 0016 1A60     		str	r2, [r3]
 347:src/system_stm32f4xx.c ****  
 348:src/system_stm32f4xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 349:src/system_stm32f4xx.c ****   do
 350:src/system_stm32f4xx.c ****   {
 351:src/system_stm32f4xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
  45              		.loc 1 351 0
  46 0018 4FF46052 		mov	r2, #14336
  47 001c C4F20202 		movt	r2, 16386
  48              	.L3:
  49              		.loc 1 351 0 is_stmt 0 discriminator 1
  50 0020 1368     		ldr	r3, [r2]
  51 0022 03F40033 		and	r3, r3, #131072
  52 0026 0093     		str	r3, [sp]
 352:src/system_stm32f4xx.c ****     StartUpCounter++;
  53              		.loc 1 352 0 is_stmt 1 discriminator 1
  54 0028 019B     		ldr	r3, [sp, #4]
  55 002a 0133     		adds	r3, r3, #1
  56 002c 0193     		str	r3, [sp, #4]
 353:src/system_stm32f4xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
  57              		.loc 1 353 0 discriminator 1
  58 002e 009B     		ldr	r3, [sp]
  59 0030 1BB9     		cbnz	r3, .L2
  60 0032 019B     		ldr	r3, [sp, #4]
  61 0034 B3F5A06F 		cmp	r3, #1280
  62 0038 F2D1     		bne	.L3
  63              	.L2:
 354:src/system_stm32f4xx.c **** 
 355:src/system_stm32f4xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
  64              		.loc 1 355 0
  65 003a 4FF46053 		mov	r3, #14336
  66 003e C4F20203 		movt	r3, 16386
  67 0042 1B68     		ldr	r3, [r3]
  68 0044 13F4003F 		tst	r3, #131072
 356:src/system_stm32f4xx.c ****   {
 357:src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x01;
  69              		.loc 1 357 0
  70 0048 14BF     		ite	ne
  71 004a 0123     		movne	r3, #1
 358:src/system_stm32f4xx.c ****   }
 359:src/system_stm32f4xx.c ****   else
 360:src/system_stm32f4xx.c ****   {
 361:src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x00;
  72              		.loc 1 361 0
  73 004c 0023     		moveq	r3, #0
  74 004e 0093     		str	r3, [sp]
 362:src/system_stm32f4xx.c ****   }
 363:src/system_stm32f4xx.c **** 
 364:src/system_stm32f4xx.c ****   if (HSEStatus == (uint32_t)0x01)
  75              		.loc 1 364 0
  76 0050 009B     		ldr	r3, [sp]
  77 0052 012B     		cmp	r3, #1
  78 0054 46D1     		bne	.L6
 365:src/system_stm32f4xx.c ****   {
 366:src/system_stm32f4xx.c ****     /* Enable high performance mode, System frequency up to 168 MHz */
 367:src/system_stm32f4xx.c ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN;
  79              		.loc 1 367 0
  80 0056 4FF46053 		mov	r3, #14336
  81 005a C4F20203 		movt	r3, 16386
  82 005e 1A6C     		ldr	r2, [r3, #64]
  83 0060 42F08052 		orr	r2, r2, #268435456
  84 0064 1A64     		str	r2, [r3, #64]
 368:src/system_stm32f4xx.c ****     PWR->CR |= PWR_CR_PMODE;  
  85              		.loc 1 368 0
  86 0066 4FF4E042 		mov	r2, #28672
  87 006a C4F20002 		movt	r2, 16384
  88 006e 1168     		ldr	r1, [r2]
  89 0070 41F48041 		orr	r1, r1, #16384
  90 0074 1160     		str	r1, [r2]
 369:src/system_stm32f4xx.c **** 
 370:src/system_stm32f4xx.c ****     /* HCLK = SYSCLK / 1*/
 371:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
  91              		.loc 1 371 0
  92 0076 9A68     		ldr	r2, [r3, #8]
  93 0078 9A60     		str	r2, [r3, #8]
 372:src/system_stm32f4xx.c ****       
 373:src/system_stm32f4xx.c ****     /* PCLK2 = HCLK / 2*/
 374:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
  94              		.loc 1 374 0
  95 007a 9A68     		ldr	r2, [r3, #8]
  96 007c 42F40042 		orr	r2, r2, #32768
  97 0080 9A60     		str	r2, [r3, #8]
 375:src/system_stm32f4xx.c ****     
 376:src/system_stm32f4xx.c ****     /* PCLK1 = HCLK / 4*/
 377:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
  98              		.loc 1 377 0
  99 0082 9A68     		ldr	r2, [r3, #8]
 100 0084 42F4A052 		orr	r2, r2, #5120
 101 0088 9A60     		str	r2, [r3, #8]
 378:src/system_stm32f4xx.c **** 
 379:src/system_stm32f4xx.c ****     /* Configure the main PLL */
 380:src/system_stm32f4xx.c ****     RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 102              		.loc 1 380 0
 103 008a 45F20842 		movw	r2, #21512
 104 008e C0F24072 		movt	r2, 1856
 105 0092 5A60     		str	r2, [r3, #4]
 381:src/system_stm32f4xx.c ****                    (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 382:src/system_stm32f4xx.c **** 
 383:src/system_stm32f4xx.c ****     /* Enable the main PLL */
 384:src/system_stm32f4xx.c ****     RCC->CR |= RCC_CR_PLLON;
 106              		.loc 1 384 0
 107 0094 1A68     		ldr	r2, [r3]
 108 0096 42F08072 		orr	r2, r2, #16777216
 109 009a 1A60     		str	r2, [r3]
 385:src/system_stm32f4xx.c **** 
 386:src/system_stm32f4xx.c ****     /* Wait till the main PLL is ready */
 387:src/system_stm32f4xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 110              		.loc 1 387 0
 111 009c 4FF46052 		mov	r2, #14336
 112 00a0 C4F20202 		movt	r2, 16386
 113              	.L7:
 114              		.loc 1 387 0 is_stmt 0 discriminator 1
 115 00a4 1368     		ldr	r3, [r2]
 116 00a6 13F0007F 		tst	r3, #33554432
 117 00aa FBD0     		beq	.L7
 388:src/system_stm32f4xx.c ****     {
 389:src/system_stm32f4xx.c ****     }
 390:src/system_stm32f4xx.c ****    
 391:src/system_stm32f4xx.c ****     /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
 392:src/system_stm32f4xx.c ****     FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 118              		.loc 1 392 0 is_stmt 1
 119 00ac 4FF47053 		mov	r3, #15360
 120 00b0 C4F20203 		movt	r3, 16386
 121 00b4 40F20562 		movw	r2, #1541
 122 00b8 1A60     		str	r2, [r3]
 393:src/system_stm32f4xx.c **** 
 394:src/system_stm32f4xx.c ****     /* Select the main PLL as system clock source */
 395:src/system_stm32f4xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 123              		.loc 1 395 0
 124 00ba 4FF46053 		mov	r3, #14336
 125 00be C4F20203 		movt	r3, 16386
 126 00c2 9A68     		ldr	r2, [r3, #8]
 127 00c4 22F00302 		bic	r2, r2, #3
 128 00c8 9A60     		str	r2, [r3, #8]
 396:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_SW_PLL;
 129              		.loc 1 396 0
 130 00ca 9A68     		ldr	r2, [r3, #8]
 131 00cc 42F00202 		orr	r2, r2, #2
 132 00d0 9A60     		str	r2, [r3, #8]
 397:src/system_stm32f4xx.c **** 
 398:src/system_stm32f4xx.c ****     /* Wait till the main PLL is used as system clock source */
 399:src/system_stm32f4xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 133              		.loc 1 399 0
 134 00d2 4FF46052 		mov	r2, #14336
 135 00d6 C4F20202 		movt	r2, 16386
 136              	.L8:
 137              		.loc 1 399 0 is_stmt 0 discriminator 1
 138 00da 9368     		ldr	r3, [r2, #8]
 139 00dc 03F00C03 		and	r3, r3, #12
 140 00e0 082B     		cmp	r3, #8
 141 00e2 FAD1     		bne	.L8
 142              	.L6:
 400:src/system_stm32f4xx.c ****     {
 401:src/system_stm32f4xx.c ****     }
 402:src/system_stm32f4xx.c ****   }
 403:src/system_stm32f4xx.c ****   else
 404:src/system_stm32f4xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock
 405:src/system_stm32f4xx.c ****          configuration. User can add here some code to deal with this error */
 406:src/system_stm32f4xx.c ****   }
 407:src/system_stm32f4xx.c **** 
 408:src/system_stm32f4xx.c **** /******************************************************************************/
 409:src/system_stm32f4xx.c **** /*                        I2S clock configuration                             */
 410:src/system_stm32f4xx.c **** /******************************************************************************/
 411:src/system_stm32f4xx.c ****   /* PLLI2S clock used as I2S clock source */
 412:src/system_stm32f4xx.c ****   RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 143              		.loc 1 412 0 is_stmt 1
 144 00e4 4FF46053 		mov	r3, #14336
 145 00e8 C4F20203 		movt	r3, 16386
 146 00ec 9A68     		ldr	r2, [r3, #8]
 147 00ee 22F40002 		bic	r2, r2, #8388608
 148 00f2 9A60     		str	r2, [r3, #8]
 413:src/system_stm32f4xx.c **** 
 414:src/system_stm32f4xx.c ****   /* Configure PLLI2S */
 415:src/system_stm32f4xx.c ****   RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 149              		.loc 1 415 0
 150 00f4 4FF44052 		mov	r2, #12288
 151 00f8 C5F20002 		movt	r2, 20480
 152 00fc C3F88420 		str	r2, [r3, #132]
 416:src/system_stm32f4xx.c **** 
 417:src/system_stm32f4xx.c ****   /* Enable PLLI2S */
 418:src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 153              		.loc 1 418 0
 154 0100 1A68     		ldr	r2, [r3]
 155 0102 42F08062 		orr	r2, r2, #67108864
 156 0106 1A60     		str	r2, [r3]
 419:src/system_stm32f4xx.c **** 
 420:src/system_stm32f4xx.c ****   /* Wait till PLLI2S is ready */
 421:src/system_stm32f4xx.c ****   while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 157              		.loc 1 421 0
 158 0108 4FF46052 		mov	r2, #14336
 159 010c C4F20202 		movt	r2, 16386
 160              	.L9:
 161              		.loc 1 421 0 is_stmt 0 discriminator 1
 162 0110 1368     		ldr	r3, [r2]
 163 0112 13F0006F 		tst	r3, #134217728
 164 0116 FBD0     		beq	.L9
 422:src/system_stm32f4xx.c ****   {
 423:src/system_stm32f4xx.c ****   }
 424:src/system_stm32f4xx.c **** }
 165              		.loc 1 424 0 is_stmt 1
 166 0118 02B0     		add	sp, sp, #8
 167              		@ sp needed
 168 011a 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE112:
 172              		.section	.text.SystemInit,"ax",%progbits
 173              		.align	2
 174              		.global	SystemInit
 175              		.thumb
 176              		.thumb_func
 178              	SystemInit:
 179              	.LFB110:
 210:src/system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 180              		.loc 1 210 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184 0000 08B5     		push	{r3, lr}
 185              	.LCFI1:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 3, -8
 188              		.cfi_offset 14, -4
 213:src/system_stm32f4xx.c **** 
 189              		.loc 1 213 0
 190 0002 4FF46053 		mov	r3, #14336
 191 0006 C4F20203 		movt	r3, 16386
 192 000a 1A68     		ldr	r2, [r3]
 193 000c 42F00102 		orr	r2, r2, #1
 194 0010 1A60     		str	r2, [r3]
 216:src/system_stm32f4xx.c **** 
 195              		.loc 1 216 0
 196 0012 0022     		movs	r2, #0
 197 0014 9A60     		str	r2, [r3, #8]
 219:src/system_stm32f4xx.c **** 
 198              		.loc 1 219 0
 199 0016 1968     		ldr	r1, [r3]
 200 0018 21F08471 		bic	r1, r1, #17301504
 201 001c 21F48031 		bic	r1, r1, #65536
 202 0020 1960     		str	r1, [r3]
 222:src/system_stm32f4xx.c **** 
 203              		.loc 1 222 0
 204 0022 43F21001 		movw	r1, #12304
 205 0026 C2F20041 		movt	r1, 9216
 206 002a 5960     		str	r1, [r3, #4]
 225:src/system_stm32f4xx.c **** 
 207              		.loc 1 225 0
 208 002c 1968     		ldr	r1, [r3]
 209 002e 21F48021 		bic	r1, r1, #262144
 210 0032 1960     		str	r1, [r3]
 228:src/system_stm32f4xx.c **** 
 211              		.loc 1 228 0
 212 0034 DA60     		str	r2, [r3, #12]
 236:src/system_stm32f4xx.c **** 
 213              		.loc 1 236 0
 214 0036 FFF7FEFF 		bl	SetSysClock
 215              	.LVL0:
 242:src/system_stm32f4xx.c **** #endif
 216              		.loc 1 242 0
 217 003a 4FF46D43 		mov	r3, #60672
 218 003e CEF20003 		movt	r3, 57344
 219 0042 4FF00062 		mov	r2, #134217728
 220 0046 9A60     		str	r2, [r3, #8]
 221 0048 08BD     		pop	{r3, pc}
 222              		.cfi_endproc
 223              	.LFE110:
 225 004a 00BF     		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 226              		.align	2
 227              		.global	SystemCoreClockUpdate
 228              		.thumb
 229              		.thumb_func
 231              	SystemCoreClockUpdate:
 232              	.LFB111:
 283:src/system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 233              		.loc 1 283 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 0
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 237              		@ link register save eliminated.
 238              	.LVL1:
 287:src/system_stm32f4xx.c **** 
 239              		.loc 1 287 0
 240 0000 4FF46053 		mov	r3, #14336
 241 0004 C4F20203 		movt	r3, 16386
 242 0008 9B68     		ldr	r3, [r3, #8]
 243 000a 03F00C03 		and	r3, r3, #12
 244              	.LVL2:
 289:src/system_stm32f4xx.c ****   {
 245              		.loc 1 289 0
 246 000e 042B     		cmp	r3, #4
 247 0010 0DD0     		beq	.L17
 248 0012 082B     		cmp	r3, #8
 249 0014 15D0     		beq	.L18
 250 0016 002B     		cmp	r3, #0
 251 0018 42D1     		bne	.L23
 292:src/system_stm32f4xx.c ****       break;
 252              		.loc 1 292 0
 253 001a 40F20003 		movw	r3, #:lower16:.LANCHOR0
 254              	.LVL3:
 255 001e C0F20003 		movt	r3, #:upper16:.LANCHOR0
 256 0022 4FF41052 		mov	r2, #9216
 257 0026 C0F2F402 		movt	r2, 244
 258 002a 1A60     		str	r2, [r3]
 293:src/system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 259              		.loc 1 293 0
 260 002c 41E0     		b	.L20
 261              	.LVL4:
 262              	.L17:
 295:src/system_stm32f4xx.c ****       break;
 263              		.loc 1 295 0
 264 002e 40F20003 		movw	r3, #:lower16:.LANCHOR0
 265              	.LVL5:
 266 0032 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 267 0036 4FF49052 		mov	r2, #4608
 268 003a C0F27A02 		movt	r2, 122
 269 003e 1A60     		str	r2, [r3]
 296:src/system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 270              		.loc 1 296 0
 271 0040 37E0     		b	.L20
 272              	.LVL6:
 273              	.L18:
 302:src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 274              		.loc 1 302 0
 275 0042 4FF46053 		mov	r3, #14336
 276              	.LVL7:
 277 0046 C4F20203 		movt	r3, 16386
 278 004a 5968     		ldr	r1, [r3, #4]
 279              	.LVL8:
 303:src/system_stm32f4xx.c ****       
 280              		.loc 1 303 0
 281 004c 5B68     		ldr	r3, [r3, #4]
 282 004e 03F03F03 		and	r3, r3, #63
 283              	.LVL9:
 305:src/system_stm32f4xx.c ****       {
 284              		.loc 1 305 0
 285 0052 11F4800F 		tst	r1, #4194304
 308:src/system_stm32f4xx.c ****       }
 286              		.loc 1 308 0
 287 0056 19BF     		ittee	ne
 288 0058 4FF49052 		movne	r2, #4608
 289 005c C0F27A02 		movtne	r2, 122
 313:src/system_stm32f4xx.c ****       }
 290              		.loc 1 313 0
 291 0060 4FF41052 		moveq	r2, #9216
 292 0064 C0F2F402 		movteq	r2, 244
 293 0068 B2FBF3F3 		udiv	r3, r2, r3
 294              	.LVL10:
 295 006c 4FF46051 		mov	r1, #14336
 296              	.LVL11:
 297 0070 C4F20201 		movt	r1, 16386
 298 0074 4A68     		ldr	r2, [r1, #4]
 299 0076 C2F38812 		ubfx	r2, r2, #6, #9
 300 007a 02FB03F2 		mul	r2, r2, r3
 301              	.LVL12:
 316:src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 302              		.loc 1 316 0
 303 007e 4FF46053 		mov	r3, #14336
 304 0082 C4F20203 		movt	r3, 16386
 305 0086 5B68     		ldr	r3, [r3, #4]
 306 0088 C3F30143 		ubfx	r3, r3, #16, #2
 307 008c 0133     		adds	r3, r3, #1
 308 008e 5B00     		lsls	r3, r3, #1
 309              	.LVL13:
 317:src/system_stm32f4xx.c ****       break;
 310              		.loc 1 317 0
 311 0090 B2FBF3F2 		udiv	r2, r2, r3
 312              	.LVL14:
 313 0094 40F20003 		movw	r3, #:lower16:.LANCHOR0
 314              	.LVL15:
 315 0098 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 316 009c 1A60     		str	r2, [r3]
 318:src/system_stm32f4xx.c ****     default:
 317              		.loc 1 318 0
 318 009e 08E0     		b	.L20
 319              	.LVL16:
 320              	.L23:
 320:src/system_stm32f4xx.c ****       break;
 321              		.loc 1 320 0
 322 00a0 40F20003 		movw	r3, #:lower16:.LANCHOR0
 323              	.LVL17:
 324 00a4 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 325 00a8 4FF41052 		mov	r2, #9216
 326 00ac C0F2F402 		movt	r2, 244
 327 00b0 1A60     		str	r2, [r3]
 328              	.LVL18:
 329              	.L20:
 325:src/system_stm32f4xx.c ****   /* HCLK frequency */
 330              		.loc 1 325 0
 331 00b2 4FF46053 		mov	r3, #14336
 332 00b6 C4F20203 		movt	r3, 16386
 333 00ba 9A68     		ldr	r2, [r3, #8]
 334 00bc C2F30312 		ubfx	r2, r2, #4, #4
 335 00c0 40F20003 		movw	r3, #:lower16:.LANCHOR1
 336 00c4 C0F20003 		movt	r3, #:upper16:.LANCHOR1
 337 00c8 995C     		ldrb	r1, [r3, r2]	@ zero_extendqisi2
 338 00ca C9B2     		uxtb	r1, r1
 339              	.LVL19:
 327:src/system_stm32f4xx.c **** }
 340              		.loc 1 327 0
 341 00cc 40F20003 		movw	r3, #:lower16:.LANCHOR0
 342 00d0 C0F20003 		movt	r3, #:upper16:.LANCHOR0
 343 00d4 1A68     		ldr	r2, [r3]
 344 00d6 CA40     		lsrs	r2, r2, r1
 345 00d8 1A60     		str	r2, [r3]
 346 00da 7047     		bx	lr
 347              		.cfi_endproc
 348              	.LFE111:
 350              		.global	AHBPrescTable
 351              		.global	SystemCoreClock
 352              		.section	.data.AHBPrescTable,"aw",%progbits
 353              		.align	2
 354              		.set	.LANCHOR1,. + 0
 357              	AHBPrescTable:
 358 0000 00       		.byte	0
 359 0001 00       		.byte	0
 360 0002 00       		.byte	0
 361 0003 00       		.byte	0
 362 0004 00       		.byte	0
 363 0005 00       		.byte	0
 364 0006 00       		.byte	0
 365 0007 00       		.byte	0
 366 0008 01       		.byte	1
 367 0009 02       		.byte	2
 368 000a 03       		.byte	3
 369 000b 04       		.byte	4
 370 000c 06       		.byte	6
 371 000d 07       		.byte	7
 372 000e 08       		.byte	8
 373 000f 09       		.byte	9
 374              		.section	.data.SystemCoreClock,"aw",%progbits
 375              		.align	2
 376              		.set	.LANCHOR0,. + 0
 379              	SystemCoreClock:
 380 0000 007A030A 		.word	168000000
 381              		.text
 382              	.Letext0:
 383              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 384              		.file 3 "/usr/include/newlib/stdint.h"
 385              		.file 4 "libs/CMSIS/Include/core_cm4.h"
 386              		.file 5 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f4xx.c
     /tmp/cclStpqp.s:20     .text.SetSysClock:0000000000000000 $t
     /tmp/cclStpqp.s:24     .text.SetSysClock:0000000000000000 SetSysClock
     /tmp/cclStpqp.s:173    .text.SystemInit:0000000000000000 $t
     /tmp/cclStpqp.s:178    .text.SystemInit:0000000000000000 SystemInit
     /tmp/cclStpqp.s:226    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/cclStpqp.s:231    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/cclStpqp.s:376    .data.SystemCoreClock:0000000000000000 .LANCHOR0
     /tmp/cclStpqp.s:354    .data.AHBPrescTable:0000000000000000 .LANCHOR1
     /tmp/cclStpqp.s:357    .data.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/cclStpqp.s:379    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/cclStpqp.s:353    .data.AHBPrescTable:0000000000000000 $d
     /tmp/cclStpqp.s:375    .data.SystemCoreClock:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.7402b5479d3fa4780665141f585fc0ee
                           .group:0000000000000000 wm4.stm32f4xx.h.48.a3308e16720c7afc3eb28e585e628ce6
                           .group:0000000000000000 wm4.core_cm4.h.32.5f62939b60122629d60d85d0c4a14709
                           .group:0000000000000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:0000000000000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:0000000000000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:0000000000000000 wm4.core_cmInstr.h.25.f50f886f2edf670cf199b35fd96f5c91
                           .group:0000000000000000 wm4.core_cm4_simd.h.29.b4a3fdfb606cb3b26119424324d4b963
                           .group:0000000000000000 wm4.core_cm4.h.153.5393ef7e6cebf34dd51ca528f9218ab3
                           .group:0000000000000000 wm4.stm32f4xx.h.282.95bae448a91bccfbf24a6f9d95904bb8
                           .group:0000000000000000 wm4.stm32f4xx_adc.h.102.2061aa73008746f3c2cc6ce8f635cad3
                           .group:0000000000000000 wm4.stm32f4xx_can.h.25.87f18ca48b2692d39f76e87b1f07c953
                           .group:0000000000000000 wm4.stm32f4xx_cryp.h.25.db1951c06ee684df97ea3a11aba6cb51
                           .group:0000000000000000 wm4.stm32f4xx_dac.h.25.c43557a6416ea4dfa986c1209c2558d6
                           .group:0000000000000000 wm4.stm32f4xx_dbgmcu.h.24.7aedfdcf091890b5cb96019bd29a2bfc
                           .group:0000000000000000 wm4.stm32f4xx_dcmi.h.24.64883d9be802a535b1d7770d14da73e0
                           .group:0000000000000000 wm4.stm32f4xx_dma.h.25.c1fa1d44ae0bc9c2b3a0d1d355d8c1e6
                           .group:0000000000000000 wm4.stm32f4xx_exti.h.25.620998268d5d3d9042a8297fbe07d507
                           .group:0000000000000000 wm4.stm32f4xx_flash.h.25.65d4f351b72ee41355279f70305f361a
                           .group:0000000000000000 wm4.stm32f4xx_fsmc.h.25.b907ac7bd9bec46e02d06b137d53cfd8
                           .group:0000000000000000 wm4.stm32f4xx_hash.h.25.633fb84f031cf2ab1bd834e536716dfa
                           .group:0000000000000000 wm4.stm32f4xx_gpio.h.25.5bd1d790d742a307b55aea5fa8fcdae8
                           .group:0000000000000000 wm4.stm32f4xx_i2c.h.25.8fcdb817a00a67d4624d79bab0d9275f
                           .group:0000000000000000 wm4.stm32f4xx_iwdg.h.25.3013e8d2058415cb9d51af77f748a146
                           .group:0000000000000000 wm4.stm32f4xx_pwr.h.25.48b68c1f3a894ab012f9c2a2c222f159
                           .group:0000000000000000 wm4.stm32f4xx_rcc.h.24.c15e7c8dc065bb29146f29591b195c87
                           .group:0000000000000000 wm4.stm32f4xx_rng.h.25.cdb5c5c07de6a48aedfde608da3f447e
                           .group:0000000000000000 wm4.stm32f4xx_rtc.h.25.4809a79ad46ad97b4a01e735a96738eb
                           .group:0000000000000000 wm4.stm32f4xx_sdio.h.25.406302aabae34eada94e5f2cde635a3e
                           .group:0000000000000000 wm4.stm32f4xx_spi.h.25.46c61b79ff8408da93e2e90cf9b717d6
                           .group:0000000000000000 wm4.stm32f4xx_syscfg.h.25.9d5caab5677661b69e959531364e23d7
                           .group:0000000000000000 wm4.stm32f4xx_tim.h.25.948f7fc943f34bd206e29758e77ee0a2
                           .group:0000000000000000 wm4.stm32f4xx_usart.h.25.b64697dad017ba547dd272c2cdb5846a
                           .group:0000000000000000 wm4.stm32f4xx_wwdg.h.25.09d70b7849c6894ddf1e83c8e86b70e1
                           .group:0000000000000000 wm4.misc.h.25.a0cb758c1f091b46f201b19cec9e63a1
                           .group:0000000000000000 wm4.stm32f4xx.h.6913.da011404ccb203790556c86f10c46b18

NO UNDEFINED SYMBOLS
