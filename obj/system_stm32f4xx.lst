   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"system_stm32f4xx.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	SystemCoreClock
  20              		.section	.data.SystemCoreClock,"aw",%progbits
  21              		.align	2
  24              	SystemCoreClock:
  25 0000 007A030A 		.word	168000000
  26              		.global	AHBPrescTable
  27              		.section	.data.AHBPrescTable,"aw",%progbits
  28              		.align	2
  31              	AHBPrescTable:
  32 0000 00       		.byte	0
  33 0001 00       		.byte	0
  34 0002 00       		.byte	0
  35 0003 00       		.byte	0
  36 0004 00       		.byte	0
  37 0005 00       		.byte	0
  38 0006 00       		.byte	0
  39 0007 00       		.byte	0
  40 0008 01       		.byte	1
  41 0009 02       		.byte	2
  42 000a 03       		.byte	3
  43 000b 04       		.byte	4
  44 000c 06       		.byte	6
  45 000d 07       		.byte	7
  46 000e 08       		.byte	8
  47 000f 09       		.byte	9
  48              		.section	.text.SystemInit,"ax",%progbits
  49              		.align	2
  50              		.global	SystemInit
  51              		.thumb
  52              		.thumb_func
  54              	SystemInit:
  55              	.LFB110:
  56              		.file 1 "src/system_stm32f4xx.c"
   1:src/system_stm32f4xx.c **** /**
   2:src/system_stm32f4xx.c ****   ******************************************************************************
   3:src/system_stm32f4xx.c ****   * @file    system_stm32f4xx.c
   4:src/system_stm32f4xx.c ****   * @author  MCD Application Team
   5:src/system_stm32f4xx.c ****   * @version V1.0.0
   6:src/system_stm32f4xx.c ****   * @date    19-September-2011
   7:src/system_stm32f4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   8:src/system_stm32f4xx.c ****   *          This file contains the system clock configuration for STM32F4xx devices,
   9:src/system_stm32f4xx.c ****   *          and is generated by the clock configuration tool
  10:src/system_stm32f4xx.c ****   *          stm32f4xx_Clock_Configuration_V1.0.0.xls
  11:src/system_stm32f4xx.c ****   *             
  12:src/system_stm32f4xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:src/system_stm32f4xx.c ****   *     user application:
  14:src/system_stm32f4xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:src/system_stm32f4xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:src/system_stm32f4xx.c ****   *                      depending on the configuration made in the clock xls tool. 
  17:src/system_stm32f4xx.c ****   *                      This function is called at startup just after reset and 
  18:src/system_stm32f4xx.c ****   *                      before branch to main program. This call is made inside
  19:src/system_stm32f4xx.c ****   *                      the "startup_stm32f4xx.s" file.
  20:src/system_stm32f4xx.c ****   *
  21:src/system_stm32f4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:src/system_stm32f4xx.c ****   *                                  by the user application to setup the SysTick 
  23:src/system_stm32f4xx.c ****   *                                  timer or configure other parameters.
  24:src/system_stm32f4xx.c ****   *                                     
  25:src/system_stm32f4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:src/system_stm32f4xx.c ****   *                                 be called whenever the core clock is changed
  27:src/system_stm32f4xx.c ****   *                                 during program execution.
  28:src/system_stm32f4xx.c ****   *
  29:src/system_stm32f4xx.c ****   * 2. After each device reset the HSI (16 MHz) is used as system clock source.
  30:src/system_stm32f4xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
  31:src/system_stm32f4xx.c ****   *    configure the system clock before to branch to main program.
  32:src/system_stm32f4xx.c ****   *
  33:src/system_stm32f4xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:src/system_stm32f4xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:src/system_stm32f4xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:src/system_stm32f4xx.c ****   *
  37:src/system_stm32f4xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz, refer to "HSE_VALUE" define
  38:src/system_stm32f4xx.c ****   *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
  39:src/system_stm32f4xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:src/system_stm32f4xx.c ****   *    value to your own configuration.
  41:src/system_stm32f4xx.c ****   *
  42:src/system_stm32f4xx.c ****   * 5. This file configures the system clock as follows:
  43:src/system_stm32f4xx.c ****   *=============================================================================
  44:src/system_stm32f4xx.c ****   *=============================================================================
  45:src/system_stm32f4xx.c ****   *        Supported STM32F4xx device revision    | Rev A
  46:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  47:src/system_stm32f4xx.c ****   *        System Clock source                    | PLL (HSE)
  48:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  49:src/system_stm32f4xx.c ****   *        SYSCLK(Hz)                             | 168000000
  50:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  51:src/system_stm32f4xx.c ****   *        HCLK(Hz)                               | 168000000
  52:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  53:src/system_stm32f4xx.c ****   *        AHB Prescaler                          | 1
  54:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  55:src/system_stm32f4xx.c ****   *        APB1 Prescaler                         | 4
  56:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  57:src/system_stm32f4xx.c ****   *        APB2 Prescaler                         | 2
  58:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  59:src/system_stm32f4xx.c ****   *        HSE Frequency(Hz)                      | 8000000
  60:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  61:src/system_stm32f4xx.c ****   *        PLL_M                                  | 8
  62:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  63:src/system_stm32f4xx.c ****   *        PLL_N                                  | 336
  64:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  65:src/system_stm32f4xx.c ****   *        PLL_P                                  | 2
  66:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  67:src/system_stm32f4xx.c ****   *        PLL_Q                                  | 7
  68:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  69:src/system_stm32f4xx.c ****   *        PLLI2S_N                               | 192
  70:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  71:src/system_stm32f4xx.c ****   *        PLLI2S_R                               | 5
  72:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  73:src/system_stm32f4xx.c ****   *        I2S input clock(Hz)                    | 38400000
  74:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  75:src/system_stm32f4xx.c ****   *        VDD(V)                                 | 3.3
  76:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  77:src/system_stm32f4xx.c ****   *        High Performance mode                  | Enabled
  78:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  79:src/system_stm32f4xx.c ****   *        Flash Latency(WS)                      | 5
  80:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  81:src/system_stm32f4xx.c ****   *        Prefetch Buffer                        | OFF
  82:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  83:src/system_stm32f4xx.c ****   *        Instruction cache                      | ON
  84:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  85:src/system_stm32f4xx.c ****   *        Data cache                             | ON
  86:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  87:src/system_stm32f4xx.c ****   *        Require 48MHz for USB OTG FS,          | Enabled
  88:src/system_stm32f4xx.c ****   *        SDIO and RNG clock                     |
  89:src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  90:src/system_stm32f4xx.c ****   *=============================================================================
  91:src/system_stm32f4xx.c ****   ****************************************************************************** 
  92:src/system_stm32f4xx.c ****   * @attention
  93:src/system_stm32f4xx.c ****   *
  94:src/system_stm32f4xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  95:src/system_stm32f4xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  96:src/system_stm32f4xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  97:src/system_stm32f4xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  98:src/system_stm32f4xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  99:src/system_stm32f4xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 100:src/system_stm32f4xx.c ****   *
 101:src/system_stm32f4xx.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 102:src/system_stm32f4xx.c ****   ******************************************************************************
 103:src/system_stm32f4xx.c ****   */
 104:src/system_stm32f4xx.c **** 
 105:src/system_stm32f4xx.c **** /** @addtogroup CMSIS
 106:src/system_stm32f4xx.c ****   * @{
 107:src/system_stm32f4xx.c ****   */
 108:src/system_stm32f4xx.c **** 
 109:src/system_stm32f4xx.c **** /** @addtogroup stm32f4xx_system
 110:src/system_stm32f4xx.c ****   * @{
 111:src/system_stm32f4xx.c ****   */  
 112:src/system_stm32f4xx.c ****   
 113:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Includes
 114:src/system_stm32f4xx.c ****   * @{
 115:src/system_stm32f4xx.c ****   */
 116:src/system_stm32f4xx.c **** 
 117:src/system_stm32f4xx.c **** #include "stm32f4xx.h"
 118:src/system_stm32f4xx.c **** 
 119:src/system_stm32f4xx.c **** /**
 120:src/system_stm32f4xx.c ****   * @}
 121:src/system_stm32f4xx.c ****   */
 122:src/system_stm32f4xx.c **** 
 123:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
 124:src/system_stm32f4xx.c ****   * @{
 125:src/system_stm32f4xx.c ****   */
 126:src/system_stm32f4xx.c **** 
 127:src/system_stm32f4xx.c **** /**
 128:src/system_stm32f4xx.c ****   * @}
 129:src/system_stm32f4xx.c ****   */
 130:src/system_stm32f4xx.c **** 
 131:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Defines
 132:src/system_stm32f4xx.c ****   * @{
 133:src/system_stm32f4xx.c ****   */
 134:src/system_stm32f4xx.c **** 
 135:src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 136:src/system_stm32f4xx.c ****      on STM324xG_EVAL board as data memory  */
 137:src/system_stm32f4xx.c **** /* #define DATA_IN_ExtSRAM */
 138:src/system_stm32f4xx.c **** 
 139:src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:src/system_stm32f4xx.c ****      Internal SRAM. */
 141:src/system_stm32f4xx.c **** /* #define VECT_TAB_SRAM */
 142:src/system_stm32f4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
 143:src/system_stm32f4xx.c ****                                    This value must be a multiple of 0x200. */
 144:src/system_stm32f4xx.c **** 
 145:src/system_stm32f4xx.c **** 
 146:src/system_stm32f4xx.c **** /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
 147:src/system_stm32f4xx.c **** #define PLL_M      8
 148:src/system_stm32f4xx.c **** #define PLL_N      336
 149:src/system_stm32f4xx.c **** 
 150:src/system_stm32f4xx.c **** /* SYSCLK = PLL_VCO / PLL_P */
 151:src/system_stm32f4xx.c **** #define PLL_P      2
 152:src/system_stm32f4xx.c **** 
 153:src/system_stm32f4xx.c **** /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
 154:src/system_stm32f4xx.c **** #define PLL_Q      7
 155:src/system_stm32f4xx.c **** 
 156:src/system_stm32f4xx.c **** /* PLLI2S_VCO = (HSE_VALUE Or HSI_VALUE / PLL_M) * PLLI2S_N
 157:src/system_stm32f4xx.c ****    I2SCLK = PLLI2S_VCO / PLLI2S_R */
 158:src/system_stm32f4xx.c **** #define PLLI2S_N   192
 159:src/system_stm32f4xx.c **** #define PLLI2S_R   5
 160:src/system_stm32f4xx.c **** 
 161:src/system_stm32f4xx.c **** /**
 162:src/system_stm32f4xx.c ****   * @}
 163:src/system_stm32f4xx.c ****   */
 164:src/system_stm32f4xx.c **** 
 165:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Macros
 166:src/system_stm32f4xx.c ****   * @{
 167:src/system_stm32f4xx.c ****   */
 168:src/system_stm32f4xx.c **** 
 169:src/system_stm32f4xx.c **** /**
 170:src/system_stm32f4xx.c ****   * @}
 171:src/system_stm32f4xx.c ****   */
 172:src/system_stm32f4xx.c **** 
 173:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Variables
 174:src/system_stm32f4xx.c ****   * @{
 175:src/system_stm32f4xx.c ****   */
 176:src/system_stm32f4xx.c **** 
 177:src/system_stm32f4xx.c ****   uint32_t SystemCoreClock = 168000000;
 178:src/system_stm32f4xx.c **** 
 179:src/system_stm32f4xx.c ****   __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 180:src/system_stm32f4xx.c **** 
 181:src/system_stm32f4xx.c **** /**
 182:src/system_stm32f4xx.c ****   * @}
 183:src/system_stm32f4xx.c ****   */
 184:src/system_stm32f4xx.c **** 
 185:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
 186:src/system_stm32f4xx.c ****   * @{
 187:src/system_stm32f4xx.c ****   */
 188:src/system_stm32f4xx.c **** 
 189:src/system_stm32f4xx.c **** static void SetSysClock(void);
 190:src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 191:src/system_stm32f4xx.c ****   static void SystemInit_ExtMemCtl(void); 
 192:src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 193:src/system_stm32f4xx.c **** 
 194:src/system_stm32f4xx.c **** /**
 195:src/system_stm32f4xx.c ****   * @}
 196:src/system_stm32f4xx.c ****   */
 197:src/system_stm32f4xx.c **** 
 198:src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Functions
 199:src/system_stm32f4xx.c ****   * @{
 200:src/system_stm32f4xx.c ****   */
 201:src/system_stm32f4xx.c **** 
 202:src/system_stm32f4xx.c **** /**
 203:src/system_stm32f4xx.c ****   * @brief  Setup the microcontroller system
 204:src/system_stm32f4xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 205:src/system_stm32f4xx.c ****   *         SystemFrequency variable.
 206:src/system_stm32f4xx.c ****   * @param  None
 207:src/system_stm32f4xx.c ****   * @retval None
 208:src/system_stm32f4xx.c ****   */
 209:src/system_stm32f4xx.c **** void SystemInit(void)
 210:src/system_stm32f4xx.c **** {
  57              		.loc 1 210 0
  58              		.cfi_startproc
  59              		@ args = 0, pretend = 0, frame = 0
  60              		@ frame_needed = 1, uses_anonymous_args = 0
  61 0000 80B5     		push	{r7, lr}
  62              	.LCFI0:
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 7, -8
  65              		.cfi_offset 14, -4
  66 0002 00AF     		add	r7, sp, #0
  67              	.LCFI1:
  68              		.cfi_def_cfa_register 7
 211:src/system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 212:src/system_stm32f4xx.c ****   /* Set HSION bit */
 213:src/system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  69              		.loc 1 213 0
  70 0004 4FF46053 		mov	r3, #14336
  71 0008 C4F20203 		movt	r3, 16386
  72 000c 4FF46052 		mov	r2, #14336
  73 0010 C4F20202 		movt	r2, 16386
  74 0014 1268     		ldr	r2, [r2]
  75 0016 42F00102 		orr	r2, r2, #1
  76 001a 1A60     		str	r2, [r3]
 214:src/system_stm32f4xx.c **** 
 215:src/system_stm32f4xx.c ****   /* Reset CFGR register */
 216:src/system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
  77              		.loc 1 216 0
  78 001c 4FF46053 		mov	r3, #14336
  79 0020 C4F20203 		movt	r3, 16386
  80 0024 0022     		movs	r2, #0
  81 0026 9A60     		str	r2, [r3, #8]
 217:src/system_stm32f4xx.c **** 
 218:src/system_stm32f4xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 219:src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  82              		.loc 1 219 0
  83 0028 4FF46053 		mov	r3, #14336
  84 002c C4F20203 		movt	r3, 16386
  85 0030 4FF46052 		mov	r2, #14336
  86 0034 C4F20202 		movt	r2, 16386
  87 0038 1268     		ldr	r2, [r2]
  88 003a 22F08472 		bic	r2, r2, #17301504
  89 003e 22F48032 		bic	r2, r2, #65536
  90 0042 1A60     		str	r2, [r3]
 220:src/system_stm32f4xx.c **** 
 221:src/system_stm32f4xx.c ****   /* Reset PLLCFGR register */
 222:src/system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
  91              		.loc 1 222 0
  92 0044 4FF46053 		mov	r3, #14336
  93 0048 C4F20203 		movt	r3, 16386
  94 004c 43F21002 		movw	r2, #12304
  95 0050 C2F20042 		movt	r2, 9216
  96 0054 5A60     		str	r2, [r3, #4]
 223:src/system_stm32f4xx.c **** 
 224:src/system_stm32f4xx.c ****   /* Reset HSEBYP bit */
 225:src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  97              		.loc 1 225 0
  98 0056 4FF46053 		mov	r3, #14336
  99 005a C4F20203 		movt	r3, 16386
 100 005e 4FF46052 		mov	r2, #14336
 101 0062 C4F20202 		movt	r2, 16386
 102 0066 1268     		ldr	r2, [r2]
 103 0068 22F48022 		bic	r2, r2, #262144
 104 006c 1A60     		str	r2, [r3]
 226:src/system_stm32f4xx.c **** 
 227:src/system_stm32f4xx.c ****   /* Disable all interrupts */
 228:src/system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
 105              		.loc 1 228 0
 106 006e 4FF46053 		mov	r3, #14336
 107 0072 C4F20203 		movt	r3, 16386
 108 0076 0022     		movs	r2, #0
 109 0078 DA60     		str	r2, [r3, #12]
 229:src/system_stm32f4xx.c **** 
 230:src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 231:src/system_stm32f4xx.c ****   SystemInit_ExtMemCtl(); 
 232:src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 233:src/system_stm32f4xx.c ****          
 234:src/system_stm32f4xx.c ****   /* Configure the System clock source, PLL Multiplier and Divider factors, 
 235:src/system_stm32f4xx.c ****      AHB/APBx prescalers and Flash settings ----------------------------------*/
 236:src/system_stm32f4xx.c ****   SetSysClock();
 110              		.loc 1 236 0
 111 007a FFF7FEFF 		bl	SetSysClock
 237:src/system_stm32f4xx.c **** 
 238:src/system_stm32f4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 239:src/system_stm32f4xx.c **** #ifdef VECT_TAB_SRAM
 240:src/system_stm32f4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 241:src/system_stm32f4xx.c **** #else
 242:src/system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 112              		.loc 1 242 0
 113 007e 4FF46D43 		mov	r3, #60672
 114 0082 CEF20003 		movt	r3, 57344
 115 0086 4FF00062 		mov	r2, #134217728
 116 008a 9A60     		str	r2, [r3, #8]
 243:src/system_stm32f4xx.c **** #endif
 244:src/system_stm32f4xx.c **** }
 117              		.loc 1 244 0
 118 008c 80BD     		pop	{r7, pc}
 119              		.cfi_endproc
 120              	.LFE110:
 122 008e 00BF     		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 123              		.align	2
 124              		.global	SystemCoreClockUpdate
 125              		.thumb
 126              		.thumb_func
 128              	SystemCoreClockUpdate:
 129              	.LFB111:
 245:src/system_stm32f4xx.c **** 
 246:src/system_stm32f4xx.c **** /**
 247:src/system_stm32f4xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 248:src/system_stm32f4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 249:src/system_stm32f4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 250:src/system_stm32f4xx.c ****   *         other parameters.
 251:src/system_stm32f4xx.c ****   *           
 252:src/system_stm32f4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 253:src/system_stm32f4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 254:src/system_stm32f4xx.c ****   *         based on this variable will be incorrect.         
 255:src/system_stm32f4xx.c ****   *     
 256:src/system_stm32f4xx.c ****   * @note   - The system frequency computed by this function is not the real 
 257:src/system_stm32f4xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 258:src/system_stm32f4xx.c ****   *           constant and the selected clock source:
 259:src/system_stm32f4xx.c ****   *             
 260:src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 261:src/system_stm32f4xx.c ****   *                                              
 262:src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 263:src/system_stm32f4xx.c ****   *                          
 264:src/system_stm32f4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 265:src/system_stm32f4xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 266:src/system_stm32f4xx.c ****   *         
 267:src/system_stm32f4xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 268:src/system_stm32f4xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 269:src/system_stm32f4xx.c ****   *             in voltage and temperature.   
 270:src/system_stm32f4xx.c ****   *    
 271:src/system_stm32f4xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 272:src/system_stm32f4xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 273:src/system_stm32f4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 274:src/system_stm32f4xx.c ****   *              have wrong result.
 275:src/system_stm32f4xx.c ****   *                
 276:src/system_stm32f4xx.c ****   *         - The result of this function could be not correct when using fractional
 277:src/system_stm32f4xx.c ****   *           value for HSE crystal.
 278:src/system_stm32f4xx.c ****   *     
 279:src/system_stm32f4xx.c ****   * @param  None
 280:src/system_stm32f4xx.c ****   * @retval None
 281:src/system_stm32f4xx.c ****   */
 282:src/system_stm32f4xx.c **** void SystemCoreClockUpdate(void)
 283:src/system_stm32f4xx.c **** {
 130              		.loc 1 283 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 24
 133              		@ frame_needed = 1, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 135 0000 80B4     		push	{r7}
 136              	.LCFI2:
 137              		.cfi_def_cfa_offset 4
 138              		.cfi_offset 7, -4
 139 0002 87B0     		sub	sp, sp, #28
 140              	.LCFI3:
 141              		.cfi_def_cfa_offset 32
 142 0004 00AF     		add	r7, sp, #0
 143              	.LCFI4:
 144              		.cfi_def_cfa_register 7
 284:src/system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 145              		.loc 1 284 0
 146 0006 0023     		movs	r3, #0
 147 0008 3B61     		str	r3, [r7, #16]
 148 000a 0023     		movs	r3, #0
 149 000c 7B61     		str	r3, [r7, #20]
 150 000e 0223     		movs	r3, #2
 151 0010 FB60     		str	r3, [r7, #12]
 152 0012 0023     		movs	r3, #0
 153 0014 BB60     		str	r3, [r7, #8]
 154 0016 0223     		movs	r3, #2
 155 0018 7B60     		str	r3, [r7, #4]
 285:src/system_stm32f4xx.c ****   
 286:src/system_stm32f4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 287:src/system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 156              		.loc 1 287 0
 157 001a 4FF46053 		mov	r3, #14336
 158 001e C4F20203 		movt	r3, 16386
 159 0022 9B68     		ldr	r3, [r3, #8]
 160 0024 03F00C03 		and	r3, r3, #12
 161 0028 3B61     		str	r3, [r7, #16]
 288:src/system_stm32f4xx.c **** 
 289:src/system_stm32f4xx.c ****   switch (tmp)
 162              		.loc 1 289 0
 163 002a 3B69     		ldr	r3, [r7, #16]
 164 002c 042B     		cmp	r3, #4
 165 002e 0DD0     		beq	.L4
 166 0030 082B     		cmp	r3, #8
 167 0032 15D0     		beq	.L5
 168 0034 002B     		cmp	r3, #0
 169 0036 63D1     		bne	.L10
 290:src/system_stm32f4xx.c ****   {
 291:src/system_stm32f4xx.c ****     case 0x00:  /* HSI used as system clock source */
 292:src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 170              		.loc 1 292 0
 171 0038 40F20003 		movw	r3, #:lower16:SystemCoreClock
 172 003c C0F20003 		movt	r3, #:upper16:SystemCoreClock
 173 0040 4FF41052 		mov	r2, #9216
 174 0044 C0F2F402 		movt	r2, 244
 175 0048 1A60     		str	r2, [r3]
 293:src/system_stm32f4xx.c ****       break;
 176              		.loc 1 293 0
 177 004a 63E0     		b	.L7
 178              	.L4:
 294:src/system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 295:src/system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 179              		.loc 1 295 0
 180 004c 40F20003 		movw	r3, #:lower16:SystemCoreClock
 181 0050 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 182 0054 4FF49052 		mov	r2, #4608
 183 0058 C0F27A02 		movt	r2, 122
 184 005c 1A60     		str	r2, [r3]
 296:src/system_stm32f4xx.c ****       break;
 185              		.loc 1 296 0
 186 005e 59E0     		b	.L7
 187              	.L5:
 297:src/system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 298:src/system_stm32f4xx.c **** 
 299:src/system_stm32f4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 300:src/system_stm32f4xx.c ****          SYSCLK = PLL_VCO / PLL_P
 301:src/system_stm32f4xx.c ****          */    
 302:src/system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 188              		.loc 1 302 0
 189 0060 4FF46053 		mov	r3, #14336
 190 0064 C4F20203 		movt	r3, 16386
 191 0068 5B68     		ldr	r3, [r3, #4]
 192 006a 03F48003 		and	r3, r3, #4194304
 193 006e 9B0D     		lsrs	r3, r3, #22
 194 0070 BB60     		str	r3, [r7, #8]
 303:src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 195              		.loc 1 303 0
 196 0072 4FF46053 		mov	r3, #14336
 197 0076 C4F20203 		movt	r3, 16386
 198 007a 5B68     		ldr	r3, [r3, #4]
 199 007c 03F03F03 		and	r3, r3, #63
 200 0080 7B60     		str	r3, [r7, #4]
 304:src/system_stm32f4xx.c ****       
 305:src/system_stm32f4xx.c ****       if (pllsource != 0)
 201              		.loc 1 305 0
 202 0082 BB68     		ldr	r3, [r7, #8]
 203 0084 002B     		cmp	r3, #0
 204 0086 13D0     		beq	.L8
 306:src/system_stm32f4xx.c ****       {
 307:src/system_stm32f4xx.c ****         /* HSE used as PLL clock source */
 308:src/system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 205              		.loc 1 308 0
 206 0088 4FF49053 		mov	r3, #4608
 207 008c C0F27A03 		movt	r3, 122
 208 0090 7A68     		ldr	r2, [r7, #4]
 209 0092 B3FBF2F2 		udiv	r2, r3, r2
 210 0096 4FF46053 		mov	r3, #14336
 211 009a C4F20203 		movt	r3, 16386
 212 009e 5968     		ldr	r1, [r3, #4]
 213 00a0 47F6C073 		movw	r3, #32704
 214 00a4 0B40     		ands	r3, r3, r1
 215 00a6 9B09     		lsrs	r3, r3, #6
 216 00a8 03FB02F3 		mul	r3, r3, r2
 217 00ac 7B61     		str	r3, [r7, #20]
 218 00ae 12E0     		b	.L9
 219              	.L8:
 309:src/system_stm32f4xx.c ****       }
 310:src/system_stm32f4xx.c ****       else
 311:src/system_stm32f4xx.c ****       {
 312:src/system_stm32f4xx.c ****         /* HSI used as PLL clock source */
 313:src/system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 220              		.loc 1 313 0
 221 00b0 4FF41053 		mov	r3, #9216
 222 00b4 C0F2F403 		movt	r3, 244
 223 00b8 7A68     		ldr	r2, [r7, #4]
 224 00ba B3FBF2F2 		udiv	r2, r3, r2
 225 00be 4FF46053 		mov	r3, #14336
 226 00c2 C4F20203 		movt	r3, 16386
 227 00c6 5968     		ldr	r1, [r3, #4]
 228 00c8 47F6C073 		movw	r3, #32704
 229 00cc 0B40     		ands	r3, r3, r1
 230 00ce 9B09     		lsrs	r3, r3, #6
 231 00d0 03FB02F3 		mul	r3, r3, r2
 232 00d4 7B61     		str	r3, [r7, #20]
 233              	.L9:
 314:src/system_stm32f4xx.c ****       }
 315:src/system_stm32f4xx.c **** 
 316:src/system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 234              		.loc 1 316 0
 235 00d6 4FF46053 		mov	r3, #14336
 236 00da C4F20203 		movt	r3, 16386
 237 00de 5B68     		ldr	r3, [r3, #4]
 238 00e0 03F44033 		and	r3, r3, #196608
 239 00e4 1B0C     		lsrs	r3, r3, #16
 240 00e6 0133     		adds	r3, r3, #1
 241 00e8 5B00     		lsls	r3, r3, #1
 242 00ea FB60     		str	r3, [r7, #12]
 317:src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 243              		.loc 1 317 0
 244 00ec 7A69     		ldr	r2, [r7, #20]
 245 00ee FB68     		ldr	r3, [r7, #12]
 246 00f0 B2FBF3F2 		udiv	r2, r2, r3
 247 00f4 40F20003 		movw	r3, #:lower16:SystemCoreClock
 248 00f8 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 249 00fc 1A60     		str	r2, [r3]
 318:src/system_stm32f4xx.c ****       break;
 250              		.loc 1 318 0
 251 00fe 09E0     		b	.L7
 252              	.L10:
 319:src/system_stm32f4xx.c ****     default:
 320:src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 253              		.loc 1 320 0
 254 0100 40F20003 		movw	r3, #:lower16:SystemCoreClock
 255 0104 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 256 0108 4FF41052 		mov	r2, #9216
 257 010c C0F2F402 		movt	r2, 244
 258 0110 1A60     		str	r2, [r3]
 321:src/system_stm32f4xx.c ****       break;
 259              		.loc 1 321 0
 260 0112 00BF     		nop
 261              	.L7:
 322:src/system_stm32f4xx.c ****   }
 323:src/system_stm32f4xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 324:src/system_stm32f4xx.c ****   /* Get HCLK prescaler */
 325:src/system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 262              		.loc 1 325 0
 263 0114 4FF46053 		mov	r3, #14336
 264 0118 C4F20203 		movt	r3, 16386
 265 011c 9B68     		ldr	r3, [r3, #8]
 266 011e 03F0F003 		and	r3, r3, #240
 267 0122 1A09     		lsrs	r2, r3, #4
 268 0124 40F20003 		movw	r3, #:lower16:AHBPrescTable
 269 0128 C0F20003 		movt	r3, #:upper16:AHBPrescTable
 270 012c 9B5C     		ldrb	r3, [r3, r2]
 271 012e DBB2     		uxtb	r3, r3
 272 0130 3B61     		str	r3, [r7, #16]
 326:src/system_stm32f4xx.c ****   /* HCLK frequency */
 327:src/system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 273              		.loc 1 327 0
 274 0132 40F20003 		movw	r3, #:lower16:SystemCoreClock
 275 0136 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 276 013a 1A68     		ldr	r2, [r3]
 277 013c 3B69     		ldr	r3, [r7, #16]
 278 013e DA40     		lsrs	r2, r2, r3
 279 0140 40F20003 		movw	r3, #:lower16:SystemCoreClock
 280 0144 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 281 0148 1A60     		str	r2, [r3]
 328:src/system_stm32f4xx.c **** }
 282              		.loc 1 328 0
 283 014a 1C37     		adds	r7, r7, #28
 284 014c BD46     		mov	sp, r7
 285              		@ sp needed
 286 014e 5DF8047B 		ldr	r7, [sp], #4
 287 0152 7047     		bx	lr
 288              		.cfi_endproc
 289              	.LFE111:
 291              		.section	.text.SetSysClock,"ax",%progbits
 292              		.align	2
 293              		.thumb
 294              		.thumb_func
 296              	SetSysClock:
 297              	.LFB112:
 329:src/system_stm32f4xx.c **** 
 330:src/system_stm32f4xx.c **** /**
 331:src/system_stm32f4xx.c ****   * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
 332:src/system_stm32f4xx.c ****   *         AHB/APBx prescalers and Flash settings
 333:src/system_stm32f4xx.c ****   * @Note   This function should be called only once the RCC clock configuration  
 334:src/system_stm32f4xx.c ****   *         is reset to the default reset state (done in SystemInit() function).   
 335:src/system_stm32f4xx.c ****   * @param  None
 336:src/system_stm32f4xx.c ****   * @retval None
 337:src/system_stm32f4xx.c ****   */
 338:src/system_stm32f4xx.c **** static void SetSysClock(void)
 339:src/system_stm32f4xx.c **** {
 298              		.loc 1 339 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 8
 301              		@ frame_needed = 1, uses_anonymous_args = 0
 302              		@ link register save eliminated.
 303 0000 80B4     		push	{r7}
 304              	.LCFI5:
 305              		.cfi_def_cfa_offset 4
 306              		.cfi_offset 7, -4
 307 0002 83B0     		sub	sp, sp, #12
 308              	.LCFI6:
 309              		.cfi_def_cfa_offset 16
 310 0004 00AF     		add	r7, sp, #0
 311              	.LCFI7:
 312              		.cfi_def_cfa_register 7
 340:src/system_stm32f4xx.c **** /******************************************************************************/
 341:src/system_stm32f4xx.c **** /*            PLL (clocked by HSE) used as System clock source                */
 342:src/system_stm32f4xx.c **** /******************************************************************************/
 343:src/system_stm32f4xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 313              		.loc 1 343 0
 314 0006 0023     		movs	r3, #0
 315 0008 7B60     		str	r3, [r7, #4]
 316 000a 0023     		movs	r3, #0
 317 000c 3B60     		str	r3, [r7]
 344:src/system_stm32f4xx.c ****   
 345:src/system_stm32f4xx.c ****   /* Enable HSE */
 346:src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 318              		.loc 1 346 0
 319 000e 4FF46053 		mov	r3, #14336
 320 0012 C4F20203 		movt	r3, 16386
 321 0016 4FF46052 		mov	r2, #14336
 322 001a C4F20202 		movt	r2, 16386
 323 001e 1268     		ldr	r2, [r2]
 324 0020 42F48032 		orr	r2, r2, #65536
 325 0024 1A60     		str	r2, [r3]
 326              	.L13:
 347:src/system_stm32f4xx.c ****  
 348:src/system_stm32f4xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 349:src/system_stm32f4xx.c ****   do
 350:src/system_stm32f4xx.c ****   {
 351:src/system_stm32f4xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 327              		.loc 1 351 0 discriminator 1
 328 0026 4FF46053 		mov	r3, #14336
 329 002a C4F20203 		movt	r3, 16386
 330 002e 1B68     		ldr	r3, [r3]
 331 0030 03F40033 		and	r3, r3, #131072
 332 0034 3B60     		str	r3, [r7]
 352:src/system_stm32f4xx.c ****     StartUpCounter++;
 333              		.loc 1 352 0 discriminator 1
 334 0036 7B68     		ldr	r3, [r7, #4]
 335 0038 0133     		adds	r3, r3, #1
 336 003a 7B60     		str	r3, [r7, #4]
 353:src/system_stm32f4xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 337              		.loc 1 353 0 discriminator 1
 338 003c 3B68     		ldr	r3, [r7]
 339 003e 002B     		cmp	r3, #0
 340 0040 03D1     		bne	.L12
 341 0042 7B68     		ldr	r3, [r7, #4]
 342 0044 B3F5A06F 		cmp	r3, #1280
 343 0048 EDD1     		bne	.L13
 344              	.L12:
 354:src/system_stm32f4xx.c **** 
 355:src/system_stm32f4xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 345              		.loc 1 355 0
 346 004a 4FF46053 		mov	r3, #14336
 347 004e C4F20203 		movt	r3, 16386
 348 0052 1B68     		ldr	r3, [r3]
 349 0054 03F40033 		and	r3, r3, #131072
 350 0058 002B     		cmp	r3, #0
 351 005a 02D0     		beq	.L14
 356:src/system_stm32f4xx.c ****   {
 357:src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x01;
 352              		.loc 1 357 0
 353 005c 0123     		movs	r3, #1
 354 005e 3B60     		str	r3, [r7]
 355 0060 01E0     		b	.L15
 356              	.L14:
 358:src/system_stm32f4xx.c ****   }
 359:src/system_stm32f4xx.c ****   else
 360:src/system_stm32f4xx.c ****   {
 361:src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x00;
 357              		.loc 1 361 0
 358 0062 0023     		movs	r3, #0
 359 0064 3B60     		str	r3, [r7]
 360              	.L15:
 362:src/system_stm32f4xx.c ****   }
 363:src/system_stm32f4xx.c **** 
 364:src/system_stm32f4xx.c ****   if (HSEStatus == (uint32_t)0x01)
 361              		.loc 1 364 0
 362 0066 3B68     		ldr	r3, [r7]
 363 0068 012B     		cmp	r3, #1
 364 006a 40F08280 		bne	.L16
 365:src/system_stm32f4xx.c ****   {
 366:src/system_stm32f4xx.c ****     /* Enable high performance mode, System frequency up to 168 MHz */
 367:src/system_stm32f4xx.c ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 365              		.loc 1 367 0
 366 006e 4FF46053 		mov	r3, #14336
 367 0072 C4F20203 		movt	r3, 16386
 368 0076 4FF46052 		mov	r2, #14336
 369 007a C4F20202 		movt	r2, 16386
 370 007e 126C     		ldr	r2, [r2, #64]
 371 0080 42F08052 		orr	r2, r2, #268435456
 372 0084 1A64     		str	r2, [r3, #64]
 368:src/system_stm32f4xx.c ****     PWR->CR |= PWR_CR_PMODE;  
 373              		.loc 1 368 0
 374 0086 4FF4E043 		mov	r3, #28672
 375 008a C4F20003 		movt	r3, 16384
 376 008e 4FF4E042 		mov	r2, #28672
 377 0092 C4F20002 		movt	r2, 16384
 378 0096 1268     		ldr	r2, [r2]
 379 0098 42F48042 		orr	r2, r2, #16384
 380 009c 1A60     		str	r2, [r3]
 369:src/system_stm32f4xx.c **** 
 370:src/system_stm32f4xx.c ****     /* HCLK = SYSCLK / 1*/
 371:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 381              		.loc 1 371 0
 382 009e 4FF46053 		mov	r3, #14336
 383 00a2 C4F20203 		movt	r3, 16386
 384 00a6 4FF46052 		mov	r2, #14336
 385 00aa C4F20202 		movt	r2, 16386
 386 00ae 9268     		ldr	r2, [r2, #8]
 387 00b0 9A60     		str	r2, [r3, #8]
 372:src/system_stm32f4xx.c ****       
 373:src/system_stm32f4xx.c ****     /* PCLK2 = HCLK / 2*/
 374:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 388              		.loc 1 374 0
 389 00b2 4FF46053 		mov	r3, #14336
 390 00b6 C4F20203 		movt	r3, 16386
 391 00ba 4FF46052 		mov	r2, #14336
 392 00be C4F20202 		movt	r2, 16386
 393 00c2 9268     		ldr	r2, [r2, #8]
 394 00c4 42F40042 		orr	r2, r2, #32768
 395 00c8 9A60     		str	r2, [r3, #8]
 375:src/system_stm32f4xx.c ****     
 376:src/system_stm32f4xx.c ****     /* PCLK1 = HCLK / 4*/
 377:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 396              		.loc 1 377 0
 397 00ca 4FF46053 		mov	r3, #14336
 398 00ce C4F20203 		movt	r3, 16386
 399 00d2 4FF46052 		mov	r2, #14336
 400 00d6 C4F20202 		movt	r2, 16386
 401 00da 9268     		ldr	r2, [r2, #8]
 402 00dc 42F4A052 		orr	r2, r2, #5120
 403 00e0 9A60     		str	r2, [r3, #8]
 378:src/system_stm32f4xx.c **** 
 379:src/system_stm32f4xx.c ****     /* Configure the main PLL */
 380:src/system_stm32f4xx.c ****     RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 404              		.loc 1 380 0
 405 00e2 4FF46053 		mov	r3, #14336
 406 00e6 C4F20203 		movt	r3, 16386
 407 00ea 45F20842 		movw	r2, #21512
 408 00ee C0F24072 		movt	r2, 1856
 409 00f2 5A60     		str	r2, [r3, #4]
 381:src/system_stm32f4xx.c ****                    (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 382:src/system_stm32f4xx.c **** 
 383:src/system_stm32f4xx.c ****     /* Enable the main PLL */
 384:src/system_stm32f4xx.c ****     RCC->CR |= RCC_CR_PLLON;
 410              		.loc 1 384 0
 411 00f4 4FF46053 		mov	r3, #14336
 412 00f8 C4F20203 		movt	r3, 16386
 413 00fc 4FF46052 		mov	r2, #14336
 414 0100 C4F20202 		movt	r2, 16386
 415 0104 1268     		ldr	r2, [r2]
 416 0106 42F08072 		orr	r2, r2, #16777216
 417 010a 1A60     		str	r2, [r3]
 385:src/system_stm32f4xx.c **** 
 386:src/system_stm32f4xx.c ****     /* Wait till the main PLL is ready */
 387:src/system_stm32f4xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 418              		.loc 1 387 0
 419 010c 00BF     		nop
 420              	.L17:
 421              		.loc 1 387 0 is_stmt 0 discriminator 1
 422 010e 4FF46053 		mov	r3, #14336
 423 0112 C4F20203 		movt	r3, 16386
 424 0116 1B68     		ldr	r3, [r3]
 425 0118 03F00073 		and	r3, r3, #33554432
 426 011c 002B     		cmp	r3, #0
 427 011e F6D0     		beq	.L17
 388:src/system_stm32f4xx.c ****     {
 389:src/system_stm32f4xx.c ****     }
 390:src/system_stm32f4xx.c ****    
 391:src/system_stm32f4xx.c ****     /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
 392:src/system_stm32f4xx.c ****     FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 428              		.loc 1 392 0 is_stmt 1
 429 0120 4FF47053 		mov	r3, #15360
 430 0124 C4F20203 		movt	r3, 16386
 431 0128 40F20562 		movw	r2, #1541
 432 012c 1A60     		str	r2, [r3]
 393:src/system_stm32f4xx.c **** 
 394:src/system_stm32f4xx.c ****     /* Select the main PLL as system clock source */
 395:src/system_stm32f4xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 433              		.loc 1 395 0
 434 012e 4FF46053 		mov	r3, #14336
 435 0132 C4F20203 		movt	r3, 16386
 436 0136 4FF46052 		mov	r2, #14336
 437 013a C4F20202 		movt	r2, 16386
 438 013e 9268     		ldr	r2, [r2, #8]
 439 0140 22F00302 		bic	r2, r2, #3
 440 0144 9A60     		str	r2, [r3, #8]
 396:src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_SW_PLL;
 441              		.loc 1 396 0
 442 0146 4FF46053 		mov	r3, #14336
 443 014a C4F20203 		movt	r3, 16386
 444 014e 4FF46052 		mov	r2, #14336
 445 0152 C4F20202 		movt	r2, 16386
 446 0156 9268     		ldr	r2, [r2, #8]
 447 0158 42F00202 		orr	r2, r2, #2
 448 015c 9A60     		str	r2, [r3, #8]
 397:src/system_stm32f4xx.c **** 
 398:src/system_stm32f4xx.c ****     /* Wait till the main PLL is used as system clock source */
 399:src/system_stm32f4xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 449              		.loc 1 399 0
 450 015e 00BF     		nop
 451              	.L18:
 452              		.loc 1 399 0 is_stmt 0 discriminator 1
 453 0160 4FF46053 		mov	r3, #14336
 454 0164 C4F20203 		movt	r3, 16386
 455 0168 9B68     		ldr	r3, [r3, #8]
 456 016a 03F00C03 		and	r3, r3, #12
 457 016e 082B     		cmp	r3, #8
 458 0170 F6D1     		bne	.L18
 459              	.L16:
 400:src/system_stm32f4xx.c ****     {
 401:src/system_stm32f4xx.c ****     }
 402:src/system_stm32f4xx.c ****   }
 403:src/system_stm32f4xx.c ****   else
 404:src/system_stm32f4xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock
 405:src/system_stm32f4xx.c ****          configuration. User can add here some code to deal with this error */
 406:src/system_stm32f4xx.c ****   }
 407:src/system_stm32f4xx.c **** 
 408:src/system_stm32f4xx.c **** /******************************************************************************/
 409:src/system_stm32f4xx.c **** /*                        I2S clock configuration                             */
 410:src/system_stm32f4xx.c **** /******************************************************************************/
 411:src/system_stm32f4xx.c ****   /* PLLI2S clock used as I2S clock source */
 412:src/system_stm32f4xx.c ****   RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 460              		.loc 1 412 0 is_stmt 1
 461 0172 4FF46053 		mov	r3, #14336
 462 0176 C4F20203 		movt	r3, 16386
 463 017a 4FF46052 		mov	r2, #14336
 464 017e C4F20202 		movt	r2, 16386
 465 0182 9268     		ldr	r2, [r2, #8]
 466 0184 22F40002 		bic	r2, r2, #8388608
 467 0188 9A60     		str	r2, [r3, #8]
 413:src/system_stm32f4xx.c **** 
 414:src/system_stm32f4xx.c ****   /* Configure PLLI2S */
 415:src/system_stm32f4xx.c ****   RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 468              		.loc 1 415 0
 469 018a 4FF46053 		mov	r3, #14336
 470 018e C4F20203 		movt	r3, 16386
 471 0192 4FF44052 		mov	r2, #12288
 472 0196 C5F20002 		movt	r2, 20480
 473 019a C3F88420 		str	r2, [r3, #132]
 416:src/system_stm32f4xx.c **** 
 417:src/system_stm32f4xx.c ****   /* Enable PLLI2S */
 418:src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 474              		.loc 1 418 0
 475 019e 4FF46053 		mov	r3, #14336
 476 01a2 C4F20203 		movt	r3, 16386
 477 01a6 4FF46052 		mov	r2, #14336
 478 01aa C4F20202 		movt	r2, 16386
 479 01ae 1268     		ldr	r2, [r2]
 480 01b0 42F08062 		orr	r2, r2, #67108864
 481 01b4 1A60     		str	r2, [r3]
 419:src/system_stm32f4xx.c **** 
 420:src/system_stm32f4xx.c ****   /* Wait till PLLI2S is ready */
 421:src/system_stm32f4xx.c ****   while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 482              		.loc 1 421 0
 483 01b6 00BF     		nop
 484              	.L19:
 485              		.loc 1 421 0 is_stmt 0 discriminator 1
 486 01b8 4FF46053 		mov	r3, #14336
 487 01bc C4F20203 		movt	r3, 16386
 488 01c0 1B68     		ldr	r3, [r3]
 489 01c2 03F00063 		and	r3, r3, #134217728
 490 01c6 002B     		cmp	r3, #0
 491 01c8 F6D0     		beq	.L19
 422:src/system_stm32f4xx.c ****   {
 423:src/system_stm32f4xx.c ****   }
 424:src/system_stm32f4xx.c **** }
 492              		.loc 1 424 0 is_stmt 1
 493 01ca 0C37     		adds	r7, r7, #12
 494 01cc BD46     		mov	sp, r7
 495              		@ sp needed
 496 01ce 5DF8047B 		ldr	r7, [sp], #4
 497 01d2 7047     		bx	lr
 498              		.cfi_endproc
 499              	.LFE112:
 501              		.text
 502              	.Letext0:
 503              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 504              		.file 3 "/usr/include/newlib/stdint.h"
 505              		.file 4 "libs/CMSIS/Include/core_cm4.h"
 506              		.file 5 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32f4xx.c
     /tmp/ccHnEhl1.s:24     .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccHnEhl1.s:21     .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccHnEhl1.s:31     .data.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccHnEhl1.s:28     .data.AHBPrescTable:0000000000000000 $d
     /tmp/ccHnEhl1.s:49     .text.SystemInit:0000000000000000 $t
     /tmp/ccHnEhl1.s:54     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccHnEhl1.s:296    .text.SetSysClock:0000000000000000 SetSysClock
     /tmp/ccHnEhl1.s:123    .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccHnEhl1.s:128    .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccHnEhl1.s:292    .text.SetSysClock:0000000000000000 $t
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
